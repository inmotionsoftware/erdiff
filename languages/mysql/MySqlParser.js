// Generated from MySqlParser.g4 by ANTLR 4.9
// jshint ignore: start
const antlr4 = require('antlr4')
const MySqlParserListener = require('./MySqlParserListener')

const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0003\u041d\u190e\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a",
    "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e",
    "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#",
    "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004",
    "*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004",
    "1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u0004",
    "8\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004",
    "?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004",
    "F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004",
    "M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004",
    "T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004",
    "[\t[\u0004\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004",
    "b\tb\u0004c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004",
    "i\ti\u0004j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004",
    "p\tp\u0004q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004",
    "w\tw\u0004x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004",
    "~\t~\u0004\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004",
    "\u0082\t\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t",
    "\u0085\u0004\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004",
    "\u0089\t\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t",
    "\u008c\u0004\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004",
    "\u0090\t\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t",
    "\u0093\u0004\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004",
    "\u0097\t\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t",
    "\u009a\u0004\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004",
    "\u009e\t\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t",
    "\u00a1\u0004\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004",
    "\u00a5\t\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t",
    "\u00a8\u0004\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004",
    "\u00ac\t\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t",
    "\u00af\u0004\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004",
    "\u00b3\t\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t",
    "\u00b6\u0004\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004",
    "\u00ba\t\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t",
    "\u00bd\u0004\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004",
    "\u00c1\t\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t",
    "\u00c4\u0004\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004",
    "\u00c8\t\u00c8\u0004\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0004\u00cb\t",
    "\u00cb\u0004\u00cc\t\u00cc\u0004\u00cd\t\u00cd\u0004\u00ce\t\u00ce\u0004",
    "\u00cf\t\u00cf\u0004\u00d0\t\u00d0\u0004\u00d1\t\u00d1\u0004\u00d2\t",
    "\u00d2\u0004\u00d3\t\u00d3\u0004\u00d4\t\u00d4\u0004\u00d5\t\u00d5\u0004",
    "\u00d6\t\u00d6\u0004\u00d7\t\u00d7\u0004\u00d8\t\u00d8\u0004\u00d9\t",
    "\u00d9\u0004\u00da\t\u00da\u0004\u00db\t\u00db\u0004\u00dc\t\u00dc\u0004",
    "\u00dd\t\u00dd\u0004\u00de\t\u00de\u0004\u00df\t\u00df\u0004\u00e0\t",
    "\u00e0\u0004\u00e1\t\u00e1\u0004\u00e2\t\u00e2\u0004\u00e3\t\u00e3\u0004",
    "\u00e4\t\u00e4\u0004\u00e5\t\u00e5\u0004\u00e6\t\u00e6\u0004\u00e7\t",
    "\u00e7\u0004\u00e8\t\u00e8\u0004\u00e9\t\u00e9\u0004\u00ea\t\u00ea\u0004",
    "\u00eb\t\u00eb\u0004\u00ec\t\u00ec\u0004\u00ed\t\u00ed\u0004\u00ee\t",
    "\u00ee\u0004\u00ef\t\u00ef\u0004\u00f0\t\u00f0\u0004\u00f1\t\u00f1\u0004",
    "\u00f2\t\u00f2\u0004\u00f3\t\u00f3\u0004\u00f4\t\u00f4\u0004\u00f5\t",
    "\u00f5\u0004\u00f6\t\u00f6\u0004\u00f7\t\u00f7\u0004\u00f8\t\u00f8\u0004",
    "\u00f9\t\u00f9\u0004\u00fa\t\u00fa\u0004\u00fb\t\u00fb\u0004\u00fc\t",
    "\u00fc\u0004\u00fd\t\u00fd\u0004\u00fe\t\u00fe\u0004\u00ff\t\u00ff\u0004",
    "\u0100\t\u0100\u0004\u0101\t\u0101\u0004\u0102\t\u0102\u0004\u0103\t",
    "\u0103\u0004\u0104\t\u0104\u0004\u0105\t\u0105\u0004\u0106\t\u0106\u0004",
    "\u0107\t\u0107\u0004\u0108\t\u0108\u0004\u0109\t\u0109\u0004\u010a\t",
    "\u010a\u0004\u010b\t\u010b\u0004\u010c\t\u010c\u0004\u010d\t\u010d\u0004",
    "\u010e\t\u010e\u0004\u010f\t\u010f\u0004\u0110\t\u0110\u0004\u0111\t",
    "\u0111\u0004\u0112\t\u0112\u0004\u0113\t\u0113\u0004\u0114\t\u0114\u0004",
    "\u0115\t\u0115\u0004\u0116\t\u0116\u0004\u0117\t\u0117\u0004\u0118\t",
    "\u0118\u0004\u0119\t\u0119\u0004\u011a\t\u011a\u0004\u011b\t\u011b\u0004",
    "\u011c\t\u011c\u0004\u011d\t\u011d\u0004\u011e\t\u011e\u0004\u011f\t",
    "\u011f\u0004\u0120\t\u0120\u0004\u0121\t\u0121\u0004\u0122\t\u0122\u0004",
    "\u0123\t\u0123\u0004\u0124\t\u0124\u0004\u0125\t\u0125\u0004\u0126\t",
    "\u0126\u0004\u0127\t\u0127\u0004\u0128\t\u0128\u0004\u0129\t\u0129\u0004",
    "\u012a\t\u012a\u0004\u012b\t\u012b\u0004\u012c\t\u012c\u0004\u012d\t",
    "\u012d\u0004\u012e\t\u012e\u0004\u012f\t\u012f\u0004\u0130\t\u0130\u0004",
    "\u0131\t\u0131\u0004\u0132\t\u0132\u0004\u0133\t\u0133\u0004\u0134\t",
    "\u0134\u0004\u0135\t\u0135\u0004\u0136\t\u0136\u0004\u0137\t\u0137\u0004",
    "\u0138\t\u0138\u0004\u0139\t\u0139\u0004\u013a\t\u013a\u0004\u013b\t",
    "\u013b\u0004\u013c\t\u013c\u0004\u013d\t\u013d\u0003\u0002\u0005\u0002",
    "\u027c\n\u0002\u0003\u0002\u0005\u0002\u027f\n\u0002\u0003\u0002\u0003",
    "\u0002\u0003\u0003\u0003\u0003\u0005\u0003\u0285\n\u0003\u0003\u0003",
    "\u0005\u0003\u0288\n\u0003\u0003\u0003\u0007\u0003\u028b\n\u0003\f\u0003",
    "\u000e\u0003\u028e\u000b\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u0292",
    "\n\u0003\u0003\u0003\u0005\u0003\u0295\n\u0003\u0003\u0003\u0005\u0003",
    "\u0298\n\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u02a1\n\u0004\u0003\u0005",
    "\u0003\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0005\u0006\u02c8\n\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0005\u0007\u02d4\n\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u02df\n\b\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u02f0\n\t\u0003\n\u0003\n",
    "\u0003\n\u0005\n\u02f5\n\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0005\u000b\u0301\n\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0005\f\u031c\n\f\u0003\r\u0003\r\u0003\r\u0003\r",
    "\u0003\r\u0003\r\u0003\r\u0005\r\u0325\n\r\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0005\u000e\u032a\n\u000e\u0003\u000e\u0003\u000e\u0007\u000e",
    "\u032e\n\u000e\f\u000e\u000e\u000e\u0331\u000b\u000e\u0003\u000f\u0003",
    "\u000f\u0005\u000f\u0335\n\u000f\u0003\u000f\u0003\u000f\u0005\u000f",
    "\u0339\n\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u0342\n\u000f\u0003\u000f",
    "\u0005\u000f\u0345\n\u000f\u0003\u000f\u0005\u000f\u0348\n\u000f\u0003",
    "\u000f\u0003\u000f\u0005\u000f\u034c\n\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u0010\u0003\u0010\u0005\u0010\u0353\n\u0010\u0003",
    "\u0010\u0005\u0010\u0356\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0005\u0010\u035b\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0007\u0010\u0361\n\u0010\f\u0010\u000e\u0010\u0364\u000b\u0010",
    "\u0003\u0010\u0003\u0010\u0005\u0010\u0368\n\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0005\u0010\u036d\n\u0010\u0003\u0010\u0007\u0010",
    "\u0370\n\u0010\f\u0010\u000e\u0010\u0373\u000b\u0010\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0005\u0011\u037e\n\u0011\u0003\u0011\u0005\u0011",
    "\u0381\n\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u0385\n\u0011\u0003",
    "\u0011\u0005\u0011\u0388\n\u0011\u0003\u0011\u0003\u0011\u0005\u0011",
    "\u038c\n\u0011\u0003\u0011\u0005\u0011\u038f\n\u0011\u0003\u0011\u0003",
    "\u0011\u0005\u0011\u0393\n\u0011\u0003\u0011\u0005\u0011\u0396\n\u0011",
    "\u0003\u0011\u0005\u0011\u0399\n\u0011\u0003\u0011\u0003\u0011\u0005",
    "\u0011\u039d\n\u0011\u0003\u0011\u0005\u0011\u03a0\n\u0011\u0003\u0011",
    "\u0003\u0011\u0005\u0011\u03a4\n\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0012\u0003\u0012\u0005\u0012\u03aa\n\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0005\u0012\u03b0\n\u0012\u0003\u0012\u0003",
    "\u0012\u0007\u0012\u03b4\n\u0012\f\u0012\u000e\u0012\u03b7\u000b\u0012",
    "\u0003\u0012\u0003\u0012\u0007\u0012\u03bb\n\u0012\f\u0012\u000e\u0012",
    "\u03be\u000b\u0012\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0005",
    "\u0013\u03c4\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0005\u0013\u03ca\n\u0013\u0003\u0013\u0003\u0013\u0007\u0013\u03ce",
    "\n\u0013\f\u0013\u000e\u0013\u03d1\u000b\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0007\u0013\u03d7\n\u0013\f\u0013\u000e\u0013",
    "\u03da\u000b\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u03de\n\u0013",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0007\u0014\u03ec\n\u0014\f\u0014\u000e\u0014\u03ef\u000b\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0005\u0015\u03f5\n\u0015",
    "\u0003\u0015\u0003\u0015\u0005\u0015\u03f9\n\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0005\u0015\u0403\n\u0015\u0003\u0015\u0003\u0015\u0005\u0015",
    "\u0407\n\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u040b\n\u0015\u0003",
    "\u0015\u0003\u0015\u0005\u0015\u040f\n\u0015\u0003\u0015\u0003\u0015",
    "\u0005\u0015\u0413\n\u0015\u0003\u0015\u0007\u0015\u0416\n\u0015\f\u0015",
    "\u000e\u0015\u0419\u000b\u0015\u0005\u0015\u041b\n\u0015\u0003\u0015",
    "\u0005\u0015\u041e\n\u0015\u0003\u0015\u0005\u0015\u0421\n\u0015\u0003",
    "\u0015\u0005\u0015\u0424\n\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0005\u0015\u042a\n\u0015\u0003\u0015\u0003\u0015\u0005",
    "\u0015\u042e\n\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0005\u0015\u0434\n\u0015\u0003\u0015\u0007\u0015\u0437\n\u0015\f\u0015",
    "\u000e\u0015\u043a\u000b\u0015\u0005\u0015\u043c\n\u0015\u0003\u0015",
    "\u0005\u0015\u043f\n\u0015\u0005\u0015\u0441\n\u0015\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0005\u0016\u044c\n\u0016\u0003\u0016\u0003\u0016",
    "\u0005\u0016\u0450\n\u0016\u0003\u0016\u0005\u0016\u0453\n\u0016\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005",
    "\u0017\u0461\n\u0017\u0003\u0017\u0005\u0017\u0464\n\u0017\u0003\u0017",
    "\u0003\u0017\u0005\u0017\u0468\n\u0017\u0003\u0017\u0005\u0017\u046b",
    "\n\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u046f\n\u0017\u0003\u0017",
    "\u0005\u0017\u0472\n\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u0476",
    "\n\u0017\u0003\u0017\u0005\u0017\u0479\n\u0017\u0003\u0017\u0003\u0017",
    "\u0005\u0017\u047d\n\u0017\u0003\u0017\u0005\u0017\u0480\n\u0017\u0003",
    "\u0017\u0005\u0017\u0483\n\u0017\u0003\u0017\u0003\u0017\u0005\u0017",
    "\u0487\n\u0017\u0003\u0017\u0005\u0017\u048a\n\u0017\u0003\u0017\u0003",
    "\u0017\u0005\u0017\u048e\n\u0017\u0003\u0017\u0003\u0017\u0003\u0018",
    "\u0003\u0018\u0005\u0018\u0494\n\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u04a1\n\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u04a8\n",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u04ad\n\u0019",
    "\u0003\u0019\u0005\u0019\u04b0\n\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0005\u0019\u04b5\n\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u04bd\n\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u04c3\n\u0019",
    "\u0003\u0019\u0003\u0019\u0005\u0019\u04c7\n\u0019\u0003\u001a\u0005",
    "\u001a\u04ca\n\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a",
    "\u04cf\n\u001a\u0003\u001a\u0005\u001a\u04d2\n\u001a\u0003\u001a\u0003",
    "\u001a\u0005\u001a\u04d6\n\u001a\u0003\u001a\u0005\u001a\u04d9\n\u001a",
    "\u0003\u001a\u0003\u001a\u0005\u001a\u04dd\n\u001a\u0003\u001a\u0005",
    "\u001a\u04e0\n\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0005\u001b\u04e8\n\u001b\u0005\u001b\u04ea",
    "\n\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0007\u001c\u04ef\n\u001c",
    "\f\u001c\u000e\u001c\u04f2\u000b\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0005\u001c\u04f7\n\u001c\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0007\u001c\u04fd\n\u001c\f\u001c\u000e\u001c\u0500\u000b",
    "\u001c\u0005\u001c\u0502\n\u001c\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0007\u001c\u0507\n\u001c\f\u001c\u000e\u001c\u050a\u000b\u001c\u0005",
    "\u001c\u050c\n\u001c\u0005\u001c\u050e\n\u001c\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0005\u001d\u0514\n\u001d\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u051a\n\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0005\u001f\u052b\n\u001f\u0003 \u0003 \u0003",
    " \u0003 \u0003 \u0005 \u0532\n \u0003!\u0003!\u0003!\u0003\"\u0003\"",
    "\u0005\"\u0539\n\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0005\"\u0544\n\"\u0003#\u0005#\u0547\n#\u0003#\u0003",
    "#\u0003#\u0003$\u0003$\u0003$\u0003%\u0003%\u0003%\u0003%\u0003%\u0005",
    "%\u0554\n%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0005%\u0561\n%\u0003%\u0003%\u0003%\u0005%\u0566\n",
    "%\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0005&\u0576\n&\u0003\'\u0003\'\u0003",
    "\'\u0003\'\u0007\'\u057c\n\'\f\'\u000e\'\u057f\u000b\'\u0003\'\u0003",
    "\'\u0003(\u0003(\u0003(\u0003(\u0003(\u0005(\u0588\n(\u0003)\u0003)",
    "\u0007)\u058c\n)\f)\u000e)\u058f\u000b)\u0003*\u0003*\u0003*\u0003*",
    "\u0003*\u0003*\u0003*\u0005*\u0598\n*\u0003*\u0005*\u059b\n*\u0003*",
    "\u0003*\u0003*\u0005*\u05a0\n*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0005*\u05ad\n*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0005*\u05b4\n*\u0003*\u0003*\u0003*\u0003*\u0003*\u0005",
    "*\u05bb\n*\u0005*\u05bd\n*\u0003*\u0003*\u0003*\u0003*\u0003*\u0005",
    "*\u05c4\n*\u0003+\u0003+\u0005+\u05c8\n+\u0005+\u05ca\n+\u0003+\u0003",
    "+\u0003+\u0005+\u05cf\n+\u0003+\u0005+\u05d2\n+\u0003+\u0003+\u0007",
    "+\u05d6\n+\f+\u000e+\u05d9\u000b+\u0003+\u0003+\u0005+\u05dd\n+\u0005",
    "+\u05df\n+\u0003+\u0003+\u0005+\u05e3\n+\u0003+\u0005+\u05e6\n+\u0003",
    "+\u0005+\u05e9\n+\u0003+\u0003+\u0007+\u05ed\n+\f+\u000e+\u05f0\u000b",
    "+\u0003+\u0003+\u0005+\u05f4\n+\u0005+\u05f6\n+\u0003+\u0003+\u0003",
    "+\u0005+\u05fb\n+\u0003+\u0003+\u0003+\u0003+\u0003+\u0005+\u0602\n",
    "+\u0005+\u0604\n+\u0003+\u0003+\u0003+\u0003+\u0003+\u0005+\u060b\n",
    "+\u0003,\u0003,\u0003,\u0005,\u0610\n,\u0003,\u0003,\u0005,\u0614\n",
    ",\u0003,\u0005,\u0617\n,\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0005",
    "-\u061f\n-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0005-\u0627\n",
    "-\u0005-\u0629\n-\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0005.\u0631",
    "\n.\u0003/\u0003/\u0005/\u0635\n/\u0003/\u0005/\u0638\n/\u0003/\u0003",
    "/\u0007/\u063c\n/\f/\u000e/\u063f\u000b/\u0003/\u0003/\u0005/\u0643",
    "\n/\u0003/\u0005/\u0646\n/\u0003/\u0003/\u0007/\u064a\n/\f/\u000e/\u064d",
    "\u000b/\u0005/\u064f\n/\u00030\u00030\u00050\u0653\n0\u00030\u00030",
    "\u00030\u00050\u0658\n0\u00030\u00030\u00030\u00050\u065d\n0\u00030",
    "\u00030\u00050\u0661\n0\u00030\u00030\u00030\u00050\u0666\n0\u00030",
    "\u00050\u0669\n0\u00030\u00030\u00050\u066d\n0\u00030\u00030\u00050",
    "\u0671\n0\u00030\u00030\u00050\u0675\n0\u00030\u00030\u00050\u0679\n",
    "0\u00030\u00030\u00030\u00050\u067e\n0\u00030\u00030\u00030\u00050\u0683",
    "\n0\u00030\u00030\u00030\u00050\u0688\n0\u00030\u00030\u00030\u0003",
    "0\u00050\u068e\n0\u00030\u00030\u00030\u00050\u0693\n0\u00030\u0003",
    "0\u00030\u00050\u0698\n0\u00030\u00030\u00030\u00030\u00050\u069e\n",
    "0\u00030\u00030\u00030\u00050\u06a3\n0\u00030\u00030\u00030\u00050\u06a8",
    "\n0\u00030\u00030\u00030\u00050\u06ad\n0\u00030\u00030\u00030\u0005",
    "0\u06b2\n0\u00030\u00030\u00030\u00050\u06b7\n0\u00030\u00030\u0003",
    "0\u00050\u06bc\n0\u00030\u00030\u00030\u00050\u06c1\n0\u00030\u0003",
    "0\u00030\u00050\u06c6\n0\u00030\u00030\u00030\u00050\u06cb\n0\u0003",
    "0\u00030\u00030\u00050\u06d0\n0\u00030\u00030\u00030\u00030\u00050\u06d6",
    "\n0\u00030\u00030\u00030\u00050\u06db\n0\u00030\u00030\u00030\u0003",
    "0\u00050\u06e1\n0\u00031\u00031\u00031\u00032\u00032\u00032\u00032\u0003",
    "2\u00052\u06eb\n2\u00032\u00032\u00032\u00032\u00032\u00052\u06f2\n",
    "2\u00052\u06f4\n2\u00032\u00032\u00032\u00032\u00072\u06fa\n2\f2\u000e",
    "2\u06fd\u000b2\u00032\u00032\u00052\u0701\n2\u00033\u00053\u0704\n3",
    "\u00033\u00033\u00033\u00033\u00033\u00033\u00053\u070c\n3\u00033\u0003",
    "3\u00033\u00033\u00053\u0712\n3\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00053\u0722",
    "\n3\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00053\u072e\n3\u00053\u0730\n3\u00034\u00054\u0733\n4\u00034\u0003",
    "4\u00034\u00034\u00034\u00034\u00054\u073b\n4\u00034\u00034\u00034\u0003",
    "4\u00054\u0741\n4\u00034\u00034\u00034\u00034\u00054\u0747\n4\u0003",
    "5\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00075\u0752",
    "\n5\f5\u000e5\u0755\u000b5\u00035\u00035\u00075\u0759\n5\f5\u000e5\u075c",
    "\u000b5\u00035\u00035\u00035\u00075\u0761\n5\f5\u000e5\u0764\u000b5",
    "\u00055\u0766\n5\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u0007",
    "5\u076f\n5\f5\u000e5\u0772\u000b5\u00035\u00035\u00035\u00075\u0777",
    "\n5\f5\u000e5\u077a\u000b5\u00055\u077c\n5\u00035\u00035\u00035\u0003",
    "5\u00035\u00035\u00035\u00035\u00075\u0786\n5\f5\u000e5\u0789\u000b",
    "5\u00035\u00035\u00075\u078d\n5\f5\u000e5\u0790\u000b5\u00035\u0003",
    "5\u00035\u00075\u0795\n5\f5\u000e5\u0798\u000b5\u00055\u079a\n5\u0003",
    "5\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00075\u07a4\n5\f",
    "5\u000e5\u07a7\u000b5\u00035\u00035\u00075\u07ab\n5\f5\u000e5\u07ae",
    "\u000b5\u00035\u00035\u00035\u00075\u07b3\n5\f5\u000e5\u07b6\u000b5",
    "\u00055\u07b8\n5\u00035\u00035\u00035\u00075\u07bd\n5\f5\u000e5\u07c0",
    "\u000b5\u00035\u00035\u00035\u00075\u07c5\n5\f5\u000e5\u07c8\u000b5",
    "\u00055\u07ca\n5\u00055\u07cc\n5\u00036\u00036\u00036\u00056\u07d1\n",
    "6\u00037\u00037\u00037\u00037\u00067\u07d7\n7\r7\u000e7\u07d8\u0003",
    "7\u00037\u00038\u00038\u00038\u00078\u07e0\n8\f8\u000e8\u07e3\u000b",
    "8\u00039\u00059\u07e6\n9\u00039\u00039\u00059\u07ea\n9\u00039\u0003",
    "9\u00039\u00059\u07ef\n9\u00039\u00039\u00039\u00039\u00059\u07f5\n",
    "9\u00039\u00039\u00039\u00039\u00059\u07fb\n9\u00039\u00039\u00039\u0005",
    "9\u0800\n9\u00039\u00039\u00039\u00059\u0805\n9\u00039\u00039\u0003",
    "9\u00059\u080a\n9\u00039\u00039\u00039\u00059\u080f\n9\u00039\u0005",
    "9\u0812\n9\u0003:\u0003:\u0003:\u0005:\u0817\n:\u0003:\u0006:\u081a",
    "\n:\r:\u000e:\u081b\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003",
    ":\u0003:\u0005:\u0826\n:\u0003;\u0003;\u0005;\u082a\n;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0005;\u0831\n;\u0003;\u0003;\u0003;\u0005;\u0836",
    "\n;\u0003;\u0005;\u0839\n;\u0003;\u0003;\u0003;\u0005;\u083e\n;\u0003",
    ";\u0005;\u0841\n;\u0003;\u0003;\u0005;\u0845\n;\u0003;\u0003;\u0005",
    ";\u0849\n;\u0003<\u0003<\u0003<\u0003<\u0007<\u084f\n<\f<\u000e<\u0852",
    "\u000b<\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003>\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0005>\u0864\n>\u0003",
    ">\u0005>\u0867\n>\u0003>\u0005>\u086a\n>\u0003>\u0003>\u0005>\u086e",
    "\n>\u0003>\u0003>\u0003?\u0003?\u0003?\u0003?\u0007?\u0876\n?\f?\u000e",
    "?\u0879\u000b?\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003",
    "@\u0007@\u0883\n@\f@\u000e@\u0886\u000b@\u0003@\u0003@\u0003A\u0003",
    "A\u0005A\u088c\nA\u0003A\u0005A\u088f\nA\u0003A\u0003A\u0003A\u0003",
    "A\u0003A\u0007A\u0896\nA\fA\u000eA\u0899\u000bA\u0005A\u089b\nA\u0003",
    "A\u0005A\u089e\nA\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003",
    "B\u0003B\u0005B\u08a9\nB\u0003B\u0005B\u08ac\nB\u0003B\u0003B\u0005",
    "B\u08b0\nB\u0003B\u0003B\u0003C\u0003C\u0003C\u0003C\u0005C\u08b8\n",
    "C\u0003C\u0005C\u08bb\nC\u0003C\u0003C\u0003C\u0005C\u08c0\nC\u0003",
    "C\u0003C\u0003C\u0003C\u0003C\u0003C\u0005C\u08c8\nC\u0003C\u0003C\u0003",
    "C\u0003C\u0005C\u08ce\nC\u0003C\u0003C\u0005C\u08d2\nC\u0003D\u0003",
    "D\u0005D\u08d6\nD\u0003D\u0007D\u08d9\nD\fD\u000eD\u08dc\u000bD\u0003",
    "D\u0003D\u0005D\u08e0\nD\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\u08e7",
    "\nD\u0003D\u0003D\u0005D\u08eb\nD\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0007D\u08f4\nD\fD\u000eD\u08f7\u000bD\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0005D\u08fe\nD\u0003D\u0005D\u0901\nD\u0003",
    "D\u0003D\u0007D\u0905\nD\fD\u000eD\u0908\u000bD\u0003D\u0003D\u0003",
    "D\u0005D\u090d\nD\u0005D\u090f\nD\u0003D\u0003D\u0003D\u0005D\u0914",
    "\nD\u0003D\u0005D\u0917\nD\u0003D\u0003D\u0007D\u091b\nD\fD\u000eD\u091e",
    "\u000bD\u0003D\u0003D\u0003D\u0005D\u0923\nD\u0005D\u0925\nD\u0003D",
    "\u0003D\u0005D\u0929\nD\u0003D\u0005D\u092c\nD\u0003D\u0005D\u092f\n",
    "D\u0003D\u0003D\u0007D\u0933\nD\fD\u000eD\u0936\u000bD\u0003D\u0003",
    "D\u0003D\u0005D\u093b\nD\u0003D\u0005D\u093e\nD\u0003D\u0003D\u0007",
    "D\u0942\nD\fD\u000eD\u0945\u000bD\u0003D\u0003D\u0003D\u0005D\u094a",
    "\nD\u0005D\u094c\nD\u0003D\u0003D\u0003D\u0005D\u0951\nD\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0005D\u0959\nD\u0005D\u095b\nD\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\u0964\nD\u0003D\u0003",
    "D\u0003D\u0005D\u0969\nD\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0005",
    "D\u0971\nD\u0003D\u0003D\u0005D\u0975\nD\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0005D\u097d\nD\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0005D\u0987\nD\u0003D\u0003D\u0003D\u0005D\u098c\n",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\u0993\nD\u0003D\u0003D\u0005",
    "D\u0997\nD\u0003D\u0003D\u0005D\u099b\nD\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\u09bb\nD\u0003D\u0003",
    "D\u0005D\u09bf\nD\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0005D\u09cb\nD\u0003D\u0005D\u09ce\nD\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\u09d7\nD\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0007D\u09e6\nD\fD\u000eD\u09e9\u000bD\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\u09f4\nD\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0005D\u09fb\nD\u0003D\u0003D\u0003D\u0003D\u0003D\u0005",
    "D\u0a02\nD\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0007D\u0a0f\nD\fD\u000eD\u0a12\u000bD\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\u0a1e",
    "\nD\u0003D\u0003D\u0003D\u0003D\u0005D\u0a24\nD\u0003D\u0003D\u0003",
    "D\u0003D\u0005D\u0a2a\nD\u0003D\u0003D\u0003D\u0003D\u0005D\u0a30\n",
    "D\u0003D\u0003D\u0003D\u0003D\u0005D\u0a36\nD\u0003D\u0003D\u0003D\u0003",
    "D\u0005D\u0a3c\nD\u0003D\u0003D\u0003D\u0003D\u0005D\u0a42\nD\u0003",
    "E\u0003E\u0003E\u0005E\u0a47\nE\u0003E\u0003E\u0003F\u0003F\u0003F\u0005",
    "F\u0a4e\nF\u0003F\u0003F\u0003G\u0003G\u0003G\u0005G\u0a55\nG\u0003",
    "G\u0003G\u0003G\u0003G\u0003G\u0005G\u0a5c\nG\u0003G\u0003G\u0003G\u0005",
    "G\u0a61\nG\u0003G\u0007G\u0a64\nG\fG\u000eG\u0a67\u000bG\u0003H\u0003",
    "H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003I\u0003I\u0003I\u0005",
    "I\u0a74\nI\u0003I\u0003I\u0003J\u0003J\u0003J\u0005J\u0a7b\nJ\u0003",
    "J\u0003J\u0003K\u0003K\u0003K\u0005K\u0a82\nK\u0003K\u0003K\u0003L\u0003",
    "L\u0005L\u0a88\nL\u0003L\u0003L\u0005L\u0a8c\nL\u0003L\u0003L\u0005",
    "L\u0a90\nL\u0003M\u0003M\u0003M\u0003M\u0003M\u0005M\u0a97\nM\u0003",
    "M\u0005M\u0a9a\nM\u0003N\u0003N\u0003N\u0005N\u0a9f\nN\u0003N\u0003",
    "N\u0003O\u0003O\u0003O\u0005O\u0aa6\nO\u0003O\u0003O\u0003O\u0007O\u0aab",
    "\nO\fO\u000eO\u0aae\u000bO\u0003O\u0005O\u0ab1\nO\u0003P\u0003P\u0003",
    "P\u0003P\u0003P\u0007P\u0ab8\nP\fP\u000eP\u0abb\u000bP\u0003Q\u0003",
    "Q\u0003Q\u0003Q\u0003R\u0003R\u0005R\u0ac3\nR\u0003R\u0003R\u0003S\u0003",
    "S\u0003S\u0003S\u0003S\u0005S\u0acc\nS\u0003S\u0005S\u0acf\nS\u0003",
    "T\u0003T\u0005T\u0ad3\nT\u0003U\u0003U\u0003U\u0003V\u0003V\u0003V\u0003",
    "V\u0005V\u0adc\nV\u0003W\u0003W\u0005W\u0ae0\nW\u0003W\u0005W\u0ae3",
    "\nW\u0003W\u0005W\u0ae6\nW\u0003W\u0003W\u0003W\u0003W\u0005W\u0aec",
    "\nW\u0003W\u0005W\u0aef\nW\u0003W\u0003W\u0003W\u0003W\u0005W\u0af5",
    "\nW\u0003W\u0003W\u0003W\u0003W\u0003W\u0007W\u0afc\nW\fW\u000eW\u0aff",
    "\u000bW\u0005W\u0b01\nW\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003",
    "W\u0007W\u0b0a\nW\fW\u000eW\u0b0d\u000bW\u0005W\u0b0f\nW\u0003X\u0003",
    "X\u0003X\u0005X\u0b14\nX\u0003X\u0005X\u0b17\nX\u0003X\u0003X\u0003",
    "X\u0005X\u0b1c\nX\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003",
    "X\u0005X\u0b26\nX\u0003X\u0003X\u0003X\u0005X\u0b2b\nX\u0003X\u0003",
    "X\u0006X\u0b2f\nX\rX\u000eX\u0b30\u0005X\u0b33\nX\u0003X\u0003X\u0006",
    "X\u0b37\nX\rX\u000eX\u0b38\u0005X\u0b3b\nX\u0003X\u0003X\u0003X\u0003",
    "X\u0005X\u0b41\nX\u0003X\u0003X\u0003X\u0003X\u0007X\u0b47\nX\fX\u000e",
    "X\u0b4a\u000bX\u0003X\u0003X\u0005X\u0b4e\nX\u0003X\u0003X\u0003X\u0003",
    "X\u0007X\u0b54\nX\fX\u000eX\u0b57\u000bX\u0005X\u0b59\nX\u0003Y\u0003",
    "Y\u0003Y\u0005Y\u0b5e\nY\u0003Y\u0005Y\u0b61\nY\u0003Y\u0003Y\u0003",
    "Y\u0005Y\u0b66\nY\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0005Y\u0b6e",
    "\nY\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0005Y\u0b76\nY\u0003",
    "Y\u0003Y\u0003Y\u0003Y\u0005Y\u0b7c\nY\u0003Y\u0003Y\u0003Y\u0003Y\u0007",
    "Y\u0b82\nY\fY\u000eY\u0b85\u000bY\u0003Y\u0003Y\u0005Y\u0b89\nY\u0003",
    "Y\u0003Y\u0003Y\u0003Y\u0007Y\u0b8f\nY\fY\u000eY\u0b92\u000bY\u0005",
    "Y\u0b94\nY\u0003Z\u0003Z\u0005Z\u0b98\nZ\u0003Z\u0005Z\u0b9b\nZ\u0003",
    "Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0005Z\u0ba3\nZ\u0003Z\u0003Z\u0003",
    "Z\u0003Z\u0005Z\u0ba9\nZ\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0007Z\u0bb0",
    "\nZ\fZ\u000eZ\u0bb3\u000bZ\u0005Z\u0bb5\nZ\u0003[\u0003[\u0005[\u0bb9",
    "\n[\u0003[\u0003[\u0005[\u0bbd\n[\u0003[\u0003[\u0006[\u0bc1\n[\r[\u000e",
    "[\u0bc2\u0003[\u0003[\u0005[\u0bc7\n[\u0003[\u0003[\u0005[\u0bcb\n[",
    "\u0005[\u0bcd\n[\u0003[\u0005[\u0bd0\n[\u0003[\u0005[\u0bd3\n[\u0003",
    "[\u0005[\u0bd6\n[\u0003[\u0003[\u0006[\u0bda\n[\r[\u000e[\u0bdb\u0003",
    "[\u0003[\u0005[\u0be0\n[\u0003[\u0005[\u0be3\n[\u0003[\u0005[\u0be6",
    "\n[\u0003[\u0005[\u0be9\n[\u0003[\u0005[\u0bec\n[\u0005[\u0bee\n[\u0003",
    "\\\u0003\\\u0005\\\u0bf2\n\\\u0003]\u0003]\u0003]\u0003]\u0005]\u0bf8",
    "\n]\u0003]\u0003]\u0003]\u0003]\u0005]\u0bfe\n]\u0003]\u0007]\u0c01",
    "\n]\f]\u000e]\u0c04\u000b]\u0005]\u0c06\n]\u0003^\u0003^\u0003^\u0003",
    "^\u0005^\u0c0c\n^\u0003_\u0003_\u0005_\u0c10\n_\u0003`\u0003`\u0003",
    "`\u0003`\u0003`\u0003`\u0005`\u0c18\n`\u0003a\u0003a\u0005a\u0c1c\n",
    "a\u0003a\u0005a\u0c1f\na\u0003a\u0005a\u0c22\na\u0003a\u0003a\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0005a\u0c2b\na\u0003a\u0003a\u0005a\u0c2f",
    "\na\u0003a\u0005a\u0c32\na\u0003a\u0003a\u0005a\u0c36\na\u0003b\u0003",
    "b\u0005b\u0c3a\nb\u0003b\u0005b\u0c3d\nb\u0003b\u0005b\u0c40\nb\u0003",
    "b\u0003b\u0003b\u0005b\u0c45\nb\u0003b\u0003b\u0003b\u0003b\u0005b\u0c4b",
    "\nb\u0007b\u0c4d\nb\fb\u000eb\u0c50\u000bb\u0003b\u0003b\u0003b\u0003",
    "b\u0003b\u0003b\u0003b\u0005b\u0c59\nb\u0003b\u0003b\u0003b\u0003b\u0005",
    "b\u0c5f\nb\u0007b\u0c61\nb\fb\u000eb\u0c64\u000bb\u0003b\u0003b\u0003",
    "b\u0005b\u0c69\nb\u0003b\u0003b\u0005b\u0c6d\nb\u0003c\u0003c\u0003",
    "c\u0003c\u0005c\u0c73\nc\u0003c\u0005c\u0c76\nc\u0003d\u0003d\u0003",
    "d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0005d\u0c82\nd\u0003",
    "d\u0003d\u0005d\u0c86\nd\u0003d\u0003d\u0005d\u0c8a\nd\u0003e\u0003",
    "e\u0003e\u0003e\u0003e\u0003e\u0005e\u0c92\ne\u0003e\u0003e\u0005e\u0c96",
    "\ne\u0003f\u0003f\u0003f\u0003f\u0003g\u0003g\u0005g\u0c9e\ng\u0003",
    "g\u0005g\u0ca1\ng\u0003g\u0003g\u0005g\u0ca5\ng\u0003g\u0005g\u0ca8",
    "\ng\u0003g\u0003g\u0003g\u0003g\u0007g\u0cae\ng\fg\u000eg\u0cb1\u000b",
    "g\u0003g\u0003g\u0005g\u0cb5\ng\u0003g\u0005g\u0cb8\ng\u0003g\u0005",
    "g\u0cbb\ng\u0003h\u0003h\u0005h\u0cbf\nh\u0003h\u0005h\u0cc2\nh\u0003",
    "h\u0003h\u0003h\u0003h\u0003h\u0007h\u0cc9\nh\fh\u000eh\u0ccc\u000b",
    "h\u0003h\u0003h\u0005h\u0cd0\nh\u0003i\u0003i\u0003i\u0003i\u0003i\u0007",
    "i\u0cd7\ni\fi\u000ei\u0cda\u000bi\u0003j\u0003j\u0005j\u0cde\nj\u0003",
    "k\u0003k\u0003k\u0007k\u0ce3\nk\fk\u000ek\u0ce6\u000bk\u0003l\u0003",
    "l\u0007l\u0cea\nl\fl\u000el\u0ced\u000bl\u0003l\u0003l\u0003l\u0007",
    "l\u0cf2\nl\fl\u000el\u0cf5\u000bl\u0003l\u0003l\u0005l\u0cf9\nl\u0003",
    "m\u0003m\u0003m\u0003m\u0003m\u0003m\u0005m\u0d01\nm\u0003m\u0005m\u0d04",
    "\nm\u0003m\u0005m\u0d07\nm\u0003m\u0003m\u0003m\u0007m\u0d0c\nm\fm\u000e",
    "m\u0d0f\u000bm\u0005m\u0d11\nm\u0003m\u0003m\u0003m\u0003m\u0003m\u0005",
    "m\u0d18\nm\u0003m\u0005m\u0d1b\nm\u0003m\u0003m\u0003m\u0003m\u0003",
    "m\u0003m\u0005m\u0d23\nm\u0003n\u0003n\u0003n\u0003n\u0005n\u0d29\n",
    "n\u0003n\u0003n\u0003n\u0003n\u0003o\u0003o\u0003o\u0003o\u0003o\u0005",
    "o\u0d34\no\u0003p\u0005p\u0d37\np\u0003p\u0003p\u0003p\u0003p\u0003",
    "p\u0003p\u0003p\u0003p\u0003p\u0005p\u0d42\np\u0003p\u0003p\u0003p\u0003",
    "p\u0005p\u0d48\np\u0003p\u0003p\u0005p\u0d4c\np\u0003p\u0003p\u0003",
    "p\u0003p\u0003p\u0003p\u0003p\u0003p\u0003p\u0005p\u0d57\np\u0003p\u0003",
    "p\u0003p\u0005p\u0d5c\np\u0005p\u0d5e\np\u0003p\u0003p\u0005p\u0d62",
    "\np\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0005q\u0d6c",
    "\nq\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0005r\u0d76",
    "\nr\u0003s\u0003s\u0007s\u0d7a\ns\fs\u000es\u0d7d\u000bs\u0003s\u0003",
    "s\u0005s\u0d81\ns\u0003s\u0005s\u0d84\ns\u0003s\u0005s\u0d87\ns\u0003",
    "s\u0005s\u0d8a\ns\u0003s\u0003s\u0007s\u0d8e\ns\fs\u000es\u0d91\u000b",
    "s\u0003s\u0003s\u0005s\u0d95\ns\u0003s\u0005s\u0d98\ns\u0003s\u0005",
    "s\u0d9b\ns\u0003s\u0005s\u0d9e\ns\u0005s\u0da0\ns\u0003t\u0003t\u0007",
    "t\u0da4\nt\ft\u000et\u0da7\u000bt\u0003t\u0003t\u0005t\u0dab\nt\u0003",
    "t\u0005t\u0dae\nt\u0003t\u0005t\u0db1\nt\u0003u\u0003u\u0005u\u0db5",
    "\nu\u0003u\u0003u\u0003v\u0003v\u0005v\u0dbb\nv\u0003v\u0003v\u0005",
    "v\u0dbf\nv\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0005",
    "w\u0dc9\nw\u0003x\u0003x\u0005x\u0dcd\nx\u0003x\u0003x\u0007x\u0dd1",
    "\nx\fx\u000ex\u0dd4\u000bx\u0003y\u0003y\u0003y\u0003y\u0003y\u0003",
    "y\u0005y\u0ddc\ny\u0003y\u0005y\u0ddf\ny\u0003y\u0003y\u0005y\u0de3",
    "\ny\u0003y\u0005y\u0de6\ny\u0003y\u0003y\u0005y\u0dea\ny\u0003y\u0003",
    "y\u0005y\u0dee\ny\u0003y\u0005y\u0df1\ny\u0005y\u0df3\ny\u0003z\u0003",
    "z\u0003z\u0003z\u0007z\u0df9\nz\fz\u000ez\u0dfc\u000bz\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0005z\u0e07\nz\u0003",
    "z\u0003z\u0006z\u0e0b\nz\rz\u000ez\u0e0c\u0005z\u0e0f\nz\u0003z\u0003",
    "z\u0006z\u0e13\nz\rz\u000ez\u0e14\u0005z\u0e17\nz\u0005z\u0e19\nz\u0003",
    "{\u0003{\u0003{\u0003{\u0005{\u0e1f\n{\u0003{\u0003{\u0003{\u0003{\u0003",
    "{\u0003{\u0005{\u0e27\n{\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0005",
    "|\u0e2f\n|\u0003}\u0003}\u0003}\u0003}\u0005}\u0e35\n}\u0003}\u0003",
    "}\u0003}\u0003}\u0003}\u0007}\u0e3c\n}\f}\u000e}\u0e3f\u000b}\u0003",
    "}\u0003}\u0005}\u0e43\n}\u0005}\u0e45\n}\u0003}\u0003}\u0005}\u0e49",
    "\n}\u0003~\u0003~\u0005~\u0e4d\n~\u0003\u007f\u0003\u007f\u0003\u007f",
    "\u0003\u007f\u0005\u007f\u0e53\n\u007f\u0003\u007f\u0003\u007f\u0003",
    "\u007f\u0003\u007f\u0003\u007f\u0005\u007f\u0e5a\n\u007f\u0003\u0080",
    "\u0003\u0080\u0003\u0080\u0005\u0080\u0e5f\n\u0080\u0003\u0081\u0003",
    "\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0007\u0081\u0e66\n\u0081",
    "\f\u0081\u000e\u0081\u0e69\u000b\u0081\u0005\u0081\u0e6b\n\u0081\u0003",
    "\u0082\u0003\u0082\u0005\u0082\u0e6f\n\u0082\u0003\u0083\u0003\u0083",
    "\u0005\u0083\u0e73\n\u0083\u0003\u0083\u0003\u0083\u0005\u0083\u0e77",
    "\n\u0083\u0003\u0083\u0005\u0083\u0e7a\n\u0083\u0003\u0083\u0005\u0083",
    "\u0e7d\n\u0083\u0003\u0083\u0005\u0083\u0e80\n\u0083\u0003\u0084\u0003",
    "\u0084\u0005\u0084\u0e84\n\u0084\u0003\u0084\u0003\u0084\u0005\u0084",
    "\u0e88\n\u0084\u0003\u0084\u0005\u0084\u0e8b\n\u0084\u0003\u0084\u0005",
    "\u0084\u0e8e\n\u0084\u0003\u0084\u0005\u0084\u0e91\n\u0084\u0003\u0085",
    "\u0003\u0085\u0003\u0085\u0003\u0086\u0003\u0086\u0005\u0086\u0e98\n",
    "\u0086\u0003\u0086\u0003\u0086\u0005\u0086\u0e9c\n\u0086\u0003\u0086",
    "\u0003\u0086\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0088",
    "\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0007\u0088\u0ea9\n",
    "\u0088\f\u0088\u000e\u0088\u0eac\u000b\u0088\u0003\u0089\u0003\u0089",
    "\u0003\u0089\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a",
    "\u0003\u008b\u0003\u008b\u0005\u008b\u0eb8\n\u008b\u0003\u008b\u0003",
    "\u008b\u0003\u008b\u0003\u008b\u0007\u008b\u0ebe\n\u008b\f\u008b\u000e",
    "\u008b\u0ec1\u000b\u008b\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c",
    "\u0003\u008c\u0003\u008c\u0003\u008c\u0005\u008c\u0eca\n\u008c\u0003",
    "\u008d\u0003\u008d\u0005\u008d\u0ece\n\u008d\u0003\u008d\u0005\u008d",
    "\u0ed1\n\u008d\u0003\u008d\u0003\u008d\u0003\u008e\u0003\u008e\u0005",
    "\u008e\u0ed7\n\u008e\u0003\u008e\u0005\u008e\u0eda\n\u008e\u0003\u008e",
    "\u0005\u008e\u0edd\n\u008e\u0003\u008f\u0003\u008f\u0003\u008f\u0003",
    "\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0005\u008f\u0ee6\n\u008f",
    "\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090",
    "\u0003\u0090\u0005\u0090\u0eef\n\u0090\u0003\u0091\u0003\u0091\u0003",
    "\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0007\u0091\u0ef7\n\u0091",
    "\f\u0091\u000e\u0091\u0efa\u000b\u0091\u0003\u0091\u0005\u0091\u0efd",
    "\n\u0091\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092",
    "\u0003\u0092\u0007\u0092\u0f05\n\u0092\f\u0092\u000e\u0092\u0f08\u000b",
    "\u0092\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003",
    "\u0093\u0003\u0093\u0005\u0093\u0f11\n\u0093\u0003\u0094\u0003\u0094",
    "\u0003\u0094\u0003\u0095\u0003\u0095\u0003\u0095\u0005\u0095\u0f19\n",
    "\u0095\u0003\u0095\u0005\u0095\u0f1c\n\u0095\u0003\u0096\u0003\u0096",
    "\u0003\u0096\u0003\u0096\u0003\u0096\u0007\u0096\u0f23\n\u0096\f\u0096",
    "\u000e\u0096\u0f26\u000b\u0096\u0005\u0096\u0f28\n\u0096\u0003\u0096",
    "\u0003\u0096\u0005\u0096\u0f2c\n\u0096\u0003\u0096\u0007\u0096\u0f2f",
    "\n\u0096\f\u0096\u000e\u0096\u0f32\u000b\u0096\u0003\u0096\u0005\u0096",
    "\u0f35\n\u0096\u0003\u0097\u0003\u0097\u0003\u0097\u0003\u0097\u0003",
    "\u0097\u0007\u0097\u0f3c\n\u0097\f\u0097\u000e\u0097\u0f3f\u000b\u0097",
    "\u0005\u0097\u0f41\n\u0097\u0003\u0098\u0003\u0098\u0003\u0098\u0003",
    "\u0099\u0003\u0099\u0003\u0099\u0003\u009a\u0003\u009a\u0003\u009a\u0003",
    "\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003",
    "\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003",
    "\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0007",
    "\u009a\u0f5e\n\u009a\f\u009a\u000e\u009a\u0f61\u000b\u009a\u0005\u009a",
    "\u0f63\n\u009a\u0003\u009a\u0005\u009a\u0f66\n\u009a\u0003\u009b\u0003",
    "\u009b\u0003\u009c\u0003\u009c\u0003\u009d\u0003\u009d\u0003\u009e\u0003",
    "\u009e\u0003\u009e\u0003\u009e\u0003\u009f\u0003\u009f\u0003\u009f\u0003",
    "\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003",
    "\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003",
    "\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003",
    "\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003",
    "\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003",
    "\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003",
    "\u009f\u0003\u009f\u0003\u009f\u0007\u009f\u0f9c\n\u009f\f\u009f\u000e",
    "\u009f\u0f9f\u000b\u009f\u0003\u009f\u0003\u009f\u0005\u009f\u0fa3\n",
    "\u009f\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0003",
    "\u00a0\u0003\u00a1\u0003\u00a1\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003",
    "\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003",
    "\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003",
    "\u00a2\u0003\u00a2\u0003\u00a2\u0005\u00a2\u0fbf\n\u00a2\u0003\u00a3",
    "\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3",
    "\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0005\u00a3",
    "\u0fcd\n\u00a3\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0007\u00a4\u0fd2",
    "\n\u00a4\f\u00a4\u000e\u00a4\u0fd5\u000b\u00a4\u0003\u00a4\u0005\u00a4",
    "\u0fd8\n\u00a4\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0005",
    "\u00a5\u0fde\n\u00a5\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6",
    "\u0003\u00a6\u0003\u00a6\u0005\u00a6\u0fe6\n\u00a6\u0005\u00a6\u0fe8",
    "\n\u00a6\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a8",
    "\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0005\u00a8\u0ff3\n",
    "\u00a8\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00aa\u0003",
    "\u00aa\u0003\u00aa\u0003\u00aa\u0005\u00aa\u0ffd\n\u00aa\u0003\u00ab",
    "\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0005\u00ab\u1004\n",
    "\u00ab\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0005\u00ac\u100a",
    "\n\u00ac\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ae",
    "\u0003\u00ae\u0005\u00ae\u1012\n\u00ae\u0003\u00af\u0003\u00af\u0003",
    "\u00af\u0005\u00af\u1017\n\u00af\u0003\u00af\u0003\u00af\u0003\u00af",
    "\u0003\u00af\u0007\u00af\u101d\n\u00af\f\u00af\u000e\u00af\u1020\u000b",
    "\u00af\u0003\u00af\u0003\u00af\u0003\u00af\u0007\u00af\u1025\n\u00af",
    "\f\u00af\u000e\u00af\u1028\u000b\u00af\u0003\u00af\u0003\u00af\u0003",
    "\u00af\u0007\u00af\u102d\n\u00af\f\u00af\u000e\u00af\u1030\u000b\u00af",
    "\u0003\u00af\u0003\u00af\u0003\u00af\u0007\u00af\u1035\n\u00af\f\u00af",
    "\u000e\u00af\u1038\u000b\u00af\u0003\u00af\u0007\u00af\u103b\n\u00af",
    "\f\u00af\u000e\u00af\u103e\u000b\u00af\u0005\u00af\u1040\n\u00af\u0003",
    "\u00af\u0003\u00af\u0005\u00af\u1044\n\u00af\u0003\u00b0\u0003\u00b0",
    "\u0003\u00b0\u0005\u00b0\u1049\n\u00b0\u0003\u00b0\u0006\u00b0\u104c",
    "\n\u00b0\r\u00b0\u000e\u00b0\u104d\u0003\u00b0\u0003\u00b0\u0006\u00b0",
    "\u1052\n\u00b0\r\u00b0\u000e\u00b0\u1053\u0005\u00b0\u1056\n\u00b0\u0003",
    "\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003",
    "\u00b1\u0006\u00b1\u105f\n\u00b1\r\u00b1\u000e\u00b1\u1060\u0003\u00b1",
    "\u0007\u00b1\u1064\n\u00b1\f\u00b1\u000e\u00b1\u1067\u000b\u00b1\u0003",
    "\u00b1\u0003\u00b1\u0006\u00b1\u106b\n\u00b1\r\u00b1\u000e\u00b1\u106c",
    "\u0005\u00b1\u106f\n\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003",
    "\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003",
    "\u00b4\u0003\u00b4\u0003\u00b4\u0005\u00b4\u107d\n\u00b4\u0003\u00b4",
    "\u0003\u00b4\u0006\u00b4\u1081\n\u00b4\r\u00b4\u000e\u00b4\u1082\u0003",
    "\u00b4\u0003\u00b4\u0003\u00b4\u0005\u00b4\u1088\n\u00b4\u0003\u00b5",
    "\u0003\u00b5\u0003\u00b5\u0005\u00b5\u108d\n\u00b5\u0003\u00b5\u0003",
    "\u00b5\u0006\u00b5\u1091\n\u00b5\r\u00b5\u000e\u00b5\u1092\u0003\u00b5",
    "\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0005\u00b5\u109a\n",
    "\u00b5\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b7\u0003\u00b7\u0003",
    "\u00b7\u0005\u00b7\u10a2\n\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7",
    "\u0003\u00b7\u0006\u00b7\u10a8\n\u00b7\r\u00b7\u000e\u00b7\u10a9\u0003",
    "\u00b7\u0003\u00b7\u0003\u00b7\u0005\u00b7\u10af\n\u00b7\u0003\u00b8",
    "\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0005\u00b8\u10b5\n\u00b8\u0003",
    "\u00b8\u0005\u00b8\u10b8\n\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8",
    "\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0005\u00b8\u10c0\n\u00b8\u0003",
    "\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0005\u00b9\u10c7",
    "\n\u00b9\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba",
    "\u0003\u00ba\u0003\u00ba\u0005\u00ba\u10d0\n\u00ba\u0003\u00ba\u0005",
    "\u00ba\u10d3\n\u00ba\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb",
    "\u0003\u00bb\u0003\u00bb\u0003\u00bc\u0003\u00bc\u0003\u00bc\u0003\u00bc",
    "\u0003\u00bc\u0003\u00bc\u0003\u00bc\u0007\u00bc\u10e2\n\u00bc\f\u00bc",
    "\u000e\u00bc\u10e5\u000b\u00bc\u0003\u00bc\u0003\u00bc\u0003\u00bd\u0003",
    "\u00bd\u0003\u00bd\u0005\u00bd\u10ec\n\u00bd\u0003\u00bd\u0003\u00bd",
    "\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0005\u00bd\u10f4\n",
    "\u00bd\u0003\u00be\u0003\u00be\u0005\u00be\u10f8\n\u00be\u0003\u00be",
    "\u0003\u00be\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0005\u00bf\u10ff\n",
    "\u00bf\u0003\u00bf\u0003\u00bf\u0006\u00bf\u1103\n\u00bf\r\u00bf\u000e",
    "\u00bf\u1104\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0006\u00c0",
    "\u110b\n\u00c0\r\u00c0\u000e\u00c0\u110c\u0003\u00c1\u0003\u00c1\u0003",
    "\u00c1\u0003\u00c1\u0003\u00c1\u0007\u00c1\u1114\n\u00c1\f\u00c1\u000e",
    "\u00c1\u1117\u000b\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0005\u00c1",
    "\u111c\n\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0007\u00c1\u1121",
    "\n\u00c1\f\u00c1\u000e\u00c1\u1124\u000b\u00c1\u0003\u00c1\u0003\u00c1",
    "\u0003\u00c1\u0003\u00c1\u0005\u00c1\u112a\n\u00c1\u0003\u00c1\u0007",
    "\u00c1\u112d\n\u00c1\f\u00c1\u000e\u00c1\u1130\u000b\u00c1\u0005\u00c1",
    "\u1132\n\u00c1\u0005\u00c1\u1134\n\u00c1\u0003\u00c1\u0003\u00c1\u0006",
    "\u00c1\u1138\n\u00c1\r\u00c1\u000e\u00c1\u1139\u0005\u00c1\u113c\n\u00c1",
    "\u0003\u00c1\u0003\u00c1\u0007\u00c1\u1140\n\u00c1\f\u00c1\u000e\u00c1",
    "\u1143\u000b\u00c1\u0005\u00c1\u1145\n\u00c1\u0003\u00c2\u0003\u00c2",
    "\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0007\u00c2\u114c\n\u00c2\f\u00c2",
    "\u000e\u00c2\u114f\u000b\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0005",
    "\u00c2\u1154\n\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0007\u00c2",
    "\u1159\n\u00c2\f\u00c2\u000e\u00c2\u115c\u000b\u00c2\u0003\u00c2\u0003",
    "\u00c2\u0003\u00c2\u0003\u00c2\u0005\u00c2\u1162\n\u00c2\u0003\u00c2",
    "\u0007\u00c2\u1165\n\u00c2\f\u00c2\u000e\u00c2\u1168\u000b\u00c2\u0005",
    "\u00c2\u116a\n\u00c2\u0005\u00c2\u116c\n\u00c2\u0003\u00c2\u0003\u00c2",
    "\u0006\u00c2\u1170\n\u00c2\r\u00c2\u000e\u00c2\u1171\u0005\u00c2\u1174",
    "\n\u00c2\u0003\u00c2\u0003\u00c2\u0007\u00c2\u1178\n\u00c2\f\u00c2\u000e",
    "\u00c2\u117b\u000b\u00c2\u0005\u00c2\u117d\n\u00c2\u0003\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0005\u00c3\u1182\n\u00c3\u0003\u00c3\u0003\u00c3",
    "\u0003\u00c3\u0007\u00c3\u1187\n\u00c3\f\u00c3\u000e\u00c3\u118a\u000b",
    "\u00c3\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0007\u00c4\u1190",
    "\n\u00c4\f\u00c4\u000e\u00c4\u1193\u000b\u00c4\u0003\u00c4\u0003\u00c4",
    "\u0005\u00c4\u1197\n\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003",
    "\u00c4\u0003\u00c4\u0007\u00c4\u119e\n\u00c4\f\u00c4\u000e\u00c4\u11a1",
    "\u000b\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0005\u00c4",
    "\u11a7\n\u00c4\u0003\u00c4\u0007\u00c4\u11aa\n\u00c4\f\u00c4\u000e\u00c4",
    "\u11ad\u000b\u00c4\u0005\u00c4\u11af\n\u00c4\u0005\u00c4\u11b1\n\u00c4",
    "\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0007\u00c4\u11b7\n",
    "\u00c4\f\u00c4\u000e\u00c4\u11ba\u000b\u00c4\u0005\u00c4\u11bc\n\u00c4",
    "\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5",
    "\u0003\u00c5\u0003\u00c5\u0007\u00c5\u11c6\n\u00c5\f\u00c5\u000e\u00c5",
    "\u11c9\u000b\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0005\u00c5\u11ce",
    "\n\u00c5\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6",
    "\u0007\u00c6\u11d5\n\u00c6\f\u00c6\u000e\u00c6\u11d8\u000b\u00c6\u0003",
    "\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0007\u00c7\u11de\n\u00c7",
    "\f\u00c7\u000e\u00c7\u11e1\u000b\u00c7\u0003\u00c7\u0003\u00c7\u0005",
    "\u00c7\u11e5\n\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7",
    "\u0003\u00c7\u0007\u00c7\u11ec\n\u00c7\f\u00c7\u000e\u00c7\u11ef\u000b",
    "\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0005\u00c7\u11f4\n\u00c7",
    "\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7",
    "\u0003\u00c7\u0007\u00c7\u11fd\n\u00c7\f\u00c7\u000e\u00c7\u1200\u000b",
    "\u00c7\u0005\u00c7\u1202\n\u00c7\u0003\u00c8\u0003\u00c8\u0003\u00c8",
    "\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0007\u00c8",
    "\u120c\n\u00c8\f\u00c8\u000e\u00c8\u120f\u000b\u00c8\u0003\u00c9\u0003",
    "\u00c9\u0003\u00c9\u0003\u00c9\u0005\u00c9\u1215\n\u00c9\u0003\u00c9",
    "\u0003\u00c9\u0003\u00c9\u0005\u00c9\u121a\n\u00c9\u0003\u00ca\u0003",
    "\u00ca\u0003\u00ca\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003",
    "\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0005",
    "\u00cb\u1229\n\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb",
    "\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0005\u00cb",
    "\u1234\n\u00cb\u0003\u00cb\u0005\u00cb\u1237\n\u00cb\u0003\u00cc\u0003",
    "\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003",
    "\u00cc\u0005\u00cc\u1241\n\u00cc\u0003\u00cd\u0003\u00cd\u0003\u00cd",
    "\u0003\u00cd\u0003\u00cd\u0003\u00cd\u0003\u00cd\u0003\u00cd\u0005\u00cd",
    "\u124b\n\u00cd\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0003",
    "\u00ce\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0005\u00ce\u1255\n\u00ce",
    "\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0003\u00d0\u0003\u00d0\u0003\u00d0",
    "\u0003\u00d0\u0003\u00d0\u0005\u00d0\u125f\n\u00d0\u0003\u00d1\u0003",
    "\u00d1\u0005\u00d1\u1263\n\u00d1\u0003\u00d1\u0003\u00d1\u0005\u00d1",
    "\u1267\n\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003",
    "\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0005\u00d1\u1271\n\u00d1",
    "\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0005\u00d1\u1276\n\u00d1\u0003",
    "\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003",
    "\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003",
    "\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003",
    "\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003",
    "\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003",
    "\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003",
    "\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003",
    "\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0005",
    "\u00d1\u12a8\n\u00d1\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2",
    "\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2",
    "\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2",
    "\u0005\u00d2\u12ba\n\u00d2\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003",
    "\u00d3\u0003\u00d4\u0003\u00d4\u0005\u00d4\u12c2\n\u00d4\u0003\u00d4",
    "\u0003\u00d4\u0003\u00d4\u0003\u00d5\u0003\u00d5\u0003\u00d5\u0003\u00d5",
    "\u0007\u00d5\u12cb\n\u00d5\f\u00d5\u000e\u00d5\u12ce\u000b\u00d5\u0003",
    "\u00d6\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0005\u00d6\u12d4\n\u00d6",
    "\u0003\u00d7\u0003\u00d7\u0005\u00d7\u12d8\n\u00d7\u0003\u00d7\u0003",
    "\u00d7\u0003\u00d7\u0003\u00d8\u0003\u00d8\u0005\u00d8\u12df\n\u00d8",
    "\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0005\u00d8\u12e4\n\u00d8\u0003",
    "\u00d8\u0005\u00d8\u12e7\n\u00d8\u0003\u00d8\u0005\u00d8\u12ea\n\u00d8",
    "\u0003\u00d9\u0003\u00d9\u0003\u00d9\u0003\u00d9\u0003\u00d9\u0003\u00d9",
    "\u0003\u00d9\u0005\u00d9\u12f3\n\u00d9\u0003\u00da\u0003\u00da\u0005",
    "\u00da\u12f7\n\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00da",
    "\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00db\u0003\u00db\u0003\u00db",
    "\u0003\u00db\u0003\u00db\u0003\u00db\u0003\u00dc\u0003\u00dc\u0003\u00dc",
    "\u0003\u00dc\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd",
    "\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0007\u00dd\u1313\n",
    "\u00dd\f\u00dd\u000e\u00dd\u1316\u000b\u00dd\u0003\u00dd\u0003\u00dd",
    "\u0003\u00dd\u0003\u00dd\u0005\u00dd\u131c\n\u00dd\u0003\u00dd\u0003",
    "\u00dd\u0005\u00dd\u1320\n\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd",
    "\u0003\u00dd\u0003\u00dd\u0005\u00dd\u1327\n\u00dd\u0003\u00dd\u0005",
    "\u00dd\u132a\n\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd",
    "\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd",
    "\u0003\u00dd\u0003\u00dd\u0007\u00dd\u1338\n\u00dd\f\u00dd\u000e\u00dd",
    "\u133b\u000b\u00dd\u0005\u00dd\u133d\n\u00dd\u0003\u00de\u0003\u00de",
    "\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de",
    "\u0005\u00de\u1347\n\u00de\u0003\u00de\u0003\u00de\u0005\u00de\u134b",
    "\n\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0005\u00de",
    "\u1351\n\u00de\u0003\u00de\u0005\u00de\u1354\n\u00de\u0003\u00de\u0003",
    "\u00de\u0003\u00de\u0005\u00de\u1359\n\u00de\u0003\u00de\u0003\u00de",
    "\u0005\u00de\u135d\n\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003",
    "\u00de\u0003\u00de\u0005\u00de\u1364\n\u00de\u0003\u00de\u0005\u00de",
    "\u1367\n\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0005",
    "\u00de\u136d\n\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de",
    "\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de",
    "\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de",
    "\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de",
    "\u0005\u00de\u1385\n\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003",
    "\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003",
    "\u00de\u0003\u00de\u0005\u00de\u1392\n\u00de\u0003\u00de\u0005\u00de",
    "\u1395\n\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003",
    "\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0005\u00de\u139f\n\u00de",
    "\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de",
    "\u0005\u00de\u13a7\n\u00de\u0003\u00de\u0003\u00de\u0005\u00de\u13ab",
    "\n\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de",
    "\u0005\u00de\u13b2\n\u00de\u0003\u00de\u0005\u00de\u13b5\n\u00de\u0003",
    "\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0007\u00de\u13bc",
    "\n\u00de\f\u00de\u000e\u00de\u13bf\u000b\u00de\u0003\u00de\u0003\u00de",
    "\u0003\u00de\u0005\u00de\u13c4\n\u00de\u0003\u00de\u0003\u00de\u0003",
    "\u00de\u0003\u00de\u0005\u00de\u13ca\n\u00de\u0003\u00de\u0003\u00de",
    "\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de",
    "\u0005\u00de\u13d4\n\u00de\u0005\u00de\u13d6\n\u00de\u0003\u00df\u0003",
    "\u00df\u0003\u00df\u0003\u00df\u0005\u00df\u13dc\n\u00df\u0003\u00df",
    "\u0005\u00df\u13df\n\u00df\u0003\u00df\u0005\u00df\u13e2\n\u00df\u0003",
    "\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003",
    "\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0005\u00e0\u13ee\n\u00e0",
    "\u0003\u00e0\u0005\u00e0\u13f1\n\u00e0\u0003\u00e1\u0003\u00e1\u0003",
    "\u00e1\u0003\u00e1\u0005\u00e1\u13f7\n\u00e1\u0003\u00e2\u0005\u00e2",
    "\u13fa\n\u00e2\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0003",
    "\u00e2\u0003\u00e2\u0005\u00e2\u1402\n\u00e2\u0003\u00e2\u0003\u00e2",
    "\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0005\u00e2\u140a\n",
    "\u00e2\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0005\u00e3\u1410",
    "\n\u00e3\u0003\u00e3\u0003\u00e3\u0005\u00e3\u1414\n\u00e3\u0003\u00e4",
    "\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0003\u00e4",
    "\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0005\u00e4",
    "\u1422\n\u00e4\u0003\u00e5\u0003\u00e5\u0003\u00e5\u0003\u00e6\u0003",
    "\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0007\u00e6\u142c\n\u00e6",
    "\f\u00e6\u000e\u00e6\u142f\u000b\u00e6\u0003\u00e6\u0003\u00e6\u0003",
    "\u00e6\u0003\u00e6\u0005\u00e6\u1435\n\u00e6\u0003\u00e6\u0005\u00e6",
    "\u1438\n\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e7\u0003",
    "\u00e7\u0005\u00e7\u143f\n\u00e7\u0003\u00e7\u0003\u00e7\u0003\u00e7",
    "\u0007\u00e7\u1444\n\u00e7\f\u00e7\u000e\u00e7\u1447\u000b\u00e7\u0003",
    "\u00e8\u0003\u00e8\u0005\u00e8\u144b\n\u00e8\u0003\u00e8\u0006\u00e8",
    "\u144e\n\u00e8\r\u00e8\u000e\u00e8\u144f\u0003\u00e9\u0003\u00e9\u0003",
    "\u00e9\u0003\u00e9\u0003\u00e9\u0003\u00e9\u0003\u00e9\u0007\u00e9\u1459",
    "\n\u00e9\f\u00e9\u000e\u00e9\u145c\u000b\u00e9\u0003\u00ea\u0003\u00ea",
    "\u0003\u00ea\u0003\u00ea\u0003\u00eb\u0003\u00eb\u0003\u00ec\u0003\u00ec",
    "\u0005\u00ec\u1466\n\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003",
    "\u00ec\u0005\u00ec\u146c\n\u00ec\u0003\u00ed\u0003\u00ed\u0003\u00ed",
    "\u0005\u00ed\u1471\n\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003",
    "\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003",
    "\u00ed\u0003\u00ed\u0005\u00ed\u147e\n\u00ed\u0005\u00ed\u1480\n\u00ed",
    "\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0005\u00ed\u1485\n\u00ed\u0003",
    "\u00ed\u0003\u00ed\u0003\u00ed\u0005\u00ed\u148a\n\u00ed\u0005\u00ed",
    "\u148c\n\u00ed\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0003",
    "\u00ee\u0005\u00ee\u1493\n\u00ee\u0003\u00ef\u0003\u00ef\u0003\u00ef",
    "\u0003\u00ef\u0003\u00ef\u0005\u00ef\u149a\n\u00ef\u0003\u00ef\u0005",
    "\u00ef\u149d\n\u00ef\u0003\u00ef\u0005\u00ef\u14a0\n\u00ef\u0003\u00ef",
    "\u0003\u00ef\u0003\u00ef\u0003\u00ef\u0005\u00ef\u14a6\n\u00ef\u0003",
    "\u00ef\u0003\u00ef\u0005\u00ef\u14aa\n\u00ef\u0003\u00f0\u0003\u00f0",
    "\u0003\u00f0\u0003\u00f0\u0005\u00f0\u14b0\n\u00f0\u0003\u00f1\u0003",
    "\u00f1\u0003\u00f1\u0003\u00f1\u0005\u00f1\u14b6\n\u00f1\u0003\u00f1",
    "\u0003\u00f1\u0003\u00f2\u0003\u00f2\u0003\u00f2\u0003\u00f3\u0003\u00f3",
    "\u0003\u00f3\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0005\u00f4\u14c3\n",
    "\u00f4\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0005\u00f4\u14c8\n\u00f4",
    "\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0007\u00f4\u14ce\n",
    "\u00f4\f\u00f4\u000e\u00f4\u14d1\u000b\u00f4\u0005\u00f4\u14d3\n\u00f4",
    "\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0005\u00f5\u14d8\n\u00f5\u0003",
    "\u00f5\u0003\u00f5\u0003\u00f5\u0005\u00f5\u14dd\n\u00f5\u0003\u00f5",
    "\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0007\u00f5\u14e3\n\u00f5\f\u00f5",
    "\u000e\u00f5\u14e6\u000b\u00f5\u0005\u00f5\u14e8\n\u00f5\u0003\u00f6",
    "\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0005\u00f6\u14ee\n\u00f6\u0003",
    "\u00f7\u0003\u00f7\u0005\u00f7\u14f2\n\u00f7\u0003\u00f7\u0003\u00f7",
    "\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f7",
    "\u0003\u00f7\u0007\u00f7\u14fd\n\u00f7\f\u00f7\u000e\u00f7\u1500\u000b",
    "\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0005\u00f7\u1505\n\u00f7",
    "\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f7",
    "\u0003\u00f7\u0003\u00f7\u0007\u00f7\u150f\n\u00f7\f\u00f7\u000e\u00f7",
    "\u1512\u000b\u00f7\u0005\u00f7\u1514\n\u00f7\u0003\u00f8\u0003\u00f8",
    "\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0005\u00f9",
    "\u151d\n\u00f9\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0005\u00f9\u1522",
    "\n\u00f9\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0005\u00fa",
    "\u1528\n\u00fa\u0003\u00fb\u0003\u00fb\u0003\u00fc\u0003\u00fc\u0003",
    "\u00fc\u0005\u00fc\u152f\n\u00fc\u0005\u00fc\u1531\n\u00fc\u0003\u00fc",
    "\u0003\u00fc\u0003\u00fc\u0005\u00fc\u1536\n\u00fc\u0005\u00fc\u1538",
    "\n\u00fc\u0003\u00fd\u0003\u00fd\u0005\u00fd\u153c\n\u00fd\u0003\u00fd",
    "\u0003\u00fd\u0003\u00fd\u0003\u00fd\u0005\u00fd\u1542\n\u00fd\u0003",
    "\u00fd\u0005\u00fd\u1545\n\u00fd\u0003\u00fe\u0003\u00fe\u0003\u00ff",
    "\u0003\u00ff\u0003\u0100\u0003\u0100\u0003\u0100\u0003\u0100\u0005\u0100",
    "\u154f\n\u0100\u0003\u0101\u0003\u0101\u0005\u0101\u1553\n\u0101\u0003",
    "\u0102\u0003\u0102\u0003\u0103\u0003\u0103\u0003\u0103\u0003\u0103\u0003",
    "\u0103\u0003\u0103\u0003\u0103\u0003\u0103\u0003\u0103\u0003\u0103\u0003",
    "\u0103\u0003\u0103\u0003\u0103\u0003\u0103\u0006\u0103\u1565\n\u0103",
    "\r\u0103\u000e\u0103\u1566\u0003\u0104\u0003\u0104\u0003\u0104\u0003",
    "\u0104\u0003\u0104\u0005\u0104\u156e\n\u0104\u0005\u0104\u1570\n\u0104",
    "\u0003\u0105\u0003\u0105\u0003\u0105\u0006\u0105\u1575\n\u0105\r\u0105",
    "\u000e\u0105\u1576\u0005\u0105\u1579\n\u0105\u0003\u0106\u0003\u0106",
    "\u0005\u0106\u157d\n\u0106\u0003\u0107\u0003\u0107\u0003\u0107\u0005",
    "\u0107\u1582\n\u0107\u0003\u0108\u0003\u0108\u0003\u0108\u0003\u0108",
    "\u0003\u0108\u0003\u0108\u0003\u0108\u0003\u0108\u0003\u0108\u0005\u0108",
    "\u158d\n\u0108\u0003\u0109\u0003\u0109\u0003\u0109\u0005\u0109\u1592",
    "\n\u0109\u0003\u010a\u0003\u010a\u0003\u010b\u0003\u010b\u0005\u010b",
    "\u1598\n\u010b\u0003\u010c\u0005\u010c\u159b\n\u010c\u0003\u010c\u0003",
    "\u010c\u0005\u010c\u159f\n\u010c\u0003\u010c\u0006\u010c\u15a2\n\u010c",
    "\r\u010c\u000e\u010c\u15a3\u0003\u010c\u0005\u010c\u15a7\n\u010c\u0003",
    "\u010c\u0003\u010c\u0005\u010c\u15ab\n\u010c\u0003\u010c\u0003\u010c",
    "\u0005\u010c\u15af\n\u010c\u0005\u010c\u15b1\n\u010c\u0003\u010d\u0003",
    "\u010d\u0003\u010e\u0005\u010e\u15b6\n\u010e\u0003\u010e\u0003\u010e",
    "\u0003\u010f\u0005\u010f\u15bb\n\u010f\u0003\u010f\u0003\u010f\u0003",
    "\u0110\u0003\u0110\u0003\u0110\u0003\u0110\u0003\u0110\u0003\u0110\u0003",
    "\u0110\u0003\u0110\u0003\u0110\u0005\u0110\u15c8\n\u0110\u0003\u0110",
    "\u0005\u0110\u15cb\n\u0110\u0003\u0111\u0003\u0111\u0005\u0111\u15cf",
    "\n\u0111\u0003\u0111\u0005\u0111\u15d2\n\u0111\u0003\u0111\u0005\u0111",
    "\u15d5\n\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0005\u0111\u15da",
    "\n\u0111\u0003\u0111\u0005\u0111\u15dd\n\u0111\u0003\u0111\u0003\u0111",
    "\u0003\u0111\u0005\u0111\u15e2\n\u0111\u0003\u0111\u0003\u0111\u0003",
    "\u0111\u0005\u0111\u15e7\n\u0111\u0003\u0111\u0005\u0111\u15ea\n\u0111",
    "\u0003\u0111\u0003\u0111\u0003\u0111\u0005\u0111\u15ef\n\u0111\u0003",
    "\u0111\u0005\u0111\u15f2\n\u0111\u0003\u0111\u0003\u0111\u0003\u0111",
    "\u0003\u0111\u0005\u0111\u15f8\n\u0111\u0003\u0111\u0005\u0111\u15fb",
    "\n\u0111\u0003\u0111\u0003\u0111\u0005\u0111\u15ff\n\u0111\u0003\u0111",
    "\u0005\u0111\u1602\n\u0111\u0003\u0111\u0005\u0111\u1605\n\u0111\u0003",
    "\u0111\u0003\u0111\u0005\u0111\u1609\n\u0111\u0003\u0111\u0005\u0111",
    "\u160c\n\u0111\u0003\u0111\u0005\u0111\u160f\n\u0111\u0003\u0111\u0003",
    "\u0111\u0005\u0111\u1613\n\u0111\u0003\u0111\u0005\u0111\u1616\n\u0111",
    "\u0003\u0111\u0005\u0111\u1619\n\u0111\u0003\u0111\u0005\u0111\u161c",
    "\n\u0111\u0003\u0111\u0003\u0111\u0005\u0111\u1620\n\u0111\u0003\u0111",
    "\u0005\u0111\u1623\n\u0111\u0003\u0111\u0005\u0111\u1626\n\u0111\u0003",
    "\u0111\u0003\u0111\u0003\u0111\u0005\u0111\u162b\n\u0111\u0003\u0111",
    "\u0003\u0111\u0003\u0111\u0005\u0111\u1630\n\u0111\u0003\u0111\u0003",
    "\u0111\u0003\u0111\u0005\u0111\u1635\n\u0111\u0003\u0111\u0005\u0111",
    "\u1638\n\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0005\u0111\u163d",
    "\n\u0111\u0003\u0111\u0005\u0111\u1640\n\u0111\u0003\u0111\u0003\u0111",
    "\u0003\u0111\u0005\u0111\u1645\n\u0111\u0003\u0111\u0005\u0111\u1648",
    "\n\u0111\u0003\u0111\u0003\u0111\u0005\u0111\u164c\n\u0111\u0003\u0111",
    "\u0003\u0111\u0005\u0111\u1650\n\u0111\u0003\u0112\u0003\u0112\u0003",
    "\u0112\u0003\u0112\u0007\u0112\u1656\n\u0112\f\u0112\u000e\u0112\u1659",
    "\u000b\u0112\u0003\u0112\u0003\u0112\u0003\u0113\u0003\u0113\u0005\u0113",
    "\u165f\n\u0113\u0003\u0113\u0003\u0113\u0005\u0113\u1663\n\u0113\u0003",
    "\u0113\u0003\u0113\u0003\u0113\u0005\u0113\u1668\n\u0113\u0003\u0113",
    "\u0005\u0113\u166b\n\u0113\u0003\u0113\u0003\u0113\u0003\u0113\u0005",
    "\u0113\u1670\n\u0113\u0003\u0113\u0003\u0113\u0005\u0113\u1674\n\u0113",
    "\u0005\u0113\u1676\n\u0113\u0003\u0114\u0003\u0114\u0003\u0114\u0003",
    "\u0114\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003",
    "\u0115\u0003\u0116\u0003\u0116\u0003\u0116\u0003\u0116\u0005\u0116\u1686",
    "\n\u0116\u0003\u0116\u0003\u0116\u0003\u0117\u0003\u0117\u0003\u0117",
    "\u0007\u0117\u168d\n\u0117\f\u0117\u000e\u0117\u1690\u000b\u0117\u0003",
    "\u0118\u0003\u0118\u0003\u0118\u0007\u0118\u1695\n\u0118\f\u0118\u000e",
    "\u0118\u1698\u000b\u0118\u0003\u0119\u0003\u0119\u0003\u0119\u0003\u0119",
    "\u0007\u0119\u169e\n\u0119\f\u0119\u000e\u0119\u16a1\u000b\u0119\u0003",
    "\u0119\u0003\u0119\u0003\u011a\u0003\u011a\u0003\u011a\u0007\u011a\u16a8",
    "\n\u011a\f\u011a\u000e\u011a\u16ab\u000b\u011a\u0003\u011b\u0003\u011b",
    "\u0003\u011b\u0007\u011b\u16b0\n\u011b\f\u011b\u000e\u011b\u16b3\u000b",
    "\u011b\u0003\u011c\u0003\u011c\u0003\u011c\u0007\u011c\u16b8\n\u011c",
    "\f\u011c\u000e\u011c\u16bb\u000b\u011c\u0003\u011d\u0003\u011d\u0003",
    "\u011d\u0007\u011d\u16c0\n\u011d\f\u011d\u000e\u011d\u16c3\u000b\u011d",
    "\u0003\u011e\u0003\u011e\u0003\u011e\u0007\u011e\u16c8\n\u011e\f\u011e",
    "\u000e\u011e\u16cb\u000b\u011e\u0003\u011f\u0003\u011f\u0005\u011f\u16cf",
    "\n\u011f\u0003\u011f\u0003\u011f\u0005\u011f\u16d3\n\u011f\u0003\u011f",
    "\u0003\u011f\u0003\u011f\u0005\u011f\u16d8\n\u011f\u0003\u0120\u0003",
    "\u0120\u0003\u0120\u0005\u0120\u16dd\n\u0120\u0003\u0120\u0005\u0120",
    "\u16e0\n\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0005\u0120\u16e5",
    "\n\u0120\u0003\u0120\u0005\u0120\u16e8\n\u0120\u0003\u0121\u0003\u0121",
    "\u0005\u0121\u16ec\n\u0121\u0003\u0122\u0003\u0122\u0003\u0122\u0003",
    "\u0123\u0003\u0123\u0003\u0123\u0003\u0123\u0003\u0124\u0003\u0124\u0003",
    "\u0124\u0003\u0124\u0003\u0124\u0005\u0124\u16fa\n\u0124\u0003\u0124",
    "\u0003\u0124\u0003\u0124\u0003\u0124\u0003\u0124\u0005\u0124\u1701\n",
    "\u0124\u0003\u0124\u0003\u0124\u0003\u0124\u0005\u0124\u1706\n\u0124",
    "\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125",
    "\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125",
    "\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125",
    "\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125",
    "\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125",
    "\u0006\u0125\u1726\n\u0125\r\u0125\u000e\u0125\u1727\u0003\u0125\u0003",
    "\u0125\u0005\u0125\u172c\n\u0125\u0003\u0125\u0003\u0125\u0003\u0125",
    "\u0003\u0125\u0006\u0125\u1732\n\u0125\r\u0125\u000e\u0125\u1733\u0003",
    "\u0125\u0003\u0125\u0005\u0125\u1738\n\u0125\u0003\u0125\u0003\u0125",
    "\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0005\u0125",
    "\u1741\n\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003",
    "\u0125\u0003\u0125\u0005\u0125\u1749\n\u0125\u0003\u0125\u0003\u0125",
    "\u0003\u0125\u0005\u0125\u174e\n\u0125\u0003\u0125\u0003\u0125\u0003",
    "\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0005\u0125\u1756\n\u0125",
    "\u0003\u0125\u0003\u0125\u0003\u0125\u0005\u0125\u175b\n\u0125\u0003",
    "\u0125\u0003\u0125\u0003\u0125\u0005\u0125\u1760\n\u0125\u0005\u0125",
    "\u1762\n\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003",
    "\u0125\u0003\u0125\u0003\u0125\u0005\u0125\u176b\n\u0125\u0003\u0125",
    "\u0003\u0125\u0003\u0125\u0005\u0125\u1770\n\u0125\u0003\u0125\u0003",
    "\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0005\u0125\u1778",
    "\n\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0005\u0125\u177d\n\u0125",
    "\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125",
    "\u0005\u0125\u1785\n\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003",
    "\u0125\u0003\u0125\u0003\u0125\u0005\u0125\u178d\n\u0125\u0003\u0125",
    "\u0005\u0125\u1790\n\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003",
    "\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0005\u0125\u179a",
    "\n\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125",
    "\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0005\u0125\u17a5\n",
    "\u0125\u0003\u0126\u0003\u0126\u0003\u0126\u0003\u0126\u0003\u0126\u0003",
    "\u0127\u0003\u0127\u0003\u0127\u0003\u0127\u0007\u0127\u17b0\n\u0127",
    "\f\u0127\u000e\u0127\u17b3\u000b\u0127\u0003\u0127\u0003\u0127\u0003",
    "\u0127\u0003\u0127\u0003\u0127\u0005\u0127\u17ba\n\u0127\u0003\u0128",
    "\u0003\u0128\u0005\u0128\u17be\n\u0128\u0003\u0129\u0003\u0129\u0003",
    "\u0129\u0005\u0129\u17c3\n\u0129\u0003\u0129\u0003\u0129\u0003\u0129",
    "\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0005\u0129\u17cc\n",
    "\u0129\u0003\u0129\u0005\u0129\u17cf\n\u0129\u0003\u0129\u0003\u0129",
    "\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129",
    "\u0003\u0129\u0003\u0129\u0005\u0129\u17db\n\u0129\u0003\u0129\u0003",
    "\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0005\u0129\u17e3",
    "\n\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129",
    "\u0003\u0129\u0007\u0129\u17eb\n\u0129\f\u0129\u000e\u0129\u17ee\u000b",
    "\u0129\u0005\u0129\u17f0\n\u0129\u0003\u0129\u0003\u0129\u0005\u0129",
    "\u17f4\n\u0129\u0003\u0129\u0003\u0129\u0005\u0129\u17f8\n\u0129\u0003",
    "\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0003",
    "\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0003",
    "\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0003",
    "\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0005\u012a\u1811",
    "\n\u012a\u0003\u012b\u0003\u012b\u0003\u012b\u0003\u012b\u0003\u012b",
    "\u0003\u012c\u0003\u012c\u0003\u012c\u0003\u012c\u0005\u012c\u181c\n",
    "\u012c\u0003\u012c\u0003\u012c\u0003\u012c\u0003\u012c\u0003\u012c\u0005",
    "\u012c\u1823\n\u012c\u0007\u012c\u1825\n\u012c\f\u012c\u000e\u012c\u1828",
    "\u000b\u012c\u0003\u012d\u0003\u012d\u0003\u012d\u0003\u012d\u0005\u012d",
    "\u182e\n\u012d\u0003\u012e\u0003\u012e\u0003\u012e\u0003\u012e\u0003",
    "\u012e\u0003\u012e\u0005\u012e\u1836\n\u012e\u0003\u012e\u0003\u012e",
    "\u0003\u012e\u0005\u012e\u183b\n\u012e\u0003\u012e\u0003\u012e\u0003",
    "\u012e\u0003\u012e\u0007\u012e\u1841\n\u012e\f\u012e\u000e\u012e\u1844",
    "\u000b\u012e\u0003\u012f\u0003\u012f\u0003\u012f\u0005\u012f\u1849\n",
    "\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0003",
    "\u012f\u0003\u012f\u0003\u012f\u0005\u012f\u1853\n\u012f\u0003\u012f",
    "\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u012f",
    "\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0005\u012f\u1860\n",
    "\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0005\u012f\u1866",
    "\n\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0005\u012f",
    "\u186c\n\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0003",
    "\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0003",
    "\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0005\u012f\u187c\n\u012f",
    "\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0005\u012f\u1882\n",
    "\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0003",
    "\u012f\u0003\u012f\u0007\u012f\u188b\n\u012f\f\u012f\u000e\u012f\u188e",
    "\u000b\u012f\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130",
    "\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130",
    "\u0003\u0130\u0003\u0130\u0003\u0130\u0007\u0130\u189e\n\u0130\f\u0130",
    "\u000e\u0130\u18a1\u000b\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003",
    "\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0006\u0130\u18aa\n\u0130",
    "\r\u0130\u000e\u0130\u18ab\u0003\u0130\u0003\u0130\u0003\u0130\u0003",
    "\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003",
    "\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0005",
    "\u0130\u18bd\n\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130",
    "\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130",
    "\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0007\u0130",
    "\u18ce\n\u0130\f\u0130\u000e\u0130\u18d1\u000b\u0130\u0003\u0131\u0003",
    "\u0131\u0003\u0132\u0003\u0132\u0003\u0132\u0003\u0132\u0003\u0132\u0003",
    "\u0132\u0003\u0132\u0003\u0132\u0003\u0132\u0003\u0132\u0003\u0132\u0003",
    "\u0132\u0003\u0132\u0003\u0132\u0005\u0132\u18e3\n\u0132\u0003\u0133",
    "\u0003\u0133\u0003\u0133\u0003\u0133\u0003\u0133\u0003\u0133\u0003\u0133",
    "\u0005\u0133\u18ec\n\u0133\u0003\u0134\u0003\u0134\u0003\u0134\u0003",
    "\u0134\u0003\u0134\u0003\u0134\u0003\u0134\u0005\u0134\u18f5\n\u0134",
    "\u0003\u0135\u0003\u0135\u0003\u0136\u0003\u0136\u0003\u0136\u0003\u0136",
    "\u0003\u0136\u0005\u0136\u18fe\n\u0136\u0003\u0137\u0003\u0137\u0003",
    "\u0138\u0003\u0138\u0003\u0139\u0003\u0139\u0003\u013a\u0003\u013a\u0003",
    "\u013b\u0003\u013b\u0003\u013c\u0003\u013c\u0003\u013d\u0003\u013d\u0003",
    "\u013d\u0002\u0005\u025a\u025c\u025e\u013e\u0002\u0004\u0006\b\n\f\u000e",
    "\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@B",
    "DFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a",
    "\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2",
    "\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba",
    "\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2",
    "\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea",
    "\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102",
    "\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a",
    "\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132",
    "\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a",
    "\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162",
    "\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a",
    "\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192",
    "\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa",
    "\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2",
    "\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da",
    "\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2",
    "\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a",
    "\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222",
    "\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a",
    "\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252",
    "\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a",
    "\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u0002\u0082\u0004\u0002%",
    "%\u0089\u0089\u0004\u0002\u01c6\u01c6\u01cc\u01cc\u0005\u0002@@\u0090",
    "\u0090\u00a5\u00a5\u0005\u0002((\u0142\u0142\u0181\u0181\u0006\u0002",
    "((\u0162\u0162\u01c5\u01c5\u020c\u020c\u0004\u0002\u01bc\u01bc\u040f",
    "\u040f\u0004\u0002HH\u0081\u0081\u0004\u0002\u000f\u000f\u0112\u0112",
    "\u0005\u0002**NN\u00a8\u00a8\u0004\u0002\u016f\u016f\u01de\u01de\u0005",
    "\u0002\u01b4\u01b4\u0232\u0232\u0239\u0239\u0004\u0002\u0149\u0149\u0186",
    "\u0186\u0004\u0002\u0124\u0124\u0194\u0194\u0004\u0002\u0122\u0122\u0178",
    "\u0178\u0005\u0002IIMMrr\u0005\u0002((\u0153\u0153\u016d\u016d\u0005",
    "\u0002((\u014f\u014f\u02ae\u02ae\u0004\u0002\u0226\u0226\u0247\u0247",
    "\u0004\u0002JJTT\u0005\u0002\u0171\u0171\u01d5\u01d5\u020e\u020e\u0004",
    "\u0002@@\u0090\u0090\u0003\u0002\u0128\u0129\u0003\u0002\u0405\u0406",
    "\u0004\u0002\u040f\u040f\u0417\u0417\u0005\u0002\u016c\u016c\u018f\u018f",
    "\u01c3\u01c3\u0004\u0002((\u0405\u0406\b\u0002((\u0135\u0135\u0137\u0137",
    "\u0153\u0153\u016d\u016d\u01eb\u01eb\u0003\u0002\u0406\u0407\u0004\u0002",
    "\u0007\u000711\u0004\u0002\u0019\u0019\u001d\u001d\u0004\u0002\u0185",
    "\u0185\u0248\u0248\u0004\u0002\r\r\u009f\u009f\u0004\u0002\u00b0\u00b0",
    "\u024b\u024b\u0004\u0002\u0014\u0014\u0084\u0084\u0005\u0002))FFaa\u0004",
    "\u0002aa\u0139\u0139\u0004\u0002\u0130\u0130\u0169\u0169\u0004\u0002",
    "]]\u0204\u0204\u0004\u0002))aa\u0004\u0002\b\b//\u0004\u0002\u00ac\u00ac",
    "\u0244\u0244\u0006\u0002\u016c\u016c\u018f\u018f\u01c2\u01c2\u01e1\u01e1",
    "\u0004\u0002\u016c\u016c\u01c2\u01c2\u0004\u0002\u000e\u000e++\u0005",
    "\u0002==HH\u00aa\u00aa\u0004\u0002!!LL\u0004\u0002YY\u0087\u0087\u0004",
    "\u0002\b\b/0\u0003\u0002\u021b\u021c\u0004\u0002\u0174\u0174\u020a\u020a",
    "\u0004\u0002\u00d2\u00d2\u0197\u0197\u0007\u0002bb\u019c\u019d\u019f",
    "\u019f\u01a3\u01ab\u01ed\u01ed\u0006\u0002\u0199\u019a\u019e\u019e\u01a0",
    "\u01a1\u01ee\u01ee\u0005\u0002cc\u0198\u0198\u01a2\u01a2\u0004\u0002",
    "\u0188\u0188\u021d\u021d\u0004\u0002\u0217\u0217\u0219\u0219\u0004\u0002",
    "\u011c\u011c\u021e\u021e\u0004\u0002SS\u01fc\u01fc\u0004\u000211\u0147",
    "\u0147\u0005\u0002\u001e\u001e88\u00a3\u00a3\u0005\u0002ww\u009c\u009c",
    "\u0172\u0172\u0004\u0002__\u00a6\u00a6\u0004\u0002\u012c\u012c\u020f",
    "\u020f\u0004\u0002&&\u0246\u0246\u0004\u0002ii\u0194\u0194\u0004\u0002",
    "\u0165\u0165\u01e7\u01e7\u0004\u0002\u009c\u009c\u025e\u025e\u0006\u0002",
    "\u00be\u00be\u00c0\u00c0\u00c6\u00c6\u0227\u0227\u0004\u0002\u03e6\u03e6",
    "\u03f7\u03f7\u0004\u0002\u011d\u011d\u01ef\u01ef\u0004\u0002??II\b\u0002",
    "ww\u009c\u009c\u00a1\u00a1\u015e\u015e\u0172\u0172\u0246\u0246\u0004",
    "\u0002\u01bb\u01bb\u0223\u0223\u0004\u0002\u015b\u015b\u024a\u024a\u0004",
    "\u0002ww\u0172\u0172\u0005\u0002JJUU\u017f\u017f\u0005\u0002\u0174\u0174",
    "\u0194\u0194\u020a\u020a\u0004\u0002\u0223\u0223\u0245\u0245\u0004\u0002",
    "\u013a\u013a\u01e6\u01e6\b\u0002\u00d2\u00d2\u0158\u0158\u015a\u015a",
    "\u0173\u0173\u01ec\u01ec\u0210\u0210\u0004\u0002+,99\u0005\u0002\u0165",
    "\u0165\u01d7\u01d7\u030a\u030a\u0004\u0002\u018c\u018c\u0234\u0234\f",
    "\u0002\u012b\u012b\u0132\u0132\u013c\u013e\u0144\u0144\u01b5\u01b5\u01bd",
    "\u01bd\u0228\u0228\u022f\u022f\u02da\u02da\u0380\u0380\u0004\u0002\"",
    "\"\u0099\u0099\u0004\u0002kk\u0378\u0378\r\u0002\u012b\u012b\u0132\u0132",
    "\u013c\u013e\u0144\u0144\u01b5\u01b5\u01bd\u01bd\u01fd\u01fd\u0228\u0228",
    "\u022f\u022f\u02da\u02da\u0380\u0380\u0005\u0002\u040f\u040f\u0417\u0417",
    "\u0419\u0419\u0003\u0002\u041b\u041c\u0005\u0002\u02a9\u02b4\u040f\u040f",
    "\u0417\u0418\u0004\u0002\u0405\u0407\u0410\u0410\u0004\u0002::\u00a2",
    "\u00a2\u0004\u0002jj\u0413\u0413\u0007\u0002\u0018\u0018\u00ce\u00d0",
    "\u00d7\u00d7\u00d9\u00dc\u01c0\u01c0\u0004\u0002\u0018\u0018\u00cf\u00cf",
    "\u0004\u0002\u0018\u0018\u00ce\u00ce\u0003\u0002\u00b4\u00bf\u0004\u0002",
    "\u00a7\u00a7\u020d\u020d\u0004\u0002\u00c3\u00c8\u016d\u016d\b\u0002",
    "\u00c9\u00c9\u00d4\u00d4\u00d6\u00d6\u00d8\u00d8\u00df\u00df\u0120\u0121",
    "\u0006\u0002\u00ca\u00cd\u00d2\u00d3\u00d5\u00d5\u011e\u011e\u0004\u0002",
    "\u008c\u008c\u00dd\u00dd\u0004\u0002\u018c\u018c\u02b9\u02c1\u0004\u0002",
    "\u00d2\u00d2\u01c0\u01c0\u0005\u0002\u00c9\u00ca\u00cc\u00cc\u018c\u018c",
    "\u0004\u0002\u00ff\u0100\u0106\u0106\u0004\u0002##\u00fd\u0100\u0003",
    "\u0002\u0109\u010a\u0005\u0002\u0011\u0011WW\u00a0\u00a0\u0004\u0002",
    "\u00ce\u00ce\u00d2\u00d2\u0004\u0002\u00c9\u00ca\u00cc\u00cc\u0005\u0002",
    "\u000e\u000e++\u0376\u0376\u0005\u0002\u00ed\u00ed\u00f3\u00f4\u00f9",
    "\u00f9\u0005\u0002\u00ee\u00f0\u00f5\u00f8\u00fa\u00fc\u0004\u0002\u01ca",
    "\u01ca\u01d8\u01d8\u0004\u0002hh\u03fa\u03fa\u0005\u0002::\u00a2\u00a2",
    "\u023d\u023d\u0004\u0002}}\u0088\u0088\u0005\u0002\b\b\u0115\u0115\u0213",
    "\u0213\u0006\u0002hh\u03f2\u03f2\u03f4\u03f4\u03fa\u03fb\u0003\u0002",
    "\u03ef\u03f6\u0003\u0002\u0281\u02a8\u0003\u0002\u02b5\u02b8\u0003\u0002",
    "\u025e\u0266\u0003\u0002\u0256\u025d\u0005\u0002\u00c9\u00cd\u00da\u00da",
    "\u00dd\u00dd\u0011\u0002\"\"..kk\u0099\u0099\u00df\u00df\u00ed\u00fc",
    "\u0110\u0184\u0186\u0225\u0227\u0246\u0249\u0250\u0255\u0255\u0268\u0280",
    "\u02ae\u02ae\u02da\u02da\u0380\u0380\u0012\u0002%%YY\u0087\u0087\u00c9",
    "\u00cb\u00cd\u00cd\u00eb\u00ec\u00f1\u00f1\u0108\u0108\u0185\u0185\u0248",
    "\u0248\u0256\u025d\u027a\u027a\u02b9\u02b9\u02bc\u02d9\u02db\u037f\u0381",
    "\u03e5\u0002\u1d78\u0002\u027b\u0003\u0002\u0002\u0002\u0004\u028c\u0003",
    "\u0002\u0002\u0002\u0006\u02a0\u0003\u0002\u0002\u0002\b\u02a2\u0003",
    "\u0002\u0002\u0002\n\u02c7\u0003\u0002\u0002\u0002\f\u02d3\u0003\u0002",
    "\u0002\u0002\u000e\u02de\u0003\u0002\u0002\u0002\u0010\u02ef\u0003\u0002",
    "\u0002\u0002\u0012\u02f4\u0003\u0002\u0002\u0002\u0014\u0300\u0003\u0002",
    "\u0002\u0002\u0016\u031b\u0003\u0002\u0002\u0002\u0018\u0324\u0003\u0002",
    "\u0002\u0002\u001a\u0326\u0003\u0002\u0002\u0002\u001c\u0332\u0003\u0002",
    "\u0002\u0002\u001e\u0350\u0003\u0002\u0002\u0002 \u0374\u0003\u0002",
    "\u0002\u0002\"\u03a7\u0003\u0002\u0002\u0002$\u03c1\u0003\u0002\u0002",
    "\u0002&\u03df\u0003\u0002\u0002\u0002(\u0440\u0003\u0002\u0002\u0002",
    "*\u0442\u0003\u0002\u0002\u0002,\u0454\u0003\u0002\u0002\u0002.\u0491",
    "\u0003\u0002\u0002\u00020\u04a4\u0003\u0002\u0002\u00022\u04df\u0003",
    "\u0002\u0002\u00024\u04e1\u0003\u0002\u0002\u00026\u050d\u0003\u0002",
    "\u0002\u00028\u0513\u0003\u0002\u0002\u0002:\u0515\u0003\u0002\u0002",
    "\u0002<\u052a\u0003\u0002\u0002\u0002>\u0531\u0003\u0002\u0002\u0002",
    "@\u0533\u0003\u0002\u0002\u0002B\u0543\u0003\u0002\u0002\u0002D\u0546",
    "\u0003\u0002\u0002\u0002F\u054b\u0003\u0002\u0002\u0002H\u0565\u0003",
    "\u0002\u0002\u0002J\u0575\u0003\u0002\u0002\u0002L\u0577\u0003\u0002",
    "\u0002\u0002N\u0587\u0003\u0002\u0002\u0002P\u0589\u0003\u0002\u0002",
    "\u0002R\u05c3\u0003\u0002\u0002\u0002T\u060a\u0003\u0002\u0002\u0002",
    "V\u060c\u0003\u0002\u0002\u0002X\u0628\u0003\u0002\u0002\u0002Z\u0630",
    "\u0003\u0002\u0002\u0002\\\u064e\u0003\u0002\u0002\u0002^\u06e0\u0003",
    "\u0002\u0002\u0002`\u06e2\u0003\u0002\u0002\u0002b\u06e5\u0003\u0002",
    "\u0002\u0002d\u072f\u0003\u0002\u0002\u0002f\u0746\u0003\u0002\u0002",
    "\u0002h\u07cb\u0003\u0002\u0002\u0002j\u07d0\u0003\u0002\u0002\u0002",
    "l\u07d2\u0003\u0002\u0002\u0002n\u07dc\u0003\u0002\u0002\u0002p\u0811",
    "\u0003\u0002\u0002\u0002r\u0825\u0003\u0002\u0002\u0002t\u0827\u0003",
    "\u0002\u0002\u0002v\u084a\u0003\u0002\u0002\u0002x\u0853\u0003\u0002",
    "\u0002\u0002z\u085a\u0003\u0002\u0002\u0002|\u0871\u0003\u0002\u0002",
    "\u0002~\u087a\u0003\u0002\u0002\u0002\u0080\u0889\u0003\u0002\u0002",
    "\u0002\u0082\u089f\u0003\u0002\u0002\u0002\u0084\u08b3\u0003\u0002\u0002",
    "\u0002\u0086\u0a41\u0003\u0002\u0002\u0002\u0088\u0a43\u0003\u0002\u0002",
    "\u0002\u008a\u0a4a\u0003\u0002\u0002\u0002\u008c\u0a51\u0003\u0002\u0002",
    "\u0002\u008e\u0a68\u0003\u0002\u0002\u0002\u0090\u0a70\u0003\u0002\u0002",
    "\u0002\u0092\u0a77\u0003\u0002\u0002\u0002\u0094\u0a7e\u0003\u0002\u0002",
    "\u0002\u0096\u0a85\u0003\u0002\u0002\u0002\u0098\u0a91\u0003\u0002\u0002",
    "\u0002\u009a\u0a9b\u0003\u0002\u0002\u0002\u009c\u0aa2\u0003\u0002\u0002",
    "\u0002\u009e\u0ab2\u0003\u0002\u0002\u0002\u00a0\u0abc\u0003\u0002\u0002",
    "\u0002\u00a2\u0ac0\u0003\u0002\u0002\u0002\u00a4\u0ac6\u0003\u0002\u0002",
    "\u0002\u00a6\u0ad2\u0003\u0002\u0002\u0002\u00a8\u0ad4\u0003\u0002\u0002",
    "\u0002\u00aa\u0adb\u0003\u0002\u0002\u0002\u00ac\u0add\u0003\u0002\u0002",
    "\u0002\u00ae\u0b10\u0003\u0002\u0002\u0002\u00b0\u0b5a\u0003\u0002\u0002",
    "\u0002\u00b2\u0b95\u0003\u0002\u0002\u0002\u00b4\u0bed\u0003\u0002\u0002",
    "\u0002\u00b6\u0bf1\u0003\u0002\u0002\u0002\u00b8\u0c05\u0003\u0002\u0002",
    "\u0002\u00ba\u0c07\u0003\u0002\u0002\u0002\u00bc\u0c0f\u0003\u0002\u0002",
    "\u0002\u00be\u0c17\u0003\u0002\u0002\u0002\u00c0\u0c19\u0003\u0002\u0002",
    "\u0002\u00c2\u0c37\u0003\u0002\u0002\u0002\u00c4\u0c6e\u0003\u0002\u0002",
    "\u0002\u00c6\u0c77\u0003\u0002\u0002\u0002\u00c8\u0c8b\u0003\u0002\u0002",
    "\u0002\u00ca\u0c97\u0003\u0002\u0002\u0002\u00cc\u0c9b\u0003\u0002\u0002",
    "\u0002\u00ce\u0cbc\u0003\u0002\u0002\u0002\u00d0\u0cd1\u0003\u0002\u0002",
    "\u0002\u00d2\u0cdb\u0003\u0002\u0002\u0002\u00d4\u0cdf\u0003\u0002\u0002",
    "\u0002\u00d6\u0cf8\u0003\u0002\u0002\u0002\u00d8\u0d22\u0003\u0002\u0002",
    "\u0002\u00da\u0d24\u0003\u0002\u0002\u0002\u00dc\u0d33\u0003\u0002\u0002",
    "\u0002\u00de\u0d61\u0003\u0002\u0002\u0002\u00e0\u0d6b\u0003\u0002\u0002",
    "\u0002\u00e2\u0d75\u0003\u0002\u0002\u0002\u00e4\u0d9f\u0003\u0002\u0002",
    "\u0002\u00e6\u0da1\u0003\u0002\u0002\u0002\u00e8\u0db2\u0003\u0002\u0002",
    "\u0002\u00ea\u0db8\u0003\u0002\u0002\u0002\u00ec\u0dc8\u0003\u0002\u0002",
    "\u0002\u00ee\u0dcc\u0003\u0002\u0002\u0002\u00f0\u0df2\u0003\u0002\u0002",
    "\u0002\u00f2\u0e18\u0003\u0002\u0002\u0002\u00f4\u0e26\u0003\u0002\u0002",
    "\u0002\u00f6\u0e2e\u0003\u0002\u0002\u0002\u00f8\u0e30\u0003\u0002\u0002",
    "\u0002\u00fa\u0e4a\u0003\u0002\u0002\u0002\u00fc\u0e4e\u0003\u0002\u0002",
    "\u0002\u00fe\u0e5e\u0003\u0002\u0002\u0002\u0100\u0e60\u0003\u0002\u0002",
    "\u0002\u0102\u0e6c\u0003\u0002\u0002\u0002\u0104\u0e70\u0003\u0002\u0002",
    "\u0002\u0106\u0e81\u0003\u0002\u0002\u0002\u0108\u0e92\u0003\u0002\u0002",
    "\u0002\u010a\u0e95\u0003\u0002\u0002\u0002\u010c\u0e9f\u0003\u0002\u0002",
    "\u0002\u010e\u0ea3\u0003\u0002\u0002\u0002\u0110\u0ead\u0003\u0002\u0002",
    "\u0002\u0112\u0eb0\u0003\u0002\u0002\u0002\u0114\u0eb5\u0003\u0002\u0002",
    "\u0002\u0116\u0ec9\u0003\u0002\u0002\u0002\u0118\u0ecb\u0003\u0002\u0002",
    "\u0002\u011a\u0edc\u0003\u0002\u0002\u0002\u011c\u0ee5\u0003\u0002\u0002",
    "\u0002\u011e\u0eee\u0003\u0002\u0002\u0002\u0120\u0ef0\u0003\u0002\u0002",
    "\u0002\u0122\u0efe\u0003\u0002\u0002\u0002\u0124\u0f09\u0003\u0002\u0002",
    "\u0002\u0126\u0f12\u0003\u0002\u0002\u0002\u0128\u0f15\u0003\u0002\u0002",
    "\u0002\u012a\u0f1d\u0003\u0002\u0002\u0002\u012c\u0f36\u0003\u0002\u0002",
    "\u0002\u012e\u0f42\u0003\u0002\u0002\u0002\u0130\u0f45\u0003\u0002\u0002",
    "\u0002\u0132\u0f65\u0003\u0002\u0002\u0002\u0134\u0f67\u0003\u0002\u0002",
    "\u0002\u0136\u0f69\u0003\u0002\u0002\u0002\u0138\u0f6b\u0003\u0002\u0002",
    "\u0002\u013a\u0f6d\u0003\u0002\u0002\u0002\u013c\u0fa2\u0003\u0002\u0002",
    "\u0002\u013e\u0fa4\u0003\u0002\u0002\u0002\u0140\u0faa\u0003\u0002\u0002",
    "\u0002\u0142\u0fbe\u0003\u0002\u0002\u0002\u0144\u0fcc\u0003\u0002\u0002",
    "\u0002\u0146\u0fd7\u0003\u0002\u0002\u0002\u0148\u0fd9\u0003\u0002\u0002",
    "\u0002\u014a\u0fdf\u0003\u0002\u0002\u0002\u014c\u0fe9\u0003\u0002\u0002",
    "\u0002\u014e\u0fed\u0003\u0002\u0002\u0002\u0150\u0ff4\u0003\u0002\u0002",
    "\u0002\u0152\u0ff8\u0003\u0002\u0002\u0002\u0154\u0ffe\u0003\u0002\u0002",
    "\u0002\u0156\u1005\u0003\u0002\u0002\u0002\u0158\u100b\u0003\u0002\u0002",
    "\u0002\u015a\u1011\u0003\u0002\u0002\u0002\u015c\u1016\u0003\u0002\u0002",
    "\u0002\u015e\u1045\u0003\u0002\u0002\u0002\u0160\u105a\u0003\u0002\u0002",
    "\u0002\u0162\u1073\u0003\u0002\u0002\u0002\u0164\u1076\u0003\u0002\u0002",
    "\u0002\u0166\u107c\u0003\u0002\u0002\u0002\u0168\u108c\u0003\u0002\u0002",
    "\u0002\u016a\u109b\u0003\u0002\u0002\u0002\u016c\u10a1\u0003\u0002\u0002",
    "\u0002\u016e\u10bf\u0003\u0002\u0002\u0002\u0170\u10c1\u0003\u0002\u0002",
    "\u0002\u0172\u10c8\u0003\u0002\u0002\u0002\u0174\u10d4\u0003\u0002\u0002",
    "\u0002\u0176\u10da\u0003\u0002\u0002\u0002\u0178\u10f3\u0003\u0002\u0002",
    "\u0002\u017a\u10f7\u0003\u0002\u0002\u0002\u017c\u10fb\u0003\u0002\u0002",
    "\u0002\u017e\u1106\u0003\u0002\u0002\u0002\u0180\u1144\u0003\u0002\u0002",
    "\u0002\u0182\u117c\u0003\u0002\u0002\u0002\u0184\u117e\u0003\u0002\u0002",
    "\u0002\u0186\u118b\u0003\u0002\u0002\u0002\u0188\u11bd\u0003\u0002\u0002",
    "\u0002\u018a\u11cf\u0003\u0002\u0002\u0002\u018c\u1201\u0003\u0002\u0002",
    "\u0002\u018e\u1203\u0003\u0002\u0002\u0002\u0190\u1210\u0003\u0002\u0002",
    "\u0002\u0192\u121b\u0003\u0002\u0002\u0002\u0194\u1236\u0003\u0002\u0002",
    "\u0002\u0196\u1240\u0003\u0002\u0002\u0002\u0198\u124a\u0003\u0002\u0002",
    "\u0002\u019a\u124c\u0003\u0002\u0002\u0002\u019c\u1256\u0003\u0002\u0002",
    "\u0002\u019e\u1259\u0003\u0002\u0002\u0002\u01a0\u12a7\u0003\u0002\u0002",
    "\u0002\u01a2\u12b9\u0003\u0002\u0002\u0002\u01a4\u12bb\u0003\u0002\u0002",
    "\u0002\u01a6\u12bf\u0003\u0002\u0002\u0002\u01a8\u12c6\u0003\u0002\u0002",
    "\u0002\u01aa\u12cf\u0003\u0002\u0002\u0002\u01ac\u12d5\u0003\u0002\u0002",
    "\u0002\u01ae\u12dc\u0003\u0002\u0002\u0002\u01b0\u12f2\u0003\u0002\u0002",
    "\u0002\u01b2\u12f4\u0003\u0002\u0002\u0002\u01b4\u12ff\u0003\u0002\u0002",
    "\u0002\u01b6\u1305\u0003\u0002\u0002\u0002\u01b8\u133c\u0003\u0002\u0002",
    "\u0002\u01ba\u13d5\u0003\u0002\u0002\u0002\u01bc\u13e1\u0003\u0002\u0002",
    "\u0002\u01be\u13f0\u0003\u0002\u0002\u0002\u01c0\u13f6\u0003\u0002\u0002",
    "\u0002\u01c2\u1409\u0003\u0002\u0002\u0002\u01c4\u1413\u0003\u0002\u0002",
    "\u0002\u01c6\u1421\u0003\u0002\u0002\u0002\u01c8\u1423\u0003\u0002\u0002",
    "\u0002\u01ca\u1426\u0003\u0002\u0002\u0002\u01cc\u143c\u0003\u0002\u0002",
    "\u0002\u01ce\u1448\u0003\u0002\u0002\u0002\u01d0\u1451\u0003\u0002\u0002",
    "\u0002\u01d2\u145d\u0003\u0002\u0002\u0002\u01d4\u1461\u0003\u0002\u0002",
    "\u0002\u01d6\u1463\u0003\u0002\u0002\u0002\u01d8\u148b\u0003\u0002\u0002",
    "\u0002\u01da\u1492\u0003\u0002\u0002\u0002\u01dc\u1494\u0003\u0002\u0002",
    "\u0002\u01de\u14ab\u0003\u0002\u0002\u0002\u01e0\u14b1\u0003\u0002\u0002",
    "\u0002\u01e2\u14b9\u0003\u0002\u0002\u0002\u01e4\u14bc\u0003\u0002\u0002",
    "\u0002\u01e6\u14bf\u0003\u0002\u0002\u0002\u01e8\u14d4\u0003\u0002\u0002",
    "\u0002\u01ea\u14e9\u0003\u0002\u0002\u0002\u01ec\u14ef\u0003\u0002\u0002",
    "\u0002\u01ee\u1515\u0003\u0002\u0002\u0002\u01f0\u1521\u0003\u0002\u0002",
    "\u0002\u01f2\u1523\u0003\u0002\u0002\u0002\u01f4\u1529\u0003\u0002\u0002",
    "\u0002\u01f6\u1537\u0003\u0002\u0002\u0002\u01f8\u153b\u0003\u0002\u0002",
    "\u0002\u01fa\u1546\u0003\u0002\u0002\u0002\u01fc\u1548\u0003\u0002\u0002",
    "\u0002\u01fe\u154e\u0003\u0002\u0002\u0002\u0200\u1552\u0003\u0002\u0002",
    "\u0002\u0202\u1554\u0003\u0002\u0002\u0002\u0204\u1556\u0003\u0002\u0002",
    "\u0002\u0206\u1568\u0003\u0002\u0002\u0002\u0208\u1578\u0003\u0002\u0002",
    "\u0002\u020a\u157c\u0003\u0002\u0002\u0002\u020c\u1581\u0003\u0002\u0002",
    "\u0002\u020e\u158c\u0003\u0002\u0002\u0002\u0210\u1591\u0003\u0002\u0002",
    "\u0002\u0212\u1593\u0003\u0002\u0002\u0002\u0214\u1597\u0003\u0002\u0002",
    "\u0002\u0216\u15b0\u0003\u0002\u0002\u0002\u0218\u15b2\u0003\u0002\u0002",
    "\u0002\u021a\u15b5\u0003\u0002\u0002\u0002\u021c\u15ba\u0003\u0002\u0002",
    "\u0002\u021e\u15ca\u0003\u0002\u0002\u0002\u0220\u164f\u0003\u0002\u0002",
    "\u0002\u0222\u1651\u0003\u0002\u0002\u0002\u0224\u1675\u0003\u0002\u0002",
    "\u0002\u0226\u1677\u0003\u0002\u0002\u0002\u0228\u167b\u0003\u0002\u0002",
    "\u0002\u022a\u1681\u0003\u0002\u0002\u0002\u022c\u1689\u0003\u0002\u0002",
    "\u0002\u022e\u1691\u0003\u0002\u0002\u0002\u0230\u1699\u0003\u0002\u0002",
    "\u0002\u0232\u16a4\u0003\u0002\u0002\u0002\u0234\u16ac\u0003\u0002\u0002",
    "\u0002\u0236\u16b4\u0003\u0002\u0002\u0002\u0238\u16bc\u0003\u0002\u0002",
    "\u0002\u023a\u16c4\u0003\u0002\u0002\u0002\u023c\u16d2\u0003\u0002\u0002",
    "\u0002\u023e\u16e7\u0003\u0002\u0002\u0002\u0240\u16eb\u0003\u0002\u0002",
    "\u0002\u0242\u16ed\u0003\u0002\u0002\u0002\u0244\u16f0\u0003\u0002\u0002",
    "\u0002\u0246\u1705\u0003\u0002\u0002\u0002\u0248\u17a4\u0003\u0002\u0002",
    "\u0002\u024a\u17a6\u0003\u0002\u0002\u0002\u024c\u17b9\u0003\u0002\u0002",
    "\u0002\u024e\u17bb\u0003\u0002\u0002\u0002\u0250\u17f7\u0003\u0002\u0002",
    "\u0002\u0252\u1810\u0003\u0002\u0002\u0002\u0254\u1812\u0003\u0002\u0002",
    "\u0002\u0256\u181b\u0003\u0002\u0002\u0002\u0258\u182d\u0003\u0002\u0002",
    "\u0002\u025a\u183a\u0003\u0002\u0002\u0002\u025c\u1845\u0003\u0002\u0002",
    "\u0002\u025e\u18bc\u0003\u0002\u0002\u0002\u0260\u18d2\u0003\u0002\u0002",
    "\u0002\u0262\u18e2\u0003\u0002\u0002\u0002\u0264\u18eb\u0003\u0002\u0002",
    "\u0002\u0266\u18f4\u0003\u0002\u0002\u0002\u0268\u18f6\u0003\u0002\u0002",
    "\u0002\u026a\u18fd\u0003\u0002\u0002\u0002\u026c\u18ff\u0003\u0002\u0002",
    "\u0002\u026e\u1901\u0003\u0002\u0002\u0002\u0270\u1903\u0003\u0002\u0002",
    "\u0002\u0272\u1905\u0003\u0002\u0002\u0002\u0274\u1907\u0003\u0002\u0002",
    "\u0002\u0276\u1909\u0003\u0002\u0002\u0002\u0278\u190b\u0003\u0002\u0002",
    "\u0002\u027a\u027c\u0005\u0004\u0003\u0002\u027b\u027a\u0003\u0002\u0002",
    "\u0002\u027b\u027c\u0003\u0002\u0002\u0002\u027c\u027e\u0003\u0002\u0002",
    "\u0002\u027d\u027f\u0007\u03f3\u0002\u0002\u027e\u027d\u0003\u0002\u0002",
    "\u0002\u027e\u027f\u0003\u0002\u0002\u0002\u027f\u0280\u0003\u0002\u0002",
    "\u0002\u0280\u0281\u0007\u0002\u0002\u0003\u0281\u0003\u0003\u0002\u0002",
    "\u0002\u0282\u0284\u0005\u0006\u0004\u0002\u0283\u0285\u0007\u03f3\u0002",
    "\u0002\u0284\u0283\u0003\u0002\u0002\u0002\u0284\u0285\u0003\u0002\u0002",
    "\u0002\u0285\u0287\u0003\u0002\u0002\u0002\u0286\u0288\u0007\u0403\u0002",
    "\u0002\u0287\u0286\u0003\u0002\u0002\u0002\u0287\u0288\u0003\u0002\u0002",
    "\u0002\u0288\u028b\u0003\u0002\u0002\u0002\u0289\u028b\u0005\b\u0005",
    "\u0002\u028a\u0282\u0003\u0002\u0002\u0002\u028a\u0289\u0003\u0002\u0002",
    "\u0002\u028b\u028e\u0003\u0002\u0002\u0002\u028c\u028a\u0003\u0002\u0002",
    "\u0002\u028c\u028d\u0003\u0002\u0002\u0002\u028d\u0297\u0003\u0002\u0002",
    "\u0002\u028e\u028c\u0003\u0002\u0002\u0002\u028f\u0294\u0005\u0006\u0004",
    "\u0002\u0290\u0292\u0007\u03f3\u0002\u0002\u0291\u0290\u0003\u0002\u0002",
    "\u0002\u0291\u0292\u0003\u0002\u0002\u0002\u0292\u0293\u0003\u0002\u0002",
    "\u0002\u0293\u0295\u0007\u0403\u0002\u0002\u0294\u0291\u0003\u0002\u0002",
    "\u0002\u0294\u0295\u0003\u0002\u0002\u0002\u0295\u0298\u0003\u0002\u0002",
    "\u0002\u0296\u0298\u0005\b\u0005\u0002\u0297\u028f\u0003\u0002\u0002",
    "\u0002\u0297\u0296\u0003\u0002\u0002\u0002\u0298\u0005\u0003\u0002\u0002",
    "\u0002\u0299\u02a1\u0005\n\u0006\u0002\u029a\u02a1\u0005\f\u0007\u0002",
    "\u029b\u02a1\u0005\u000e\b\u0002\u029c\u02a1\u0005\u0010\t\u0002\u029d",
    "\u02a1\u0005\u0012\n\u0002\u029e\u02a1\u0005\u0016\f\u0002\u029f\u02a1",
    "\u0005\u0018\r\u0002\u02a0\u0299\u0003\u0002\u0002\u0002\u02a0\u029a",
    "\u0003\u0002\u0002\u0002\u02a0\u029b\u0003\u0002\u0002\u0002\u02a0\u029c",
    "\u0003\u0002\u0002\u0002\u02a0\u029d\u0003\u0002\u0002\u0002\u02a0\u029e",
    "\u0003\u0002\u0002\u0002\u02a0\u029f\u0003\u0002\u0002\u0002\u02a1\u0007",
    "\u0003\u0002\u0002\u0002\u02a2\u02a3\u0007\u0403\u0002\u0002\u02a3\t",
    "\u0003\u0002\u0002\u0002\u02a4\u02c8\u0005\u001a\u000e\u0002\u02a5\u02c8",
    "\u0005\u001c\u000f\u0002\u02a6\u02c8\u0005\u001e\u0010\u0002\u02a7\u02c8",
    "\u0005 \u0011\u0002\u02a8\u02c8\u0005\"\u0012\u0002\u02a9\u02c8\u0005",
    "$\u0013\u0002\u02aa\u02c8\u0005&\u0014\u0002\u02ab\u02c8\u0005(\u0015",
    "\u0002\u02ac\u02c8\u0005*\u0016\u0002\u02ad\u02c8\u0005,\u0017\u0002",
    "\u02ae\u02c8\u0005.\u0018\u0002\u02af\u02c8\u00050\u0019\u0002\u02b0",
    "\u02c8\u0005r:\u0002\u02b1\u02c8\u0005t;\u0002\u02b2\u02c8\u0005v<\u0002",
    "\u02b3\u02c8\u0005x=\u0002\u02b4\u02c8\u0005z>\u0002\u02b5\u02c8\u0005",
    "|?\u0002\u02b6\u02c8\u0005~@\u0002\u02b7\u02c8\u0005\u0080A\u0002\u02b8",
    "\u02c8\u0005\u0082B\u0002\u02b9\u02c8\u0005\u0084C\u0002\u02ba\u02c8",
    "\u0005\u0088E\u0002\u02bb\u02c8\u0005\u008aF\u0002\u02bc\u02c8\u0005",
    "\u008cG\u0002\u02bd\u02c8\u0005\u008eH\u0002\u02be\u02c8\u0005\u0090",
    "I\u0002\u02bf\u02c8\u0005\u0092J\u0002\u02c0\u02c8\u0005\u0094K\u0002",
    "\u02c1\u02c8\u0005\u0096L\u0002\u02c2\u02c8\u0005\u0098M\u0002\u02c3",
    "\u02c8\u0005\u009aN\u0002\u02c4\u02c8\u0005\u009cO\u0002\u02c5\u02c8",
    "\u0005\u009eP\u0002\u02c6\u02c8\u0005\u00a2R\u0002\u02c7\u02a4\u0003",
    "\u0002\u0002\u0002\u02c7\u02a5\u0003\u0002\u0002\u0002\u02c7\u02a6\u0003",
    "\u0002\u0002\u0002\u02c7\u02a7\u0003\u0002\u0002\u0002\u02c7\u02a8\u0003",
    "\u0002\u0002\u0002\u02c7\u02a9\u0003\u0002\u0002\u0002\u02c7\u02aa\u0003",
    "\u0002\u0002\u0002\u02c7\u02ab\u0003\u0002\u0002\u0002\u02c7\u02ac\u0003",
    "\u0002\u0002\u0002\u02c7\u02ad\u0003\u0002\u0002\u0002\u02c7\u02ae\u0003",
    "\u0002\u0002\u0002\u02c7\u02af\u0003\u0002\u0002\u0002\u02c7\u02b0\u0003",
    "\u0002\u0002\u0002\u02c7\u02b1\u0003\u0002\u0002\u0002\u02c7\u02b2\u0003",
    "\u0002\u0002\u0002\u02c7\u02b3\u0003\u0002\u0002\u0002\u02c7\u02b4\u0003",
    "\u0002\u0002\u0002\u02c7\u02b5\u0003\u0002\u0002\u0002\u02c7\u02b6\u0003",
    "\u0002\u0002\u0002\u02c7\u02b7\u0003\u0002\u0002\u0002\u02c7\u02b8\u0003",
    "\u0002\u0002\u0002\u02c7\u02b9\u0003\u0002\u0002\u0002\u02c7\u02ba\u0003",
    "\u0002\u0002\u0002\u02c7\u02bb\u0003\u0002\u0002\u0002\u02c7\u02bc\u0003",
    "\u0002\u0002\u0002\u02c7\u02bd\u0003\u0002\u0002\u0002\u02c7\u02be\u0003",
    "\u0002\u0002\u0002\u02c7\u02bf\u0003\u0002\u0002\u0002\u02c7\u02c0\u0003",
    "\u0002\u0002\u0002\u02c7\u02c1\u0003\u0002\u0002\u0002\u02c7\u02c2\u0003",
    "\u0002\u0002\u0002\u02c7\u02c3\u0003\u0002\u0002\u0002\u02c7\u02c4\u0003",
    "\u0002\u0002\u0002\u02c7\u02c5\u0003\u0002\u0002\u0002\u02c7\u02c6\u0003",
    "\u0002\u0002\u0002\u02c8\u000b\u0003\u0002\u0002\u0002\u02c9\u02d4\u0005",
    "\u00b4[\u0002\u02ca\u02d4\u0005\u00acW\u0002\u02cb\u02d4\u0005\u00b6",
    "\\\u0002\u02cc\u02d4\u0005\u00a6T\u0002\u02cd\u02d4\u0005\u00b2Z\u0002",
    "\u02ce\u02d4\u0005\u00a4S\u0002\u02cf\u02d4\u0005\u00aeX\u0002\u02d0",
    "\u02d4\u0005\u00b0Y\u0002\u02d1\u02d4\u0005\u00a8U\u0002\u02d2\u02d4",
    "\u0005\u00aaV\u0002\u02d3\u02c9\u0003\u0002\u0002\u0002\u02d3\u02ca",
    "\u0003\u0002\u0002\u0002\u02d3\u02cb\u0003\u0002\u0002\u0002\u02d3\u02cc",
    "\u0003\u0002\u0002\u0002\u02d3\u02cd\u0003\u0002\u0002\u0002\u02d3\u02ce",
    "\u0003\u0002\u0002\u0002\u02d3\u02cf\u0003\u0002\u0002\u0002\u02d3\u02d0",
    "\u0003\u0002\u0002\u0002\u02d3\u02d1\u0003\u0002\u0002\u0002\u02d3\u02d2",
    "\u0003\u0002\u0002\u0002\u02d4\r\u0003\u0002\u0002\u0002\u02d5\u02df",
    "\u0005\u0100\u0081\u0002\u02d6\u02df\u0005\u0102\u0082\u0002\u02d7\u02df",
    "\u0005\u0104\u0083\u0002\u02d8\u02df\u0005\u0106\u0084\u0002\u02d9\u02df",
    "\u0005\u0108\u0085\u0002\u02da\u02df\u0005\u010a\u0086\u0002\u02db\u02df",
    "\u0005\u010c\u0087\u0002\u02dc\u02df\u0005\u010e\u0088\u0002\u02dd\u02df",
    "\u0005\u0110\u0089\u0002\u02de\u02d5\u0003\u0002\u0002\u0002\u02de\u02d6",
    "\u0003\u0002\u0002\u0002\u02de\u02d7\u0003\u0002\u0002\u0002\u02de\u02d8",
    "\u0003\u0002\u0002\u0002\u02de\u02d9\u0003\u0002\u0002\u0002\u02de\u02da",
    "\u0003\u0002\u0002\u0002\u02de\u02db\u0003\u0002\u0002\u0002\u02de\u02dc",
    "\u0003\u0002\u0002\u0002\u02de\u02dd\u0003\u0002\u0002\u0002\u02df\u000f",
    "\u0003\u0002\u0002\u0002\u02e0\u02f0\u0005\u0120\u0091\u0002\u02e1\u02f0",
    "\u0005\u0122\u0092\u0002\u02e2\u02f0\u0005\u0124\u0093\u0002\u02e3\u02f0",
    "\u0005\u0126\u0094\u0002\u02e4\u02f0\u0005\u0128\u0095\u0002\u02e5\u02f0",
    "\u0005\u012a\u0096\u0002\u02e6\u02f0\u0005\u012c\u0097\u0002\u02e7\u02f0",
    "\u0005\u012e\u0098\u0002\u02e8\u02f0\u0005\u0130\u0099\u0002\u02e9\u02f0",
    "\u0005\u0148\u00a5\u0002\u02ea\u02f0\u0005\u014a\u00a6\u0002\u02eb\u02f0",
    "\u0005\u014c\u00a7\u0002\u02ec\u02f0\u0005\u014e\u00a8\u0002\u02ed\u02f0",
    "\u0005\u0150\u00a9\u0002\u02ee\u02f0\u0005\u0152\u00aa\u0002\u02ef\u02e0",
    "\u0003\u0002\u0002\u0002\u02ef\u02e1\u0003\u0002\u0002\u0002\u02ef\u02e2",
    "\u0003\u0002\u0002\u0002\u02ef\u02e3\u0003\u0002\u0002\u0002\u02ef\u02e4",
    "\u0003\u0002\u0002\u0002\u02ef\u02e5\u0003\u0002\u0002\u0002\u02ef\u02e6",
    "\u0003\u0002\u0002\u0002\u02ef\u02e7\u0003\u0002\u0002\u0002\u02ef\u02e8",
    "\u0003\u0002\u0002\u0002\u02ef\u02e9\u0003\u0002\u0002\u0002\u02ef\u02ea",
    "\u0003\u0002\u0002\u0002\u02ef\u02eb\u0003\u0002\u0002\u0002\u02ef\u02ec",
    "\u0003\u0002\u0002\u0002\u02ef\u02ed\u0003\u0002\u0002\u0002\u02ef\u02ee",
    "\u0003\u0002\u0002\u0002\u02f0\u0011\u0003\u0002\u0002\u0002\u02f1\u02f5",
    "\u0005\u0154\u00ab\u0002\u02f2\u02f5\u0005\u0156\u00ac\u0002\u02f3\u02f5",
    "\u0005\u0158\u00ad\u0002\u02f4\u02f1\u0003\u0002\u0002\u0002\u02f4\u02f2",
    "\u0003\u0002\u0002\u0002\u02f4\u02f3\u0003\u0002\u0002\u0002\u02f5\u0013",
    "\u0003\u0002\u0002\u0002\u02f6\u0301\u0005\u015c\u00af\u0002\u02f7\u0301",
    "\u0005\u015e\u00b0\u0002\u02f8\u0301\u0005\u0160\u00b1\u0002\u02f9\u0301",
    "\u0005\u0164\u00b3\u0002\u02fa\u0301\u0005\u0166\u00b4\u0002\u02fb\u0301",
    "\u0005\u0168\u00b5\u0002\u02fc\u0301\u0005\u016c\u00b7\u0002\u02fd\u0301",
    "\u0005\u0162\u00b2\u0002\u02fe\u0301\u0005\u016a\u00b6\u0002\u02ff\u0301",
    "\u0005\u016e\u00b8\u0002\u0300\u02f6\u0003\u0002\u0002\u0002\u0300\u02f7",
    "\u0003\u0002\u0002\u0002\u0300\u02f8\u0003\u0002\u0002\u0002\u0300\u02f9",
    "\u0003\u0002\u0002\u0002\u0300\u02fa\u0003\u0002\u0002\u0002\u0300\u02fb",
    "\u0003\u0002\u0002\u0002\u0300\u02fc\u0003\u0002\u0002\u0002\u0300\u02fd",
    "\u0003\u0002\u0002\u0002\u0300\u02fe\u0003\u0002\u0002\u0002\u0300\u02ff",
    "\u0003\u0002\u0002\u0002\u0301\u0015\u0003\u0002\u0002\u0002\u0302\u031c",
    "\u0005\u0180\u00c1\u0002\u0303\u031c\u0005\u0182\u00c2\u0002\u0304\u031c",
    "\u0005\u0184\u00c3\u0002\u0305\u031c\u0005\u0186\u00c4\u0002\u0306\u031c",
    "\u0005\u0188\u00c5\u0002\u0307\u031c\u0005\u018a\u00c6\u0002\u0308\u031c",
    "\u0005\u018c\u00c7\u0002\u0309\u031c\u0005\u018e\u00c8\u0002\u030a\u031c",
    "\u0005\u01a6\u00d4\u0002\u030b\u031c\u0005\u01a8\u00d5\u0002\u030c\u031c",
    "\u0005\u01aa\u00d6\u0002\u030d\u031c\u0005\u01ac\u00d7\u0002\u030e\u031c",
    "\u0005\u01ae\u00d8\u0002\u030f\u031c\u0005\u01b2\u00da\u0002\u0310\u031c",
    "\u0005\u01b4\u00db\u0002\u0311\u031c\u0005\u01b6\u00dc\u0002\u0312\u031c",
    "\u0005\u01b8\u00dd\u0002\u0313\u031c\u0005\u01ba\u00de\u0002\u0314\u031c",
    "\u0005\u01c8\u00e5\u0002\u0315\u031c\u0005\u01ca\u00e6\u0002\u0316\u031c",
    "\u0005\u01cc\u00e7\u0002\u0317\u031c\u0005\u01ce\u00e8\u0002\u0318\u031c",
    "\u0005\u01d0\u00e9\u0002\u0319\u031c\u0005\u01d2\u00ea\u0002\u031a\u031c",
    "\u0005\u01d4\u00eb\u0002\u031b\u0302\u0003\u0002\u0002\u0002\u031b\u0303",
    "\u0003\u0002\u0002\u0002\u031b\u0304\u0003\u0002\u0002\u0002\u031b\u0305",
    "\u0003\u0002\u0002\u0002\u031b\u0306\u0003\u0002\u0002\u0002\u031b\u0307",
    "\u0003\u0002\u0002\u0002\u031b\u0308\u0003\u0002\u0002\u0002\u031b\u0309",
    "\u0003\u0002\u0002\u0002\u031b\u030a\u0003\u0002\u0002\u0002\u031b\u030b",
    "\u0003\u0002\u0002\u0002\u031b\u030c\u0003\u0002\u0002\u0002\u031b\u030d",
    "\u0003\u0002\u0002\u0002\u031b\u030e\u0003\u0002\u0002\u0002\u031b\u030f",
    "\u0003\u0002\u0002\u0002\u031b\u0310\u0003\u0002\u0002\u0002\u031b\u0311",
    "\u0003\u0002\u0002\u0002\u031b\u0312\u0003\u0002\u0002\u0002\u031b\u0313",
    "\u0003\u0002\u0002\u0002\u031b\u0314\u0003\u0002\u0002\u0002\u031b\u0315",
    "\u0003\u0002\u0002\u0002\u031b\u0316\u0003\u0002\u0002\u0002\u031b\u0317",
    "\u0003\u0002\u0002\u0002\u031b\u0318\u0003\u0002\u0002\u0002\u031b\u0319",
    "\u0003\u0002\u0002\u0002\u031b\u031a\u0003\u0002\u0002\u0002\u031c\u0017",
    "\u0003\u0002\u0002\u0002\u031d\u0325\u0005\u01de\u00f0\u0002\u031e\u0325",
    "\u0005\u01e0\u00f1\u0002\u031f\u0325\u0005\u01e2\u00f2\u0002\u0320\u0325",
    "\u0005\u01e4\u00f3\u0002\u0321\u0325\u0005\u01e6\u00f4\u0002\u0322\u0325",
    "\u0005\u01e8\u00f5\u0002\u0323\u0325\u0005\u01ec\u00f7\u0002\u0324\u031d",
    "\u0003\u0002\u0002\u0002\u0324\u031e\u0003\u0002\u0002\u0002\u0324\u031f",
    "\u0003\u0002\u0002\u0002\u0324\u0320\u0003\u0002\u0002\u0002\u0324\u0321",
    "\u0003\u0002\u0002\u0002\u0324\u0322\u0003\u0002\u0002\u0002\u0324\u0323",
    "\u0003\u0002\u0002\u0002\u0325\u0019\u0003\u0002\u0002\u0002\u0326\u0327",
    "\u0007 \u0002\u0002\u0327\u0329\t\u0002\u0002\u0002\u0328\u032a\u0005",
    "\u0244\u0123\u0002\u0329\u0328\u0003\u0002\u0002\u0002\u0329\u032a\u0003",
    "\u0002\u0002\u0002\u032a\u032b\u0003\u0002\u0002\u0002\u032b\u032f\u0005",
    "\u020c\u0107\u0002\u032c\u032e\u00052\u001a\u0002\u032d\u032c\u0003",
    "\u0002\u0002\u0002\u032e\u0331\u0003\u0002\u0002\u0002\u032f\u032d\u0003",
    "\u0002\u0002\u0002\u032f\u0330\u0003\u0002\u0002\u0002\u0330\u001b\u0003",
    "\u0002\u0002\u0002\u0331\u032f\u0003\u0002\u0002\u0002\u0332\u0334\u0007",
    " \u0002\u0002\u0333\u0335\u00054\u001b\u0002\u0334\u0333\u0003\u0002",
    "\u0002\u0002\u0334\u0335\u0003\u0002\u0002\u0002\u0335\u0336\u0003\u0002",
    "\u0002\u0002\u0336\u0338\u0007\u015e\u0002\u0002\u0337\u0339\u0005\u0244",
    "\u0123\u0002\u0338\u0337\u0003\u0002\u0002\u0002\u0338\u0339\u0003\u0002",
    "\u0002\u0002\u0339\u033a\u0003\u0002\u0002\u0002\u033a\u033b\u0005\u01f2",
    "\u00fa\u0002\u033b\u033c\u0007l\u0002\u0002\u033c\u033d\u0007\u0207",
    "\u0002\u0002\u033d\u0344\u00056\u001c\u0002\u033e\u033f\u0007l\u0002",
    "\u0002\u033f\u0341\u0007\u0136\u0002\u0002\u0340\u0342\u0007h\u0002",
    "\u0002\u0341\u0340\u0003\u0002\u0002\u0002\u0341\u0342\u0003\u0002\u0002",
    "\u0002\u0342\u0343\u0003\u0002\u0002\u0002\u0343\u0345\u0007\u01e0\u0002",
    "\u0002\u0344\u033e\u0003\u0002\u0002\u0002\u0344\u0345\u0003\u0002\u0002",
    "\u0002\u0345\u0347\u0003\u0002\u0002\u0002\u0346\u0348\u0005> \u0002",
    "\u0347\u0346\u0003\u0002\u0002\u0002\u0347\u0348\u0003\u0002\u0002\u0002",
    "\u0348\u034b\u0003\u0002\u0002\u0002\u0349\u034a\u0007\u0133\u0002\u0002",
    "\u034a\u034c\u0007\u040f\u0002\u0002\u034b\u0349\u0003\u0002\u0002\u0002",
    "\u034b\u034c\u0003\u0002\u0002\u0002\u034c\u034d\u0003\u0002\u0002\u0002",
    "\u034d\u034e\u0007\u0150\u0002\u0002\u034e\u034f\u0005\u015a\u00ae\u0002",
    "\u034f\u001d\u0003\u0002\u0002\u0002\u0350\u0352\u0007 \u0002\u0002",
    "\u0351\u0353\t\u0003\u0002\u0002\u0352\u0351\u0003\u0002\u0002\u0002",
    "\u0352\u0353\u0003\u0002\u0002\u0002\u0353\u0355\u0003\u0002\u0002\u0002",
    "\u0354\u0356\t\u0004\u0002\u0002\u0355\u0354\u0003\u0002\u0002\u0002",
    "\u0355\u0356\u0003\u0002\u0002\u0002\u0356\u0357\u0003\u0002\u0002\u0002",
    "\u0357\u0358\u0007J\u0002\u0002\u0358\u035a\u0005\u020c\u0107\u0002",
    "\u0359\u035b\u0005@!\u0002\u035a\u0359\u0003\u0002\u0002\u0002\u035a",
    "\u035b\u0003\u0002\u0002\u0002\u035b\u035c\u0003\u0002\u0002\u0002\u035c",
    "\u035d\u0007l\u0002\u0002\u035d\u035e\u0005\u01f4\u00fb\u0002\u035e",
    "\u0362\u0005\u0230\u0119\u0002\u035f\u0361\u0005B\"\u0002\u0360\u035f",
    "\u0003\u0002\u0002\u0002\u0361\u0364\u0003\u0002\u0002\u0002\u0362\u0360",
    "\u0003\u0002\u0002\u0002\u0362\u0363\u0003\u0002\u0002\u0002\u0363\u0371",
    "\u0003\u0002\u0002\u0002\u0364\u0362\u0003\u0002\u0002\u0002\u0365\u0367",
    "\u0007\u0114\u0002\u0002\u0366\u0368\u0007\u03f7\u0002\u0002\u0367\u0366",
    "\u0003\u0002\u0002\u0002\u0367\u0368\u0003\u0002\u0002\u0002\u0368\u0369",
    "\u0003\u0002\u0002\u0002\u0369\u0370\t\u0005\u0002\u0002\u036a\u036c",
    "\u0007_\u0002\u0002\u036b\u036d\u0007\u03f7\u0002\u0002\u036c\u036b",
    "\u0003\u0002\u0002\u0002\u036c\u036d\u0003\u0002\u0002\u0002\u036d\u036e",
    "\u0003\u0002\u0002\u0002\u036e\u0370\t\u0006\u0002\u0002\u036f\u0365",
    "\u0003\u0002\u0002\u0002\u036f\u036a\u0003\u0002\u0002\u0002\u0370\u0373",
    "\u0003\u0002\u0002\u0002\u0371\u036f\u0003\u0002\u0002\u0002\u0371\u0372",
    "\u0003\u0002\u0002\u0002\u0372\u001f\u0003\u0002\u0002\u0002\u0373\u0371",
    "\u0003\u0002\u0002\u0002\u0374\u0375\u0007 \u0002\u0002\u0375\u0376",
    "\u0007\u0195\u0002\u0002\u0376\u0377\u0007D\u0002\u0002\u0377\u0378",
    "\u0005\u020c\u0107\u0002\u0378\u0379\u0007\u0007\u0002\u0002\u0379\u037a",
    "\u0007\u023a\u0002\u0002\u037a\u0380\u0007\u040f\u0002\u0002\u037b\u037d",
    "\u0007\u0180\u0002\u0002\u037c\u037e\u0007\u03f7\u0002\u0002\u037d\u037c",
    "\u0003\u0002\u0002\u0002\u037d\u037e\u0003\u0002\u0002\u0002\u037e\u037f",
    "\u0003\u0002\u0002\u0002\u037f\u0381\u0005\u0214\u010b\u0002\u0380\u037b",
    "\u0003\u0002\u0002\u0002\u0380\u0381\u0003\u0002\u0002\u0002\u0381\u0387",
    "\u0003\u0002\u0002\u0002\u0382\u0384\u0007\u023b\u0002\u0002\u0383\u0385",
    "\u0007\u03f7\u0002\u0002\u0384\u0383\u0003\u0002\u0002\u0002\u0384\u0385",
    "\u0003\u0002\u0002\u0002\u0385\u0386\u0003\u0002\u0002\u0002\u0386\u0388",
    "\u0005\u0214\u010b\u0002\u0387\u0382\u0003\u0002\u0002\u0002\u0387\u0388",
    "\u0003\u0002\u0002\u0002\u0388\u038e\u0003\u0002\u0002\u0002\u0389\u038b",
    "\u0007\u01ea\u0002\u0002\u038a\u038c\u0007\u03f7\u0002\u0002\u038b\u038a",
    "\u0003\u0002\u0002\u0002\u038b\u038c\u0003\u0002\u0002\u0002\u038c\u038d",
    "\u0003\u0002\u0002\u0002\u038d\u038f\u0005\u0214\u010b\u0002\u038e\u0389",
    "\u0003\u0002\u0002\u0002\u038e\u038f\u0003\u0002\u0002\u0002\u038f\u0395",
    "\u0003\u0002\u0002\u0002\u0390\u0392\u0007\u01c4\u0002\u0002\u0391\u0393",
    "\u0007\u03f7\u0002\u0002\u0392\u0391\u0003\u0002\u0002\u0002\u0392\u0393",
    "\u0003\u0002\u0002\u0002\u0393\u0394\u0003\u0002\u0002\u0002\u0394\u0396",
    "\u0005\u020c\u0107\u0002\u0395\u0390\u0003\u0002\u0002\u0002\u0395\u0396",
    "\u0003\u0002\u0002\u0002\u0396\u0398\u0003\u0002\u0002\u0002\u0397\u0399",
    "\u0007\u0249\u0002\u0002\u0398\u0397\u0003\u0002\u0002\u0002\u0398\u0399",
    "\u0003\u0002\u0002\u0002\u0399\u039f\u0003\u0002\u0002\u0002\u039a\u039c",
    "\u0007\u0133\u0002\u0002\u039b\u039d\u0007\u03f7\u0002\u0002\u039c\u039b",
    "\u0003\u0002\u0002\u0002\u039c\u039d\u0003\u0002\u0002\u0002\u039d\u039e",
    "\u0003\u0002\u0002\u0002\u039e\u03a0\u0007\u040f\u0002\u0002\u039f\u039a",
    "\u0003\u0002\u0002\u0002\u039f\u03a0\u0003\u0002\u0002\u0002\u03a0\u03a1",
    "\u0003\u0002\u0002\u0002\u03a1\u03a3\u0007\u0158\u0002\u0002\u03a2\u03a4",
    "\u0007\u03f7\u0002\u0002\u03a3\u03a2\u0003\u0002\u0002\u0002\u03a3\u03a4",
    "\u0003\u0002\u0002\u0002\u03a4\u03a5\u0003\u0002\u0002\u0002\u03a5\u03a6",
    "\u0005\u0202\u0102\u0002\u03a6!\u0003\u0002\u0002\u0002\u03a7\u03a9",
    "\u0007 \u0002\u0002\u03a8\u03aa\u00054\u001b\u0002\u03a9\u03a8\u0003",
    "\u0002\u0002\u0002\u03a9\u03aa\u0003\u0002\u0002\u0002\u03aa\u03ab\u0003",
    "\u0002\u0002\u0002\u03ab\u03ac\u0007w\u0002\u0002\u03ac\u03ad\u0005",
    "\u01f2\u00fa\u0002\u03ad\u03af\u0007\u0400\u0002\u0002\u03ae\u03b0\u0005",
    "D#\u0002\u03af\u03ae\u0003\u0002\u0002\u0002\u03af\u03b0\u0003\u0002",
    "\u0002\u0002\u03b0\u03b5\u0003\u0002\u0002\u0002\u03b1\u03b2\u0007\u0402",
    "\u0002\u0002\u03b2\u03b4\u0005D#\u0002\u03b3\u03b1\u0003\u0002\u0002",
    "\u0002\u03b4\u03b7\u0003\u0002\u0002\u0002\u03b5\u03b3\u0003\u0002\u0002",
    "\u0002\u03b5\u03b6\u0003\u0002\u0002\u0002\u03b6\u03b8\u0003\u0002\u0002",
    "\u0002\u03b7\u03b5\u0003\u0002\u0002\u0002\u03b8\u03bc\u0007\u0401\u0002",
    "\u0002\u03b9\u03bb\u0005H%\u0002\u03ba\u03b9\u0003\u0002\u0002\u0002",
    "\u03bb\u03be\u0003\u0002\u0002\u0002\u03bc\u03ba\u0003\u0002\u0002\u0002",
    "\u03bc\u03bd\u0003\u0002\u0002\u0002\u03bd\u03bf\u0003\u0002\u0002\u0002",
    "\u03be\u03bc\u0003\u0002\u0002\u0002\u03bf\u03c0\u0005\u015a\u00ae\u0002",
    "\u03c0#\u0003\u0002\u0002\u0002\u03c1\u03c3\u0007 \u0002\u0002\u03c2",
    "\u03c4\u00054\u001b\u0002\u03c3\u03c2\u0003\u0002\u0002\u0002\u03c3",
    "\u03c4\u0003\u0002\u0002\u0002\u03c4\u03c5\u0003\u0002\u0002\u0002\u03c5",
    "\u03c6\u0007\u0172\u0002\u0002\u03c6\u03c7\u0005\u01f2\u00fa\u0002\u03c7",
    "\u03c9\u0007\u0400\u0002\u0002\u03c8\u03ca\u0005F$\u0002\u03c9\u03c8",
    "\u0003\u0002\u0002\u0002\u03c9\u03ca\u0003\u0002\u0002\u0002\u03ca\u03cf",
    "\u0003\u0002\u0002\u0002\u03cb\u03cc\u0007\u0402\u0002\u0002\u03cc\u03ce",
    "\u0005F$\u0002\u03cd\u03cb\u0003\u0002\u0002\u0002\u03ce\u03d1\u0003",
    "\u0002\u0002\u0002\u03cf\u03cd\u0003\u0002\u0002\u0002\u03cf\u03d0\u0003",
    "\u0002\u0002\u0002\u03d0\u03d2\u0003\u0002\u0002\u0002\u03d1\u03cf\u0003",
    "\u0002\u0002\u0002\u03d2\u03d3\u0007\u0401\u0002\u0002\u03d3\u03d4\u0007",
    "\u01fe\u0002\u0002\u03d4\u03d8\u0005\u0220\u0111\u0002\u03d5\u03d7\u0005",
    "H%\u0002\u03d6\u03d5\u0003\u0002\u0002\u0002\u03d7\u03da\u0003\u0002",
    "\u0002\u0002\u03d8\u03d6\u0003\u0002\u0002\u0002\u03d8\u03d9\u0003\u0002",
    "\u0002\u0002\u03d9\u03dd\u0003\u0002\u0002\u0002\u03da\u03d8\u0003\u0002",
    "\u0002\u0002\u03db\u03de\u0005\u015a\u00ae\u0002\u03dc\u03de\u0005\u016a",
    "\u00b6\u0002\u03dd\u03db\u0003\u0002\u0002\u0002\u03dd\u03dc\u0003\u0002",
    "\u0002\u0002\u03de%\u0003\u0002\u0002\u0002\u03df\u03e0\u0007 \u0002",
    "\u0002\u03e0\u03e1\u0007\u0209\u0002\u0002\u03e1\u03e2\u0005\u020c\u0107",
    "\u0002\u03e2\u03e3\u0007>\u0002\u0002\u03e3\u03e4\u0007\u0145\u0002",
    "\u0002\u03e4\u03e5\u0007\u024d\u0002\u0002\u03e5\u03e6\t\u0007\u0002",
    "\u0002\u03e6\u03e7\u0007\u01d0\u0002\u0002\u03e7\u03e8\u0007\u0400\u0002",
    "\u0002\u03e8\u03ed\u0005J&\u0002\u03e9\u03ea\u0007\u0402\u0002\u0002",
    "\u03ea\u03ec\u0005J&\u0002\u03eb\u03e9\u0003\u0002\u0002\u0002\u03ec",
    "\u03ef\u0003\u0002\u0002\u0002\u03ed\u03eb\u0003\u0002\u0002\u0002\u03ed",
    "\u03ee\u0003\u0002\u0002\u0002\u03ee\u03f0\u0003\u0002\u0002\u0002\u03ef",
    "\u03ed\u0003\u0002\u0002\u0002\u03f0\u03f1\u0007\u0401\u0002\u0002\u03f1",
    "\'\u0003\u0002\u0002\u0002\u03f2\u03f4\u0007 \u0002\u0002\u03f3\u03f5",
    "\u0007\u0231\u0002\u0002\u03f4\u03f3\u0003\u0002\u0002\u0002\u03f4\u03f5",
    "\u0003\u0002\u0002\u0002\u03f5\u03f6\u0003\u0002\u0002\u0002\u03f6\u03f8",
    "\u0007\u009c\u0002\u0002\u03f7\u03f9\u0005\u0244\u0123\u0002\u03f8\u03f7",
    "\u0003\u0002\u0002\u0002\u03f8\u03f9\u0003\u0002\u0002\u0002\u03f9\u03fa",
    "\u0003\u0002\u0002\u0002\u03fa\u0402\u0005\u01f4\u00fb\u0002\u03fb\u03fc",
    "\u0007Z\u0002\u0002\u03fc\u0403\u0005\u01f4\u00fb\u0002\u03fd\u03fe",
    "\u0007\u0400\u0002\u0002\u03fe\u03ff\u0007Z\u0002\u0002\u03ff\u0400",
    "\u0005\u01f4\u00fb\u0002\u0400\u0401\u0007\u0401\u0002\u0002\u0401\u0403",
    "\u0003\u0002\u0002\u0002\u0402\u03fb\u0003\u0002\u0002\u0002\u0402\u03fd",
    "\u0003\u0002\u0002\u0002\u0403\u0441\u0003\u0002\u0002\u0002\u0404\u0406",
    "\u0007 \u0002\u0002\u0405\u0407\u0007\u0231\u0002\u0002\u0406\u0405",
    "\u0003\u0002\u0002\u0002\u0406\u0407\u0003\u0002\u0002\u0002\u0407\u0408",
    "\u0003\u0002\u0002\u0002\u0408\u040a\u0007\u009c\u0002\u0002\u0409\u040b",
    "\u0005\u0244\u0123\u0002\u040a\u0409\u0003\u0002\u0002\u0002\u040a\u040b",
    "\u0003\u0002\u0002\u0002\u040b\u040c\u0003\u0002\u0002\u0002\u040c\u040e",
    "\u0005\u01f4\u00fb\u0002\u040d\u040f\u0005L\'\u0002\u040e\u040d\u0003",
    "\u0002\u0002\u0002\u040e\u040f\u0003\u0002\u0002\u0002\u040f\u041a\u0003",
    "\u0002\u0002\u0002\u0410\u0417\u0005^0\u0002\u0411\u0413\u0007\u0402",
    "\u0002\u0002\u0412\u0411\u0003\u0002\u0002\u0002\u0412\u0413\u0003\u0002",
    "\u0002\u0002\u0413\u0414\u0003\u0002\u0002\u0002\u0414\u0416\u0005^",
    "0\u0002\u0415\u0412\u0003\u0002\u0002\u0002\u0416\u0419\u0003\u0002",
    "\u0002\u0002\u0417\u0415\u0003\u0002\u0002\u0002\u0417\u0418\u0003\u0002",
    "\u0002\u0002\u0418\u041b\u0003\u0002\u0002\u0002\u0419\u0417\u0003\u0002",
    "\u0002\u0002\u041a\u0410\u0003\u0002\u0002\u0002\u041a\u041b\u0003\u0002",
    "\u0002\u0002\u041b\u041d\u0003\u0002\u0002\u0002\u041c\u041e\u0005b",
    "2\u0002\u041d\u041c\u0003\u0002\u0002\u0002\u041d\u041e\u0003\u0002",
    "\u0002\u0002\u041e\u0420\u0003\u0002\u0002\u0002\u041f\u0421\t\b\u0002",
    "\u0002\u0420\u041f\u0003\u0002\u0002\u0002\u0420\u0421\u0003\u0002\u0002",
    "\u0002\u0421\u0423\u0003\u0002\u0002\u0002\u0422\u0424\u0007\r\u0002",
    "\u0002\u0423\u0422\u0003\u0002\u0002\u0002\u0423\u0424\u0003\u0002\u0002",
    "\u0002\u0424\u0425\u0003\u0002\u0002\u0002\u0425\u0426\u0005\u00b4[",
    "\u0002\u0426\u0441\u0003\u0002\u0002\u0002\u0427\u0429\u0007 \u0002",
    "\u0002\u0428\u042a\u0007\u0231\u0002\u0002\u0429\u0428\u0003\u0002\u0002",
    "\u0002\u0429\u042a\u0003\u0002\u0002\u0002\u042a\u042b\u0003\u0002\u0002",
    "\u0002\u042b\u042d\u0007\u009c\u0002\u0002\u042c\u042e\u0005\u0244\u0123",
    "\u0002\u042d\u042c\u0003\u0002\u0002\u0002\u042d\u042e\u0003\u0002\u0002",
    "\u0002\u042e\u042f\u0003\u0002\u0002\u0002\u042f\u0430\u0005\u01f4\u00fb",
    "\u0002\u0430\u043b\u0005L\'\u0002\u0431\u0438\u0005^0\u0002\u0432\u0434",
    "\u0007\u0402\u0002\u0002\u0433\u0432\u0003\u0002\u0002\u0002\u0433\u0434",
    "\u0003\u0002\u0002\u0002\u0434\u0435\u0003\u0002\u0002\u0002\u0435\u0437",
    "\u0005^0\u0002\u0436\u0433\u0003\u0002\u0002\u0002\u0437\u043a\u0003",
    "\u0002\u0002\u0002\u0438\u0436\u0003\u0002\u0002\u0002\u0438\u0439\u0003",
    "\u0002\u0002\u0002\u0439\u043c\u0003\u0002\u0002\u0002\u043a\u0438\u0003",
    "\u0002\u0002\u0002\u043b\u0431\u0003\u0002\u0002\u0002\u043b\u043c\u0003",
    "\u0002\u0002\u0002\u043c\u043e\u0003\u0002\u0002\u0002\u043d\u043f\u0005",
    "b2\u0002\u043e\u043d\u0003\u0002\u0002\u0002\u043e\u043f\u0003\u0002",
    "\u0002\u0002\u043f\u0441\u0003\u0002\u0002\u0002\u0440\u03f2\u0003\u0002",
    "\u0002\u0002\u0440\u0404\u0003\u0002\u0002\u0002\u0440\u0427\u0003\u0002",
    "\u0002\u0002\u0441)\u0003\u0002\u0002\u0002\u0442\u0443\u0007 \u0002",
    "\u0002\u0443\u0444\u0007\u0230\u0002\u0002\u0444\u0445\u0005\u020c\u0107",
    "\u0002\u0445\u0446\u0007\u0007\u0002\u0002\u0446\u0447\u0007\u0146\u0002",
    "\u0002\u0447\u044b\u0007\u040f\u0002\u0002\u0448\u0449\u0007\u016a\u0002",
    "\u0002\u0449\u044a\u0007\u03f7\u0002\u0002\u044a\u044c\u0005\u0214\u010b",
    "\u0002\u044b\u0448\u0003\u0002\u0002\u0002\u044b\u044c\u0003\u0002\u0002",
    "\u0002\u044c\u0452\u0003\u0002\u0002\u0002\u044d\u044f\u0007\u0158\u0002",
    "\u0002\u044e\u0450\u0007\u03f7\u0002\u0002\u044f\u044e\u0003\u0002\u0002",
    "\u0002\u044f\u0450\u0003\u0002\u0002\u0002\u0450\u0451\u0003\u0002\u0002",
    "\u0002\u0451\u0453\u0005\u0202\u0102\u0002\u0452\u044d\u0003\u0002\u0002",
    "\u0002\u0452\u0453\u0003\u0002\u0002\u0002\u0453+\u0003\u0002\u0002",
    "\u0002\u0454\u0455\u0007 \u0002\u0002\u0455\u0456\u0007\u0230\u0002",
    "\u0002\u0456\u0457\u0005\u020c\u0107\u0002\u0457\u0458\u0007\u0007\u0002",
    "\u0002\u0458\u0459\u0007\u0146\u0002\u0002\u0459\u045a\u0007\u040f\u0002",
    "\u0002\u045a\u045b\u0007\u00aa\u0002\u0002\u045b\u045c\u0007\u0195\u0002",
    "\u0002\u045c\u045d\u0007D\u0002\u0002\u045d\u0463\u0005\u020c\u0107",
    "\u0002\u045e\u0460\u0007\u0166\u0002\u0002\u045f\u0461\u0007\u03f7\u0002",
    "\u0002\u0460\u045f\u0003\u0002\u0002\u0002\u0460\u0461\u0003\u0002\u0002",
    "\u0002\u0461\u0462\u0003\u0002\u0002\u0002\u0462\u0464\u0005\u0214\u010b",
    "\u0002\u0463\u045e\u0003\u0002\u0002\u0002\u0463\u0464\u0003\u0002\u0002",
    "\u0002\u0464\u046a\u0003\u0002\u0002\u0002\u0465\u0467\u0007\u0180\u0002",
    "\u0002\u0466\u0468\u0007\u03f7\u0002\u0002\u0467\u0466\u0003\u0002\u0002",
    "\u0002\u0467\u0468\u0003\u0002\u0002\u0002\u0468\u0469\u0003\u0002\u0002",
    "\u0002\u0469\u046b\u0005\u0214\u010b\u0002\u046a\u0465\u0003\u0002\u0002",
    "\u0002\u046a\u046b\u0003\u0002\u0002\u0002\u046b\u0471\u0003\u0002\u0002",
    "\u0002\u046c\u046e\u0007\u0119\u0002\u0002\u046d\u046f\u0007\u03f7\u0002",
    "\u0002\u046e\u046d\u0003\u0002\u0002\u0002\u046e\u046f\u0003\u0002\u0002",
    "\u0002\u046f\u0470\u0003\u0002\u0002\u0002\u0470\u0472\u0005\u0214\u010b",
    "\u0002\u0471\u046c\u0003\u0002\u0002\u0002\u0471\u0472\u0003\u0002\u0002",
    "\u0002\u0472\u0478\u0003\u0002\u0002\u0002\u0473\u0475\u0007\u01af\u0002",
    "\u0002\u0474\u0476\u0007\u03f7\u0002\u0002\u0475\u0474\u0003\u0002\u0002",
    "\u0002\u0475\u0476\u0003\u0002\u0002\u0002\u0476\u0477\u0003\u0002\u0002",
    "\u0002\u0477\u0479\u0005\u0214\u010b\u0002\u0478\u0473\u0003\u0002\u0002",
    "\u0002\u0478\u0479\u0003\u0002\u0002\u0002\u0479\u047f\u0003\u0002\u0002",
    "\u0002\u047a\u047c\u0007\u01c4\u0002\u0002\u047b\u047d\u0007\u03f7\u0002",
    "\u0002\u047c\u047b\u0003\u0002\u0002\u0002\u047c\u047d\u0003\u0002\u0002",
    "\u0002\u047d\u047e\u0003\u0002\u0002\u0002\u047e\u0480\u0005\u020c\u0107",
    "\u0002\u047f\u047a\u0003\u0002\u0002\u0002\u047f\u0480\u0003\u0002\u0002",
    "\u0002\u0480\u0482\u0003\u0002\u0002\u0002\u0481\u0483\u0007\u0249\u0002",
    "\u0002\u0482\u0481\u0003\u0002\u0002\u0002\u0482\u0483\u0003\u0002\u0002",
    "\u0002\u0483\u0489\u0003\u0002\u0002\u0002\u0484\u0486\u0007\u0133\u0002",
    "\u0002\u0485\u0487\u0007\u03f7\u0002\u0002\u0486\u0485\u0003\u0002\u0002",
    "\u0002\u0486\u0487\u0003\u0002\u0002\u0002\u0487\u0488\u0003\u0002\u0002",
    "\u0002\u0488\u048a\u0007\u040f\u0002\u0002\u0489\u0484\u0003\u0002\u0002",
    "\u0002\u0489\u048a\u0003\u0002\u0002\u0002\u048a\u048b\u0003\u0002\u0002",
    "\u0002\u048b\u048d\u0007\u0158\u0002\u0002\u048c\u048e\u0007\u03f7\u0002",
    "\u0002\u048d\u048c\u0003\u0002\u0002\u0002\u048d\u048e\u0003\u0002\u0002",
    "\u0002\u048e\u048f\u0003\u0002\u0002\u0002\u048f\u0490\u0005\u0202\u0102",
    "\u0002\u0490-\u0003\u0002\u0002\u0002\u0491\u0493\u0007 \u0002\u0002",
    "\u0492\u0494\u00054\u001b\u0002\u0493\u0492\u0003\u0002\u0002\u0002",
    "\u0493\u0494\u0003\u0002\u0002\u0002\u0494\u0495\u0003\u0002\u0002\u0002",
    "\u0495\u0496\u0007\u00a1\u0002\u0002\u0496\u0497\u0005\u01f2\u00fa\u0002",
    "\u0497\u0498\t\t\u0002\u0002\u0498\u0499\t\n\u0002\u0002\u0499\u049a",
    "\u0007l\u0002\u0002\u049a\u049b\u0005\u01f4\u00fb\u0002\u049b\u049c",
    "\u0007<\u0002\u0002\u049c\u049d\u00072\u0002\u0002\u049d\u04a0\u0007",
    "\u0203\u0002\u0002\u049e\u049f\t\u000b\u0002\u0002\u049f\u04a1\u0005",
    "\u01f2\u00fa\u0002\u04a0\u049e\u0003\u0002\u0002\u0002\u04a0\u04a1\u0003",
    "\u0002\u0002\u0002\u04a1\u04a2\u0003\u0002\u0002\u0002\u04a2\u04a3\u0005",
    "\u015a\u00ae\u0002\u04a3/\u0003\u0002\u0002\u0002\u04a4\u04a7\u0007",
    " \u0002\u0002\u04a5\u04a6\u0007p\u0002\u0002\u04a6\u04a8\u0007\u0081",
    "\u0002\u0002\u04a7\u04a5\u0003\u0002\u0002\u0002\u04a7\u04a8\u0003\u0002",
    "\u0002\u0002\u04a8\u04ac\u0003\u0002\u0002\u0002\u04a9\u04aa\u0007\u0114",
    "\u0002\u0002\u04aa\u04ab\u0007\u03f7\u0002\u0002\u04ab\u04ad\t\f\u0002",
    "\u0002\u04ac\u04a9\u0003\u0002\u0002\u0002\u04ac\u04ad\u0003\u0002\u0002",
    "\u0002\u04ad\u04af\u0003\u0002\u0002\u0002\u04ae\u04b0\u00054\u001b",
    "\u0002\u04af\u04ae\u0003\u0002\u0002\u0002\u04af\u04b0\u0003\u0002\u0002",
    "\u0002\u04b0\u04b4\u0003\u0002\u0002\u0002\u04b1\u04b2\u0007\u0091\u0002",
    "\u0002\u04b2\u04b3\u0007\u0208\u0002\u0002\u04b3\u04b5\t\r\u0002\u0002",
    "\u04b4\u04b1\u0003\u0002\u0002\u0002\u04b4\u04b5\u0003\u0002\u0002\u0002",
    "\u04b5\u04b6\u0003\u0002\u0002\u0002\u04b6\u04b7\u0007\u0246\u0002\u0002",
    "\u04b7\u04bc\u0005\u01f2\u00fa\u0002\u04b8\u04b9\u0007\u0400\u0002\u0002",
    "\u04b9\u04ba\u0005\u022c\u0117\u0002\u04ba\u04bb\u0007\u0401\u0002\u0002",
    "\u04bb\u04bd\u0003\u0002\u0002\u0002\u04bc\u04b8\u0003\u0002\u0002\u0002",
    "\u04bc\u04bd\u0003\u0002\u0002\u0002\u04bd\u04be\u0003\u0002\u0002\u0002",
    "\u04be\u04bf\u0007\r\u0002\u0002\u04bf\u04c6\u0005\u00b4[\u0002\u04c0",
    "\u04c2\u0007\u00b0\u0002\u0002\u04c1\u04c3\t\u000e\u0002\u0002\u04c2",
    "\u04c1\u0003\u0002\u0002\u0002\u04c2\u04c3\u0003\u0002\u0002\u0002\u04c3",
    "\u04c4\u0003\u0002\u0002\u0002\u04c4\u04c5\u0007\u0019\u0002\u0002\u04c5",
    "\u04c7\u0007n\u0002\u0002\u04c6\u04c0\u0003\u0002\u0002\u0002\u04c6",
    "\u04c7\u0003\u0002\u0002\u0002\u04c71\u0003\u0002\u0002\u0002\u04c8",
    "\u04ca\u0007(\u0002\u0002\u04c9\u04c8\u0003\u0002\u0002\u0002\u04c9",
    "\u04ca\u0003\u0002\u0002\u0002\u04ca\u04ce\u0003\u0002\u0002\u0002\u04cb",
    "\u04cc\u0007\u0018\u0002\u0002\u04cc\u04cf\u0007\u008c\u0002\u0002\u04cd",
    "\u04cf\u0007\u02df\u0002\u0002\u04ce\u04cb\u0003\u0002\u0002\u0002\u04ce",
    "\u04cd\u0003\u0002\u0002\u0002\u04cf\u04d1\u0003\u0002\u0002\u0002\u04d0",
    "\u04d2\u0007\u03f7\u0002\u0002\u04d1\u04d0\u0003\u0002\u0002\u0002\u04d1",
    "\u04d2\u0003\u0002\u0002\u0002\u04d2\u04d5\u0003\u0002\u0002\u0002\u04d3",
    "\u04d6\u0005\u01fe\u0100\u0002\u04d4\u04d6\u0007(\u0002\u0002\u04d5",
    "\u04d3\u0003\u0002\u0002\u0002\u04d5\u04d4\u0003\u0002\u0002\u0002\u04d6",
    "\u04e0\u0003\u0002\u0002\u0002\u04d7\u04d9\u0007(\u0002\u0002\u04d8",
    "\u04d7\u0003\u0002\u0002\u0002\u04d8\u04d9\u0003\u0002\u0002\u0002\u04d9",
    "\u04da\u0003\u0002\u0002\u0002\u04da\u04dc\u0007\u001a\u0002\u0002\u04db",
    "\u04dd\u0007\u03f7\u0002\u0002\u04dc\u04db\u0003\u0002\u0002\u0002\u04dc",
    "\u04dd\u0003\u0002\u0002\u0002\u04dd\u04de\u0003\u0002\u0002\u0002\u04de",
    "\u04e0\u0005\u0200\u0101\u0002\u04df\u04c9\u0003\u0002\u0002\u0002\u04df",
    "\u04d8\u0003\u0002\u0002\u0002\u04e03\u0003\u0002\u0002\u0002\u04e1",
    "\u04e2\u0007\u0149\u0002\u0002\u04e2\u04e9\u0007\u03f7\u0002\u0002\u04e3",
    "\u04ea\u0005\u01fa\u00fe\u0002\u04e4\u04e7\u0007#\u0002\u0002\u04e5",
    "\u04e6\u0007\u0400\u0002\u0002\u04e6\u04e8\u0007\u0401\u0002\u0002\u04e7",
    "\u04e5\u0003\u0002\u0002\u0002\u04e7\u04e8\u0003\u0002\u0002\u0002\u04e8",
    "\u04ea\u0003\u0002\u0002\u0002\u04e9\u04e3\u0003\u0002\u0002\u0002\u04e9",
    "\u04e4\u0003\u0002\u0002\u0002\u04ea5\u0003\u0002\u0002\u0002\u04eb",
    "\u04ec\u0007\u0116\u0002\u0002\u04ec\u04f0\u00058\u001d\u0002\u04ed",
    "\u04ef\u0005:\u001e\u0002\u04ee\u04ed\u0003\u0002\u0002\u0002\u04ef",
    "\u04f2\u0003\u0002\u0002\u0002\u04f0\u04ee\u0003\u0002\u0002\u0002\u04f0",
    "\u04f1\u0003\u0002\u0002\u0002\u04f1\u050e\u0003\u0002\u0002\u0002\u04f2",
    "\u04f0\u0003\u0002\u0002\u0002\u04f3\u04f6\u0007\u0160\u0002\u0002\u04f4",
    "\u04f7\u0005\u0212\u010a\u0002\u04f5\u04f7\u0005\u025a\u012e\u0002\u04f6",
    "\u04f4\u0003\u0002\u0002\u0002\u04f6\u04f5\u0003\u0002\u0002\u0002\u04f7",
    "\u04f8\u0003\u0002\u0002\u0002\u04f8\u0501\u0005<\u001f\u0002\u04f9",
    "\u04fa\u0007\u021f\u0002\u0002\u04fa\u04fe\u00058\u001d\u0002\u04fb",
    "\u04fd\u0005:\u001e\u0002\u04fc\u04fb\u0003\u0002\u0002\u0002\u04fd",
    "\u0500\u0003\u0002\u0002\u0002\u04fe\u04fc\u0003\u0002\u0002\u0002\u04fe",
    "\u04ff\u0003\u0002\u0002\u0002\u04ff\u0502\u0003\u0002\u0002\u0002\u0500",
    "\u04fe\u0003\u0002\u0002\u0002\u0501\u04f9\u0003\u0002\u0002\u0002\u0501",
    "\u0502\u0003\u0002\u0002\u0002\u0502\u050b\u0003\u0002\u0002\u0002\u0503",
    "\u0504\u0007\u0157\u0002\u0002\u0504\u0508\u00058\u001d\u0002\u0505",
    "\u0507\u0005:\u001e\u0002\u0506\u0505\u0003\u0002\u0002\u0002\u0507",
    "\u050a\u0003\u0002\u0002\u0002\u0508\u0506\u0003\u0002\u0002\u0002\u0508",
    "\u0509\u0003\u0002\u0002\u0002\u0509\u050c\u0003\u0002\u0002\u0002\u050a",
    "\u0508\u0003\u0002\u0002\u0002\u050b\u0503\u0003\u0002\u0002\u0002\u050b",
    "\u050c\u0003\u0002\u0002\u0002\u050c\u050e\u0003\u0002\u0002\u0002\u050d",
    "\u04eb\u0003\u0002\u0002\u0002\u050d\u04f3\u0003\u0002\u0002\u0002\u050e",
    "7\u0003\u0002\u0002\u0002\u050f\u0514\u0007\u00ff\u0002\u0002\u0510",
    "\u0514\u0005\u0216\u010c\u0002\u0511\u0514\u0005\u0212\u010a\u0002\u0512",
    "\u0514\u0005\u025a\u012e\u0002\u0513\u050f\u0003\u0002\u0002\u0002\u0513",
    "\u0510\u0003\u0002\u0002\u0002\u0513\u0511\u0003\u0002\u0002\u0002\u0513",
    "\u0512\u0003\u0002\u0002\u0002\u05149\u0003\u0002\u0002\u0002\u0515",
    "\u0516\u0007\u03f2\u0002\u0002\u0516\u0519\u0007O\u0002\u0002\u0517",
    "\u051a\u0005\u0212\u010a\u0002\u0518\u051a\u0005\u025a\u012e\u0002\u0519",
    "\u0517\u0003\u0002\u0002\u0002\u0519\u0518\u0003\u0002\u0002\u0002\u051a",
    "\u051b\u0003\u0002\u0002\u0002\u051b\u051c\u0005<\u001f\u0002\u051c",
    ";\u0003\u0002\u0002\u0002\u051d\u052b\u0005\u0272\u013a\u0002\u051e",
    "\u052b\u0007\u00cd\u0002\u0002\u051f\u052b\u0007\u00e0\u0002\u0002\u0520",
    "\u052b\u0007\u00e1\u0002\u0002\u0521\u052b\u0007\u00e2\u0002\u0002\u0522",
    "\u052b\u0007\u00e3\u0002\u0002\u0523\u052b\u0007\u00e4\u0002\u0002\u0524",
    "\u052b\u0007\u00e5\u0002\u0002\u0525\u052b\u0007\u00e6\u0002\u0002\u0526",
    "\u052b\u0007\u00e7\u0002\u0002\u0527\u052b\u0007\u00e8\u0002\u0002\u0528",
    "\u052b\u0007\u00e9\u0002\u0002\u0529\u052b\u0007\u00ea\u0002\u0002\u052a",
    "\u051d\u0003\u0002\u0002\u0002\u052a\u051e\u0003\u0002\u0002\u0002\u052a",
    "\u051f\u0003\u0002\u0002\u0002\u052a\u0520\u0003\u0002\u0002\u0002\u052a",
    "\u0521\u0003\u0002\u0002\u0002\u052a\u0522\u0003\u0002\u0002\u0002\u052a",
    "\u0523\u0003\u0002\u0002\u0002\u052a\u0524\u0003\u0002\u0002\u0002\u052a",
    "\u0525\u0003\u0002\u0002\u0002\u052a\u0526\u0003\u0002\u0002\u0002\u052a",
    "\u0527\u0003\u0002\u0002\u0002\u052a\u0528\u0003\u0002\u0002\u0002\u052a",
    "\u0529\u0003\u0002\u0002\u0002\u052b=\u0003\u0002\u0002\u0002\u052c",
    "\u0532\u0007\u0154\u0002\u0002\u052d\u0532\u0007\u014d\u0002\u0002\u052e",
    "\u052f\u0007\u014d\u0002\u0002\u052f\u0530\u0007l\u0002\u0002\u0530",
    "\u0532\u0007\u020f\u0002\u0002\u0531\u052c\u0003\u0002\u0002\u0002\u0531",
    "\u052d\u0003\u0002\u0002\u0002\u0531\u052e\u0003\u0002\u0002\u0002\u0532",
    "?\u0003\u0002\u0002\u0002\u0533\u0534\u0007\u00ab\u0002\u0002\u0534",
    "\u0535\t\u000f\u0002\u0002\u0535A\u0003\u0002\u0002\u0002\u0536\u0538",
    "\u0007\u018d\u0002\u0002\u0537\u0539\u0007\u03f7\u0002\u0002\u0538\u0537",
    "\u0003\u0002\u0002\u0002\u0538\u0539\u0003\u0002\u0002\u0002\u0539\u053a",
    "\u0003\u0002\u0002\u0002\u053a\u0544\u0005\u0214\u010b\u0002\u053b\u0544",
    "\u0005@!\u0002\u053c\u053d\u0007\u00b0\u0002\u0002\u053d\u053e\u0007",
    "\u01d4\u0002\u0002\u053e\u0544\u0005\u020c\u0107\u0002\u053f\u0540\u0007",
    "\u0133\u0002\u0002\u0540\u0544\u0007\u040f\u0002\u0002\u0541\u0544\u0007",
    "\u0185\u0002\u0002\u0542\u0544\u0007\u0248\u0002\u0002\u0543\u0536\u0003",
    "\u0002\u0002\u0002\u0543\u053b\u0003\u0002\u0002\u0002\u0543\u053c\u0003",
    "\u0002\u0002\u0002\u0543\u053f\u0003\u0002\u0002\u0002\u0543\u0541\u0003",
    "\u0002\u0002\u0002\u0543\u0542\u0003\u0002\u0002\u0002\u0544C\u0003",
    "\u0002\u0002\u0002\u0545\u0547\t\u0010\u0002\u0002\u0546\u0545\u0003",
    "\u0002\u0002\u0002\u0546\u0547\u0003\u0002\u0002\u0002\u0547\u0548\u0003",
    "\u0002\u0002\u0002\u0548\u0549\u0005\u020c\u0107\u0002\u0549\u054a\u0005",
    "\u0220\u0111\u0002\u054aE\u0003\u0002\u0002\u0002\u054b\u054c\u0005",
    "\u020c\u0107\u0002\u054c\u054d\u0005\u0220\u0111\u0002\u054dG\u0003",
    "\u0002\u0002\u0002\u054e\u054f\u0007\u0133\u0002\u0002\u054f\u0566\u0007",
    "\u040f\u0002\u0002\u0550\u0551\u0007\u018e\u0002\u0002\u0551\u0566\u0007",
    "\u0091\u0002\u0002\u0552\u0554\u0007h\u0002\u0002\u0553\u0552\u0003",
    "\u0002\u0002\u0002\u0553\u0554\u0003\u0002\u0002\u0002\u0554\u0555\u0003",
    "\u0002\u0002\u0002\u0555\u0566\u0007-\u0002\u0002\u0556\u0557\u0007",
    "\u013f\u0002\u0002\u0557\u0561\u0007\u0091\u0002\u0002\u0558\u0559\u0007",
    "\u01c3\u0002\u0002\u0559\u0561\u0007\u0091\u0002\u0002\u055a\u055b\u0007",
    "{\u0002\u0002\u055b\u055c\u0007\u0091\u0002\u0002\u055c\u0561\u0007",
    "\u0145\u0002\u0002\u055d\u055e\u0007f\u0002\u0002\u055e\u055f\u0007",
    "\u0091\u0002\u0002\u055f\u0561\u0007\u0145\u0002\u0002\u0560\u0556\u0003",
    "\u0002\u0002\u0002\u0560\u0558\u0003\u0002\u0002\u0002\u0560\u055a\u0003",
    "\u0002\u0002\u0002\u0560\u055d\u0003\u0002\u0002\u0002\u0561\u0566\u0003",
    "\u0002\u0002\u0002\u0562\u0563\u0007\u0091\u0002\u0002\u0563\u0564\u0007",
    "\u0208\u0002\u0002\u0564\u0566\t\r\u0002\u0002\u0565\u054e\u0003\u0002",
    "\u0002\u0002\u0565\u0550\u0003\u0002\u0002\u0002\u0565\u0553\u0003\u0002",
    "\u0002\u0002\u0565\u0560\u0003\u0002\u0002\u0002\u0565\u0562\u0003\u0002",
    "\u0002\u0002\u0566I\u0003\u0002\u0002\u0002\u0567\u0568\u0007\u017a",
    "\u0002\u0002\u0568\u0576\u0007\u040f\u0002\u0002\u0569\u056a\u0007%",
    "\u0002\u0002\u056a\u0576\u0007\u040f\u0002\u0002\u056b\u056c\u0007\u0240",
    "\u0002\u0002\u056c\u0576\u0007\u040f\u0002\u0002\u056d\u056e\u0007\u01d8",
    "\u0002\u0002\u056e\u0576\u0007\u040f\u0002\u0002\u056f\u0570\u0007\u0212",
    "\u0002\u0002\u0570\u0576\u0007\u040f\u0002\u0002\u0571\u0572\u0007\u01d1",
    "\u0002\u0002\u0572\u0576\u0007\u040f\u0002\u0002\u0573\u0574\u0007\u01dd",
    "\u0002\u0002\u0574\u0576\u0005\u0212\u010a\u0002\u0575\u0567\u0003\u0002",
    "\u0002\u0002\u0575\u0569\u0003\u0002\u0002\u0002\u0575\u056b\u0003\u0002",
    "\u0002\u0002\u0575\u056d\u0003\u0002\u0002\u0002\u0575\u056f\u0003\u0002",
    "\u0002\u0002\u0575\u0571\u0003\u0002\u0002\u0002\u0575\u0573\u0003\u0002",
    "\u0002\u0002\u0576K\u0003\u0002\u0002\u0002\u0577\u0578\u0007\u0400",
    "\u0002\u0002\u0578\u057d\u0005N(\u0002\u0579\u057a\u0007\u0402\u0002",
    "\u0002\u057a\u057c\u0005N(\u0002\u057b\u0579\u0003\u0002\u0002\u0002",
    "\u057c\u057f\u0003\u0002\u0002\u0002\u057d\u057b\u0003\u0002\u0002\u0002",
    "\u057d\u057e\u0003\u0002\u0002\u0002\u057e\u0580\u0003\u0002\u0002\u0002",
    "\u057f\u057d\u0003\u0002\u0002\u0002\u0580\u0581\u0007\u0401\u0002\u0002",
    "\u0581M\u0003\u0002\u0002\u0002\u0582\u0583\u0005\u020c\u0107\u0002",
    "\u0583\u0584\u0005P)\u0002\u0584\u0588\u0003\u0002\u0002\u0002\u0585",
    "\u0588\u0005T+\u0002\u0586\u0588\u0005\\/\u0002\u0587\u0582\u0003\u0002",
    "\u0002\u0002\u0587\u0585\u0003\u0002\u0002\u0002\u0587\u0586\u0003\u0002",
    "\u0002\u0002\u0588O\u0003\u0002\u0002\u0002\u0589\u058d\u0005\u0220",
    "\u0111\u0002\u058a\u058c\u0005R*\u0002\u058b\u058a\u0003\u0002\u0002",
    "\u0002\u058c\u058f\u0003\u0002\u0002\u0002\u058d\u058b\u0003\u0002\u0002",
    "\u0002\u058d\u058e\u0003\u0002\u0002\u0002\u058eQ\u0003\u0002\u0002",
    "\u0002\u058f\u058d\u0003\u0002\u0002\u0002\u0590\u05c4\u0005\u021c\u010f",
    "\u0002\u0591\u0592\u0007(\u0002\u0002\u0592\u05c4\u0005\u023c\u011f",
    "\u0002\u0593\u0598\u0007\u011a\u0002\u0002\u0594\u0595\u0007l\u0002",
    "\u0002\u0595\u0596\u0007\u00a8\u0002\u0002\u0596\u0598\u0005\u023e\u0120",
    "\u0002\u0597\u0593\u0003\u0002\u0002\u0002\u0597\u0594\u0003\u0002\u0002",
    "\u0002\u0598\u05c4\u0003\u0002\u0002\u0002\u0599\u059b\u0007v\u0002",
    "\u0002\u059a\u0599\u0003\u0002\u0002\u0002\u059a\u059b\u0003\u0002\u0002",
    "\u0002\u059b\u059c\u0003\u0002\u0002\u0002\u059c\u05c4\u0007T\u0002",
    "\u0002\u059d\u059f\u0007\u00a5\u0002\u0002\u059e\u05a0\u0007T\u0002",
    "\u0002\u059f\u059e\u0003\u0002\u0002\u0002\u059f\u05a0\u0003\u0002\u0002",
    "\u0002\u05a0\u05c4\u0003\u0002\u0002\u0002\u05a1\u05a2\u0007\u0133\u0002",
    "\u0002\u05a2\u05c4\u0007\u040f\u0002\u0002\u05a3\u05a4\u0007\u0131\u0002",
    "\u0002\u05a4\u05c4\t\u0011\u0002\u0002\u05a5\u05a6\u0007\u0225\u0002",
    "\u0002\u05a6\u05c4\t\u0012\u0002\u0002\u05a7\u05c4\u0005V,\u0002\u05a8",
    "\u05a9\u0007\u001a\u0002\u0002\u05a9\u05c4\u0005\u0200\u0101\u0002\u05aa",
    "\u05ab\u0007A\u0002\u0002\u05ab\u05ad\u0007\n\u0002\u0002\u05ac\u05aa",
    "\u0003\u0002\u0002\u0002\u05ac\u05ad\u0003\u0002\u0002\u0002\u05ad\u05ae",
    "\u0003\u0002\u0002\u0002\u05ae\u05af\u0007\r\u0002\u0002\u05af\u05b0",
    "\u0007\u0400\u0002\u0002\u05b0\u05b1\u0005\u025a\u012e\u0002\u05b1\u05b3",
    "\u0007\u0401\u0002\u0002\u05b2\u05b4\t\u0013\u0002\u0002\u05b3\u05b2",
    "\u0003\u0002\u0002\u0002\u05b3\u05b4\u0003\u0002\u0002\u0002\u05b4\u05c4",
    "\u0003\u0002\u0002\u0002\u05b5\u05b6\u0007\u00df\u0002\u0002\u05b6\u05b7",
    "\u0007(\u0002\u0002\u05b7\u05c4\u0007\u0244\u0002\u0002\u05b8\u05ba",
    "\u0007\u001d\u0002\u0002\u05b9\u05bb\u0005\u020c\u0107\u0002\u05ba\u05b9",
    "\u0003\u0002\u0002\u0002\u05ba\u05bb\u0003\u0002\u0002\u0002\u05bb\u05bd",
    "\u0003\u0002\u0002\u0002\u05bc\u05b8\u0003\u0002\u0002\u0002\u05bc\u05bd",
    "\u0003\u0002\u0002\u0002\u05bd\u05be\u0003\u0002\u0002\u0002\u05be\u05bf",
    "\u0007\u0019\u0002\u0002\u05bf\u05c0\u0007\u0400\u0002\u0002\u05c0\u05c1",
    "\u0005\u025a\u012e\u0002\u05c1\u05c2\u0007\u0401\u0002\u0002\u05c2\u05c4",
    "\u0003\u0002\u0002\u0002\u05c3\u0590\u0003\u0002\u0002\u0002\u05c3\u0591",
    "\u0003\u0002\u0002\u0002\u05c3\u0597\u0003\u0002\u0002\u0002\u05c3\u059a",
    "\u0003\u0002\u0002\u0002\u05c3\u059d\u0003\u0002\u0002\u0002\u05c3\u05a1",
    "\u0003\u0002\u0002\u0002\u05c3\u05a3\u0003\u0002\u0002\u0002\u05c3\u05a5",
    "\u0003\u0002\u0002\u0002\u05c3\u05a7\u0003\u0002\u0002\u0002\u05c3\u05a8",
    "\u0003\u0002\u0002\u0002\u05c3\u05ac\u0003\u0002\u0002\u0002\u05c3\u05b5",
    "\u0003\u0002\u0002\u0002\u05c3\u05bc\u0003\u0002\u0002\u0002\u05c4S",
    "\u0003\u0002\u0002\u0002\u05c5\u05c7\u0007\u001d\u0002\u0002\u05c6\u05c8",
    "\u0005\u020c\u0107\u0002\u05c7\u05c6\u0003\u0002\u0002\u0002\u05c7\u05c8",
    "\u0003\u0002\u0002\u0002\u05c8\u05ca\u0003\u0002\u0002\u0002\u05c9\u05c5",
    "\u0003\u0002\u0002\u0002\u05c9\u05ca\u0003\u0002\u0002\u0002\u05ca\u05cb",
    "\u0003\u0002\u0002\u0002\u05cb\u05cc\u0007v\u0002\u0002\u05cc\u05ce",
    "\u0007T\u0002\u0002\u05cd\u05cf\u0005\u020c\u0107\u0002\u05ce\u05cd",
    "\u0003\u0002\u0002\u0002\u05ce\u05cf\u0003\u0002\u0002\u0002\u05cf\u05d1",
    "\u0003\u0002\u0002\u0002\u05d0\u05d2\u0005@!\u0002\u05d1\u05d0\u0003",
    "\u0002\u0002\u0002\u05d1\u05d2\u0003\u0002\u0002\u0002\u05d2\u05d3\u0003",
    "\u0002\u0002\u0002\u05d3\u05d7\u0005\u0230\u0119\u0002\u05d4\u05d6\u0005",
    "B\"\u0002\u05d5\u05d4\u0003\u0002\u0002\u0002\u05d6\u05d9\u0003\u0002",
    "\u0002\u0002\u05d7\u05d5\u0003\u0002\u0002\u0002\u05d7\u05d8\u0003\u0002",
    "\u0002\u0002\u05d8\u060b\u0003\u0002\u0002\u0002\u05d9\u05d7\u0003\u0002",
    "\u0002\u0002\u05da\u05dc\u0007\u001d\u0002\u0002\u05db\u05dd\u0005\u020c",
    "\u0107\u0002\u05dc\u05db\u0003\u0002\u0002\u0002\u05dc\u05dd\u0003\u0002",
    "\u0002\u0002\u05dd\u05df\u0003\u0002\u0002\u0002\u05de\u05da\u0003\u0002",
    "\u0002\u0002\u05de\u05df\u0003\u0002\u0002\u0002\u05df\u05e0\u0003\u0002",
    "\u0002\u0002\u05e0\u05e2\u0007\u00a5\u0002\u0002\u05e1\u05e3\t\u0014",
    "\u0002\u0002\u05e2\u05e1\u0003\u0002\u0002\u0002\u05e2\u05e3\u0003\u0002",
    "\u0002\u0002\u05e3\u05e5\u0003\u0002\u0002\u0002\u05e4\u05e6\u0005\u020c",
    "\u0107\u0002\u05e5\u05e4\u0003\u0002\u0002\u0002\u05e5\u05e6\u0003\u0002",
    "\u0002\u0002\u05e6\u05e8\u0003\u0002\u0002\u0002\u05e7\u05e9\u0005@",
    "!\u0002\u05e8\u05e7\u0003\u0002\u0002\u0002\u05e8\u05e9\u0003\u0002",
    "\u0002\u0002\u05e9\u05ea\u0003\u0002\u0002\u0002\u05ea\u05ee\u0005\u0230",
    "\u0119\u0002\u05eb\u05ed\u0005B\"\u0002\u05ec\u05eb\u0003\u0002\u0002",
    "\u0002\u05ed\u05f0\u0003\u0002\u0002\u0002\u05ee\u05ec\u0003\u0002\u0002",
    "\u0002\u05ee\u05ef\u0003\u0002\u0002\u0002\u05ef\u060b\u0003\u0002\u0002",
    "\u0002\u05f0\u05ee\u0003\u0002\u0002\u0002\u05f1\u05f3\u0007\u001d\u0002",
    "\u0002\u05f2\u05f4\u0005\u020c\u0107\u0002\u05f3\u05f2\u0003\u0002\u0002",
    "\u0002\u05f3\u05f4\u0003\u0002\u0002\u0002\u05f4\u05f6\u0003\u0002\u0002",
    "\u0002\u05f5\u05f1\u0003\u0002\u0002\u0002\u05f5\u05f6\u0003\u0002\u0002",
    "\u0002\u05f6\u05f7\u0003\u0002\u0002\u0002\u05f7\u05f8\u0007>\u0002",
    "\u0002\u05f8\u05fa\u0007T\u0002\u0002\u05f9\u05fb\u0005\u020c\u0107",
    "\u0002\u05fa\u05f9\u0003\u0002\u0002\u0002\u05fa\u05fb\u0003\u0002\u0002",
    "\u0002\u05fb\u05fc\u0003\u0002\u0002\u0002\u05fc\u05fd\u0005\u0230\u0119",
    "\u0002\u05fd\u05fe\u0005V,\u0002\u05fe\u060b\u0003\u0002\u0002\u0002",
    "\u05ff\u0601\u0007\u001d\u0002\u0002\u0600\u0602\u0005\u020c\u0107\u0002",
    "\u0601\u0600\u0003\u0002\u0002\u0002\u0601\u0602\u0003\u0002\u0002\u0002",
    "\u0602\u0604\u0003\u0002\u0002\u0002\u0603\u05ff\u0003\u0002\u0002\u0002",
    "\u0603\u0604\u0003\u0002\u0002\u0002\u0604\u0605\u0003\u0002\u0002\u0002",
    "\u0605\u0606\u0007\u0019\u0002\u0002\u0606\u0607\u0007\u0400\u0002\u0002",
    "\u0607\u0608\u0005\u025a\u012e\u0002\u0608\u0609\u0007\u0401\u0002\u0002",
    "\u0609\u060b\u0003\u0002\u0002\u0002\u060a\u05c9\u0003\u0002\u0002\u0002",
    "\u060a\u05de\u0003\u0002\u0002\u0002\u060a\u05f5\u0003\u0002\u0002\u0002",
    "\u060a\u0603\u0003\u0002\u0002\u0002\u060bU\u0003\u0002\u0002\u0002",
    "\u060c\u060d\u0007|\u0002\u0002\u060d\u060f\u0005\u01f4\u00fb\u0002",
    "\u060e\u0610\u0005\u0230\u0119\u0002\u060f\u060e\u0003\u0002\u0002\u0002",
    "\u060f\u0610\u0003\u0002\u0002\u0002\u0610\u0613\u0003\u0002\u0002\u0002",
    "\u0611\u0612\u0007d\u0002\u0002\u0612\u0614\t\u0015\u0002\u0002\u0613",
    "\u0611\u0003\u0002\u0002\u0002\u0613\u0614\u0003\u0002\u0002\u0002\u0614",
    "\u0616\u0003\u0002\u0002\u0002\u0615\u0617\u0005X-\u0002\u0616\u0615",
    "\u0003\u0002\u0002\u0002\u0616\u0617\u0003\u0002\u0002\u0002\u0617W",
    "\u0003\u0002\u0002\u0002\u0618\u0619\u0007l\u0002\u0002\u0619\u061a",
    "\u0007*\u0002\u0002\u061a\u061e\u0005Z.\u0002\u061b\u061c\u0007l\u0002",
    "\u0002\u061c\u061d\u0007\u00a8\u0002\u0002\u061d\u061f\u0005Z.\u0002",
    "\u061e\u061b\u0003\u0002\u0002\u0002\u061e\u061f\u0003\u0002\u0002\u0002",
    "\u061f\u0629\u0003\u0002\u0002\u0002\u0620\u0621\u0007l\u0002\u0002",
    "\u0621\u0622\u0007\u00a8\u0002\u0002\u0622\u0626\u0005Z.\u0002\u0623",
    "\u0624\u0007l\u0002\u0002\u0624\u0625\u0007*\u0002\u0002\u0625\u0627",
    "\u0005Z.\u0002\u0626\u0623\u0003\u0002\u0002\u0002\u0626\u0627\u0003",
    "\u0002\u0002\u0002\u0627\u0629\u0003\u0002\u0002\u0002\u0628\u0618\u0003",
    "\u0002\u0002\u0002\u0628\u0620\u0003\u0002\u0002\u0002\u0629Y\u0003",
    "\u0002\u0002\u0002\u062a\u0631\u0007\u0084\u0002\u0002\u062b\u0631\u0007",
    "\u0014\u0002\u0002\u062c\u062d\u0007\u008c\u0002\u0002\u062d\u0631\u0007",
    "j\u0002\u0002\u062e\u062f\u0007\u01c3\u0002\u0002\u062f\u0631\u0007",
    "\u0111\u0002\u0002\u0630\u062a\u0003\u0002\u0002\u0002\u0630\u062b\u0003",
    "\u0002\u0002\u0002\u0630\u062c\u0003\u0002\u0002\u0002\u0630\u062e\u0003",
    "\u0002\u0002\u0002\u0631[\u0003\u0002\u0002\u0002\u0632\u0634\t\u0014",
    "\u0002\u0002\u0633\u0635\u0005\u020c\u0107\u0002\u0634\u0633\u0003\u0002",
    "\u0002\u0002\u0634\u0635\u0003\u0002\u0002\u0002\u0635\u0637\u0003\u0002",
    "\u0002\u0002\u0636\u0638\u0005@!\u0002\u0637\u0636\u0003\u0002\u0002",
    "\u0002\u0637\u0638\u0003\u0002\u0002\u0002\u0638\u0639\u0003\u0002\u0002",
    "\u0002\u0639\u063d\u0005\u0230\u0119\u0002\u063a\u063c\u0005B\"\u0002",
    "\u063b\u063a\u0003\u0002\u0002\u0002\u063c\u063f\u0003\u0002\u0002\u0002",
    "\u063d\u063b\u0003\u0002\u0002\u0002\u063d\u063e\u0003\u0002\u0002\u0002",
    "\u063e\u064f\u0003\u0002\u0002\u0002\u063f\u063d\u0003\u0002\u0002\u0002",
    "\u0640\u0642\t\u0016\u0002\u0002\u0641\u0643\t\u0014\u0002\u0002\u0642",
    "\u0641\u0003\u0002\u0002\u0002\u0642\u0643\u0003\u0002\u0002\u0002\u0643",
    "\u0645\u0003\u0002\u0002\u0002\u0644\u0646\u0005\u020c\u0107\u0002\u0645",
    "\u0644\u0003\u0002\u0002\u0002\u0645\u0646\u0003\u0002\u0002\u0002\u0646",
    "\u0647\u0003\u0002\u0002\u0002\u0647\u064b\u0005\u0230\u0119\u0002\u0648",
    "\u064a\u0005B\"\u0002\u0649\u0648\u0003\u0002\u0002\u0002\u064a\u064d",
    "\u0003\u0002\u0002\u0002\u064b\u0649\u0003\u0002\u0002\u0002\u064b\u064c",
    "\u0003\u0002\u0002\u0002\u064c\u064f\u0003\u0002\u0002\u0002\u064d\u064b",
    "\u0003\u0002\u0002\u0002\u064e\u0632\u0003\u0002\u0002\u0002\u064e\u0640",
    "\u0003\u0002\u0002\u0002\u064f]\u0003\u0002\u0002\u0002\u0650\u0652",
    "\u0007\u0158\u0002\u0002\u0651\u0653\u0007\u03f7\u0002\u0002\u0652\u0651",
    "\u0003\u0002\u0002\u0002\u0652\u0653\u0003\u0002\u0002\u0002\u0653\u0654",
    "\u0003\u0002\u0002\u0002\u0654\u06e1\u0005\u0202\u0102\u0002\u0655\u0657",
    "\u0007\u011a\u0002\u0002\u0656\u0658\u0007\u03f7\u0002\u0002\u0657\u0656",
    "\u0003\u0002\u0002\u0002\u0657\u0658\u0003\u0002\u0002\u0002\u0658\u0659",
    "\u0003\u0002\u0002\u0002\u0659\u06e1\u0005\u0212\u010a\u0002\u065a\u065c",
    "\u0007\u011b\u0002\u0002\u065b\u065d\u0007\u03f7\u0002\u0002\u065c\u065b",
    "\u0003\u0002\u0002\u0002\u065c\u065d\u0003\u0002\u0002\u0002\u065d\u065e",
    "\u0003\u0002\u0002\u0002\u065e\u06e1\u0005\u0212\u010a\u0002\u065f\u0661",
    "\u0007(\u0002\u0002\u0660\u065f\u0003\u0002\u0002\u0002\u0660\u0661",
    "\u0003\u0002\u0002\u0002\u0661\u0665\u0003\u0002\u0002\u0002\u0662\u0663",
    "\u0007\u0018\u0002\u0002\u0663\u0666\u0007\u008c\u0002\u0002\u0664\u0666",
    "\u0007\u02df\u0002\u0002\u0665\u0662\u0003\u0002\u0002\u0002\u0665\u0664",
    "\u0003\u0002\u0002\u0002\u0666\u0668\u0003\u0002\u0002\u0002\u0667\u0669",
    "\u0007\u03f7\u0002\u0002\u0668\u0667\u0003\u0002\u0002\u0002\u0668\u0669",
    "\u0003\u0002\u0002\u0002\u0669\u066c\u0003\u0002\u0002\u0002\u066a\u066d",
    "\u0005\u01fe\u0100\u0002\u066b\u066d\u0007(\u0002\u0002\u066c\u066a",
    "\u0003\u0002\u0002\u0002\u066c\u066b\u0003\u0002\u0002\u0002\u066d\u06e1",
    "\u0003\u0002\u0002\u0002\u066e\u0670\t\u0017\u0002\u0002\u066f\u0671",
    "\u0007\u03f7\u0002\u0002\u0670\u066f\u0003\u0002\u0002\u0002\u0670\u0671",
    "\u0003\u0002\u0002\u0002\u0671\u0672\u0003\u0002\u0002\u0002\u0672\u06e1",
    "\t\u0018\u0002\u0002\u0673\u0675\u0007(\u0002\u0002\u0674\u0673\u0003",
    "\u0002\u0002\u0002\u0674\u0675\u0003\u0002\u0002\u0002\u0675\u0676\u0003",
    "\u0002\u0002\u0002\u0676\u0678\u0007\u001a\u0002\u0002\u0677\u0679\u0007",
    "\u03f7\u0002\u0002\u0678\u0677\u0003\u0002\u0002\u0002\u0678\u0679\u0003",
    "\u0002\u0002\u0002\u0679\u067a\u0003\u0002\u0002\u0002\u067a\u06e1\u0005",
    "\u0200\u0101\u0002\u067b\u067d\u0007\u0133\u0002\u0002\u067c\u067e\u0007",
    "\u03f7\u0002\u0002\u067d\u067c\u0003\u0002\u0002\u0002\u067d\u067e\u0003",
    "\u0002\u0002\u0002\u067e\u067f\u0003\u0002\u0002\u0002\u067f\u06e1\u0007",
    "\u040f\u0002\u0002\u0680\u0682\u0007\u0138\u0002\u0002\u0681\u0683\u0007",
    "\u03f7\u0002\u0002\u0682\u0681\u0003\u0002\u0002\u0002\u0682\u0683\u0003",
    "\u0002\u0002\u0002\u0683\u0684\u0003\u0002\u0002\u0002\u0684\u06e1\t",
    "\u0019\u0002\u0002\u0685\u0687\u0007\u013a\u0002\u0002\u0686\u0688\u0007",
    "\u03f7\u0002\u0002\u0687\u0686\u0003\u0002\u0002\u0002\u0687\u0688\u0003",
    "\u0002\u0002\u0002\u0688\u0689\u0003\u0002\u0002\u0002\u0689\u06e1\u0007",
    "\u040f\u0002\u0002\u068a\u068b\u0007\u0145\u0002\u0002\u068b\u068d\u0007",
    "\u014c\u0002\u0002\u068c\u068e\u0007\u03f7\u0002\u0002\u068d\u068c\u0003",
    "\u0002\u0002\u0002\u068d\u068e\u0003\u0002\u0002\u0002\u068e\u068f\u0003",
    "\u0002\u0002\u0002\u068f\u06e1\u0007\u040f\u0002\u0002\u0690\u0692\u0007",
    "\u014a\u0002\u0002\u0691\u0693\u0007\u03f7\u0002\u0002\u0692\u0691\u0003",
    "\u0002\u0002\u0002\u0692\u0693\u0003\u0002\u0002\u0002\u0693\u0694\u0003",
    "\u0002\u0002\u0002\u0694\u06e1\t\u0018\u0002\u0002\u0695\u0697\u0007",
    "\u0155\u0002\u0002\u0696\u0698\u0007\u03f7\u0002\u0002\u0697\u0696\u0003",
    "\u0002\u0002\u0002\u0697\u0698\u0003\u0002\u0002\u0002\u0698\u0699\u0003",
    "\u0002\u0002\u0002\u0699\u06e1\u0007\u040f\u0002\u0002\u069a\u069b\u0007",
    "J\u0002\u0002\u069b\u069d\u0007\u014c\u0002\u0002\u069c\u069e\u0007",
    "\u03f7\u0002\u0002\u069d\u069c\u0003\u0002\u0002\u0002\u069d\u069e\u0003",
    "\u0002\u0002\u0002\u069e\u069f\u0003\u0002\u0002\u0002\u069f\u06e1\u0007",
    "\u040f\u0002\u0002\u06a0\u06a2\u0007\u0182\u0002\u0002\u06a1\u06a3\u0007",
    "\u03f7\u0002\u0002\u06a2\u06a1\u0003\u0002\u0002\u0002\u06a2\u06a3\u0003",
    "\u0002\u0002\u0002\u06a3\u06a4\u0003\u0002\u0002\u0002\u06a4\u06e1\t",
    "\u001a\u0002\u0002\u06a5\u06a7\u0007\u018d\u0002\u0002\u06a6\u06a8\u0007",
    "\u03f7\u0002\u0002\u06a7\u06a6\u0003\u0002\u0002\u0002\u06a7\u06a8\u0003",
    "\u0002\u0002\u0002\u06a8\u06a9\u0003\u0002\u0002\u0002\u06a9\u06e1\u0005",
    "\u0214\u010b\u0002\u06aa\u06ac\u0007\u01ae\u0002\u0002\u06ab\u06ad\u0007",
    "\u03f7\u0002\u0002\u06ac\u06ab\u0003\u0002\u0002\u0002\u06ac\u06ad\u0003",
    "\u0002\u0002\u0002\u06ad\u06ae\u0003\u0002\u0002\u0002\u06ae\u06e1\u0005",
    "\u0212\u010a\u0002\u06af\u06b1\u0007\u01b8\u0002\u0002\u06b0\u06b2\u0007",
    "\u03f7\u0002\u0002\u06b1\u06b0\u0003\u0002\u0002\u0002\u06b1\u06b2\u0003",
    "\u0002\u0002\u0002\u06b2\u06b3\u0003\u0002\u0002\u0002\u06b3\u06e1\u0005",
    "\u0212\u010a\u0002\u06b4\u06b6\u0007\u01d2\u0002\u0002\u06b5\u06b7\u0007",
    "\u03f7\u0002\u0002\u06b6\u06b5\u0003\u0002\u0002\u0002\u06b6\u06b7\u0003",
    "\u0002\u0002\u0002\u06b7\u06b8\u0003\u0002\u0002\u0002\u06b8\u06e1\t",
    "\u001b\u0002\u0002\u06b9\u06bb\u0007\u01d8\u0002\u0002\u06ba\u06bc\u0007",
    "\u03f7\u0002\u0002\u06bb\u06ba\u0003\u0002\u0002\u0002\u06bb\u06bc\u0003",
    "\u0002\u0002\u0002\u06bc\u06bd\u0003\u0002\u0002\u0002\u06bd\u06e1\u0007",
    "\u040f\u0002\u0002\u06be\u06c0\u0007\u0205\u0002\u0002\u06bf\u06c1\u0007",
    "\u03f7\u0002\u0002\u06c0\u06bf\u0003\u0002\u0002\u0002\u06c0\u06c1\u0003",
    "\u0002\u0002\u0002\u06c1\u06c2\u0003\u0002\u0002\u0002\u06c2\u06e1\t",
    "\u001c\u0002\u0002\u06c3\u06c5\u0007\u0220\u0002\u0002\u06c4\u06c6\u0007",
    "\u03f7\u0002\u0002\u06c5\u06c4\u0003\u0002\u0002\u0002\u06c5\u06c6\u0003",
    "\u0002\u0002\u0002\u06c6\u06c7\u0003\u0002\u0002\u0002\u06c7\u06e1\t",
    "\u001b\u0002\u0002\u06c8\u06ca\u0007\u0221\u0002\u0002\u06c9\u06cb\u0007",
    "\u03f7\u0002\u0002\u06ca\u06c9\u0003\u0002\u0002\u0002\u06ca\u06cb\u0003",
    "\u0002\u0002\u0002\u06cb\u06cc\u0003\u0002\u0002\u0002\u06cc\u06e1\t",
    "\u001b\u0002\u0002\u06cd\u06cf\u0007\u0222\u0002\u0002\u06ce\u06d0\u0007",
    "\u03f7\u0002\u0002\u06cf\u06ce\u0003\u0002\u0002\u0002\u06cf\u06d0\u0003",
    "\u0002\u0002\u0002\u06d0\u06d1\u0003\u0002\u0002\u0002\u06d1\u06e1\u0005",
    "\u0212\u010a\u0002\u06d2\u06d3\u0007\u0230\u0002\u0002\u06d3\u06d5\u0005",
    "\u020c\u0107\u0002\u06d4\u06d6\u0005`1\u0002\u06d5\u06d4\u0003\u0002",
    "\u0002\u0002\u06d5\u06d6\u0003\u0002\u0002\u0002\u06d6\u06e1\u0003\u0002",
    "\u0002\u0002\u06d7\u06e1\u0005`1\u0002\u06d8\u06da\u0007\u00a4\u0002",
    "\u0002\u06d9\u06db\u0007\u03f7\u0002\u0002\u06da\u06d9\u0003\u0002\u0002",
    "\u0002\u06da\u06db\u0003\u0002\u0002\u0002\u06db\u06dc\u0003\u0002\u0002",
    "\u0002\u06dc\u06dd\u0007\u0400\u0002\u0002\u06dd\u06de\u0005\u022e\u0118",
    "\u0002\u06de\u06df\u0007\u0401\u0002\u0002\u06df\u06e1\u0003\u0002\u0002",
    "\u0002\u06e0\u0650\u0003\u0002\u0002\u0002\u06e0\u0655\u0003\u0002\u0002",
    "\u0002\u06e0\u065a\u0003\u0002\u0002\u0002\u06e0\u0660\u0003\u0002\u0002",
    "\u0002\u06e0\u066e\u0003\u0002\u0002\u0002\u06e0\u0674\u0003\u0002\u0002",
    "\u0002\u06e0\u067b\u0003\u0002\u0002\u0002\u06e0\u0680\u0003\u0002\u0002",
    "\u0002\u06e0\u0685\u0003\u0002\u0002\u0002\u06e0\u068a\u0003\u0002\u0002",
    "\u0002\u06e0\u0690\u0003\u0002\u0002\u0002\u06e0\u0695\u0003\u0002\u0002",
    "\u0002\u06e0\u069a\u0003\u0002\u0002\u0002\u06e0\u06a0\u0003\u0002\u0002",
    "\u0002\u06e0\u06a5\u0003\u0002\u0002\u0002\u06e0\u06aa\u0003\u0002\u0002",
    "\u0002\u06e0\u06af\u0003\u0002\u0002\u0002\u06e0\u06b4\u0003\u0002\u0002",
    "\u0002\u06e0\u06b9\u0003\u0002\u0002\u0002\u06e0\u06be\u0003\u0002\u0002",
    "\u0002\u06e0\u06c3\u0003\u0002\u0002\u0002\u06e0\u06c8\u0003\u0002\u0002",
    "\u0002\u06e0\u06cd\u0003\u0002\u0002\u0002\u06e0\u06d2\u0003\u0002\u0002",
    "\u0002\u06e0\u06d7\u0003\u0002\u0002\u0002\u06e0\u06d8\u0003\u0002\u0002",
    "\u0002\u06e1_\u0003\u0002\u0002\u0002\u06e2\u06e3\u0007\u0225\u0002",
    "\u0002\u06e3\u06e4\t\u0012\u0002\u0002\u06e4a\u0003\u0002\u0002\u0002",
    "\u06e5\u06e6\u0007u\u0002\u0002\u06e6\u06e7\u0007\u0012\u0002\u0002",
    "\u06e7\u06ea\u0005d3\u0002\u06e8\u06e9\u0007\u01d7\u0002\u0002\u06e9",
    "\u06eb\u0005\u0212\u010a\u0002\u06ea\u06e8\u0003\u0002\u0002\u0002\u06ea",
    "\u06eb\u0003\u0002\u0002\u0002\u06eb\u06f3\u0003\u0002\u0002\u0002\u06ec",
    "\u06ed\u0007\u022a\u0002\u0002\u06ed\u06ee\u0007\u0012\u0002\u0002\u06ee",
    "\u06f1\u0005f4\u0002\u06ef\u06f0\u0007\u022b\u0002\u0002\u06f0\u06f2",
    "\u0005\u0212\u010a\u0002\u06f1\u06ef\u0003\u0002\u0002\u0002\u06f1\u06f2",
    "\u0003\u0002\u0002\u0002\u06f2\u06f4\u0003\u0002\u0002\u0002\u06f3\u06ec",
    "\u0003\u0002\u0002\u0002\u06f3\u06f4\u0003\u0002\u0002\u0002\u06f4\u0700",
    "\u0003\u0002\u0002\u0002\u06f5\u06f6\u0007\u0400\u0002\u0002\u06f6\u06fb",
    "\u0005h5\u0002\u06f7\u06f8\u0007\u0402\u0002\u0002\u06f8\u06fa\u0005",
    "h5\u0002\u06f9\u06f7\u0003\u0002\u0002\u0002\u06fa\u06fd\u0003\u0002",
    "\u0002\u0002\u06fb\u06f9\u0003\u0002\u0002\u0002\u06fb\u06fc\u0003\u0002",
    "\u0002\u0002\u06fc\u06fe\u0003\u0002\u0002\u0002\u06fd\u06fb\u0003\u0002",
    "\u0002\u0002\u06fe\u06ff\u0007\u0401\u0002\u0002\u06ff\u0701\u0003\u0002",
    "\u0002\u0002\u0700\u06f5\u0003\u0002\u0002\u0002\u0700\u0701\u0003\u0002",
    "\u0002\u0002\u0701c\u0003\u0002\u0002\u0002\u0702\u0704\u0007\\\u0002",
    "\u0002\u0703\u0702\u0003\u0002\u0002\u0002\u0703\u0704\u0003\u0002\u0002",
    "\u0002\u0704\u0705\u0003\u0002\u0002\u0002\u0705\u0706\u0007\u0178\u0002",
    "\u0002\u0706\u0707\u0007\u0400\u0002\u0002\u0707\u0708\u0005\u025a\u012e",
    "\u0002\u0708\u0709\u0007\u0401\u0002\u0002\u0709\u0730\u0003\u0002\u0002",
    "\u0002\u070a\u070c\u0007\\\u0002\u0002\u070b\u070a\u0003\u0002\u0002",
    "\u0002\u070b\u070c\u0003\u0002\u0002\u0002\u070c\u070d\u0003\u0002\u0002",
    "\u0002\u070d\u0711\u0007T\u0002\u0002\u070e\u070f\u0007\u0114\u0002",
    "\u0002\u070f\u0710\u0007\u03f7\u0002\u0002\u0710\u0712\t\u001d\u0002",
    "\u0002\u0711\u070e\u0003\u0002\u0002\u0002\u0711\u0712\u0003\u0002\u0002",
    "\u0002\u0712\u0713\u0003\u0002\u0002\u0002\u0713\u0714\u0007\u0400\u0002",
    "\u0002\u0714\u0715\u0005\u022c\u0117\u0002\u0715\u0716\u0007\u0401\u0002",
    "\u0002\u0716\u0730\u0003\u0002\u0002\u0002\u0717\u0721\u0007y\u0002",
    "\u0002\u0718\u0719\u0007\u0400\u0002\u0002\u0719\u071a\u0005\u025a\u012e",
    "\u0002\u071a\u071b\u0007\u0401\u0002\u0002\u071b\u0722\u0003\u0002\u0002",
    "\u0002\u071c\u071d\u0007\u0130\u0002\u0002\u071d\u071e\u0007\u0400\u0002",
    "\u0002\u071e\u071f\u0005\u022c\u0117\u0002\u071f\u0720\u0007\u0401\u0002",
    "\u0002\u0720\u0722\u0003\u0002\u0002\u0002\u0721\u0718\u0003\u0002\u0002",
    "\u0002\u0721\u071c\u0003\u0002\u0002\u0002\u0722\u0730\u0003\u0002\u0002",
    "\u0002\u0723\u072d\u0007\u0193\u0002\u0002\u0724\u0725\u0007\u0400\u0002",
    "\u0002\u0725\u0726\u0005\u025a\u012e\u0002\u0726\u0727\u0007\u0401\u0002",
    "\u0002\u0727\u072e\u0003\u0002\u0002\u0002\u0728\u0729\u0007\u0130\u0002",
    "\u0002\u0729\u072a\u0007\u0400\u0002\u0002\u072a\u072b\u0005\u022c\u0117",
    "\u0002\u072b\u072c\u0007\u0401\u0002\u0002\u072c\u072e\u0003\u0002\u0002",
    "\u0002\u072d\u0724\u0003\u0002\u0002\u0002\u072d\u0728\u0003\u0002\u0002",
    "\u0002\u072e\u0730\u0003\u0002\u0002\u0002\u072f\u0703\u0003\u0002\u0002",
    "\u0002\u072f\u070b\u0003\u0002\u0002\u0002\u072f\u0717\u0003\u0002\u0002",
    "\u0002\u072f\u0723\u0003\u0002\u0002\u0002\u0730e\u0003\u0002\u0002",
    "\u0002\u0731\u0733\u0007\\\u0002\u0002\u0732\u0731\u0003\u0002\u0002",
    "\u0002\u0732\u0733\u0003\u0002\u0002\u0002\u0733\u0734\u0003\u0002\u0002",
    "\u0002\u0734\u0735\u0007\u0178\u0002\u0002\u0735\u0736\u0007\u0400\u0002",
    "\u0002\u0736\u0737\u0005\u025a\u012e\u0002\u0737\u0738\u0007\u0401\u0002",
    "\u0002\u0738\u0747\u0003\u0002\u0002\u0002\u0739\u073b\u0007\\\u0002",
    "\u0002\u073a\u0739\u0003\u0002\u0002\u0002\u073a\u073b\u0003\u0002\u0002",
    "\u0002\u073b\u073c\u0003\u0002\u0002\u0002\u073c\u0740\u0007T\u0002",
    "\u0002\u073d\u073e\u0007\u0114\u0002\u0002\u073e\u073f\u0007\u03f7\u0002",
    "\u0002\u073f\u0741\t\u001d\u0002\u0002\u0740\u073d\u0003\u0002\u0002",
    "\u0002\u0740\u0741\u0003\u0002\u0002\u0002\u0741\u0742\u0003\u0002\u0002",
    "\u0002\u0742\u0743\u0007\u0400\u0002\u0002\u0743\u0744\u0005\u022c\u0117",
    "\u0002\u0744\u0745\u0007\u0401\u0002\u0002\u0745\u0747\u0003\u0002\u0002",
    "\u0002\u0746\u0732\u0003\u0002\u0002\u0002\u0746\u073a\u0003\u0002\u0002",
    "\u0002\u0747g\u0003\u0002\u0002\u0002\u0748\u0749\u0007u\u0002\u0002",
    "\u0749\u074a\u0005\u020c\u0107\u0002\u074a\u074b\u0007\u00ac\u0002\u0002",
    "\u074b\u074c\u0007\u0191\u0002\u0002\u074c\u074d\u0007\u0233\u0002\u0002",
    "\u074d\u074e\u0007\u0400\u0002\u0002\u074e\u0753\u0005j6\u0002\u074f",
    "\u0750\u0007\u0402\u0002\u0002\u0750\u0752\u0005j6\u0002\u0751\u074f",
    "\u0003\u0002\u0002\u0002\u0752\u0755\u0003\u0002\u0002\u0002\u0753\u0751",
    "\u0003\u0002\u0002\u0002\u0753\u0754\u0003\u0002\u0002\u0002\u0754\u0756",
    "\u0003\u0002\u0002\u0002\u0755\u0753\u0003\u0002\u0002\u0002\u0756\u075a",
    "\u0007\u0401\u0002\u0002\u0757\u0759\u0005p9\u0002\u0758\u0757\u0003",
    "\u0002\u0002\u0002\u0759\u075c\u0003\u0002\u0002\u0002\u075a\u0758\u0003",
    "\u0002\u0002\u0002\u075a\u075b\u0003\u0002\u0002\u0002\u075b\u0765\u0003",
    "\u0002\u0002\u0002\u075c\u075a\u0003\u0002\u0002\u0002\u075d\u0762\u0005",
    "n8\u0002\u075e\u075f\u0007\u0402\u0002\u0002\u075f\u0761\u0005n8\u0002",
    "\u0760\u075e\u0003\u0002\u0002\u0002\u0761\u0764\u0003\u0002\u0002\u0002",
    "\u0762\u0760\u0003\u0002\u0002\u0002\u0762\u0763\u0003\u0002\u0002\u0002",
    "\u0763\u0766\u0003\u0002\u0002\u0002\u0764\u0762\u0003\u0002\u0002\u0002",
    "\u0765\u075d\u0003\u0002\u0002\u0002\u0765\u0766\u0003\u0002\u0002\u0002",
    "\u0766\u07cc\u0003\u0002\u0002\u0002\u0767\u0768\u0007u\u0002\u0002",
    "\u0768\u0769\u0005\u020c\u0107\u0002\u0769\u076a\u0007\u00ac\u0002\u0002",
    "\u076a\u076b\u0007\u0191\u0002\u0002\u076b\u076c\u0007\u0233\u0002\u0002",
    "\u076c\u0770\u0005j6\u0002\u076d\u076f\u0005p9\u0002\u076e\u076d\u0003",
    "\u0002\u0002\u0002\u076f\u0772\u0003\u0002\u0002\u0002\u0770\u076e\u0003",
    "\u0002\u0002\u0002\u0770\u0771\u0003\u0002\u0002\u0002\u0771\u077b\u0003",
    "\u0002\u0002\u0002\u0772\u0770\u0003\u0002\u0002\u0002\u0773\u0778\u0005",
    "n8\u0002\u0774\u0775\u0007\u0402\u0002\u0002\u0775\u0777\u0005n8\u0002",
    "\u0776\u0774\u0003\u0002\u0002\u0002\u0777\u077a\u0003\u0002\u0002\u0002",
    "\u0778\u0776\u0003\u0002\u0002\u0002\u0778\u0779\u0003\u0002\u0002\u0002",
    "\u0779\u077c\u0003\u0002\u0002\u0002\u077a\u0778\u0003\u0002\u0002\u0002",
    "\u077b\u0773\u0003\u0002\u0002\u0002\u077b\u077c\u0003\u0002\u0002\u0002",
    "\u077c\u07cc\u0003\u0002\u0002\u0002\u077d\u077e\u0007u\u0002\u0002",
    "\u077e\u077f\u0005\u020c\u0107\u0002\u077f\u0780\u0007\u00ac\u0002\u0002",
    "\u0780\u0781\u0007I\u0002\u0002\u0781\u0782\u0007\u0400\u0002\u0002",
    "\u0782\u0787\u0005j6\u0002\u0783\u0784\u0007\u0402\u0002\u0002\u0784",
    "\u0786\u0005j6\u0002\u0785\u0783\u0003\u0002\u0002\u0002\u0786\u0789",
    "\u0003\u0002\u0002\u0002\u0787\u0785\u0003\u0002\u0002\u0002\u0787\u0788",
    "\u0003\u0002\u0002\u0002\u0788\u078a\u0003\u0002\u0002\u0002\u0789\u0787",
    "\u0003\u0002\u0002\u0002\u078a\u078e\u0007\u0401\u0002\u0002\u078b\u078d",
    "\u0005p9\u0002\u078c\u078b\u0003\u0002\u0002\u0002\u078d\u0790\u0003",
    "\u0002\u0002\u0002\u078e\u078c\u0003\u0002\u0002\u0002\u078e\u078f\u0003",
    "\u0002\u0002\u0002\u078f\u0799\u0003\u0002\u0002\u0002\u0790\u078e\u0003",
    "\u0002\u0002\u0002\u0791\u0796\u0005n8\u0002\u0792\u0793\u0007\u0402",
    "\u0002\u0002\u0793\u0795\u0005n8\u0002\u0794\u0792\u0003\u0002\u0002",
    "\u0002\u0795\u0798\u0003\u0002\u0002\u0002\u0796\u0794\u0003\u0002\u0002",
    "\u0002\u0796\u0797\u0003\u0002\u0002\u0002\u0797\u079a\u0003\u0002\u0002",
    "\u0002\u0798\u0796\u0003\u0002\u0002\u0002\u0799\u0791\u0003\u0002\u0002",
    "\u0002\u0799\u079a\u0003\u0002\u0002\u0002\u079a\u07cc\u0003\u0002\u0002",
    "\u0002\u079b\u079c\u0007u\u0002\u0002\u079c\u079d\u0005\u020c\u0107",
    "\u0002\u079d\u079e\u0007\u00ac\u0002\u0002\u079e\u079f\u0007I\u0002",
    "\u0002\u079f\u07a0\u0007\u0400\u0002\u0002\u07a0\u07a5\u0005l7\u0002",
    "\u07a1\u07a2\u0007\u0402\u0002\u0002\u07a2\u07a4\u0005l7\u0002\u07a3",
    "\u07a1\u0003\u0002\u0002\u0002\u07a4\u07a7\u0003\u0002\u0002\u0002\u07a5",
    "\u07a3\u0003\u0002\u0002\u0002\u07a5\u07a6\u0003\u0002\u0002\u0002\u07a6",
    "\u07a8\u0003\u0002\u0002\u0002\u07a7\u07a5\u0003\u0002\u0002\u0002\u07a8",
    "\u07ac\u0007\u0401\u0002\u0002\u07a9\u07ab\u0005p9\u0002\u07aa\u07a9",
    "\u0003\u0002\u0002\u0002\u07ab\u07ae\u0003\u0002\u0002\u0002\u07ac\u07aa",
    "\u0003\u0002\u0002\u0002\u07ac\u07ad\u0003\u0002\u0002\u0002\u07ad\u07b7",
    "\u0003\u0002\u0002\u0002\u07ae\u07ac\u0003\u0002\u0002\u0002\u07af\u07b4",
    "\u0005n8\u0002\u07b0\u07b1\u0007\u0402\u0002\u0002\u07b1\u07b3\u0005",
    "n8\u0002\u07b2\u07b0\u0003\u0002\u0002\u0002\u07b3\u07b6\u0003\u0002",
    "\u0002\u0002\u07b4\u07b2\u0003\u0002\u0002\u0002\u07b4\u07b5\u0003\u0002",
    "\u0002\u0002\u07b5\u07b8\u0003\u0002\u0002\u0002\u07b6\u07b4\u0003\u0002",
    "\u0002\u0002\u07b7\u07af\u0003\u0002\u0002\u0002\u07b7\u07b8\u0003\u0002",
    "\u0002\u0002\u07b8\u07cc\u0003\u0002\u0002\u0002\u07b9\u07ba\u0007u",
    "\u0002\u0002\u07ba\u07be\u0005\u020c\u0107\u0002\u07bb\u07bd\u0005p",
    "9\u0002\u07bc\u07bb\u0003\u0002\u0002\u0002\u07bd\u07c0\u0003\u0002",
    "\u0002\u0002\u07be\u07bc\u0003\u0002\u0002\u0002\u07be\u07bf\u0003\u0002",
    "\u0002\u0002\u07bf\u07c9\u0003\u0002\u0002\u0002\u07c0\u07be\u0003\u0002",
    "\u0002\u0002\u07c1\u07c6\u0005n8\u0002\u07c2\u07c3\u0007\u0402\u0002",
    "\u0002\u07c3\u07c5\u0005n8\u0002\u07c4\u07c2\u0003\u0002\u0002\u0002",
    "\u07c5\u07c8\u0003\u0002\u0002\u0002\u07c6\u07c4\u0003\u0002\u0002\u0002",
    "\u07c6\u07c7\u0003\u0002\u0002\u0002\u07c7\u07ca\u0003\u0002\u0002\u0002",
    "\u07c8\u07c6\u0003\u0002\u0002\u0002\u07c9\u07c1\u0003\u0002\u0002\u0002",
    "\u07c9\u07ca\u0003\u0002\u0002\u0002\u07ca\u07cc\u0003\u0002\u0002\u0002",
    "\u07cb\u0748\u0003\u0002\u0002\u0002\u07cb\u0767\u0003\u0002\u0002\u0002",
    "\u07cb\u077d\u0003\u0002\u0002\u0002\u07cb\u079b\u0003\u0002\u0002\u0002",
    "\u07cb\u07b9\u0003\u0002\u0002\u0002\u07cci\u0003\u0002\u0002\u0002",
    "\u07cd\u07d1\u0005\u021e\u0110\u0002\u07ce\u07d1\u0005\u025a\u012e\u0002",
    "\u07cf\u07d1\u0007e\u0002\u0002\u07d0\u07cd\u0003\u0002\u0002\u0002",
    "\u07d0\u07ce\u0003\u0002\u0002\u0002\u07d0\u07cf\u0003\u0002\u0002\u0002",
    "\u07d1k\u0003\u0002\u0002\u0002\u07d2\u07d3\u0007\u0400\u0002\u0002",
    "\u07d3\u07d6\u0005j6\u0002\u07d4\u07d5\u0007\u0402\u0002\u0002\u07d5",
    "\u07d7\u0005j6\u0002\u07d6\u07d4\u0003\u0002\u0002\u0002\u07d7\u07d8",
    "\u0003\u0002\u0002\u0002\u07d8\u07d6\u0003\u0002\u0002\u0002\u07d8\u07d9",
    "\u0003\u0002\u0002\u0002\u07d9\u07da\u0003\u0002\u0002\u0002\u07da\u07db",
    "\u0007\u0401\u0002\u0002\u07dbm\u0003\u0002\u0002\u0002\u07dc\u07dd",
    "\u0007\u022a\u0002\u0002\u07dd\u07e1\u0005\u020c\u0107\u0002\u07de\u07e0",
    "\u0005p9\u0002\u07df\u07de\u0003\u0002\u0002\u0002\u07e0\u07e3\u0003",
    "\u0002\u0002\u0002\u07e1\u07df\u0003\u0002\u0002\u0002\u07e1\u07e2\u0003",
    "\u0002\u0002\u0002\u07e2o\u0003\u0002\u0002\u0002\u07e3\u07e1\u0003",
    "\u0002\u0002\u0002\u07e4\u07e6\u0007\u0225\u0002\u0002\u07e5\u07e4\u0003",
    "\u0002\u0002\u0002\u07e5\u07e6\u0003\u0002\u0002\u0002\u07e6\u07e7\u0003",
    "\u0002\u0002\u0002\u07e7\u07e9\u0007\u0158\u0002\u0002\u07e8\u07ea\u0007",
    "\u03f7\u0002\u0002\u07e9\u07e8\u0003\u0002\u0002\u0002\u07e9\u07ea\u0003",
    "\u0002\u0002\u0002\u07ea\u07eb\u0003\u0002\u0002\u0002\u07eb\u0812\u0005",
    "\u0202\u0102\u0002\u07ec\u07ee\u0007\u0133\u0002\u0002\u07ed\u07ef\u0007",
    "\u03f7\u0002\u0002\u07ee\u07ed\u0003\u0002\u0002\u0002\u07ee\u07ef\u0003",
    "\u0002\u0002\u0002\u07ef\u07f0\u0003\u0002\u0002\u0002\u07f0\u0812\u0007",
    "\u040f\u0002\u0002\u07f1\u07f2\u0007\u0145\u0002\u0002\u07f2\u07f4\u0007",
    "\u014c\u0002\u0002\u07f3\u07f5\u0007\u03f7\u0002\u0002\u07f4\u07f3\u0003",
    "\u0002\u0002\u0002\u07f4\u07f5\u0003\u0002\u0002\u0002\u07f5\u07f6\u0003",
    "\u0002\u0002\u0002\u07f6\u0812\u0007\u040f\u0002\u0002\u07f7\u07f8\u0007",
    "J\u0002\u0002\u07f8\u07fa\u0007\u014c\u0002\u0002\u07f9\u07fb\u0007",
    "\u03f7\u0002\u0002\u07fa\u07f9\u0003\u0002\u0002\u0002\u07fa\u07fb\u0003",
    "\u0002\u0002\u0002\u07fb\u07fc\u0003\u0002\u0002\u0002\u07fc\u0812\u0007",
    "\u040f\u0002\u0002\u07fd\u07ff\u0007\u01ae\u0002\u0002\u07fe\u0800\u0007",
    "\u03f7\u0002\u0002\u07ff\u07fe\u0003\u0002\u0002\u0002\u07ff\u0800\u0003",
    "\u0002\u0002\u0002\u0800\u0801\u0003\u0002\u0002\u0002\u0801\u0812\u0005",
    "\u0212\u010a\u0002\u0802\u0804\u0007\u01b8\u0002\u0002\u0803\u0805\u0007",
    "\u03f7\u0002\u0002\u0804\u0803\u0003\u0002\u0002\u0002\u0804\u0805\u0003",
    "\u0002\u0002\u0002\u0805\u0806\u0003\u0002\u0002\u0002\u0806\u0812\u0005",
    "\u0212\u010a\u0002\u0807\u0809\u0007\u0230\u0002\u0002\u0808\u080a\u0007",
    "\u03f7\u0002\u0002\u0809\u0808\u0003\u0002\u0002\u0002\u0809\u080a\u0003",
    "\u0002\u0002\u0002\u080a\u080b\u0003\u0002\u0002\u0002\u080b\u0812\u0005",
    "\u020c\u0107\u0002\u080c\u080e\u0007\u01c4\u0002\u0002\u080d\u080f\u0007",
    "\u03f7\u0002\u0002\u080e\u080d\u0003\u0002\u0002\u0002\u080e\u080f\u0003",
    "\u0002\u0002\u0002\u080f\u0810\u0003\u0002\u0002\u0002\u0810\u0812\u0005",
    "\u020c\u0107\u0002\u0811\u07e5\u0003\u0002\u0002\u0002\u0811\u07ec\u0003",
    "\u0002\u0002\u0002\u0811\u07f1\u0003\u0002\u0002\u0002\u0811\u07f7\u0003",
    "\u0002\u0002\u0002\u0811\u07fd\u0003\u0002\u0002\u0002\u0811\u0802\u0003",
    "\u0002\u0002\u0002\u0811\u0807\u0003\u0002\u0002\u0002\u0811\u080c\u0003",
    "\u0002\u0002\u0002\u0812q\u0003\u0002\u0002\u0002\u0813\u0814\u0007",
    "\t\u0002\u0002\u0814\u0816\t\u0002\u0002\u0002\u0815\u0817\u0005\u020c",
    "\u0107\u0002\u0816\u0815\u0003\u0002\u0002\u0002\u0816\u0817\u0003\u0002",
    "\u0002\u0002\u0817\u0819\u0003\u0002\u0002\u0002\u0818\u081a\u00052",
    "\u001a\u0002\u0819\u0818\u0003\u0002\u0002\u0002\u081a\u081b\u0003\u0002",
    "\u0002\u0002\u081b\u0819\u0003\u0002\u0002\u0002\u081b\u081c\u0003\u0002",
    "\u0002\u0002\u081c\u0826\u0003\u0002\u0002\u0002\u081d\u081e\u0007\t",
    "\u0002\u0002\u081e\u081f\t\u0002\u0002\u0002\u081f\u0820\u0005\u020c",
    "\u0107\u0002\u0820\u0821\u0007\u023f\u0002\u0002\u0821\u0822\u0007\u0145",
    "\u0002\u0002\u0822\u0823\u0007\u014c\u0002\u0002\u0823\u0824\u0007\u01be",
    "\u0002\u0002\u0824\u0826\u0003\u0002\u0002\u0002\u0825\u0813\u0003\u0002",
    "\u0002\u0002\u0825\u081d\u0003\u0002\u0002\u0002\u0826s\u0003\u0002",
    "\u0002\u0002\u0827\u0829\u0007\t\u0002\u0002\u0828\u082a\u00054\u001b",
    "\u0002\u0829\u0828\u0003\u0002\u0002\u0002\u0829\u082a\u0003\u0002\u0002",
    "\u0002\u082a\u082b\u0003\u0002\u0002\u0002\u082b\u082c\u0007\u015e\u0002",
    "\u0002\u082c\u0830\u0005\u01f2\u00fa\u0002\u082d\u082e\u0007l\u0002",
    "\u0002\u082e\u082f\u0007\u0207\u0002\u0002\u082f\u0831\u00056\u001c",
    "\u0002\u0830\u082d\u0003\u0002\u0002\u0002\u0830\u0831\u0003\u0002\u0002",
    "\u0002\u0831\u0838\u0003\u0002\u0002\u0002\u0832\u0833\u0007l\u0002",
    "\u0002\u0833\u0835\u0007\u0136\u0002\u0002\u0834\u0836\u0007h\u0002",
    "\u0002\u0835\u0834\u0003\u0002\u0002\u0002\u0835\u0836\u0003\u0002\u0002",
    "\u0002\u0836\u0837\u0003\u0002\u0002\u0002\u0837\u0839\u0007\u01e0\u0002",
    "\u0002\u0838\u0832\u0003\u0002\u0002\u0002\u0838\u0839\u0003\u0002\u0002",
    "\u0002\u0839\u083d\u0003\u0002\u0002\u0002\u083a\u083b\u0007\u007f\u0002",
    "\u0002\u083b\u083c\u0007\u009f\u0002\u0002\u083c\u083e\u0005\u01f2\u00fa",
    "\u0002\u083d\u083a\u0003\u0002\u0002\u0002\u083d\u083e\u0003\u0002\u0002",
    "\u0002\u083e\u0840\u0003\u0002\u0002\u0002\u083f\u0841\u0005> \u0002",
    "\u0840\u083f\u0003\u0002\u0002\u0002\u0840\u0841\u0003\u0002\u0002\u0002",
    "\u0841\u0844\u0003\u0002\u0002\u0002\u0842\u0843\u0007\u0133\u0002\u0002",
    "\u0843\u0845\u0007\u040f\u0002\u0002\u0844\u0842\u0003\u0002\u0002\u0002",
    "\u0844\u0845\u0003\u0002\u0002\u0002\u0845\u0848\u0003\u0002\u0002\u0002",
    "\u0846\u0847\u0007\u0150\u0002\u0002\u0847\u0849\u0005\u015a\u00ae\u0002",
    "\u0848\u0846\u0003\u0002\u0002\u0002\u0848\u0849\u0003\u0002\u0002\u0002",
    "\u0849u\u0003\u0002\u0002\u0002\u084a\u084b\u0007\t\u0002\u0002\u084b",
    "\u084c\u0007\u0172\u0002\u0002\u084c\u0850\u0005\u01f2\u00fa\u0002\u084d",
    "\u084f\u0005H%\u0002\u084e\u084d\u0003\u0002\u0002\u0002\u084f\u0852",
    "\u0003\u0002\u0002\u0002\u0850\u084e\u0003\u0002\u0002\u0002\u0850\u0851",
    "\u0003\u0002\u0002\u0002\u0851w\u0003\u0002\u0002\u0002\u0852\u0850",
    "\u0003\u0002\u0002\u0002\u0853\u0854\u0007\t\u0002\u0002\u0854\u0855",
    "\u0007\u0184\u0002\u0002\u0855\u0856\u0007\u0202\u0002\u0002\u0856\u0857",
    "\u0007\u02ad\u0002\u0002\u0857\u0858\u0007\u0197\u0002\u0002\u0858\u0859",
    "\u0007T\u0002\u0002\u0859y\u0003\u0002\u0002\u0002\u085a\u085b\u0007",
    "\t\u0002\u0002\u085b\u085c\u0007\u0195\u0002\u0002\u085c\u085d\u0007",
    "D\u0002\u0002\u085d\u085e\u0005\u020c\u0107\u0002\u085e\u085f\u0007",
    "\u0007\u0002\u0002\u085f\u0860\u0007\u023a\u0002\u0002\u0860\u0866\u0007",
    "\u040f\u0002\u0002\u0861\u0863\u0007\u0180\u0002\u0002\u0862\u0864\u0007",
    "\u03f7\u0002\u0002\u0863\u0862\u0003\u0002\u0002\u0002\u0863\u0864\u0003",
    "\u0002\u0002\u0002\u0864\u0865\u0003\u0002\u0002\u0002\u0865\u0867\u0005",
    "\u0214\u010b\u0002\u0866\u0861\u0003\u0002\u0002\u0002\u0866\u0867\u0003",
    "\u0002\u0002\u0002\u0867\u0869\u0003\u0002\u0002\u0002\u0868\u086a\u0007",
    "\u0249\u0002\u0002\u0869\u0868\u0003\u0002\u0002\u0002\u0869\u086a\u0003",
    "\u0002\u0002\u0002\u086a\u086b\u0003\u0002\u0002\u0002\u086b\u086d\u0007",
    "\u0158\u0002\u0002\u086c\u086e\u0007\u03f7\u0002\u0002\u086d\u086c\u0003",
    "\u0002\u0002\u0002\u086d\u086e\u0003\u0002\u0002\u0002\u086e\u086f\u0003",
    "\u0002\u0002\u0002\u086f\u0870\u0005\u0202\u0102\u0002\u0870{\u0003",
    "\u0002\u0002\u0002\u0871\u0872\u0007\t\u0002\u0002\u0872\u0873\u0007",
    "w\u0002\u0002\u0873\u0877\u0005\u01f2\u00fa\u0002\u0874\u0876\u0005",
    "H%\u0002\u0875\u0874\u0003\u0002\u0002\u0002\u0876\u0879\u0003\u0002",
    "\u0002\u0002\u0877\u0875\u0003\u0002\u0002\u0002\u0877\u0878\u0003\u0002",
    "\u0002\u0002\u0878}\u0003\u0002\u0002\u0002\u0879\u0877\u0003\u0002",
    "\u0002\u0002\u087a\u087b\u0007\t\u0002\u0002\u087b\u087c\u0007\u0209",
    "\u0002\u0002\u087c\u087d\u0005\u020c\u0107\u0002\u087d\u087e\u0007\u01d0",
    "\u0002\u0002\u087e\u087f\u0007\u0400\u0002\u0002\u087f\u0884\u0005J",
    "&\u0002\u0880\u0881\u0007\u0402\u0002\u0002\u0881\u0883\u0005J&\u0002",
    "\u0882\u0880\u0003\u0002\u0002\u0002\u0883\u0886\u0003\u0002\u0002\u0002",
    "\u0884\u0882\u0003\u0002\u0002\u0002\u0884\u0885\u0003\u0002\u0002\u0002",
    "\u0885\u0887\u0003\u0002\u0002\u0002\u0886\u0884\u0003\u0002\u0002\u0002",
    "\u0887\u0888\u0007\u0401\u0002\u0002\u0888\u007f\u0003\u0002\u0002\u0002",
    "\u0889\u088b\u0007\t\u0002\u0002\u088a\u088c\t\u0003\u0002\u0002\u088b",
    "\u088a\u0003\u0002\u0002\u0002\u088b\u088c\u0003\u0002\u0002\u0002\u088c",
    "\u088e\u0003\u0002\u0002\u0002\u088d\u088f\u0007H\u0002\u0002\u088e",
    "\u088d\u0003\u0002\u0002\u0002\u088e\u088f\u0003\u0002\u0002\u0002\u088f",
    "\u0890\u0003\u0002\u0002\u0002\u0890\u0891\u0007\u009c\u0002\u0002\u0891",
    "\u089a\u0005\u01f4\u00fb\u0002\u0892\u0897\u0005\u0086D\u0002\u0893",
    "\u0894\u0007\u0402\u0002\u0002\u0894\u0896\u0005\u0086D\u0002\u0895",
    "\u0893\u0003\u0002\u0002\u0002\u0896\u0899\u0003\u0002\u0002\u0002\u0897",
    "\u0895\u0003\u0002\u0002\u0002\u0897\u0898\u0003\u0002\u0002\u0002\u0898",
    "\u089b\u0003\u0002\u0002\u0002\u0899\u0897\u0003\u0002\u0002\u0002\u089a",
    "\u0892\u0003\u0002\u0002\u0002\u089a\u089b\u0003\u0002\u0002\u0002\u089b",
    "\u089d\u0003\u0002\u0002\u0002\u089c\u089e\u0005b2\u0002\u089d\u089c",
    "\u0003\u0002\u0002\u0002\u089d\u089e\u0003\u0002\u0002\u0002\u089e\u0081",
    "\u0003\u0002\u0002\u0002\u089f\u08a0\u0007\t\u0002\u0002\u08a0\u08a1",
    "\u0007\u0230\u0002\u0002\u08a1\u08a2\u0005\u020c\u0107\u0002\u08a2\u08a3",
    "\t\u001e\u0002\u0002\u08a3\u08a4\u0007\u0146\u0002\u0002\u08a4\u08a8",
    "\u0007\u040f\u0002\u0002\u08a5\u08a6\u0007\u0180\u0002\u0002\u08a6\u08a7",
    "\u0007\u03f7\u0002\u0002\u08a7\u08a9\u0005\u0214\u010b\u0002\u08a8\u08a5",
    "\u0003\u0002\u0002\u0002\u08a8\u08a9\u0003\u0002\u0002\u0002\u08a9\u08ab",
    "\u0003\u0002\u0002\u0002\u08aa\u08ac\u0007\u0249\u0002\u0002\u08ab\u08aa",
    "\u0003\u0002\u0002\u0002\u08ab\u08ac\u0003\u0002\u0002\u0002\u08ac\u08ad",
    "\u0003\u0002\u0002\u0002\u08ad\u08af\u0007\u0158\u0002\u0002\u08ae\u08b0",
    "\u0007\u03f7\u0002\u0002\u08af\u08ae\u0003\u0002\u0002\u0002\u08af\u08b0",
    "\u0003\u0002\u0002\u0002\u08b0\u08b1\u0003\u0002\u0002\u0002\u08b1\u08b2",
    "\u0005\u0202\u0102\u0002\u08b2\u0083\u0003\u0002\u0002\u0002\u08b3\u08b7",
    "\u0007\t\u0002\u0002\u08b4\u08b5\u0007\u0114\u0002\u0002\u08b5\u08b6",
    "\u0007\u03f7\u0002\u0002\u08b6\u08b8\t\f\u0002\u0002\u08b7\u08b4\u0003",
    "\u0002\u0002\u0002\u08b7\u08b8\u0003\u0002\u0002\u0002\u08b8\u08ba\u0003",
    "\u0002\u0002\u0002\u08b9\u08bb\u00054\u001b\u0002\u08ba\u08b9\u0003",
    "\u0002\u0002\u0002\u08ba\u08bb\u0003\u0002\u0002\u0002\u08bb\u08bf\u0003",
    "\u0002\u0002\u0002\u08bc\u08bd\u0007\u0091\u0002\u0002\u08bd\u08be\u0007",
    "\u0208\u0002\u0002\u08be\u08c0\t\r\u0002\u0002\u08bf\u08bc\u0003\u0002",
    "\u0002\u0002\u08bf\u08c0\u0003\u0002\u0002\u0002\u08c0\u08c1\u0003\u0002",
    "\u0002\u0002\u08c1\u08c2\u0007\u0246\u0002\u0002\u08c2\u08c7\u0005\u01f2",
    "\u00fa\u0002\u08c3\u08c4\u0007\u0400\u0002\u0002\u08c4\u08c5\u0005\u022c",
    "\u0117\u0002\u08c5\u08c6\u0007\u0401\u0002\u0002\u08c6\u08c8\u0003\u0002",
    "\u0002\u0002\u08c7\u08c3\u0003\u0002\u0002\u0002\u08c7\u08c8\u0003\u0002",
    "\u0002\u0002\u08c8\u08c9\u0003\u0002\u0002\u0002\u08c9\u08ca\u0007\r",
    "\u0002\u0002\u08ca\u08d1\u0005\u00b4[\u0002\u08cb\u08cd\u0007\u00b0",
    "\u0002\u0002\u08cc\u08ce\t\u000e\u0002\u0002\u08cd\u08cc\u0003\u0002",
    "\u0002\u0002\u08cd\u08ce\u0003\u0002\u0002\u0002\u08ce\u08cf\u0003\u0002",
    "\u0002\u0002\u08cf\u08d0\u0007\u0019\u0002\u0002\u08d0\u08d2\u0007n",
    "\u0002\u0002\u08d1\u08cb\u0003\u0002\u0002\u0002\u08d1\u08d2\u0003\u0002",
    "\u0002\u0002\u08d2\u0085\u0003\u0002\u0002\u0002\u08d3\u08da\u0005^",
    "0\u0002\u08d4\u08d6\u0007\u0402\u0002\u0002\u08d5\u08d4\u0003\u0002",
    "\u0002\u0002\u08d5\u08d6\u0003\u0002\u0002\u0002\u08d6\u08d7\u0003\u0002",
    "\u0002\u0002\u08d7\u08d9\u0005^0\u0002\u08d8\u08d5\u0003\u0002\u0002",
    "\u0002\u08d9\u08dc\u0003\u0002\u0002\u0002\u08da\u08d8\u0003\u0002\u0002",
    "\u0002\u08da\u08db\u0003\u0002\u0002\u0002\u08db\u0a42\u0003\u0002\u0002",
    "\u0002\u08dc\u08da\u0003\u0002\u0002\u0002\u08dd\u08df\u0007\u0007\u0002",
    "\u0002\u08de\u08e0\u0007\u001b\u0002\u0002\u08df\u08de\u0003\u0002\u0002",
    "\u0002\u08df\u08e0\u0003\u0002\u0002\u0002\u08e0\u08e1\u0003\u0002\u0002",
    "\u0002\u08e1\u08e2\u0005\u020c\u0107\u0002\u08e2\u08e6\u0005P)\u0002",
    "\u08e3\u08e7\u0007\u016c\u0002\u0002\u08e4\u08e5\u0007\u0112\u0002\u0002",
    "\u08e5\u08e7\u0005\u020c\u0107\u0002\u08e6\u08e3\u0003\u0002\u0002\u0002",
    "\u08e6\u08e4\u0003\u0002\u0002\u0002\u08e6\u08e7\u0003\u0002\u0002\u0002",
    "\u08e7\u0a42\u0003\u0002\u0002\u0002\u08e8\u08ea\u0007\u0007\u0002\u0002",
    "\u08e9\u08eb\u0007\u001b\u0002\u0002\u08ea\u08e9\u0003\u0002\u0002\u0002",
    "\u08ea\u08eb\u0003\u0002\u0002\u0002\u08eb\u08ec\u0003\u0002\u0002\u0002",
    "\u08ec\u08ed\u0007\u0400\u0002\u0002\u08ed\u08ee\u0005\u020c\u0107\u0002",
    "\u08ee\u08f5\u0005P)\u0002\u08ef\u08f0\u0007\u0402\u0002\u0002\u08f0",
    "\u08f1\u0005\u020c\u0107\u0002\u08f1\u08f2\u0005P)\u0002\u08f2\u08f4",
    "\u0003\u0002\u0002\u0002\u08f3\u08ef\u0003\u0002\u0002\u0002\u08f4\u08f7",
    "\u0003\u0002\u0002\u0002\u08f5\u08f3\u0003\u0002\u0002\u0002\u08f5\u08f6",
    "\u0003\u0002\u0002\u0002\u08f6\u08f8\u0003\u0002\u0002\u0002\u08f7\u08f5",
    "\u0003\u0002\u0002\u0002\u08f8\u08f9\u0007\u0401\u0002\u0002\u08f9\u0a42",
    "\u0003\u0002\u0002\u0002\u08fa\u08fb\u0007\u0007\u0002\u0002\u08fb\u08fd",
    "\t\u0014\u0002\u0002\u08fc\u08fe\u0005\u020c\u0107\u0002\u08fd\u08fc",
    "\u0003\u0002\u0002\u0002\u08fd\u08fe\u0003\u0002\u0002\u0002\u08fe\u0900",
    "\u0003\u0002\u0002\u0002\u08ff\u0901\u0005@!\u0002\u0900\u08ff\u0003",
    "\u0002\u0002\u0002\u0900\u0901\u0003\u0002\u0002\u0002\u0901\u0902\u0003",
    "\u0002\u0002\u0002\u0902\u0906\u0005\u0230\u0119\u0002\u0903\u0905\u0005",
    "B\"\u0002\u0904\u0903\u0003\u0002\u0002\u0002\u0905\u0908\u0003\u0002",
    "\u0002\u0002\u0906\u0904\u0003\u0002\u0002\u0002\u0906\u0907\u0003\u0002",
    "\u0002\u0002\u0907\u0a42\u0003\u0002\u0002\u0002\u0908\u0906\u0003\u0002",
    "\u0002\u0002\u0909\u090e\u0007\u0007\u0002\u0002\u090a\u090c\u0007\u001d",
    "\u0002\u0002\u090b\u090d\u0005\u020c\u0107\u0002\u090c\u090b\u0003\u0002",
    "\u0002\u0002\u090c\u090d\u0003\u0002\u0002\u0002\u090d\u090f\u0003\u0002",
    "\u0002\u0002\u090e\u090a\u0003\u0002\u0002\u0002\u090e\u090f\u0003\u0002",
    "\u0002\u0002\u090f\u0910\u0003\u0002\u0002\u0002\u0910\u0911\u0007v",
    "\u0002\u0002\u0911\u0913\u0007T\u0002\u0002\u0912\u0914\u0005\u020c",
    "\u0107\u0002\u0913\u0912\u0003\u0002\u0002\u0002\u0913\u0914\u0003\u0002",
    "\u0002\u0002\u0914\u0916\u0003\u0002\u0002\u0002\u0915\u0917\u0005@",
    "!\u0002\u0916\u0915\u0003\u0002\u0002\u0002\u0916\u0917\u0003\u0002",
    "\u0002\u0002\u0917\u0918\u0003\u0002\u0002\u0002\u0918\u091c\u0005\u0230",
    "\u0119\u0002\u0919\u091b\u0005B\"\u0002\u091a\u0919\u0003\u0002\u0002",
    "\u0002\u091b\u091e\u0003\u0002\u0002\u0002\u091c\u091a\u0003\u0002\u0002",
    "\u0002\u091c\u091d\u0003\u0002\u0002\u0002\u091d\u0a42\u0003\u0002\u0002",
    "\u0002\u091e\u091c\u0003\u0002\u0002\u0002\u091f\u0924\u0007\u0007\u0002",
    "\u0002\u0920\u0922\u0007\u001d\u0002\u0002\u0921\u0923\u0005\u020c\u0107",
    "\u0002\u0922\u0921\u0003\u0002\u0002\u0002\u0922\u0923\u0003\u0002\u0002",
    "\u0002\u0923\u0925\u0003\u0002\u0002\u0002\u0924\u0920\u0003\u0002\u0002",
    "\u0002\u0924\u0925\u0003\u0002\u0002\u0002\u0925\u0926\u0003\u0002\u0002",
    "\u0002\u0926\u0928\u0007\u00a5\u0002\u0002\u0927\u0929\t\u0014\u0002",
    "\u0002\u0928\u0927\u0003\u0002\u0002\u0002\u0928\u0929\u0003\u0002\u0002",
    "\u0002\u0929\u092b\u0003\u0002\u0002\u0002\u092a\u092c\u0005\u020c\u0107",
    "\u0002\u092b\u092a\u0003\u0002\u0002\u0002\u092b\u092c\u0003\u0002\u0002",
    "\u0002\u092c\u092e\u0003\u0002\u0002\u0002\u092d\u092f\u0005@!\u0002",
    "\u092e\u092d\u0003\u0002\u0002\u0002\u092e\u092f\u0003\u0002\u0002\u0002",
    "\u092f\u0930\u0003\u0002\u0002\u0002\u0930\u0934\u0005\u0230\u0119\u0002",
    "\u0931\u0933\u0005B\"\u0002\u0932\u0931\u0003\u0002\u0002\u0002\u0933",
    "\u0936\u0003\u0002\u0002\u0002\u0934\u0932\u0003\u0002\u0002\u0002\u0934",
    "\u0935\u0003\u0002\u0002\u0002\u0935\u0a42\u0003\u0002\u0002\u0002\u0936",
    "\u0934\u0003\u0002\u0002\u0002\u0937\u0938\u0007\u0007\u0002\u0002\u0938",
    "\u093a\t\u0016\u0002\u0002\u0939\u093b\t\u0014\u0002\u0002\u093a\u0939",
    "\u0003\u0002\u0002\u0002\u093a\u093b\u0003\u0002\u0002\u0002\u093b\u093d",
    "\u0003\u0002\u0002\u0002\u093c\u093e\u0005\u020c\u0107\u0002\u093d\u093c",
    "\u0003\u0002\u0002\u0002\u093d\u093e\u0003\u0002\u0002\u0002\u093e\u093f",
    "\u0003\u0002\u0002\u0002\u093f\u0943\u0005\u0230\u0119\u0002\u0940\u0942",
    "\u0005B\"\u0002\u0941\u0940\u0003\u0002\u0002\u0002\u0942\u0945\u0003",
    "\u0002\u0002\u0002\u0943\u0941\u0003\u0002\u0002\u0002\u0943\u0944\u0003",
    "\u0002\u0002\u0002\u0944\u0a42\u0003\u0002\u0002\u0002\u0945\u0943\u0003",
    "\u0002\u0002\u0002\u0946\u094b\u0007\u0007\u0002\u0002\u0947\u0949\u0007",
    "\u001d\u0002\u0002\u0948\u094a\u0005\u020c\u0107\u0002\u0949\u0948\u0003",
    "\u0002\u0002\u0002\u0949\u094a\u0003\u0002\u0002\u0002\u094a\u094c\u0003",
    "\u0002\u0002\u0002\u094b\u0947\u0003\u0002\u0002\u0002\u094b\u094c\u0003",
    "\u0002\u0002\u0002\u094c\u094d\u0003\u0002\u0002\u0002\u094d\u094e\u0007",
    ">\u0002\u0002\u094e\u0950\u0007T\u0002\u0002\u094f\u0951\u0005\u020c",
    "\u0107\u0002\u0950\u094f\u0003\u0002\u0002\u0002\u0950\u0951\u0003\u0002",
    "\u0002\u0002\u0951\u0952\u0003\u0002\u0002\u0002\u0952\u0953\u0005\u0230",
    "\u0119\u0002\u0953\u0954\u0005V,\u0002\u0954\u0a42\u0003\u0002\u0002",
    "\u0002\u0955\u095a\u0007\u0007\u0002\u0002\u0956\u0958\u0007\u001d\u0002",
    "\u0002\u0957\u0959\u0005\u020c\u0107\u0002\u0958\u0957\u0003\u0002\u0002",
    "\u0002\u0958\u0959\u0003\u0002\u0002\u0002\u0959\u095b\u0003\u0002\u0002",
    "\u0002\u095a\u0956\u0003\u0002\u0002\u0002\u095a\u095b\u0003\u0002\u0002",
    "\u0002\u095b\u095c\u0003\u0002\u0002\u0002\u095c\u095d\u0007\u0019\u0002",
    "\u0002\u095d\u095e\u0007\u0400\u0002\u0002\u095e\u095f\u0005\u025a\u012e",
    "\u0002\u095f\u0960\u0007\u0401\u0002\u0002\u0960\u0a42\u0003\u0002\u0002",
    "\u0002\u0961\u0963\u0007\u0114\u0002\u0002\u0962\u0964\u0007\u03f7\u0002",
    "\u0002\u0963\u0962\u0003\u0002\u0002\u0002\u0963\u0964\u0003\u0002\u0002",
    "\u0002\u0964\u0965\u0003\u0002\u0002\u0002\u0965\u0a42\t\u0005\u0002",
    "\u0002\u0966\u0968\u0007\t\u0002\u0002\u0967\u0969\u0007\u001b\u0002",
    "\u0002\u0968\u0967\u0003\u0002\u0002\u0002\u0968\u0969\u0003\u0002\u0002",
    "\u0002\u0969\u096a\u0003\u0002\u0002\u0002\u096a\u0970\u0005\u020c\u0107",
    "\u0002\u096b\u096c\u0007\u008c\u0002\u0002\u096c\u096d\u0007(\u0002",
    "\u0002\u096d\u0971\u0005\u023c\u011f\u0002\u096e\u096f\u00071\u0002",
    "\u0002\u096f\u0971\u0007(\u0002\u0002\u0970\u096b\u0003\u0002\u0002",
    "\u0002\u0970\u096e\u0003\u0002\u0002\u0002\u0971\u0a42\u0003\u0002\u0002",
    "\u0002\u0972\u0974\u0007\u0017\u0002\u0002\u0973\u0975\u0007\u001b\u0002",
    "\u0002\u0974\u0973\u0003\u0002\u0002\u0002\u0974\u0975\u0003\u0002\u0002",
    "\u0002\u0975\u0976\u0003\u0002\u0002\u0002\u0976\u0977\u0005\u020c\u0107",
    "\u0002\u0977\u0978\u0005\u020c\u0107\u0002\u0978\u097c\u0005P)\u0002",
    "\u0979\u097d\u0007\u016c\u0002\u0002\u097a\u097b\u0007\u0112\u0002\u0002",
    "\u097b\u097d\u0005\u020c\u0107\u0002\u097c\u0979\u0003\u0002\u0002\u0002",
    "\u097c\u097a\u0003\u0002\u0002\u0002\u097c\u097d\u0003\u0002\u0002\u0002",
    "\u097d\u0a42\u0003\u0002\u0002\u0002\u097e\u097f\u0007\u007f\u0002\u0002",
    "\u097f\u0980\u0007\u001b\u0002\u0002\u0980\u0981\u0005\u020c\u0107\u0002",
    "\u0981\u0982\u0007\u009f\u0002\u0002\u0982\u0983\u0005\u020c\u0107\u0002",
    "\u0983\u0a42\u0003\u0002\u0002\u0002\u0984\u0986\u0007_\u0002\u0002",
    "\u0985\u0987\u0007\u03f7\u0002\u0002\u0986\u0985\u0003\u0002\u0002\u0002",
    "\u0986\u0987\u0003\u0002\u0002\u0002\u0987\u0988\u0003\u0002\u0002\u0002",
    "\u0988\u0a42\t\u0006\u0002\u0002\u0989\u098b\u0007\u01ba\u0002\u0002",
    "\u098a\u098c\u0007\u001b\u0002\u0002\u098b\u098a\u0003\u0002\u0002\u0002",
    "\u098b\u098c\u0003\u0002\u0002\u0002\u098c\u098d\u0003\u0002\u0002\u0002",
    "\u098d\u098e\u0005\u020c\u0107\u0002\u098e\u0992\u0005P)\u0002\u098f",
    "\u0993\u0007\u016c\u0002\u0002\u0990\u0991\u0007\u0112\u0002\u0002\u0991",
    "\u0993\u0005\u020c\u0107\u0002\u0992\u098f\u0003\u0002\u0002\u0002\u0992",
    "\u0990\u0003\u0002\u0002\u0002\u0992\u0993\u0003\u0002\u0002\u0002\u0993",
    "\u0a42\u0003\u0002\u0002\u0002\u0994\u0996\u00071\u0002\u0002\u0995",
    "\u0997\u0007\u001b\u0002\u0002\u0996\u0995\u0003\u0002\u0002\u0002\u0996",
    "\u0997\u0003\u0002\u0002\u0002\u0997\u0998\u0003\u0002\u0002\u0002\u0998",
    "\u099a\u0005\u020c\u0107\u0002\u0999\u099b\u0007\u0084\u0002\u0002\u099a",
    "\u0999\u0003\u0002\u0002\u0002\u099a\u099b\u0003\u0002\u0002\u0002\u099b",
    "\u0a42\u0003\u0002\u0002\u0002\u099c\u099d\u00071\u0002\u0002\u099d",
    "\u099e\t\u001f\u0002\u0002\u099e\u0a42\u0005\u020c\u0107\u0002\u099f",
    "\u09a0\u00071\u0002\u0002\u09a0\u09a1\u0007v\u0002\u0002\u09a1\u0a42",
    "\u0007T\u0002\u0002\u09a2\u09a3\u0007\u007f\u0002\u0002\u09a3\u09a4",
    "\t\u0014\u0002\u0002\u09a4\u09a5\u0005\u020c\u0107\u0002\u09a5\u09a6",
    "\u0007\u009f\u0002\u0002\u09a6\u09a7\u0005\u020c\u0107\u0002\u09a7\u0a42",
    "\u0003\u0002\u0002\u0002\u09a8\u09a9\u0007\t\u0002\u0002\u09a9\u09aa",
    "\u0007J\u0002\u0002\u09aa\u09ab\u0005\u020c\u0107\u0002\u09ab\u09ac",
    "\t \u0002\u0002\u09ac\u0a42\u0003\u0002\u0002\u0002\u09ad\u09ae\u0007",
    "1\u0002\u0002\u09ae\u09af\t\u0014\u0002\u0002\u09af\u0a42\u0005\u020c",
    "\u0107\u0002\u09b0\u09b1\u00071\u0002\u0002\u09b1\u09b2\u0007>\u0002",
    "\u0002\u09b2\u09b3\u0007T\u0002\u0002\u09b3\u0a42\u0005\u020c\u0107",
    "\u0002\u09b4\u09b5\u0007\u014d\u0002\u0002\u09b5\u0a42\u0007U\u0002",
    "\u0002\u09b6\u09b7\u0007\u0154\u0002\u0002\u09b7\u0a42\u0007U\u0002",
    "\u0002\u09b8\u09ba\u0007\u007f\u0002\u0002\u09b9\u09bb\t!\u0002\u0002",
    "\u09ba\u09b9\u0003\u0002\u0002\u0002\u09ba\u09bb\u0003\u0002\u0002\u0002",
    "\u09bb\u09be\u0003\u0002\u0002\u0002\u09bc\u09bf\u0005\u020c\u0107\u0002",
    "\u09bd\u09bf\u0005\u01f2\u00fa\u0002\u09be\u09bc\u0003\u0002\u0002\u0002",
    "\u09be\u09bd\u0003\u0002\u0002\u0002\u09bf\u0a42\u0003\u0002\u0002\u0002",
    "\u09c0\u09c1\u0007q\u0002\u0002\u09c1\u09c2\u0007\u0012\u0002\u0002",
    "\u09c2\u0a42\u0005\u022c\u0117\u0002\u09c3\u09c4\u0007\u001f\u0002\u0002",
    "\u09c4\u09c5\u0007\u009f\u0002\u0002\u09c5\u09c6\u0007\u0018\u0002\u0002",
    "\u09c6\u09c7\u0007\u008c\u0002\u0002\u09c7\u09ca\u0005\u01fe\u0100\u0002",
    "\u09c8\u09c9\u0007\u001a\u0002\u0002\u09c9\u09cb\u0005\u0200\u0101\u0002",
    "\u09ca\u09c8\u0003\u0002\u0002\u0002\u09ca\u09cb\u0003\u0002\u0002\u0002",
    "\u09cb\u0a42\u0003\u0002\u0002\u0002\u09cc\u09ce\u0007(\u0002\u0002",
    "\u09cd\u09cc\u0003\u0002\u0002\u0002\u09cd\u09ce\u0003\u0002\u0002\u0002",
    "\u09ce\u09cf\u0003\u0002\u0002\u0002\u09cf\u09d0\u0007\u0018\u0002\u0002",
    "\u09d0\u09d1\u0007\u008c\u0002\u0002\u09d1\u09d2\u0007\u03f7\u0002\u0002",
    "\u09d2\u09d6\u0005\u01fe\u0100\u0002\u09d3\u09d4\u0007\u001a\u0002\u0002",
    "\u09d4\u09d5\u0007\u03f7\u0002\u0002\u09d5\u09d7\u0005\u0200\u0101\u0002",
    "\u09d6\u09d3\u0003\u0002\u0002\u0002\u09d6\u09d7\u0003\u0002\u0002\u0002",
    "\u09d7\u0a42\u0003\u0002\u0002\u0002\u09d8\u09d9\u0007\u014e\u0002\u0002",
    "\u09d9\u0a42\u0007\u0230\u0002\u0002\u09da\u09db\u0007\u017e\u0002\u0002",
    "\u09db\u0a42\u0007\u0230\u0002\u0002\u09dc\u0a42\u0007=\u0002\u0002",
    "\u09dd\u09de\t\"\u0002\u0002\u09de\u0a42\u0007\u0243\u0002\u0002\u09df",
    "\u09e0\u0007\u0007\u0002\u0002\u09e0\u09e1\u0007u\u0002\u0002\u09e1",
    "\u09e2\u0007\u0400\u0002\u0002\u09e2\u09e7\u0005h5\u0002\u09e3\u09e4",
    "\u0007\u0402\u0002\u0002\u09e4\u09e6\u0005h5\u0002\u09e5\u09e3\u0003",
    "\u0002\u0002\u0002\u09e6\u09e9\u0003\u0002\u0002\u0002\u09e7\u09e5\u0003",
    "\u0002\u0002\u0002\u09e7\u09e8\u0003\u0002\u0002\u0002\u09e8\u09ea\u0003",
    "\u0002\u0002\u0002\u09e9\u09e7\u0003\u0002\u0002\u0002\u09ea\u09eb\u0007",
    "\u0401\u0002\u0002\u09eb\u0a42\u0003\u0002\u0002\u0002\u09ec\u09ed\u0007",
    "1\u0002\u0002\u09ed\u09ee\u0007u\u0002\u0002\u09ee\u0a42\u0005\u022c",
    "\u0117\u0002\u09ef\u09f0\u0007\u014e\u0002\u0002\u09f0\u09f3\u0007u",
    "\u0002\u0002\u09f1\u09f4\u0005\u022c\u0117\u0002\u09f2\u09f4\u0007\b",
    "\u0002\u0002\u09f3\u09f1\u0003\u0002\u0002\u0002\u09f3\u09f2\u0003\u0002",
    "\u0002\u0002\u09f4\u09f5\u0003\u0002\u0002\u0002\u09f5\u0a42\u0007\u0230",
    "\u0002\u0002\u09f6\u09f7\u0007\u017e\u0002\u0002\u09f7\u09fa\u0007u",
    "\u0002\u0002\u09f8\u09fb\u0005\u022c\u0117\u0002\u09f9\u09fb\u0007\b",
    "\u0002\u0002\u09fa\u09f8\u0003\u0002\u0002\u0002\u09fa\u09f9\u0003\u0002",
    "\u0002\u0002\u09fb\u09fc\u0003\u0002\u0002\u0002\u09fc\u0a42\u0007\u0230",
    "\u0002\u0002\u09fd\u09fe\u0007\u0238\u0002\u0002\u09fe\u0a01\u0007u",
    "\u0002\u0002\u09ff\u0a02\u0005\u022c\u0117\u0002\u0a00\u0a02\u0007\b",
    "\u0002\u0002\u0a01\u09ff\u0003\u0002\u0002\u0002\u0a01\u0a00\u0003\u0002",
    "\u0002\u0002\u0a02\u0a42\u0003\u0002\u0002\u0002\u0a03\u0a04\u0007\u012e",
    "\u0002\u0002\u0a04\u0a05\u0007u\u0002\u0002\u0a05\u0a42\u0005\u0212",
    "\u010a\u0002\u0a06\u0a07\u0007\u01f1\u0002\u0002\u0a07\u0a08\u0007u",
    "\u0002\u0002\u0a08\u0a09\u0005\u022c\u0117\u0002\u0a09\u0a0a\u0007P",
    "\u0002\u0002\u0a0a\u0a0b\u0007\u0400\u0002\u0002\u0a0b\u0a10\u0005h",
    "5\u0002\u0a0c\u0a0d\u0007\u0402\u0002\u0002\u0a0d\u0a0f\u0005h5\u0002",
    "\u0a0e\u0a0c\u0003\u0002\u0002\u0002\u0a0f\u0a12\u0003\u0002\u0002\u0002",
    "\u0a10\u0a0e\u0003\u0002\u0002\u0002\u0a10\u0a11\u0003\u0002\u0002\u0002",
    "\u0a11\u0a13\u0003\u0002\u0002\u0002\u0a12\u0a10\u0003\u0002\u0002\u0002",
    "\u0a13\u0a14\u0007\u0401\u0002\u0002\u0a14\u0a42\u0003\u0002\u0002\u0002",
    "\u0a15\u0a16\u0007\u0161\u0002\u0002\u0a16\u0a17\u0007u\u0002\u0002",
    "\u0a17\u0a18\u0005\u020c\u0107\u0002\u0a18\u0a19\u0007\u00b0\u0002\u0002",
    "\u0a19\u0a1a\u0007\u009c\u0002\u0002\u0a1a\u0a1d\u0005\u01f4\u00fb\u0002",
    "\u0a1b\u0a1c\t\"\u0002\u0002\u0a1c\u0a1e\u0007\u0243\u0002\u0002\u0a1d",
    "\u0a1b\u0003\u0002\u0002\u0002\u0a1d\u0a1e\u0003\u0002\u0002\u0002\u0a1e",
    "\u0a42\u0003\u0002\u0002\u0002\u0a1f\u0a20\u0007\u000b\u0002\u0002\u0a20",
    "\u0a23\u0007u\u0002\u0002\u0a21\u0a24\u0005\u022c\u0117\u0002\u0a22",
    "\u0a24\u0007\b\u0002\u0002\u0a23\u0a21\u0003\u0002\u0002\u0002\u0a23",
    "\u0a22\u0003\u0002\u0002\u0002\u0a24\u0a42\u0003\u0002\u0002\u0002\u0a25",
    "\u0a26\u0007\u0019\u0002\u0002\u0a26\u0a29\u0007u\u0002\u0002\u0a27",
    "\u0a2a\u0005\u022c\u0117\u0002\u0a28\u0a2a\u0007\b\u0002\u0002\u0a29",
    "\u0a27\u0003\u0002\u0002\u0002\u0a29\u0a28\u0003\u0002\u0002\u0002\u0a2a",
    "\u0a42\u0003\u0002\u0002\u0002\u0a2b\u0a2c\u0007m\u0002\u0002\u0a2c",
    "\u0a2f\u0007u\u0002\u0002\u0a2d\u0a30\u0005\u022c\u0117\u0002\u0a2e",
    "\u0a30\u0007\b\u0002\u0002\u0a2f\u0a2d\u0003\u0002\u0002\u0002\u0a2f",
    "\u0a2e\u0003\u0002\u0002\u0002\u0a30\u0a42\u0003\u0002\u0002\u0002\u0a31",
    "\u0a32\u0007\u01e8\u0002\u0002\u0a32\u0a35\u0007u\u0002\u0002\u0a33",
    "\u0a36\u0005\u022c\u0117\u0002\u0a34\u0a36\u0007\b\u0002\u0002\u0a35",
    "\u0a33\u0003\u0002\u0002\u0002\u0a35\u0a34\u0003\u0002\u0002\u0002\u0a36",
    "\u0a42\u0003\u0002\u0002\u0002\u0a37\u0a38\u0007\u01f2\u0002\u0002\u0a38",
    "\u0a3b\u0007u\u0002\u0002\u0a39\u0a3c\u0005\u022c\u0117\u0002\u0a3a",
    "\u0a3c\u0007\b\u0002\u0002\u0a3b\u0a39\u0003\u0002\u0002\u0002\u0a3b",
    "\u0a3a\u0003\u0002\u0002\u0002\u0a3c\u0a42\u0003\u0002\u0002\u0002\u0a3d",
    "\u0a3e\u0007\u01f0\u0002\u0002\u0a3e\u0a42\u0007\u01d6\u0002\u0002\u0a3f",
    "\u0a40\u0007\u023f\u0002\u0002\u0a40\u0a42\u0007\u01d6\u0002\u0002\u0a41",
    "\u08d3\u0003\u0002\u0002\u0002\u0a41\u08dd\u0003\u0002\u0002\u0002\u0a41",
    "\u08e8\u0003\u0002\u0002\u0002\u0a41\u08fa\u0003\u0002\u0002\u0002\u0a41",
    "\u0909\u0003\u0002\u0002\u0002\u0a41\u091f\u0003\u0002\u0002\u0002\u0a41",
    "\u0937\u0003\u0002\u0002\u0002\u0a41\u0946\u0003\u0002\u0002\u0002\u0a41",
    "\u0955\u0003\u0002\u0002\u0002\u0a41\u0961\u0003\u0002\u0002\u0002\u0a41",
    "\u0966\u0003\u0002\u0002\u0002\u0a41\u0972\u0003\u0002\u0002\u0002\u0a41",
    "\u097e\u0003\u0002\u0002\u0002\u0a41\u0984\u0003\u0002\u0002\u0002\u0a41",
    "\u0989\u0003\u0002\u0002\u0002\u0a41\u0994\u0003\u0002\u0002\u0002\u0a41",
    "\u099c\u0003\u0002\u0002\u0002\u0a41\u099f\u0003\u0002\u0002\u0002\u0a41",
    "\u09a2\u0003\u0002\u0002\u0002\u0a41\u09a8\u0003\u0002\u0002\u0002\u0a41",
    "\u09ad\u0003\u0002\u0002\u0002\u0a41\u09b0\u0003\u0002\u0002\u0002\u0a41",
    "\u09b4\u0003\u0002\u0002\u0002\u0a41\u09b6\u0003\u0002\u0002\u0002\u0a41",
    "\u09b8\u0003\u0002\u0002\u0002\u0a41\u09c0\u0003\u0002\u0002\u0002\u0a41",
    "\u09c3\u0003\u0002\u0002\u0002\u0a41\u09cd\u0003\u0002\u0002\u0002\u0a41",
    "\u09d8\u0003\u0002\u0002\u0002\u0a41\u09da\u0003\u0002\u0002\u0002\u0a41",
    "\u09dc\u0003\u0002\u0002\u0002\u0a41\u09dd\u0003\u0002\u0002\u0002\u0a41",
    "\u09df\u0003\u0002\u0002\u0002\u0a41\u09ec\u0003\u0002\u0002\u0002\u0a41",
    "\u09ef\u0003\u0002\u0002\u0002\u0a41\u09f6\u0003\u0002\u0002\u0002\u0a41",
    "\u09fd\u0003\u0002\u0002\u0002\u0a41\u0a03\u0003\u0002\u0002\u0002\u0a41",
    "\u0a06\u0003\u0002\u0002\u0002\u0a41\u0a15\u0003\u0002\u0002\u0002\u0a41",
    "\u0a1f\u0003\u0002\u0002\u0002\u0a41\u0a25\u0003\u0002\u0002\u0002\u0a41",
    "\u0a2b\u0003\u0002\u0002\u0002\u0a41\u0a31\u0003\u0002\u0002\u0002\u0a41",
    "\u0a37\u0003\u0002\u0002\u0002\u0a41\u0a3d\u0003\u0002\u0002\u0002\u0a41",
    "\u0a3f\u0003\u0002\u0002\u0002\u0a42\u0087\u0003\u0002\u0002\u0002\u0a43",
    "\u0a44\u00071\u0002\u0002\u0a44\u0a46\t\u0002\u0002\u0002\u0a45\u0a47",
    "\u0005\u0242\u0122\u0002\u0a46\u0a45\u0003\u0002\u0002\u0002\u0a46\u0a47",
    "\u0003\u0002\u0002\u0002\u0a47\u0a48\u0003\u0002\u0002\u0002\u0a48\u0a49",
    "\u0005\u020c\u0107\u0002\u0a49\u0089\u0003\u0002\u0002\u0002\u0a4a\u0a4b",
    "\u00071\u0002\u0002\u0a4b\u0a4d\u0007\u015e\u0002\u0002\u0a4c\u0a4e",
    "\u0005\u0242\u0122\u0002\u0a4d\u0a4c\u0003\u0002\u0002\u0002\u0a4d\u0a4e",
    "\u0003\u0002\u0002\u0002\u0a4e\u0a4f\u0003\u0002\u0002\u0002\u0a4f\u0a50",
    "\u0005\u01f2\u00fa\u0002\u0a50\u008b\u0003\u0002\u0002\u0002\u0a51\u0a52",
    "\u00071\u0002\u0002\u0a52\u0a54\u0007J\u0002\u0002\u0a53\u0a55\t\u0003",
    "\u0002\u0002\u0a54\u0a53\u0003\u0002\u0002\u0002\u0a54\u0a55\u0003\u0002",
    "\u0002\u0002\u0a55\u0a56\u0003\u0002\u0002\u0002\u0a56\u0a57\u0005\u020c",
    "\u0107\u0002\u0a57\u0a58\u0007l\u0002\u0002\u0a58\u0a65\u0005\u01f4",
    "\u00fb\u0002\u0a59\u0a5b\u0007\u0114\u0002\u0002\u0a5a\u0a5c\u0007\u03f7",
    "\u0002\u0002\u0a5b\u0a5a\u0003\u0002\u0002\u0002\u0a5b\u0a5c\u0003\u0002",
    "\u0002\u0002\u0a5c\u0a5d\u0003\u0002\u0002\u0002\u0a5d\u0a64\t\u0005",
    "\u0002\u0002\u0a5e\u0a60\u0007_\u0002\u0002\u0a5f\u0a61\u0007\u03f7",
    "\u0002\u0002\u0a60\u0a5f\u0003\u0002\u0002\u0002\u0a60\u0a61\u0003\u0002",
    "\u0002\u0002\u0a61\u0a62\u0003\u0002\u0002\u0002\u0a62\u0a64\t\u0006",
    "\u0002\u0002\u0a63\u0a59\u0003\u0002\u0002\u0002\u0a63\u0a5e\u0003\u0002",
    "\u0002\u0002\u0a64\u0a67\u0003\u0002\u0002\u0002\u0a65\u0a63\u0003\u0002",
    "\u0002\u0002\u0a65\u0a66\u0003\u0002\u0002\u0002\u0a66\u008d\u0003\u0002",
    "\u0002\u0002\u0a67\u0a65\u0003\u0002\u0002\u0002\u0a68\u0a69\u00071",
    "\u0002\u0002\u0a69\u0a6a\u0007\u0195\u0002\u0002\u0a6a\u0a6b\u0007D",
    "\u0002\u0002\u0a6b\u0a6c\u0005\u020c\u0107\u0002\u0a6c\u0a6d\u0007\u0158",
    "\u0002\u0002\u0a6d\u0a6e\u0007\u03f7\u0002\u0002\u0a6e\u0a6f\u0005\u0202",
    "\u0102\u0002\u0a6f\u008f\u0003\u0002\u0002\u0002\u0a70\u0a71\u00071",
    "\u0002\u0002\u0a71\u0a73\u0007w\u0002\u0002\u0a72\u0a74\u0005\u0242",
    "\u0122\u0002\u0a73\u0a72\u0003\u0002\u0002\u0002\u0a73\u0a74\u0003\u0002",
    "\u0002\u0002\u0a74\u0a75\u0003\u0002\u0002\u0002\u0a75\u0a76\u0005\u01f2",
    "\u00fa\u0002\u0a76\u0091\u0003\u0002\u0002\u0002\u0a77\u0a78\u00071",
    "\u0002\u0002\u0a78\u0a7a\u0007\u0172\u0002\u0002\u0a79\u0a7b\u0005\u0242",
    "\u0122\u0002\u0a7a\u0a79\u0003\u0002\u0002\u0002\u0a7a\u0a7b\u0003\u0002",
    "\u0002\u0002\u0a7b\u0a7c\u0003\u0002\u0002\u0002\u0a7c\u0a7d\u0005\u01f2",
    "\u00fa\u0002\u0a7d\u0093\u0003\u0002\u0002\u0002\u0a7e\u0a7f\u00071",
    "\u0002\u0002\u0a7f\u0a81\u0007\u0209\u0002\u0002\u0a80\u0a82\u0005\u0242",
    "\u0122\u0002\u0a81\u0a80\u0003\u0002\u0002\u0002\u0a81\u0a82\u0003\u0002",
    "\u0002\u0002\u0a82\u0a83\u0003\u0002\u0002\u0002\u0a83\u0a84\u0005\u020c",
    "\u0107\u0002\u0a84\u0095\u0003\u0002\u0002\u0002\u0a85\u0a87\u00071",
    "\u0002\u0002\u0a86\u0a88\u0007\u0231\u0002\u0002\u0a87\u0a86\u0003\u0002",
    "\u0002\u0002\u0a87\u0a88\u0003\u0002\u0002\u0002\u0a88\u0a89\u0003\u0002",
    "\u0002\u0002\u0a89\u0a8b\u0007\u009c\u0002\u0002\u0a8a\u0a8c\u0005\u0242",
    "\u0122\u0002\u0a8b\u0a8a\u0003\u0002\u0002\u0002\u0a8b\u0a8c\u0003\u0002",
    "\u0002\u0002\u0a8c\u0a8d\u0003\u0002\u0002\u0002\u0a8d\u0a8f\u0005\u022e",
    "\u0118\u0002\u0a8e\u0a90\t#\u0002\u0002\u0a8f\u0a8e\u0003\u0002\u0002",
    "\u0002\u0a8f\u0a90\u0003\u0002\u0002\u0002\u0a90\u0097\u0003\u0002\u0002",
    "\u0002\u0a91\u0a92\u00071\u0002\u0002\u0a92\u0a93\u0007\u0230\u0002",
    "\u0002\u0a93\u0a99\u0005\u020c\u0107\u0002\u0a94\u0a96\u0007\u0158\u0002",
    "\u0002\u0a95\u0a97\u0007\u03f7\u0002\u0002\u0a96\u0a95\u0003\u0002\u0002",
    "\u0002\u0a96\u0a97\u0003\u0002\u0002\u0002\u0a97\u0a98\u0003\u0002\u0002",
    "\u0002\u0a98\u0a9a\u0005\u0202\u0102\u0002\u0a99\u0a94\u0003\u0002\u0002",
    "\u0002\u0a99\u0a9a\u0003\u0002\u0002\u0002\u0a9a\u0099\u0003\u0002\u0002",
    "\u0002\u0a9b\u0a9c\u00071\u0002\u0002\u0a9c\u0a9e\u0007\u00a1\u0002",
    "\u0002\u0a9d\u0a9f\u0005\u0242\u0122\u0002\u0a9e\u0a9d\u0003\u0002\u0002",
    "\u0002\u0a9e\u0a9f\u0003\u0002\u0002\u0002\u0a9f\u0aa0\u0003\u0002\u0002",
    "\u0002\u0aa0\u0aa1\u0005\u01f2\u00fa\u0002\u0aa1\u009b\u0003\u0002\u0002",
    "\u0002\u0aa2\u0aa3\u00071\u0002\u0002\u0aa3\u0aa5\u0007\u0246\u0002",
    "\u0002\u0aa4\u0aa6\u0005\u0242\u0122\u0002\u0aa5\u0aa4\u0003\u0002\u0002",
    "\u0002\u0aa5\u0aa6\u0003\u0002\u0002\u0002\u0aa6\u0aa7\u0003\u0002\u0002",
    "\u0002\u0aa7\u0aac\u0005\u01f2\u00fa\u0002\u0aa8\u0aa9\u0007\u0402\u0002",
    "\u0002\u0aa9\u0aab\u0005\u01f2\u00fa\u0002\u0aaa\u0aa8\u0003\u0002\u0002",
    "\u0002\u0aab\u0aae\u0003\u0002\u0002\u0002\u0aac\u0aaa\u0003\u0002\u0002",
    "\u0002\u0aac\u0aad\u0003\u0002\u0002\u0002\u0aad\u0ab0\u0003\u0002\u0002",
    "\u0002\u0aae\u0aac\u0003\u0002\u0002\u0002\u0aaf\u0ab1\t#\u0002\u0002",
    "\u0ab0\u0aaf\u0003\u0002\u0002\u0002\u0ab0\u0ab1\u0003\u0002\u0002\u0002",
    "\u0ab1\u009d\u0003\u0002\u0002\u0002\u0ab2\u0ab3\u0007\u007f\u0002\u0002",
    "\u0ab3\u0ab4\u0007\u009c\u0002\u0002\u0ab4\u0ab9\u0005\u00a0Q\u0002",
    "\u0ab5\u0ab6\u0007\u0402\u0002\u0002\u0ab6\u0ab8\u0005\u00a0Q\u0002",
    "\u0ab7\u0ab5\u0003\u0002\u0002\u0002\u0ab8\u0abb\u0003\u0002\u0002\u0002",
    "\u0ab9\u0ab7\u0003\u0002\u0002\u0002\u0ab9\u0aba\u0003\u0002\u0002\u0002",
    "\u0aba\u009f\u0003\u0002\u0002\u0002\u0abb\u0ab9\u0003\u0002\u0002\u0002",
    "\u0abc\u0abd\u0005\u01f4\u00fb\u0002\u0abd\u0abe\u0007\u009f\u0002\u0002",
    "\u0abe\u0abf\u0005\u01f4\u00fb\u0002\u0abf\u00a1\u0003\u0002\u0002\u0002",
    "\u0ac0\u0ac2\u0007\u0238\u0002\u0002\u0ac1\u0ac3\u0007\u009c\u0002\u0002",
    "\u0ac2\u0ac1\u0003\u0002\u0002\u0002\u0ac2\u0ac3\u0003\u0002\u0002\u0002",
    "\u0ac3\u0ac4\u0003\u0002\u0002\u0002\u0ac4\u0ac5\u0005\u01f4\u00fb\u0002",
    "\u0ac5\u00a3\u0003\u0002\u0002\u0002\u0ac6\u0ac7\u0007\u0013\u0002\u0002",
    "\u0ac7\u0ace\u0005\u01f2\u00fa\u0002\u0ac8\u0acb\u0007\u0400\u0002\u0002",
    "\u0ac9\u0acc\u0005\u0236\u011c\u0002\u0aca\u0acc\u0005\u0232\u011a\u0002",
    "\u0acb\u0ac9\u0003\u0002\u0002\u0002\u0acb\u0aca\u0003\u0002\u0002\u0002",
    "\u0acb\u0acc\u0003\u0002\u0002\u0002\u0acc\u0acd\u0003\u0002\u0002\u0002",
    "\u0acd\u0acf\u0007\u0401\u0002\u0002\u0ace\u0ac8\u0003\u0002\u0002\u0002",
    "\u0ace\u0acf\u0003\u0002\u0002\u0002\u0acf\u00a5\u0003\u0002\u0002\u0002",
    "\u0ad0\u0ad3\u0005\u00c0a\u0002\u0ad1\u0ad3\u0005\u00c2b\u0002\u0ad2",
    "\u0ad0\u0003\u0002\u0002\u0002\u0ad2\u0ad1\u0003\u0002\u0002\u0002\u0ad3",
    "\u00a7\u0003\u0002\u0002\u0002\u0ad4\u0ad5\u0007\u0150\u0002\u0002\u0ad5",
    "\u0ad6\u0005\u0232\u011a\u0002\u0ad6\u00a9\u0003\u0002\u0002\u0002\u0ad7",
    "\u0adc\u0005\u00c4c\u0002\u0ad8\u0adc\u0005\u00c6d\u0002\u0ad9\u0adc",
    "\u0005\u00c8e\u0002\u0ada\u0adc\u0005\u00caf\u0002\u0adb\u0ad7\u0003",
    "\u0002\u0002\u0002\u0adb\u0ad8\u0003\u0002\u0002\u0002\u0adb\u0ad9\u0003",
    "\u0002\u0002\u0002\u0adb\u0ada\u0003\u0002\u0002\u0002\u0adc\u00ab\u0003",
    "\u0002\u0002\u0002\u0add\u0adf\u0007N\u0002\u0002\u0ade\u0ae0\t$\u0002",
    "\u0002\u0adf\u0ade\u0003\u0002\u0002\u0002\u0adf\u0ae0\u0003\u0002\u0002",
    "\u0002\u0ae0\u0ae2\u0003\u0002\u0002\u0002\u0ae1\u0ae3\u0007H\u0002",
    "\u0002\u0ae2\u0ae1\u0003\u0002\u0002\u0002\u0ae2\u0ae3\u0003\u0002\u0002",
    "\u0002\u0ae3\u0ae5\u0003\u0002\u0002\u0002\u0ae4\u0ae6\u0007P\u0002",
    "\u0002\u0ae5\u0ae4\u0003\u0002\u0002\u0002\u0ae5\u0ae6\u0003\u0002\u0002",
    "\u0002\u0ae6\u0ae7\u0003\u0002\u0002\u0002\u0ae7\u0aee\u0005\u01f4\u00fb",
    "\u0002\u0ae8\u0ae9\u0007u\u0002\u0002\u0ae9\u0aeb\u0007\u0400\u0002",
    "\u0002\u0aea\u0aec\u0005\u022c\u0117\u0002\u0aeb\u0aea\u0003\u0002\u0002",
    "\u0002\u0aeb\u0aec\u0003\u0002\u0002\u0002\u0aec\u0aed\u0003\u0002\u0002",
    "\u0002\u0aed\u0aef\u0007\u0401\u0002\u0002\u0aee\u0ae8\u0003\u0002\u0002",
    "\u0002\u0aee\u0aef\u0003\u0002\u0002\u0002\u0aef\u0b00\u0003\u0002\u0002",
    "\u0002\u0af0\u0af1\u0007\u0400\u0002\u0002\u0af1\u0af2\u0005\u022c\u0117",
    "\u0002\u0af2\u0af3\u0007\u0401\u0002\u0002\u0af3\u0af5\u0003\u0002\u0002",
    "\u0002\u0af4\u0af0\u0003\u0002\u0002\u0002\u0af4\u0af5\u0003\u0002\u0002",
    "\u0002\u0af5\u0af6\u0003\u0002\u0002\u0002\u0af6\u0b01\u0005\u00b8]",
    "\u0002\u0af7\u0af8\u0007\u008c\u0002\u0002\u0af8\u0afd\u0005\u00ba^",
    "\u0002\u0af9\u0afa\u0007\u0402\u0002\u0002\u0afa\u0afc\u0005\u00ba^",
    "\u0002\u0afb\u0af9\u0003\u0002\u0002\u0002\u0afc\u0aff\u0003\u0002\u0002",
    "\u0002\u0afd\u0afb\u0003\u0002\u0002\u0002\u0afd\u0afe\u0003\u0002\u0002",
    "\u0002\u0afe\u0b01\u0003\u0002\u0002\u0002\u0aff\u0afd\u0003\u0002\u0002",
    "\u0002\u0b00\u0af4\u0003\u0002\u0002\u0002\u0b00\u0af7\u0003\u0002\u0002",
    "\u0002\u0b01\u0b0e\u0003\u0002\u0002\u0002\u0b02\u0b03\u0007l\u0002",
    "\u0002\u0b03\u0b04\u0007\u0152\u0002\u0002\u0b04\u0b05\u0007T\u0002",
    "\u0002\u0b05\u0b06\u0007\u00a8\u0002\u0002\u0b06\u0b0b\u0005\u00ba^",
    "\u0002\u0b07\u0b08\u0007\u0402\u0002\u0002\u0b08\u0b0a\u0005\u00ba^",
    "\u0002\u0b09\u0b07\u0003\u0002\u0002\u0002\u0b0a\u0b0d\u0003\u0002\u0002",
    "\u0002\u0b0b\u0b09\u0003\u0002\u0002\u0002\u0b0b\u0b0c\u0003\u0002\u0002",
    "\u0002\u0b0c\u0b0f\u0003\u0002\u0002\u0002\u0b0d\u0b0b\u0003\u0002\u0002",
    "\u0002\u0b0e\u0b02\u0003\u0002\u0002\u0002\u0b0e\u0b0f\u0003\u0002\u0002",
    "\u0002\u0b0f\u00ad\u0003\u0002\u0002\u0002\u0b10\u0b11\u0007^\u0002",
    "\u0002\u0b11\u0b13\u0007\u0145\u0002\u0002\u0b12\u0b14\t%\u0002\u0002",
    "\u0b13\u0b12\u0003\u0002\u0002\u0002\u0b13\u0b14\u0003\u0002\u0002\u0002",
    "\u0b14\u0b16\u0003\u0002\u0002\u0002\u0b15\u0b17\u0007\u0194\u0002\u0002",
    "\u0b16\u0b15\u0003\u0002\u0002\u0002\u0b16\u0b17\u0003\u0002\u0002\u0002",
    "\u0b17\u0b18\u0003\u0002\u0002\u0002\u0b18\u0b19\u0007K\u0002\u0002",
    "\u0b19\u0b1b\u0007\u040f\u0002\u0002\u0b1a\u0b1c\t\b\u0002\u0002\u0b1b",
    "\u0b1a\u0003\u0002\u0002\u0002\u0b1b\u0b1c\u0003\u0002\u0002\u0002\u0b1c",
    "\u0b1d\u0003\u0002\u0002\u0002\u0b1d\u0b1e\u0007P\u0002\u0002\u0b1e",
    "\u0b1f\u0007\u009c\u0002\u0002\u0b1f\u0b25\u0005\u01f4\u00fb\u0002\u0b20",
    "\u0b21\u0007u\u0002\u0002\u0b21\u0b22\u0007\u0400\u0002\u0002\u0b22",
    "\u0b23\u0005\u022c\u0117\u0002\u0b23\u0b24\u0007\u0401\u0002\u0002\u0b24",
    "\u0b26\u0003\u0002\u0002\u0002\u0b25\u0b20\u0003\u0002\u0002\u0002\u0b25",
    "\u0b26\u0003\u0002\u0002\u0002\u0b26\u0b2a\u0003\u0002\u0002\u0002\u0b27",
    "\u0b28\u0007\u0018\u0002\u0002\u0b28\u0b29\u0007\u008c\u0002\u0002\u0b29",
    "\u0b2b\u0005\u01fe\u0100\u0002\u0b2a\u0b27\u0003\u0002\u0002\u0002\u0b2a",
    "\u0b2b\u0003\u0002\u0002\u0002\u0b2b\u0b32\u0003\u0002\u0002\u0002\u0b2c",
    "\u0b2e\t&\u0002\u0002\u0b2d\u0b2f\u0005\u00f4{\u0002\u0b2e\u0b2d\u0003",
    "\u0002\u0002\u0002\u0b2f\u0b30\u0003\u0002\u0002\u0002\u0b30\u0b2e\u0003",
    "\u0002\u0002\u0002\u0b30\u0b31\u0003\u0002\u0002\u0002\u0b31\u0b33\u0003",
    "\u0002\u0002\u0002\u0b32\u0b2c\u0003\u0002\u0002\u0002\u0b32\u0b33\u0003",
    "\u0002\u0002\u0002\u0b33\u0b3a\u0003\u0002\u0002\u0002\u0b34\u0b36\u0007",
    "]\u0002\u0002\u0b35\u0b37\u0005\u00f6|\u0002\u0b36\u0b35\u0003\u0002",
    "\u0002\u0002\u0b37\u0b38\u0003\u0002\u0002\u0002\u0b38\u0b36\u0003\u0002",
    "\u0002\u0002\u0b38\u0b39\u0003\u0002\u0002\u0002\u0b39\u0b3b\u0003\u0002",
    "\u0002\u0002\u0b3a\u0b34\u0003\u0002\u0002\u0002\u0b3a\u0b3b\u0003\u0002",
    "\u0002\u0002\u0b3b\u0b40\u0003\u0002\u0002\u0002\u0b3c\u0b3d\u0007H",
    "\u0002\u0002\u0b3d\u0b3e\u0005\u0212\u010a\u0002\u0b3e\u0b3f\t\'\u0002",
    "\u0002\u0b3f\u0b41\u0003\u0002\u0002\u0002\u0b40\u0b3c\u0003\u0002\u0002",
    "\u0002\u0b40\u0b41\u0003\u0002\u0002\u0002\u0b41\u0b4d\u0003\u0002\u0002",
    "\u0002\u0b42\u0b43\u0007\u0400\u0002\u0002\u0b43\u0b48\u0005\u00bc_",
    "\u0002\u0b44\u0b45\u0007\u0402\u0002\u0002\u0b45\u0b47\u0005\u00bc_",
    "\u0002\u0b46\u0b44\u0003\u0002\u0002\u0002\u0b47\u0b4a\u0003\u0002\u0002",
    "\u0002\u0b48\u0b46\u0003\u0002\u0002\u0002\u0b48\u0b49\u0003\u0002\u0002",
    "\u0002\u0b49\u0b4b\u0003\u0002\u0002\u0002\u0b4a\u0b48\u0003\u0002\u0002",
    "\u0002\u0b4b\u0b4c\u0007\u0401\u0002\u0002\u0b4c\u0b4e\u0003\u0002\u0002",
    "\u0002\u0b4d\u0b42\u0003\u0002\u0002\u0002\u0b4d\u0b4e\u0003\u0002\u0002",
    "\u0002\u0b4e\u0b58\u0003\u0002\u0002\u0002\u0b4f\u0b50\u0007\u008c\u0002",
    "\u0002\u0b50\u0b55\u0005\u00ba^\u0002\u0b51\u0b52\u0007\u0402\u0002",
    "\u0002\u0b52\u0b54\u0005\u00ba^\u0002\u0b53\u0b51\u0003\u0002\u0002",
    "\u0002\u0b54\u0b57\u0003\u0002\u0002\u0002\u0b55\u0b53\u0003\u0002\u0002",
    "\u0002\u0b55\u0b56\u0003\u0002\u0002\u0002\u0b56\u0b59\u0003\u0002\u0002",
    "\u0002\u0b57\u0b55\u0003\u0002\u0002\u0002\u0b58\u0b4f\u0003\u0002\u0002",
    "\u0002\u0b58\u0b59\u0003\u0002\u0002\u0002\u0b59\u00af\u0003\u0002\u0002",
    "\u0002\u0b5a\u0b5b\u0007^\u0002\u0002\u0b5b\u0b5d\u0007\u0250\u0002",
    "\u0002\u0b5c\u0b5e\t%\u0002\u0002\u0b5d\u0b5c\u0003\u0002\u0002\u0002",
    "\u0b5d\u0b5e\u0003\u0002\u0002\u0002\u0b5e\u0b60\u0003\u0002\u0002\u0002",
    "\u0b5f\u0b61\u0007\u0194\u0002\u0002\u0b60\u0b5f\u0003\u0002\u0002\u0002",
    "\u0b60\u0b61\u0003\u0002\u0002\u0002\u0b61\u0b62\u0003\u0002\u0002\u0002",
    "\u0b62\u0b63\u0007K\u0002\u0002\u0b63\u0b65\u0007\u040f\u0002\u0002",
    "\u0b64\u0b66\t\b\u0002\u0002\u0b65\u0b64\u0003\u0002\u0002\u0002\u0b65",
    "\u0b66\u0003\u0002\u0002\u0002\u0b66\u0b67\u0003\u0002\u0002\u0002\u0b67",
    "\u0b68\u0007P\u0002\u0002\u0b68\u0b69\u0007\u009c\u0002\u0002\u0b69",
    "\u0b6d\u0005\u01f4\u00fb\u0002\u0b6a\u0b6b\u0007\u0018\u0002\u0002\u0b6b",
    "\u0b6c\u0007\u008c\u0002\u0002\u0b6c\u0b6e\u0005\u01fe\u0100\u0002\u0b6d",
    "\u0b6a\u0003\u0002\u0002\u0002\u0b6d\u0b6e\u0003\u0002\u0002\u0002\u0b6e",
    "\u0b75\u0003\u0002\u0002\u0002\u0b6f\u0b70\u0007\u0204\u0002\u0002\u0b70",
    "\u0b71\u0007\u017c\u0002\u0002\u0b71\u0b72\u0007\u0012\u0002\u0002\u0b72",
    "\u0b73\u0007\u03f9\u0002\u0002\u0b73\u0b74\u0007\u040f\u0002\u0002\u0b74",
    "\u0b76\u0007\u03f8\u0002\u0002\u0b75\u0b6f\u0003\u0002\u0002\u0002\u0b75",
    "\u0b76\u0003\u0002\u0002\u0002\u0b76\u0b7b\u0003\u0002\u0002\u0002\u0b77",
    "\u0b78\u0007H\u0002\u0002\u0b78\u0b79\u0005\u0212\u010a\u0002\u0b79",
    "\u0b7a\t\'\u0002\u0002\u0b7a\u0b7c\u0003\u0002\u0002\u0002\u0b7b\u0b77",
    "\u0003\u0002\u0002\u0002\u0b7b\u0b7c\u0003\u0002\u0002\u0002\u0b7c\u0b88",
    "\u0003\u0002\u0002\u0002\u0b7d\u0b7e\u0007\u0400\u0002\u0002\u0b7e\u0b83",
    "\u0005\u00bc_\u0002\u0b7f\u0b80\u0007\u0402\u0002\u0002\u0b80\u0b82",
    "\u0005\u00bc_\u0002\u0b81\u0b7f\u0003\u0002\u0002\u0002\u0b82\u0b85",
    "\u0003\u0002\u0002\u0002\u0b83\u0b81\u0003\u0002\u0002\u0002\u0b83\u0b84",
    "\u0003\u0002\u0002\u0002\u0b84\u0b86\u0003\u0002\u0002\u0002\u0b85\u0b83",
    "\u0003\u0002\u0002\u0002\u0b86\u0b87\u0007\u0401\u0002\u0002\u0b87\u0b89",
    "\u0003\u0002\u0002\u0002\u0b88\u0b7d\u0003\u0002\u0002\u0002\u0b88\u0b89",
    "\u0003\u0002\u0002\u0002\u0b89\u0b93\u0003\u0002\u0002\u0002\u0b8a\u0b8b",
    "\u0007\u008c\u0002\u0002\u0b8b\u0b90\u0005\u00ba^\u0002\u0b8c\u0b8d",
    "\u0007\u0402\u0002\u0002\u0b8d\u0b8f\u0005\u00ba^\u0002\u0b8e\u0b8c",
    "\u0003\u0002\u0002\u0002\u0b8f\u0b92\u0003\u0002\u0002\u0002\u0b90\u0b8e",
    "\u0003\u0002\u0002\u0002\u0b90\u0b91\u0003\u0002\u0002\u0002\u0b91\u0b94",
    "\u0003\u0002\u0002\u0002\u0b92\u0b90\u0003\u0002\u0002\u0002\u0b93\u0b8a",
    "\u0003\u0002\u0002\u0002\u0b93\u0b94\u0003\u0002\u0002\u0002\u0b94\u00b1",
    "\u0003\u0002\u0002\u0002\u0b95\u0b97\u0007\u0081\u0002\u0002\u0b96\u0b98",
    "\t(\u0002\u0002\u0b97\u0b96\u0003\u0002\u0002\u0002\u0b97\u0b98\u0003",
    "\u0002\u0002\u0002\u0b98\u0b9a\u0003\u0002\u0002\u0002\u0b99\u0b9b\u0007",
    "P\u0002\u0002\u0b9a\u0b99\u0003\u0002\u0002\u0002\u0b9a\u0b9b\u0003",
    "\u0002\u0002\u0002\u0b9b\u0b9c\u0003\u0002\u0002\u0002\u0b9c\u0ba2\u0005",
    "\u01f4\u00fb\u0002\u0b9d\u0b9e\u0007u\u0002\u0002\u0b9e\u0b9f\u0007",
    "\u0400\u0002\u0002\u0b9f\u0ba0\u0005\u022c\u0117\u0002\u0ba0\u0ba1\u0007",
    "\u0401\u0002\u0002\u0ba1\u0ba3\u0003\u0002\u0002\u0002\u0ba2\u0b9d\u0003",
    "\u0002\u0002\u0002\u0ba2\u0ba3\u0003\u0002\u0002\u0002\u0ba3\u0bb4\u0003",
    "\u0002\u0002\u0002\u0ba4\u0ba5\u0007\u0400\u0002\u0002\u0ba5\u0ba6\u0005",
    "\u022c\u0117\u0002\u0ba6\u0ba7\u0007\u0401\u0002\u0002\u0ba7\u0ba9\u0003",
    "\u0002\u0002\u0002\u0ba8\u0ba4\u0003\u0002\u0002\u0002\u0ba8\u0ba9\u0003",
    "\u0002\u0002\u0002\u0ba9\u0baa\u0003\u0002\u0002\u0002\u0baa\u0bb5\u0005",
    "\u00b8]\u0002\u0bab\u0bac\u0007\u008c\u0002\u0002\u0bac\u0bb1\u0005",
    "\u00ba^\u0002\u0bad\u0bae\u0007\u0402\u0002\u0002\u0bae\u0bb0\u0005",
    "\u00ba^\u0002\u0baf\u0bad\u0003\u0002\u0002\u0002\u0bb0\u0bb3\u0003",
    "\u0002\u0002\u0002\u0bb1\u0baf\u0003\u0002\u0002\u0002\u0bb1\u0bb2\u0003",
    "\u0002\u0002\u0002\u0bb2\u0bb5\u0003\u0002\u0002\u0002\u0bb3\u0bb1\u0003",
    "\u0002\u0002\u0002\u0bb4\u0ba8\u0003\u0002\u0002\u0002\u0bb4\u0bab\u0003",
    "\u0002\u0002\u0002\u0bb5\u00b3\u0003\u0002\u0002\u0002\u0bb6\u0bb8\u0005",
    "\u00e4s\u0002\u0bb7\u0bb9\u0005\u00be`\u0002\u0bb8\u0bb7\u0003\u0002",
    "\u0002\u0002\u0bb8\u0bb9\u0003\u0002\u0002\u0002\u0bb9\u0bee\u0003\u0002",
    "\u0002\u0002\u0bba\u0bbc\u0005\u00e0q\u0002\u0bbb\u0bbd\u0005\u00be",
    "`\u0002\u0bbc\u0bbb\u0003\u0002\u0002\u0002\u0bbc\u0bbd\u0003\u0002",
    "\u0002\u0002\u0bbd\u0bee\u0003\u0002\u0002\u0002\u0bbe\u0bc0\u0005\u00e6",
    "t\u0002\u0bbf\u0bc1\u0005\u00eav\u0002\u0bc0\u0bbf\u0003\u0002\u0002",
    "\u0002\u0bc1\u0bc2\u0003\u0002\u0002\u0002\u0bc2\u0bc0\u0003\u0002\u0002",
    "\u0002\u0bc2\u0bc3\u0003\u0002\u0002\u0002\u0bc3\u0bcc\u0003\u0002\u0002",
    "\u0002\u0bc4\u0bc6\u0007\u00a4\u0002\u0002\u0bc5\u0bc7\t)\u0002\u0002",
    "\u0bc6\u0bc5\u0003\u0002\u0002\u0002\u0bc6\u0bc7\u0003\u0002\u0002\u0002",
    "\u0bc7\u0bca\u0003\u0002\u0002\u0002\u0bc8\u0bcb\u0005\u00e4s\u0002",
    "\u0bc9\u0bcb\u0005\u00e0q\u0002\u0bca\u0bc8\u0003\u0002\u0002\u0002",
    "\u0bca\u0bc9\u0003\u0002\u0002\u0002\u0bcb\u0bcd\u0003\u0002\u0002\u0002",
    "\u0bcc\u0bc4\u0003\u0002\u0002\u0002\u0bcc\u0bcd\u0003\u0002\u0002\u0002",
    "\u0bcd\u0bcf\u0003\u0002\u0002\u0002\u0bce\u0bd0\u0005\u00d0i\u0002",
    "\u0bcf\u0bce\u0003\u0002\u0002\u0002\u0bcf\u0bd0\u0003\u0002\u0002\u0002",
    "\u0bd0\u0bd2\u0003\u0002\u0002\u0002\u0bd1\u0bd3\u0005\u00fc\u007f\u0002",
    "\u0bd2\u0bd1\u0003\u0002\u0002\u0002\u0bd2\u0bd3\u0003\u0002\u0002\u0002",
    "\u0bd3\u0bd5\u0003\u0002\u0002\u0002\u0bd4\u0bd6\u0005\u00be`\u0002",
    "\u0bd5\u0bd4\u0003\u0002\u0002\u0002\u0bd5\u0bd6\u0003\u0002\u0002\u0002",
    "\u0bd6\u0bee\u0003\u0002\u0002\u0002\u0bd7\u0bd9\u0005\u00e2r\u0002",
    "\u0bd8\u0bda\u0005\u00e8u\u0002\u0bd9\u0bd8\u0003\u0002\u0002\u0002",
    "\u0bda\u0bdb\u0003\u0002\u0002\u0002\u0bdb\u0bd9\u0003\u0002\u0002\u0002",
    "\u0bdb\u0bdc\u0003\u0002\u0002\u0002\u0bdc\u0be2\u0003\u0002\u0002\u0002",
    "\u0bdd\u0bdf\u0007\u00a4\u0002\u0002\u0bde\u0be0\t)\u0002\u0002\u0bdf",
    "\u0bde\u0003\u0002\u0002\u0002\u0bdf\u0be0\u0003\u0002\u0002\u0002\u0be0",
    "\u0be1\u0003\u0002\u0002\u0002\u0be1\u0be3\u0005\u00e0q\u0002\u0be2",
    "\u0bdd\u0003\u0002\u0002\u0002\u0be2\u0be3\u0003\u0002\u0002\u0002\u0be3",
    "\u0be5\u0003\u0002\u0002\u0002\u0be4\u0be6\u0005\u00d0i\u0002\u0be5",
    "\u0be4\u0003\u0002\u0002\u0002\u0be5\u0be6\u0003\u0002\u0002\u0002\u0be6",
    "\u0be8\u0003\u0002\u0002\u0002\u0be7\u0be9\u0005\u00fc\u007f\u0002\u0be8",
    "\u0be7\u0003\u0002\u0002\u0002\u0be8\u0be9\u0003\u0002\u0002\u0002\u0be9",
    "\u0beb\u0003\u0002\u0002\u0002\u0bea\u0bec\u0005\u00be`\u0002\u0beb",
    "\u0bea\u0003\u0002\u0002\u0002\u0beb\u0bec\u0003\u0002\u0002\u0002\u0bec",
    "\u0bee\u0003\u0002\u0002\u0002\u0bed\u0bb6\u0003\u0002\u0002\u0002\u0bed",
    "\u0bba\u0003\u0002\u0002\u0002\u0bed\u0bbe\u0003\u0002\u0002\u0002\u0bed",
    "\u0bd7\u0003\u0002\u0002\u0002\u0bee\u00b5\u0003\u0002\u0002\u0002\u0bef",
    "\u0bf2\u0005\u00ccg\u0002\u0bf0\u0bf2\u0005\u00ceh\u0002\u0bf1\u0bef",
    "\u0003\u0002\u0002\u0002\u0bf1\u0bf0\u0003\u0002\u0002\u0002\u0bf2\u00b7",
    "\u0003\u0002\u0002\u0002\u0bf3\u0c06\u0005\u00b4[\u0002\u0bf4\u0bf5",
    "\t*\u0002\u0002\u0bf5\u0bf7\u0007\u0400\u0002\u0002\u0bf6\u0bf8\u0005",
    "\u0234\u011b\u0002\u0bf7\u0bf6\u0003\u0002\u0002\u0002\u0bf7\u0bf8\u0003",
    "\u0002\u0002\u0002\u0bf8\u0bf9\u0003\u0002\u0002\u0002\u0bf9\u0c02\u0007",
    "\u0401\u0002\u0002\u0bfa\u0bfb\u0007\u0402\u0002\u0002\u0bfb\u0bfd\u0007",
    "\u0400\u0002\u0002\u0bfc\u0bfe\u0005\u0234\u011b\u0002\u0bfd\u0bfc\u0003",
    "\u0002\u0002\u0002\u0bfd\u0bfe\u0003\u0002\u0002\u0002\u0bfe\u0bff\u0003",
    "\u0002\u0002\u0002\u0bff\u0c01\u0007\u0401\u0002\u0002\u0c00\u0bfa\u0003",
    "\u0002\u0002\u0002\u0c01\u0c04\u0003\u0002\u0002\u0002\u0c02\u0c00\u0003",
    "\u0002\u0002\u0002\u0c02\u0c03\u0003\u0002\u0002\u0002\u0c03\u0c06\u0003",
    "\u0002\u0002\u0002\u0c04\u0c02\u0003\u0002\u0002\u0002\u0c05\u0bf3\u0003",
    "\u0002\u0002\u0002\u0c05\u0bf4\u0003\u0002\u0002\u0002\u0c06\u00b9\u0003",
    "\u0002\u0002\u0002\u0c07\u0c08\u0005\u01f6\u00fc\u0002\u0c08\u0c0b\u0007",
    "\u03f7\u0002\u0002\u0c09\u0c0c\u0005\u025a\u012e\u0002\u0c0a\u0c0c\u0007",
    "(\u0002\u0002\u0c0b\u0c09\u0003\u0002\u0002\u0002\u0c0b\u0c0a\u0003",
    "\u0002\u0002\u0002\u0c0c\u00bb\u0003\u0002\u0002\u0002\u0c0d\u0c10\u0005",
    "\u020c\u0107\u0002\u0c0e\u0c10\u0007\u041b\u0002\u0002\u0c0f\u0c0d\u0003",
    "\u0002\u0002\u0002\u0c0f\u0c0e\u0003\u0002\u0002\u0002\u0c10\u00bd\u0003",
    "\u0002\u0002\u0002\u0c11\u0c12\u0007<\u0002\u0002\u0c12\u0c18\u0007",
    "\u00a8\u0002\u0002\u0c13\u0c14\u0007_\u0002\u0002\u0c14\u0c15\u0007",
    "I\u0002\u0002\u0c15\u0c16\u0007\u020b\u0002\u0002\u0c16\u0c18\u0007",
    "\u01b9\u0002\u0002\u0c17\u0c11\u0003\u0002\u0002\u0002\u0c17\u0c13\u0003",
    "\u0002\u0002\u0002\u0c18\u00bf\u0003\u0002\u0002\u0002\u0c19\u0c1b\u0007",
    "*\u0002\u0002\u0c1a\u0c1c\u0007a\u0002\u0002\u0c1b\u0c1a\u0003\u0002",
    "\u0002\u0002\u0c1b\u0c1c\u0003\u0002\u0002\u0002\u0c1c\u0c1e\u0003\u0002",
    "\u0002\u0002\u0c1d\u0c1f\u0007\u01e7\u0002\u0002\u0c1e\u0c1d\u0003\u0002",
    "\u0002\u0002\u0c1e\u0c1f\u0003\u0002\u0002\u0002\u0c1f\u0c21\u0003\u0002",
    "\u0002\u0002\u0c20\u0c22\u0007H\u0002\u0002\u0c21\u0c20\u0003\u0002",
    "\u0002\u0002\u0c21\u0c22\u0003\u0002\u0002\u0002\u0c22\u0c23\u0003\u0002",
    "\u0002\u0002\u0c23\u0c24\u0007?\u0002\u0002\u0c24\u0c2a\u0005\u01f4",
    "\u00fb\u0002\u0c25\u0c26\u0007u\u0002\u0002\u0c26\u0c27\u0007\u0400",
    "\u0002\u0002\u0c27\u0c28\u0005\u022c\u0117\u0002\u0c28\u0c29\u0007\u0401",
    "\u0002\u0002\u0c29\u0c2b\u0003\u0002\u0002\u0002\u0c2a\u0c25\u0003\u0002",
    "\u0002\u0002\u0c2a\u0c2b\u0003\u0002\u0002\u0002\u0c2b\u0c2e\u0003\u0002",
    "\u0002\u0002\u0c2c\u0c2d\u0007\u00ae\u0002\u0002\u0c2d\u0c2f\u0005\u025a",
    "\u012e\u0002\u0c2e\u0c2c\u0003\u0002\u0002\u0002\u0c2e\u0c2f\u0003\u0002",
    "\u0002\u0002\u0c2f\u0c31\u0003\u0002\u0002\u0002\u0c30\u0c32\u0005\u00d0",
    "i\u0002\u0c31\u0c30\u0003\u0002\u0002\u0002\u0c31\u0c32\u0003\u0002",
    "\u0002\u0002\u0c32\u0c35\u0003\u0002\u0002\u0002\u0c33\u0c34\u0007[",
    "\u0002\u0002\u0c34\u0c36\u0005\u00fe\u0080\u0002\u0c35\u0c33\u0003\u0002",
    "\u0002\u0002\u0c35\u0c36\u0003\u0002\u0002\u0002\u0c36\u00c1\u0003\u0002",
    "\u0002\u0002\u0c37\u0c39\u0007*\u0002\u0002\u0c38\u0c3a\u0007a\u0002",
    "\u0002\u0c39\u0c38\u0003\u0002\u0002\u0002\u0c39\u0c3a\u0003\u0002\u0002",
    "\u0002\u0c3a\u0c3c\u0003\u0002\u0002\u0002\u0c3b\u0c3d\u0007\u01e7\u0002",
    "\u0002\u0c3c\u0c3b\u0003\u0002\u0002\u0002\u0c3c\u0c3d\u0003\u0002\u0002",
    "\u0002\u0c3d\u0c3f\u0003\u0002\u0002\u0002\u0c3e\u0c40\u0007H\u0002",
    "\u0002\u0c3f\u0c3e\u0003\u0002\u0002\u0002\u0c3f\u0c40\u0003\u0002\u0002",
    "\u0002\u0c40\u0c68\u0003\u0002\u0002\u0002\u0c41\u0c44\u0005\u01f4\u00fb",
    "\u0002\u0c42\u0c43\u0007\u03ff\u0002\u0002\u0c43\u0c45\u0007\u03ef\u0002",
    "\u0002\u0c44\u0c42\u0003\u0002\u0002\u0002\u0c44\u0c45\u0003\u0002\u0002",
    "\u0002\u0c45\u0c4e\u0003\u0002\u0002\u0002\u0c46\u0c47\u0007\u0402\u0002",
    "\u0002\u0c47\u0c4a\u0005\u01f4\u00fb\u0002\u0c48\u0c49\u0007\u03ff\u0002",
    "\u0002\u0c49\u0c4b\u0007\u03ef\u0002\u0002\u0c4a\u0c48\u0003\u0002\u0002",
    "\u0002\u0c4a\u0c4b\u0003\u0002\u0002\u0002\u0c4b\u0c4d\u0003\u0002\u0002",
    "\u0002\u0c4c\u0c46\u0003\u0002\u0002\u0002\u0c4d\u0c50\u0003\u0002\u0002",
    "\u0002\u0c4e\u0c4c\u0003\u0002\u0002\u0002\u0c4e\u0c4f\u0003\u0002\u0002",
    "\u0002\u0c4f\u0c51\u0003\u0002\u0002\u0002\u0c50\u0c4e\u0003\u0002\u0002",
    "\u0002\u0c51\u0c52\u0007?\u0002\u0002\u0c52\u0c53\u0005\u00d4k\u0002",
    "\u0c53\u0c69\u0003\u0002\u0002\u0002\u0c54\u0c55\u0007?\u0002\u0002",
    "\u0c55\u0c58\u0005\u01f4\u00fb\u0002\u0c56\u0c57\u0007\u03ff\u0002\u0002",
    "\u0c57\u0c59\u0007\u03ef\u0002\u0002\u0c58\u0c56\u0003\u0002\u0002\u0002",
    "\u0c58\u0c59\u0003\u0002\u0002\u0002\u0c59\u0c62\u0003\u0002\u0002\u0002",
    "\u0c5a\u0c5b\u0007\u0402\u0002\u0002\u0c5b\u0c5e\u0005\u01f4\u00fb\u0002",
    "\u0c5c\u0c5d\u0007\u03ff\u0002\u0002\u0c5d\u0c5f\u0007\u03ef\u0002\u0002",
    "\u0c5e\u0c5c\u0003\u0002\u0002\u0002\u0c5e\u0c5f\u0003\u0002\u0002\u0002",
    "\u0c5f\u0c61\u0003\u0002\u0002\u0002\u0c60\u0c5a\u0003\u0002\u0002\u0002",
    "\u0c61\u0c64\u0003\u0002\u0002\u0002\u0c62\u0c60\u0003\u0002\u0002\u0002",
    "\u0c62\u0c63\u0003\u0002\u0002\u0002\u0c63\u0c65\u0003\u0002\u0002\u0002",
    "\u0c64\u0c62\u0003\u0002\u0002\u0002\u0c65\u0c66\u0007\u00ab\u0002\u0002",
    "\u0c66\u0c67\u0005\u00d4k\u0002\u0c67\u0c69\u0003\u0002\u0002\u0002",
    "\u0c68\u0c41\u0003\u0002\u0002\u0002\u0c68\u0c54\u0003\u0002\u0002\u0002",
    "\u0c69\u0c6c\u0003\u0002\u0002\u0002\u0c6a\u0c6b\u0007\u00ae\u0002\u0002",
    "\u0c6b\u0c6d\u0005\u025a\u012e\u0002\u0c6c\u0c6a\u0003\u0002\u0002\u0002",
    "\u0c6c\u0c6d\u0003\u0002\u0002\u0002\u0c6d\u00c3\u0003\u0002\u0002\u0002",
    "\u0c6e\u0c6f\u0007\u0177\u0002\u0002\u0c6f\u0c70\u0005\u01f4\u00fb\u0002",
    "\u0c70\u0c75\u0007\u01ce\u0002\u0002\u0c71\u0c73\u0007\r\u0002\u0002",
    "\u0c72\u0c71\u0003\u0002\u0002\u0002\u0c72\u0c73\u0003\u0002\u0002\u0002",
    "\u0c73\u0c74\u0003\u0002\u0002\u0002\u0c74\u0c76\u0005\u020c\u0107\u0002",
    "\u0c75\u0c72\u0003\u0002\u0002\u0002\u0c75\u0c76\u0003\u0002\u0002\u0002",
    "\u0c76\u00c5\u0003\u0002\u0002\u0002\u0c77\u0c78\u0007\u0177\u0002\u0002",
    "\u0c78\u0c79\u0005\u01f4\u00fb\u0002\u0c79\u0c7a\u0007z\u0002\u0002",
    "\u0c7a\u0c81\u0005\u020c\u0107\u0002\u0c7b\u0c7c\u0005\u0262\u0132\u0002",
    "\u0c7c\u0c7d\u0007\u0400\u0002\u0002\u0c7d\u0c7e\u0005\u0236\u011c\u0002",
    "\u0c7e\u0c7f\u0007\u0401\u0002\u0002\u0c7f\u0c82\u0003\u0002\u0002\u0002",
    "\u0c80\u0c82\t+\u0002\u0002\u0c81\u0c7b\u0003\u0002\u0002\u0002\u0c81",
    "\u0c80\u0003\u0002\u0002\u0002\u0c82\u0c85\u0003\u0002\u0002\u0002\u0c83",
    "\u0c84\u0007\u00ae\u0002\u0002\u0c84\u0c86\u0005\u025a\u012e\u0002\u0c85",
    "\u0c83\u0003\u0002\u0002\u0002\u0c85\u0c86\u0003\u0002\u0002\u0002\u0c86",
    "\u0c89\u0003\u0002\u0002\u0002\u0c87\u0c88\u0007[\u0002\u0002\u0c88",
    "\u0c8a\u0005\u00fe\u0080\u0002\u0c89\u0c87\u0003\u0002\u0002\u0002\u0c89",
    "\u0c8a\u0003\u0002\u0002\u0002\u0c8a\u00c7\u0003\u0002\u0002\u0002\u0c8b",
    "\u0c8c\u0007\u0177\u0002\u0002\u0c8c\u0c8d\u0005\u01f4\u00fb\u0002\u0c8d",
    "\u0c8e\u0007z\u0002\u0002\u0c8e\u0c91\t,\u0002\u0002\u0c8f\u0c90\u0007",
    "\u00ae\u0002\u0002\u0c90\u0c92\u0005\u025a\u012e\u0002\u0c91\u0c8f\u0003",
    "\u0002\u0002\u0002\u0c91\u0c92\u0003\u0002\u0002\u0002\u0c92\u0c95\u0003",
    "\u0002\u0002\u0002\u0c93\u0c94\u0007[\u0002\u0002\u0c94\u0c96\u0005",
    "\u00fe\u0080\u0002\u0c95\u0c93\u0003\u0002\u0002\u0002\u0c95\u0c96\u0003",
    "\u0002\u0002\u0002\u0c96\u00c9\u0003\u0002\u0002\u0002\u0c97\u0c98\u0007",
    "\u0177\u0002\u0002\u0c98\u0c99\u0005\u01f4\u00fb\u0002\u0c99\u0c9a\u0007",
    "\u012d\u0002\u0002\u0c9a\u00cb\u0003\u0002\u0002\u0002\u0c9b\u0c9d\u0007",
    "\u00a8\u0002\u0002\u0c9c\u0c9e\u0007a\u0002\u0002\u0c9d\u0c9c\u0003",
    "\u0002\u0002\u0002\u0c9d\u0c9e\u0003\u0002\u0002\u0002\u0c9e\u0ca0\u0003",
    "\u0002\u0002\u0002\u0c9f\u0ca1\u0007H\u0002\u0002\u0ca0\u0c9f\u0003",
    "\u0002\u0002\u0002\u0ca0\u0ca1\u0003\u0002\u0002\u0002\u0ca1\u0ca2\u0003",
    "\u0002\u0002\u0002\u0ca2\u0ca7\u0005\u01f4\u00fb\u0002\u0ca3\u0ca5\u0007",
    "\r\u0002\u0002\u0ca4\u0ca3\u0003\u0002\u0002\u0002\u0ca4\u0ca5\u0003",
    "\u0002\u0002\u0002\u0ca5\u0ca6\u0003\u0002\u0002\u0002\u0ca6\u0ca8\u0005",
    "\u020c\u0107\u0002\u0ca7\u0ca4\u0003\u0002\u0002\u0002\u0ca7\u0ca8\u0003",
    "\u0002\u0002\u0002\u0ca8\u0ca9\u0003\u0002\u0002\u0002\u0ca9\u0caa\u0007",
    "\u008c\u0002\u0002\u0caa\u0caf\u0005\u00ba^\u0002\u0cab\u0cac\u0007",
    "\u0402\u0002\u0002\u0cac\u0cae\u0005\u00ba^\u0002\u0cad\u0cab\u0003",
    "\u0002\u0002\u0002\u0cae\u0cb1\u0003\u0002\u0002\u0002\u0caf\u0cad\u0003",
    "\u0002\u0002\u0002\u0caf\u0cb0\u0003\u0002\u0002\u0002\u0cb0\u0cb4\u0003",
    "\u0002\u0002\u0002\u0cb1\u0caf\u0003\u0002\u0002\u0002\u0cb2\u0cb3\u0007",
    "\u00ae\u0002\u0002\u0cb3\u0cb5\u0005\u025a\u012e\u0002\u0cb4\u0cb2\u0003",
    "\u0002\u0002\u0002\u0cb4\u0cb5\u0003\u0002\u0002\u0002\u0cb5\u0cb7\u0003",
    "\u0002\u0002\u0002\u0cb6\u0cb8\u0005\u00d0i\u0002\u0cb7\u0cb6\u0003",
    "\u0002\u0002\u0002\u0cb7\u0cb8\u0003\u0002\u0002\u0002\u0cb8\u0cba\u0003",
    "\u0002\u0002\u0002\u0cb9\u0cbb\u0005\u00fc\u007f\u0002\u0cba\u0cb9\u0003",
    "\u0002\u0002\u0002\u0cba\u0cbb\u0003\u0002\u0002\u0002\u0cbb\u00cd\u0003",
    "\u0002\u0002\u0002\u0cbc\u0cbe\u0007\u00a8\u0002\u0002\u0cbd\u0cbf\u0007",
    "a\u0002\u0002\u0cbe\u0cbd\u0003\u0002\u0002\u0002\u0cbe\u0cbf\u0003",
    "\u0002\u0002\u0002\u0cbf\u0cc1\u0003\u0002\u0002\u0002\u0cc0\u0cc2\u0007",
    "H\u0002\u0002\u0cc1\u0cc0\u0003\u0002\u0002\u0002\u0cc1\u0cc2\u0003",
    "\u0002\u0002\u0002\u0cc2\u0cc3\u0003\u0002\u0002\u0002\u0cc3\u0cc4\u0005",
    "\u00d4k\u0002\u0cc4\u0cc5\u0007\u008c\u0002\u0002\u0cc5\u0cca\u0005",
    "\u00ba^\u0002\u0cc6\u0cc7\u0007\u0402\u0002\u0002\u0cc7\u0cc9\u0005",
    "\u00ba^\u0002\u0cc8\u0cc6\u0003\u0002\u0002\u0002\u0cc9\u0ccc\u0003",
    "\u0002\u0002\u0002\u0cca\u0cc8\u0003\u0002\u0002\u0002\u0cca\u0ccb\u0003",
    "\u0002\u0002\u0002\u0ccb\u0ccf\u0003\u0002\u0002\u0002\u0ccc\u0cca\u0003",
    "\u0002\u0002\u0002\u0ccd\u0cce\u0007\u00ae\u0002\u0002\u0cce\u0cd0\u0005",
    "\u025a\u012e\u0002\u0ccf\u0ccd\u0003\u0002\u0002\u0002\u0ccf\u0cd0\u0003",
    "\u0002\u0002\u0002\u0cd0\u00cf\u0003\u0002\u0002\u0002\u0cd1\u0cd2\u0007",
    "q\u0002\u0002\u0cd2\u0cd3\u0007\u0012\u0002\u0002\u0cd3\u0cd8\u0005",
    "\u00d2j\u0002\u0cd4\u0cd5\u0007\u0402\u0002\u0002\u0cd5\u0cd7\u0005",
    "\u00d2j\u0002\u0cd6\u0cd4\u0003\u0002\u0002\u0002\u0cd7\u0cda\u0003",
    "\u0002\u0002\u0002\u0cd8\u0cd6\u0003\u0002\u0002\u0002\u0cd8\u0cd9\u0003",
    "\u0002\u0002\u0002\u0cd9\u00d1\u0003\u0002\u0002\u0002\u0cda\u0cd8\u0003",
    "\u0002\u0002\u0002\u0cdb\u0cdd\u0005\u025a\u012e\u0002\u0cdc\u0cde\t",
    "-\u0002\u0002\u0cdd\u0cdc\u0003\u0002\u0002\u0002\u0cdd\u0cde\u0003",
    "\u0002\u0002\u0002\u0cde\u00d3\u0003\u0002\u0002\u0002\u0cdf\u0ce4\u0005",
    "\u00d6l\u0002\u0ce0\u0ce1\u0007\u0402\u0002\u0002\u0ce1\u0ce3\u0005",
    "\u00d6l\u0002\u0ce2\u0ce0\u0003\u0002\u0002\u0002\u0ce3\u0ce6\u0003",
    "\u0002\u0002\u0002\u0ce4\u0ce2\u0003\u0002\u0002\u0002\u0ce4\u0ce5\u0003",
    "\u0002\u0002\u0002\u0ce5\u00d5\u0003\u0002\u0002\u0002\u0ce6\u0ce4\u0003",
    "\u0002\u0002\u0002\u0ce7\u0ceb\u0005\u00d8m\u0002\u0ce8\u0cea\u0005",
    "\u00dep\u0002\u0ce9\u0ce8\u0003\u0002\u0002\u0002\u0cea\u0ced\u0003",
    "\u0002\u0002\u0002\u0ceb\u0ce9\u0003\u0002\u0002\u0002\u0ceb\u0cec\u0003",
    "\u0002\u0002\u0002\u0cec\u0cf9\u0003\u0002\u0002\u0002\u0ced\u0ceb\u0003",
    "\u0002\u0002\u0002\u0cee\u0cef\u0007\u0400\u0002\u0002\u0cef\u0cf3\u0005",
    "\u00d8m\u0002\u0cf0\u0cf2\u0005\u00dep\u0002\u0cf1\u0cf0\u0003\u0002",
    "\u0002\u0002\u0cf2\u0cf5\u0003\u0002\u0002\u0002\u0cf3\u0cf1\u0003\u0002",
    "\u0002\u0002\u0cf3\u0cf4\u0003\u0002\u0002\u0002\u0cf4\u0cf6\u0003\u0002",
    "\u0002\u0002\u0cf5\u0cf3\u0003\u0002\u0002\u0002\u0cf6\u0cf7\u0007\u0401",
    "\u0002\u0002\u0cf7\u0cf9\u0003\u0002\u0002\u0002\u0cf8\u0ce7\u0003\u0002",
    "\u0002\u0002\u0cf8\u0cee\u0003\u0002\u0002\u0002\u0cf9\u00d7\u0003\u0002",
    "\u0002\u0002\u0cfa\u0d00\u0005\u01f4\u00fb\u0002\u0cfb\u0cfc\u0007u",
    "\u0002\u0002\u0cfc\u0cfd\u0007\u0400\u0002\u0002\u0cfd\u0cfe\u0005\u022c",
    "\u0117\u0002\u0cfe\u0cff\u0007\u0401\u0002\u0002\u0cff\u0d01\u0003\u0002",
    "\u0002\u0002\u0d00\u0cfb\u0003\u0002\u0002\u0002\u0d00\u0d01\u0003\u0002",
    "\u0002\u0002\u0d01\u0d06\u0003\u0002\u0002\u0002\u0d02\u0d04\u0007\r",
    "\u0002\u0002\u0d03\u0d02\u0003\u0002\u0002\u0002\u0d03\u0d04\u0003\u0002",
    "\u0002\u0002\u0d04\u0d05\u0003\u0002\u0002\u0002\u0d05\u0d07\u0005\u020c",
    "\u0107\u0002\u0d06\u0d03\u0003\u0002\u0002\u0002\u0d06\u0d07\u0003\u0002",
    "\u0002\u0002\u0d07\u0d10\u0003\u0002\u0002\u0002\u0d08\u0d0d\u0005\u00da",
    "n\u0002\u0d09\u0d0a\u0007\u0402\u0002\u0002\u0d0a\u0d0c\u0005\u00da",
    "n\u0002\u0d0b\u0d09\u0003\u0002\u0002\u0002\u0d0c\u0d0f\u0003\u0002",
    "\u0002\u0002\u0d0d\u0d0b\u0003\u0002\u0002\u0002\u0d0d\u0d0e\u0003\u0002",
    "\u0002\u0002\u0d0e\u0d11\u0003\u0002\u0002\u0002\u0d0f\u0d0d\u0003\u0002",
    "\u0002\u0002\u0d10\u0d08\u0003\u0002\u0002\u0002\u0d10\u0d11\u0003\u0002",
    "\u0002\u0002\u0d11\u0d23\u0003\u0002\u0002\u0002\u0d12\u0d18\u0005\u00b4",
    "[\u0002\u0d13\u0d14\u0007\u0400\u0002\u0002\u0d14\u0d15\u0005\u00b4",
    "[\u0002\u0d15\u0d16\u0007\u0401\u0002\u0002\u0d16\u0d18\u0003\u0002",
    "\u0002\u0002\u0d17\u0d12\u0003\u0002\u0002\u0002\u0d17\u0d13\u0003\u0002",
    "\u0002\u0002\u0d18\u0d1a\u0003\u0002\u0002\u0002\u0d19\u0d1b\u0007\r",
    "\u0002\u0002\u0d1a\u0d19\u0003\u0002\u0002\u0002\u0d1a\u0d1b\u0003\u0002",
    "\u0002\u0002\u0d1b\u0d1c\u0003\u0002\u0002\u0002\u0d1c\u0d1d\u0005\u020c",
    "\u0107\u0002\u0d1d\u0d23\u0003\u0002\u0002\u0002\u0d1e\u0d1f\u0007\u0400",
    "\u0002\u0002\u0d1f\u0d20\u0005\u00d4k\u0002\u0d20\u0d21\u0007\u0401",
    "\u0002\u0002\u0d21\u0d23\u0003\u0002\u0002\u0002\u0d22\u0cfa\u0003\u0002",
    "\u0002\u0002\u0d22\u0d17\u0003\u0002\u0002\u0002\u0d22\u0d1e\u0003\u0002",
    "\u0002\u0002\u0d23\u00d9\u0003\u0002\u0002\u0002\u0d24\u0d25\t.\u0002",
    "\u0002\u0d25\u0d28\t\u0014\u0002\u0002\u0d26\u0d27\u0007<\u0002\u0002",
    "\u0d27\u0d29\u0005\u00dco\u0002\u0d28\u0d26\u0003\u0002\u0002\u0002",
    "\u0d28\u0d29\u0003\u0002\u0002\u0002\u0d29\u0d2a\u0003\u0002\u0002\u0002",
    "\u0d2a\u0d2b\u0007\u0400\u0002\u0002\u0d2b\u0d2c\u0005\u022c\u0117\u0002",
    "\u0d2c\u0d2d\u0007\u0401\u0002\u0002\u0d2d\u00db\u0003\u0002\u0002\u0002",
    "\u0d2e\u0d34\u0007S\u0002\u0002\u0d2f\u0d30\u0007q\u0002\u0002\u0d30",
    "\u0d34\u0007\u0012\u0002\u0002\u0d31\u0d32\u0007D\u0002\u0002\u0d32",
    "\u0d34\u0007\u0012\u0002\u0002\u0d33\u0d2e\u0003\u0002\u0002\u0002\u0d33",
    "\u0d2f\u0003\u0002\u0002\u0002\u0d33\u0d31\u0003\u0002\u0002\u0002\u0d34",
    "\u00dd\u0003\u0002\u0002\u0002\u0d35\u0d37\t/\u0002\u0002\u0d36\u0d35",
    "\u0003\u0002\u0002\u0002\u0d36\u0d37\u0003\u0002\u0002\u0002\u0d37\u0d38",
    "\u0003\u0002\u0002\u0002\u0d38\u0d39\u0007S\u0002\u0002\u0d39\u0d41",
    "\u0005\u00d8m\u0002\u0d3a\u0d3b\u0007l\u0002\u0002\u0d3b\u0d42\u0005",
    "\u025a\u012e\u0002\u0d3c\u0d3d\u0007\u00ab\u0002\u0002\u0d3d\u0d3e\u0007",
    "\u0400\u0002\u0002\u0d3e\u0d3f\u0005\u022c\u0117\u0002\u0d3f\u0d40\u0007",
    "\u0401\u0002\u0002\u0d40\u0d42\u0003\u0002\u0002\u0002\u0d41\u0d3a\u0003",
    "\u0002\u0002\u0002\u0d41\u0d3c\u0003\u0002\u0002\u0002\u0d41\u0d42\u0003",
    "\u0002\u0002\u0002\u0d42\u0d62\u0003\u0002\u0002\u0002\u0d43\u0d44\u0007",
    "\u009b\u0002\u0002\u0d44\u0d47\u0005\u00d8m\u0002\u0d45\u0d46\u0007",
    "l\u0002\u0002\u0d46\u0d48\u0005\u025a\u012e\u0002\u0d47\u0d45\u0003",
    "\u0002\u0002\u0002\u0d47\u0d48\u0003\u0002\u0002\u0002\u0d48\u0d62\u0003",
    "\u0002\u0002\u0002\u0d49\u0d4b\t0\u0002\u0002\u0d4a\u0d4c\u0007s\u0002",
    "\u0002\u0d4b\u0d4a\u0003\u0002\u0002\u0002\u0d4b\u0d4c\u0003\u0002\u0002",
    "\u0002\u0d4c\u0d4d\u0003\u0002\u0002\u0002\u0d4d\u0d4e\u0007S\u0002",
    "\u0002\u0d4e\u0d56\u0005\u00d8m\u0002\u0d4f\u0d50\u0007l\u0002\u0002",
    "\u0d50\u0d57\u0005\u025a\u012e\u0002\u0d51\u0d52\u0007\u00ab\u0002\u0002",
    "\u0d52\u0d53\u0007\u0400\u0002\u0002\u0d53\u0d54\u0005\u022c\u0117\u0002",
    "\u0d54\u0d55\u0007\u0401\u0002\u0002\u0d55\u0d57\u0003\u0002\u0002\u0002",
    "\u0d56\u0d4f\u0003\u0002\u0002\u0002\u0d56\u0d51\u0003\u0002\u0002\u0002",
    "\u0d57\u0d62\u0003\u0002\u0002\u0002\u0d58\u0d5d\u0007g\u0002\u0002",
    "\u0d59\u0d5b\t0\u0002\u0002\u0d5a\u0d5c\u0007s\u0002\u0002\u0d5b\u0d5a",
    "\u0003\u0002\u0002\u0002\u0d5b\u0d5c\u0003\u0002\u0002\u0002\u0d5c\u0d5e",
    "\u0003\u0002\u0002\u0002\u0d5d\u0d59\u0003\u0002\u0002\u0002\u0d5d\u0d5e",
    "\u0003\u0002\u0002\u0002\u0d5e\u0d5f\u0003\u0002\u0002\u0002\u0d5f\u0d60",
    "\u0007S\u0002\u0002\u0d60\u0d62\u0005\u00d8m\u0002\u0d61\u0d36\u0003",
    "\u0002\u0002\u0002\u0d61\u0d43\u0003\u0002\u0002\u0002\u0d61\u0d49\u0003",
    "\u0002\u0002\u0002\u0d61\u0d58\u0003\u0002\u0002\u0002\u0d62\u00df\u0003",
    "\u0002\u0002\u0002\u0d63\u0d64\u0007\u0400\u0002\u0002\u0d64\u0d65\u0005",
    "\u00e4s\u0002\u0d65\u0d66\u0007\u0401\u0002\u0002\u0d66\u0d6c\u0003",
    "\u0002\u0002\u0002\u0d67\u0d68\u0007\u0400\u0002\u0002\u0d68\u0d69\u0005",
    "\u00e0q\u0002\u0d69\u0d6a\u0007\u0401\u0002\u0002\u0d6a\u0d6c\u0003",
    "\u0002\u0002\u0002\u0d6b\u0d63\u0003\u0002\u0002\u0002\u0d6b\u0d67\u0003",
    "\u0002\u0002\u0002\u0d6c\u00e1\u0003\u0002\u0002\u0002\u0d6d\u0d6e\u0007",
    "\u0400\u0002\u0002\u0d6e\u0d6f\u0005\u00e6t\u0002\u0d6f\u0d70\u0007",
    "\u0401\u0002\u0002\u0d70\u0d76\u0003\u0002\u0002\u0002\u0d71\u0d72\u0007",
    "\u0400\u0002\u0002\u0d72\u0d73\u0005\u00e2r\u0002\u0d73\u0d74\u0007",
    "\u0401\u0002\u0002\u0d74\u0d76\u0003\u0002\u0002\u0002\u0d75\u0d6d\u0003",
    "\u0002\u0002\u0002\u0d75\u0d71\u0003\u0002\u0002\u0002\u0d76\u00e3\u0003",
    "\u0002\u0002\u0002\u0d77\u0d7b\u0007\u008b\u0002\u0002\u0d78\u0d7a\u0005",
    "\u00ecw\u0002\u0d79\u0d78\u0003\u0002\u0002\u0002\u0d7a\u0d7d\u0003",
    "\u0002\u0002\u0002\u0d7b\u0d79\u0003\u0002\u0002\u0002\u0d7b\u0d7c\u0003",
    "\u0002\u0002\u0002\u0d7c\u0d7e\u0003\u0002\u0002\u0002\u0d7d\u0d7b\u0003",
    "\u0002\u0002\u0002\u0d7e\u0d80\u0005\u00eex\u0002\u0d7f\u0d81\u0005",
    "\u00f2z\u0002\u0d80\u0d7f\u0003\u0002\u0002\u0002\u0d80\u0d81\u0003",
    "\u0002\u0002\u0002\u0d81\u0d83\u0003\u0002\u0002\u0002\u0d82\u0d84\u0005",
    "\u00f8}\u0002\u0d83\u0d82\u0003\u0002\u0002\u0002\u0d83\u0d84\u0003",
    "\u0002\u0002\u0002\u0d84\u0d86\u0003\u0002\u0002\u0002\u0d85\u0d87\u0005",
    "\u00d0i\u0002\u0d86\u0d85\u0003\u0002\u0002\u0002\u0d86\u0d87\u0003",
    "\u0002\u0002\u0002\u0d87\u0d89\u0003\u0002\u0002\u0002\u0d88\u0d8a\u0005",
    "\u00fc\u007f\u0002\u0d89\u0d88\u0003\u0002\u0002\u0002\u0d89\u0d8a\u0003",
    "\u0002\u0002\u0002\u0d8a\u0da0\u0003\u0002\u0002\u0002\u0d8b\u0d8f\u0007",
    "\u008b\u0002\u0002\u0d8c\u0d8e\u0005\u00ecw\u0002\u0d8d\u0d8c\u0003",
    "\u0002\u0002\u0002\u0d8e\u0d91\u0003\u0002\u0002\u0002\u0d8f\u0d8d\u0003",
    "\u0002\u0002\u0002\u0d8f\u0d90\u0003\u0002\u0002\u0002\u0d90\u0d92\u0003",
    "\u0002\u0002\u0002\u0d91\u0d8f\u0003\u0002\u0002\u0002\u0d92\u0d94\u0005",
    "\u00eex\u0002\u0d93\u0d95\u0005\u00f8}\u0002\u0d94\u0d93\u0003\u0002",
    "\u0002\u0002\u0d94\u0d95\u0003\u0002\u0002\u0002\u0d95\u0d97\u0003\u0002",
    "\u0002\u0002\u0d96\u0d98\u0005\u00d0i\u0002\u0d97\u0d96\u0003\u0002",
    "\u0002\u0002\u0d97\u0d98\u0003\u0002\u0002\u0002\u0d98\u0d9a\u0003\u0002",
    "\u0002\u0002\u0d99\u0d9b\u0005\u00fc\u007f\u0002\u0d9a\u0d99\u0003\u0002",
    "\u0002\u0002\u0d9a\u0d9b\u0003\u0002\u0002\u0002\u0d9b\u0d9d\u0003\u0002",
    "\u0002\u0002\u0d9c\u0d9e\u0005\u00f2z\u0002\u0d9d\u0d9c\u0003\u0002",
    "\u0002\u0002\u0d9d\u0d9e\u0003\u0002\u0002\u0002\u0d9e\u0da0\u0003\u0002",
    "\u0002\u0002\u0d9f\u0d77\u0003\u0002\u0002\u0002\u0d9f\u0d8b\u0003\u0002",
    "\u0002\u0002\u0da0\u00e5\u0003\u0002\u0002\u0002\u0da1\u0da5\u0007\u008b",
    "\u0002\u0002\u0da2\u0da4\u0005\u00ecw\u0002\u0da3\u0da2\u0003\u0002",
    "\u0002\u0002\u0da4\u0da7\u0003\u0002\u0002\u0002\u0da5\u0da3\u0003\u0002",
    "\u0002\u0002\u0da5\u0da6\u0003\u0002\u0002\u0002\u0da6\u0da8\u0003\u0002",
    "\u0002\u0002\u0da7\u0da5\u0003\u0002\u0002\u0002\u0da8\u0daa\u0005\u00ee",
    "x\u0002\u0da9\u0dab\u0005\u00f8}\u0002\u0daa\u0da9\u0003\u0002\u0002",
    "\u0002\u0daa\u0dab\u0003\u0002\u0002\u0002\u0dab\u0dad\u0003\u0002\u0002",
    "\u0002\u0dac\u0dae\u0005\u00d0i\u0002\u0dad\u0dac\u0003\u0002\u0002",
    "\u0002\u0dad\u0dae\u0003\u0002\u0002\u0002\u0dae\u0db0\u0003\u0002\u0002",
    "\u0002\u0daf\u0db1\u0005\u00fc\u007f\u0002\u0db0\u0daf\u0003\u0002\u0002",
    "\u0002\u0db0\u0db1\u0003\u0002\u0002\u0002\u0db1\u00e7\u0003\u0002\u0002",
    "\u0002\u0db2\u0db4\u0007\u00a4\u0002\u0002\u0db3\u0db5\t)\u0002\u0002",
    "\u0db4\u0db3\u0003\u0002\u0002\u0002\u0db4\u0db5\u0003\u0002\u0002\u0002",
    "\u0db5\u0db6\u0003\u0002\u0002\u0002\u0db6\u0db7\u0005\u00e2r\u0002",
    "\u0db7\u00e9\u0003\u0002\u0002\u0002\u0db8\u0dba\u0007\u00a4\u0002\u0002",
    "\u0db9\u0dbb\t)\u0002\u0002\u0dba\u0db9\u0003\u0002\u0002\u0002\u0dba",
    "\u0dbb\u0003\u0002\u0002\u0002\u0dbb\u0dbe\u0003\u0002\u0002\u0002\u0dbc",
    "\u0dbf\u0005\u00e6t\u0002\u0dbd\u0dbf\u0005\u00e2r\u0002\u0dbe\u0dbc",
    "\u0003\u0002\u0002\u0002\u0dbe\u0dbd\u0003\u0002\u0002\u0002\u0dbf\u00eb",
    "\u0003\u0002\u0002\u0002\u0dc0\u0dc9\t1\u0002\u0002\u0dc1\u0dc9\u0007",
    "F\u0002\u0002\u0dc2\u0dc9\u0007\u009b\u0002\u0002\u0dc3\u0dc9\u0007",
    "\u0097\u0002\u0002\u0dc4\u0dc9\u0007\u0095\u0002\u0002\u0dc5\u0dc9\u0007",
    "\u021a\u0002\u0002\u0dc6\u0dc9\t2\u0002\u0002\u0dc7\u0dc9\u0007\u0096",
    "\u0002\u0002\u0dc8\u0dc0\u0003\u0002\u0002\u0002\u0dc8\u0dc1\u0003\u0002",
    "\u0002\u0002\u0dc8\u0dc2\u0003\u0002\u0002\u0002\u0dc8\u0dc3\u0003\u0002",
    "\u0002\u0002\u0dc8\u0dc4\u0003\u0002\u0002\u0002\u0dc8\u0dc5\u0003\u0002",
    "\u0002\u0002\u0dc8\u0dc6\u0003\u0002\u0002\u0002\u0dc8\u0dc7\u0003\u0002",
    "\u0002\u0002\u0dc9\u00ed\u0003\u0002\u0002\u0002\u0dca\u0dcd\u0007\u03ef",
    "\u0002\u0002\u0dcb\u0dcd\u0005\u00f0y\u0002\u0dcc\u0dca\u0003\u0002",
    "\u0002\u0002\u0dcc\u0dcb\u0003\u0002\u0002\u0002\u0dcd\u0dd2\u0003\u0002",
    "\u0002\u0002\u0dce\u0dcf\u0007\u0402\u0002\u0002\u0dcf\u0dd1\u0005\u00f0",
    "y\u0002\u0dd0\u0dce\u0003\u0002\u0002\u0002\u0dd1\u0dd4\u0003\u0002",
    "\u0002\u0002\u0dd2\u0dd0\u0003\u0002\u0002\u0002\u0dd2\u0dd3\u0003\u0002",
    "\u0002\u0002\u0dd3\u00ef\u0003\u0002\u0002\u0002\u0dd4\u0dd2\u0003\u0002",
    "\u0002\u0002\u0dd5\u0dd6\u0005\u01f2\u00fa\u0002\u0dd6\u0dd7\u0007\u03ff",
    "\u0002\u0002\u0dd7\u0dd8\u0007\u03ef\u0002\u0002\u0dd8\u0df3\u0003\u0002",
    "\u0002\u0002\u0dd9\u0dde\u0005\u01f6\u00fc\u0002\u0dda\u0ddc\u0007\r",
    "\u0002\u0002\u0ddb\u0dda\u0003\u0002\u0002\u0002\u0ddb\u0ddc\u0003\u0002",
    "\u0002\u0002\u0ddc\u0ddd\u0003\u0002\u0002\u0002\u0ddd\u0ddf\u0005\u020c",
    "\u0107\u0002\u0dde\u0ddb\u0003\u0002\u0002\u0002\u0dde\u0ddf\u0003\u0002",
    "\u0002\u0002\u0ddf\u0df3\u0003\u0002\u0002\u0002\u0de0\u0de5\u0005\u0246",
    "\u0124\u0002\u0de1\u0de3\u0007\r\u0002\u0002\u0de2\u0de1\u0003\u0002",
    "\u0002\u0002\u0de2\u0de3\u0003\u0002\u0002\u0002\u0de3\u0de4\u0003\u0002",
    "\u0002\u0002\u0de4\u0de6\u0005\u020c\u0107\u0002\u0de5\u0de2\u0003\u0002",
    "\u0002\u0002\u0de5\u0de6\u0003\u0002\u0002\u0002\u0de6\u0df3\u0003\u0002",
    "\u0002\u0002\u0de7\u0de8\u0007\u041b\u0002\u0002\u0de8\u0dea\u0007\u03e6",
    "\u0002\u0002\u0de9\u0de7\u0003\u0002\u0002\u0002\u0de9\u0dea\u0003\u0002",
    "\u0002\u0002\u0dea\u0deb\u0003\u0002\u0002\u0002\u0deb\u0df0\u0005\u025a",
    "\u012e\u0002\u0dec\u0dee\u0007\r\u0002\u0002\u0ded\u0dec\u0003\u0002",
    "\u0002\u0002\u0ded\u0dee\u0003\u0002\u0002\u0002\u0dee\u0def\u0003\u0002",
    "\u0002\u0002\u0def\u0df1\u0005\u020c\u0107\u0002\u0df0\u0ded\u0003\u0002",
    "\u0002\u0002\u0df0\u0df1\u0003\u0002\u0002\u0002\u0df1\u0df3\u0003\u0002",
    "\u0002\u0002\u0df2\u0dd5\u0003\u0002\u0002\u0002\u0df2\u0dd9\u0003\u0002",
    "\u0002\u0002\u0df2\u0de0\u0003\u0002\u0002\u0002\u0df2\u0de9\u0003\u0002",
    "\u0002\u0002\u0df3\u00f1\u0003\u0002\u0002\u0002\u0df4\u0df5\u0007P",
    "\u0002\u0002\u0df5\u0dfa\u0005\u00bc_\u0002\u0df6\u0df7\u0007\u0402",
    "\u0002\u0002\u0df7\u0df9\u0005\u00bc_\u0002\u0df8\u0df6\u0003\u0002",
    "\u0002\u0002\u0df9\u0dfc\u0003\u0002\u0002\u0002\u0dfa\u0df8\u0003\u0002",
    "\u0002\u0002\u0dfa\u0dfb\u0003\u0002\u0002\u0002\u0dfb\u0e19\u0003\u0002",
    "\u0002\u0002\u0dfc\u0dfa\u0003\u0002\u0002\u0002\u0dfd\u0dfe\u0007P",
    "\u0002\u0002\u0dfe\u0dff\u0007\u0151\u0002\u0002\u0dff\u0e19\u0007\u040f",
    "\u0002\u0002\u0e00\u0e01\u0007P\u0002\u0002\u0e01\u0e02\u0007t\u0002",
    "\u0002\u0e02\u0e06\u0007\u040f\u0002\u0002\u0e03\u0e04\u0007\u0018\u0002",
    "\u0002\u0e04\u0e05\u0007\u008c\u0002\u0002\u0e05\u0e07\u0005\u01fe\u0100",
    "\u0002\u0e06\u0e03\u0003\u0002\u0002\u0002\u0e06\u0e07\u0003\u0002\u0002",
    "\u0002\u0e07\u0e0e\u0003\u0002\u0002\u0002\u0e08\u0e0a\t&\u0002\u0002",
    "\u0e09\u0e0b\u0005\u00f4{\u0002\u0e0a\u0e09\u0003\u0002\u0002\u0002",
    "\u0e0b\u0e0c\u0003\u0002\u0002\u0002\u0e0c\u0e0a\u0003\u0002\u0002\u0002",
    "\u0e0c\u0e0d\u0003\u0002\u0002\u0002\u0e0d\u0e0f\u0003\u0002\u0002\u0002",
    "\u0e0e\u0e08\u0003\u0002\u0002\u0002\u0e0e\u0e0f\u0003\u0002\u0002\u0002",
    "\u0e0f\u0e16\u0003\u0002\u0002\u0002\u0e10\u0e12\u0007]\u0002\u0002",
    "\u0e11\u0e13\u0005\u00f6|\u0002\u0e12\u0e11\u0003\u0002\u0002\u0002",
    "\u0e13\u0e14\u0003\u0002\u0002\u0002\u0e14\u0e12\u0003\u0002\u0002\u0002",
    "\u0e14\u0e15\u0003\u0002\u0002\u0002\u0e15\u0e17\u0003\u0002\u0002\u0002",
    "\u0e16\u0e10\u0003\u0002\u0002\u0002\u0e16\u0e17\u0003\u0002\u0002\u0002",
    "\u0e17\u0e19\u0003\u0002\u0002\u0002\u0e18\u0df4\u0003\u0002\u0002\u0002",
    "\u0e18\u0dfd\u0003\u0002\u0002\u0002\u0e18\u0e00\u0003\u0002\u0002\u0002",
    "\u0e19\u00f3\u0003\u0002\u0002\u0002\u0e1a\u0e1b\u0007\u009d\u0002\u0002",
    "\u0e1b\u0e1c\u0007\u0012\u0002\u0002\u0e1c\u0e27\u0007\u040f\u0002\u0002",
    "\u0e1d\u0e1f\u0007o\u0002\u0002\u0e1e\u0e1d\u0003\u0002\u0002\u0002",
    "\u0e1e\u0e1f\u0003\u0002\u0002\u0002\u0e1f\u0e20\u0003\u0002\u0002\u0002",
    "\u0e20\u0e21\u00075\u0002\u0002\u0e21\u0e22\u0007\u0012\u0002\u0002",
    "\u0e22\u0e27\u0007\u040f\u0002\u0002\u0e23\u0e24\u00076\u0002\u0002",
    "\u0e24\u0e25\u0007\u0012\u0002\u0002\u0e25\u0e27\u0007\u040f\u0002\u0002",
    "\u0e26\u0e1a\u0003\u0002\u0002\u0002\u0e26\u0e1e\u0003\u0002\u0002\u0002",
    "\u0e26\u0e23\u0003\u0002\u0002\u0002\u0e27\u00f5\u0003\u0002\u0002\u0002",
    "\u0e28\u0e29\u0007\u009a\u0002\u0002\u0e29\u0e2a\u0007\u0012\u0002\u0002",
    "\u0e2a\u0e2f\u0007\u040f\u0002\u0002\u0e2b\u0e2c\u0007\u009d\u0002\u0002",
    "\u0e2c\u0e2d\u0007\u0012\u0002\u0002\u0e2d\u0e2f\u0007\u040f\u0002\u0002",
    "\u0e2e\u0e28\u0003\u0002\u0002\u0002\u0e2e\u0e2b\u0003\u0002\u0002\u0002",
    "\u0e2f\u00f7\u0003\u0002\u0002\u0002\u0e30\u0e31\u0007?\u0002\u0002",
    "\u0e31\u0e34\u0005\u00d4k\u0002\u0e32\u0e33\u0007\u00ae\u0002\u0002",
    "\u0e33\u0e35\u0005\u025a\u012e\u0002\u0e34\u0e32\u0003\u0002\u0002\u0002",
    "\u0e34\u0e35\u0003\u0002\u0002\u0002\u0e35\u0e44\u0003\u0002\u0002\u0002",
    "\u0e36\u0e37\u0007D\u0002\u0002\u0e37\u0e38\u0007\u0012\u0002\u0002",
    "\u0e38\u0e3d\u0005\u00fa~\u0002\u0e39\u0e3a\u0007\u0402\u0002\u0002",
    "\u0e3a\u0e3c\u0005\u00fa~\u0002\u0e3b\u0e39\u0003\u0002\u0002\u0002",
    "\u0e3c\u0e3f\u0003\u0002\u0002\u0002\u0e3d\u0e3b\u0003\u0002\u0002\u0002",
    "\u0e3d\u0e3e\u0003\u0002\u0002\u0002\u0e3e\u0e42\u0003\u0002\u0002\u0002",
    "\u0e3f\u0e3d\u0003\u0002\u0002\u0002\u0e40\u0e41\u0007\u00b0\u0002\u0002",
    "\u0e41\u0e43\u0007\u0201\u0002\u0002\u0e42\u0e40\u0003\u0002\u0002\u0002",
    "\u0e42\u0e43\u0003\u0002\u0002\u0002\u0e43\u0e45\u0003\u0002\u0002\u0002",
    "\u0e44\u0e36\u0003\u0002\u0002\u0002\u0e44\u0e45\u0003\u0002\u0002\u0002",
    "\u0e45\u0e48\u0003\u0002\u0002\u0002\u0e46\u0e47\u0007E\u0002\u0002",
    "\u0e47\u0e49\u0005\u025a\u012e\u0002\u0e48\u0e46\u0003\u0002\u0002\u0002",
    "\u0e48\u0e49\u0003\u0002\u0002\u0002\u0e49\u00f9\u0003\u0002\u0002\u0002",
    "\u0e4a\u0e4c\u0005\u025a\u012e\u0002\u0e4b\u0e4d\t-\u0002\u0002\u0e4c",
    "\u0e4b\u0003\u0002\u0002\u0002\u0e4c\u0e4d\u0003\u0002\u0002\u0002\u0e4d",
    "\u00fb\u0003\u0002\u0002\u0002\u0e4e\u0e59\u0007[\u0002\u0002\u0e4f",
    "\u0e50\u0005\u00fe\u0080\u0002\u0e50\u0e51\u0007\u0402\u0002\u0002\u0e51",
    "\u0e53\u0003\u0002\u0002\u0002\u0e52\u0e4f\u0003\u0002\u0002\u0002\u0e52",
    "\u0e53\u0003\u0002\u0002\u0002\u0e53\u0e54\u0003\u0002\u0002\u0002\u0e54",
    "\u0e5a\u0005\u00fe\u0080\u0002\u0e55\u0e56\u0005\u00fe\u0080\u0002\u0e56",
    "\u0e57\u0007\u01c7\u0002\u0002\u0e57\u0e58\u0005\u00fe\u0080\u0002\u0e58",
    "\u0e5a\u0003\u0002\u0002\u0002\u0e59\u0e52\u0003\u0002\u0002\u0002\u0e59",
    "\u0e55\u0003\u0002\u0002\u0002\u0e5a\u00fd\u0003\u0002\u0002\u0002\u0e5b",
    "\u0e5f\u0005\u0212\u010a\u0002\u0e5c\u0e5f\u0005\u01fc\u00ff\u0002\u0e5d",
    "\u0e5f\u0005\u020e\u0108\u0002\u0e5e\u0e5b\u0003\u0002\u0002\u0002\u0e5e",
    "\u0e5c\u0003\u0002\u0002\u0002\u0e5e\u0e5d\u0003\u0002\u0002\u0002\u0e5f",
    "\u00ff\u0003\u0002\u0002\u0002\u0e60\u0e61\u0007\u021e\u0002\u0002\u0e61",
    "\u0e6a\u0007\u0235\u0002\u0002\u0e62\u0e67\u0005\u0116\u008c\u0002\u0e63",
    "\u0e64\u0007\u0402\u0002\u0002\u0e64\u0e66\u0005\u0116\u008c\u0002\u0e65",
    "\u0e63\u0003\u0002\u0002\u0002\u0e66\u0e69\u0003\u0002\u0002\u0002\u0e67",
    "\u0e65\u0003\u0002\u0002\u0002\u0e67\u0e68\u0003\u0002\u0002\u0002\u0e68",
    "\u0e6b\u0003\u0002\u0002\u0002\u0e69\u0e67\u0003\u0002\u0002\u0002\u0e6a",
    "\u0e62\u0003\u0002\u0002\u0002\u0e6a\u0e6b\u0003\u0002\u0002\u0002\u0e6b",
    "\u0101\u0003\u0002\u0002\u0002\u0e6c\u0e6e\u0007\u011c\u0002\u0002\u0e6d",
    "\u0e6f\u0007\u024c\u0002\u0002\u0e6e\u0e6d\u0003\u0002\u0002\u0002\u0e6e",
    "\u0e6f\u0003\u0002\u0002\u0002\u0e6f\u0103\u0003\u0002\u0002\u0002\u0e70",
    "\u0e72\u0007\u0134\u0002\u0002\u0e71\u0e73\u0007\u024c\u0002\u0002\u0e72",
    "\u0e71\u0003\u0002\u0002\u0002\u0e72\u0e73\u0003\u0002\u0002\u0002\u0e73",
    "\u0e79\u0003\u0002\u0002\u0002\u0e74\u0e76\u0007\f\u0002\u0002\u0e75",
    "\u0e77\u0007\u01c3\u0002\u0002\u0e76\u0e75\u0003\u0002\u0002\u0002\u0e76",
    "\u0e77\u0003\u0002\u0002\u0002\u0e77\u0e78\u0003\u0002\u0002\u0002\u0e78",
    "\u0e7a\u0007\u0125\u0002\u0002\u0e79\u0e74\u0003\u0002\u0002\u0002\u0e79",
    "\u0e7a\u0003\u0002\u0002\u0002\u0e7a\u0e7f\u0003\u0002\u0002\u0002\u0e7b",
    "\u0e7d\u0007\u01c3\u0002\u0002\u0e7c\u0e7b\u0003\u0002\u0002\u0002\u0e7c",
    "\u0e7d\u0003\u0002\u0002\u0002\u0e7d\u0e7e\u0003\u0002\u0002\u0002\u0e7e",
    "\u0e80\u0007~\u0002\u0002\u0e7f\u0e7c\u0003\u0002\u0002\u0002\u0e7f",
    "\u0e80\u0003\u0002\u0002\u0002\u0e80\u0105\u0003\u0002\u0002\u0002\u0e81",
    "\u0e83\u0007\u0200\u0002\u0002\u0e82\u0e84\u0007\u024c\u0002\u0002\u0e83",
    "\u0e82\u0003\u0002\u0002\u0002\u0e83\u0e84\u0003\u0002\u0002\u0002\u0e84",
    "\u0e8a\u0003\u0002\u0002\u0002\u0e85\u0e87\u0007\f\u0002\u0002\u0e86",
    "\u0e88\u0007\u01c3\u0002\u0002\u0e87\u0e86\u0003\u0002\u0002\u0002\u0e87",
    "\u0e88\u0003\u0002\u0002\u0002\u0e88\u0e89\u0003\u0002\u0002\u0002\u0e89",
    "\u0e8b\u0007\u0125\u0002\u0002\u0e8a\u0e85\u0003\u0002\u0002\u0002\u0e8a",
    "\u0e8b\u0003\u0002\u0002\u0002\u0e8b\u0e90\u0003\u0002\u0002\u0002\u0e8c",
    "\u0e8e\u0007\u01c3\u0002\u0002\u0e8d\u0e8c\u0003\u0002\u0002\u0002\u0e8d",
    "\u0e8e\u0003\u0002\u0002\u0002\u0e8e\u0e8f\u0003\u0002\u0002\u0002\u0e8f",
    "\u0e91\u0007~\u0002\u0002\u0e90\u0e8d\u0003\u0002\u0002\u0002\u0e90",
    "\u0e91\u0003\u0002\u0002\u0002\u0e91\u0107\u0003\u0002\u0002\u0002\u0e92",
    "\u0e93\u0007\u0206\u0002\u0002\u0e93\u0e94\u0005\u020c\u0107\u0002\u0e94",
    "\u0109\u0003\u0002\u0002\u0002\u0e95\u0e97\u0007\u0200\u0002\u0002\u0e96",
    "\u0e98\u0007\u024c\u0002\u0002\u0e97\u0e96\u0003\u0002\u0002\u0002\u0e97",
    "\u0e98\u0003\u0002\u0002\u0002\u0e98\u0e99\u0003\u0002\u0002\u0002\u0e99",
    "\u0e9b\u0007\u009f\u0002\u0002\u0e9a\u0e9c\u0007\u0206\u0002\u0002\u0e9b",
    "\u0e9a\u0003\u0002\u0002\u0002\u0e9b\u0e9c\u0003\u0002\u0002\u0002\u0e9c",
    "\u0e9d\u0003\u0002\u0002\u0002\u0e9d\u0e9e\u0005\u020c\u0107\u0002\u0e9e",
    "\u010b\u0003\u0002\u0002\u0002\u0e9f\u0ea0\u0007~\u0002\u0002\u0ea0",
    "\u0ea1\u0007\u0206\u0002\u0002\u0ea1\u0ea2\u0005\u020c\u0107\u0002\u0ea2",
    "\u010d\u0003\u0002\u0002\u0002\u0ea3\u0ea4\u0007_\u0002\u0002\u0ea4",
    "\u0ea5\u0007\u025e\u0002\u0002\u0ea5\u0eaa\u0005\u0118\u008d\u0002\u0ea6",
    "\u0ea7\u0007\u0402\u0002\u0002\u0ea7\u0ea9\u0005\u0118\u008d\u0002\u0ea8",
    "\u0ea6\u0003\u0002\u0002\u0002\u0ea9\u0eac\u0003\u0002\u0002\u0002\u0eaa",
    "\u0ea8\u0003\u0002\u0002\u0002\u0eaa\u0eab\u0003\u0002\u0002\u0002\u0eab",
    "\u010f\u0003\u0002\u0002\u0002\u0eac\u0eaa\u0003\u0002\u0002\u0002\u0ead",
    "\u0eae\u0007\u00a6\u0002\u0002\u0eae\u0eaf\u0007\u025e\u0002\u0002\u0eaf",
    "\u0111\u0003\u0002\u0002\u0002\u0eb0\u0eb1\u0007\u008c\u0002\u0002\u0eb1",
    "\u0eb2\u0007\u0118\u0002\u0002\u0eb2\u0eb3\u0007\u03f7\u0002\u0002\u0eb3",
    "\u0eb4\t\u0018\u0002\u0002\u0eb4\u0113\u0003\u0002\u0002\u0002\u0eb5",
    "\u0eb7\u0007\u008c\u0002\u0002\u0eb6\u0eb8\t3\u0002\u0002\u0eb7\u0eb6",
    "\u0003\u0002\u0002\u0002\u0eb7\u0eb8\u0003\u0002\u0002\u0002\u0eb8\u0eb9",
    "\u0003\u0002\u0002\u0002\u0eb9\u0eba\u0007\u0235\u0002\u0002\u0eba\u0ebf",
    "\u0005\u011c\u008f\u0002\u0ebb\u0ebc\u0007\u0402\u0002\u0002\u0ebc\u0ebe",
    "\u0005\u011c\u008f\u0002\u0ebd\u0ebb\u0003\u0002\u0002\u0002\u0ebe\u0ec1",
    "\u0003\u0002\u0002\u0002\u0ebf\u0ebd\u0003\u0002\u0002\u0002\u0ebf\u0ec0",
    "\u0003\u0002\u0002\u0002\u0ec0\u0115\u0003\u0002\u0002\u0002\u0ec1\u0ebf",
    "\u0003\u0002\u0002\u0002\u0ec2\u0ec3\u0007\u00b0\u0002\u0002\u0ec3\u0ec4",
    "\u0007\u013b\u0002\u0002\u0ec4\u0eca\u0007\u0211\u0002\u0002\u0ec5\u0ec6",
    "\u0007z\u0002\u0002\u0ec6\u0eca\u0007\u00b1\u0002\u0002\u0ec7\u0ec8",
    "\u0007z\u0002\u0002\u0ec8\u0eca\u0007\u01cd\u0002\u0002\u0ec9\u0ec2",
    "\u0003\u0002\u0002\u0002\u0ec9\u0ec5\u0003\u0002\u0002\u0002\u0ec9\u0ec7",
    "\u0003\u0002\u0002\u0002\u0eca\u0117\u0003\u0002\u0002\u0002\u0ecb\u0ed0",
    "\u0005\u01f4\u00fb\u0002\u0ecc\u0ece\u0007\r\u0002\u0002\u0ecd\u0ecc",
    "\u0003\u0002\u0002\u0002\u0ecd\u0ece\u0003\u0002\u0002\u0002\u0ece\u0ecf",
    "\u0003\u0002\u0002\u0002\u0ecf\u0ed1\u0005\u020c\u0107\u0002\u0ed0\u0ecd",
    "\u0003\u0002\u0002\u0002\u0ed0\u0ed1\u0003\u0002\u0002\u0002\u0ed1\u0ed2",
    "\u0003\u0002\u0002\u0002\u0ed2\u0ed3\u0005\u011a\u008e\u0002\u0ed3\u0119",
    "\u0003\u0002\u0002\u0002\u0ed4\u0ed6\u0007z\u0002\u0002\u0ed5\u0ed7",
    "\u0007\u0194\u0002\u0002\u0ed6\u0ed5\u0003\u0002\u0002\u0002\u0ed6\u0ed7",
    "\u0003\u0002\u0002\u0002\u0ed7\u0edd\u0003\u0002\u0002\u0002\u0ed8\u0eda",
    "\u0007a\u0002\u0002\u0ed9\u0ed8\u0003\u0002\u0002\u0002\u0ed9\u0eda",
    "\u0003\u0002\u0002\u0002\u0eda\u0edb\u0003\u0002\u0002\u0002\u0edb\u0edd",
    "\u0007\u00b1\u0002\u0002\u0edc\u0ed4\u0003\u0002\u0002\u0002\u0edc\u0ed9",
    "\u0003\u0002\u0002\u0002\u0edd\u011b\u0003\u0002\u0002\u0002\u0ede\u0edf",
    "\u0007\u018a\u0002\u0002\u0edf\u0ee0\u0007\u0192\u0002\u0002\u0ee0\u0ee6",
    "\u0005\u011e\u0090\u0002\u0ee1\u0ee2\u0007z\u0002\u0002\u0ee2\u0ee6",
    "\u0007\u00b1\u0002\u0002\u0ee3\u0ee4\u0007z\u0002\u0002\u0ee4\u0ee6",
    "\u0007\u01cd\u0002\u0002\u0ee5\u0ede\u0003\u0002\u0002\u0002\u0ee5\u0ee1",
    "\u0003\u0002\u0002\u0002\u0ee5\u0ee3\u0003\u0002\u0002\u0002\u0ee6\u011d",
    "\u0003\u0002\u0002\u0002\u0ee7\u0ee8\u0007\u02b5\u0002\u0002\u0ee8\u0eef",
    "\u0007z\u0002\u0002\u0ee9\u0eea\u0007z\u0002\u0002\u0eea\u0eef\u0007",
    "\u02b6\u0002\u0002\u0eeb\u0eec\u0007z\u0002\u0002\u0eec\u0eef\u0007",
    "\u02b7\u0002\u0002\u0eed\u0eef\u0007\u02b8\u0002\u0002\u0eee\u0ee7\u0003",
    "\u0002\u0002\u0002\u0eee\u0ee9\u0003\u0002\u0002\u0002\u0eee\u0eeb\u0003",
    "\u0002\u0002\u0002\u0eee\u0eed\u0003\u0002\u0002\u0002\u0eef\u011f\u0003",
    "\u0002\u0002\u0002\u0ef0\u0ef1\u0007\u0017\u0002\u0002\u0ef1\u0ef2\u0007",
    "\u0197\u0002\u0002\u0ef2\u0ef3\u0007\u009f\u0002\u0002\u0ef3\u0ef8\u0005",
    "\u0132\u009a\u0002\u0ef4\u0ef5\u0007\u0402\u0002\u0002\u0ef5\u0ef7\u0005",
    "\u0132\u009a\u0002\u0ef6\u0ef4\u0003\u0002\u0002\u0002\u0ef7\u0efa\u0003",
    "\u0002\u0002\u0002\u0ef8\u0ef6\u0003\u0002\u0002\u0002\u0ef8\u0ef9\u0003",
    "\u0002\u0002\u0002\u0ef9\u0efc\u0003\u0002\u0002\u0002\u0efa\u0ef8\u0003",
    "\u0002\u0002\u0002\u0efb\u0efd\u0005\u013a\u009e\u0002\u0efc\u0efb\u0003",
    "\u0002\u0002\u0002\u0efc\u0efd\u0003\u0002\u0002\u0002\u0efd\u0121\u0003",
    "\u0002\u0002\u0002\u0efe\u0eff\u0007\u0017\u0002\u0002\u0eff\u0f00\u0007",
    "\u01fa\u0002\u0002\u0f00\u0f01\u0007\u016b\u0002\u0002\u0f01\u0f06\u0005",
    "\u013c\u009f\u0002\u0f02\u0f03\u0007\u0402\u0002\u0002\u0f03\u0f05\u0005",
    "\u013c\u009f\u0002\u0f04\u0f02\u0003\u0002\u0002\u0002\u0f05\u0f08\u0003",
    "\u0002\u0002\u0002\u0f06\u0f04\u0003\u0002\u0002\u0002\u0f06\u0f07\u0003",
    "\u0002\u0002\u0002\u0f07\u0123\u0003\u0002\u0002\u0002\u0f08\u0f06\u0003",
    "\u0002\u0002\u0002\u0f09\u0f0a\u0007x\u0002\u0002\u0f0a\u0f0b\t4\u0002",
    "\u0002\u0f0b\u0f10\u0007\u0196\u0002\u0002\u0f0c\u0f0d\u0007\u009f\u0002",
    "\u0002\u0f0d\u0f11\u0007\u040f\u0002\u0002\u0f0e\u0f0f\u0007\u000f\u0002",
    "\u0002\u0f0f\u0f11\u0007\u040f\u0002\u0002\u0f10\u0f0c\u0003\u0002\u0002",
    "\u0002\u0f10\u0f0e\u0003\u0002\u0002\u0002\u0f11\u0125\u0003\u0002\u0002",
    "\u0002\u0f12\u0f13\u0007\u01fb\u0002\u0002\u0f13\u0f14\u0007\u0197\u0002",
    "\u0002\u0f14\u0127\u0003\u0002\u0002\u0002\u0f15\u0f16\u0007\u01fb\u0002",
    "\u0002\u0f16\u0f18\u0007\u020f\u0002\u0002\u0f17\u0f19\u0007\b\u0002",
    "\u0002\u0f18\u0f17\u0003\u0002\u0002\u0002\u0f18\u0f19\u0003\u0002\u0002",
    "\u0002\u0f19\u0f1b\u0003\u0002\u0002\u0002\u0f1a\u0f1c\u0005\u013a\u009e",
    "\u0002\u0f1b\u0f1a\u0003\u0002\u0002\u0002\u0f1b\u0f1c\u0003\u0002\u0002",
    "\u0002\u0f1c\u0129\u0003\u0002\u0002\u0002\u0f1d\u0f1e\u0007\u021e\u0002",
    "\u0002\u0f1e\u0f27\u0007\u020f\u0002\u0002\u0f1f\u0f24\u0005\u0140\u00a1",
    "\u0002\u0f20\u0f21\u0007\u0402\u0002\u0002\u0f21\u0f23\u0005\u0140\u00a1",
    "\u0002\u0f22\u0f20\u0003\u0002\u0002\u0002\u0f23\u0f26\u0003\u0002\u0002",
    "\u0002\u0f24\u0f22\u0003\u0002\u0002\u0002\u0f24\u0f25\u0003\u0002\u0002",
    "\u0002\u0f25\u0f28\u0003\u0002\u0002\u0002\u0f26\u0f24\u0003\u0002\u0002",
    "\u0002\u0f27\u0f1f\u0003\u0002\u0002\u0002\u0f27\u0f28\u0003\u0002\u0002",
    "\u0002\u0f28\u0f2b\u0003\u0002\u0002\u0002\u0f29\u0f2a\u0007\u023e\u0002",
    "\u0002\u0f2a\u0f2c\u0005\u0142\u00a2\u0002\u0f2b\u0f29\u0003\u0002\u0002",
    "\u0002\u0f2b\u0f2c\u0003\u0002\u0002\u0002\u0f2c\u0f30\u0003\u0002\u0002",
    "\u0002\u0f2d\u0f2f\u0005\u0144\u00a3\u0002\u0f2e\u0f2d\u0003\u0002\u0002",
    "\u0002\u0f2f\u0f32\u0003\u0002\u0002\u0002\u0f30\u0f2e\u0003\u0002\u0002",
    "\u0002\u0f30\u0f31\u0003\u0002\u0002\u0002\u0f31\u0f34\u0003\u0002\u0002",
    "\u0002\u0f32\u0f30\u0003\u0002\u0002\u0002\u0f33\u0f35\u0005\u013a\u009e",
    "\u0002\u0f34\u0f33\u0003\u0002\u0002\u0002\u0f34\u0f35\u0003\u0002\u0002",
    "\u0002\u0f35\u012b\u0003\u0002\u0002\u0002\u0f36\u0f37\u0007\u0224\u0002",
    "\u0002\u0f37\u0f40\u0007\u020f\u0002\u0002\u0f38\u0f3d\u0005\u0140\u00a1",
    "\u0002\u0f39\u0f3a\u0007\u0402\u0002\u0002\u0f3a\u0f3c\u0005\u0140\u00a1",
    "\u0002\u0f3b\u0f39\u0003\u0002\u0002\u0002\u0f3c\u0f3f\u0003\u0002\u0002",
    "\u0002\u0f3d\u0f3b\u0003\u0002\u0002\u0002\u0f3d\u0f3e\u0003\u0002\u0002",
    "\u0002\u0f3e\u0f41\u0003\u0002\u0002\u0002\u0f3f\u0f3d\u0003\u0002\u0002",
    "\u0002\u0f40\u0f38\u0003\u0002\u0002\u0002\u0f40\u0f41\u0003\u0002\u0002",
    "\u0002\u0f41\u012d\u0003\u0002\u0002\u0002\u0f42\u0f43\u0007\u021e\u0002",
    "\u0002\u0f43\u0f44\u0007\u0176\u0002\u0002\u0f44\u012f\u0003\u0002\u0002",
    "\u0002\u0f45\u0f46\u0007\u0224\u0002\u0002\u0f46\u0f47\u0007\u0176\u0002",
    "\u0002\u0f47\u0131\u0003\u0002\u0002\u0002\u0f48\u0f49\u0005\u0134\u009b",
    "\u0002\u0f49\u0f4a\u0007\u03f7\u0002\u0002\u0f4a\u0f4b\u0007\u040f\u0002",
    "\u0002\u0f4b\u0f66\u0003\u0002\u0002\u0002\u0f4c\u0f4d\u0005\u0136\u009c",
    "\u0002\u0f4d\u0f4e\u0007\u03f7\u0002\u0002\u0f4e\u0f4f\u0005\u0212\u010a",
    "\u0002\u0f4f\u0f66\u0003\u0002\u0002\u0002\u0f50\u0f51\u0005\u0138\u009d",
    "\u0002\u0f51\u0f52\u0007\u03f7\u0002\u0002\u0f52\u0f53\t\u0018\u0002",
    "\u0002\u0f53\u0f66\u0003\u0002\u0002\u0002\u0f54\u0f55\u0007\u019b\u0002",
    "\u0002\u0f55\u0f56\u0007\u03f7\u0002\u0002\u0f56\u0f66\u0007\u0412\u0002",
    "\u0002\u0f57\u0f58\u0007\u017d\u0002\u0002\u0f58\u0f59\u0007\u03f7\u0002",
    "\u0002\u0f59\u0f62\u0007\u0400\u0002\u0002\u0f5a\u0f5f\u0005\u020c\u0107",
    "\u0002\u0f5b\u0f5c\u0007\u0402\u0002\u0002\u0f5c\u0f5e\u0005\u020c\u0107",
    "\u0002\u0f5d\u0f5b\u0003\u0002\u0002\u0002\u0f5e\u0f61\u0003\u0002\u0002",
    "\u0002\u0f5f\u0f5d\u0003\u0002\u0002\u0002\u0f5f\u0f60\u0003\u0002\u0002",
    "\u0002\u0f60\u0f63\u0003\u0002\u0002\u0002\u0f61\u0f5f\u0003\u0002\u0002",
    "\u0002\u0f62\u0f5a\u0003\u0002\u0002\u0002\u0f62\u0f63\u0003\u0002\u0002",
    "\u0002\u0f63\u0f64\u0003\u0002\u0002\u0002\u0f64\u0f66\u0007\u0401\u0002",
    "\u0002\u0f65\u0f48\u0003\u0002\u0002\u0002\u0f65\u0f4c\u0003\u0002\u0002",
    "\u0002\u0f65\u0f50\u0003\u0002\u0002\u0002\u0f65\u0f54\u0003\u0002\u0002",
    "\u0002\u0f65\u0f57\u0003\u0002\u0002\u0002\u0f66\u0133\u0003\u0002\u0002",
    "\u0002\u0f67\u0f68\t5\u0002\u0002\u0f68\u0135\u0003\u0002\u0002\u0002",
    "\u0f69\u0f6a\t6\u0002\u0002\u0f6a\u0137\u0003\u0002\u0002\u0002\u0f6b",
    "\u0f6c\t7\u0002\u0002\u0f6c\u0139\u0003\u0002\u0002\u0002\u0f6d\u0f6e",
    "\u0007<\u0002\u0002\u0f6e\u0f6f\u0007\u0127\u0002\u0002\u0f6f\u0f70",
    "\u0007\u040f\u0002\u0002\u0f70\u013b\u0003\u0002\u0002\u0002\u0f71\u0f72",
    "\u0007\u01f3\u0002\u0002\u0f72\u0f73\u0007\u03f7\u0002\u0002\u0f73\u0f74",
    "\u0007\u0400\u0002\u0002\u0f74\u0f75\u0005\u022c\u0117\u0002\u0f75\u0f76",
    "\u0007\u0401\u0002\u0002\u0f76\u0fa3\u0003\u0002\u0002\u0002\u0f77\u0f78",
    "\u0007\u01f5\u0002\u0002\u0f78\u0f79\u0007\u03f7\u0002\u0002\u0f79\u0f7a",
    "\u0007\u0400\u0002\u0002\u0f7a\u0f7b\u0005\u022c\u0117\u0002\u0f7b\u0f7c",
    "\u0007\u0401\u0002\u0002\u0f7c\u0fa3\u0003\u0002\u0002\u0002\u0f7d\u0f7e",
    "\u0007\u01f4\u0002\u0002\u0f7e\u0f7f\u0007\u03f7\u0002\u0002\u0f7f\u0f80",
    "\u0007\u0400\u0002\u0002\u0f80\u0f81\u0005\u022e\u0118\u0002\u0f81\u0f82",
    "\u0007\u0401\u0002\u0002\u0f82\u0fa3\u0003\u0002\u0002\u0002\u0f83\u0f84",
    "\u0007\u01f6\u0002\u0002\u0f84\u0f85\u0007\u03f7\u0002\u0002\u0f85\u0f86",
    "\u0007\u0400\u0002\u0002\u0f86\u0f87\u0005\u022e\u0118\u0002\u0f87\u0f88",
    "\u0007\u0401\u0002\u0002\u0f88\u0fa3\u0003\u0002\u0002\u0002\u0f89\u0f8a",
    "\u0007\u01f8\u0002\u0002\u0f8a\u0f8b\u0007\u03f7\u0002\u0002\u0f8b\u0f8c",
    "\u0007\u0400\u0002\u0002\u0f8c\u0f8d\u0005\u0238\u011d\u0002\u0f8d\u0f8e",
    "\u0007\u0401\u0002\u0002\u0f8e\u0fa3\u0003\u0002\u0002\u0002\u0f8f\u0f90",
    "\u0007\u01f9\u0002\u0002\u0f90\u0f91\u0007\u03f7\u0002\u0002\u0f91\u0f92",
    "\u0007\u0400\u0002\u0002\u0f92\u0f93\u0005\u0238\u011d\u0002\u0f93\u0f94",
    "\u0007\u0401\u0002\u0002\u0f94\u0fa3\u0003\u0002\u0002\u0002\u0f95\u0f96",
    "\u0007\u01f7\u0002\u0002\u0f96\u0f97\u0007\u03f7\u0002\u0002\u0f97\u0f98",
    "\u0007\u0400\u0002\u0002\u0f98\u0f9d\u0005\u013e\u00a0\u0002\u0f99\u0f9a",
    "\u0007\u0402\u0002\u0002\u0f9a\u0f9c\u0005\u013e\u00a0\u0002\u0f9b\u0f99",
    "\u0003\u0002\u0002\u0002\u0f9c\u0f9f\u0003\u0002\u0002\u0002\u0f9d\u0f9b",
    "\u0003\u0002\u0002\u0002\u0f9d\u0f9e\u0003\u0002\u0002\u0002\u0f9e\u0fa0",
    "\u0003\u0002\u0002\u0002\u0f9f\u0f9d\u0003\u0002\u0002\u0002\u0fa0\u0fa1",
    "\u0007\u0401\u0002\u0002\u0fa1\u0fa3\u0003\u0002\u0002\u0002\u0fa2\u0f71",
    "\u0003\u0002\u0002\u0002\u0fa2\u0f77\u0003\u0002\u0002\u0002\u0fa2\u0f7d",
    "\u0003\u0002\u0002\u0002\u0fa2\u0f83\u0003\u0002\u0002\u0002\u0fa2\u0f89",
    "\u0003\u0002\u0002\u0002\u0fa2\u0f8f\u0003\u0002\u0002\u0002\u0fa2\u0f95",
    "\u0003\u0002\u0002\u0002\u0fa3\u013d\u0003\u0002\u0002\u0002\u0fa4\u0fa5",
    "\u0007\u0400\u0002\u0002\u0fa5\u0fa6\u0005\u01f4\u00fb\u0002\u0fa6\u0fa7",
    "\u0007\u0402\u0002\u0002\u0fa7\u0fa8\u0005\u01f4\u00fb\u0002\u0fa8\u0fa9",
    "\u0007\u0401\u0002\u0002\u0fa9\u013f\u0003\u0002\u0002\u0002\u0faa\u0fab",
    "\t8\u0002\u0002\u0fab\u0141\u0003\u0002\u0002\u0002\u0fac\u0fad\t9\u0002",
    "\u0002\u0fad\u0fae\u0007\u03f7\u0002\u0002\u0fae\u0fbf\u0005\u0146\u00a4",
    "\u0002\u0faf\u0fb0\u0007\u019d\u0002\u0002\u0fb0\u0fb1\u0007\u03f7\u0002",
    "\u0002\u0fb1\u0fb2\u0007\u040f\u0002\u0002\u0fb2\u0fb3\u0007\u0402\u0002",
    "\u0002\u0fb3\u0fb4\u0007\u019e\u0002\u0002\u0fb4\u0fb5\u0007\u03f7\u0002",
    "\u0002\u0fb5\u0fbf\u0005\u0212\u010a\u0002\u0fb6\u0fb7\u0007\u01ed\u0002",
    "\u0002\u0fb7\u0fb8\u0007\u03f7\u0002\u0002\u0fb8\u0fb9\u0007\u040f\u0002",
    "\u0002\u0fb9\u0fba\u0007\u0402\u0002\u0002\u0fba\u0fbb\u0007\u01ee\u0002",
    "\u0002\u0fbb\u0fbc\u0007\u03f7\u0002\u0002\u0fbc\u0fbf\u0005\u0212\u010a",
    "\u0002\u0fbd\u0fbf\u0007\u0218\u0002\u0002\u0fbe\u0fac\u0003\u0002\u0002",
    "\u0002\u0fbe\u0faf\u0003\u0002\u0002\u0002\u0fbe\u0fb6\u0003\u0002\u0002",
    "\u0002\u0fbe\u0fbd\u0003\u0002\u0002\u0002\u0fbf\u0143\u0003\u0002\u0002",
    "\u0002\u0fc0\u0fc1\u0007\u0240\u0002\u0002\u0fc1\u0fc2\u0007\u03f7\u0002",
    "\u0002\u0fc2\u0fcd\u0007\u040f\u0002\u0002\u0fc3\u0fc4\u0007\u01d8\u0002",
    "\u0002\u0fc4\u0fc5\u0007\u03f7\u0002\u0002\u0fc5\u0fcd\u0007\u040f\u0002",
    "\u0002\u0fc6\u0fc7\u0007\u0148\u0002\u0002\u0fc7\u0fc8\u0007\u03f7\u0002",
    "\u0002\u0fc8\u0fcd\u0007\u040f\u0002\u0002\u0fc9\u0fca\u0007\u01db\u0002",
    "\u0002\u0fca\u0fcb\u0007\u03f7\u0002\u0002\u0fcb\u0fcd\u0007\u040f\u0002",
    "\u0002\u0fcc\u0fc0\u0003\u0002\u0002\u0002\u0fcc\u0fc3\u0003\u0002\u0002",
    "\u0002\u0fcc\u0fc6\u0003\u0002\u0002\u0002\u0fcc\u0fc9\u0003\u0002\u0002",
    "\u0002\u0fcd\u0145\u0003\u0002\u0002\u0002\u0fce\u0fd3\u0005\u0204\u0103",
    "\u0002\u0fcf\u0fd0\u0007\u0402\u0002\u0002\u0fd0\u0fd2\u0005\u0204\u0103",
    "\u0002\u0fd1\u0fcf\u0003\u0002\u0002\u0002\u0fd2\u0fd5\u0003\u0002\u0002",
    "\u0002\u0fd3\u0fd1\u0003\u0002\u0002\u0002\u0fd3\u0fd4\u0003\u0002\u0002",
    "\u0002\u0fd4\u0fd8\u0003\u0002\u0002\u0002\u0fd5\u0fd3\u0003\u0002\u0002",
    "\u0002\u0fd6\u0fd8\u0007\u040f\u0002\u0002\u0fd7\u0fce\u0003\u0002\u0002",
    "\u0002\u0fd7\u0fd6\u0003\u0002\u0002\u0002\u0fd8\u0147\u0003\u0002\u0002",
    "\u0002\u0fd9\u0fda\u0007\u024f\u0002\u0002\u0fda\u0fdb\t:\u0002\u0002",
    "\u0fdb\u0fdd\u0005\u0206\u0104\u0002\u0fdc\u0fde\t;\u0002\u0002\u0fdd",
    "\u0fdc\u0003\u0002\u0002\u0002\u0fdd\u0fde\u0003\u0002\u0002\u0002\u0fde",
    "\u0149\u0003\u0002\u0002\u0002\u0fdf\u0fe0\u0007\u024f\u0002\u0002\u0fe0",
    "\u0fe1\u0007\u0156\u0002\u0002\u0fe1\u0fe7\u0005\u0206\u0104\u0002\u0fe2",
    "\u0fe5\u0007\u022c\u0002\u0002\u0fe3\u0fe4\u0007<\u0002\u0002\u0fe4",
    "\u0fe6\u0007\u01b7\u0002\u0002\u0fe5\u0fe3\u0003\u0002\u0002\u0002\u0fe5",
    "\u0fe6\u0003\u0002\u0002\u0002\u0fe6\u0fe8\u0003\u0002\u0002\u0002\u0fe7",
    "\u0fe2\u0003\u0002\u0002\u0002\u0fe7\u0fe8\u0003\u0002\u0002\u0002\u0fe8",
    "\u014b\u0003\u0002\u0002\u0002\u0fe9\u0fea\u0007\u024f\u0002\u0002\u0fea",
    "\u0feb\u0007\u01df\u0002\u0002\u0feb\u0fec\u0005\u0206\u0104\u0002\u0fec",
    "\u014d\u0003\u0002\u0002\u0002\u0fed\u0fee\u0007\u024f\u0002\u0002\u0fee",
    "\u0fef\u0007\u0134\u0002\u0002\u0fef\u0ff2\u0005\u0206\u0104\u0002\u0ff0",
    "\u0ff1\u0007\u01cb\u0002\u0002\u0ff1\u0ff3\u0007\u01d9\u0002\u0002\u0ff2",
    "\u0ff0\u0003\u0002\u0002\u0002\u0ff2\u0ff3\u0003\u0002\u0002\u0002\u0ff3",
    "\u014f\u0003\u0002\u0002\u0002\u0ff4\u0ff5\u0007\u024f\u0002\u0002\u0ff5",
    "\u0ff6\u0007\u0200\u0002\u0002\u0ff6\u0ff7\u0005\u0206\u0104\u0002\u0ff7",
    "\u0151\u0003\u0002\u0002\u0002\u0ff8\u0ff9\u0007\u024f\u0002\u0002\u0ff9",
    "\u0ffc\u0007\u01e9\u0002\u0002\u0ffa\u0ffb\u0007\u001f\u0002\u0002\u0ffb",
    "\u0ffd\u0005\u0206\u0104\u0002\u0ffc\u0ffa\u0003\u0002\u0002\u0002\u0ffc",
    "\u0ffd\u0003\u0002\u0002\u0002\u0ffd\u0153\u0003\u0002\u0002\u0002\u0ffe",
    "\u0fff\u0007\u01df\u0002\u0002\u0fff\u1000\u0005\u020c\u0107\u0002\u1000",
    "\u1003\u0007?\u0002\u0002\u1001\u1004\u0007\u040f\u0002\u0002\u1002",
    "\u1004\u0007\u041b\u0002\u0002\u1003\u1001\u0003\u0002\u0002\u0002\u1003",
    "\u1002\u0003\u0002\u0002\u0002\u1004\u0155\u0003\u0002\u0002\u0002\u1005",
    "\u1006\u0007\u0260\u0002\u0002\u1006\u1009\u0005\u020c\u0107\u0002\u1007",
    "\u1008\u0007\u00ab\u0002\u0002\u1008\u100a\u0005\u023a\u011e\u0002\u1009",
    "\u1007\u0003\u0002\u0002\u0002\u1009\u100a\u0003\u0002\u0002\u0002\u100a",
    "\u0157\u0003\u0002\u0002\u0002\u100b\u100c\t<\u0002\u0002\u100c\u100d",
    "\u0007\u01df\u0002\u0002\u100d\u100e\u0005\u020c\u0107\u0002\u100e\u0159",
    "\u0003\u0002\u0002\u0002\u100f\u1012\u0005\u015c\u00af\u0002\u1010\u1012",
    "\u0005\u0006\u0004\u0002\u1011\u100f\u0003\u0002\u0002\u0002\u1011\u1010",
    "\u0003\u0002\u0002\u0002\u1012\u015b\u0003\u0002\u0002\u0002\u1013\u1014",
    "\u0005\u020c\u0107\u0002\u1014\u1015\u0007\u040b\u0002\u0002\u1015\u1017",
    "\u0003\u0002\u0002\u0002\u1016\u1013\u0003\u0002\u0002\u0002\u1016\u1017",
    "\u0003\u0002\u0002\u0002\u1017\u1018\u0003\u0002\u0002\u0002\u1018\u103f",
    "\u0007\u011c\u0002\u0002\u1019\u101a\u0005\u0170\u00b9\u0002\u101a\u101b",
    "\u0007\u0403\u0002\u0002\u101b\u101d\u0003\u0002\u0002\u0002\u101c\u1019",
    "\u0003\u0002\u0002\u0002\u101d\u1020\u0003\u0002\u0002\u0002\u101e\u101c",
    "\u0003\u0002\u0002\u0002\u101e\u101f\u0003\u0002\u0002\u0002\u101f\u1026",
    "\u0003\u0002\u0002\u0002\u1020\u101e\u0003\u0002\u0002\u0002\u1021\u1022",
    "\u0005\u0172\u00ba\u0002\u1022\u1023\u0007\u0403\u0002\u0002\u1023\u1025",
    "\u0003\u0002\u0002\u0002\u1024\u1021\u0003\u0002\u0002\u0002\u1025\u1028",
    "\u0003\u0002\u0002\u0002\u1026\u1024\u0003\u0002\u0002\u0002\u1026\u1027",
    "\u0003\u0002\u0002\u0002\u1027\u102e\u0003\u0002\u0002\u0002\u1028\u1026",
    "\u0003\u0002\u0002\u0002\u1029\u102a\u0005\u0174\u00bb\u0002\u102a\u102b",
    "\u0007\u0403\u0002\u0002\u102b\u102d\u0003\u0002\u0002\u0002\u102c\u1029",
    "\u0003\u0002\u0002\u0002\u102d\u1030\u0003\u0002\u0002\u0002\u102e\u102c",
    "\u0003\u0002\u0002\u0002\u102e\u102f\u0003\u0002\u0002\u0002\u102f\u1036",
    "\u0003\u0002\u0002\u0002\u1030\u102e\u0003\u0002\u0002\u0002\u1031\u1032",
    "\u0005\u0176\u00bc\u0002\u1032\u1033\u0007\u0403\u0002\u0002\u1033\u1035",
    "\u0003\u0002\u0002\u0002\u1034\u1031\u0003\u0002\u0002\u0002\u1035\u1038",
    "\u0003\u0002\u0002\u0002\u1036\u1034\u0003\u0002\u0002\u0002\u1036\u1037",
    "\u0003\u0002\u0002\u0002\u1037\u103c\u0003\u0002\u0002\u0002\u1038\u1036",
    "\u0003\u0002\u0002\u0002\u1039\u103b\u0005\u017a\u00be\u0002\u103a\u1039",
    "\u0003\u0002\u0002\u0002\u103b\u103e\u0003\u0002\u0002\u0002\u103c\u103a",
    "\u0003\u0002\u0002\u0002\u103c\u103d\u0003\u0002\u0002\u0002\u103d\u1040",
    "\u0003\u0002\u0002\u0002\u103e\u103c\u0003\u0002\u0002\u0002\u103f\u101e",
    "\u0003\u0002\u0002\u0002\u103f\u1040\u0003\u0002\u0002\u0002\u1040\u1041",
    "\u0003\u0002\u0002\u0002\u1041\u1043\u0007\u0156\u0002\u0002\u1042\u1044",
    "\u0005\u020c\u0107\u0002\u1043\u1042\u0003\u0002\u0002\u0002\u1043\u1044",
    "\u0003\u0002\u0002\u0002\u1044\u015d\u0003\u0002\u0002\u0002\u1045\u1048",
    "\u0007\u0015\u0002\u0002\u1046\u1049\u0005\u020c\u0107\u0002\u1047\u1049",
    "\u0005\u025a\u012e\u0002\u1048\u1046\u0003\u0002\u0002\u0002\u1048\u1047",
    "\u0003\u0002\u0002\u0002\u1048\u1049\u0003\u0002\u0002\u0002\u1049\u104b",
    "\u0003\u0002\u0002\u0002\u104a\u104c\u0005\u017c\u00bf\u0002\u104b\u104a",
    "\u0003\u0002\u0002\u0002\u104c\u104d\u0003\u0002\u0002\u0002\u104d\u104b",
    "\u0003\u0002\u0002\u0002\u104d\u104e\u0003\u0002\u0002\u0002\u104e\u1055",
    "\u0003\u0002\u0002\u0002\u104f\u1051\u00073\u0002\u0002\u1050\u1052",
    "\u0005\u017a\u00be\u0002\u1051\u1050\u0003\u0002\u0002\u0002\u1052\u1053",
    "\u0003\u0002\u0002\u0002\u1053\u1051\u0003\u0002\u0002\u0002\u1053\u1054",
    "\u0003\u0002\u0002\u0002\u1054\u1056\u0003\u0002\u0002\u0002\u1055\u104f",
    "\u0003\u0002\u0002\u0002\u1055\u1056\u0003\u0002\u0002\u0002\u1056\u1057",
    "\u0003\u0002\u0002\u0002\u1057\u1058\u0007\u0156\u0002\u0002\u1058\u1059",
    "\u0007\u0015\u0002\u0002\u1059\u015f\u0003\u0002\u0002\u0002\u105a\u105b",
    "\u0007G\u0002\u0002\u105b\u105c\u0005\u025a\u012e\u0002\u105c\u105e",
    "\u0007\u009e\u0002\u0002\u105d\u105f\u0005\u017a\u00be\u0002\u105e\u105d",
    "\u0003\u0002\u0002\u0002\u105f\u1060\u0003\u0002\u0002\u0002\u1060\u105e",
    "\u0003\u0002\u0002\u0002\u1060\u1061\u0003\u0002\u0002\u0002\u1061\u1065",
    "\u0003\u0002\u0002\u0002\u1062\u1064\u0005\u017e\u00c0\u0002\u1063\u1062",
    "\u0003\u0002\u0002\u0002\u1064\u1067\u0003\u0002\u0002\u0002\u1065\u1063",
    "\u0003\u0002\u0002\u0002\u1065\u1066\u0003\u0002\u0002\u0002\u1066\u106e",
    "\u0003\u0002\u0002\u0002\u1067\u1065\u0003\u0002\u0002\u0002\u1068\u106a",
    "\u00073\u0002\u0002\u1069\u106b\u0005\u017a\u00be\u0002\u106a\u1069",
    "\u0003\u0002\u0002\u0002\u106b\u106c\u0003\u0002\u0002\u0002\u106c\u106a",
    "\u0003\u0002\u0002\u0002\u106c\u106d\u0003\u0002\u0002\u0002\u106d\u106f",
    "\u0003\u0002\u0002\u0002\u106e\u1068\u0003\u0002\u0002\u0002\u106e\u106f",
    "\u0003\u0002\u0002\u0002\u106f\u1070\u0003\u0002\u0002\u0002\u1070\u1071",
    "\u0007\u0156\u0002\u0002\u1071\u1072\u0007G\u0002\u0002\u1072\u0161",
    "\u0003\u0002\u0002\u0002\u1073\u1074\u0007R\u0002\u0002\u1074\u1075",
    "\u0005\u020c\u0107\u0002\u1075\u0163\u0003\u0002\u0002\u0002\u1076\u1077",
    "\u0007X\u0002\u0002\u1077\u1078\u0005\u020c\u0107\u0002\u1078\u0165",
    "\u0003\u0002\u0002\u0002\u1079\u107a\u0005\u020c\u0107\u0002\u107a\u107b",
    "\u0007\u040b\u0002\u0002\u107b\u107d\u0003\u0002\u0002\u0002\u107c\u1079",
    "\u0003\u0002\u0002\u0002\u107c\u107d\u0003\u0002\u0002\u0002\u107d\u107e",
    "\u0003\u0002\u0002\u0002\u107e\u1080\u0007`\u0002\u0002\u107f\u1081",
    "\u0005\u017a\u00be\u0002\u1080\u107f\u0003\u0002\u0002\u0002\u1081\u1082",
    "\u0003\u0002\u0002\u0002\u1082\u1080\u0003\u0002\u0002\u0002\u1082\u1083",
    "\u0003\u0002\u0002\u0002\u1083\u1084\u0003\u0002\u0002\u0002\u1084\u1085",
    "\u0007\u0156\u0002\u0002\u1085\u1087\u0007`\u0002\u0002\u1086\u1088",
    "\u0005\u020c\u0107\u0002\u1087\u1086\u0003\u0002\u0002\u0002\u1087\u1088",
    "\u0003\u0002\u0002\u0002\u1088\u0167\u0003\u0002\u0002\u0002\u1089\u108a",
    "\u0005\u020c\u0107\u0002\u108a\u108b\u0007\u040b\u0002\u0002\u108b\u108d",
    "\u0003\u0002\u0002\u0002\u108c\u1089\u0003\u0002\u0002\u0002\u108c\u108d",
    "\u0003\u0002\u0002\u0002\u108d\u108e\u0003\u0002\u0002\u0002\u108e\u1090",
    "\u0007\u0080\u0002\u0002\u108f\u1091\u0005\u017a\u00be\u0002\u1090\u108f",
    "\u0003\u0002\u0002\u0002\u1091\u1092\u0003\u0002\u0002\u0002\u1092\u1090",
    "\u0003\u0002\u0002\u0002\u1092\u1093\u0003\u0002\u0002\u0002\u1093\u1094",
    "\u0003\u0002\u0002\u0002\u1094\u1095\u0007\u023e\u0002\u0002\u1095\u1096",
    "\u0005\u025a\u012e\u0002\u1096\u1097\u0007\u0156\u0002\u0002\u1097\u1099",
    "\u0007\u0080\u0002\u0002\u1098\u109a\u0005\u020c\u0107\u0002\u1099\u1098",
    "\u0003\u0002\u0002\u0002\u1099\u109a\u0003\u0002\u0002\u0002\u109a\u0169",
    "\u0003\u0002\u0002\u0002\u109b\u109c\u0007\u0085\u0002\u0002\u109c\u109d",
    "\u0005\u025a\u012e\u0002\u109d\u016b\u0003\u0002\u0002\u0002\u109e\u109f",
    "\u0005\u020c\u0107\u0002\u109f\u10a0\u0007\u040b\u0002\u0002\u10a0\u10a2",
    "\u0003\u0002\u0002\u0002\u10a1\u109e\u0003\u0002\u0002\u0002\u10a1\u10a2",
    "\u0003\u0002\u0002\u0002\u10a2\u10a3\u0003\u0002\u0002\u0002\u10a3\u10a4",
    "\u0007\u00af\u0002\u0002\u10a4\u10a5\u0005\u025a\u012e\u0002\u10a5\u10a7",
    "\u0007\u0150\u0002\u0002\u10a6\u10a8\u0005\u017a\u00be\u0002\u10a7\u10a6",
    "\u0003\u0002\u0002\u0002\u10a8\u10a9\u0003\u0002\u0002\u0002\u10a9\u10a7",
    "\u0003\u0002\u0002\u0002\u10a9\u10aa\u0003\u0002\u0002\u0002\u10aa\u10ab",
    "\u0003\u0002\u0002\u0002\u10ab\u10ac\u0007\u0156\u0002\u0002\u10ac\u10ae",
    "\u0007\u00af\u0002\u0002\u10ad\u10af\u0005\u020c\u0107\u0002\u10ae\u10ad",
    "\u0003\u0002\u0002\u0002\u10ae\u10af\u0003\u0002\u0002\u0002\u10af\u016d",
    "\u0003\u0002\u0002\u0002\u10b0\u10b1\u0007\u012d\u0002\u0002\u10b1\u10c0",
    "\u0005\u020c\u0107\u0002\u10b2\u10b7\u0007;\u0002\u0002\u10b3\u10b5",
    "\u0007\u01c2\u0002\u0002\u10b4\u10b3\u0003\u0002\u0002\u0002\u10b4\u10b5",
    "\u0003\u0002\u0002\u0002\u10b5\u10b6\u0003\u0002\u0002\u0002\u10b6\u10b8",
    "\u0007?\u0002\u0002\u10b7\u10b4\u0003\u0002\u0002\u0002\u10b7\u10b8",
    "\u0003\u0002\u0002\u0002\u10b8\u10b9\u0003\u0002\u0002\u0002\u10b9\u10ba",
    "\u0005\u020c\u0107\u0002\u10ba\u10bb\u0007P\u0002\u0002\u10bb\u10bc",
    "\u0005\u022c\u0117\u0002\u10bc\u10c0\u0003\u0002\u0002\u0002\u10bd\u10be",
    "\u0007\u01ce\u0002\u0002\u10be\u10c0\u0005\u020c\u0107\u0002\u10bf\u10b0",
    "\u0003\u0002\u0002\u0002\u10bf\u10b2\u0003\u0002\u0002\u0002\u10bf\u10bd",
    "\u0003\u0002\u0002\u0002\u10c0\u016f\u0003\u0002\u0002\u0002\u10c1\u10c2",
    "\u0007\'\u0002\u0002\u10c2\u10c3\u0005\u022c\u0117\u0002\u10c3\u10c6",
    "\u0005\u0220\u0111\u0002\u10c4\u10c5\u0007(\u0002\u0002\u10c5\u10c7",
    "\u0005\u025a\u012e\u0002\u10c6\u10c4\u0003\u0002\u0002\u0002\u10c6\u10c7",
    "\u0003\u0002\u0002\u0002\u10c7\u0171\u0003\u0002\u0002\u0002\u10c8\u10c9",
    "\u0007\'\u0002\u0002\u10c9\u10ca\u0005\u020c\u0107\u0002\u10ca\u10cb",
    "\u0007\u001c\u0002\u0002\u10cb\u10d2\u0007<\u0002\u0002\u10cc\u10d3",
    "\u0005\u0212\u010a\u0002\u10cd\u10cf\u0007\u0093\u0002\u0002\u10ce\u10d0",
    "\u0007\u0244\u0002\u0002\u10cf\u10ce\u0003\u0002\u0002\u0002\u10cf\u10d0",
    "\u0003\u0002\u0002\u0002\u10d0\u10d1\u0003\u0002\u0002\u0002\u10d1\u10d3",
    "\u0007\u040f\u0002\u0002\u10d2\u10cc\u0003\u0002\u0002\u0002\u10d2\u10cd",
    "\u0003\u0002\u0002\u0002\u10d3\u0173\u0003\u0002\u0002\u0002\u10d4\u10d5",
    "\u0007\'\u0002\u0002\u10d5\u10d6\u0005\u020c\u0107\u0002\u10d6\u10d7",
    "\u0007$\u0002\u0002\u10d7\u10d8\u0007<\u0002\u0002\u10d8\u10d9\u0005",
    "\u00b4[\u0002\u10d9\u0175\u0003\u0002\u0002\u0002\u10da\u10db\u0007",
    "\'\u0002\u0002\u10db\u10dc\t=\u0002\u0002\u10dc\u10dd\u0007\u0177\u0002",
    "\u0002\u10dd\u10de\u0007<\u0002\u0002\u10de\u10e3\u0005\u0178\u00bd",
    "\u0002\u10df\u10e0\u0007\u0402\u0002\u0002\u10e0\u10e2\u0005\u0178\u00bd",
    "\u0002\u10e1\u10df\u0003\u0002\u0002\u0002\u10e2\u10e5\u0003\u0002\u0002",
    "\u0002\u10e3\u10e1\u0003\u0002\u0002\u0002\u10e3\u10e4\u0003\u0002\u0002",
    "\u0002\u10e4\u10e6\u0003\u0002\u0002\u0002\u10e5\u10e3\u0003\u0002\u0002",
    "\u0002\u10e6\u10e7\u0005\u015a\u00ae\u0002\u10e7\u0177\u0003\u0002\u0002",
    "\u0002\u10e8\u10f4\u0005\u0212\u010a\u0002\u10e9\u10eb\u0007\u0093\u0002",
    "\u0002\u10ea\u10ec\u0007\u0244\u0002\u0002\u10eb\u10ea\u0003\u0002\u0002",
    "\u0002\u10eb\u10ec\u0003\u0002\u0002\u0002\u10ec\u10ed\u0003\u0002\u0002",
    "\u0002\u10ed\u10f4\u0007\u040f\u0002\u0002\u10ee\u10f4\u0005\u020c\u0107",
    "\u0002\u10ef\u10f4\u0007\u0094\u0002\u0002\u10f0\u10f1\u0007h\u0002",
    "\u0002\u10f1\u10f4\u0007\u0170\u0002\u0002\u10f2\u10f4\u0007\u0092\u0002",
    "\u0002\u10f3\u10e8\u0003\u0002\u0002\u0002\u10f3\u10e9\u0003\u0002\u0002",
    "\u0002\u10f3\u10ee\u0003\u0002\u0002\u0002\u10f3\u10ef\u0003\u0002\u0002",
    "\u0002\u10f3\u10f0\u0003\u0002\u0002\u0002\u10f3\u10f2\u0003\u0002\u0002",
    "\u0002\u10f4\u0179\u0003\u0002\u0002\u0002\u10f5\u10f8\u0005\u0014\u000b",
    "\u0002\u10f6\u10f8\u0005\u0006\u0004\u0002\u10f7\u10f5\u0003\u0002\u0002",
    "\u0002\u10f7\u10f6\u0003\u0002\u0002\u0002\u10f8\u10f9\u0003\u0002\u0002",
    "\u0002\u10f9\u10fa\u0007\u0403\u0002\u0002\u10fa\u017b\u0003\u0002\u0002",
    "\u0002\u10fb\u10fe\u0007\u00ad\u0002\u0002\u10fc\u10ff\u0005\u021e\u0110",
    "\u0002\u10fd\u10ff\u0005\u025a\u012e\u0002\u10fe\u10fc\u0003\u0002\u0002",
    "\u0002\u10fe\u10fd\u0003\u0002\u0002\u0002\u10ff\u1100\u0003\u0002\u0002",
    "\u0002\u1100\u1102\u0007\u009e\u0002\u0002\u1101\u1103\u0005\u017a\u00be",
    "\u0002\u1102\u1101\u0003\u0002\u0002\u0002\u1103\u1104\u0003\u0002\u0002",
    "\u0002\u1104\u1102\u0003\u0002\u0002\u0002\u1104\u1105\u0003\u0002\u0002",
    "\u0002\u1105\u017d\u0003\u0002\u0002\u0002\u1106\u1107\u00074\u0002",
    "\u0002\u1107\u1108\u0005\u025a\u012e\u0002\u1108\u110a\u0007\u009e\u0002",
    "\u0002\u1109\u110b\u0005\u017a\u00be\u0002\u110a\u1109\u0003\u0002\u0002",
    "\u0002\u110b\u110c\u0003\u0002\u0002\u0002\u110c\u110a\u0003\u0002\u0002",
    "\u0002\u110c\u110d\u0003\u0002\u0002\u0002\u110d\u017f\u0003\u0002\u0002",
    "\u0002\u110e\u110f\u0007\t\u0002\u0002\u110f\u1110\u0007\u0240\u0002",
    "\u0002\u1110\u1115\u0005\u0192\u00ca\u0002\u1111\u1112\u0007\u0402\u0002",
    "\u0002\u1112\u1114\u0005\u0192\u00ca\u0002\u1113\u1111\u0003\u0002\u0002",
    "\u0002\u1114\u1117\u0003\u0002\u0002\u0002\u1115\u1113\u0003\u0002\u0002",
    "\u0002\u1115\u1116\u0003\u0002\u0002\u0002\u1116\u1145\u0003\u0002\u0002",
    "\u0002\u1117\u1115\u0003\u0002\u0002\u0002\u1118\u1119\u0007\t\u0002",
    "\u0002\u1119\u111b\u0007\u0240\u0002\u0002\u111a\u111c\u0005\u0242\u0122",
    "\u0002\u111b\u111a\u0003\u0002\u0002\u0002\u111b\u111c\u0003\u0002\u0002",
    "\u0002\u111c\u111d\u0003\u0002\u0002\u0002\u111d\u1122\u0005\u0194\u00cb",
    "\u0002\u111e\u111f\u0007\u0402\u0002\u0002\u111f\u1121\u0005\u0194\u00cb",
    "\u0002\u1120\u111e\u0003\u0002\u0002\u0002\u1121\u1124\u0003\u0002\u0002",
    "\u0002\u1122\u1120\u0003\u0002\u0002\u0002\u1122\u1123\u0003\u0002\u0002",
    "\u0002\u1123\u1133\u0003\u0002\u0002\u0002\u1124\u1122\u0003\u0002\u0002",
    "\u0002\u1125\u1131\u0007\u0082\u0002\u0002\u1126\u1132\u0007\u01c5\u0002",
    "\u0002\u1127\u112e\u0005\u0196\u00cc\u0002\u1128\u112a\u0007\f\u0002",
    "\u0002\u1129\u1128\u0003\u0002\u0002\u0002\u1129\u112a\u0003\u0002\u0002",
    "\u0002\u112a\u112b\u0003\u0002\u0002\u0002\u112b\u112d\u0005\u0196\u00cc",
    "\u0002\u112c\u1129\u0003\u0002\u0002\u0002\u112d\u1130\u0003\u0002\u0002",
    "\u0002\u112e\u112c\u0003\u0002\u0002\u0002\u112e\u112f\u0003\u0002\u0002",
    "\u0002\u112f\u1132\u0003\u0002\u0002\u0002\u1130\u112e\u0003\u0002\u0002",
    "\u0002\u1131\u1126\u0003\u0002\u0002\u0002\u1131\u1127\u0003\u0002\u0002",
    "\u0002\u1132\u1134\u0003\u0002\u0002\u0002\u1133\u1125\u0003\u0002\u0002",
    "\u0002\u1133\u1134\u0003\u0002\u0002\u0002\u1134\u113b\u0003\u0002\u0002",
    "\u0002\u1135\u1137\u0007\u00b0\u0002\u0002\u1136\u1138\u0005\u0198\u00cd",
    "\u0002\u1137\u1136\u0003\u0002\u0002\u0002\u1138\u1139\u0003\u0002\u0002",
    "\u0002\u1139\u1137\u0003\u0002\u0002\u0002\u1139\u113a\u0003\u0002\u0002",
    "\u0002\u113a\u113c\u0003\u0002\u0002\u0002\u113b\u1135\u0003\u0002\u0002",
    "\u0002\u113b\u113c\u0003\u0002\u0002\u0002\u113c\u1141\u0003\u0002\u0002",
    "\u0002\u113d\u1140\u0005\u019a\u00ce\u0002\u113e\u1140\u0005\u019c\u00cf",
    "\u0002\u113f\u113d\u0003\u0002\u0002\u0002\u113f\u113e\u0003\u0002\u0002",
    "\u0002\u1140\u1143\u0003\u0002\u0002\u0002\u1141\u113f\u0003\u0002\u0002",
    "\u0002\u1141\u1142\u0003\u0002\u0002\u0002\u1142\u1145\u0003\u0002\u0002",
    "\u0002\u1143\u1141\u0003\u0002\u0002\u0002\u1144\u110e\u0003\u0002\u0002",
    "\u0002\u1144\u1118\u0003\u0002\u0002\u0002\u1145\u0181\u0003\u0002\u0002",
    "\u0002\u1146\u1147\u0007 \u0002\u0002\u1147\u1148\u0007\u0240\u0002",
    "\u0002\u1148\u114d\u0005\u0194\u00cb\u0002\u1149\u114a\u0007\u0402\u0002",
    "\u0002\u114a\u114c\u0005\u0194\u00cb\u0002\u114b\u1149\u0003\u0002\u0002",
    "\u0002\u114c\u114f\u0003\u0002\u0002\u0002\u114d\u114b\u0003\u0002\u0002",
    "\u0002\u114d\u114e\u0003\u0002\u0002\u0002\u114e\u117d\u0003\u0002\u0002",
    "\u0002\u114f\u114d\u0003\u0002\u0002\u0002\u1150\u1151\u0007 \u0002",
    "\u0002\u1151\u1153\u0007\u0240\u0002\u0002\u1152\u1154\u0005\u0244\u0123",
    "\u0002\u1153\u1152\u0003\u0002\u0002\u0002\u1153\u1154\u0003\u0002\u0002",
    "\u0002\u1154\u1155\u0003\u0002\u0002\u0002\u1155\u115a\u0005\u0194\u00cb",
    "\u0002\u1156\u1157\u0007\u0402\u0002\u0002\u1157\u1159\u0005\u0194\u00cb",
    "\u0002\u1158\u1156\u0003\u0002\u0002\u0002\u1159\u115c\u0003\u0002\u0002",
    "\u0002\u115a\u1158\u0003\u0002\u0002\u0002\u115a\u115b\u0003\u0002\u0002",
    "\u0002\u115b\u116b\u0003\u0002\u0002\u0002\u115c\u115a\u0003\u0002\u0002",
    "\u0002\u115d\u1169\u0007\u0082\u0002\u0002\u115e\u116a\u0007\u01c5\u0002",
    "\u0002\u115f\u1166\u0005\u0196\u00cc\u0002\u1160\u1162\u0007\f\u0002",
    "\u0002\u1161\u1160\u0003\u0002\u0002\u0002\u1161\u1162\u0003\u0002\u0002",
    "\u0002\u1162\u1163\u0003\u0002\u0002\u0002\u1163\u1165\u0005\u0196\u00cc",
    "\u0002\u1164\u1161\u0003\u0002\u0002\u0002\u1165\u1168\u0003\u0002\u0002",
    "\u0002\u1166\u1164\u0003\u0002\u0002\u0002\u1166\u1167\u0003\u0002\u0002",
    "\u0002\u1167\u116a\u0003\u0002\u0002\u0002\u1168\u1166\u0003\u0002\u0002",
    "\u0002\u1169\u115e\u0003\u0002\u0002\u0002\u1169\u115f\u0003\u0002\u0002",
    "\u0002\u116a\u116c\u0003\u0002\u0002\u0002\u116b\u115d\u0003\u0002\u0002",
    "\u0002\u116b\u116c\u0003\u0002\u0002\u0002\u116c\u1173\u0003\u0002\u0002",
    "\u0002\u116d\u116f\u0007\u00b0\u0002\u0002\u116e\u1170\u0005\u0198\u00cd",
    "\u0002\u116f\u116e\u0003\u0002\u0002\u0002\u1170\u1171\u0003\u0002\u0002",
    "\u0002\u1171\u116f\u0003\u0002\u0002\u0002\u1171\u1172\u0003\u0002\u0002",
    "\u0002\u1172\u1174\u0003\u0002\u0002\u0002\u1173\u116d\u0003\u0002\u0002",
    "\u0002\u1173\u1174\u0003\u0002\u0002\u0002\u1174\u1179\u0003\u0002\u0002",
    "\u0002\u1175\u1178\u0005\u019a\u00ce\u0002\u1176\u1178\u0005\u019c\u00cf",
    "\u0002\u1177\u1175\u0003\u0002\u0002\u0002\u1177\u1176\u0003\u0002\u0002",
    "\u0002\u1178\u117b\u0003\u0002\u0002\u0002\u1179\u1177\u0003\u0002\u0002",
    "\u0002\u1179\u117a\u0003\u0002\u0002\u0002\u117a\u117d\u0003\u0002\u0002",
    "\u0002\u117b\u1179\u0003\u0002\u0002\u0002\u117c\u1146\u0003\u0002\u0002",
    "\u0002\u117c\u1150\u0003\u0002\u0002\u0002\u117d\u0183\u0003\u0002\u0002",
    "\u0002\u117e\u117f\u00071\u0002\u0002\u117f\u1181\u0007\u0240\u0002",
    "\u0002\u1180\u1182\u0005\u0242\u0122\u0002\u1181\u1180\u0003\u0002\u0002",
    "\u0002\u1181\u1182\u0003\u0002\u0002\u0002\u1182\u1183\u0003\u0002\u0002",
    "\u0002\u1183\u1188\u0005\u01fa\u00fe\u0002\u1184\u1185\u0007\u0402\u0002",
    "\u0002\u1185\u1187\u0005\u01fa\u00fe\u0002\u1186\u1184\u0003\u0002\u0002",
    "\u0002\u1187\u118a\u0003\u0002\u0002\u0002\u1188\u1186\u0003\u0002\u0002",
    "\u0002\u1188\u1189\u0003\u0002\u0002\u0002\u1189\u0185\u0003\u0002\u0002",
    "\u0002\u118a\u1188\u0003\u0002\u0002\u0002\u118b\u118c\u0007C\u0002",
    "\u0002\u118c\u1191\u0005\u019e\u00d0\u0002\u118d\u118e\u0007\u0402\u0002",
    "\u0002\u118e\u1190\u0005\u019e\u00d0\u0002\u118f\u118d\u0003\u0002\u0002",
    "\u0002\u1190\u1193\u0003\u0002\u0002\u0002\u1191\u118f\u0003\u0002\u0002",
    "\u0002\u1191\u1192\u0003\u0002\u0002\u0002\u1192\u1194\u0003\u0002\u0002",
    "\u0002\u1193\u1191\u0003\u0002\u0002\u0002\u1194\u1196\u0007l\u0002",
    "\u0002\u1195\u1197\t>\u0002\u0002\u1196\u1195\u0003\u0002\u0002\u0002",
    "\u1196\u1197\u0003\u0002\u0002\u0002\u1197\u1198\u0003\u0002\u0002\u0002",
    "\u1198\u1199\u0005\u01a2\u00d2\u0002\u1199\u119a\u0007\u009f\u0002\u0002",
    "\u119a\u119f\u0005\u0194\u00cb\u0002\u119b\u119c\u0007\u0402\u0002\u0002",
    "\u119c\u119e\u0005\u0194\u00cb\u0002\u119d\u119b\u0003\u0002\u0002\u0002",
    "\u119e\u11a1\u0003\u0002\u0002\u0002\u119f\u119d\u0003\u0002\u0002\u0002",
    "\u119f\u11a0\u0003\u0002\u0002\u0002\u11a0\u11b0\u0003\u0002\u0002\u0002",
    "\u11a1\u119f\u0003\u0002\u0002\u0002\u11a2\u11ae\u0007\u0082\u0002\u0002",
    "\u11a3\u11af\u0007\u01c5\u0002\u0002\u11a4\u11ab\u0005\u0196\u00cc\u0002",
    "\u11a5\u11a7\u0007\f\u0002\u0002\u11a6\u11a5\u0003\u0002\u0002\u0002",
    "\u11a6\u11a7\u0003\u0002\u0002\u0002\u11a7\u11a8\u0003\u0002\u0002\u0002",
    "\u11a8\u11aa\u0005\u0196\u00cc\u0002\u11a9\u11a6\u0003\u0002\u0002\u0002",
    "\u11aa\u11ad\u0003\u0002\u0002\u0002\u11ab\u11a9\u0003\u0002\u0002\u0002",
    "\u11ab\u11ac\u0003\u0002\u0002\u0002\u11ac\u11af\u0003\u0002\u0002\u0002",
    "\u11ad\u11ab\u0003\u0002\u0002\u0002\u11ae\u11a3\u0003\u0002\u0002\u0002",
    "\u11ae\u11a4\u0003\u0002\u0002\u0002\u11af\u11b1\u0003\u0002\u0002\u0002",
    "\u11b0\u11a2\u0003\u0002\u0002\u0002\u11b0\u11b1\u0003\u0002\u0002\u0002",
    "\u11b1\u11bb\u0003\u0002\u0002\u0002\u11b2\u11b8\u0007\u00b0\u0002\u0002",
    "\u11b3\u11b4\u0007C\u0002\u0002\u11b4\u11b7\u0007n\u0002\u0002\u11b5",
    "\u11b7\u0005\u0198\u00cd\u0002\u11b6\u11b3\u0003\u0002\u0002\u0002\u11b6",
    "\u11b5\u0003\u0002\u0002\u0002\u11b7\u11ba\u0003\u0002\u0002\u0002\u11b8",
    "\u11b6\u0003\u0002\u0002\u0002\u11b8\u11b9\u0003\u0002\u0002\u0002\u11b9",
    "\u11bc\u0003\u0002\u0002\u0002\u11ba\u11b8\u0003\u0002\u0002\u0002\u11bb",
    "\u11b2\u0003\u0002\u0002\u0002\u11bb\u11bc\u0003\u0002\u0002\u0002\u11bc",
    "\u0187\u0003\u0002\u0002\u0002\u11bd\u11be\u0007C\u0002\u0002\u11be",
    "\u11bf\u0007\u01e5\u0002\u0002\u11bf\u11c0\u0007l\u0002\u0002\u11c0",
    "\u11c1\u0005\u01fa\u00fe\u0002\u11c1\u11c2\u0007\u009f\u0002\u0002\u11c2",
    "\u11c7\u0005\u01fa\u00fe\u0002\u11c3\u11c4\u0007\u0402\u0002\u0002\u11c4",
    "\u11c6\u0005\u01fa\u00fe\u0002\u11c5\u11c3\u0003\u0002\u0002\u0002\u11c6",
    "\u11c9\u0003\u0002\u0002\u0002\u11c7\u11c5\u0003\u0002\u0002\u0002\u11c7",
    "\u11c8\u0003\u0002\u0002\u0002\u11c8\u11cd\u0003\u0002\u0002\u0002\u11c9",
    "\u11c7\u0003\u0002\u0002\u0002\u11ca\u11cb\u0007\u00b0\u0002\u0002\u11cb",
    "\u11cc\u0007C\u0002\u0002\u11cc\u11ce\u0007n\u0002\u0002\u11cd\u11ca",
    "\u0003\u0002\u0002\u0002\u11cd\u11ce\u0003\u0002\u0002\u0002\u11ce\u0189",
    "\u0003\u0002\u0002\u0002\u11cf\u11d0\u0007\u007f\u0002\u0002\u11d0\u11d1",
    "\u0007\u0240\u0002\u0002\u11d1\u11d6\u0005\u01a4\u00d3\u0002\u11d2\u11d3",
    "\u0007\u0402\u0002\u0002\u11d3\u11d5\u0005\u01a4\u00d3\u0002\u11d4\u11d2",
    "\u0003\u0002\u0002\u0002\u11d5\u11d8\u0003\u0002\u0002\u0002\u11d6\u11d4",
    "\u0003\u0002\u0002\u0002\u11d6\u11d7\u0003\u0002\u0002\u0002\u11d7\u018b",
    "\u0003\u0002\u0002\u0002\u11d8\u11d6\u0003\u0002\u0002\u0002\u11d9\u11da",
    "\u0007\u0086\u0002\u0002\u11da\u11df\u0005\u019e\u00d0\u0002\u11db\u11dc",
    "\u0007\u0402\u0002\u0002\u11dc\u11de\u0005\u019e\u00d0\u0002\u11dd\u11db",
    "\u0003\u0002\u0002\u0002\u11de\u11e1\u0003\u0002\u0002\u0002\u11df\u11dd",
    "\u0003\u0002\u0002\u0002\u11df\u11e0\u0003\u0002\u0002\u0002\u11e0\u11e2",
    "\u0003\u0002\u0002\u0002\u11e1\u11df\u0003\u0002\u0002\u0002\u11e2\u11e4",
    "\u0007l\u0002\u0002\u11e3\u11e5\t>\u0002\u0002\u11e4\u11e3\u0003\u0002",
    "\u0002\u0002\u11e4\u11e5\u0003\u0002\u0002\u0002\u11e5\u11e6\u0003\u0002",
    "\u0002\u0002\u11e6\u11e7\u0005\u01a2\u00d2\u0002\u11e7\u11e8\u0007?",
    "\u0002\u0002\u11e8\u11ed\u0005\u01fa\u00fe\u0002\u11e9\u11ea\u0007\u0402",
    "\u0002\u0002\u11ea\u11ec\u0005\u01fa\u00fe\u0002\u11eb\u11e9\u0003\u0002",
    "\u0002\u0002\u11ec\u11ef\u0003\u0002\u0002\u0002\u11ed\u11eb\u0003\u0002",
    "\u0002\u0002\u11ed\u11ee\u0003\u0002\u0002\u0002\u11ee\u1202\u0003\u0002",
    "\u0002\u0002\u11ef\u11ed\u0003\u0002\u0002\u0002\u11f0\u11f1\u0007\u0086",
    "\u0002\u0002\u11f1\u11f3\u0007\b\u0002\u0002\u11f2\u11f4\u0007\u0266",
    "\u0002\u0002\u11f3\u11f2\u0003\u0002\u0002\u0002\u11f3\u11f4\u0003\u0002",
    "\u0002\u0002\u11f4\u11f5\u0003\u0002\u0002\u0002\u11f5\u11f6\u0007\u0402",
    "\u0002\u0002\u11f6\u11f7\u0007C\u0002\u0002\u11f7\u11f8\u0007n\u0002",
    "\u0002\u11f8\u11f9\u0007?\u0002\u0002\u11f9\u11fe\u0005\u01fa\u00fe",
    "\u0002\u11fa\u11fb\u0007\u0402\u0002\u0002\u11fb\u11fd\u0005\u01fa\u00fe",
    "\u0002\u11fc\u11fa\u0003\u0002\u0002\u0002\u11fd\u1200\u0003\u0002\u0002",
    "\u0002\u11fe\u11fc\u0003\u0002\u0002\u0002\u11fe\u11ff\u0003\u0002\u0002",
    "\u0002\u11ff\u1202\u0003\u0002\u0002\u0002\u1200\u11fe\u0003\u0002\u0002",
    "\u0002\u1201\u11d9\u0003\u0002\u0002\u0002\u1201\u11f0\u0003\u0002\u0002",
    "\u0002\u1202\u018d\u0003\u0002\u0002\u0002\u1203\u1204\u0007\u0086\u0002",
    "\u0002\u1204\u1205\u0007\u01e5\u0002\u0002\u1205\u1206\u0007l\u0002",
    "\u0002\u1206\u1207\u0005\u01fa\u00fe\u0002\u1207\u1208\u0007?\u0002",
    "\u0002\u1208\u120d\u0005\u01fa\u00fe\u0002\u1209\u120a\u0007\u0402\u0002",
    "\u0002\u120a\u120c\u0005\u01fa\u00fe\u0002\u120b\u1209\u0003\u0002\u0002",
    "\u0002\u120c\u120f\u0003\u0002\u0002\u0002\u120d\u120b\u0003\u0002\u0002",
    "\u0002\u120d\u120e\u0003\u0002\u0002\u0002\u120e\u018f\u0003\u0002\u0002",
    "\u0002\u120f\u120d\u0003\u0002\u0002\u0002\u1210\u1211\u0007\u008c\u0002",
    "\u0002\u1211\u1214\u0007\u01d8\u0002\u0002\u1212\u1213\u0007<\u0002",
    "\u0002\u1213\u1215\u0005\u01fa\u00fe\u0002\u1214\u1212\u0003\u0002\u0002",
    "\u0002\u1214\u1215\u0003\u0002\u0002\u0002\u1215\u1216\u0003\u0002\u0002",
    "\u0002\u1216\u1219\u0007\u03f7\u0002\u0002\u1217\u121a\u0005\u0254\u012b",
    "\u0002\u1218\u121a\u0007\u040f\u0002\u0002\u1219\u1217\u0003\u0002\u0002",
    "\u0002\u1219\u1218\u0003\u0002\u0002\u0002\u121a\u0191\u0003\u0002\u0002",
    "\u0002\u121b\u121c\u0005\u01fa\u00fe\u0002\u121c\u121d\u0005\u019a\u00ce",
    "\u0002\u121d\u0193\u0003\u0002\u0002\u0002\u121e\u121f\u0005\u01fa\u00fe",
    "\u0002\u121f\u1220\u0007\u017c\u0002\u0002\u1220\u1221\u0007\u0012\u0002",
    "\u0002\u1221\u1222\u0007\u01d8\u0002\u0002\u1222\u1223\u0007\u040f\u0002",
    "\u0002\u1223\u1237\u0003\u0002\u0002\u0002\u1224\u1225\u0005\u01fa\u00fe",
    "\u0002\u1225\u1228\u0007\u017c\u0002\u0002\u1226\u1227\u0007\u00b0\u0002",
    "\u0002\u1227\u1229\u0005\u020a\u0106\u0002\u1228\u1226\u0003\u0002\u0002",
    "\u0002\u1228\u1229\u0003\u0002\u0002\u0002\u1229\u122a\u0003\u0002\u0002",
    "\u0002\u122a\u122b\u0007\u0012\u0002\u0002\u122b\u122c\u0007\u040f\u0002",
    "\u0002\u122c\u1237\u0003\u0002\u0002\u0002\u122d\u122e\u0005\u01fa\u00fe",
    "\u0002\u122e\u122f\u0007\u017c\u0002\u0002\u122f\u1230\u0007\u00b0\u0002",
    "\u0002\u1230\u1233\u0005\u020a\u0106\u0002\u1231\u1232\u0007\r\u0002",
    "\u0002\u1232\u1234\u0007\u040f\u0002\u0002\u1233\u1231\u0003\u0002\u0002",
    "\u0002\u1233\u1234\u0003\u0002\u0002\u0002\u1234\u1237\u0003\u0002\u0002",
    "\u0002\u1235\u1237\u0005\u01fa\u00fe\u0002\u1236\u121e\u0003\u0002\u0002",
    "\u0002\u1236\u1224\u0003\u0002\u0002\u0002\u1236\u122d\u0003\u0002\u0002",
    "\u0002\u1236\u1235\u0003\u0002\u0002\u0002\u1237\u0195\u0003\u0002\u0002",
    "\u0002\u1238\u1241\u0007\u0098\u0002\u0002\u1239\u1241\u0007\u024e\u0002",
    "\u0002\u123a\u123b\u0007\u012a\u0002\u0002\u123b\u1241\u0007\u040f\u0002",
    "\u0002\u123c\u123d\u0007\u018b\u0002\u0002\u123d\u1241\u0007\u040f\u0002",
    "\u0002\u123e\u123f\u0007\u0229\u0002\u0002\u123f\u1241\u0007\u040f\u0002",
    "\u0002\u1240\u1238\u0003\u0002\u0002\u0002\u1240\u1239\u0003\u0002\u0002",
    "\u0002\u1240\u123a\u0003\u0002\u0002\u0002\u1240\u123c\u0003\u0002\u0002",
    "\u0002\u1240\u123e\u0003\u0002\u0002\u0002\u1241\u0197\u0003\u0002\u0002",
    "\u0002\u1242\u1243\u0007\u01ad\u0002\u0002\u1243\u124b\u0005\u0212\u010a",
    "\u0002\u1244\u1245\u0007\u01b0\u0002\u0002\u1245\u124b\u0005\u0212\u010a",
    "\u0002\u1246\u1247\u0007\u01ac\u0002\u0002\u1247\u124b\u0005\u0212\u010a",
    "\u0002\u1248\u1249\u0007\u01b1\u0002\u0002\u1249\u124b\u0005\u0212\u010a",
    "\u0002\u124a\u1242\u0003\u0002\u0002\u0002\u124a\u1244\u0003\u0002\u0002",
    "\u0002\u124a\u1246\u0003\u0002\u0002\u0002\u124a\u1248\u0003\u0002\u0002",
    "\u0002\u124b\u0199\u0003\u0002\u0002\u0002\u124c\u124d\u0007\u01d8\u0002",
    "\u0002\u124d\u1254\u0007\u0163\u0002\u0002\u124e\u1255\u0007(\u0002",
    "\u0002\u124f\u1255\u0007\u01c1\u0002\u0002\u1250\u1251\u0007O\u0002",
    "\u0002\u1251\u1252\u0005\u0212\u010a\u0002\u1252\u1253\u0007\u0258\u0002",
    "\u0002\u1253\u1255\u0003\u0002\u0002\u0002\u1254\u124e\u0003\u0002\u0002",
    "\u0002\u1254\u124f\u0003\u0002\u0002\u0002\u1254\u1250\u0003\u0002\u0002",
    "\u0002\u1254\u1255\u0003\u0002\u0002\u0002\u1255\u019b\u0003\u0002\u0002",
    "\u0002\u1256\u1257\u0007\u0110\u0002\u0002\u1257\u1258\t?\u0002\u0002",
    "\u1258\u019d\u0003\u0002\u0002\u0002\u1259\u125e\u0005\u01a0\u00d1\u0002",
    "\u125a\u125b\u0007\u0400\u0002\u0002\u125b\u125c\u0005\u022c\u0117\u0002",
    "\u125c\u125d\u0007\u0401\u0002\u0002\u125d\u125f\u0003\u0002\u0002\u0002",
    "\u125e\u125a\u0003\u0002\u0002\u0002\u125e\u125f\u0003\u0002\u0002\u0002",
    "\u125f\u019f\u0003\u0002\u0002\u0002\u1260\u1262\u0007\b\u0002\u0002",
    "\u1261\u1263\u0007\u0266\u0002\u0002\u1262\u1261\u0003\u0002\u0002\u0002",
    "\u1262\u1263\u0003\u0002\u0002\u0002\u1263\u12a8\u0003\u0002\u0002\u0002",
    "\u1264\u1266\u0007\t\u0002\u0002\u1265\u1267\u0007\u025f\u0002\u0002",
    "\u1266\u1265\u0003\u0002\u0002\u0002\u1266\u1267\u0003\u0002\u0002\u0002",
    "\u1267\u12a8\u0003\u0002\u0002\u0002\u1268\u1270\u0007 \u0002\u0002",
    "\u1269\u126a\u0007\u0231\u0002\u0002\u126a\u1271\u0007\u025e\u0002\u0002",
    "\u126b\u1271\u0007\u025f\u0002\u0002\u126c\u1271\u0007\u0246\u0002\u0002",
    "\u126d\u1271\u0007\u0240\u0002\u0002\u126e\u1271\u0007\u0230\u0002\u0002",
    "\u126f\u1271\u0007\u01ff\u0002\u0002\u1270\u1269\u0003\u0002\u0002\u0002",
    "\u1270\u126b\u0003\u0002\u0002\u0002\u1270\u126c\u0003\u0002\u0002\u0002",
    "\u1270\u126d\u0003\u0002\u0002\u0002\u1270\u126e\u0003\u0002\u0002\u0002",
    "\u1270\u126f\u0003\u0002\u0002\u0002\u1270\u1271\u0003\u0002\u0002\u0002",
    "\u1271\u12a8\u0003\u0002\u0002\u0002\u1272\u12a8\u0007*\u0002\u0002",
    "\u1273\u1275\u00071\u0002\u0002\u1274\u1276\u0007\u01ff\u0002\u0002",
    "\u1275\u1274\u0003\u0002\u0002\u0002\u1275\u1276\u0003\u0002\u0002\u0002",
    "\u1276\u12a8\u0003\u0002\u0002\u0002\u1277\u12a8\u0007\u015e\u0002\u0002",
    "\u1278\u12a8\u0007\u0260\u0002\u0002\u1279\u12a8\u0007\u0261\u0002\u0002",
    "\u127a\u127b\u0007C\u0002\u0002\u127b\u12a8\u0007n\u0002\u0002\u127c",
    "\u12a8\u0007J\u0002\u0002\u127d\u12a8\u0007N\u0002\u0002\u127e\u127f",
    "\u0007_\u0002\u0002\u127f\u12a8\u0007\u025e\u0002\u0002\u1280\u12a8",
    "\u0007\u0262\u0002\u0002\u1281\u12a8\u0007\u01e5\u0002\u0002\u1282\u12a8",
    "\u0007|\u0002\u0002\u1283\u12a8\u0007\u0263\u0002\u0002\u1284\u1285",
    "\u0007\u01fa\u0002\u0002\u1285\u12a8\t@\u0002\u0002\u1286\u12a8\u0007",
    "\u008b\u0002\u0002\u1287\u1288\u0007\u008e\u0002\u0002\u1288\u12a8\t",
    "A\u0002\u0002\u1289\u12a8\u0007\u0264\u0002\u0002\u128a\u12a8\u0007",
    "\u0265\u0002\u0002\u128b\u12a8\u0007\u00a1\u0002\u0002\u128c\u12a8\u0007",
    "\u00a8\u0002\u0002\u128d\u12a8\u0007\u00a9\u0002\u0002\u128e\u12a8\u0007",
    "\u0268\u0002\u0002\u128f\u12a8\u0007\u0269\u0002\u0002\u1290\u12a8\u0007",
    "\u026a\u0002\u0002\u1291\u12a8\u0007\u026b\u0002\u0002\u1292\u12a8\u0007",
    "\u026c\u0002\u0002\u1293\u12a8\u0007\u026d\u0002\u0002\u1294\u12a8\u0007",
    "\u026e\u0002\u0002\u1295\u12a8\u0007\u026f\u0002\u0002\u1296\u12a8\u0007",
    "\u0270\u0002\u0002\u1297\u12a8\u0007\u0271\u0002\u0002\u1298\u12a8\u0007",
    "\u0272\u0002\u0002\u1299\u12a8\u0007\u0273\u0002\u0002\u129a\u12a8\u0007",
    "\u0274\u0002\u0002\u129b\u12a8\u0007\u0275\u0002\u0002\u129c\u12a8\u0007",
    "\u0276\u0002\u0002\u129d\u12a8\u0007\u0277\u0002\u0002\u129e\u12a8\u0007",
    "\u0278\u0002\u0002\u129f\u12a8\u0007\u0279\u0002\u0002\u12a0\u12a8\u0007",
    "\u027a\u0002\u0002\u12a1\u12a8\u0007\u027b\u0002\u0002\u12a2\u12a8\u0007",
    "\u027c\u0002\u0002\u12a3\u12a8\u0007\u027d\u0002\u0002\u12a4\u12a8\u0007",
    "\u027e\u0002\u0002\u12a5\u12a8\u0007\u027f\u0002\u0002\u12a6\u12a8\u0007",
    "\u0280\u0002\u0002\u12a7\u1260\u0003\u0002\u0002\u0002\u12a7\u1264\u0003",
    "\u0002\u0002\u0002\u12a7\u1268\u0003\u0002\u0002\u0002\u12a7\u1272\u0003",
    "\u0002\u0002\u0002\u12a7\u1273\u0003\u0002\u0002\u0002\u12a7\u1277\u0003",
    "\u0002\u0002\u0002\u12a7\u1278\u0003\u0002\u0002\u0002\u12a7\u1279\u0003",
    "\u0002\u0002\u0002\u12a7\u127a\u0003\u0002\u0002\u0002\u12a7\u127c\u0003",
    "\u0002\u0002\u0002\u12a7\u127d\u0003\u0002\u0002\u0002\u12a7\u127e\u0003",
    "\u0002\u0002\u0002\u12a7\u1280\u0003\u0002\u0002\u0002\u12a7\u1281\u0003",
    "\u0002\u0002\u0002\u12a7\u1282\u0003\u0002\u0002\u0002\u12a7\u1283\u0003",
    "\u0002\u0002\u0002\u12a7\u1284\u0003\u0002\u0002\u0002\u12a7\u1286\u0003",
    "\u0002\u0002\u0002\u12a7\u1287\u0003\u0002\u0002\u0002\u12a7\u1289\u0003",
    "\u0002\u0002\u0002\u12a7\u128a\u0003\u0002\u0002\u0002\u12a7\u128b\u0003",
    "\u0002\u0002\u0002\u12a7\u128c\u0003\u0002\u0002\u0002\u12a7\u128d\u0003",
    "\u0002\u0002\u0002\u12a7\u128e\u0003\u0002\u0002\u0002\u12a7\u128f\u0003",
    "\u0002\u0002\u0002\u12a7\u1290\u0003\u0002\u0002\u0002\u12a7\u1291\u0003",
    "\u0002\u0002\u0002\u12a7\u1292\u0003\u0002\u0002\u0002\u12a7\u1293\u0003",
    "\u0002\u0002\u0002\u12a7\u1294\u0003\u0002\u0002\u0002\u12a7\u1295\u0003",
    "\u0002\u0002\u0002\u12a7\u1296\u0003\u0002\u0002\u0002\u12a7\u1297\u0003",
    "\u0002\u0002\u0002\u12a7\u1298\u0003\u0002\u0002\u0002\u12a7\u1299\u0003",
    "\u0002\u0002\u0002\u12a7\u129a\u0003\u0002\u0002\u0002\u12a7\u129b\u0003",
    "\u0002\u0002\u0002\u12a7\u129c\u0003\u0002\u0002\u0002\u12a7\u129d\u0003",
    "\u0002\u0002\u0002\u12a7\u129e\u0003\u0002\u0002\u0002\u12a7\u129f\u0003",
    "\u0002\u0002\u0002\u12a7\u12a0\u0003\u0002\u0002\u0002\u12a7\u12a1\u0003",
    "\u0002\u0002\u0002\u12a7\u12a2\u0003\u0002\u0002\u0002\u12a7\u12a3\u0003",
    "\u0002\u0002\u0002\u12a7\u12a4\u0003\u0002\u0002\u0002\u12a7\u12a5\u0003",
    "\u0002\u0002\u0002\u12a7\u12a6\u0003\u0002\u0002\u0002\u12a8\u01a1\u0003",
    "\u0002\u0002\u0002\u12a9\u12ba\u0007\u03ef\u0002\u0002\u12aa\u12ab\u0007",
    "\u03ef\u0002\u0002\u12ab\u12ac\u0007\u03ff\u0002\u0002\u12ac\u12ba\u0007",
    "\u03ef\u0002\u0002\u12ad\u12ae\u0005\u020c\u0107\u0002\u12ae\u12af\u0007",
    "\u03ff\u0002\u0002\u12af\u12b0\u0007\u03ef\u0002\u0002\u12b0\u12ba\u0003",
    "\u0002\u0002\u0002\u12b1\u12b2\u0005\u020c\u0107\u0002\u12b2\u12b3\u0007",
    "\u03ff\u0002\u0002\u12b3\u12b4\u0005\u020c\u0107\u0002\u12b4\u12ba\u0003",
    "\u0002\u0002\u0002\u12b5\u12b6\u0005\u020c\u0107\u0002\u12b6\u12b7\u0005",
    "\u0210\u0109\u0002\u12b7\u12ba\u0003\u0002\u0002\u0002\u12b8\u12ba\u0005",
    "\u020c\u0107\u0002\u12b9\u12a9\u0003\u0002\u0002\u0002\u12b9\u12aa\u0003",
    "\u0002\u0002\u0002\u12b9\u12ad\u0003\u0002\u0002\u0002\u12b9\u12b1\u0003",
    "\u0002\u0002\u0002\u12b9\u12b5\u0003\u0002\u0002\u0002\u12b9\u12b8\u0003",
    "\u0002\u0002\u0002\u12ba\u01a3\u0003\u0002\u0002\u0002\u12bb\u12bc\u0005",
    "\u01fa\u00fe\u0002\u12bc\u12bd\u0007\u009f\u0002\u0002\u12bd\u12be\u0005",
    "\u01fa\u00fe\u0002\u12be\u01a5\u0003\u0002\u0002\u0002\u12bf\u12c1\u0007",
    "\u000b\u0002\u0002\u12c0\u12c2\tB\u0002\u0002\u12c1\u12c0\u0003\u0002",
    "\u0002\u0002\u12c1\u12c2\u0003\u0002\u0002\u0002\u12c2\u12c3\u0003\u0002",
    "\u0002\u0002\u12c3\u12c4\u0007\u009c\u0002\u0002\u12c4\u12c5\u0005\u022e",
    "\u0118\u0002\u12c5\u01a7\u0003\u0002\u0002\u0002\u12c6\u12c7\u0007\u0019",
    "\u0002\u0002\u12c7\u12c8\u0007\u009c\u0002\u0002\u12c8\u12cc\u0005\u022e",
    "\u0118\u0002\u12c9\u12cb\u0005\u01b0\u00d9\u0002\u12ca\u12c9\u0003\u0002",
    "\u0002\u0002\u12cb\u12ce\u0003\u0002\u0002\u0002\u12cc\u12ca\u0003\u0002",
    "\u0002\u0002\u12cc\u12cd\u0003\u0002\u0002\u0002\u12cd\u01a9\u0003\u0002",
    "\u0002\u0002\u12ce\u12cc\u0003\u0002\u0002\u0002\u12cf\u12d0\u0007\u0128",
    "\u0002\u0002\u12d0\u12d1\u0007\u009c\u0002\u0002\u12d1\u12d3\u0005\u022e",
    "\u0118\u0002\u12d2\u12d4\tC\u0002\u0002\u12d3\u12d2\u0003\u0002\u0002",
    "\u0002\u12d3\u12d4\u0003\u0002\u0002\u0002\u12d4\u01ab\u0003\u0002\u0002",
    "\u0002\u12d5\u12d7\u0007m\u0002\u0002\u12d6\u12d8\tB\u0002\u0002\u12d7",
    "\u12d6\u0003\u0002\u0002\u0002\u12d7\u12d8\u0003\u0002\u0002\u0002\u12d8",
    "\u12d9\u0003\u0002\u0002\u0002\u12d9\u12da\tD\u0002\u0002\u12da\u12db",
    "\u0005\u022e\u0118\u0002\u12db\u01ad\u0003\u0002\u0002\u0002\u12dc\u12de",
    "\u0007\u01f2\u0002\u0002\u12dd\u12df\tB\u0002\u0002\u12de\u12dd\u0003",
    "\u0002\u0002\u0002\u12de\u12df\u0003\u0002\u0002\u0002\u12df\u12e0\u0003",
    "\u0002\u0002\u0002\u12e0\u12e1\u0007\u009c\u0002\u0002\u12e1\u12e3\u0005",
    "\u022e\u0118\u0002\u12e2\u12e4\u0007\u01e7\u0002\u0002\u12e3\u12e2\u0003",
    "\u0002\u0002\u0002\u12e3\u12e4\u0003\u0002\u0002\u0002\u12e4\u12e6\u0003",
    "\u0002\u0002\u0002\u12e5\u12e7\u0007\u0165\u0002\u0002\u12e6\u12e5\u0003",
    "\u0002\u0002\u0002\u12e6\u12e7\u0003\u0002\u0002\u0002\u12e7\u12e9\u0003",
    "\u0002\u0002\u0002\u12e8\u12ea\u0007\u0241\u0002\u0002\u12e9\u12e8\u0003",
    "\u0002\u0002\u0002\u12e9\u12ea\u0003\u0002\u0002\u0002\u12ea\u01af\u0003",
    "\u0002\u0002\u0002\u12eb\u12ec\u0007<\u0002\u0002\u12ec\u12f3\u0007",
    "\u023f\u0002\u0002\u12ed\u12f3\u0007\u01e7\u0002\u0002\u12ee\u12f3\u0007",
    "\u0167\u0002\u0002\u12ef\u12f3\u0007\u01b2\u0002\u0002\u12f0\u12f3\u0007",
    "\u0165\u0002\u0002\u12f1\u12f3\u0007\u0126\u0002\u0002\u12f2\u12eb\u0003",
    "\u0002\u0002\u0002\u12f2\u12ed\u0003\u0002\u0002\u0002\u12f2\u12ee\u0003",
    "\u0002\u0002\u0002\u12f2\u12ef\u0003\u0002\u0002\u0002\u12f2\u12f0\u0003",
    "\u0002\u0002\u0002\u12f2\u12f1\u0003\u0002\u0002\u0002\u12f3\u01b1\u0003",
    "\u0002\u0002\u0002\u12f4\u12f6\u0007 \u0002\u0002\u12f5\u12f7\u0007",
    "\u0113\u0002\u0002\u12f6\u12f5\u0003\u0002\u0002\u0002\u12f6\u12f7\u0003",
    "\u0002\u0002\u0002\u12f7\u12f8\u0003\u0002\u0002\u0002\u12f8\u12f9\u0007",
    "\u0172\u0002\u0002\u12f9\u12fa\u0005\u020c\u0107\u0002\u12fa\u12fb\u0007",
    "\u01fe\u0002\u0002\u12fb\u12fc\tE\u0002\u0002\u12fc\u12fd\u0007\u0214",
    "\u0002\u0002\u12fd\u12fe\u0007\u040f\u0002\u0002\u12fe\u01b3\u0003\u0002",
    "\u0002\u0002\u12ff\u1300\u0007\u0183\u0002\u0002\u1300\u1301\u0007\u01da",
    "\u0002\u0002\u1301\u1302\u0005\u020c\u0107\u0002\u1302\u1303\u0007\u0214",
    "\u0002\u0002\u1303\u1304\u0007\u040f\u0002\u0002\u1304\u01b5\u0003\u0002",
    "\u0002\u0002\u1305\u1306\u0007\u023c\u0002\u0002\u1306\u1307\u0007\u01da",
    "\u0002\u0002\u1307\u1308\u0005\u020c\u0107\u0002\u1308\u01b7\u0003\u0002",
    "\u0002\u0002\u1309\u130a\u0007\u008c\u0002\u0002\u130a\u130b\u0005\u01bc",
    "\u00df\u0002\u130b\u130c\tF\u0002\u0002\u130c\u1314\u0005\u025a\u012e",
    "\u0002\u130d\u130e\u0007\u0402\u0002\u0002\u130e\u130f\u0005\u01bc\u00df",
    "\u0002\u130f\u1310\tF\u0002\u0002\u1310\u1311\u0005\u025a\u012e\u0002",
    "\u1311\u1313\u0003\u0002\u0002\u0002\u1312\u130d\u0003\u0002\u0002\u0002",
    "\u1313\u1316\u0003\u0002\u0002\u0002\u1314\u1312\u0003\u0002\u0002\u0002",
    "\u1314\u1315\u0003\u0002\u0002\u0002\u1315\u133d\u0003\u0002\u0002\u0002",
    "\u1316\u1314\u0003\u0002\u0002\u0002\u1317\u131b\u0007\u008c\u0002\u0002",
    "\u1318\u1319\u0007\u0018\u0002\u0002\u1319\u131c\u0007\u008c\u0002\u0002",
    "\u131a\u131c\u0007\u02df\u0002\u0002\u131b\u1318\u0003\u0002\u0002\u0002",
    "\u131b\u131a\u0003\u0002\u0002\u0002\u131c\u131f\u0003\u0002\u0002\u0002",
    "\u131d\u1320\u0005\u01fe\u0100\u0002\u131e\u1320\u0007(\u0002\u0002",
    "\u131f\u131d\u0003\u0002\u0002\u0002\u131f\u131e\u0003\u0002\u0002\u0002",
    "\u1320\u133d\u0003\u0002\u0002\u0002\u1321\u1322\u0007\u008c\u0002\u0002",
    "\u1322\u1329\u0007\u01bf\u0002\u0002\u1323\u1326\u0005\u01fe\u0100\u0002",
    "\u1324\u1325\u0007\u001a\u0002\u0002\u1325\u1327\u0005\u0200\u0101\u0002",
    "\u1326\u1324\u0003\u0002\u0002\u0002\u1326\u1327\u0003\u0002\u0002\u0002",
    "\u1327\u132a\u0003\u0002\u0002\u0002\u1328\u132a\u0007(\u0002\u0002",
    "\u1329\u1323\u0003\u0002\u0002\u0002\u1329\u1328\u0003\u0002\u0002\u0002",
    "\u132a\u133d\u0003\u0002\u0002\u0002\u132b\u133d\u0005\u0190\u00c9\u0002",
    "\u132c\u133d\u0005\u0114\u008b\u0002\u132d\u133d\u0005\u0112\u008a\u0002",
    "\u132e\u132f\u0007\u008c\u0002\u0002\u132f\u1330\u0005\u01f2\u00fa\u0002",
    "\u1330\u1331\tF\u0002\u0002\u1331\u1339\u0005\u025a\u012e\u0002\u1332",
    "\u1333\u0007\u0402\u0002\u0002\u1333\u1334\u0005\u01f2\u00fa\u0002\u1334",
    "\u1335\tF\u0002\u0002\u1335\u1336\u0005\u025a\u012e\u0002\u1336\u1338",
    "\u0003\u0002\u0002\u0002\u1337\u1332\u0003\u0002\u0002\u0002\u1338\u133b",
    "\u0003\u0002\u0002\u0002\u1339\u1337\u0003\u0002\u0002\u0002\u1339\u133a",
    "\u0003\u0002\u0002\u0002\u133a\u133d\u0003\u0002\u0002\u0002\u133b\u1339",
    "\u0003\u0002\u0002\u0002\u133c\u1309\u0003\u0002\u0002\u0002\u133c\u1317",
    "\u0003\u0002\u0002\u0002\u133c\u1321\u0003\u0002\u0002\u0002\u133c\u132b",
    "\u0003\u0002\u0002\u0002\u133c\u132c\u0003\u0002\u0002\u0002\u133c\u132d",
    "\u0003\u0002\u0002\u0002\u133c\u132e\u0003\u0002\u0002\u0002\u133d\u01b9",
    "\u0003\u0002\u0002\u0002\u133e\u133f\u0007\u008e\u0002\u0002\u133f\u1340",
    "\t4\u0002\u0002\u1340\u13d6\u0007\u0196\u0002\u0002\u1341\u1342\u0007",
    "\u008e\u0002\u0002\u1342\u1343\tG\u0002\u0002\u1343\u1346\u0007\u015f",
    "\u0002\u0002\u1344\u1345\u0007I\u0002\u0002\u1345\u1347\u0007\u040f",
    "\u0002\u0002\u1346\u1344\u0003\u0002\u0002\u0002\u1346\u1347\u0003\u0002",
    "\u0002\u0002\u1347\u134a\u0003\u0002\u0002\u0002\u1348\u1349\u0007?",
    "\u0002\u0002\u1349\u134b\u0005\u0212\u010a\u0002\u134a\u1348\u0003\u0002",
    "\u0002\u0002\u134a\u134b\u0003\u0002\u0002\u0002\u134b\u1353\u0003\u0002",
    "\u0002\u0002\u134c\u1350\u0007[\u0002\u0002\u134d\u134e\u0005\u0212",
    "\u010a\u0002\u134e\u134f\u0007\u0402\u0002\u0002\u134f\u1351\u0003\u0002",
    "\u0002\u0002\u1350\u134d\u0003\u0002\u0002\u0002\u1350\u1351\u0003\u0002",
    "\u0002\u0002\u1351\u1352\u0003\u0002\u0002\u0002\u1352\u1354\u0005\u0212",
    "\u010a\u0002\u1353\u134c\u0003\u0002\u0002\u0002\u1353\u1354\u0003\u0002",
    "\u0002\u0002\u1354\u13d6\u0003\u0002\u0002\u0002\u1355\u1356\u0007\u008e",
    "\u0002\u0002\u1356\u1358\u0005\u01be\u00e0\u0002\u1357\u1359\u0005\u01c0",
    "\u00e1\u0002\u1358\u1357\u0003\u0002\u0002\u0002\u1358\u1359\u0003\u0002",
    "\u0002\u0002\u1359\u13d6\u0003\u0002\u0002\u0002\u135a\u135c\u0007\u008e",
    "\u0002\u0002\u135b\u135d\u0007\u0171\u0002\u0002\u135c\u135b\u0003\u0002",
    "\u0002\u0002\u135c\u135d\u0003\u0002\u0002\u0002\u135d\u135e\u0003\u0002",
    "\u0002\u0002\u135e\u135f\t&\u0002\u0002\u135f\u1360\tH\u0002\u0002\u1360",
    "\u1363\u0005\u01f4\u00fb\u0002\u1361\u1362\tH\u0002\u0002\u1362\u1364",
    "\u0005\u020c\u0107\u0002\u1363\u1361\u0003\u0002\u0002\u0002\u1363\u1364",
    "\u0003\u0002\u0002\u0002\u1364\u1366\u0003\u0002\u0002\u0002\u1365\u1367",
    "\u0005\u01c0\u00e1\u0002\u1366\u1365\u0003\u0002\u0002\u0002\u1366\u1367",
    "\u0003\u0002\u0002\u0002\u1367\u13d6\u0003\u0002\u0002\u0002\u1368\u1369",
    "\u0007\u008e\u0002\u0002\u1369\u136a\u0007 \u0002\u0002\u136a\u136c",
    "\t\u0002\u0002\u0002\u136b\u136d\u0005\u0244\u0123\u0002\u136c\u136b",
    "\u0003\u0002\u0002\u0002\u136c\u136d\u0003\u0002\u0002\u0002\u136d\u136e",
    "\u0003\u0002\u0002\u0002\u136e\u13d6\u0005\u020c\u0107\u0002\u136f\u1370",
    "\u0007\u008e\u0002\u0002\u1370\u1371\u0007 \u0002\u0002\u1371\u1372",
    "\tI\u0002\u0002\u1372\u13d6\u0005\u01f2\u00fa\u0002\u1373\u1374\u0007",
    "\u008e\u0002\u0002\u1374\u1375\u0007 \u0002\u0002\u1375\u1376\u0007",
    "\u0240\u0002\u0002\u1376\u13d6\u0005\u01fa\u00fe\u0002\u1377\u1378\u0007",
    "\u008e\u0002\u0002\u1378\u1379\u0007\u0158\u0002\u0002\u1379\u137a\u0005",
    "\u0202\u0102\u0002\u137a\u137b\tJ\u0002\u0002\u137b\u13d6\u0003\u0002",
    "\u0002\u0002\u137c\u137d\u0007\u008e\u0002\u0002\u137d\u13d6\u0005\u01c2",
    "\u00e2\u0002\u137e\u137f\u0007\u008e\u0002\u0002\u137f\u1380\tK\u0002",
    "\u0002\u1380\u1384\u0007[\u0002\u0002\u1381\u1382\u0005\u0212\u010a",
    "\u0002\u1382\u1383\u0007\u0402\u0002\u0002\u1383\u1385\u0003\u0002\u0002",
    "\u0002\u1384\u1381\u0003\u0002\u0002\u0002\u1384\u1385\u0003\u0002\u0002",
    "\u0002\u1385\u1386\u0003\u0002\u0002\u0002\u1386\u13d6\u0005\u0212\u010a",
    "\u0002\u1387\u1388\u0007\u008e\u0002\u0002\u1388\u1389\u0007\u00f1\u0002",
    "\u0002\u1389\u138a\u0007\u0400\u0002\u0002\u138a\u138b\u0007\u03ef\u0002",
    "\u0002\u138b\u138c\u0007\u0401\u0002\u0002\u138c\u13d6\tK\u0002\u0002",
    "\u138d\u138e\u0007\u008e\u0002\u0002\u138e\u1391\u0005\u01c4\u00e3\u0002",
    "\u138f\u1390\tH\u0002\u0002\u1390\u1392\u0005\u020c\u0107\u0002\u1391",
    "\u138f\u0003\u0002\u0002\u0002\u1391\u1392\u0003\u0002\u0002\u0002\u1392",
    "\u1394\u0003\u0002\u0002\u0002\u1393\u1395\u0005\u01c0\u00e1\u0002\u1394",
    "\u1393\u0003\u0002\u0002\u0002\u1394\u1395\u0003\u0002\u0002\u0002\u1395",
    "\u13d6\u0003\u0002\u0002\u0002\u1396\u1397\u0007\u008e\u0002\u0002\u1397",
    "\u1398\tL\u0002\u0002\u1398\u1399\u0007\u012f\u0002\u0002\u1399\u13d6",
    "\u0005\u01f2\u00fa\u0002\u139a\u139b\u0007\u008e\u0002\u0002\u139b\u139e",
    "\u0007\u0175\u0002\u0002\u139c\u139d\u0007<\u0002\u0002\u139d\u139f",
    "\u0005\u01fa\u00fe\u0002\u139e\u139c\u0003\u0002\u0002\u0002\u139e\u139f",
    "\u0003\u0002\u0002\u0002\u139f\u13d6\u0003\u0002\u0002\u0002\u13a0\u13a1",
    "\u0007\u008e\u0002\u0002\u13a1\u13a2\tM\u0002\u0002\u13a2\u13a3\tH\u0002",
    "\u0002\u13a3\u13a6\u0005\u01f4\u00fb\u0002\u13a4\u13a5\tH\u0002\u0002",
    "\u13a5\u13a7\u0005\u020c\u0107\u0002\u13a6\u13a4\u0003\u0002\u0002\u0002",
    "\u13a6\u13a7\u0003\u0002\u0002\u0002\u13a7\u13aa\u0003\u0002\u0002\u0002",
    "\u13a8\u13a9\u0007\u00ae\u0002\u0002\u13a9\u13ab\u0005\u025a\u012e\u0002",
    "\u13aa\u13a8\u0003\u0002\u0002\u0002\u13aa\u13ab\u0003\u0002\u0002\u0002",
    "\u13ab\u13d6\u0003\u0002\u0002\u0002\u13ac\u13ad\u0007\u008e\u0002\u0002",
    "\u13ad\u13ae\u0007\u01ce\u0002\u0002\u13ae\u13b1\u0007\u025e\u0002\u0002",
    "\u13af\u13b0\tH\u0002\u0002\u13b0\u13b2\u0005\u020c\u0107\u0002\u13b1",
    "\u13af\u0003\u0002\u0002\u0002\u13b1\u13b2\u0003\u0002\u0002\u0002\u13b2",
    "\u13b4\u0003\u0002\u0002\u0002\u13b3\u13b5\u0005\u01c0\u00e1\u0002\u13b4",
    "\u13b3\u0003\u0002\u0002\u0002\u13b4\u13b5\u0003\u0002\u0002\u0002\u13b5",
    "\u13d6\u0003\u0002\u0002\u0002\u13b6\u13b7\u0007\u008e\u0002\u0002\u13b7",
    "\u13b8\u0007\u01e3\u0002\u0002\u13b8\u13bd\u0005\u01c6\u00e4\u0002\u13b9",
    "\u13ba\u0007\u0402\u0002\u0002\u13ba\u13bc\u0005\u01c6\u00e4\u0002\u13bb",
    "\u13b9\u0003\u0002\u0002\u0002\u13bc\u13bf\u0003\u0002\u0002\u0002\u13bd",
    "\u13bb\u0003\u0002\u0002\u0002\u13bd\u13be\u0003\u0002\u0002\u0002\u13be",
    "\u13c3\u0003\u0002\u0002\u0002\u13bf\u13bd\u0003\u0002\u0002\u0002\u13c0",
    "\u13c1\u0007<\u0002\u0002\u13c1\u13c2\u0007\u01e6\u0002\u0002\u13c2",
    "\u13c4\u0005\u0212\u010a\u0002\u13c3\u13c0\u0003\u0002\u0002\u0002\u13c3",
    "\u13c4\u0003\u0002\u0002\u0002\u13c4\u13c5\u0003\u0002\u0002\u0002\u13c5",
    "\u13c9\u0007[\u0002\u0002\u13c6\u13c7\u0005\u0212\u010a\u0002\u13c7",
    "\u13c8\u0007\u0402\u0002\u0002\u13c8\u13ca\u0003\u0002\u0002\u0002\u13c9",
    "\u13c6\u0003\u0002\u0002\u0002\u13c9\u13ca\u0003\u0002\u0002\u0002\u13ca",
    "\u13cb\u0003\u0002\u0002\u0002\u13cb\u13cc\u0005\u0212\u010a\u0002\u13cc",
    "\u13d6\u0003\u0002\u0002\u0002\u13cd\u13ce\u0007\u008e\u0002\u0002\u13ce",
    "\u13cf\u0007\u020f\u0002\u0002\u13cf\u13d3\u0007\u0223\u0002\u0002\u13d0",
    "\u13d1\u0007<\u0002\u0002\u13d1\u13d2\u0007\u0127\u0002\u0002\u13d2",
    "\u13d4\u0007\u040f\u0002\u0002\u13d3\u13d0\u0003\u0002\u0002\u0002\u13d3",
    "\u13d4\u0003\u0002\u0002\u0002\u13d4\u13d6\u0003\u0002\u0002\u0002\u13d5",
    "\u133e\u0003\u0002\u0002\u0002\u13d5\u1341\u0003\u0002\u0002\u0002\u13d5",
    "\u1355\u0003\u0002\u0002\u0002\u13d5\u135a\u0003\u0002\u0002\u0002\u13d5",
    "\u1368\u0003\u0002\u0002\u0002\u13d5\u136f\u0003\u0002\u0002\u0002\u13d5",
    "\u1373\u0003\u0002\u0002\u0002\u13d5\u1377\u0003\u0002\u0002\u0002\u13d5",
    "\u137c\u0003\u0002\u0002\u0002\u13d5\u137e\u0003\u0002\u0002\u0002\u13d5",
    "\u1387\u0003\u0002\u0002\u0002\u13d5\u138d\u0003\u0002\u0002\u0002\u13d5",
    "\u1396\u0003\u0002\u0002\u0002\u13d5\u139a\u0003\u0002\u0002\u0002\u13d5",
    "\u13a0\u0003\u0002\u0002\u0002\u13d5\u13ac\u0003\u0002\u0002\u0002\u13d5",
    "\u13b6\u0003\u0002\u0002\u0002\u13d5\u13cd\u0003\u0002\u0002\u0002\u13d6",
    "\u01bb\u0003\u0002\u0002\u0002\u13d7\u13e2\u0007\u041b\u0002\u0002\u13d8",
    "\u13e2\u0007\u041c\u0002\u0002\u13d9\u13da\u0007\u0404\u0002\u0002\u13da",
    "\u13dc\u0007\u0404\u0002\u0002\u13db\u13d9\u0003\u0002\u0002\u0002\u13db",
    "\u13dc\u0003\u0002\u0002\u0002\u13dc\u13dd\u0003\u0002\u0002\u0002\u13dd",
    "\u13df\tN\u0002\u0002\u13de\u13db\u0003\u0002\u0002\u0002\u13de\u13df",
    "\u0003\u0002\u0002\u0002\u13df\u13e0\u0003\u0002\u0002\u0002\u13e0\u13e2",
    "\u0005\u020c\u0107\u0002\u13e1\u13d7\u0003\u0002\u0002\u0002\u13e1\u13d8",
    "\u0003\u0002\u0002\u0002\u13e1\u13de\u0003\u0002\u0002\u0002\u13e2\u01bd",
    "\u0003\u0002\u0002\u0002\u13e3\u13e4\u0007\u0018\u0002\u0002\u13e4\u13f1",
    "\u0007\u008c\u0002\u0002\u13e5\u13f1\u0007\u02e2\u0002\u0002\u13e6\u13f1",
    "\u0007&\u0002\u0002\u13e7\u13f1\u0007\u008a\u0002\u0002\u13e8\u13e9",
    "\u0007\u0172\u0002\u0002\u13e9\u13f1\u0007\u0223\u0002\u0002\u13ea\u13eb",
    "\u0007w\u0002\u0002\u13eb\u13f1\u0007\u0223\u0002\u0002\u13ec\u13ee",
    "\t3\u0002\u0002\u13ed\u13ec\u0003\u0002\u0002\u0002\u13ed\u13ee\u0003",
    "\u0002\u0002\u0002\u13ee\u13ef\u0003\u0002\u0002\u0002\u13ef\u13f1\t",
    "O\u0002\u0002\u13f0\u13e3\u0003\u0002\u0002\u0002\u13f0\u13e5\u0003",
    "\u0002\u0002\u0002\u13f0\u13e6\u0003\u0002\u0002\u0002\u13f0\u13e7\u0003",
    "\u0002\u0002\u0002\u13f0\u13e8\u0003\u0002\u0002\u0002\u13f0\u13ea\u0003",
    "\u0002\u0002\u0002\u13f0\u13ed\u0003\u0002\u0002\u0002\u13f1\u01bf\u0003",
    "\u0002\u0002\u0002\u13f2\u13f3\u0007Z\u0002\u0002\u13f3\u13f7\u0007",
    "\u040f\u0002\u0002\u13f4\u13f5\u0007\u00ae\u0002\u0002\u13f5\u13f7\u0005",
    "\u025a\u012e\u0002\u13f6\u13f2\u0003\u0002\u0002\u0002\u13f6\u13f4\u0003",
    "\u0002\u0002\u0002\u13f7\u01c1\u0003\u0002\u0002\u0002\u13f8\u13fa\u0007",
    "\u0225\u0002\u0002\u13f9\u13f8\u0003\u0002\u0002\u0002\u13f9\u13fa\u0003",
    "\u0002\u0002\u0002\u13fa\u13fb\u0003\u0002\u0002\u0002\u13fb\u140a\u0007",
    "\u0159\u0002\u0002\u13fc\u13fd\u0007\u0197\u0002\u0002\u13fd\u140a\u0007",
    "\u0223\u0002\u0002\u13fe\u140a\u0007\u01dc\u0002\u0002\u13ff\u140a\u0007",
    "\u0266\u0002\u0002\u1400\u1402\u0007\u0171\u0002\u0002\u1401\u1400\u0003",
    "\u0002\u0002\u0002\u1401\u1402\u0003\u0002\u0002\u0002\u1402\u1403\u0003",
    "\u0002\u0002\u0002\u1403\u140a\u0007\u01e2\u0002\u0002\u1404\u140a\u0007",
    "\u01e4\u0002\u0002\u1405\u1406\u0007\u020f\u0002\u0002\u1406\u140a\u0007",
    "\u017b\u0002\u0002\u1407\u140a\u0007\u0117\u0002\u0002\u1408\u140a\u0007",
    "\u0141\u0002\u0002\u1409\u13f9\u0003\u0002\u0002\u0002\u1409\u13fc\u0003",
    "\u0002\u0002\u0002\u1409\u13fe\u0003\u0002\u0002\u0002\u1409\u13ff\u0003",
    "\u0002\u0002\u0002\u1409\u1401\u0003\u0002\u0002\u0002\u1409\u1404\u0003",
    "\u0002\u0002\u0002\u1409\u1405\u0003\u0002\u0002\u0002\u1409\u1407\u0003",
    "\u0002\u0002\u0002\u1409\u1408\u0003\u0002\u0002\u0002\u140a\u01c3\u0003",
    "\u0002\u0002\u0002\u140b\u1414\u0007\u015f\u0002\u0002\u140c\u140d\u0007",
    "\u009c\u0002\u0002\u140d\u1414\u0007\u0223\u0002\u0002\u140e\u1410\u0007",
    "\u0171\u0002\u0002\u140f\u140e\u0003\u0002\u0002\u0002\u140f\u1410\u0003",
    "\u0002\u0002\u0002\u1410\u1411\u0003\u0002\u0002\u0002\u1411\u1414\u0007",
    "\u025e\u0002\u0002\u1412\u1414\u0007\u0237\u0002\u0002\u1413\u140b\u0003",
    "\u0002\u0002\u0002\u1413\u140c\u0003\u0002\u0002\u0002\u1413\u140f\u0003",
    "\u0002\u0002\u0002\u1413\u1412\u0003\u0002\u0002\u0002\u1414\u01c5\u0003",
    "\u0002\u0002\u0002\u1415\u1422\u0007\b\u0002\u0002\u1416\u1417\u0007",
    "\u011f\u0002\u0002\u1417\u1422\u0007\u0187\u0002\u0002\u1418\u1419\u0007",
    "\u0140\u0002\u0002\u1419\u1422\u0007\u022e\u0002\u0002\u141a\u1422\u0007",
    "\u0143\u0002\u0002\u141b\u1422\u0007\u0189\u0002\u0002\u141c\u1422\u0007",
    "\u02ae\u0002\u0002\u141d\u141e\u0007\u01d3\u0002\u0002\u141e\u1422\u0007",
    "\u0168\u0002\u0002\u141f\u1422\u0007\u0216\u0002\u0002\u1420\u1422\u0007",
    "\u022d\u0002\u0002\u1421\u1415\u0003\u0002\u0002\u0002\u1421\u1416\u0003",
    "\u0002\u0002\u0002\u1421\u1418\u0003\u0002\u0002\u0002\u1421\u141a\u0003",
    "\u0002\u0002\u0002\u1421\u141b\u0003\u0002\u0002\u0002\u1421\u141c\u0003",
    "\u0002\u0002\u0002\u1421\u141d\u0003\u0002\u0002\u0002\u1421\u141f\u0003",
    "\u0002\u0002\u0002\u1421\u1420\u0003\u0002\u0002\u0002\u1422\u01c7\u0003",
    "\u0002\u0002\u0002\u1423\u1424\u0007\u011d\u0002\u0002\u1424\u1425\u0007",
    "\u040f\u0002\u0002\u1425\u01c9\u0003\u0002\u0002\u0002\u1426\u1427\u0007",
    "\u0123\u0002\u0002\u1427\u1428\u0007J\u0002\u0002\u1428\u142d\u0005",
    "\u01d6\u00ec\u0002\u1429\u142a\u0007\u0402\u0002\u0002\u142a\u142c\u0005",
    "\u01d6\u00ec\u0002\u142b\u1429\u0003\u0002\u0002\u0002\u142c\u142f\u0003",
    "\u0002\u0002\u0002\u142d\u142b\u0003\u0002\u0002\u0002\u142d\u142e\u0003",
    "\u0002\u0002\u0002\u142e\u1437\u0003\u0002\u0002\u0002\u142f\u142d\u0003",
    "\u0002\u0002\u0002\u1430\u1431\u0007u\u0002\u0002\u1431\u1434\u0007",
    "\u0400\u0002\u0002\u1432\u1435\u0005\u022c\u0117\u0002\u1433\u1435\u0007",
    "\b\u0002\u0002\u1434\u1432\u0003\u0002\u0002\u0002\u1434\u1433\u0003",
    "\u0002\u0002\u0002\u1435\u1436\u0003\u0002\u0002\u0002\u1436\u1438\u0007",
    "\u0401\u0002\u0002\u1437\u1430\u0003\u0002\u0002\u0002\u1437\u1438\u0003",
    "\u0002\u0002\u0002\u1438\u1439\u0003\u0002\u0002\u0002\u1439\u143a\u0007",
    "I\u0002\u0002\u143a\u143b\u0005\u020c\u0107\u0002\u143b\u01cb\u0003",
    "\u0002\u0002\u0002\u143c\u143e\u0007\u016e\u0002\u0002\u143d\u143f\t",
    "B\u0002\u0002\u143e\u143d\u0003\u0002\u0002\u0002\u143e\u143f\u0003",
    "\u0002\u0002\u0002\u143f\u1440\u0003\u0002\u0002\u0002\u1440\u1445\u0005",
    "\u01d8\u00ed\u0002\u1441\u1442\u0007\u0402\u0002\u0002\u1442\u1444\u0005",
    "\u01d8\u00ed\u0002\u1443\u1441\u0003\u0002\u0002\u0002\u1444\u1447\u0003",
    "\u0002\u0002\u0002\u1445\u1443\u0003\u0002\u0002\u0002\u1445\u1446\u0003",
    "\u0002\u0002\u0002\u1446\u01cd\u0003\u0002\u0002\u0002\u1447\u1445\u0003",
    "\u0002\u0002\u0002\u1448\u144a\u0007V\u0002\u0002\u1449\u144b\tP\u0002",
    "\u0002\u144a\u1449\u0003\u0002\u0002\u0002\u144a\u144b\u0003\u0002\u0002",
    "\u0002\u144b\u144d\u0003\u0002\u0002\u0002\u144c\u144e\u0005\u0212\u010a",
    "\u0002\u144d\u144c\u0003\u0002\u0002\u0002\u144e\u144f\u0003\u0002\u0002",
    "\u0002\u144f\u144d\u0003\u0002\u0002\u0002\u144f\u1450\u0003\u0002\u0002",
    "\u0002\u1450\u01cf\u0003\u0002\u0002\u0002\u1451\u1452\u0007^\u0002",
    "\u0002\u1452\u1453\u0007J\u0002\u0002\u1453\u1454\u0007P\u0002\u0002",
    "\u1454\u1455\u0007\u0123\u0002\u0002\u1455\u145a\u0005\u01dc\u00ef\u0002",
    "\u1456\u1457\u0007\u0402\u0002\u0002\u1457\u1459\u0005\u01dc\u00ef\u0002",
    "\u1458\u1456\u0003\u0002\u0002\u0002\u1459\u145c\u0003\u0002\u0002\u0002",
    "\u145a\u1458\u0003\u0002\u0002\u0002\u145a\u145b\u0003\u0002\u0002\u0002",
    "\u145b\u01d1\u0003\u0002\u0002\u0002\u145c\u145a\u0003\u0002\u0002\u0002",
    "\u145d\u145e\u0007\u01fb\u0002\u0002\u145e\u145f\u0007\u01e6\u0002\u0002",
    "\u145f\u1460\u0007\u0123\u0002\u0002\u1460\u01d3\u0003\u0002\u0002\u0002",
    "\u1461\u1462\u0007\u0264\u0002\u0002\u1462\u01d5\u0003\u0002\u0002\u0002",
    "\u1463\u146b\u0005\u01f4\u00fb\u0002\u1464\u1466\t\u0014\u0002\u0002",
    "\u1465\u1464\u0003\u0002\u0002\u0002\u1465\u1466\u0003\u0002\u0002\u0002",
    "\u1466\u1467\u0003\u0002\u0002\u0002\u1467\u1468\u0007\u0400\u0002\u0002",
    "\u1468\u1469\u0005\u022c\u0117\u0002\u1469\u146a\u0007\u0401\u0002\u0002",
    "\u146a\u146c\u0003\u0002\u0002\u0002\u146b\u1465\u0003\u0002\u0002\u0002",
    "\u146b\u146c\u0003\u0002\u0002\u0002\u146c\u01d7\u0003\u0002\u0002\u0002",
    "\u146d\u1480\u0007\u014b\u0002\u0002\u146e\u1480\u0007\u017b\u0002\u0002",
    "\u146f\u1471\tQ\u0002\u0002\u1470\u146f\u0003\u0002\u0002\u0002\u1470",
    "\u1471\u0003\u0002\u0002\u0002\u1471\u1472\u0003\u0002\u0002\u0002\u1472",
    "\u1480\u0007\u0196\u0002\u0002\u1473\u1480\u0007\u01cf\u0002\u0002\u1474",
    "\u1480\u0007\u0266\u0002\u0002\u1475\u1476\u0007\u01e6\u0002\u0002\u1476",
    "\u1480\u0007\u0123\u0002\u0002\u1477\u1480\u0007\u0223\u0002\u0002\u1478",
    "\u1480\u0007\u0242\u0002\u0002\u1479\u147d\u0007\u025e\u0002\u0002\u147a",
    "\u147b\u0007\u00b0\u0002\u0002\u147b\u147c\u0007z\u0002\u0002\u147c",
    "\u147e\u0007_\u0002\u0002\u147d\u147a\u0003\u0002\u0002\u0002\u147d",
    "\u147e\u0003\u0002\u0002\u0002\u147e\u1480\u0003\u0002\u0002\u0002\u147f",
    "\u146d\u0003\u0002\u0002\u0002\u147f\u146e\u0003\u0002\u0002\u0002\u147f",
    "\u1470\u0003\u0002\u0002\u0002\u147f\u1473\u0003\u0002\u0002\u0002\u147f",
    "\u1474\u0003\u0002\u0002\u0002\u147f\u1475\u0003\u0002\u0002\u0002\u147f",
    "\u1477\u0003\u0002\u0002\u0002\u147f\u1478\u0003\u0002\u0002\u0002\u147f",
    "\u1479\u0003\u0002\u0002\u0002\u1480\u148c\u0003\u0002\u0002\u0002\u1481",
    "\u1482\u0007\u01ec\u0002\u0002\u1482\u1484\u0007\u0196\u0002\u0002\u1483",
    "\u1485\u0005\u013a\u009e\u0002\u1484\u1483\u0003\u0002\u0002\u0002\u1484",
    "\u1485\u0003\u0002\u0002\u0002\u1485\u148c\u0003\u0002\u0002\u0002\u1486",
    "\u1487\u0007\u025e\u0002\u0002\u1487\u1489\u0005\u022e\u0118\u0002\u1488",
    "\u148a\u0005\u01da\u00ee\u0002\u1489\u1488\u0003\u0002\u0002\u0002\u1489",
    "\u148a\u0003\u0002\u0002\u0002\u148a\u148c\u0003\u0002\u0002\u0002\u148b",
    "\u147f\u0003\u0002\u0002\u0002\u148b\u1481\u0003\u0002\u0002\u0002\u148b",
    "\u1486\u0003\u0002\u0002\u0002\u148c\u01d9\u0003\u0002\u0002\u0002\u148d",
    "\u148e\u0007\u00b0\u0002\u0002\u148e\u148f\u0007z\u0002\u0002\u148f",
    "\u1493\u0007_\u0002\u0002\u1490\u1491\u0007<\u0002\u0002\u1491\u1493",
    "\u0007\u0164\u0002\u0002\u1492\u148d\u0003\u0002\u0002\u0002\u1492\u1490",
    "\u0003\u0002\u0002\u0002\u1493\u01db\u0003\u0002\u0002\u0002\u1494\u149c",
    "\u0005\u01f4\u00fb\u0002\u1495\u1496\u0007u\u0002\u0002\u1496\u1499",
    "\u0007\u0400\u0002\u0002\u1497\u149a\u0005\u022c\u0117\u0002\u1498\u149a",
    "\u0007\b\u0002\u0002\u1499\u1497\u0003\u0002\u0002\u0002\u1499\u1498",
    "\u0003\u0002\u0002\u0002\u149a\u149b\u0003\u0002\u0002\u0002\u149b\u149d",
    "\u0007\u0401\u0002\u0002\u149c\u1495\u0003\u0002\u0002\u0002\u149c\u149d",
    "\u0003\u0002\u0002\u0002\u149d\u14a5\u0003\u0002\u0002\u0002\u149e\u14a0",
    "\t\u0014\u0002\u0002\u149f\u149e\u0003\u0002\u0002\u0002\u149f\u14a0",
    "\u0003\u0002\u0002\u0002\u14a0\u14a1\u0003\u0002\u0002\u0002\u14a1\u14a2",
    "\u0007\u0400\u0002\u0002\u14a2\u14a3\u0005\u022c\u0117\u0002\u14a3\u14a4",
    "\u0007\u0401\u0002\u0002\u14a4\u14a6\u0003\u0002\u0002\u0002\u14a5\u149f",
    "\u0003\u0002\u0002\u0002\u14a5\u14a6\u0003\u0002\u0002\u0002\u14a6\u14a9",
    "\u0003\u0002\u0002\u0002\u14a7\u14a8\u0007H\u0002\u0002\u14a8\u14aa",
    "\u0007\u0190\u0002\u0002\u14a9\u14a7\u0003\u0002\u0002\u0002\u14a9\u14aa",
    "\u0003\u0002\u0002\u0002\u14aa\u01dd\u0003\u0002\u0002\u0002\u14ab\u14ac",
    "\tR\u0002\u0002\u14ac\u14af\u0005\u01f4\u00fb\u0002\u14ad\u14b0\u0005",
    "\u020c\u0107\u0002\u14ae\u14b0\u0007\u040f\u0002\u0002\u14af\u14ad\u0003",
    "\u0002\u0002\u0002\u14af\u14ae\u0003\u0002\u0002\u0002\u14af\u14b0\u0003",
    "\u0002\u0002\u0002\u14b0\u01df\u0003\u0002\u0002\u0002\u14b1\u14b5\t",
    "R\u0002\u0002\u14b2\u14b3\tS\u0002\u0002\u14b3\u14b4\u0007\u03f7\u0002",
    "\u0002\u14b4\u14b6\tT\u0002\u0002\u14b5\u14b2\u0003\u0002\u0002\u0002",
    "\u14b5\u14b6\u0003\u0002\u0002\u0002\u14b6\u14b7\u0003\u0002\u0002\u0002",
    "\u14b7\u14b8\u0005\u01f0\u00f9\u0002\u14b8\u01e1\u0003\u0002\u0002\u0002",
    "\u14b9\u14ba\u0007\u0179\u0002\u0002\u14ba\u14bb\u0007\u040f\u0002\u0002",
    "\u14bb\u01e3\u0003\u0002\u0002\u0002\u14bc\u14bd\u0007\u00aa\u0002\u0002",
    "\u14bd\u14be\u0005\u020c\u0107\u0002\u14be\u01e5\u0003\u0002\u0002\u0002",
    "\u14bf\u14c7\u0007\u008f\u0002\u0002\u14c0\u14c2\u0007\u0093\u0002\u0002",
    "\u14c1\u14c3\u0007\u0244\u0002\u0002\u14c2\u14c1\u0003\u0002\u0002\u0002",
    "\u14c2\u14c3\u0003\u0002\u0002\u0002\u14c3\u14c4\u0003\u0002\u0002\u0002",
    "\u14c4\u14c8\u0005\u0216\u010c\u0002\u14c5\u14c8\u0007\u0417\u0002\u0002",
    "\u14c6\u14c8\u0007\u0418\u0002\u0002\u14c7\u14c0\u0003\u0002\u0002\u0002",
    "\u14c7\u14c5\u0003\u0002\u0002\u0002\u14c7\u14c6\u0003\u0002\u0002\u0002",
    "\u14c8\u14d2\u0003\u0002\u0002\u0002\u14c9\u14ca\u0007\u008c\u0002\u0002",
    "\u14ca\u14cf\u0005\u01ea\u00f6\u0002\u14cb\u14cc\u0007\u0402\u0002\u0002",
    "\u14cc\u14ce\u0005\u01ea\u00f6\u0002\u14cd\u14cb\u0003\u0002\u0002\u0002",
    "\u14ce\u14d1\u0003\u0002\u0002\u0002\u14cf\u14cd\u0003\u0002\u0002\u0002",
    "\u14cf\u14d0\u0003\u0002\u0002\u0002\u14d0\u14d3\u0003\u0002\u0002\u0002",
    "\u14d1\u14cf\u0003\u0002\u0002\u0002\u14d2\u14c9\u0003\u0002\u0002\u0002",
    "\u14d2\u14d3\u0003\u0002\u0002\u0002\u14d3\u01e7\u0003\u0002\u0002\u0002",
    "\u14d4\u14dc\u0007\u0083\u0002\u0002\u14d5\u14d7\u0007\u0093\u0002\u0002",
    "\u14d6\u14d8\u0007\u0244\u0002\u0002\u14d7\u14d6\u0003\u0002\u0002\u0002",
    "\u14d7\u14d8\u0003\u0002\u0002\u0002\u14d8\u14d9\u0003\u0002\u0002\u0002",
    "\u14d9\u14dd\u0005\u0216\u010c\u0002\u14da\u14dd\u0007\u0417\u0002\u0002",
    "\u14db\u14dd\u0007\u0418\u0002\u0002\u14dc\u14d5\u0003\u0002\u0002\u0002",
    "\u14dc\u14da\u0003\u0002\u0002\u0002\u14dc\u14db\u0003\u0002\u0002\u0002",
    "\u14dc\u14dd\u0003\u0002\u0002\u0002\u14dd\u14e7\u0003\u0002\u0002\u0002",
    "\u14de\u14df\u0007\u008c\u0002\u0002\u14df\u14e4\u0005\u01ea\u00f6\u0002",
    "\u14e0\u14e1\u0007\u0402\u0002\u0002\u14e1\u14e3\u0005\u01ea\u00f6\u0002",
    "\u14e2\u14e0\u0003\u0002\u0002\u0002\u14e3\u14e6\u0003\u0002\u0002\u0002",
    "\u14e4\u14e2\u0003\u0002\u0002\u0002\u14e4\u14e5\u0003\u0002\u0002\u0002",
    "\u14e5\u14e8\u0003\u0002\u0002\u0002\u14e6\u14e4\u0003\u0002\u0002\u0002",
    "\u14e7\u14de\u0003\u0002\u0002\u0002\u14e7\u14e8\u0003\u0002\u0002\u0002",
    "\u14e8\u01e9\u0003\u0002\u0002\u0002\u14e9\u14ea\tU\u0002\u0002\u14ea",
    "\u14ed\u0007\u03f7\u0002\u0002\u14eb\u14ee\u0005\u0216\u010c\u0002\u14ec",
    "\u14ee\u0007\u0410\u0002\u0002\u14ed\u14eb\u0003\u0002\u0002\u0002\u14ed",
    "\u14ec\u0003\u0002\u0002\u0002\u14ee\u01eb\u0003\u0002\u0002\u0002\u14ef",
    "\u14f1\u0007B\u0002\u0002\u14f0\u14f2\tV\u0002\u0002\u14f1\u14f0\u0003",
    "\u0002\u0002\u0002\u14f1\u14f2\u0003\u0002\u0002\u0002\u14f2\u14f3\u0003",
    "\u0002\u0002\u0002\u14f3\u1513\u0007.\u0002\u0002\u14f4\u14f5\u0005",
    "\u01bc\u00df\u0002\u14f5\u14f6\u0007\u03f7\u0002\u0002\u14f6\u14fe\t",
    "W\u0002\u0002\u14f7\u14f8\u0007\u0402\u0002\u0002\u14f8\u14f9\u0005",
    "\u01bc\u00df\u0002\u14f9\u14fa\u0007\u03f7\u0002\u0002\u14fa\u14fb\t",
    "W\u0002\u0002\u14fb\u14fd\u0003\u0002\u0002\u0002\u14fc\u14f7\u0003",
    "\u0002\u0002\u0002\u14fd\u1500\u0003\u0002\u0002\u0002\u14fe\u14fc\u0003",
    "\u0002\u0002\u0002\u14fe\u14ff\u0003\u0002\u0002\u0002\u14ff\u1514\u0003",
    "\u0002\u0002\u0002\u1500\u14fe\u0003\u0002\u0002\u0002\u1501\u1504\u0007",
    "\u001c\u0002\u0002\u1502\u1505\u0005\u0212\u010a\u0002\u1503\u1505\u0005",
    "\u01bc\u00df\u0002\u1504\u1502\u0003\u0002\u0002\u0002\u1504\u1503\u0003",
    "\u0002\u0002\u0002\u1505\u1506\u0003\u0002\u0002\u0002\u1506\u1507\u0005",
    "\u01bc\u00df\u0002\u1507\u1508\u0007\u03f7\u0002\u0002\u1508\u1510\u0005",
    "\u01ee\u00f8\u0002\u1509\u150a\u0007\u0402\u0002\u0002\u150a\u150b\u0005",
    "\u01bc\u00df\u0002\u150b\u150c\u0007\u03f7\u0002\u0002\u150c\u150d\u0005",
    "\u01ee\u00f8\u0002\u150d\u150f\u0003\u0002\u0002\u0002\u150e\u1509\u0003",
    "\u0002\u0002\u0002\u150f\u1512\u0003\u0002\u0002\u0002\u1510\u150e\u0003",
    "\u0002\u0002\u0002\u1510\u1511\u0003\u0002\u0002\u0002\u1511\u1514\u0003",
    "\u0002\u0002\u0002\u1512\u1510\u0003\u0002\u0002\u0002\u1513\u14f4\u0003",
    "\u0002\u0002\u0002\u1513\u1501\u0003\u0002\u0002\u0002\u1514\u01ed\u0003",
    "\u0002\u0002\u0002\u1515\u1516\tX\u0002\u0002\u1516\u01ef\u0003\u0002",
    "\u0002\u0002\u1517\u151d\u0005\u00b4[\u0002\u1518\u151d\u0005\u00a6",
    "T\u0002\u1519\u151d\u0005\u00acW\u0002\u151a\u151d\u0005\u00b2Z\u0002",
    "\u151b\u151d\u0005\u00b6\\\u0002\u151c\u1517\u0003\u0002\u0002\u0002",
    "\u151c\u1518\u0003\u0002\u0002\u0002\u151c\u1519\u0003\u0002\u0002\u0002",
    "\u151c\u151a\u0003\u0002\u0002\u0002\u151c\u151b\u0003\u0002\u0002\u0002",
    "\u151d\u1522\u0003\u0002\u0002\u0002\u151e\u151f\u0007<\u0002\u0002",
    "\u151f\u1520\u0007\u013a\u0002\u0002\u1520\u1522\u0005\u020c\u0107\u0002",
    "\u1521\u151c\u0003\u0002\u0002\u0002\u1521\u151e\u0003\u0002\u0002\u0002",
    "\u1522\u01f1\u0003\u0002\u0002\u0002\u1523\u1527\u0005\u020c\u0107\u0002",
    "\u1524\u1528\u0007\u0416\u0002\u0002\u1525\u1526\u0007\u03ff\u0002\u0002",
    "\u1526\u1528\u0005\u020c\u0107\u0002\u1527\u1524\u0003\u0002\u0002\u0002",
    "\u1527\u1525\u0003\u0002\u0002\u0002\u1527\u1528\u0003\u0002\u0002\u0002",
    "\u1528\u01f3\u0003\u0002\u0002\u0002\u1529\u152a\u0005\u01f2\u00fa\u0002",
    "\u152a\u01f5\u0003\u0002\u0002\u0002\u152b\u1530\u0005\u020c\u0107\u0002",
    "\u152c\u152e\u0005\u0210\u0109\u0002\u152d\u152f\u0005\u0210\u0109\u0002",
    "\u152e\u152d\u0003\u0002\u0002\u0002\u152e\u152f\u0003\u0002\u0002\u0002",
    "\u152f\u1531\u0003\u0002\u0002\u0002\u1530\u152c\u0003\u0002\u0002\u0002",
    "\u1530\u1531\u0003\u0002\u0002\u0002\u1531\u1538\u0003\u0002\u0002\u0002",
    "\u1532\u1533\u000b\u0002\u0002\u0002\u1533\u1535\u0005\u0210\u0109\u0002",
    "\u1534\u1536\u0005\u0210\u0109\u0002\u1535\u1534\u0003\u0002\u0002\u0002",
    "\u1535\u1536\u0003\u0002\u0002\u0002\u1536\u1538\u0003\u0002\u0002\u0002",
    "\u1537\u152b\u0003\u0002\u0002\u0002\u1537\u1532\u0003\u0002\u0002\u0002",
    "\u1538\u01f7\u0003\u0002\u0002\u0002\u1539\u153c\u0005\u020c\u0107\u0002",
    "\u153a\u153c\u0007\u040f\u0002\u0002\u153b\u1539\u0003\u0002\u0002\u0002",
    "\u153b\u153a\u0003\u0002\u0002\u0002\u153c\u1541\u0003\u0002\u0002\u0002",
    "\u153d\u153e\u0007\u0400\u0002\u0002\u153e\u153f\u0005\u0212\u010a\u0002",
    "\u153f\u1540\u0007\u0401\u0002\u0002\u1540\u1542\u0003\u0002\u0002\u0002",
    "\u1541\u153d\u0003\u0002\u0002\u0002\u1541\u1542\u0003\u0002\u0002\u0002",
    "\u1542\u1544\u0003\u0002\u0002\u0002\u1543\u1545\t-\u0002\u0002\u1544",
    "\u1543\u0003\u0002\u0002\u0002\u1544\u1545\u0003\u0002\u0002\u0002\u1545",
    "\u01f9\u0003\u0002\u0002\u0002\u1546\u1547\tY\u0002\u0002\u1547\u01fb",
    "\u0003\u0002\u0002\u0002\u1548\u1549\tZ\u0002\u0002\u1549\u01fd\u0003",
    "\u0002\u0002\u0002\u154a\u154f\u0007\u00d2\u0002\u0002\u154b\u154f\u0005",
    "\u026c\u0137\u0002\u154c\u154f\u0007\u040f\u0002\u0002\u154d\u154f\u0007",
    "\u040c\u0002\u0002\u154e\u154a\u0003\u0002\u0002\u0002\u154e\u154b\u0003",
    "\u0002\u0002\u0002\u154e\u154c\u0003\u0002\u0002\u0002\u154e\u154d\u0003",
    "\u0002\u0002\u0002\u154f\u01ff\u0003\u0002\u0002\u0002\u1550\u1553\u0005",
    "\u020c\u0107\u0002\u1551\u1553\u0007\u040f\u0002\u0002\u1552\u1550\u0003",
    "\u0002\u0002\u0002\u1552\u1551\u0003\u0002\u0002\u0002\u1553\u0201\u0003",
    "\u0002\u0002\u0002\u1554\u1555\t[\u0002\u0002\u1555\u0203\u0003\u0002",
    "\u0002\u0002\u1556\u1557\u0005\u0212\u010a\u0002\u1557\u1558\u0007\u03f4",
    "\u0002\u0002\u1558\u1559\u0005\u0212\u010a\u0002\u1559\u155a\u0007\u03f4",
    "\u0002\u0002\u155a\u155b\u0005\u0212\u010a\u0002\u155b\u155c\u0007\u03f4",
    "\u0002\u0002\u155c\u155d\u0005\u0212\u010a\u0002\u155d\u155e\u0007\u03f4",
    "\u0002\u0002\u155e\u1564\u0005\u0212\u010a\u0002\u155f\u1560\u0007\u040b",
    "\u0002\u0002\u1560\u1561\u0005\u0212\u010a\u0002\u1561\u1562\u0007\u03f4",
    "\u0002\u0002\u1562\u1563\u0005\u0212\u010a\u0002\u1563\u1565\u0003\u0002",
    "\u0002\u0002\u1564\u155f\u0003\u0002\u0002\u0002\u1565\u1566\u0003\u0002",
    "\u0002\u0002\u1566\u1564\u0003\u0002\u0002\u0002\u1566\u1567\u0003\u0002",
    "\u0002\u0002\u1567\u0205\u0003\u0002\u0002\u0002\u1568\u156f\u0005\u0208",
    "\u0105\u0002\u1569\u156a\u0007\u0402\u0002\u0002\u156a\u156d\u0005\u0208",
    "\u0105\u0002\u156b\u156c\u0007\u0402\u0002\u0002\u156c\u156e\u0005\u0212",
    "\u010a\u0002\u156d\u156b\u0003\u0002\u0002\u0002\u156d\u156e\u0003\u0002",
    "\u0002\u0002\u156e\u1570\u0003\u0002\u0002\u0002\u156f\u1569\u0003\u0002",
    "\u0002\u0002\u156f\u1570\u0003\u0002\u0002\u0002\u1570\u0207\u0003\u0002",
    "\u0002\u0002\u1571\u1579\u0007\u040f\u0002\u0002\u1572\u1579\u0007\u0414",
    "\u0002\u0002\u1573\u1575\u0007\u0411\u0002\u0002\u1574\u1573\u0003\u0002",
    "\u0002\u0002\u1575\u1576\u0003\u0002\u0002\u0002\u1576\u1574\u0003\u0002",
    "\u0002\u0002\u1576\u1577\u0003\u0002\u0002\u0002\u1577\u1579\u0003\u0002",
    "\u0002\u0002\u1578\u1571\u0003\u0002\u0002\u0002\u1578\u1572\u0003\u0002",
    "\u0002\u0002\u1578\u1574\u0003\u0002\u0002\u0002\u1579\u0209\u0003\u0002",
    "\u0002\u0002\u157a\u157d\u0005\u020c\u0107\u0002\u157b\u157d\u0007\u040f",
    "\u0002\u0002\u157c\u157a\u0003\u0002\u0002\u0002\u157c\u157b\u0003\u0002",
    "\u0002\u0002\u157d\u020b\u0003\u0002\u0002\u0002\u157e\u1582\u0005\u020e",
    "\u0108\u0002\u157f\u1582\u0007\u0418\u0002\u0002\u1580\u1582\u0007\u040c",
    "\u0002\u0002\u1581\u157e\u0003\u0002\u0002\u0002\u1581\u157f\u0003\u0002",
    "\u0002\u0002\u1581\u1580\u0003\u0002\u0002\u0002\u1582\u020d\u0003\u0002",
    "\u0002\u0002\u1583\u158d\u0007\u0417\u0002\u0002\u1584\u158d\u0005\u026c",
    "\u0137\u0002\u1585\u158d\u0005\u026e\u0138\u0002\u1586\u158d\u0005\u0202",
    "\u0102\u0002\u1587\u158d\u0005\u0270\u0139\u0002\u1588\u158d\u0005\u0272",
    "\u013a\u0002\u1589\u158d\u0005\u0274\u013b\u0002\u158a\u158d\u0005\u0276",
    "\u013c\u0002\u158b\u158d\u0005\u0278\u013d\u0002\u158c\u1583\u0003\u0002",
    "\u0002\u0002\u158c\u1584\u0003\u0002\u0002\u0002\u158c\u1585\u0003\u0002",
    "\u0002\u0002\u158c\u1586\u0003\u0002\u0002\u0002\u158c\u1587\u0003\u0002",
    "\u0002\u0002\u158c\u1588\u0003\u0002\u0002\u0002\u158c\u1589\u0003\u0002",
    "\u0002\u0002\u158c\u158a\u0003\u0002\u0002\u0002\u158c\u158b\u0003\u0002",
    "\u0002\u0002\u158d\u020f\u0003\u0002\u0002\u0002\u158e\u1592\u0007\u0416",
    "\u0002\u0002\u158f\u1590\u0007\u03ff\u0002\u0002\u1590\u1592\u0005\u020c",
    "\u0107\u0002\u1591\u158e\u0003\u0002\u0002\u0002\u1591\u158f\u0003\u0002",
    "\u0002\u0002\u1592\u0211\u0003\u0002\u0002\u0002\u1593\u1594\t\\\u0002",
    "\u0002\u1594\u0213\u0003\u0002\u0002\u0002\u1595\u1598\u0007\u040d\u0002",
    "\u0002\u1596\u1598\u0005\u0212\u010a\u0002\u1597\u1595\u0003\u0002\u0002",
    "\u0002\u1597\u1596\u0003\u0002\u0002\u0002\u1598\u0215\u0003\u0002\u0002",
    "\u0002\u1599\u159b\u0007\u0415\u0002\u0002\u159a\u1599\u0003\u0002\u0002",
    "\u0002\u159a\u159b\u0003\u0002\u0002\u0002\u159b\u159c\u0003\u0002\u0002",
    "\u0002\u159c\u159f\u0007\u040f\u0002\u0002\u159d\u159f\u0007\u040e\u0002",
    "\u0002\u159e\u159a\u0003\u0002\u0002\u0002\u159e\u159d\u0003\u0002\u0002",
    "\u0002\u159f\u15a1\u0003\u0002\u0002\u0002\u15a0\u15a2\u0007\u040f\u0002",
    "\u0002\u15a1\u15a0\u0003\u0002\u0002\u0002\u15a2\u15a3\u0003\u0002\u0002",
    "\u0002\u15a3\u15a1\u0003\u0002\u0002\u0002\u15a3\u15a4\u0003\u0002\u0002",
    "\u0002\u15a4\u15b1\u0003\u0002\u0002\u0002\u15a5\u15a7\u0007\u0415\u0002",
    "\u0002\u15a6\u15a5\u0003\u0002\u0002\u0002\u15a6\u15a7\u0003\u0002\u0002",
    "\u0002\u15a7\u15a8\u0003\u0002\u0002\u0002\u15a8\u15ab\u0007\u040f\u0002",
    "\u0002\u15a9\u15ab\u0007\u040e\u0002\u0002\u15aa\u15a6\u0003\u0002\u0002",
    "\u0002\u15aa\u15a9\u0003\u0002\u0002\u0002\u15ab\u15ae\u0003\u0002\u0002",
    "\u0002\u15ac\u15ad\u0007\u001a\u0002\u0002\u15ad\u15af\u0005\u0200\u0101",
    "\u0002\u15ae\u15ac\u0003\u0002\u0002\u0002\u15ae\u15af\u0003\u0002\u0002",
    "\u0002\u15af\u15b1\u0003\u0002\u0002\u0002\u15b0\u159e\u0003\u0002\u0002",
    "\u0002\u15b0\u15aa\u0003\u0002\u0002\u0002\u15b1\u0217\u0003\u0002\u0002",
    "\u0002\u15b2\u15b3\t]\u0002\u0002\u15b3\u0219\u0003\u0002\u0002\u0002",
    "\u15b4\u15b6\u0007\u0415\u0002\u0002\u15b5\u15b4\u0003\u0002\u0002\u0002",
    "\u15b5\u15b6\u0003\u0002\u0002\u0002\u15b6\u15b7\u0003\u0002\u0002\u0002",
    "\u15b7\u15b8\u0007\u0411\u0002\u0002\u15b8\u021b\u0003\u0002\u0002\u0002",
    "\u15b9\u15bb\u0007h\u0002\u0002\u15ba\u15b9\u0003\u0002\u0002\u0002",
    "\u15ba\u15bb\u0003\u0002\u0002\u0002\u15bb\u15bc\u0003\u0002\u0002\u0002",
    "\u15bc\u15bd\t^\u0002\u0002\u15bd\u021d\u0003\u0002\u0002\u0002\u15be",
    "\u15cb\u0005\u0216\u010c\u0002\u15bf\u15cb\u0005\u0212\u010a\u0002\u15c0",
    "\u15c1\u0007\u03f4\u0002\u0002\u15c1\u15cb\u0005\u0212\u010a\u0002\u15c2",
    "\u15cb\u0005\u021a\u010e\u0002\u15c3\u15cb\u0005\u0218\u010d\u0002\u15c4",
    "\u15cb\u0007\u0412\u0002\u0002\u15c5\u15cb\u0007\u0414\u0002\u0002\u15c6",
    "\u15c8\u0007h\u0002\u0002\u15c7\u15c6\u0003\u0002\u0002\u0002\u15c7",
    "\u15c8\u0003\u0002\u0002\u0002\u15c8\u15c9\u0003\u0002\u0002\u0002\u15c9",
    "\u15cb\t^\u0002\u0002\u15ca\u15be\u0003\u0002\u0002\u0002\u15ca\u15bf",
    "\u0003\u0002\u0002\u0002\u15ca\u15c0\u0003\u0002\u0002\u0002\u15ca\u15c2",
    "\u0003\u0002\u0002\u0002\u15ca\u15c3\u0003\u0002\u0002\u0002\u15ca\u15c4",
    "\u0003\u0002\u0002\u0002\u15ca\u15c5\u0003\u0002\u0002\u0002\u15ca\u15c7",
    "\u0003\u0002\u0002\u0002\u15cb\u021f\u0003\u0002\u0002\u0002\u15cc\u15ce",
    "\t_\u0002\u0002\u15cd\u15cf\u0007\u00de\u0002\u0002\u15ce\u15cd\u0003",
    "\u0002\u0002\u0002\u15ce\u15cf\u0003\u0002\u0002\u0002\u15cf\u15d1\u0003",
    "\u0002\u0002\u0002\u15d0\u15d2\u0005\u0226\u0114\u0002\u15d1\u15d0\u0003",
    "\u0002\u0002\u0002\u15d1\u15d2\u0003\u0002\u0002\u0002\u15d2\u15d4\u0003",
    "\u0002\u0002\u0002\u15d3\u15d5\u0007\u00d2\u0002\u0002\u15d4\u15d3\u0003",
    "\u0002\u0002\u0002\u15d4\u15d5\u0003\u0002\u0002\u0002\u15d5\u15dc\u0003",
    "\u0002\u0002\u0002\u15d6\u15d7\u0007\u0018\u0002\u0002\u15d7\u15da\u0007",
    "\u008c\u0002\u0002\u15d8\u15da\u0007\u02df\u0002\u0002\u15d9\u15d6\u0003",
    "\u0002\u0002\u0002\u15d9\u15d8\u0003\u0002\u0002\u0002\u15da\u15db\u0003",
    "\u0002\u0002\u0002\u15db\u15dd\u0005\u01fe\u0100\u0002\u15dc\u15d9\u0003",
    "\u0002\u0002\u0002\u15dc\u15dd\u0003\u0002\u0002\u0002\u15dd\u15e1\u0003",
    "\u0002\u0002\u0002\u15de\u15df\u0007\u001a\u0002\u0002\u15df\u15e2\u0005",
    "\u0200\u0101\u0002\u15e0\u15e2\u0007\u00d2\u0002\u0002\u15e1\u15de\u0003",
    "\u0002\u0002\u0002\u15e1\u15e0\u0003\u0002\u0002\u0002\u15e1\u15e2\u0003",
    "\u0002\u0002\u0002\u15e2\u1650\u0003\u0002\u0002\u0002\u15e3\u15e4\u0007",
    "\u00d1\u0002\u0002\u15e4\u15e6\t`\u0002\u0002\u15e5\u15e7\u0005\u0226",
    "\u0114\u0002\u15e6\u15e5\u0003\u0002\u0002\u0002\u15e6\u15e7\u0003\u0002",
    "\u0002\u0002\u15e7\u15e9\u0003\u0002\u0002\u0002\u15e8\u15ea\u0007\u00d2",
    "\u0002\u0002\u15e9\u15e8\u0003\u0002\u0002\u0002\u15e9\u15ea\u0003\u0002",
    "\u0002\u0002\u15ea\u1650\u0003\u0002\u0002\u0002\u15eb\u15ec\u0007\u01c0",
    "\u0002\u0002\u15ec\u15ee\u0007\u00cf\u0002\u0002\u15ed\u15ef\u0005\u0226",
    "\u0114\u0002\u15ee\u15ed\u0003\u0002\u0002\u0002\u15ee\u15ef\u0003\u0002",
    "\u0002\u0002\u15ef\u15f1\u0003\u0002\u0002\u0002\u15f0\u15f2\u0007\u00d2",
    "\u0002\u0002\u15f1\u15f0\u0003\u0002\u0002\u0002\u15f1\u15f2\u0003\u0002",
    "\u0002\u0002\u15f2\u1650\u0003\u0002\u0002\u0002\u15f3\u15f4\u0007\u00d1",
    "\u0002\u0002\u15f4\u15f5\ta\u0002\u0002\u15f5\u15f7\u0007\u00de\u0002",
    "\u0002\u15f6\u15f8\u0005\u0226\u0114\u0002\u15f7\u15f6\u0003\u0002\u0002",
    "\u0002\u15f7\u15f8\u0003\u0002\u0002\u0002\u15f8\u15fa\u0003\u0002\u0002",
    "\u0002\u15f9\u15fb\u0007\u00d2\u0002\u0002\u15fa\u15f9\u0003\u0002\u0002",
    "\u0002\u15fa\u15fb\u0003\u0002\u0002\u0002\u15fb\u1650\u0003\u0002\u0002",
    "\u0002\u15fc\u15fe\tb\u0002\u0002\u15fd\u15ff\u0005\u0226\u0114\u0002",
    "\u15fe\u15fd\u0003\u0002\u0002\u0002\u15fe\u15ff\u0003\u0002\u0002\u0002",
    "\u15ff\u1601\u0003\u0002\u0002\u0002\u1600\u1602\tc\u0002\u0002\u1601",
    "\u1600\u0003\u0002\u0002\u0002\u1601\u1602\u0003\u0002\u0002\u0002\u1602",
    "\u1604\u0003\u0002\u0002\u0002\u1603\u1605\u0007\u00b3\u0002\u0002\u1604",
    "\u1603\u0003\u0002\u0002\u0002\u1604\u1605\u0003\u0002\u0002\u0002\u1605",
    "\u1650\u0003\u0002\u0002\u0002\u1606\u1608\u0007\u00c0\u0002\u0002\u1607",
    "\u1609\u0005\u0228\u0115\u0002\u1608\u1607\u0003\u0002\u0002\u0002\u1608",
    "\u1609\u0003\u0002\u0002\u0002\u1609\u160b\u0003\u0002\u0002\u0002\u160a",
    "\u160c\tc\u0002\u0002\u160b\u160a\u0003\u0002\u0002\u0002\u160b\u160c",
    "\u0003\u0002\u0002\u0002\u160c\u160e\u0003\u0002\u0002\u0002\u160d\u160f",
    "\u0007\u00b3\u0002\u0002\u160e\u160d\u0003\u0002\u0002\u0002\u160e\u160f",
    "\u0003\u0002\u0002\u0002\u160f\u1650\u0003\u0002\u0002\u0002\u1610\u1612",
    "\u0007\u00c1\u0002\u0002\u1611\u1613\u0007\u00c2\u0002\u0002\u1612\u1611",
    "\u0003\u0002\u0002\u0002\u1612\u1613\u0003\u0002\u0002\u0002\u1613\u1615",
    "\u0003\u0002\u0002\u0002\u1614\u1616\u0005\u0228\u0115\u0002\u1615\u1614",
    "\u0003\u0002\u0002\u0002\u1615\u1616\u0003\u0002\u0002\u0002\u1616\u1618",
    "\u0003\u0002\u0002\u0002\u1617\u1619\tc\u0002\u0002\u1618\u1617\u0003",
    "\u0002\u0002\u0002\u1618\u1619\u0003\u0002\u0002\u0002\u1619\u161b\u0003",
    "\u0002\u0002\u0002\u161a\u161c\u0007\u00b3\u0002\u0002\u161b\u161a\u0003",
    "\u0002\u0002\u0002\u161b\u161c\u0003\u0002\u0002\u0002\u161c\u1650\u0003",
    "\u0002\u0002\u0002\u161d\u161f\td\u0002\u0002\u161e\u1620\u0005\u022a",
    "\u0116\u0002\u161f\u161e\u0003\u0002\u0002\u0002\u161f\u1620\u0003\u0002",
    "\u0002\u0002\u1620\u1622\u0003\u0002\u0002\u0002\u1621\u1623\tc\u0002",
    "\u0002\u1622\u1621\u0003\u0002\u0002\u0002\u1622\u1623\u0003\u0002\u0002",
    "\u0002\u1623\u1625\u0003\u0002\u0002\u0002\u1624\u1626\u0007\u00b3\u0002",
    "\u0002\u1625\u1624\u0003\u0002\u0002\u0002\u1625\u1626\u0003\u0002\u0002",
    "\u0002\u1626\u1650\u0003\u0002\u0002\u0002\u1627\u1650\te\u0002\u0002",
    "\u1628\u162a\tf\u0002\u0002\u1629\u162b\u0005\u0226\u0114\u0002\u162a",
    "\u1629\u0003\u0002\u0002\u0002\u162a\u162b\u0003\u0002\u0002\u0002\u162b",
    "\u1650\u0003\u0002\u0002\u0002\u162c\u162d\tg\u0002\u0002\u162d\u162f",
    "\u0005\u0222\u0112\u0002\u162e\u1630\u0007\u00d2\u0002\u0002\u162f\u162e",
    "\u0003\u0002\u0002\u0002\u162f\u1630\u0003\u0002\u0002\u0002\u1630\u1637",
    "\u0003\u0002\u0002\u0002\u1631\u1632\u0007\u0018\u0002\u0002\u1632\u1635",
    "\u0007\u008c\u0002\u0002\u1633\u1635\u0007\u02df\u0002\u0002\u1634\u1631",
    "\u0003\u0002\u0002\u0002\u1634\u1633\u0003\u0002\u0002\u0002\u1635\u1636",
    "\u0003\u0002\u0002\u0002\u1636\u1638\u0005\u01fe\u0100\u0002\u1637\u1634",
    "\u0003\u0002\u0002\u0002\u1637\u1638\u0003\u0002\u0002\u0002\u1638\u1650",
    "\u0003\u0002\u0002\u0002\u1639\u1650\th\u0002\u0002\u163a\u163c\u0007",
    "\u00d7\u0002\u0002\u163b\u163d\u0007\u00cf\u0002\u0002\u163c\u163b\u0003",
    "\u0002\u0002\u0002\u163c\u163d\u0003\u0002\u0002\u0002\u163d\u163f\u0003",
    "\u0002\u0002\u0002\u163e\u1640\u0007\u00d2\u0002\u0002\u163f\u163e\u0003",
    "\u0002\u0002\u0002\u163f\u1640\u0003\u0002\u0002\u0002\u1640\u1647\u0003",
    "\u0002\u0002\u0002\u1641\u1642\u0007\u0018\u0002\u0002\u1642\u1645\u0007",
    "\u008c\u0002\u0002\u1643\u1645\u0007\u02df\u0002\u0002\u1644\u1641\u0003",
    "\u0002\u0002\u0002\u1644\u1643\u0003\u0002\u0002\u0002\u1645\u1646\u0003",
    "\u0002\u0002\u0002\u1646\u1648\u0005\u01fe\u0100\u0002\u1647\u1644\u0003",
    "\u0002\u0002\u0002\u1647\u1648\u0003\u0002\u0002\u0002\u1648\u164b\u0003",
    "\u0002\u0002\u0002\u1649\u164a\u0007\u001a\u0002\u0002\u164a\u164c\u0005",
    "\u0200\u0101\u0002\u164b\u1649\u0003\u0002\u0002\u0002\u164b\u164c\u0003",
    "\u0002\u0002\u0002\u164c\u1650\u0003\u0002\u0002\u0002\u164d\u164e\u0007",
    "\u00d7\u0002\u0002\u164e\u1650\u0007\u00d3\u0002\u0002\u164f\u15cc\u0003",
    "\u0002\u0002\u0002\u164f\u15e3\u0003\u0002\u0002\u0002\u164f\u15eb\u0003",
    "\u0002\u0002\u0002\u164f\u15f3\u0003\u0002\u0002\u0002\u164f\u15fc\u0003",
    "\u0002\u0002\u0002\u164f\u1606\u0003\u0002\u0002\u0002\u164f\u1610\u0003",
    "\u0002\u0002\u0002\u164f\u161d\u0003\u0002\u0002\u0002\u164f\u1627\u0003",
    "\u0002\u0002\u0002\u164f\u1628\u0003\u0002\u0002\u0002\u164f\u162c\u0003",
    "\u0002\u0002\u0002\u164f\u1639\u0003\u0002\u0002\u0002\u164f\u163a\u0003",
    "\u0002\u0002\u0002\u164f\u164d\u0003\u0002\u0002\u0002\u1650\u0221\u0003",
    "\u0002\u0002\u0002\u1651\u1652\u0007\u0400\u0002\u0002\u1652\u1657\u0007",
    "\u040f\u0002\u0002\u1653\u1654\u0007\u0402\u0002\u0002\u1654\u1656\u0007",
    "\u040f\u0002\u0002\u1655\u1653\u0003\u0002\u0002\u0002\u1656\u1659\u0003",
    "\u0002\u0002\u0002\u1657\u1655\u0003\u0002\u0002\u0002\u1657\u1658\u0003",
    "\u0002\u0002\u0002\u1658\u165a\u0003\u0002\u0002\u0002\u1659\u1657\u0003",
    "\u0002\u0002\u0002\u165a\u165b\u0007\u0401\u0002\u0002\u165b\u0223\u0003",
    "\u0002\u0002\u0002\u165c\u165e\ti\u0002\u0002\u165d\u165f\u0005\u0226",
    "\u0114\u0002\u165e\u165d\u0003\u0002\u0002\u0002\u165e\u165f\u0003\u0002",
    "\u0002\u0002\u165f\u1676\u0003\u0002\u0002\u0002\u1660\u1662\u0007\u00ce",
    "\u0002\u0002\u1661\u1663\u0005\u0226\u0114\u0002\u1662\u1661\u0003\u0002",
    "\u0002\u0002\u1662\u1663\u0003\u0002\u0002\u0002\u1663\u166a\u0003\u0002",
    "\u0002\u0002\u1664\u1665\u0007\u0018\u0002\u0002\u1665\u1668\u0007\u008c",
    "\u0002\u0002\u1666\u1668\u0007\u02df\u0002\u0002\u1667\u1664\u0003\u0002",
    "\u0002\u0002\u1667\u1666\u0003\u0002\u0002\u0002\u1668\u1669\u0003\u0002",
    "\u0002\u0002\u1669\u166b\u0005\u01fe\u0100\u0002\u166a\u1667\u0003\u0002",
    "\u0002\u0002\u166a\u166b\u0003\u0002\u0002\u0002\u166b\u1676\u0003\u0002",
    "\u0002\u0002\u166c\u1676\tj\u0002\u0002\u166d\u166f\u0007\u00c6\u0002",
    "\u0002\u166e\u1670\u0005\u0228\u0115\u0002\u166f\u166e\u0003\u0002\u0002",
    "\u0002\u166f\u1670\u0003\u0002\u0002\u0002\u1670\u1676\u0003\u0002\u0002",
    "\u0002\u1671\u1673\tc\u0002\u0002\u1672\u1674\u0007\u00be\u0002\u0002",
    "\u1673\u1672\u0003\u0002\u0002\u0002\u1673\u1674\u0003\u0002\u0002\u0002",
    "\u1674\u1676\u0003\u0002\u0002\u0002\u1675\u165c\u0003\u0002\u0002\u0002",
    "\u1675\u1660\u0003\u0002\u0002\u0002\u1675\u166c\u0003\u0002\u0002\u0002",
    "\u1675\u166d\u0003\u0002\u0002\u0002\u1675\u1671\u0003\u0002\u0002\u0002",
    "\u1676\u0225\u0003\u0002\u0002\u0002\u1677\u1678\u0007\u0400\u0002\u0002",
    "\u1678\u1679\u0005\u0212\u010a\u0002\u1679\u167a\u0007\u0401\u0002\u0002",
    "\u167a\u0227\u0003\u0002\u0002\u0002\u167b\u167c\u0007\u0400\u0002\u0002",
    "\u167c\u167d\u0005\u0212\u010a\u0002\u167d\u167e\u0007\u0402\u0002\u0002",
    "\u167e\u167f\u0005\u0212\u010a\u0002\u167f\u1680\u0007\u0401\u0002\u0002",
    "\u1680\u0229\u0003\u0002\u0002\u0002\u1681\u1682\u0007\u0400\u0002\u0002",
    "\u1682\u1685\u0005\u0212\u010a\u0002\u1683\u1684\u0007\u0402\u0002\u0002",
    "\u1684\u1686\u0005\u0212\u010a\u0002\u1685\u1683\u0003\u0002\u0002\u0002",
    "\u1685\u1686\u0003\u0002\u0002\u0002\u1686\u1687\u0003\u0002\u0002\u0002",
    "\u1687\u1688\u0007\u0401\u0002\u0002\u1688\u022b\u0003\u0002\u0002\u0002",
    "\u1689\u168e\u0005\u020c\u0107\u0002\u168a\u168b\u0007\u0402\u0002\u0002",
    "\u168b\u168d\u0005\u020c\u0107\u0002\u168c\u168a\u0003\u0002\u0002\u0002",
    "\u168d\u1690\u0003\u0002\u0002\u0002\u168e\u168c\u0003\u0002\u0002\u0002",
    "\u168e\u168f\u0003\u0002\u0002\u0002\u168f\u022d\u0003\u0002\u0002\u0002",
    "\u1690\u168e\u0003\u0002\u0002\u0002\u1691\u1696\u0005\u01f4\u00fb\u0002",
    "\u1692\u1693\u0007\u0402\u0002\u0002\u1693\u1695\u0005\u01f4\u00fb\u0002",
    "\u1694\u1692\u0003\u0002\u0002\u0002\u1695\u1698\u0003\u0002\u0002\u0002",
    "\u1696\u1694\u0003\u0002\u0002\u0002\u1696\u1697\u0003\u0002\u0002\u0002",
    "\u1697\u022f\u0003\u0002\u0002\u0002\u1698\u1696\u0003\u0002\u0002\u0002",
    "\u1699\u169a\u0007\u0400\u0002\u0002\u169a\u169f\u0005\u01f8\u00fd\u0002",
    "\u169b\u169c\u0007\u0402\u0002\u0002\u169c\u169e\u0005\u01f8\u00fd\u0002",
    "\u169d\u169b\u0003\u0002\u0002\u0002\u169e\u16a1\u0003\u0002\u0002\u0002",
    "\u169f\u169d\u0003\u0002\u0002\u0002\u169f\u16a0\u0003\u0002\u0002\u0002",
    "\u16a0\u16a2\u0003\u0002\u0002\u0002\u16a1\u169f\u0003\u0002\u0002\u0002",
    "\u16a2\u16a3\u0007\u0401\u0002\u0002\u16a3\u0231\u0003\u0002\u0002\u0002",
    "\u16a4\u16a9\u0005\u025a\u012e\u0002\u16a5\u16a6\u0007\u0402\u0002\u0002",
    "\u16a6\u16a8\u0005\u025a\u012e\u0002\u16a7\u16a5\u0003\u0002\u0002\u0002",
    "\u16a8\u16ab\u0003\u0002\u0002\u0002\u16a9\u16a7\u0003\u0002\u0002\u0002",
    "\u16a9\u16aa\u0003\u0002\u0002\u0002\u16aa\u0233\u0003\u0002\u0002\u0002",
    "\u16ab\u16a9\u0003\u0002\u0002\u0002\u16ac\u16b1\u0005\u0240\u0121\u0002",
    "\u16ad\u16ae\u0007\u0402\u0002\u0002\u16ae\u16b0\u0005\u0240\u0121\u0002",
    "\u16af\u16ad\u0003\u0002\u0002\u0002\u16b0\u16b3\u0003\u0002\u0002\u0002",
    "\u16b1\u16af\u0003\u0002\u0002\u0002\u16b1\u16b2\u0003\u0002\u0002\u0002",
    "\u16b2\u0235\u0003\u0002\u0002\u0002\u16b3\u16b1\u0003\u0002\u0002\u0002",
    "\u16b4\u16b9\u0005\u021e\u0110\u0002\u16b5\u16b6\u0007\u0402\u0002\u0002",
    "\u16b6\u16b8\u0005\u021e\u0110\u0002\u16b7\u16b5\u0003\u0002\u0002\u0002",
    "\u16b8\u16bb\u0003\u0002\u0002\u0002\u16b9\u16b7\u0003\u0002\u0002\u0002",
    "\u16b9\u16ba\u0003\u0002\u0002\u0002\u16ba\u0237\u0003\u0002\u0002\u0002",
    "\u16bb\u16b9\u0003\u0002\u0002\u0002\u16bc\u16c1\u0007\u040f\u0002\u0002",
    "\u16bd\u16be\u0007\u0402\u0002\u0002\u16be\u16c0\u0007\u040f\u0002\u0002",
    "\u16bf\u16bd\u0003\u0002\u0002\u0002\u16c0\u16c3\u0003\u0002\u0002\u0002",
    "\u16c1\u16bf\u0003\u0002\u0002\u0002\u16c1\u16c2\u0003\u0002\u0002\u0002",
    "\u16c2\u0239\u0003\u0002\u0002\u0002\u16c3\u16c1\u0003\u0002\u0002\u0002",
    "\u16c4\u16c9\u0007\u041b\u0002\u0002\u16c5\u16c6\u0007\u0402\u0002\u0002",
    "\u16c6\u16c8\u0007\u041b\u0002\u0002\u16c7\u16c5\u0003\u0002\u0002\u0002",
    "\u16c8\u16cb\u0003\u0002\u0002\u0002\u16c9\u16c7\u0003\u0002\u0002\u0002",
    "\u16c9\u16ca\u0003\u0002\u0002\u0002\u16ca\u023b\u0003\u0002\u0002\u0002",
    "\u16cb\u16c9\u0003\u0002\u0002\u0002\u16cc\u16d3\u0007j\u0002\u0002",
    "\u16cd\u16cf\u0005\u0260\u0131\u0002\u16ce\u16cd\u0003\u0002\u0002\u0002",
    "\u16ce\u16cf\u0003\u0002\u0002\u0002\u16cf\u16d0\u0003\u0002\u0002\u0002",
    "\u16d0\u16d3\u0005\u021e\u0110\u0002\u16d1\u16d3\u0005\u023e\u0120\u0002",
    "\u16d2\u16cc\u0003\u0002\u0002\u0002\u16d2\u16ce\u0003\u0002\u0002\u0002",
    "\u16d2\u16d1\u0003\u0002\u0002\u0002\u16d3\u16d7\u0003\u0002\u0002\u0002",
    "\u16d4\u16d5\u0007l\u0002\u0002\u16d5\u16d6\u0007\u00a8\u0002\u0002",
    "\u16d6\u16d8\u0005\u023e\u0120\u0002\u16d7\u16d4\u0003\u0002\u0002\u0002",
    "\u16d7\u16d8\u0003\u0002\u0002\u0002\u16d8\u023d\u0003\u0002\u0002\u0002",
    "\u16d9\u16df\tk\u0002\u0002\u16da\u16dc\u0007\u0400\u0002\u0002\u16db",
    "\u16dd\u0005\u0212\u010a\u0002\u16dc\u16db\u0003\u0002\u0002\u0002\u16dc",
    "\u16dd\u0003\u0002\u0002\u0002\u16dd\u16de\u0003\u0002\u0002\u0002\u16de",
    "\u16e0\u0007\u0401\u0002\u0002\u16df\u16da\u0003\u0002\u0002\u0002\u16df",
    "\u16e0\u0003\u0002\u0002\u0002\u16e0\u16e8\u0003\u0002\u0002\u0002\u16e1",
    "\u16e2\u0007\u0107\u0002\u0002\u16e2\u16e4\u0007\u0400\u0002\u0002\u16e3",
    "\u16e5\u0005\u0212\u010a\u0002\u16e4\u16e3\u0003\u0002\u0002\u0002\u16e4",
    "\u16e5\u0003\u0002\u0002\u0002\u16e5\u16e6\u0003\u0002\u0002\u0002\u16e6",
    "\u16e8\u0007\u0401\u0002\u0002\u16e7\u16d9\u0003\u0002\u0002\u0002\u16e7",
    "\u16e1\u0003\u0002\u0002\u0002\u16e8\u023f\u0003\u0002\u0002\u0002\u16e9",
    "\u16ec\u0005\u025a\u012e\u0002\u16ea\u16ec\u0007(\u0002\u0002\u16eb",
    "\u16e9\u0003\u0002\u0002\u0002\u16eb\u16ea\u0003\u0002\u0002\u0002\u16ec",
    "\u0241\u0003\u0002\u0002\u0002\u16ed\u16ee\u0007G\u0002\u0002\u16ee",
    "\u16ef\u00077\u0002\u0002\u16ef\u0243\u0003\u0002\u0002\u0002\u16f0",
    "\u16f1\u0007G\u0002\u0002\u16f1\u16f2\u0007h\u0002\u0002\u16f2\u16f3",
    "\u00077\u0002\u0002\u16f3\u0245\u0003\u0002\u0002\u0002\u16f4\u1706",
    "\u0005\u0248\u0125\u0002\u16f5\u1706\u0005\u0250\u0129\u0002\u16f6\u16f7",
    "\u0005\u0252\u012a\u0002\u16f7\u16f9\u0007\u0400\u0002\u0002\u16f8\u16fa",
    "\u0005\u0256\u012c\u0002\u16f9\u16f8\u0003\u0002\u0002\u0002\u16f9\u16fa",
    "\u0003\u0002\u0002\u0002\u16fa\u16fb\u0003\u0002\u0002\u0002\u16fb\u16fc",
    "\u0007\u0401\u0002\u0002\u16fc\u1706\u0003\u0002\u0002\u0002\u16fd\u16fe",
    "\u0005\u01f2\u00fa\u0002\u16fe\u1700\u0007\u0400\u0002\u0002\u16ff\u1701",
    "\u0005\u0256\u012c\u0002\u1700\u16ff\u0003\u0002\u0002\u0002\u1700\u1701",
    "\u0003\u0002\u0002\u0002\u1701\u1702\u0003\u0002\u0002\u0002\u1702\u1703",
    "\u0007\u0401\u0002\u0002\u1703\u1706\u0003\u0002\u0002\u0002\u1704\u1706",
    "\u0005\u0254\u012b\u0002\u1705\u16f4\u0003\u0002\u0002\u0002\u1705\u16f5",
    "\u0003\u0002\u0002\u0002\u1705\u16f6\u0003\u0002\u0002\u0002\u1705\u16fd",
    "\u0003\u0002\u0002\u0002\u1705\u1704\u0003\u0002\u0002\u0002\u1706\u0247",
    "\u0003\u0002\u0002\u0002\u1707\u17a5\tl\u0002\u0002\u1708\u1709\u0007",
    "\u001f\u0002\u0002\u1709\u170a\u0007\u0400\u0002\u0002\u170a\u170b\u0005",
    "\u025a\u012e\u0002\u170b\u170c\u0007\u0402\u0002\u0002\u170c\u170d\u0005",
    "\u0224\u0113\u0002\u170d\u170e\u0007\u0401\u0002\u0002\u170e\u17a5\u0003",
    "\u0002\u0002\u0002\u170f\u1710\u0007\u001f\u0002\u0002\u1710\u1711\u0007",
    "\u0400\u0002\u0002\u1711\u1712\u0005\u025a\u012e\u0002\u1712\u1713\u0007",
    "\u00ab\u0002\u0002\u1713\u1714\u0005\u01fe\u0100\u0002\u1714\u1715\u0007",
    "\u0401\u0002\u0002\u1715\u17a5\u0003\u0002\u0002\u0002\u1716\u1717\u0007",
    "\u0016\u0002\u0002\u1717\u1718\u0007\u0400\u0002\u0002\u1718\u1719\u0005",
    "\u025a\u012e\u0002\u1719\u171a\u0007\r\u0002\u0002\u171a\u171b\u0005",
    "\u0224\u0113\u0002\u171b\u171c\u0007\u0401\u0002\u0002\u171c\u17a5\u0003",
    "\u0002\u0002\u0002\u171d\u171e\u0007\u00ac\u0002\u0002\u171e\u171f\u0007",
    "\u0400\u0002\u0002\u171f\u1720\u0005\u01f6\u00fc\u0002\u1720\u1721\u0007",
    "\u0401\u0002\u0002\u1721\u17a5\u0003\u0002\u0002\u0002\u1722\u1723\u0007",
    "\u0015\u0002\u0002\u1723\u1725\u0005\u025a\u012e\u0002\u1724\u1726\u0005",
    "\u024a\u0126\u0002\u1725\u1724\u0003\u0002\u0002\u0002\u1726\u1727\u0003",
    "\u0002\u0002\u0002\u1727\u1725\u0003\u0002\u0002\u0002\u1727\u1728\u0003",
    "\u0002\u0002\u0002\u1728\u172b\u0003\u0002\u0002\u0002\u1729\u172a\u0007",
    "3\u0002\u0002\u172a\u172c\u0005\u0258\u012d\u0002\u172b\u1729\u0003",
    "\u0002\u0002\u0002\u172b\u172c\u0003\u0002\u0002\u0002\u172c\u172d\u0003",
    "\u0002\u0002\u0002\u172d\u172e\u0007\u0156\u0002\u0002\u172e\u17a5\u0003",
    "\u0002\u0002\u0002\u172f\u1731\u0007\u0015\u0002\u0002\u1730\u1732\u0005",
    "\u024a\u0126\u0002\u1731\u1730\u0003\u0002\u0002\u0002\u1732\u1733\u0003",
    "\u0002\u0002\u0002\u1733\u1731\u0003\u0002\u0002\u0002\u1733\u1734\u0003",
    "\u0002\u0002\u0002\u1734\u1737\u0003\u0002\u0002\u0002\u1735\u1736\u0007",
    "3\u0002\u0002\u1736\u1738\u0005\u0258\u012d\u0002\u1737\u1735\u0003",
    "\u0002\u0002\u0002\u1737\u1738\u0003\u0002\u0002\u0002\u1738\u1739\u0003",
    "\u0002\u0002\u0002\u1739\u173a\u0007\u0156\u0002\u0002\u173a\u17a5\u0003",
    "\u0002\u0002\u0002\u173b\u173c\u0007\u00ce\u0002\u0002\u173c\u173d\u0007",
    "\u0400\u0002\u0002\u173d\u1740\u0005\u0256\u012c\u0002\u173e\u173f\u0007",
    "\u00ab\u0002\u0002\u173f\u1741\u0005\u01fe\u0100\u0002\u1740\u173e\u0003",
    "\u0002\u0002\u0002\u1740\u1741\u0003\u0002\u0002\u0002\u1741\u1742\u0003",
    "\u0002\u0002\u0002\u1742\u1743\u0007\u0401\u0002\u0002\u1743\u17a5\u0003",
    "\u0002\u0002\u0002\u1744\u1745\u0007\u0108\u0002\u0002\u1745\u1748\u0007",
    "\u0400\u0002\u0002\u1746\u1749\u0005\u0216\u010c\u0002\u1747\u1749\u0005",
    "\u025a\u012e\u0002\u1748\u1746\u0003\u0002\u0002\u0002\u1748\u1747\u0003",
    "\u0002\u0002\u0002\u1749\u174a\u0003\u0002\u0002\u0002\u174a\u174d\u0007",
    "I\u0002\u0002\u174b\u174e\u0005\u0216\u010c\u0002\u174c\u174e\u0005",
    "\u025a\u012e\u0002\u174d\u174b\u0003\u0002\u0002\u0002\u174d\u174c\u0003",
    "\u0002\u0002\u0002\u174e\u174f\u0003\u0002\u0002\u0002\u174f\u1750\u0007",
    "\u0401\u0002\u0002\u1750\u17a5\u0003\u0002\u0002\u0002\u1751\u1752\t",
    "m\u0002\u0002\u1752\u1755\u0007\u0400\u0002\u0002\u1753\u1756\u0005",
    "\u0216\u010c\u0002\u1754\u1756\u0005\u025a\u012e\u0002\u1755\u1753\u0003",
    "\u0002\u0002\u0002\u1755\u1754\u0003\u0002\u0002\u0002\u1756\u1757\u0003",
    "\u0002\u0002\u0002\u1757\u175a\u0007?\u0002\u0002\u1758\u175b\u0005",
    "\u0212\u010a\u0002\u1759\u175b\u0005\u025a\u012e\u0002\u175a\u1758\u0003",
    "\u0002\u0002\u0002\u175a\u1759\u0003\u0002\u0002\u0002\u175b\u1761\u0003",
    "\u0002\u0002\u0002\u175c\u175f\u0007<\u0002\u0002\u175d\u1760\u0005",
    "\u0212\u010a\u0002\u175e\u1760\u0005\u025a\u012e\u0002\u175f\u175d\u0003",
    "\u0002\u0002\u0002\u175f\u175e\u0003\u0002\u0002\u0002\u1760\u1762\u0003",
    "\u0002\u0002\u0002\u1761\u175c\u0003\u0002\u0002\u0002\u1761\u1762\u0003",
    "\u0002\u0002\u0002\u1762\u1763\u0003\u0002\u0002\u0002\u1763\u1764\u0007",
    "\u0401\u0002\u0002\u1764\u17a5\u0003\u0002\u0002\u0002\u1765\u1766\u0007",
    "\u010c\u0002\u0002\u1766\u1767\u0007\u0400\u0002\u0002\u1767\u176a\t",
    "n\u0002\u0002\u1768\u176b\u0005\u0216\u010c\u0002\u1769\u176b\u0005",
    "\u025a\u012e\u0002\u176a\u1768\u0003\u0002\u0002\u0002\u176a\u1769\u0003",
    "\u0002\u0002\u0002\u176a\u176b\u0003\u0002\u0002\u0002\u176b\u176c\u0003",
    "\u0002\u0002\u0002\u176c\u176f\u0007?\u0002\u0002\u176d\u1770\u0005",
    "\u0216\u010c\u0002\u176e\u1770\u0005\u025a\u012e\u0002\u176f\u176d\u0003",
    "\u0002\u0002\u0002\u176f\u176e\u0003\u0002\u0002\u0002\u1770\u1771\u0003",
    "\u0002\u0002\u0002\u1771\u1772\u0007\u0401\u0002\u0002\u1772\u17a5\u0003",
    "\u0002\u0002\u0002\u1773\u1774\u0007\u010c\u0002\u0002\u1774\u1777\u0007",
    "\u0400\u0002\u0002\u1775\u1778\u0005\u0216\u010c\u0002\u1776\u1778\u0005",
    "\u025a\u012e\u0002\u1777\u1775\u0003\u0002\u0002\u0002\u1777\u1776\u0003",
    "\u0002\u0002\u0002\u1778\u1779\u0003\u0002\u0002\u0002\u1779\u177c\u0007",
    "?\u0002\u0002\u177a\u177d\u0005\u0216\u010c\u0002\u177b\u177d\u0005",
    "\u025a\u012e\u0002\u177c\u177a\u0003\u0002\u0002\u0002\u177c\u177b\u0003",
    "\u0002\u0002\u0002\u177d\u177e\u0003\u0002\u0002\u0002\u177e\u177f\u0007",
    "\u0401\u0002\u0002\u177f\u17a5\u0003\u0002\u0002\u0002\u1780\u1781\u0007",
    "\u03e1\u0002\u0002\u1781\u1784\u0007\u0400\u0002\u0002\u1782\u1785\u0005",
    "\u0216\u010c\u0002\u1783\u1785\u0005\u025a\u012e\u0002\u1784\u1782\u0003",
    "\u0002\u0002\u0002\u1784\u1783\u0003\u0002\u0002\u0002\u1785\u178c\u0003",
    "\u0002\u0002\u0002\u1786\u1787\u0007\r\u0002\u0002\u1787\u1788\to\u0002",
    "\u0002\u1788\u1789\u0007\u0400\u0002\u0002\u1789\u178a\u0005\u0212\u010a",
    "\u0002\u178a\u178b\u0007\u0401\u0002\u0002\u178b\u178d\u0003\u0002\u0002",
    "\u0002\u178c\u1786\u0003\u0002\u0002\u0002\u178c\u178d\u0003\u0002\u0002",
    "\u0002\u178d\u178f\u0003\u0002\u0002\u0002\u178e\u1790\u0005\u024c\u0127",
    "\u0002\u178f\u178e\u0003\u0002\u0002\u0002\u178f\u1790\u0003\u0002\u0002",
    "\u0002\u1790\u1791\u0003\u0002\u0002\u0002\u1791\u1792\u0007\u0401\u0002",
    "\u0002\u1792\u17a5\u0003\u0002\u0002\u0002\u1793\u1794\u0007\u0105\u0002",
    "\u0002\u1794\u1795\u0007\u0400\u0002\u0002\u1795\u1796\u0005<\u001f",
    "\u0002\u1796\u1799\u0007?\u0002\u0002\u1797\u179a\u0005\u0216\u010c",
    "\u0002\u1798\u179a\u0005\u025a\u012e\u0002\u1799\u1797\u0003\u0002\u0002",
    "\u0002\u1799\u1798\u0003\u0002\u0002\u0002\u179a\u179b\u0003\u0002\u0002",
    "\u0002\u179b\u179c\u0007\u0401\u0002\u0002\u179c\u17a5\u0003\u0002\u0002",
    "\u0002\u179d\u179e\u0007\u0319\u0002\u0002\u179e\u179f\u0007\u0400\u0002",
    "\u0002\u179f\u17a0\tp\u0002\u0002\u17a0\u17a1\u0007\u0402\u0002\u0002",
    "\u17a1\u17a2\u0005\u0216\u010c\u0002\u17a2\u17a3\u0007\u0401\u0002\u0002",
    "\u17a3\u17a5\u0003\u0002\u0002\u0002\u17a4\u1707\u0003\u0002\u0002\u0002",
    "\u17a4\u1708\u0003\u0002\u0002\u0002\u17a4\u170f\u0003\u0002\u0002\u0002",
    "\u17a4\u1716\u0003\u0002\u0002\u0002\u17a4\u171d\u0003\u0002\u0002\u0002",
    "\u17a4\u1722\u0003\u0002\u0002\u0002\u17a4\u172f\u0003\u0002\u0002\u0002",
    "\u17a4\u173b\u0003\u0002\u0002\u0002\u17a4\u1744\u0003\u0002\u0002\u0002",
    "\u17a4\u1751\u0003\u0002\u0002\u0002\u17a4\u1765\u0003\u0002\u0002\u0002",
    "\u17a4\u1773\u0003\u0002\u0002\u0002\u17a4\u1780\u0003\u0002\u0002\u0002",
    "\u17a4\u1793\u0003\u0002\u0002\u0002\u17a4\u179d\u0003\u0002\u0002\u0002",
    "\u17a5\u0249\u0003\u0002\u0002\u0002\u17a6\u17a7\u0007\u00ad\u0002\u0002",
    "\u17a7\u17a8\u0005\u0258\u012d\u0002\u17a8\u17a9\u0007\u009e\u0002\u0002",
    "\u17a9\u17aa\u0005\u0258\u012d\u0002\u17aa\u024b\u0003\u0002\u0002\u0002",
    "\u17ab\u17ac\u0007\u0192\u0002\u0002\u17ac\u17b1\u0005\u024e\u0128\u0002",
    "\u17ad\u17ae\u0007\u0402\u0002\u0002\u17ae\u17b0\u0005\u024e\u0128\u0002",
    "\u17af\u17ad\u0003\u0002\u0002\u0002\u17b0\u17b3\u0003\u0002\u0002\u0002",
    "\u17b1\u17af\u0003\u0002\u0002\u0002\u17b1\u17b2\u0003\u0002\u0002\u0002",
    "\u17b2\u17ba\u0003\u0002\u0002\u0002\u17b3\u17b1\u0003\u0002\u0002\u0002",
    "\u17b4\u17b5\u0007\u0192\u0002\u0002\u17b5\u17b6\u0005\u0212\u010a\u0002",
    "\u17b6\u17b7\u0007\u03f4\u0002\u0002\u17b7\u17b8\u0005\u0212\u010a\u0002",
    "\u17b8\u17ba\u0003\u0002\u0002\u0002\u17b9\u17ab\u0003\u0002\u0002\u0002",
    "\u17b9\u17b4\u0003\u0002\u0002\u0002\u17ba\u024d\u0003\u0002\u0002\u0002",
    "\u17bb\u17bd\u0005\u0212\u010a\u0002\u17bc\u17be\tq\u0002\u0002\u17bd",
    "\u17bc\u0003\u0002\u0002\u0002\u17bd\u17be\u0003\u0002\u0002\u0002\u17be",
    "\u024f\u0003\u0002\u0002\u0002\u17bf\u17c0\tr\u0002\u0002\u17c0\u17c2",
    "\u0007\u0400\u0002\u0002\u17c1\u17c3\t)\u0002\u0002\u17c2\u17c1\u0003",
    "\u0002\u0002\u0002\u17c2\u17c3\u0003\u0002\u0002\u0002\u17c3\u17c4\u0003",
    "\u0002\u0002\u0002\u17c4\u17c5\u0005\u0258\u012d\u0002\u17c5\u17c6\u0007",
    "\u0401\u0002\u0002\u17c6\u17f8\u0003\u0002\u0002\u0002\u17c7\u17c8\u0007",
    "\u00f1\u0002\u0002\u17c8\u17ce\u0007\u0400\u0002\u0002\u17c9\u17cf\u0007",
    "\u03ef\u0002\u0002\u17ca\u17cc\u0007\b\u0002\u0002\u17cb\u17ca\u0003",
    "\u0002\u0002\u0002\u17cb\u17cc\u0003\u0002\u0002\u0002\u17cc\u17cd\u0003",
    "\u0002\u0002\u0002\u17cd\u17cf\u0005\u0258\u012d\u0002\u17ce\u17c9\u0003",
    "\u0002\u0002\u0002\u17ce\u17cb\u0003\u0002\u0002\u0002\u17cf\u17d0\u0003",
    "\u0002\u0002\u0002\u17d0\u17f8\u0007\u0401\u0002\u0002\u17d1\u17d2\u0007",
    "\u00f1\u0002\u0002\u17d2\u17d3\u0007\u0400\u0002\u0002\u17d3\u17d4\u0007",
    "/\u0002\u0002\u17d4\u17d5\u0005\u0256\u012c\u0002\u17d5\u17d6\u0007",
    "\u0401\u0002\u0002\u17d6\u17f8\u0003\u0002\u0002\u0002\u17d7\u17d8\t",
    "s\u0002\u0002\u17d8\u17da\u0007\u0400\u0002\u0002\u17d9\u17db\u0007",
    "\b\u0002\u0002\u17da\u17d9\u0003\u0002\u0002\u0002\u17da\u17db\u0003",
    "\u0002\u0002\u0002\u17db\u17dc\u0003\u0002\u0002\u0002\u17dc\u17dd\u0005",
    "\u0258\u012d\u0002\u17dd\u17de\u0007\u0401\u0002\u0002\u17de\u17f8\u0003",
    "\u0002\u0002\u0002\u17df\u17e0\u0007\u00f2\u0002\u0002\u17e0\u17e2\u0007",
    "\u0400\u0002\u0002\u17e1\u17e3\u0007/\u0002\u0002\u17e2\u17e1\u0003",
    "\u0002\u0002\u0002\u17e2\u17e3\u0003\u0002\u0002\u0002\u17e3\u17e4\u0003",
    "\u0002\u0002\u0002\u17e4\u17ef\u0005\u0256\u012c\u0002\u17e5\u17e6\u0007",
    "q\u0002\u0002\u17e6\u17e7\u0007\u0012\u0002\u0002\u17e7\u17ec\u0005",
    "\u00d2j\u0002\u17e8\u17e9\u0007\u0402\u0002\u0002\u17e9\u17eb\u0005",
    "\u00d2j\u0002\u17ea\u17e8\u0003\u0002\u0002\u0002\u17eb\u17ee\u0003",
    "\u0002\u0002\u0002\u17ec\u17ea\u0003\u0002\u0002\u0002\u17ec\u17ed\u0003",
    "\u0002\u0002\u0002\u17ed\u17f0\u0003\u0002\u0002\u0002\u17ee\u17ec\u0003",
    "\u0002\u0002\u0002\u17ef\u17e5\u0003\u0002\u0002\u0002\u17ef\u17f0\u0003",
    "\u0002\u0002\u0002\u17f0\u17f3\u0003\u0002\u0002\u0002\u17f1\u17f2\u0007",
    "\u008d\u0002\u0002\u17f2\u17f4\u0007\u040f\u0002\u0002\u17f3\u17f1\u0003",
    "\u0002\u0002\u0002\u17f3\u17f4\u0003\u0002\u0002\u0002\u17f4\u17f5\u0003",
    "\u0002\u0002\u0002\u17f5\u17f6\u0007\u0401\u0002\u0002\u17f6\u17f8\u0003",
    "\u0002\u0002\u0002\u17f7\u17bf\u0003\u0002\u0002\u0002\u17f7\u17c7\u0003",
    "\u0002\u0002\u0002\u17f7\u17d1\u0003\u0002\u0002\u0002\u17f7\u17d7\u0003",
    "\u0002\u0002\u0002\u17f7\u17df\u0003\u0002\u0002\u0002\u17f8\u0251\u0003",
    "\u0002\u0002\u0002\u17f9\u1811\u0005\u0278\u013d\u0002\u17fa\u1811\u0007",
    "\u0282\u0002\u0002\u17fb\u1811\u0007\u0101\u0002\u0002\u17fc\u1811\u0007",
    "\u00fd\u0002\u0002\u17fd\u1811\u0007\u00fe\u0002\u0002\u17fe\u1811\u0007",
    "\u00ff\u0002\u0002\u17ff\u1811\u0007\u0102\u0002\u0002\u1800\u1811\u0007",
    "\u0103\u0002\u0002\u1801\u1811\u0007\u0104\u0002\u0002\u1802\u1811\u0007",
    "G\u0002\u0002\u1803\u1811\u0007N\u0002\u0002\u1804\u1811\u0007\u0100",
    "\u0002\u0002\u1805\u1811\u0007\u0106\u0002\u0002\u1806\u1811\u0007\u01b6",
    "\u0002\u0002\u1807\u1811\u0007\u0107\u0002\u0002\u1808\u1811\u0007\u0081",
    "\u0002\u0002\u1809\u1811\u0007\u0109\u0002\u0002\u180a\u1811\u0007\u010a",
    "\u0002\u0002\u180b\u1811\u0007\u010b\u0002\u0002\u180c\u1811\u0007\u010c",
    "\u0002\u0002\u180d\u1811\u0007\u010d\u0002\u0002\u180e\u1811\u0007\u010e",
    "\u0002\u0002\u180f\u1811\u0007\u010f\u0002\u0002\u1810\u17f9\u0003\u0002",
    "\u0002\u0002\u1810\u17fa\u0003\u0002\u0002\u0002\u1810\u17fb\u0003\u0002",
    "\u0002\u0002\u1810\u17fc\u0003\u0002\u0002\u0002\u1810\u17fd\u0003\u0002",
    "\u0002\u0002\u1810\u17fe\u0003\u0002\u0002\u0002\u1810\u17ff\u0003\u0002",
    "\u0002\u0002\u1810\u1800\u0003\u0002\u0002\u0002\u1810\u1801\u0003\u0002",
    "\u0002\u0002\u1810\u1802\u0003\u0002\u0002\u0002\u1810\u1803\u0003\u0002",
    "\u0002\u0002\u1810\u1804\u0003\u0002\u0002\u0002\u1810\u1805\u0003\u0002",
    "\u0002\u0002\u1810\u1806\u0003\u0002\u0002\u0002\u1810\u1807\u0003\u0002",
    "\u0002\u0002\u1810\u1808\u0003\u0002\u0002\u0002\u1810\u1809\u0003\u0002",
    "\u0002\u0002\u1810\u180a\u0003\u0002\u0002\u0002\u1810\u180b\u0003\u0002",
    "\u0002\u0002\u1810\u180c\u0003\u0002\u0002\u0002\u1810\u180d\u0003\u0002",
    "\u0002\u0002\u1810\u180e\u0003\u0002\u0002\u0002\u1810\u180f\u0003\u0002",
    "\u0002\u0002\u1811\u0253\u0003\u0002\u0002\u0002\u1812\u1813\tt\u0002",
    "\u0002\u1813\u1814\u0007\u0400\u0002\u0002\u1814\u1815\u0005\u0258\u012d",
    "\u0002\u1815\u1816\u0007\u0401\u0002\u0002\u1816\u0255\u0003\u0002\u0002",
    "\u0002\u1817\u181c\u0005\u021e\u0110\u0002\u1818\u181c\u0005\u01f6\u00fc",
    "\u0002\u1819\u181c\u0005\u0246\u0124\u0002\u181a\u181c\u0005\u025a\u012e",
    "\u0002\u181b\u1817\u0003\u0002\u0002\u0002\u181b\u1818\u0003\u0002\u0002",
    "\u0002\u181b\u1819\u0003\u0002\u0002\u0002\u181b\u181a\u0003\u0002\u0002",
    "\u0002\u181c\u1826\u0003\u0002\u0002\u0002\u181d\u1822\u0007\u0402\u0002",
    "\u0002\u181e\u1823\u0005\u021e\u0110\u0002\u181f\u1823\u0005\u01f6\u00fc",
    "\u0002\u1820\u1823\u0005\u0246\u0124\u0002\u1821\u1823\u0005\u025a\u012e",
    "\u0002\u1822\u181e\u0003\u0002\u0002\u0002\u1822\u181f\u0003\u0002\u0002",
    "\u0002\u1822\u1820\u0003\u0002\u0002\u0002\u1822\u1821\u0003\u0002\u0002",
    "\u0002\u1823\u1825\u0003\u0002\u0002\u0002\u1824\u181d\u0003\u0002\u0002",
    "\u0002\u1825\u1828\u0003\u0002\u0002\u0002\u1826\u1824\u0003\u0002\u0002",
    "\u0002\u1826\u1827\u0003\u0002\u0002\u0002\u1827\u0257\u0003\u0002\u0002",
    "\u0002\u1828\u1826\u0003\u0002\u0002\u0002\u1829\u182e\u0005\u021e\u0110",
    "\u0002\u182a\u182e\u0005\u01f6\u00fc\u0002\u182b\u182e\u0005\u0246\u0124",
    "\u0002\u182c\u182e\u0005\u025a\u012e\u0002\u182d\u1829\u0003\u0002\u0002",
    "\u0002\u182d\u182a\u0003\u0002\u0002\u0002\u182d\u182b\u0003\u0002\u0002",
    "\u0002\u182d\u182c\u0003\u0002\u0002\u0002\u182e\u0259\u0003\u0002\u0002",
    "\u0002\u182f\u1830\b\u012e\u0001\u0002\u1830\u1831\tu\u0002\u0002\u1831",
    "\u183b\u0005\u025a\u012e\u0006\u1832\u1833\u0005\u025c\u012f\u0002\u1833",
    "\u1835\u0007Q\u0002\u0002\u1834\u1836\u0007h\u0002\u0002\u1835\u1834",
    "\u0003\u0002\u0002\u0002\u1835\u1836\u0003\u0002\u0002\u0002\u1836\u1837",
    "\u0003\u0002\u0002\u0002\u1837\u1838\tv\u0002\u0002\u1838\u183b\u0003",
    "\u0002\u0002\u0002\u1839\u183b\u0005\u025c\u012f\u0002\u183a\u182f\u0003",
    "\u0002\u0002\u0002\u183a\u1832\u0003\u0002\u0002\u0002\u183a\u1839\u0003",
    "\u0002\u0002\u0002\u183b\u1842\u0003\u0002\u0002\u0002\u183c\u183d\f",
    "\u0005\u0002\u0002\u183d\u183e\u0005\u0264\u0133\u0002\u183e\u183f\u0005",
    "\u025a\u012e\u0006\u183f\u1841\u0003\u0002\u0002\u0002\u1840\u183c\u0003",
    "\u0002\u0002\u0002\u1841\u1844\u0003\u0002\u0002\u0002\u1842\u1840\u0003",
    "\u0002\u0002\u0002\u1842\u1843\u0003\u0002\u0002\u0002\u1843\u025b\u0003",
    "\u0002\u0002\u0002\u1844\u1842\u0003\u0002\u0002\u0002\u1845\u1848\b",
    "\u012f\u0001\u0002\u1846\u1847\u0007\u041b\u0002\u0002\u1847\u1849\u0007",
    "\u03e6\u0002\u0002\u1848\u1846\u0003\u0002\u0002\u0002\u1848\u1849\u0003",
    "\u0002\u0002\u0002\u1849\u184a\u0003\u0002\u0002\u0002\u184a\u184b\u0005",
    "\u025e\u0130\u0002\u184b\u188c\u0003\u0002\u0002\u0002\u184c\u184d\f",
    "\n\u0002\u0002\u184d\u184e\u0005\u0262\u0132\u0002\u184e\u184f\u0005",
    "\u025c\u012f\u000b\u184f\u188b\u0003\u0002\u0002\u0002\u1850\u1852\f",
    "\b\u0002\u0002\u1851\u1853\u0007h\u0002\u0002\u1852\u1851\u0003\u0002",
    "\u0002\u0002\u1852\u1853\u0003\u0002\u0002\u0002\u1853\u1854\u0003\u0002",
    "\u0002\u0002\u1854\u1855\u0007\u0010\u0002\u0002\u1855\u1856\u0005\u025c",
    "\u012f\u0002\u1856\u1857\u0007\f\u0002\u0002\u1857\u1858\u0005\u025c",
    "\u012f\t\u1858\u188b\u0003\u0002\u0002\u0002\u1859\u185a\f\u0007\u0002",
    "\u0002\u185a\u185b\u0007\u0215\u0002\u0002\u185b\u185c\u0007Z\u0002",
    "\u0002\u185c\u188b\u0005\u025c\u012f\b\u185d\u185f\f\u0005\u0002\u0002",
    "\u185e\u1860\u0007h\u0002\u0002\u185f\u185e\u0003\u0002\u0002\u0002",
    "\u185f\u1860\u0003\u0002\u0002\u0002\u1860\u1861\u0003\u0002\u0002\u0002",
    "\u1861\u1862\tw\u0002\u0002\u1862\u188b\u0005\u025c\u012f\u0006\u1863",
    "\u1865\f\f\u0002\u0002\u1864\u1866\u0007h\u0002\u0002\u1865\u1864\u0003",
    "\u0002\u0002\u0002\u1865\u1866\u0003\u0002\u0002\u0002\u1866\u1867\u0003",
    "\u0002\u0002\u0002\u1867\u1868\u0007I\u0002\u0002\u1868\u186b\u0007",
    "\u0400\u0002\u0002\u1869\u186c\u0005\u00b4[\u0002\u186a\u186c\u0005",
    "\u0232\u011a\u0002\u186b\u1869\u0003\u0002\u0002\u0002\u186b\u186a\u0003",
    "\u0002\u0002\u0002\u186c\u186d\u0003\u0002\u0002\u0002\u186d\u186e\u0007",
    "\u0401\u0002\u0002\u186e\u188b\u0003\u0002\u0002\u0002\u186f\u1870\f",
    "\u000b\u0002\u0002\u1870\u1871\u0007Q\u0002\u0002\u1871\u188b\u0005",
    "\u021c\u010f\u0002\u1872\u1873\f\t\u0002\u0002\u1873\u1874\u0005\u0262",
    "\u0132\u0002\u1874\u1875\tx\u0002\u0002\u1875\u1876\u0007\u0400\u0002",
    "\u0002\u1876\u1877\u0005\u00b4[\u0002\u1877\u1878\u0007\u0401\u0002",
    "\u0002\u1878\u188b\u0003\u0002\u0002\u0002\u1879\u187b\f\u0006\u0002",
    "\u0002\u187a\u187c\u0007h\u0002\u0002\u187b\u187a\u0003\u0002\u0002",
    "\u0002\u187b\u187c\u0003\u0002\u0002\u0002\u187c\u187d\u0003\u0002\u0002",
    "\u0002\u187d\u187e\u0007Z\u0002\u0002\u187e\u1881\u0005\u025c\u012f",
    "\u0002\u187f\u1880\u0007\u015c\u0002\u0002\u1880\u1882\u0007\u040f\u0002",
    "\u0002\u1881\u187f\u0003\u0002\u0002\u0002\u1881\u1882\u0003\u0002\u0002",
    "\u0002\u1882\u188b\u0003\u0002\u0002\u0002\u1883\u1884\f\u0003\u0002",
    "\u0002\u1884\u1885\u0007\u01b3\u0002\u0002\u1885\u1886\u0007\u01c8\u0002",
    "\u0002\u1886\u1887\u0007\u0400\u0002\u0002\u1887\u1888\u0005\u025c\u012f",
    "\u0002\u1888\u1889\u0007\u0401\u0002\u0002\u1889\u188b\u0003\u0002\u0002",
    "\u0002\u188a\u184c\u0003\u0002\u0002\u0002\u188a\u1850\u0003\u0002\u0002",
    "\u0002\u188a\u1859\u0003\u0002\u0002\u0002\u188a\u185d\u0003\u0002\u0002",
    "\u0002\u188a\u1863\u0003\u0002\u0002\u0002\u188a\u186f\u0003\u0002\u0002",
    "\u0002\u188a\u1872\u0003\u0002\u0002\u0002\u188a\u1879\u0003\u0002\u0002",
    "\u0002\u188a\u1883\u0003\u0002\u0002\u0002\u188b\u188e\u0003\u0002\u0002",
    "\u0002\u188c\u188a\u0003\u0002\u0002\u0002\u188c\u188d\u0003\u0002\u0002",
    "\u0002\u188d\u025d\u0003\u0002\u0002\u0002\u188e\u188c\u0003\u0002\u0002",
    "\u0002\u188f\u1890\b\u0130\u0001\u0002\u1890\u18bd\u0005\u021e\u0110",
    "\u0002\u1891\u18bd\u0005\u01f6\u00fc\u0002\u1892\u18bd\u0005\u0246\u0124",
    "\u0002\u1893\u18bd\u0005\u01fc\u00ff\u0002\u1894\u1895\u0005\u0260\u0131",
    "\u0002\u1895\u1896\u0005\u025e\u0130\f\u1896\u18bd\u0003\u0002\u0002",
    "\u0002\u1897\u1898\u0007\u00d2\u0002\u0002\u1898\u18bd\u0005\u025e\u0130",
    "\u000b\u1899\u189a\u0007\u0400\u0002\u0002\u189a\u189f\u0005\u025a\u012e",
    "\u0002\u189b\u189c\u0007\u0402\u0002\u0002\u189c\u189e\u0005\u025a\u012e",
    "\u0002\u189d\u189b\u0003\u0002\u0002\u0002\u189e\u18a1\u0003\u0002\u0002",
    "\u0002\u189f\u189d\u0003\u0002\u0002\u0002\u189f\u18a0\u0003\u0002\u0002",
    "\u0002\u18a0\u18a2\u0003\u0002\u0002\u0002\u18a1\u189f\u0003\u0002\u0002",
    "\u0002\u18a2\u18a3\u0007\u0401\u0002\u0002\u18a3\u18bd\u0003\u0002\u0002",
    "\u0002\u18a4\u18a5\u0007\u0203\u0002\u0002\u18a5\u18a6\u0007\u0400\u0002",
    "\u0002\u18a6\u18a9\u0005\u025a\u012e\u0002\u18a7\u18a8\u0007\u0402\u0002",
    "\u0002\u18a8\u18aa\u0005\u025a\u012e\u0002\u18a9\u18a7\u0003\u0002\u0002",
    "\u0002\u18aa\u18ab\u0003\u0002\u0002\u0002\u18ab\u18a9\u0003\u0002\u0002",
    "\u0002\u18ab\u18ac\u0003\u0002\u0002\u0002\u18ac\u18ad\u0003\u0002\u0002",
    "\u0002\u18ad\u18ae\u0007\u0401\u0002\u0002\u18ae\u18bd\u0003\u0002\u0002",
    "\u0002\u18af\u18b0\u00077\u0002\u0002\u18b0\u18b1\u0007\u0400\u0002",
    "\u0002\u18b1\u18b2\u0005\u00b4[\u0002\u18b2\u18b3\u0007\u0401\u0002",
    "\u0002\u18b3\u18bd\u0003\u0002\u0002\u0002\u18b4\u18b5\u0007\u0400\u0002",
    "\u0002\u18b5\u18b6\u0005\u00b4[\u0002\u18b6\u18b7\u0007\u0401\u0002",
    "\u0002\u18b7\u18bd\u0003\u0002\u0002\u0002\u18b8\u18b9\u0007O\u0002",
    "\u0002\u18b9\u18ba\u0005\u025a\u012e\u0002\u18ba\u18bb\u0005<\u001f",
    "\u0002\u18bb\u18bd\u0003\u0002\u0002\u0002\u18bc\u188f\u0003\u0002\u0002",
    "\u0002\u18bc\u1891\u0003\u0002\u0002\u0002\u18bc\u1892\u0003\u0002\u0002",
    "\u0002\u18bc\u1893\u0003\u0002\u0002\u0002\u18bc\u1894\u0003\u0002\u0002",
    "\u0002\u18bc\u1897\u0003\u0002\u0002\u0002\u18bc\u1899\u0003\u0002\u0002",
    "\u0002\u18bc\u18a4\u0003\u0002\u0002\u0002\u18bc\u18af\u0003\u0002\u0002",
    "\u0002\u18bc\u18b4\u0003\u0002\u0002\u0002\u18bc\u18b8\u0003\u0002\u0002",
    "\u0002\u18bd\u18cf\u0003\u0002\u0002\u0002\u18be\u18bf\f\u0005\u0002",
    "\u0002\u18bf\u18c0\u0005\u0266\u0134\u0002\u18c0\u18c1\u0005\u025e\u0130",
    "\u0006\u18c1\u18ce\u0003\u0002\u0002\u0002\u18c2\u18c3\f\u0004\u0002",
    "\u0002\u18c3\u18c4\u0005\u0268\u0135\u0002\u18c4\u18c5\u0005\u025e\u0130",
    "\u0005\u18c5\u18ce\u0003\u0002\u0002\u0002\u18c6\u18c7\f\u0003\u0002",
    "\u0002\u18c7\u18c8\u0005\u026a\u0136\u0002\u18c8\u18c9\u0005\u025e\u0130",
    "\u0004\u18c9\u18ce\u0003\u0002\u0002\u0002\u18ca\u18cb\f\u000e\u0002",
    "\u0002\u18cb\u18cc\u0007\u001a\u0002\u0002\u18cc\u18ce\u0005\u0200\u0101",
    "\u0002\u18cd\u18be\u0003\u0002\u0002\u0002\u18cd\u18c2\u0003\u0002\u0002",
    "\u0002\u18cd\u18c6\u0003\u0002\u0002\u0002\u18cd\u18ca\u0003\u0002\u0002",
    "\u0002\u18ce\u18d1\u0003\u0002\u0002\u0002\u18cf\u18cd\u0003\u0002\u0002",
    "\u0002\u18cf\u18d0\u0003\u0002\u0002\u0002\u18d0\u025f\u0003\u0002\u0002",
    "\u0002\u18d1\u18cf\u0003\u0002\u0002\u0002\u18d2\u18d3\ty\u0002\u0002",
    "\u18d3\u0261\u0003\u0002\u0002\u0002\u18d4\u18e3\u0007\u03f7\u0002\u0002",
    "\u18d5\u18e3\u0007\u03f8\u0002\u0002\u18d6\u18e3\u0007\u03f9\u0002\u0002",
    "\u18d7\u18d8\u0007\u03f9\u0002\u0002\u18d8\u18e3\u0007\u03f7\u0002\u0002",
    "\u18d9\u18da\u0007\u03f8\u0002\u0002\u18da\u18e3\u0007\u03f7\u0002\u0002",
    "\u18db\u18dc\u0007\u03f9\u0002\u0002\u18dc\u18e3\u0007\u03f8\u0002\u0002",
    "\u18dd\u18de\u0007\u03fa\u0002\u0002\u18de\u18e3\u0007\u03f7\u0002\u0002",
    "\u18df\u18e0\u0007\u03f9\u0002\u0002\u18e0\u18e1\u0007\u03f7\u0002\u0002",
    "\u18e1\u18e3\u0007\u03f8\u0002\u0002\u18e2\u18d4\u0003\u0002\u0002\u0002",
    "\u18e2\u18d5\u0003\u0002\u0002\u0002\u18e2\u18d6\u0003\u0002\u0002\u0002",
    "\u18e2\u18d7\u0003\u0002\u0002\u0002\u18e2\u18d9\u0003\u0002\u0002\u0002",
    "\u18e2\u18db\u0003\u0002\u0002\u0002\u18e2\u18dd\u0003\u0002\u0002\u0002",
    "\u18e2\u18df\u0003\u0002\u0002\u0002\u18e3\u0263\u0003\u0002\u0002\u0002",
    "\u18e4\u18ec\u0007\f\u0002\u0002\u18e5\u18e6\u0007\u03fd\u0002\u0002",
    "\u18e6\u18ec\u0007\u03fd\u0002\u0002\u18e7\u18ec\u0007\u00b2\u0002\u0002",
    "\u18e8\u18ec\u0007p\u0002\u0002\u18e9\u18ea\u0007\u03fc\u0002\u0002",
    "\u18ea\u18ec\u0007\u03fc\u0002\u0002\u18eb\u18e4\u0003\u0002\u0002\u0002",
    "\u18eb\u18e5\u0003\u0002\u0002\u0002\u18eb\u18e7\u0003\u0002\u0002\u0002",
    "\u18eb\u18e8\u0003\u0002\u0002\u0002\u18eb\u18e9\u0003\u0002\u0002\u0002",
    "\u18ec\u0265\u0003\u0002\u0002\u0002\u18ed\u18ee\u0007\u03f9\u0002\u0002",
    "\u18ee\u18f5\u0007\u03f9\u0002\u0002\u18ef\u18f0\u0007\u03f8\u0002\u0002",
    "\u18f0\u18f5\u0007\u03f8\u0002\u0002\u18f1\u18f5\u0007\u03fd\u0002\u0002",
    "\u18f2\u18f5\u0007\u03fe\u0002\u0002\u18f3\u18f5\u0007\u03fc\u0002\u0002",
    "\u18f4\u18ed\u0003\u0002\u0002\u0002\u18f4\u18ef\u0003\u0002\u0002\u0002",
    "\u18f4\u18f1\u0003\u0002\u0002\u0002\u18f4\u18f2\u0003\u0002\u0002\u0002",
    "\u18f4\u18f3\u0003\u0002\u0002\u0002\u18f5\u0267\u0003\u0002\u0002\u0002",
    "\u18f6\u18f7\tz\u0002\u0002\u18f7\u0269\u0003\u0002\u0002\u0002\u18f8",
    "\u18f9\u0007\u03f4\u0002\u0002\u18f9\u18fe\u0007\u03f8\u0002\u0002\u18fa",
    "\u18fb\u0007\u03f4\u0002\u0002\u18fb\u18fc\u0007\u03f8\u0002\u0002\u18fc",
    "\u18fe\u0007\u03f8\u0002\u0002\u18fd\u18f8\u0003\u0002\u0002\u0002\u18fd",
    "\u18fa\u0003\u0002\u0002\u0002\u18fe\u026b\u0003\u0002\u0002\u0002\u18ff",
    "\u1900\t{\u0002\u0002\u1900\u026d\u0003\u0002\u0002\u0002\u1901\u1902",
    "\t|\u0002\u0002\u1902\u026f\u0003\u0002\u0002\u0002\u1903\u1904\t}\u0002",
    "\u0002\u1904\u0271\u0003\u0002\u0002\u0002\u1905\u1906\t~\u0002\u0002",
    "\u1906\u0273\u0003\u0002\u0002\u0002\u1907\u1908\t\u007f\u0002\u0002",
    "\u1908\u0275\u0003\u0002\u0002\u0002\u1909\u190a\t\u0080\u0002\u0002",
    "\u190a\u0277\u0003\u0002\u0002\u0002\u190b\u190c\t\u0081\u0002\u0002",
    "\u190c\u0279\u0003\u0002\u0002\u0002\u03a6\u027b\u027e\u0284\u0287\u028a",
    "\u028c\u0291\u0294\u0297\u02a0\u02c7\u02d3\u02de\u02ef\u02f4\u0300\u031b",
    "\u0324\u0329\u032f\u0334\u0338\u0341\u0344\u0347\u034b\u0352\u0355\u035a",
    "\u0362\u0367\u036c\u036f\u0371\u037d\u0380\u0384\u0387\u038b\u038e\u0392",
    "\u0395\u0398\u039c\u039f\u03a3\u03a9\u03af\u03b5\u03bc\u03c3\u03c9\u03cf",
    "\u03d8\u03dd\u03ed\u03f4\u03f8\u0402\u0406\u040a\u040e\u0412\u0417\u041a",
    "\u041d\u0420\u0423\u0429\u042d\u0433\u0438\u043b\u043e\u0440\u044b\u044f",
    "\u0452\u0460\u0463\u0467\u046a\u046e\u0471\u0475\u0478\u047c\u047f\u0482",
    "\u0486\u0489\u048d\u0493\u04a0\u04a7\u04ac\u04af\u04b4\u04bc\u04c2\u04c6",
    "\u04c9\u04ce\u04d1\u04d5\u04d8\u04dc\u04df\u04e7\u04e9\u04f0\u04f6\u04fe",
    "\u0501\u0508\u050b\u050d\u0513\u0519\u052a\u0531\u0538\u0543\u0546\u0553",
    "\u0560\u0565\u0575\u057d\u0587\u058d\u0597\u059a\u059f\u05ac\u05b3\u05ba",
    "\u05bc\u05c3\u05c7\u05c9\u05ce\u05d1\u05d7\u05dc\u05de\u05e2\u05e5\u05e8",
    "\u05ee\u05f3\u05f5\u05fa\u0601\u0603\u060a\u060f\u0613\u0616\u061e\u0626",
    "\u0628\u0630\u0634\u0637\u063d\u0642\u0645\u064b\u064e\u0652\u0657\u065c",
    "\u0660\u0665\u0668\u066c\u0670\u0674\u0678\u067d\u0682\u0687\u068d\u0692",
    "\u0697\u069d\u06a2\u06a7\u06ac\u06b1\u06b6\u06bb\u06c0\u06c5\u06ca\u06cf",
    "\u06d5\u06da\u06e0\u06ea\u06f1\u06f3\u06fb\u0700\u0703\u070b\u0711\u0721",
    "\u072d\u072f\u0732\u073a\u0740\u0746\u0753\u075a\u0762\u0765\u0770\u0778",
    "\u077b\u0787\u078e\u0796\u0799\u07a5\u07ac\u07b4\u07b7\u07be\u07c6\u07c9",
    "\u07cb\u07d0\u07d8\u07e1\u07e5\u07e9\u07ee\u07f4\u07fa\u07ff\u0804\u0809",
    "\u080e\u0811\u0816\u081b\u0825\u0829\u0830\u0835\u0838\u083d\u0840\u0844",
    "\u0848\u0850\u0863\u0866\u0869\u086d\u0877\u0884\u088b\u088e\u0897\u089a",
    "\u089d\u08a8\u08ab\u08af\u08b7\u08ba\u08bf\u08c7\u08cd\u08d1\u08d5\u08da",
    "\u08df\u08e6\u08ea\u08f5\u08fd\u0900\u0906\u090c\u090e\u0913\u0916\u091c",
    "\u0922\u0924\u0928\u092b\u092e\u0934\u093a\u093d\u0943\u0949\u094b\u0950",
    "\u0958\u095a\u0963\u0968\u0970\u0974\u097c\u0986\u098b\u0992\u0996\u099a",
    "\u09ba\u09be\u09ca\u09cd\u09d6\u09e7\u09f3\u09fa\u0a01\u0a10\u0a1d\u0a23",
    "\u0a29\u0a2f\u0a35\u0a3b\u0a41\u0a46\u0a4d\u0a54\u0a5b\u0a60\u0a63\u0a65",
    "\u0a73\u0a7a\u0a81\u0a87\u0a8b\u0a8f\u0a96\u0a99\u0a9e\u0aa5\u0aac\u0ab0",
    "\u0ab9\u0ac2\u0acb\u0ace\u0ad2\u0adb\u0adf\u0ae2\u0ae5\u0aeb\u0aee\u0af4",
    "\u0afd\u0b00\u0b0b\u0b0e\u0b13\u0b16\u0b1b\u0b25\u0b2a\u0b30\u0b32\u0b38",
    "\u0b3a\u0b40\u0b48\u0b4d\u0b55\u0b58\u0b5d\u0b60\u0b65\u0b6d\u0b75\u0b7b",
    "\u0b83\u0b88\u0b90\u0b93\u0b97\u0b9a\u0ba2\u0ba8\u0bb1\u0bb4\u0bb8\u0bbc",
    "\u0bc2\u0bc6\u0bca\u0bcc\u0bcf\u0bd2\u0bd5\u0bdb\u0bdf\u0be2\u0be5\u0be8",
    "\u0beb\u0bed\u0bf1\u0bf7\u0bfd\u0c02\u0c05\u0c0b\u0c0f\u0c17\u0c1b\u0c1e",
    "\u0c21\u0c2a\u0c2e\u0c31\u0c35\u0c39\u0c3c\u0c3f\u0c44\u0c4a\u0c4e\u0c58",
    "\u0c5e\u0c62\u0c68\u0c6c\u0c72\u0c75\u0c81\u0c85\u0c89\u0c91\u0c95\u0c9d",
    "\u0ca0\u0ca4\u0ca7\u0caf\u0cb4\u0cb7\u0cba\u0cbe\u0cc1\u0cca\u0ccf\u0cd8",
    "\u0cdd\u0ce4\u0ceb\u0cf3\u0cf8\u0d00\u0d03\u0d06\u0d0d\u0d10\u0d17\u0d1a",
    "\u0d22\u0d28\u0d33\u0d36\u0d41\u0d47\u0d4b\u0d56\u0d5b\u0d5d\u0d61\u0d6b",
    "\u0d75\u0d7b\u0d80\u0d83\u0d86\u0d89\u0d8f\u0d94\u0d97\u0d9a\u0d9d\u0d9f",
    "\u0da5\u0daa\u0dad\u0db0\u0db4\u0dba\u0dbe\u0dc8\u0dcc\u0dd2\u0ddb\u0dde",
    "\u0de2\u0de5\u0de9\u0ded\u0df0\u0df2\u0dfa\u0e06\u0e0c\u0e0e\u0e14\u0e16",
    "\u0e18\u0e1e\u0e26\u0e2e\u0e34\u0e3d\u0e42\u0e44\u0e48\u0e4c\u0e52\u0e59",
    "\u0e5e\u0e67\u0e6a\u0e6e\u0e72\u0e76\u0e79\u0e7c\u0e7f\u0e83\u0e87\u0e8a",
    "\u0e8d\u0e90\u0e97\u0e9b\u0eaa\u0eb7\u0ebf\u0ec9\u0ecd\u0ed0\u0ed6\u0ed9",
    "\u0edc\u0ee5\u0eee\u0ef8\u0efc\u0f06\u0f10\u0f18\u0f1b\u0f24\u0f27\u0f2b",
    "\u0f30\u0f34\u0f3d\u0f40\u0f5f\u0f62\u0f65\u0f9d\u0fa2\u0fbe\u0fcc\u0fd3",
    "\u0fd7\u0fdd\u0fe5\u0fe7\u0ff2\u0ffc\u1003\u1009\u1011\u1016\u101e\u1026",
    "\u102e\u1036\u103c\u103f\u1043\u1048\u104d\u1053\u1055\u1060\u1065\u106c",
    "\u106e\u107c\u1082\u1087\u108c\u1092\u1099\u10a1\u10a9\u10ae\u10b4\u10b7",
    "\u10bf\u10c6\u10cf\u10d2\u10e3\u10eb\u10f3\u10f7\u10fe\u1104\u110c\u1115",
    "\u111b\u1122\u1129\u112e\u1131\u1133\u1139\u113b\u113f\u1141\u1144\u114d",
    "\u1153\u115a\u1161\u1166\u1169\u116b\u1171\u1173\u1177\u1179\u117c\u1181",
    "\u1188\u1191\u1196\u119f\u11a6\u11ab\u11ae\u11b0\u11b6\u11b8\u11bb\u11c7",
    "\u11cd\u11d6\u11df\u11e4\u11ed\u11f3\u11fe\u1201\u120d\u1214\u1219\u1228",
    "\u1233\u1236\u1240\u124a\u1254\u125e\u1262\u1266\u1270\u1275\u12a7\u12b9",
    "\u12c1\u12cc\u12d3\u12d7\u12de\u12e3\u12e6\u12e9\u12f2\u12f6\u1314\u131b",
    "\u131f\u1326\u1329\u1339\u133c\u1346\u134a\u1350\u1353\u1358\u135c\u1363",
    "\u1366\u136c\u1384\u1391\u1394\u139e\u13a6\u13aa\u13b1\u13b4\u13bd\u13c3",
    "\u13c9\u13d3\u13d5\u13db\u13de\u13e1\u13ed\u13f0\u13f6\u13f9\u1401\u1409",
    "\u140f\u1413\u1421\u142d\u1434\u1437\u143e\u1445\u144a\u144f\u145a\u1465",
    "\u146b\u1470\u147d\u147f\u1484\u1489\u148b\u1492\u1499\u149c\u149f\u14a5",
    "\u14a9\u14af\u14b5\u14c2\u14c7\u14cf\u14d2\u14d7\u14dc\u14e4\u14e7\u14ed",
    "\u14f1\u14fe\u1504\u1510\u1513\u151c\u1521\u1527\u152e\u1530\u1535\u1537",
    "\u153b\u1541\u1544\u154e\u1552\u1566\u156d\u156f\u1576\u1578\u157c\u1581",
    "\u158c\u1591\u1597\u159a\u159e\u15a3\u15a6\u15aa\u15ae\u15b0\u15b5\u15ba",
    "\u15c7\u15ca\u15ce\u15d1\u15d4\u15d9\u15dc\u15e1\u15e6\u15e9\u15ee\u15f1",
    "\u15f7\u15fa\u15fe\u1601\u1604\u1608\u160b\u160e\u1612\u1615\u1618\u161b",
    "\u161f\u1622\u1625\u162a\u162f\u1634\u1637\u163c\u163f\u1644\u1647\u164b",
    "\u164f\u1657\u165e\u1662\u1667\u166a\u166f\u1673\u1675\u1685\u168e\u1696",
    "\u169f\u16a9\u16b1\u16b9\u16c1\u16c9\u16ce\u16d2\u16d7\u16dc\u16df\u16e4",
    "\u16e7\u16eb\u16f9\u1700\u1705\u1727\u172b\u1733\u1737\u1740\u1748\u174d",
    "\u1755\u175a\u175f\u1761\u176a\u176f\u1777\u177c\u1784\u178c\u178f\u1799",
    "\u17a4\u17b1\u17b9\u17bd\u17c2\u17cb\u17ce\u17da\u17e2\u17ec\u17ef\u17f3",
    "\u17f7\u1810\u181b\u1822\u1826\u182d\u1835\u183a\u1842\u1848\u1852\u185f",
    "\u1865\u186b\u187b\u1881\u188a\u188c\u189f\u18ab\u18bc\u18cd\u18cf\u18e2",
    "\u18eb\u18f4\u18fd"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

class MySqlParser extends antlr4.Parser {

    static grammarFileName = "MySqlParser.g4";
    static literalNames = [ null, null, null, null, null, "'ADD'", "'ALL'", 
                            "'ALTER'", "'ALWAYS'", "'ANALYZE'", "'AND'", 
                            "'AS'", "'ASC'", "'BEFORE'", "'BETWEEN'", "'BOTH'", 
                            "'BY'", "'CALL'", "'CASCADE'", "'CASE'", "'CAST'", 
                            "'CHANGE'", "'CHARACTER'", "'CHECK'", "'COLLATE'", 
                            "'COLUMN'", "'CONDITION'", "'CONSTRAINT'", "'CONTINUE'", 
                            "'CONVERT'", "'CREATE'", "'CROSS'", "'CURRENT'", 
                            "'CURRENT_USER'", "'CURSOR'", "'DATABASE'", 
                            "'DATABASES'", "'DECLARE'", "'DEFAULT'", "'DELAYED'", 
                            "'DELETE'", "'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", 
                            "'DIAGNOSTICS'", "'DISTINCT'", "'DISTINCTROW'", 
                            "'DROP'", "'EACH'", "'ELSE'", "'ELSEIF'", "'ENCLOSED'", 
                            "'ESCAPED'", "'EXISTS'", "'EXIT'", "'EXPLAIN'", 
                            "'FALSE'", "'FETCH'", "'FOR'", "'FORCE'", "'FOREIGN'", 
                            "'FROM'", "'FULLTEXT'", "'GENERATED'", "'GET'", 
                            "'GRANT'", "'GROUP'", "'HAVING'", "'HIGH_PRIORITY'", 
                            "'IF'", "'IGNORE'", "'IN'", "'INDEX'", "'INFILE'", 
                            "'INNER'", "'INOUT'", "'INSERT'", "'INTERVAL'", 
                            "'INTO'", "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", 
                            "'KEYS'", "'KILL'", "'LEADING'", "'LEAVE'", 
                            "'LEFT'", "'LIKE'", "'LIMIT'", "'LINEAR'", "'LINES'", 
                            "'LOAD'", "'LOCK'", "'LOOP'", "'LOW_PRIORITY'", 
                            "'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", 
                            "'MATCH'", "'MAXVALUE'", "'MODIFIES'", "'NATURAL'", 
                            "'NOT'", "'NO_WRITE_TO_BINLOG'", "'NULL'", "'NUMBER'", 
                            "'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONALLY'", 
                            "'OR'", "'ORDER'", "'OUT'", "'OUTER'", "'OUTFILE'", 
                            "'PARTITION'", "'PRIMARY'", "'PROCEDURE'", "'PURGE'", 
                            "'RANGE'", "'READ'", "'READS'", "'REFERENCES'", 
                            "'REGEXP'", "'RELEASE'", "'RENAME'", "'REPEAT'", 
                            "'REPLACE'", "'REQUIRE'", "'RESIGNAL'", "'RESTRICT'", 
                            "'RETURN'", "'REVOKE'", "'RIGHT'", "'RLIKE'", 
                            "'SCHEMA'", "'SCHEMAS'", "'SELECT'", "'SET'", 
                            "'SEPARATOR'", "'SHOW'", "'SIGNAL'", "'SPATIAL'", 
                            "'SQL'", "'SQLEXCEPTION'", "'SQLSTATE'", "'SQLWARNING'", 
                            "'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", 
                            "'SQL_SMALL_RESULT'", "'SSL'", "'STACKED'", 
                            "'STARTING'", "'STRAIGHT_JOIN'", "'TABLE'", 
                            "'TERMINATED'", "'THEN'", "'TO'", "'TRAILING'", 
                            "'TRIGGER'", "'TRUE'", "'UNDO'", "'UNION'", 
                            "'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", "'UPDATE'", 
                            "'USAGE'", "'USE'", "'USING'", "'VALUES'", "'WHEN'", 
                            "'WHERE'", "'WHILE'", "'WITH'", "'WRITE'", "'XOR'", 
                            "'ZEROFILL'", "'TINYINT'", "'SMALLINT'", "'MEDIUMINT'", 
                            "'MIDDLEINT'", "'INT'", "'INT1'", "'INT2'", 
                            "'INT3'", "'INT4'", "'INT8'", "'INTEGER'", "'BIGINT'", 
                            "'REAL'", "'DOUBLE'", "'PRECISION'", "'FLOAT'", 
                            "'FLOAT4'", "'FLOAT8'", "'DECIMAL'", "'DEC'", 
                            "'NUMERIC'", "'DATE'", "'TIME'", "'TIMESTAMP'", 
                            "'DATETIME'", "'YEAR'", "'CHAR'", "'VARCHAR'", 
                            "'NVARCHAR'", "'NATIONAL'", "'BINARY'", "'VARBINARY'", 
                            "'TINYBLOB'", "'BLOB'", "'MEDIUMBLOB'", "'LONG'", 
                            "'LONGBLOB'", "'TINYTEXT'", "'TEXT'", "'MEDIUMTEXT'", 
                            "'LONGTEXT'", "'ENUM'", "'VARYING'", "'SERIAL'", 
                            "'YEAR_MONTH'", "'DAY_HOUR'", "'DAY_MINUTE'", 
                            "'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", 
                            "'MINUTE_SECOND'", "'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", 
                            "'HOUR_MICROSECOND'", "'DAY_MICROSECOND'", "'JSON_VALID'", 
                            "'JSON_SCHEMA_VALID'", "'AVG'", "'BIT_AND'", 
                            "'BIT_OR'", "'BIT_XOR'", "'COUNT'", "'GROUP_CONCAT'", 
                            "'MAX'", "'MIN'", "'STD'", "'STDDEV'", "'STDDEV_POP'", 
                            "'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", "'VAR_SAMP'", 
                            "'VARIANCE'", "'CURRENT_DATE'", "'CURRENT_TIME'", 
                            "'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", 
                            "'CURTIME'", "'DATE_ADD'", "'DATE_SUB'", "'EXTRACT'", 
                            "'LOCALTIMESTAMP'", "'NOW'", "'POSITION'", "'SUBSTR'", 
                            "'SUBSTRING'", "'SYSDATE'", "'TRIM'", "'UTC_DATE'", 
                            "'UTC_TIME'", "'UTC_TIMESTAMP'", "'ACCOUNT'", 
                            "'ACTION'", "'AFTER'", "'AGGREGATE'", "'ALGORITHM'", 
                            "'ANY'", "'AT'", "'AUTHORS'", "'AUTOCOMMIT'", 
                            "'AUTOEXTEND_SIZE'", "'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", 
                            "'BEGIN'", "'BINLOG'", "'BIT'", "'BLOCK'", "'BOOL'", 
                            "'BOOLEAN'", "'BTREE'", "'CACHE'", "'CASCADED'", 
                            "'CHAIN'", "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", 
                            "'PAGE_CHECKSUM'", "'CIPHER'", "'CLASS_ORIGIN'", 
                            "'CLIENT'", "'CLOSE'", "'COALESCE'", "'CODE'", 
                            "'COLUMNS'", "'COLUMN_FORMAT'", "'COLUMN_NAME'", 
                            "'COMMENT'", "'COMMIT'", "'COMPACT'", "'COMPLETION'", 
                            "'COMPRESSED'", "'COMPRESSION'", "'CONCURRENT'", 
                            "'CONNECTION'", "'CONSISTENT'", "'CONSTRAINT_CATALOG'", 
                            "'CONSTRAINT_SCHEMA'", "'CONSTRAINT_NAME'", 
                            "'CONTAINS'", "'CONTEXT'", "'CONTRIBUTORS'", 
                            "'COPY'", "'CPU'", "'CURSOR_NAME'", "'DATA'", 
                            "'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'", 
                            "'DEFINER'", "'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", 
                            "'DIRECTORY'", "'DISABLE'", "'DISCARD'", "'DISK'", 
                            "'DO'", "'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'", 
                            "'ENABLE'", "'ENCRYPTION'", "'END'", "'ENDS'", 
                            "'ENGINE'", "'ENGINES'", "'ERROR'", "'ERRORS'", 
                            "'ESCAPE'", "'EVEN'", "'EVENT'", "'EVENTS'", 
                            "'EVERY'", "'EXCHANGE'", "'EXCLUSIVE'", "'EXPIRE'", 
                            "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", "'FAST'", 
                            "'FAULTS'", "'FIELDS'", "'FILE_BLOCK_SIZE'", 
                            "'FILTER'", "'FIRST'", "'FIXED'", "'FLUSH'", 
                            "'FOLLOWS'", "'FOUND'", "'FULL'", "'FUNCTION'", 
                            "'GENERAL'", "'GLOBAL'", "'GRANTS'", "'GROUP_REPLICATION'", 
                            "'HANDLER'", "'HASH'", "'HELP'", "'HOST'", "'HOSTS'", 
                            "'IDENTIFIED'", "'IGNORE_SERVER_IDS'", "'IMPORT'", 
                            "'INDEXES'", "'INITIAL_SIZE'", "'INPLACE'", 
                            "'INSERT_METHOD'", "'INSTALL'", "'INSTANCE'", 
                            "'INVISIBLE'", "'INVOKER'", "'IO'", "'IO_THREAD'", 
                            "'IPC'", "'ISOLATION'", "'ISSUER'", "'JSON'", 
                            "'KEY_BLOCK_SIZE'", "'LANGUAGE'", "'LAST'", 
                            "'LEAVES'", "'LESS'", "'LEVEL'", "'LIST'", "'LOCAL'", 
                            "'LOGFILE'", "'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", 
                            "'MASTER_CONNECT_RETRY'", "'MASTER_DELAY'", 
                            "'MASTER_HEARTBEAT_PERIOD'", "'MASTER_HOST'", 
                            "'MASTER_LOG_FILE'", "'MASTER_LOG_POS'", "'MASTER_PASSWORD'", 
                            "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", "'MASTER_SSL'", 
                            "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", 
                            "'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", 
                            "'MASTER_SSL_KEY'", "'MASTER_TLS_VERSION'", 
                            "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", 
                            "'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", "'MAX_SIZE'", 
                            "'MAX_UPDATES_PER_HOUR'", "'MAX_USER_CONNECTIONS'", 
                            "'MEDIUM'", "'MEMBER'", "'MERGE'", "'MESSAGE_TEXT'", 
                            "'MID'", "'MIGRATE'", "'MIN_ROWS'", "'MODE'", 
                            "'MODIFY'", "'MUTEX'", "'MYSQL'", "'MYSQL_ERRNO'", 
                            "'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'", "'NEXT'", 
                            "'NO'", "'NODEGROUP'", "'NONE'", "'OFFLINE'", 
                            "'OFFSET'", "'OF'", "'OJ'", "'OLD_PASSWORD'", 
                            "'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", "'OPTIMIZER_COSTS'", 
                            "'OPTIONS'", "'OWNER'", "'PACK_KEYS'", "'PAGE'", 
                            "'PARSER'", "'PARTIAL'", "'PARTITIONING'", "'PARTITIONS'", 
                            "'PASSWORD'", "'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", 
                            "'PLUGINS'", "'PORT'", "'PRECEDES'", "'PREPARE'", 
                            "'PRESERVE'", "'PREV'", "'PROCESSLIST'", "'PROFILE'", 
                            "'PROFILES'", "'PROXY'", "'QUERY'", "'QUICK'", 
                            "'REBUILD'", "'RECOVER'", "'REDO_BUFFER_SIZE'", 
                            "'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", 
                            "'RELAY_LOG_POS'", "'RELAYLOG'", "'REMOVE'", 
                            "'REORGANIZE'", "'REPAIR'", "'REPLICATE_DO_DB'", 
                            "'REPLICATE_DO_TABLE'", "'REPLICATE_IGNORE_DB'", 
                            "'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", 
                            "'REPLICATE_WILD_DO_TABLE'", "'REPLICATE_WILD_IGNORE_TABLE'", 
                            "'REPLICATION'", "'RESET'", "'RESUME'", "'RETURNED_SQLSTATE'", 
                            "'RETURNS'", "'ROLE'", "'ROLLBACK'", "'ROLLUP'", 
                            "'ROTATE'", "'ROW'", "'ROWS'", "'ROW_FORMAT'", 
                            "'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'", "'SERVER'", 
                            "'SESSION'", "'SHARE'", "'SHARED'", "'SIGNED'", 
                            "'SIMPLE'", "'SLAVE'", "'SLOW'", "'SNAPSHOT'", 
                            "'SOCKET'", "'SOME'", "'SONAME'", "'SOUNDS'", 
                            "'SOURCE'", "'SQL_AFTER_GTIDS'", "'SQL_AFTER_MTS_GAPS'", 
                            "'SQL_BEFORE_GTIDS'", "'SQL_BUFFER_RESULT'", 
                            "'SQL_CACHE'", "'SQL_NO_CACHE'", "'SQL_THREAD'", 
                            "'START'", "'STARTS'", "'STATS_AUTO_RECALC'", 
                            "'STATS_PERSISTENT'", "'STATS_SAMPLE_PAGES'", 
                            "'STATUS'", "'STOP'", "'STORAGE'", "'STORED'", 
                            "'STRING'", "'SUBCLASS_ORIGIN'", "'SUBJECT'", 
                            "'SUBPARTITION'", "'SUBPARTITIONS'", "'SUSPEND'", 
                            "'SWAPS'", "'SWITCHES'", "'TABLE_NAME'", "'TABLESPACE'", 
                            "'TEMPORARY'", "'TEMPTABLE'", "'THAN'", "'TRADITIONAL'", 
                            "'TRANSACTION'", "'TRANSACTIONAL'", "'TRIGGERS'", 
                            "'TRUNCATE'", "'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", 
                            "'UNINSTALL'", "'UNKNOWN'", "'UNTIL'", "'UPGRADE'", 
                            "'USER'", "'USE_FRM'", "'USER_RESOURCES'", "'VALIDATION'", 
                            "'VALUE'", "'VARIABLES'", "'VIEW'", "'VIRTUAL'", 
                            "'VISIBLE'", "'WAIT'", "'WARNINGS'", "'WITHOUT'", 
                            "'WORK'", "'WRAPPER'", "'X509'", "'XA'", "'XML'", 
                            "'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", 
                            "'QUARTER'", "'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", 
                            "'WEEK'", "'SECOND'", "'MICROSECOND'", "'TABLES'", 
                            "'ROUTINE'", "'EXECUTE'", "'FILE'", "'PROCESS'", 
                            "'RELOAD'", "'SHUTDOWN'", "'SUPER'", "'PRIVILEGES'", 
                            "'APPLICATION_PASSWORD_ADMIN'", "'AUDIT_ADMIN'", 
                            "'BACKUP_ADMIN'", "'BINLOG_ADMIN'", "'BINLOG_ENCRYPTION_ADMIN'", 
                            "'CLONE_ADMIN'", "'CONNECTION_ADMIN'", "'ENCRYPTION_KEY_ADMIN'", 
                            "'FIREWALL_ADMIN'", "'FIREWALL_USER'", "'GROUP_REPLICATION_ADMIN'", 
                            "'INNODB_REDO_LOG_ARCHIVE'", "'NDB_STORED_USER'", 
                            "'PERSIST_RO_VARIABLES_ADMIN'", "'REPLICATION_APPLIER'", 
                            "'REPLICATION_SLAVE_ADMIN'", "'RESOURCE_GROUP_ADMIN'", 
                            "'RESOURCE_GROUP_USER'", "'ROLE_ADMIN'", null, 
                            "'SET_USER_ID'", "'SHOW_ROUTINE'", "'SYSTEM_VARIABLES_ADMIN'", 
                            "'TABLE_ENCRYPTION_ADMIN'", "'VERSION_TOKEN_ADMIN'", 
                            "'XA_RECOVER_ADMIN'", "'ARMSCII8'", "'ASCII'", 
                            "'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", 
                            "'CP1257'", "'CP850'", "'CP852'", "'CP866'", 
                            "'CP932'", "'DEC8'", "'EUCJPMS'", "'EUCKR'", 
                            "'GB2312'", "'GBK'", "'GEOSTD8'", "'GREEK'", 
                            "'HEBREW'", "'HP8'", "'KEYBCS2'", "'KOI8R'", 
                            "'KOI8U'", "'LATIN1'", "'LATIN2'", "'LATIN5'", 
                            "'LATIN7'", "'MACCE'", "'MACROMAN'", "'SJIS'", 
                            "'SWE7'", "'TIS620'", "'UCS2'", "'UJIS'", "'UTF16'", 
                            "'UTF16LE'", "'UTF32'", "'UTF8'", "'UTF8MB3'", 
                            "'UTF8MB4'", "'ARCHIVE'", "'BLACKHOLE'", "'CSV'", 
                            "'FEDERATED'", "'INNODB'", "'MEMORY'", "'MRG_MYISAM'", 
                            "'MYISAM'", "'NDB'", "'NDBCLUSTER'", "'PERFORMANCE_SCHEMA'", 
                            "'TOKUDB'", "'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", 
                            "'SERIALIZABLE'", "'GEOMETRYCOLLECTION'", "'GEOMCOLLECTION'", 
                            "'GEOMETRY'", "'LINESTRING'", "'MULTILINESTRING'", 
                            "'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", 
                            "'POLYGON'", "'ABS'", "'ACOS'", "'ADDDATE'", 
                            "'ADDTIME'", "'AES_DECRYPT'", "'AES_ENCRYPT'", 
                            "'AREA'", "'ASBINARY'", "'ASIN'", "'ASTEXT'", 
                            "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", 
                            "'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", 
                            "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", 
                            "'ATAN'", "'ATAN2'", "'BENCHMARK'", "'BIN'", 
                            "'BIT_COUNT'", "'BIT_LENGTH'", "'BUFFER'", "'CATALOG_NAME'", 
                            "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", 
                            "'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", 
                            "'COLLATION'", "'COMPRESS'", "'CONCAT'", "'CONCAT_WS'", 
                            "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
                            "'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", 
                            "'CREATE_ASYMMETRIC_PUB_KEY'", "'CREATE_DH_PARAMETERS'", 
                            "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", 
                            "'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", 
                            "'DAYOFWEEK'", "'DAYOFYEAR'", "'DECODE'", "'DEGREES'", 
                            "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", 
                            "'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", 
                            "'ENDPOINT'", "'ENVELOPE'", "'EQUALS'", "'EXP'", 
                            "'EXPORT_SET'", "'EXTERIORRING'", "'EXTRACTVALUE'", 
                            "'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", 
                            "'FOUND_ROWS'", "'FROM_BASE64'", "'FROM_DAYS'", 
                            "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", "'GEOMCOLLFROMWKB'", 
                            "'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", 
                            "'GEOMETRYFROMTEXT'", "'GEOMETRYFROMWKB'", "'GEOMETRYN'", 
                            "'GEOMETRYTYPE'", "'GEOMFROMTEXT'", "'GEOMFROMWKB'", 
                            "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", 
                            "'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", 
                            "'IFNULL'", "'INET6_ATON'", "'INET6_NTOA'", 
                            "'INET_ATON'", "'INET_NTOA'", "'INSTR'", "'INTERIORRINGN'", 
                            "'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", 
                            "'ISSIMPLE'", "'IS_FREE_LOCK'", "'IS_IPV4'", 
                            "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", "'IS_IPV6'", 
                            "'IS_USED_LOCK'", "'LAST_INSERT_ID'", "'LCASE'", 
                            "'LEAST'", "'LENGTH'", "'LINEFROMTEXT'", "'LINEFROMWKB'", 
                            "'LINESTRINGFROMTEXT'", "'LINESTRINGFROMWKB'", 
                            "'LN'", "'LOAD_FILE'", "'LOCATE'", "'LOG'", 
                            "'LOG10'", "'LOG2'", "'LOWER'", "'LPAD'", "'LTRIM'", 
                            "'MAKEDATE'", "'MAKETIME'", "'MAKE_SET'", "'MASTER_POS_WAIT'", 
                            "'MBRCONTAINS'", "'MBRDISJOINT'", "'MBREQUAL'", 
                            "'MBRINTERSECTS'", "'MBROVERLAPS'", "'MBRTOUCHES'", 
                            "'MBRWITHIN'", "'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", 
                            "'MONTHNAME'", "'MPOINTFROMTEXT'", "'MPOINTFROMWKB'", 
                            "'MPOLYFROMTEXT'", "'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", 
                            "'MULTILINESTRINGFROMWKB'", "'MULTIPOINTFROMTEXT'", 
                            "'MULTIPOINTFROMWKB'", "'MULTIPOLYGONFROMTEXT'", 
                            "'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", 
                            "'NUMGEOMETRIES'", "'NUMINTERIORRINGS'", "'NUMPOINTS'", 
                            "'OCT'", "'OCTET_LENGTH'", "'ORD'", "'OVERLAPS'", 
                            "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", 
                            "'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", 
                            "'POLYFROMWKB'", "'POLYGONFROMTEXT'", "'POLYGONFROMWKB'", 
                            "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", 
                            "'RAND'", "'RANDOM_BYTES'", "'RELEASE_LOCK'", 
                            "'REVERSE'", "'ROUND'", "'ROW_COUNT'", "'RPAD'", 
                            "'RTRIM'", "'SEC_TO_TIME'", "'SESSION_USER'", 
                            "'SHA'", "'SHA1'", "'SHA2'", "'SCHEMA_NAME'", 
                            "'SIGN'", "'SIN'", "'SLEEP'", "'SOUNDEX'", "'SQL_THREAD_WAIT_AFTER_GTIDS'", 
                            "'SQRT'", "'SRID'", "'STARTPOINT'", "'STRCMP'", 
                            "'STR_TO_DATE'", "'ST_AREA'", "'ST_ASBINARY'", 
                            "'ST_ASTEXT'", "'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'", 
                            "'ST_CENTROID'", "'ST_CONTAINS'", "'ST_CROSSES'", 
                            "'ST_DIFFERENCE'", "'ST_DIMENSION'", "'ST_DISJOINT'", 
                            "'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", 
                            "'ST_EQUALS'", "'ST_EXTERIORRING'", "'ST_GEOMCOLLFROMTEXT'", 
                            "'ST_GEOMCOLLFROMTXT'", "'ST_GEOMCOLLFROMWKB'", 
                            "'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
                            "'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", 
                            "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", "'ST_GEOMFROMTEXT'", 
                            "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", 
                            "'ST_INTERSECTS'", "'ST_ISCLOSED'", "'ST_ISEMPTY'", 
                            "'ST_ISSIMPLE'", "'ST_LINEFROMTEXT'", "'ST_LINEFROMWKB'", 
                            "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
                            "'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", 
                            "'ST_NUMINTERIORRINGS'", "'ST_NUMPOINTS'", "'ST_OVERLAPS'", 
                            "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", "'ST_POINTN'", 
                            "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", 
                            "'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", 
                            "'ST_SYMDIFFERENCE'", "'ST_TOUCHES'", "'ST_UNION'", 
                            "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", 
                            "'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", 
                            "'TAN'", "'TIMEDIFF'", "'TIMESTAMPADD'", "'TIMESTAMPDIFF'", 
                            "'TIME_FORMAT'", "'TIME_TO_SEC'", "'TOUCHES'", 
                            "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", 
                            "'UCASE'", "'UNCOMPRESS'", "'UNCOMPRESSED_LENGTH'", 
                            "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", 
                            "'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", 
                            "'VERSION'", "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", 
                            "'WEEKDAY'", "'WEEKOFYEAR'", "'WEIGHT_STRING'", 
                            "'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "':='", 
                            "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", 
                            "'^='", "'|='", "'*'", "'/'", "'%'", "'+'", 
                            "'--'", "'-'", "'DIV'", "'MOD'", "'='", "'>'", 
                            "'<'", "'!'", "'~'", "'|'", "'&'", "'^'", "'.'", 
                            "'('", "')'", "','", "';'", "'@'", "'0'", "'1'", 
                            "'2'", "'''", "'\"'", "'`'", "':'" ];
    static symbolicNames = [ null, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", 
                             "LINE_COMMENT", "ADD", "ALL", "ALTER", "ALWAYS", 
                             "ANALYZE", "AND", "AS", "ASC", "BEFORE", "BETWEEN", 
                             "BOTH", "BY", "CALL", "CASCADE", "CASE", "CAST", 
                             "CHANGE", "CHARACTER", "CHECK", "COLLATE", 
                             "COLUMN", "CONDITION", "CONSTRAINT", "CONTINUE", 
                             "CONVERT", "CREATE", "CROSS", "CURRENT", "CURRENT_USER", 
                             "CURSOR", "DATABASE", "DATABASES", "DECLARE", 
                             "DEFAULT", "DELAYED", "DELETE", "DESC", "DESCRIBE", 
                             "DETERMINISTIC", "DIAGNOSTICS", "DISTINCT", 
                             "DISTINCTROW", "DROP", "EACH", "ELSE", "ELSEIF", 
                             "ENCLOSED", "ESCAPED", "EXISTS", "EXIT", "EXPLAIN", 
                             "FALSE", "FETCH", "FOR", "FORCE", "FOREIGN", 
                             "FROM", "FULLTEXT", "GENERATED", "GET", "GRANT", 
                             "GROUP", "HAVING", "HIGH_PRIORITY", "IF", "IGNORE", 
                             "IN", "INDEX", "INFILE", "INNER", "INOUT", 
                             "INSERT", "INTERVAL", "INTO", "IS", "ITERATE", 
                             "JOIN", "KEY", "KEYS", "KILL", "LEADING", "LEAVE", 
                             "LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", 
                             "LOAD", "LOCK", "LOOP", "LOW_PRIORITY", "MASTER_BIND", 
                             "MASTER_SSL_VERIFY_SERVER_CERT", "MATCH", "MAXVALUE", 
                             "MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", 
                             "NULL_LITERAL", "NUMBER", "ON", "OPTIMIZE", 
                             "OPTION", "OPTIONALLY", "OR", "ORDER", "OUT", 
                             "OUTER", "OUTFILE", "PARTITION", "PRIMARY", 
                             "PROCEDURE", "PURGE", "RANGE", "READ", "READS", 
                             "REFERENCES", "REGEXP", "RELEASE", "RENAME", 
                             "REPEAT", "REPLACE", "REQUIRE", "RESIGNAL", 
                             "RESTRICT", "RETURN", "REVOKE", "RIGHT", "RLIKE", 
                             "SCHEMA", "SCHEMAS", "SELECT", "SET", "SEPARATOR", 
                             "SHOW", "SIGNAL", "SPATIAL", "SQL", "SQLEXCEPTION", 
                             "SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", 
                             "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", 
                             "SSL", "STACKED", "STARTING", "STRAIGHT_JOIN", 
                             "TABLE", "TERMINATED", "THEN", "TO", "TRAILING", 
                             "TRIGGER", "TRUE", "UNDO", "UNION", "UNIQUE", 
                             "UNLOCK", "UNSIGNED", "UPDATE", "USAGE", "USE", 
                             "USING", "VALUES", "WHEN", "WHERE", "WHILE", 
                             "WITH", "WRITE", "XOR", "ZEROFILL", "TINYINT", 
                             "SMALLINT", "MEDIUMINT", "MIDDLEINT", "INT", 
                             "INT1", "INT2", "INT3", "INT4", "INT8", "INTEGER", 
                             "BIGINT", "REAL", "DOUBLE", "PRECISION", "FLOAT", 
                             "FLOAT4", "FLOAT8", "DECIMAL", "DEC", "NUMERIC", 
                             "DATE", "TIME", "TIMESTAMP", "DATETIME", "YEAR", 
                             "CHAR", "VARCHAR", "NVARCHAR", "NATIONAL", 
                             "BINARY", "VARBINARY", "TINYBLOB", "BLOB", 
                             "MEDIUMBLOB", "LONG", "LONGBLOB", "TINYTEXT", 
                             "TEXT", "MEDIUMTEXT", "LONGTEXT", "ENUM", "VARYING", 
                             "SERIAL", "YEAR_MONTH", "DAY_HOUR", "DAY_MINUTE", 
                             "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", 
                             "MINUTE_SECOND", "SECOND_MICROSECOND", "MINUTE_MICROSECOND", 
                             "HOUR_MICROSECOND", "DAY_MICROSECOND", "JSON_VALID", 
                             "JSON_SCHEMA_VALID", "AVG", "BIT_AND", "BIT_OR", 
                             "BIT_XOR", "COUNT", "GROUP_CONCAT", "MAX", 
                             "MIN", "STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", 
                             "SUM", "VAR_POP", "VAR_SAMP", "VARIANCE", "CURRENT_DATE", 
                             "CURRENT_TIME", "CURRENT_TIMESTAMP", "LOCALTIME", 
                             "CURDATE", "CURTIME", "DATE_ADD", "DATE_SUB", 
                             "EXTRACT", "LOCALTIMESTAMP", "NOW", "POSITION", 
                             "SUBSTR", "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", 
                             "UTC_TIME", "UTC_TIMESTAMP", "ACCOUNT", "ACTION", 
                             "AFTER", "AGGREGATE", "ALGORITHM", "ANY", "AT", 
                             "AUTHORS", "AUTOCOMMIT", "AUTOEXTEND_SIZE", 
                             "AUTO_INCREMENT", "AVG_ROW_LENGTH", "BEGIN", 
                             "BINLOG", "BIT", "BLOCK", "BOOL", "BOOLEAN", 
                             "BTREE", "CACHE", "CASCADED", "CHAIN", "CHANGED", 
                             "CHANNEL", "CHECKSUM", "PAGE_CHECKSUM", "CIPHER", 
                             "CLASS_ORIGIN", "CLIENT", "CLOSE", "COALESCE", 
                             "CODE", "COLUMNS", "COLUMN_FORMAT", "COLUMN_NAME", 
                             "COMMENT", "COMMIT", "COMPACT", "COMPLETION", 
                             "COMPRESSED", "COMPRESSION", "CONCURRENT", 
                             "CONNECTION", "CONSISTENT", "CONSTRAINT_CATALOG", 
                             "CONSTRAINT_SCHEMA", "CONSTRAINT_NAME", "CONTAINS", 
                             "CONTEXT", "CONTRIBUTORS", "COPY", "CPU", "CURSOR_NAME", 
                             "DATA", "DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", 
                             "DEFINER", "DELAY_KEY_WRITE", "DES_KEY_FILE", 
                             "DIRECTORY", "DISABLE", "DISCARD", "DISK", 
                             "DO", "DUMPFILE", "DUPLICATE", "DYNAMIC", "ENABLE", 
                             "ENCRYPTION", "END", "ENDS", "ENGINE", "ENGINES", 
                             "ERROR", "ERRORS", "ESCAPE", "EVEN", "EVENT", 
                             "EVENTS", "EVERY", "EXCHANGE", "EXCLUSIVE", 
                             "EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", 
                             "FAST", "FAULTS", "FIELDS", "FILE_BLOCK_SIZE", 
                             "FILTER", "FIRST", "FIXED", "FLUSH", "FOLLOWS", 
                             "FOUND", "FULL", "FUNCTION", "GENERAL", "GLOBAL", 
                             "GRANTS", "GROUP_REPLICATION", "HANDLER", "HASH", 
                             "HELP", "HOST", "HOSTS", "IDENTIFIED", "IGNORE_SERVER_IDS", 
                             "IMPORT", "INDEXES", "INITIAL_SIZE", "INPLACE", 
                             "INSERT_METHOD", "INSTALL", "INSTANCE", "INVISIBLE", 
                             "INVOKER", "IO", "IO_THREAD", "IPC", "ISOLATION", 
                             "ISSUER", "JSON", "KEY_BLOCK_SIZE", "LANGUAGE", 
                             "LAST", "LEAVES", "LESS", "LEVEL", "LIST", 
                             "LOCAL", "LOGFILE", "LOGS", "MASTER", "MASTER_AUTO_POSITION", 
                             "MASTER_CONNECT_RETRY", "MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", 
                             "MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS", 
                             "MASTER_PASSWORD", "MASTER_PORT", "MASTER_RETRY_COUNT", 
                             "MASTER_SSL", "MASTER_SSL_CA", "MASTER_SSL_CAPATH", 
                             "MASTER_SSL_CERT", "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", 
                             "MASTER_SSL_CRLPATH", "MASTER_SSL_KEY", "MASTER_TLS_VERSION", 
                             "MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", 
                             "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE", 
                             "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS", 
                             "MEDIUM", "MEMBER", "MERGE", "MESSAGE_TEXT", 
                             "MID", "MIGRATE", "MIN_ROWS", "MODE", "MODIFY", 
                             "MUTEX", "MYSQL", "MYSQL_ERRNO", "NAME", "NAMES", 
                             "NCHAR", "NEVER", "NEXT", "NO", "NODEGROUP", 
                             "NONE", "OFFLINE", "OFFSET", "OF", "OJ", "OLD_PASSWORD", 
                             "ONE", "ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS", 
                             "OPTIONS", "OWNER", "PACK_KEYS", "PAGE", "PARSER", 
                             "PARTIAL", "PARTITIONING", "PARTITIONS", "PASSWORD", 
                             "PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", 
                             "PORT", "PRECEDES", "PREPARE", "PRESERVE", 
                             "PREV", "PROCESSLIST", "PROFILE", "PROFILES", 
                             "PROXY", "QUERY", "QUICK", "REBUILD", "RECOVER", 
                             "REDO_BUFFER_SIZE", "REDUNDANT", "RELAY", "RELAY_LOG_FILE", 
                             "RELAY_LOG_POS", "RELAYLOG", "REMOVE", "REORGANIZE", 
                             "REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", 
                             "REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", 
                             "REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", 
                             "REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", 
                             "RESET", "RESUME", "RETURNED_SQLSTATE", "RETURNS", 
                             "ROLE", "ROLLBACK", "ROLLUP", "ROTATE", "ROW", 
                             "ROWS", "ROW_FORMAT", "SAVEPOINT", "SCHEDULE", 
                             "SECURITY", "SERVER", "SESSION", "SHARE", "SHARED", 
                             "SIGNED", "SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", 
                             "SOCKET", "SOME", "SONAME", "SOUNDS", "SOURCE", 
                             "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", 
                             "SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", 
                             "SQL_THREAD", "START", "STARTS", "STATS_AUTO_RECALC", 
                             "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", "STATUS", 
                             "STOP", "STORAGE", "STORED", "STRING", "SUBCLASS_ORIGIN", 
                             "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", 
                             "SUSPEND", "SWAPS", "SWITCHES", "TABLE_NAME", 
                             "TABLESPACE", "TEMPORARY", "TEMPTABLE", "THAN", 
                             "TRADITIONAL", "TRANSACTION", "TRANSACTIONAL", 
                             "TRIGGERS", "TRUNCATE", "UNDEFINED", "UNDOFILE", 
                             "UNDO_BUFFER_SIZE", "UNINSTALL", "UNKNOWN", 
                             "UNTIL", "UPGRADE", "USER", "USE_FRM", "USER_RESOURCES", 
                             "VALIDATION", "VALUE", "VARIABLES", "VIEW", 
                             "VIRTUAL", "VISIBLE", "WAIT", "WARNINGS", "WITHOUT", 
                             "WORK", "WRAPPER", "X509", "XA", "XML", "EUR", 
                             "USA", "JIS", "ISO", "INTERNAL", "QUARTER", 
                             "MONTH", "DAY", "HOUR", "MINUTE", "WEEK", "SECOND", 
                             "MICROSECOND", "TABLES", "ROUTINE", "EXECUTE", 
                             "FILE", "PROCESS", "RELOAD", "SHUTDOWN", "SUPER", 
                             "PRIVILEGES", "APPLICATION_PASSWORD_ADMIN", 
                             "AUDIT_ADMIN", "BACKUP_ADMIN", "BINLOG_ADMIN", 
                             "BINLOG_ENCRYPTION_ADMIN", "CLONE_ADMIN", "CONNECTION_ADMIN", 
                             "ENCRYPTION_KEY_ADMIN", "FIREWALL_ADMIN", "FIREWALL_USER", 
                             "GROUP_REPLICATION_ADMIN", "INNODB_REDO_LOG_ARCHIVE", 
                             "NDB_STORED_USER", "PERSIST_RO_VARIABLES_ADMIN", 
                             "REPLICATION_APPLIER", "REPLICATION_SLAVE_ADMIN", 
                             "RESOURCE_GROUP_ADMIN", "RESOURCE_GROUP_USER", 
                             "ROLE_ADMIN", "SESSION_VARIABLES_ADMIN", "SET_USER_ID", 
                             "SHOW_ROUTINE", "SYSTEM_VARIABLES_ADMIN", "TABLE_ENCRYPTION_ADMIN", 
                             "VERSION_TOKEN_ADMIN", "XA_RECOVER_ADMIN", 
                             "ARMSCII8", "ASCII", "BIG5", "CP1250", "CP1251", 
                             "CP1256", "CP1257", "CP850", "CP852", "CP866", 
                             "CP932", "DEC8", "EUCJPMS", "EUCKR", "GB2312", 
                             "GBK", "GEOSTD8", "GREEK", "HEBREW", "HP8", 
                             "KEYBCS2", "KOI8R", "KOI8U", "LATIN1", "LATIN2", 
                             "LATIN5", "LATIN7", "MACCE", "MACROMAN", "SJIS", 
                             "SWE7", "TIS620", "UCS2", "UJIS", "UTF16", 
                             "UTF16LE", "UTF32", "UTF8", "UTF8MB3", "UTF8MB4", 
                             "ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", 
                             "INNODB", "MEMORY", "MRG_MYISAM", "MYISAM", 
                             "NDB", "NDBCLUSTER", "PERFORMANCE_SCHEMA", 
                             "TOKUDB", "REPEATABLE", "COMMITTED", "UNCOMMITTED", 
                             "SERIALIZABLE", "GEOMETRYCOLLECTION", "GEOMCOLLECTION", 
                             "GEOMETRY", "LINESTRING", "MULTILINESTRING", 
                             "MULTIPOINT", "MULTIPOLYGON", "POINT", "POLYGON", 
                             "ABS", "ACOS", "ADDDATE", "ADDTIME", "AES_DECRYPT", 
                             "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", 
                             "ASTEXT", "ASWKB", "ASWKT", "ASYMMETRIC_DECRYPT", 
                             "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", 
                             "ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", "ATAN", 
                             "ATAN2", "BENCHMARK", "BIN", "BIT_COUNT", "BIT_LENGTH", 
                             "BUFFER", "CATALOG_NAME", "CEIL", "CEILING", 
                             "CENTROID", "CHARACTER_LENGTH", "CHARSET", 
                             "CHAR_LENGTH", "COERCIBILITY", "COLLATION", 
                             "COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", 
                             "CONV", "CONVERT_TZ", "COS", "COT", "CRC32", 
                             "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", 
                             "CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", 
                             "DATEDIFF", "DATE_FORMAT", "DAYNAME", "DAYOFMONTH", 
                             "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", 
                             "DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", 
                             "DISJOINT", "ELT", "ENCODE", "ENCRYPT", "ENDPOINT", 
                             "ENVELOPE", "EQUALS", "EXP", "EXPORT_SET", 
                             "EXTERIORRING", "EXTRACTVALUE", "FIELD", "FIND_IN_SET", 
                             "FLOOR", "FORMAT", "FOUND_ROWS", "FROM_BASE64", 
                             "FROM_DAYS", "FROM_UNIXTIME", "GEOMCOLLFROMTEXT", 
                             "GEOMCOLLFROMWKB", "GEOMETRYCOLLECTIONFROMTEXT", 
                             "GEOMETRYCOLLECTIONFROMWKB", "GEOMETRYFROMTEXT", 
                             "GEOMETRYFROMWKB", "GEOMETRYN", "GEOMETRYTYPE", 
                             "GEOMFROMTEXT", "GEOMFROMWKB", "GET_FORMAT", 
                             "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", 
                             "GTID_SUBTRACT", "HEX", "IFNULL", "INET6_ATON", 
                             "INET6_NTOA", "INET_ATON", "INET_NTOA", "INSTR", 
                             "INTERIORRINGN", "INTERSECTS", "ISCLOSED", 
                             "ISEMPTY", "ISNULL", "ISSIMPLE", "IS_FREE_LOCK", 
                             "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
                             "IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", 
                             "LCASE", "LEAST", "LENGTH", "LINEFROMTEXT", 
                             "LINEFROMWKB", "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", 
                             "LN", "LOAD_FILE", "LOCATE", "LOG", "LOG10", 
                             "LOG2", "LOWER", "LPAD", "LTRIM", "MAKEDATE", 
                             "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", 
                             "MBRCONTAINS", "MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", 
                             "MBROVERLAPS", "MBRTOUCHES", "MBRWITHIN", "MD5", 
                             "MLINEFROMTEXT", "MLINEFROMWKB", "MONTHNAME", 
                             "MPOINTFROMTEXT", "MPOINTFROMWKB", "MPOLYFROMTEXT", 
                             "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
                             "MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", 
                             "MULTIPOINTFROMWKB", "MULTIPOLYGONFROMTEXT", 
                             "MULTIPOLYGONFROMWKB", "NAME_CONST", "NULLIF", 
                             "NUMGEOMETRIES", "NUMINTERIORRINGS", "NUMPOINTS", 
                             "OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", 
                             "PERIOD_DIFF", "PI", "POINTFROMTEXT", "POINTFROMWKB", 
                             "POINTN", "POLYFROMTEXT", "POLYFROMWKB", "POLYGONFROMTEXT", 
                             "POLYGONFROMWKB", "POW", "POWER", "QUOTE", 
                             "RADIANS", "RAND", "RANDOM_BYTES", "RELEASE_LOCK", 
                             "REVERSE", "ROUND", "ROW_COUNT", "RPAD", "RTRIM", 
                             "SEC_TO_TIME", "SESSION_USER", "SHA", "SHA1", 
                             "SHA2", "SCHEMA_NAME", "SIGN", "SIN", "SLEEP", 
                             "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", 
                             "SRID", "STARTPOINT", "STRCMP", "STR_TO_DATE", 
                             "ST_AREA", "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", 
                             "ST_ASWKT", "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", 
                             "ST_CROSSES", "ST_DIFFERENCE", "ST_DIMENSION", 
                             "ST_DISJOINT", "ST_DISTANCE", "ST_ENDPOINT", 
                             "ST_ENVELOPE", "ST_EQUALS", "ST_EXTERIORRING", 
                             "ST_GEOMCOLLFROMTEXT", "ST_GEOMCOLLFROMTXT", 
                             "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", 
                             "ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", 
                             "ST_GEOMETRYFROMWKB", "ST_GEOMETRYN", "ST_GEOMETRYTYPE", 
                             "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", "ST_INTERIORRINGN", 
                             "ST_INTERSECTION", "ST_INTERSECTS", "ST_ISCLOSED", 
                             "ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", 
                             "ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", 
                             "ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", 
                             "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", 
                             "ST_NUMPOINTS", "ST_OVERLAPS", "ST_POINTFROMTEXT", 
                             "ST_POINTFROMWKB", "ST_POINTN", "ST_POLYFROMTEXT", 
                             "ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", "ST_POLYGONFROMWKB", 
                             "ST_SRID", "ST_STARTPOINT", "ST_SYMDIFFERENCE", 
                             "ST_TOUCHES", "ST_UNION", "ST_WITHIN", "ST_X", 
                             "ST_Y", "SUBDATE", "SUBSTRING_INDEX", "SUBTIME", 
                             "SYSTEM_USER", "TAN", "TIMEDIFF", "TIMESTAMPADD", 
                             "TIMESTAMPDIFF", "TIME_FORMAT", "TIME_TO_SEC", 
                             "TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", 
                             "UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", 
                             "UNHEX", "UNIX_TIMESTAMP", "UPDATEXML", "UPPER", 
                             "UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", 
                             "VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", 
                             "WEEKDAY", "WEEKOFYEAR", "WEIGHT_STRING", "WITHIN", 
                             "YEARWEEK", "Y_FUNCTION", "X_FUNCTION", "VAR_ASSIGN", 
                             "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", 
                             "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", 
                             "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", "PLUS", 
                             "MINUSMINUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", 
                             "GREATER_SYMBOL", "LESS_SYMBOL", "EXCLAMATION_SYMBOL", 
                             "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", 
                             "DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", 
                             "SEMI", "AT_SIGN", "ZERO_DECIMAL", "ONE_DECIMAL", 
                             "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", 
                             "REVERSE_QUOTE_SYMB", "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", 
                             "FILESIZE_LITERAL", "START_NATIONAL_STRING_LITERAL", 
                             "STRING_LITERAL", "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", 
                             "REAL_LITERAL", "NULL_SPEC_LITERAL", "BIT_STRING", 
                             "STRING_CHARSET_NAME", "DOT_ID", "ID", "REVERSE_QUOTE_ID", 
                             "STRING_USER_NAME", "IP_ADDRESS", "LOCAL_ID", 
                             "GLOBAL_ID", "ERROR_RECONGNIGION" ];
    static ruleNames = [ "root", "sqlStatements", "sqlStatement", "emptyStatement", 
                         "ddlStatement", "dmlStatement", "transactionStatement", 
                         "replicationStatement", "preparedStatement", "compoundStatement", 
                         "administrationStatement", "utilityStatement", 
                         "createDatabase", "createEvent", "createIndex", 
                         "createLogfileGroup", "createProcedure", "createFunction", 
                         "createServer", "createTable", "createTablespaceInnodb", 
                         "createTablespaceNdb", "createTrigger", "createView", 
                         "createDatabaseOption", "ownerStatement", "scheduleExpression", 
                         "timestampValue", "intervalExpr", "intervalType", 
                         "enableType", "indexType", "indexOption", "procedureParameter", 
                         "functionParameter", "routineOption", "serverOption", 
                         "createDefinitions", "createDefinition", "columnDefinition", 
                         "columnConstraint", "tableConstraint", "referenceDefinition", 
                         "referenceAction", "referenceControlType", "indexColumnDefinition", 
                         "tableOption", "tablespaceStorage", "partitionDefinitions", 
                         "partitionFunctionDefinition", "subpartitionFunctionDefinition", 
                         "partitionDefinition", "partitionDefinerAtom", 
                         "partitionDefinerVector", "subpartitionDefinition", 
                         "partitionOption", "alterDatabase", "alterEvent", 
                         "alterFunction", "alterInstance", "alterLogfileGroup", 
                         "alterProcedure", "alterServer", "alterTable", 
                         "alterTablespace", "alterView", "alterSpecification", 
                         "dropDatabase", "dropEvent", "dropIndex", "dropLogfileGroup", 
                         "dropProcedure", "dropFunction", "dropServer", 
                         "dropTable", "dropTablespace", "dropTrigger", "dropView", 
                         "renameTable", "renameTableClause", "truncateTable", 
                         "callStatement", "deleteStatement", "doStatement", 
                         "handlerStatement", "insertStatement", "loadDataStatement", 
                         "loadXmlStatement", "replaceStatement", "selectStatement", 
                         "updateStatement", "insertStatementValue", "updatedElement", 
                         "assignmentField", "lockClause", "singleDeleteStatement", 
                         "multipleDeleteStatement", "handlerOpenStatement", 
                         "handlerReadIndexStatement", "handlerReadStatement", 
                         "handlerCloseStatement", "singleUpdateStatement", 
                         "multipleUpdateStatement", "orderByClause", "orderByExpression", 
                         "tableSources", "tableSource", "tableSourceItem", 
                         "indexHint", "indexHintType", "joinPart", "queryExpression", 
                         "queryExpressionNointo", "querySpecification", 
                         "querySpecificationNointo", "unionParenthesis", 
                         "unionStatement", "selectSpec", "selectElements", 
                         "selectElement", "selectIntoExpression", "selectFieldsInto", 
                         "selectLinesInto", "fromClause", "groupByItem", 
                         "limitClause", "limitClauseAtom", "startTransaction", 
                         "beginWork", "commitWork", "rollbackWork", "savepointStatement", 
                         "rollbackStatement", "releaseStatement", "lockTables", 
                         "unlockTables", "setAutocommitStatement", "setTransactionStatement", 
                         "transactionMode", "lockTableElement", "lockAction", 
                         "transactionOption", "transactionLevel", "changeMaster", 
                         "changeReplicationFilter", "purgeBinaryLogs", "resetMaster", 
                         "resetSlave", "startSlave", "stopSlave", "startGroupReplication", 
                         "stopGroupReplication", "masterOption", "stringMasterOption", 
                         "decimalMasterOption", "boolMasterOption", "channelOption", 
                         "replicationFilter", "tablePair", "threadType", 
                         "untilOption", "connectionOption", "gtuidSet", 
                         "xaStartTransaction", "xaEndTransaction", "xaPrepareStatement", 
                         "xaCommitWork", "xaRollbackWork", "xaRecoverWork", 
                         "prepareStatement", "executeStatement", "deallocatePrepare", 
                         "routineBody", "blockStatement", "caseStatement", 
                         "ifStatement", "iterateStatement", "leaveStatement", 
                         "loopStatement", "repeatStatement", "returnStatement", 
                         "whileStatement", "cursorStatement", "declareVariable", 
                         "declareCondition", "declareCursor", "declareHandler", 
                         "handlerConditionValue", "procedureSqlStatement", 
                         "caseAlternative", "elifAlternative", "alterUser", 
                         "createUser", "dropUser", "grantStatement", "grantProxy", 
                         "renameUser", "revokeStatement", "revokeProxy", 
                         "setPasswordStatement", "userSpecification", "userAuthOption", 
                         "tlsOption", "userResourceOption", "userPasswordOption", 
                         "userLockOption", "privelegeClause", "privilege", 
                         "privilegeLevel", "renameUserClause", "analyzeTable", 
                         "checkTable", "checksumTable", "optimizeTable", 
                         "repairTable", "checkTableOption", "createUdfunction", 
                         "installPlugin", "uninstallPlugin", "setStatement", 
                         "showStatement", "variableClause", "showCommonEntity", 
                         "showFilter", "showGlobalInfoClause", "showSchemaEntity", 
                         "showProfileType", "binlogStatement", "cacheIndexStatement", 
                         "flushStatement", "killStatement", "loadIndexIntoCache", 
                         "resetStatement", "shutdownStatement", "tableIndexes", 
                         "flushOption", "flushTableOption", "loadedTableIndexes", 
                         "simpleDescribeStatement", "fullDescribeStatement", 
                         "helpStatement", "useStatement", "signalStatement", 
                         "resignalStatement", "signalConditionInformation", 
                         "diagnosticsStatement", "diagnosticsConditionInformationName", 
                         "describeObjectClause", "fullId", "tableName", 
                         "fullColumnName", "indexColumnName", "userName", 
                         "mysqlVariable", "charsetName", "collationName", 
                         "engineName", "uuidSet", "xid", "xuidStringId", 
                         "authPlugin", "uid", "simpleId", "dottedId", "decimalLiteral", 
                         "fileSizeLiteral", "stringLiteral", "booleanLiteral", 
                         "hexadecimalLiteral", "nullNotnull", "constant", 
                         "dataType", "collectionOptions", "convertedDataType", 
                         "lengthOneDimension", "lengthTwoDimension", "lengthTwoOptionalDimension", 
                         "uidList", "tables", "indexColumnNames", "expressions", 
                         "expressionsWithDefaults", "constants", "simpleStrings", 
                         "userVariables", "defaultValue", "currentTimestamp", 
                         "expressionOrDefault", "ifExists", "ifNotExists", 
                         "functionCall", "specificFunction", "caseFuncAlternative", 
                         "levelsInWeightString", "levelInWeightListElement", 
                         "aggregateWindowedFunction", "scalarFunctionName", 
                         "passwordFunctionClause", "functionArgs", "functionArg", 
                         "expression", "predicate", "expressionAtom", "unaryOperator", 
                         "comparisonOperator", "logicalOperator", "bitOperator", 
                         "mathOperator", "jsonOperator", "charsetNameBase", 
                         "transactionLevelBase", "privilegesBase", "intervalTypeBase", 
                         "dataTypeBase", "keywordsCanBeId", "functionNameBase" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = MySqlParser.ruleNames;
        this.literalNames = MySqlParser.literalNames;
        this.symbolicNames = MySqlParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 300:
    	    		return this.expression_sempred(localctx, predIndex);
    	case 301:
    	    		return this.predicate_sempred(localctx, predIndex);
    	case 302:
    	    		return this.expressionAtom_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 3);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    predicate_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 8);
    		case 2:
    			return this.precpred(this._ctx, 6);
    		case 3:
    			return this.precpred(this._ctx, 5);
    		case 4:
    			return this.precpred(this._ctx, 3);
    		case 5:
    			return this.precpred(this._ctx, 10);
    		case 6:
    			return this.precpred(this._ctx, 9);
    		case 7:
    			return this.precpred(this._ctx, 7);
    		case 8:
    			return this.precpred(this._ctx, 4);
    		case 9:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expressionAtom_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 10:
    			return this.precpred(this._ctx, 3);
    		case 11:
    			return this.precpred(this._ctx, 2);
    		case 12:
    			return this.precpred(this._ctx, 1);
    		case 13:
    			return this.precpred(this._ctx, 12);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	root() {
	    let localctx = new RootContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, MySqlParser.RULE_root);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 633;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MySqlParser.ALTER) | (1 << MySqlParser.ANALYZE) | (1 << MySqlParser.CALL) | (1 << MySqlParser.CHANGE) | (1 << MySqlParser.CHECK) | (1 << MySqlParser.CREATE))) !== 0) || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (MySqlParser.DELETE - 40)) | (1 << (MySqlParser.DESC - 40)) | (1 << (MySqlParser.DESCRIBE - 40)) | (1 << (MySqlParser.DROP - 40)) | (1 << (MySqlParser.EXPLAIN - 40)) | (1 << (MySqlParser.GET - 40)) | (1 << (MySqlParser.GRANT - 40)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (MySqlParser.INSERT - 76)) | (1 << (MySqlParser.KILL - 76)) | (1 << (MySqlParser.LOAD - 76)) | (1 << (MySqlParser.LOCK - 76)) | (1 << (MySqlParser.OPTIMIZE - 76)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (MySqlParser.PURGE - 118)) | (1 << (MySqlParser.RELEASE - 118)) | (1 << (MySqlParser.RENAME - 118)) | (1 << (MySqlParser.REPLACE - 118)) | (1 << (MySqlParser.RESIGNAL - 118)) | (1 << (MySqlParser.REVOKE - 118)) | (1 << (MySqlParser.SELECT - 118)) | (1 << (MySqlParser.SET - 118)) | (1 << (MySqlParser.SHOW - 118)) | (1 << (MySqlParser.SIGNAL - 118)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (MySqlParser.UNLOCK - 164)) | (1 << (MySqlParser.UPDATE - 164)) | (1 << (MySqlParser.USE - 164)))) !== 0) || ((((_la - 282)) & ~0x1f) == 0 && ((1 << (_la - 282)) & ((1 << (MySqlParser.BEGIN - 282)) | (1 << (MySqlParser.BINLOG - 282)) | (1 << (MySqlParser.CACHE - 282)) | (1 << (MySqlParser.CHECKSUM - 282)) | (1 << (MySqlParser.COMMIT - 282)))) !== 0) || _la===MySqlParser.DEALLOCATE || _la===MySqlParser.DO || ((((_la - 364)) & ~0x1f) == 0 && ((1 << (_la - 364)) & ((1 << (MySqlParser.FLUSH - 364)) | (1 << (MySqlParser.HANDLER - 364)) | (1 << (MySqlParser.HELP - 364)) | (1 << (MySqlParser.INSTALL - 364)))) !== 0) || ((((_la - 477)) & ~0x1f) == 0 && ((1 << (_la - 477)) & ((1 << (MySqlParser.PREPARE - 477)) | (1 << (MySqlParser.REPAIR - 477)) | (1 << (MySqlParser.RESET - 477)))) !== 0) || ((((_la - 510)) & ~0x1f) == 0 && ((1 << (_la - 510)) & ((1 << (MySqlParser.ROLLBACK - 510)) | (1 << (MySqlParser.SAVEPOINT - 510)) | (1 << (MySqlParser.START - 510)))) !== 0) || ((((_la - 546)) & ~0x1f) == 0 && ((1 << (_la - 546)) & ((1 << (MySqlParser.STOP - 546)) | (1 << (MySqlParser.TRUNCATE - 546)) | (1 << (MySqlParser.UNINSTALL - 546)))) !== 0) || ((((_la - 589)) & ~0x1f) == 0 && ((1 << (_la - 589)) & ((1 << (MySqlParser.XA - 589)) | (1 << (MySqlParser.EXECUTE - 589)) | (1 << (MySqlParser.SHUTDOWN - 589)))) !== 0) || _la===MySqlParser.LR_BRACKET || _la===MySqlParser.SEMI) {
	            this.state = 632;
	            this.sqlStatements();
	        }

	        this.state = 636;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.MINUSMINUS) {
	            this.state = 635;
	            this.match(MySqlParser.MINUSMINUS);
	        }

	        this.state = 638;
	        this.match(MySqlParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlStatements() {
	    let localctx = new SqlStatementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, MySqlParser.RULE_sqlStatements);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 650;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,5,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 648;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case MySqlParser.ALTER:
	                case MySqlParser.ANALYZE:
	                case MySqlParser.CALL:
	                case MySqlParser.CHANGE:
	                case MySqlParser.CHECK:
	                case MySqlParser.CREATE:
	                case MySqlParser.DELETE:
	                case MySqlParser.DESC:
	                case MySqlParser.DESCRIBE:
	                case MySqlParser.DROP:
	                case MySqlParser.EXPLAIN:
	                case MySqlParser.GET:
	                case MySqlParser.GRANT:
	                case MySqlParser.INSERT:
	                case MySqlParser.KILL:
	                case MySqlParser.LOAD:
	                case MySqlParser.LOCK:
	                case MySqlParser.OPTIMIZE:
	                case MySqlParser.PURGE:
	                case MySqlParser.RELEASE:
	                case MySqlParser.RENAME:
	                case MySqlParser.REPLACE:
	                case MySqlParser.RESIGNAL:
	                case MySqlParser.REVOKE:
	                case MySqlParser.SELECT:
	                case MySqlParser.SET:
	                case MySqlParser.SHOW:
	                case MySqlParser.SIGNAL:
	                case MySqlParser.UNLOCK:
	                case MySqlParser.UPDATE:
	                case MySqlParser.USE:
	                case MySqlParser.BEGIN:
	                case MySqlParser.BINLOG:
	                case MySqlParser.CACHE:
	                case MySqlParser.CHECKSUM:
	                case MySqlParser.COMMIT:
	                case MySqlParser.DEALLOCATE:
	                case MySqlParser.DO:
	                case MySqlParser.FLUSH:
	                case MySqlParser.HANDLER:
	                case MySqlParser.HELP:
	                case MySqlParser.INSTALL:
	                case MySqlParser.PREPARE:
	                case MySqlParser.REPAIR:
	                case MySqlParser.RESET:
	                case MySqlParser.ROLLBACK:
	                case MySqlParser.SAVEPOINT:
	                case MySqlParser.START:
	                case MySqlParser.STOP:
	                case MySqlParser.TRUNCATE:
	                case MySqlParser.UNINSTALL:
	                case MySqlParser.XA:
	                case MySqlParser.EXECUTE:
	                case MySqlParser.SHUTDOWN:
	                case MySqlParser.LR_BRACKET:
	                    this.state = 640;
	                    this.sqlStatement();
	                    this.state = 642;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===MySqlParser.MINUSMINUS) {
	                        this.state = 641;
	                        this.match(MySqlParser.MINUSMINUS);
	                    }

	                    this.state = 645;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	                    if(la_===1) {
	                        this.state = 644;
	                        this.match(MySqlParser.SEMI);

	                    }
	                    break;
	                case MySqlParser.SEMI:
	                    this.state = 647;
	                    this.emptyStatement();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 652;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,5,this._ctx);
	        }

	        this.state = 661;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.ALTER:
	        case MySqlParser.ANALYZE:
	        case MySqlParser.CALL:
	        case MySqlParser.CHANGE:
	        case MySqlParser.CHECK:
	        case MySqlParser.CREATE:
	        case MySqlParser.DELETE:
	        case MySqlParser.DESC:
	        case MySqlParser.DESCRIBE:
	        case MySqlParser.DROP:
	        case MySqlParser.EXPLAIN:
	        case MySqlParser.GET:
	        case MySqlParser.GRANT:
	        case MySqlParser.INSERT:
	        case MySqlParser.KILL:
	        case MySqlParser.LOAD:
	        case MySqlParser.LOCK:
	        case MySqlParser.OPTIMIZE:
	        case MySqlParser.PURGE:
	        case MySqlParser.RELEASE:
	        case MySqlParser.RENAME:
	        case MySqlParser.REPLACE:
	        case MySqlParser.RESIGNAL:
	        case MySqlParser.REVOKE:
	        case MySqlParser.SELECT:
	        case MySqlParser.SET:
	        case MySqlParser.SHOW:
	        case MySqlParser.SIGNAL:
	        case MySqlParser.UNLOCK:
	        case MySqlParser.UPDATE:
	        case MySqlParser.USE:
	        case MySqlParser.BEGIN:
	        case MySqlParser.BINLOG:
	        case MySqlParser.CACHE:
	        case MySqlParser.CHECKSUM:
	        case MySqlParser.COMMIT:
	        case MySqlParser.DEALLOCATE:
	        case MySqlParser.DO:
	        case MySqlParser.FLUSH:
	        case MySqlParser.HANDLER:
	        case MySqlParser.HELP:
	        case MySqlParser.INSTALL:
	        case MySqlParser.PREPARE:
	        case MySqlParser.REPAIR:
	        case MySqlParser.RESET:
	        case MySqlParser.ROLLBACK:
	        case MySqlParser.SAVEPOINT:
	        case MySqlParser.START:
	        case MySqlParser.STOP:
	        case MySqlParser.TRUNCATE:
	        case MySqlParser.UNINSTALL:
	        case MySqlParser.XA:
	        case MySqlParser.EXECUTE:
	        case MySqlParser.SHUTDOWN:
	        case MySqlParser.LR_BRACKET:
	            this.state = 653;
	            this.sqlStatement();
	            this.state = 658;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	            if(la_===1) {
	                this.state = 655;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===MySqlParser.MINUSMINUS) {
	                    this.state = 654;
	                    this.match(MySqlParser.MINUSMINUS);
	                }

	                this.state = 657;
	                this.match(MySqlParser.SEMI);

	            }
	            break;
	        case MySqlParser.SEMI:
	            this.state = 660;
	            this.emptyStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlStatement() {
	    let localctx = new SqlStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, MySqlParser.RULE_sqlStatement);
	    try {
	        this.state = 670;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 663;
	            this.ddlStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 664;
	            this.dmlStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 665;
	            this.transactionStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 666;
	            this.replicationStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 667;
	            this.preparedStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 668;
	            this.administrationStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 669;
	            this.utilityStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	emptyStatement() {
	    let localctx = new EmptyStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, MySqlParser.RULE_emptyStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 672;
	        this.match(MySqlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ddlStatement() {
	    let localctx = new DdlStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, MySqlParser.RULE_ddlStatement);
	    try {
	        this.state = 709;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 674;
	            this.createDatabase();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 675;
	            this.createEvent();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 676;
	            this.createIndex();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 677;
	            this.createLogfileGroup();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 678;
	            this.createProcedure();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 679;
	            this.createFunction();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 680;
	            this.createServer();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 681;
	            this.createTable();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 682;
	            this.createTablespaceInnodb();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 683;
	            this.createTablespaceNdb();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 684;
	            this.createTrigger();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 685;
	            this.createView();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 686;
	            this.alterDatabase();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 687;
	            this.alterEvent();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 688;
	            this.alterFunction();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 689;
	            this.alterInstance();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 690;
	            this.alterLogfileGroup();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 691;
	            this.alterProcedure();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 692;
	            this.alterServer();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 693;
	            this.alterTable();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 694;
	            this.alterTablespace();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 695;
	            this.alterView();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 696;
	            this.dropDatabase();
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 697;
	            this.dropEvent();
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 698;
	            this.dropIndex();
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 699;
	            this.dropLogfileGroup();
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 700;
	            this.dropProcedure();
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 701;
	            this.dropFunction();
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 702;
	            this.dropServer();
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 703;
	            this.dropTable();
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 704;
	            this.dropTablespace();
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 705;
	            this.dropTrigger();
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 706;
	            this.dropView();
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 707;
	            this.renameTable();
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 708;
	            this.truncateTable();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dmlStatement() {
	    let localctx = new DmlStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, MySqlParser.RULE_dmlStatement);
	    try {
	        this.state = 721;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 711;
	            this.selectStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 712;
	            this.insertStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 713;
	            this.updateStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 714;
	            this.deleteStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 715;
	            this.replaceStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 716;
	            this.callStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 717;
	            this.loadDataStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 718;
	            this.loadXmlStatement();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 719;
	            this.doStatement();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 720;
	            this.handlerStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionStatement() {
	    let localctx = new TransactionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, MySqlParser.RULE_transactionStatement);
	    try {
	        this.state = 732;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 723;
	            this.startTransaction();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 724;
	            this.beginWork();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 725;
	            this.commitWork();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 726;
	            this.rollbackWork();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 727;
	            this.savepointStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 728;
	            this.rollbackStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 729;
	            this.releaseStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 730;
	            this.lockTables();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 731;
	            this.unlockTables();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replicationStatement() {
	    let localctx = new ReplicationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, MySqlParser.RULE_replicationStatement);
	    try {
	        this.state = 749;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 734;
	            this.changeMaster();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 735;
	            this.changeReplicationFilter();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 736;
	            this.purgeBinaryLogs();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 737;
	            this.resetMaster();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 738;
	            this.resetSlave();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 739;
	            this.startSlave();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 740;
	            this.stopSlave();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 741;
	            this.startGroupReplication();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 742;
	            this.stopGroupReplication();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 743;
	            this.xaStartTransaction();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 744;
	            this.xaEndTransaction();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 745;
	            this.xaPrepareStatement();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 746;
	            this.xaCommitWork();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 747;
	            this.xaRollbackWork();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 748;
	            this.xaRecoverWork();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	preparedStatement() {
	    let localctx = new PreparedStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, MySqlParser.RULE_preparedStatement);
	    try {
	        this.state = 754;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.PREPARE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 751;
	            this.prepareStatement();
	            break;
	        case MySqlParser.EXECUTE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 752;
	            this.executeStatement();
	            break;
	        case MySqlParser.DROP:
	        case MySqlParser.DEALLOCATE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 753;
	            this.deallocatePrepare();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compoundStatement() {
	    let localctx = new CompoundStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, MySqlParser.RULE_compoundStatement);
	    try {
	        this.state = 766;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 756;
	            this.blockStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 757;
	            this.caseStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 758;
	            this.ifStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 759;
	            this.leaveStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 760;
	            this.loopStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 761;
	            this.repeatStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 762;
	            this.whileStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 763;
	            this.iterateStatement();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 764;
	            this.returnStatement();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 765;
	            this.cursorStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	administrationStatement() {
	    let localctx = new AdministrationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, MySqlParser.RULE_administrationStatement);
	    try {
	        this.state = 793;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 768;
	            this.alterUser();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 769;
	            this.createUser();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 770;
	            this.dropUser();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 771;
	            this.grantStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 772;
	            this.grantProxy();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 773;
	            this.renameUser();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 774;
	            this.revokeStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 775;
	            this.revokeProxy();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 776;
	            this.analyzeTable();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 777;
	            this.checkTable();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 778;
	            this.checksumTable();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 779;
	            this.optimizeTable();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 780;
	            this.repairTable();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 781;
	            this.createUdfunction();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 782;
	            this.installPlugin();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 783;
	            this.uninstallPlugin();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 784;
	            this.setStatement();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 785;
	            this.showStatement();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 786;
	            this.binlogStatement();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 787;
	            this.cacheIndexStatement();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 788;
	            this.flushStatement();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 789;
	            this.killStatement();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 790;
	            this.loadIndexIntoCache();
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 791;
	            this.resetStatement();
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 792;
	            this.shutdownStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	utilityStatement() {
	    let localctx = new UtilityStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, MySqlParser.RULE_utilityStatement);
	    try {
	        this.state = 802;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 795;
	            this.simpleDescribeStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 796;
	            this.fullDescribeStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 797;
	            this.helpStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 798;
	            this.useStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 799;
	            this.signalStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 800;
	            this.resignalStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 801;
	            this.diagnosticsStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createDatabase() {
	    let localctx = new CreateDatabaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, MySqlParser.RULE_createDatabase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 804;
	        this.match(MySqlParser.CREATE);
	        this.state = 805;
	        localctx.dbFormat = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.DATABASE || _la===MySqlParser.SCHEMA)) {
	            localctx.dbFormat = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 807;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.IF) {
	            this.state = 806;
	            this.ifNotExists();
	        }

	        this.state = 809;
	        this.uid();
	        this.state = 813;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 22)) & ~0x1f) == 0 && ((1 << (_la - 22)) & ((1 << (MySqlParser.CHARACTER - 22)) | (1 << (MySqlParser.COLLATE - 22)) | (1 << (MySqlParser.DEFAULT - 22)))) !== 0) || _la===MySqlParser.CHARSET) {
	            this.state = 810;
	            this.createDatabaseOption();
	            this.state = 815;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createEvent() {
	    let localctx = new CreateEventContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, MySqlParser.RULE_createEvent);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 816;
	        this.match(MySqlParser.CREATE);
	        this.state = 818;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.DEFINER) {
	            this.state = 817;
	            this.ownerStatement();
	        }

	        this.state = 820;
	        this.match(MySqlParser.EVENT);
	        this.state = 822;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.IF) {
	            this.state = 821;
	            this.ifNotExists();
	        }

	        this.state = 824;
	        this.fullId();
	        this.state = 825;
	        this.match(MySqlParser.ON);
	        this.state = 826;
	        this.match(MySqlParser.SCHEDULE);
	        this.state = 827;
	        this.scheduleExpression();
	        this.state = 834;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.ON) {
	            this.state = 828;
	            this.match(MySqlParser.ON);
	            this.state = 829;
	            this.match(MySqlParser.COMPLETION);
	            this.state = 831;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.NOT) {
	                this.state = 830;
	                this.match(MySqlParser.NOT);
	            }

	            this.state = 833;
	            this.match(MySqlParser.PRESERVE);
	        }

	        this.state = 837;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.DISABLE || _la===MySqlParser.ENABLE) {
	            this.state = 836;
	            this.enableType();
	        }

	        this.state = 841;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.COMMENT) {
	            this.state = 839;
	            this.match(MySqlParser.COMMENT);
	            this.state = 840;
	            this.match(MySqlParser.STRING_LITERAL);
	        }

	        this.state = 843;
	        this.match(MySqlParser.DO);
	        this.state = 844;
	        this.routineBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createIndex() {
	    let localctx = new CreateIndexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, MySqlParser.RULE_createIndex);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 846;
	        this.match(MySqlParser.CREATE);
	        this.state = 848;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.OFFLINE || _la===MySqlParser.ONLINE) {
	            this.state = 847;
	            localctx.intimeAction = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.OFFLINE || _la===MySqlParser.ONLINE)) {
	                localctx.intimeAction = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 851;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.FULLTEXT || _la===MySqlParser.SPATIAL || _la===MySqlParser.UNIQUE) {
	            this.state = 850;
	            localctx.indexCategory = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.FULLTEXT || _la===MySqlParser.SPATIAL || _la===MySqlParser.UNIQUE)) {
	                localctx.indexCategory = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 853;
	        this.match(MySqlParser.INDEX);
	        this.state = 854;
	        this.uid();
	        this.state = 856;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.USING) {
	            this.state = 855;
	            this.indexType();
	        }

	        this.state = 858;
	        this.match(MySqlParser.ON);
	        this.state = 859;
	        this.tableName();
	        this.state = 860;
	        this.indexColumnNames();
	        this.state = 864;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.USING || _la===MySqlParser.WITH || _la===MySqlParser.COMMENT || _la===MySqlParser.INVISIBLE || _la===MySqlParser.KEY_BLOCK_SIZE || _la===MySqlParser.VISIBLE) {
	            this.state = 861;
	            this.indexOption();
	            this.state = 866;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 879;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,33,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 877;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case MySqlParser.ALGORITHM:
	                    this.state = 867;
	                    this.match(MySqlParser.ALGORITHM);
	                    this.state = 869;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===MySqlParser.EQUAL_SYMBOL) {
	                        this.state = 868;
	                        this.match(MySqlParser.EQUAL_SYMBOL);
	                    }

	                    this.state = 871;
	                    localctx.algType = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===MySqlParser.DEFAULT || _la===MySqlParser.COPY || _la===MySqlParser.INPLACE)) {
	                        localctx.algType = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    break;
	                case MySqlParser.LOCK:
	                    this.state = 872;
	                    this.match(MySqlParser.LOCK);
	                    this.state = 874;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===MySqlParser.EQUAL_SYMBOL) {
	                        this.state = 873;
	                        this.match(MySqlParser.EQUAL_SYMBOL);
	                    }

	                    this.state = 876;
	                    localctx.lockType = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===MySqlParser.DEFAULT || _la===MySqlParser.EXCLUSIVE || _la===MySqlParser.NONE || _la===MySqlParser.SHARED)) {
	                        localctx.lockType = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 881;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,33,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createLogfileGroup() {
	    let localctx = new CreateLogfileGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, MySqlParser.RULE_createLogfileGroup);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 882;
	        this.match(MySqlParser.CREATE);
	        this.state = 883;
	        this.match(MySqlParser.LOGFILE);
	        this.state = 884;
	        this.match(MySqlParser.GROUP);
	        this.state = 885;
	        this.uid();
	        this.state = 886;
	        this.match(MySqlParser.ADD);
	        this.state = 887;
	        this.match(MySqlParser.UNDOFILE);
	        this.state = 888;
	        localctx.undoFile = this.match(MySqlParser.STRING_LITERAL);
	        this.state = 894;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.INITIAL_SIZE) {
	            this.state = 889;
	            this.match(MySqlParser.INITIAL_SIZE);
	            this.state = 891;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 890;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 893;
	            localctx.initSize = this.fileSizeLiteral();
	        }

	        this.state = 901;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.UNDO_BUFFER_SIZE) {
	            this.state = 896;
	            this.match(MySqlParser.UNDO_BUFFER_SIZE);
	            this.state = 898;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 897;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 900;
	            localctx.undoSize = this.fileSizeLiteral();
	        }

	        this.state = 908;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.REDO_BUFFER_SIZE) {
	            this.state = 903;
	            this.match(MySqlParser.REDO_BUFFER_SIZE);
	            this.state = 905;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 904;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 907;
	            localctx.redoSize = this.fileSizeLiteral();
	        }

	        this.state = 915;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.NODEGROUP) {
	            this.state = 910;
	            this.match(MySqlParser.NODEGROUP);
	            this.state = 912;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 911;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 914;
	            this.uid();
	        }

	        this.state = 918;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.WAIT) {
	            this.state = 917;
	            this.match(MySqlParser.WAIT);
	        }

	        this.state = 925;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.COMMENT) {
	            this.state = 920;
	            this.match(MySqlParser.COMMENT);
	            this.state = 922;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 921;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 924;
	            localctx.comment = this.match(MySqlParser.STRING_LITERAL);
	        }

	        this.state = 927;
	        this.match(MySqlParser.ENGINE);
	        this.state = 929;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.EQUAL_SYMBOL) {
	            this.state = 928;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	        }

	        this.state = 931;
	        this.engineName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createProcedure() {
	    let localctx = new CreateProcedureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, MySqlParser.RULE_createProcedure);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 933;
	        this.match(MySqlParser.CREATE);
	        this.state = 935;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.DEFINER) {
	            this.state = 934;
	            this.ownerStatement();
	        }

	        this.state = 937;
	        this.match(MySqlParser.PROCEDURE);
	        this.state = 938;
	        this.fullId();
	        this.state = 939;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 941;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySqlParser.CURRENT - 32)) | (1 << (MySqlParser.DATABASE - 32)) | (1 << (MySqlParser.DIAGNOSTICS - 32)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (MySqlParser.IN - 71)) | (1 << (MySqlParser.INOUT - 71)) | (1 << (MySqlParser.LEFT - 71)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (MySqlParser.NUMBER - 105)) | (1 << (MySqlParser.OUT - 105)) | (1 << (MySqlParser.RIGHT - 105)))) !== 0) || _la===MySqlParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.TIMESTAMP - 199)) | (1 << (MySqlParser.DATETIME - 199)) | (1 << (MySqlParser.YEAR - 199)) | (1 << (MySqlParser.TEXT - 199)) | (1 << (MySqlParser.ENUM - 199)) | (1 << (MySqlParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.JSON_VALID - 233)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySqlParser.AVG - 233)) | (1 << (MySqlParser.BIT_AND - 233)) | (1 << (MySqlParser.BIT_OR - 233)) | (1 << (MySqlParser.BIT_XOR - 233)) | (1 << (MySqlParser.COUNT - 233)) | (1 << (MySqlParser.GROUP_CONCAT - 233)) | (1 << (MySqlParser.MAX - 233)) | (1 << (MySqlParser.MIN - 233)) | (1 << (MySqlParser.STD - 233)) | (1 << (MySqlParser.STDDEV - 233)) | (1 << (MySqlParser.STDDEV_POP - 233)) | (1 << (MySqlParser.STDDEV_SAMP - 233)) | (1 << (MySqlParser.SUM - 233)) | (1 << (MySqlParser.VAR_POP - 233)) | (1 << (MySqlParser.VAR_SAMP - 233)) | (1 << (MySqlParser.VARIANCE - 233)) | (1 << (MySqlParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySqlParser.ACCOUNT - 270)) | (1 << (MySqlParser.ACTION - 270)) | (1 << (MySqlParser.AFTER - 270)) | (1 << (MySqlParser.AGGREGATE - 270)) | (1 << (MySqlParser.ALGORITHM - 270)) | (1 << (MySqlParser.ANY - 270)) | (1 << (MySqlParser.AT - 270)) | (1 << (MySqlParser.AUTHORS - 270)) | (1 << (MySqlParser.AUTOCOMMIT - 270)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySqlParser.AUTO_INCREMENT - 270)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 270)) | (1 << (MySqlParser.BEGIN - 270)) | (1 << (MySqlParser.BINLOG - 270)) | (1 << (MySqlParser.BIT - 270)) | (1 << (MySqlParser.BLOCK - 270)) | (1 << (MySqlParser.BOOL - 270)) | (1 << (MySqlParser.BOOLEAN - 270)) | (1 << (MySqlParser.BTREE - 270)) | (1 << (MySqlParser.CACHE - 270)) | (1 << (MySqlParser.CASCADED - 270)) | (1 << (MySqlParser.CHAIN - 270)) | (1 << (MySqlParser.CHANGED - 270)) | (1 << (MySqlParser.CHANNEL - 270)) | (1 << (MySqlParser.CHECKSUM - 270)) | (1 << (MySqlParser.PAGE_CHECKSUM - 270)) | (1 << (MySqlParser.CIPHER - 270)) | (1 << (MySqlParser.CLASS_ORIGIN - 270)) | (1 << (MySqlParser.CLIENT - 270)) | (1 << (MySqlParser.CLOSE - 270)) | (1 << (MySqlParser.COALESCE - 270)) | (1 << (MySqlParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySqlParser.COLUMNS - 302)) | (1 << (MySqlParser.COLUMN_FORMAT - 302)) | (1 << (MySqlParser.COLUMN_NAME - 302)) | (1 << (MySqlParser.COMMENT - 302)) | (1 << (MySqlParser.COMMIT - 302)) | (1 << (MySqlParser.COMPACT - 302)) | (1 << (MySqlParser.COMPLETION - 302)) | (1 << (MySqlParser.COMPRESSED - 302)) | (1 << (MySqlParser.COMPRESSION - 302)) | (1 << (MySqlParser.CONCURRENT - 302)) | (1 << (MySqlParser.CONNECTION - 302)) | (1 << (MySqlParser.CONSISTENT - 302)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySqlParser.CONSTRAINT_NAME - 302)) | (1 << (MySqlParser.CONTAINS - 302)) | (1 << (MySqlParser.CONTEXT - 302)) | (1 << (MySqlParser.CONTRIBUTORS - 302)) | (1 << (MySqlParser.COPY - 302)) | (1 << (MySqlParser.CPU - 302)) | (1 << (MySqlParser.CURSOR_NAME - 302)) | (1 << (MySqlParser.DATA - 302)) | (1 << (MySqlParser.DATAFILE - 302)) | (1 << (MySqlParser.DEALLOCATE - 302)) | (1 << (MySqlParser.DEFAULT_AUTH - 302)) | (1 << (MySqlParser.DEFINER - 302)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 302)) | (1 << (MySqlParser.DES_KEY_FILE - 302)) | (1 << (MySqlParser.DIRECTORY - 302)) | (1 << (MySqlParser.DISABLE - 302)) | (1 << (MySqlParser.DISCARD - 302)) | (1 << (MySqlParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySqlParser.DO - 334)) | (1 << (MySqlParser.DUMPFILE - 334)) | (1 << (MySqlParser.DUPLICATE - 334)) | (1 << (MySqlParser.DYNAMIC - 334)) | (1 << (MySqlParser.ENABLE - 334)) | (1 << (MySqlParser.ENCRYPTION - 334)) | (1 << (MySqlParser.END - 334)) | (1 << (MySqlParser.ENDS - 334)) | (1 << (MySqlParser.ENGINE - 334)) | (1 << (MySqlParser.ENGINES - 334)) | (1 << (MySqlParser.ERROR - 334)) | (1 << (MySqlParser.ERRORS - 334)) | (1 << (MySqlParser.ESCAPE - 334)) | (1 << (MySqlParser.EVEN - 334)) | (1 << (MySqlParser.EVENT - 334)) | (1 << (MySqlParser.EVENTS - 334)) | (1 << (MySqlParser.EVERY - 334)) | (1 << (MySqlParser.EXCHANGE - 334)) | (1 << (MySqlParser.EXCLUSIVE - 334)) | (1 << (MySqlParser.EXPIRE - 334)) | (1 << (MySqlParser.EXPORT - 334)) | (1 << (MySqlParser.EXTENDED - 334)) | (1 << (MySqlParser.EXTENT_SIZE - 334)) | (1 << (MySqlParser.FAST - 334)) | (1 << (MySqlParser.FAULTS - 334)) | (1 << (MySqlParser.FIELDS - 334)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySqlParser.FILTER - 334)) | (1 << (MySqlParser.FIRST - 334)) | (1 << (MySqlParser.FIXED - 334)) | (1 << (MySqlParser.FLUSH - 334)) | (1 << (MySqlParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySqlParser.FOUND - 366)) | (1 << (MySqlParser.FULL - 366)) | (1 << (MySqlParser.FUNCTION - 366)) | (1 << (MySqlParser.GENERAL - 366)) | (1 << (MySqlParser.GLOBAL - 366)) | (1 << (MySqlParser.GRANTS - 366)) | (1 << (MySqlParser.GROUP_REPLICATION - 366)) | (1 << (MySqlParser.HANDLER - 366)) | (1 << (MySqlParser.HASH - 366)) | (1 << (MySqlParser.HELP - 366)) | (1 << (MySqlParser.HOST - 366)) | (1 << (MySqlParser.HOSTS - 366)) | (1 << (MySqlParser.IDENTIFIED - 366)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySqlParser.IMPORT - 366)) | (1 << (MySqlParser.INDEXES - 366)) | (1 << (MySqlParser.INITIAL_SIZE - 366)) | (1 << (MySqlParser.INPLACE - 366)) | (1 << (MySqlParser.INSERT_METHOD - 366)) | (1 << (MySqlParser.INSTALL - 366)) | (1 << (MySqlParser.INSTANCE - 366)) | (1 << (MySqlParser.INVISIBLE - 366)) | (1 << (MySqlParser.INVOKER - 366)) | (1 << (MySqlParser.IO - 366)) | (1 << (MySqlParser.IO_THREAD - 366)) | (1 << (MySqlParser.IPC - 366)) | (1 << (MySqlParser.ISOLATION - 366)) | (1 << (MySqlParser.ISSUER - 366)) | (1 << (MySqlParser.JSON - 366)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySqlParser.LANGUAGE - 366)) | (1 << (MySqlParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.LEAVES - 398)) | (1 << (MySqlParser.LESS - 398)) | (1 << (MySqlParser.LEVEL - 398)) | (1 << (MySqlParser.LIST - 398)) | (1 << (MySqlParser.LOCAL - 398)) | (1 << (MySqlParser.LOGFILE - 398)) | (1 << (MySqlParser.LOGS - 398)) | (1 << (MySqlParser.MASTER - 398)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySqlParser.MASTER_DELAY - 398)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySqlParser.MASTER_HOST - 398)) | (1 << (MySqlParser.MASTER_LOG_FILE - 398)) | (1 << (MySqlParser.MASTER_LOG_POS - 398)) | (1 << (MySqlParser.MASTER_PASSWORD - 398)) | (1 << (MySqlParser.MASTER_PORT - 398)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySqlParser.MASTER_SSL - 398)) | (1 << (MySqlParser.MASTER_SSL_CA - 398)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_CERT - 398)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySqlParser.MASTER_SSL_CRL - 398)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_KEY - 398)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 398)) | (1 << (MySqlParser.MASTER_USER - 398)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySqlParser.MEDIUM - 430)) | (1 << (MySqlParser.MEMBER - 430)) | (1 << (MySqlParser.MERGE - 430)) | (1 << (MySqlParser.MESSAGE_TEXT - 430)) | (1 << (MySqlParser.MID - 430)) | (1 << (MySqlParser.MIGRATE - 430)) | (1 << (MySqlParser.MIN_ROWS - 430)) | (1 << (MySqlParser.MODE - 430)) | (1 << (MySqlParser.MODIFY - 430)) | (1 << (MySqlParser.MUTEX - 430)) | (1 << (MySqlParser.MYSQL - 430)) | (1 << (MySqlParser.MYSQL_ERRNO - 430)) | (1 << (MySqlParser.NAME - 430)) | (1 << (MySqlParser.NAMES - 430)) | (1 << (MySqlParser.NCHAR - 430)) | (1 << (MySqlParser.NEVER - 430)) | (1 << (MySqlParser.NEXT - 430)) | (1 << (MySqlParser.NO - 430)) | (1 << (MySqlParser.NODEGROUP - 430)) | (1 << (MySqlParser.NONE - 430)) | (1 << (MySqlParser.OFFLINE - 430)) | (1 << (MySqlParser.OFFSET - 430)) | (1 << (MySqlParser.OF - 430)) | (1 << (MySqlParser.OJ - 430)) | (1 << (MySqlParser.OLD_PASSWORD - 430)) | (1 << (MySqlParser.ONE - 430)) | (1 << (MySqlParser.ONLINE - 430)) | (1 << (MySqlParser.ONLY - 430)) | (1 << (MySqlParser.OPEN - 430)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySqlParser.OPTIONS - 462)) | (1 << (MySqlParser.OWNER - 462)) | (1 << (MySqlParser.PACK_KEYS - 462)) | (1 << (MySqlParser.PAGE - 462)) | (1 << (MySqlParser.PARSER - 462)) | (1 << (MySqlParser.PARTIAL - 462)) | (1 << (MySqlParser.PARTITIONING - 462)) | (1 << (MySqlParser.PARTITIONS - 462)) | (1 << (MySqlParser.PASSWORD - 462)) | (1 << (MySqlParser.PHASE - 462)) | (1 << (MySqlParser.PLUGIN - 462)) | (1 << (MySqlParser.PLUGIN_DIR - 462)) | (1 << (MySqlParser.PLUGINS - 462)) | (1 << (MySqlParser.PORT - 462)) | (1 << (MySqlParser.PRECEDES - 462)) | (1 << (MySqlParser.PREPARE - 462)) | (1 << (MySqlParser.PRESERVE - 462)) | (1 << (MySqlParser.PREV - 462)) | (1 << (MySqlParser.PROCESSLIST - 462)) | (1 << (MySqlParser.PROFILE - 462)) | (1 << (MySqlParser.PROFILES - 462)) | (1 << (MySqlParser.PROXY - 462)) | (1 << (MySqlParser.QUERY - 462)) | (1 << (MySqlParser.QUICK - 462)) | (1 << (MySqlParser.REBUILD - 462)) | (1 << (MySqlParser.RECOVER - 462)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySqlParser.REDUNDANT - 462)) | (1 << (MySqlParser.RELAY - 462)) | (1 << (MySqlParser.RELAY_LOG_FILE - 462)) | (1 << (MySqlParser.RELAY_LOG_POS - 462)) | (1 << (MySqlParser.RELAYLOG - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySqlParser.REMOVE - 494)) | (1 << (MySqlParser.REORGANIZE - 494)) | (1 << (MySqlParser.REPAIR - 494)) | (1 << (MySqlParser.REPLICATE_DO_DB - 494)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATION - 494)) | (1 << (MySqlParser.RESET - 494)) | (1 << (MySqlParser.RESUME - 494)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 494)) | (1 << (MySqlParser.RETURNS - 494)) | (1 << (MySqlParser.ROLE - 494)) | (1 << (MySqlParser.ROLLBACK - 494)) | (1 << (MySqlParser.ROLLUP - 494)) | (1 << (MySqlParser.ROTATE - 494)) | (1 << (MySqlParser.ROW - 494)) | (1 << (MySqlParser.ROWS - 494)) | (1 << (MySqlParser.ROW_FORMAT - 494)) | (1 << (MySqlParser.SAVEPOINT - 494)) | (1 << (MySqlParser.SCHEDULE - 494)) | (1 << (MySqlParser.SECURITY - 494)) | (1 << (MySqlParser.SERVER - 494)) | (1 << (MySqlParser.SESSION - 494)) | (1 << (MySqlParser.SHARE - 494)) | (1 << (MySqlParser.SHARED - 494)) | (1 << (MySqlParser.SIGNED - 494)) | (1 << (MySqlParser.SIMPLE - 494)) | (1 << (MySqlParser.SLAVE - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySqlParser.SLOW - 526)) | (1 << (MySqlParser.SNAPSHOT - 526)) | (1 << (MySqlParser.SOCKET - 526)) | (1 << (MySqlParser.SOME - 526)) | (1 << (MySqlParser.SONAME - 526)) | (1 << (MySqlParser.SOUNDS - 526)) | (1 << (MySqlParser.SOURCE - 526)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySqlParser.SQL_CACHE - 526)) | (1 << (MySqlParser.SQL_NO_CACHE - 526)) | (1 << (MySqlParser.SQL_THREAD - 526)) | (1 << (MySqlParser.START - 526)) | (1 << (MySqlParser.STARTS - 526)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 526)) | (1 << (MySqlParser.STATS_PERSISTENT - 526)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySqlParser.STATUS - 526)) | (1 << (MySqlParser.STOP - 526)) | (1 << (MySqlParser.STORAGE - 526)) | (1 << (MySqlParser.STRING - 526)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySqlParser.SUBJECT - 526)) | (1 << (MySqlParser.SUBPARTITION - 526)) | (1 << (MySqlParser.SUBPARTITIONS - 526)) | (1 << (MySqlParser.SUSPEND - 526)) | (1 << (MySqlParser.SWAPS - 526)) | (1 << (MySqlParser.SWITCHES - 526)) | (1 << (MySqlParser.TABLE_NAME - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySqlParser.TABLESPACE - 558)) | (1 << (MySqlParser.TEMPORARY - 558)) | (1 << (MySqlParser.TEMPTABLE - 558)) | (1 << (MySqlParser.THAN - 558)) | (1 << (MySqlParser.TRADITIONAL - 558)) | (1 << (MySqlParser.TRANSACTION - 558)) | (1 << (MySqlParser.TRANSACTIONAL - 558)) | (1 << (MySqlParser.TRIGGERS - 558)) | (1 << (MySqlParser.TRUNCATE - 558)) | (1 << (MySqlParser.UNDEFINED - 558)) | (1 << (MySqlParser.UNDOFILE - 558)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySqlParser.UNINSTALL - 558)) | (1 << (MySqlParser.UNKNOWN - 558)) | (1 << (MySqlParser.UNTIL - 558)) | (1 << (MySqlParser.UPGRADE - 558)) | (1 << (MySqlParser.USER - 558)) | (1 << (MySqlParser.USE_FRM - 558)) | (1 << (MySqlParser.USER_RESOURCES - 558)) | (1 << (MySqlParser.VALIDATION - 558)) | (1 << (MySqlParser.VALUE - 558)) | (1 << (MySqlParser.VARIABLES - 558)) | (1 << (MySqlParser.VIEW - 558)) | (1 << (MySqlParser.VISIBLE - 558)) | (1 << (MySqlParser.WAIT - 558)) | (1 << (MySqlParser.WARNINGS - 558)) | (1 << (MySqlParser.WITHOUT - 558)) | (1 << (MySqlParser.WORK - 558)) | (1 << (MySqlParser.WRAPPER - 558)) | (1 << (MySqlParser.X509 - 558)) | (1 << (MySqlParser.XA - 558)))) !== 0) || ((((_la - 590)) & ~0x1f) == 0 && ((1 << (_la - 590)) & ((1 << (MySqlParser.XML - 590)) | (1 << (MySqlParser.INTERNAL - 590)) | (1 << (MySqlParser.QUARTER - 590)) | (1 << (MySqlParser.MONTH - 590)) | (1 << (MySqlParser.DAY - 590)) | (1 << (MySqlParser.HOUR - 590)) | (1 << (MySqlParser.MINUTE - 590)) | (1 << (MySqlParser.WEEK - 590)) | (1 << (MySqlParser.SECOND - 590)) | (1 << (MySqlParser.MICROSECOND - 590)) | (1 << (MySqlParser.TABLES - 590)) | (1 << (MySqlParser.ROUTINE - 590)) | (1 << (MySqlParser.EXECUTE - 590)) | (1 << (MySqlParser.FILE - 590)) | (1 << (MySqlParser.PROCESS - 590)) | (1 << (MySqlParser.RELOAD - 590)) | (1 << (MySqlParser.SHUTDOWN - 590)) | (1 << (MySqlParser.SUPER - 590)) | (1 << (MySqlParser.PRIVILEGES - 590)) | (1 << (MySqlParser.AUDIT_ADMIN - 590)) | (1 << (MySqlParser.BACKUP_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 590)) | (1 << (MySqlParser.CLONE_ADMIN - 590)) | (1 << (MySqlParser.CONNECTION_ADMIN - 590)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 590)) | (1 << (MySqlParser.FIREWALL_ADMIN - 590)))) !== 0) || ((((_la - 622)) & ~0x1f) == 0 && ((1 << (_la - 622)) & ((1 << (MySqlParser.FIREWALL_USER - 622)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 622)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 622)) | (1 << (MySqlParser.NDB_STORED_USER - 622)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.REPLICATION_APPLIER - 622)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 622)) | (1 << (MySqlParser.ROLE_ADMIN - 622)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.SET_USER_ID - 622)) | (1 << (MySqlParser.SHOW_ROUTINE - 622)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 622)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 622)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 622)) | (1 << (MySqlParser.ARMSCII8 - 622)) | (1 << (MySqlParser.ASCII - 622)) | (1 << (MySqlParser.BIG5 - 622)) | (1 << (MySqlParser.CP1250 - 622)) | (1 << (MySqlParser.CP1251 - 622)) | (1 << (MySqlParser.CP1256 - 622)) | (1 << (MySqlParser.CP1257 - 622)) | (1 << (MySqlParser.CP850 - 622)) | (1 << (MySqlParser.CP852 - 622)) | (1 << (MySqlParser.CP866 - 622)) | (1 << (MySqlParser.CP932 - 622)) | (1 << (MySqlParser.DEC8 - 622)) | (1 << (MySqlParser.EUCJPMS - 622)) | (1 << (MySqlParser.EUCKR - 622)) | (1 << (MySqlParser.GB2312 - 622)))) !== 0) || ((((_la - 654)) & ~0x1f) == 0 && ((1 << (_la - 654)) & ((1 << (MySqlParser.GBK - 654)) | (1 << (MySqlParser.GEOSTD8 - 654)) | (1 << (MySqlParser.GREEK - 654)) | (1 << (MySqlParser.HEBREW - 654)) | (1 << (MySqlParser.HP8 - 654)) | (1 << (MySqlParser.KEYBCS2 - 654)) | (1 << (MySqlParser.KOI8R - 654)) | (1 << (MySqlParser.KOI8U - 654)) | (1 << (MySqlParser.LATIN1 - 654)) | (1 << (MySqlParser.LATIN2 - 654)) | (1 << (MySqlParser.LATIN5 - 654)) | (1 << (MySqlParser.LATIN7 - 654)) | (1 << (MySqlParser.MACCE - 654)) | (1 << (MySqlParser.MACROMAN - 654)) | (1 << (MySqlParser.SJIS - 654)) | (1 << (MySqlParser.SWE7 - 654)) | (1 << (MySqlParser.TIS620 - 654)) | (1 << (MySqlParser.UCS2 - 654)) | (1 << (MySqlParser.UJIS - 654)) | (1 << (MySqlParser.UTF16 - 654)) | (1 << (MySqlParser.UTF16LE - 654)) | (1 << (MySqlParser.UTF32 - 654)) | (1 << (MySqlParser.UTF8 - 654)) | (1 << (MySqlParser.UTF8MB3 - 654)) | (1 << (MySqlParser.UTF8MB4 - 654)) | (1 << (MySqlParser.ARCHIVE - 654)) | (1 << (MySqlParser.BLACKHOLE - 654)) | (1 << (MySqlParser.CSV - 654)) | (1 << (MySqlParser.FEDERATED - 654)) | (1 << (MySqlParser.INNODB - 654)) | (1 << (MySqlParser.MEMORY - 654)) | (1 << (MySqlParser.MRG_MYISAM - 654)))) !== 0) || ((((_la - 686)) & ~0x1f) == 0 && ((1 << (_la - 686)) & ((1 << (MySqlParser.MYISAM - 686)) | (1 << (MySqlParser.NDB - 686)) | (1 << (MySqlParser.NDBCLUSTER - 686)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 686)) | (1 << (MySqlParser.TOKUDB - 686)) | (1 << (MySqlParser.REPEATABLE - 686)) | (1 << (MySqlParser.COMMITTED - 686)) | (1 << (MySqlParser.UNCOMMITTED - 686)) | (1 << (MySqlParser.SERIALIZABLE - 686)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 686)) | (1 << (MySqlParser.LINESTRING - 686)) | (1 << (MySqlParser.MULTILINESTRING - 686)) | (1 << (MySqlParser.MULTIPOINT - 686)) | (1 << (MySqlParser.MULTIPOLYGON - 686)) | (1 << (MySqlParser.POINT - 686)) | (1 << (MySqlParser.POLYGON - 686)) | (1 << (MySqlParser.ABS - 686)) | (1 << (MySqlParser.ACOS - 686)) | (1 << (MySqlParser.ADDDATE - 686)) | (1 << (MySqlParser.ADDTIME - 686)) | (1 << (MySqlParser.AES_DECRYPT - 686)) | (1 << (MySqlParser.AES_ENCRYPT - 686)) | (1 << (MySqlParser.AREA - 686)) | (1 << (MySqlParser.ASBINARY - 686)) | (1 << (MySqlParser.ASIN - 686)) | (1 << (MySqlParser.ASTEXT - 686)) | (1 << (MySqlParser.ASWKB - 686)) | (1 << (MySqlParser.ASWKT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 686)))) !== 0) || ((((_la - 718)) & ~0x1f) == 0 && ((1 << (_la - 718)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 718)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 718)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 718)) | (1 << (MySqlParser.ATAN - 718)) | (1 << (MySqlParser.ATAN2 - 718)) | (1 << (MySqlParser.BENCHMARK - 718)) | (1 << (MySqlParser.BIN - 718)) | (1 << (MySqlParser.BIT_COUNT - 718)) | (1 << (MySqlParser.BIT_LENGTH - 718)) | (1 << (MySqlParser.BUFFER - 718)) | (1 << (MySqlParser.CATALOG_NAME - 718)) | (1 << (MySqlParser.CEIL - 718)) | (1 << (MySqlParser.CEILING - 718)) | (1 << (MySqlParser.CENTROID - 718)) | (1 << (MySqlParser.CHARACTER_LENGTH - 718)) | (1 << (MySqlParser.CHARSET - 718)) | (1 << (MySqlParser.CHAR_LENGTH - 718)) | (1 << (MySqlParser.COERCIBILITY - 718)) | (1 << (MySqlParser.COLLATION - 718)) | (1 << (MySqlParser.COMPRESS - 718)) | (1 << (MySqlParser.CONCAT - 718)) | (1 << (MySqlParser.CONCAT_WS - 718)) | (1 << (MySqlParser.CONNECTION_ID - 718)) | (1 << (MySqlParser.CONV - 718)) | (1 << (MySqlParser.CONVERT_TZ - 718)) | (1 << (MySqlParser.COS - 718)) | (1 << (MySqlParser.COT - 718)) | (1 << (MySqlParser.CRC32 - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 718)) | (1 << (MySqlParser.CREATE_DIGEST - 718)))) !== 0) || ((((_la - 750)) & ~0x1f) == 0 && ((1 << (_la - 750)) & ((1 << (MySqlParser.CROSSES - 750)) | (1 << (MySqlParser.DATEDIFF - 750)) | (1 << (MySqlParser.DATE_FORMAT - 750)) | (1 << (MySqlParser.DAYNAME - 750)) | (1 << (MySqlParser.DAYOFMONTH - 750)) | (1 << (MySqlParser.DAYOFWEEK - 750)) | (1 << (MySqlParser.DAYOFYEAR - 750)) | (1 << (MySqlParser.DECODE - 750)) | (1 << (MySqlParser.DEGREES - 750)) | (1 << (MySqlParser.DES_DECRYPT - 750)) | (1 << (MySqlParser.DES_ENCRYPT - 750)) | (1 << (MySqlParser.DIMENSION - 750)) | (1 << (MySqlParser.DISJOINT - 750)) | (1 << (MySqlParser.ELT - 750)) | (1 << (MySqlParser.ENCODE - 750)) | (1 << (MySqlParser.ENCRYPT - 750)) | (1 << (MySqlParser.ENDPOINT - 750)) | (1 << (MySqlParser.ENVELOPE - 750)) | (1 << (MySqlParser.EQUALS - 750)) | (1 << (MySqlParser.EXP - 750)) | (1 << (MySqlParser.EXPORT_SET - 750)) | (1 << (MySqlParser.EXTERIORRING - 750)) | (1 << (MySqlParser.EXTRACTVALUE - 750)) | (1 << (MySqlParser.FIELD - 750)) | (1 << (MySqlParser.FIND_IN_SET - 750)) | (1 << (MySqlParser.FLOOR - 750)) | (1 << (MySqlParser.FORMAT - 750)) | (1 << (MySqlParser.FOUND_ROWS - 750)) | (1 << (MySqlParser.FROM_BASE64 - 750)) | (1 << (MySqlParser.FROM_DAYS - 750)) | (1 << (MySqlParser.FROM_UNIXTIME - 750)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 750)))) !== 0) || ((((_la - 782)) & ~0x1f) == 0 && ((1 << (_la - 782)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYN - 782)) | (1 << (MySqlParser.GEOMETRYTYPE - 782)) | (1 << (MySqlParser.GEOMFROMTEXT - 782)) | (1 << (MySqlParser.GEOMFROMWKB - 782)) | (1 << (MySqlParser.GET_FORMAT - 782)) | (1 << (MySqlParser.GET_LOCK - 782)) | (1 << (MySqlParser.GLENGTH - 782)) | (1 << (MySqlParser.GREATEST - 782)) | (1 << (MySqlParser.GTID_SUBSET - 782)) | (1 << (MySqlParser.GTID_SUBTRACT - 782)) | (1 << (MySqlParser.HEX - 782)) | (1 << (MySqlParser.IFNULL - 782)) | (1 << (MySqlParser.INET6_ATON - 782)) | (1 << (MySqlParser.INET6_NTOA - 782)) | (1 << (MySqlParser.INET_ATON - 782)) | (1 << (MySqlParser.INET_NTOA - 782)) | (1 << (MySqlParser.INSTR - 782)) | (1 << (MySqlParser.INTERIORRINGN - 782)) | (1 << (MySqlParser.INTERSECTS - 782)) | (1 << (MySqlParser.ISCLOSED - 782)) | (1 << (MySqlParser.ISEMPTY - 782)) | (1 << (MySqlParser.ISNULL - 782)) | (1 << (MySqlParser.ISSIMPLE - 782)) | (1 << (MySqlParser.IS_FREE_LOCK - 782)) | (1 << (MySqlParser.IS_IPV4 - 782)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 782)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 782)))) !== 0) || ((((_la - 814)) & ~0x1f) == 0 && ((1 << (_la - 814)) & ((1 << (MySqlParser.IS_IPV6 - 814)) | (1 << (MySqlParser.IS_USED_LOCK - 814)) | (1 << (MySqlParser.LAST_INSERT_ID - 814)) | (1 << (MySqlParser.LCASE - 814)) | (1 << (MySqlParser.LEAST - 814)) | (1 << (MySqlParser.LENGTH - 814)) | (1 << (MySqlParser.LINEFROMTEXT - 814)) | (1 << (MySqlParser.LINEFROMWKB - 814)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 814)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 814)) | (1 << (MySqlParser.LN - 814)) | (1 << (MySqlParser.LOAD_FILE - 814)) | (1 << (MySqlParser.LOCATE - 814)) | (1 << (MySqlParser.LOG - 814)) | (1 << (MySqlParser.LOG10 - 814)) | (1 << (MySqlParser.LOG2 - 814)) | (1 << (MySqlParser.LOWER - 814)) | (1 << (MySqlParser.LPAD - 814)) | (1 << (MySqlParser.LTRIM - 814)) | (1 << (MySqlParser.MAKEDATE - 814)) | (1 << (MySqlParser.MAKETIME - 814)) | (1 << (MySqlParser.MAKE_SET - 814)) | (1 << (MySqlParser.MASTER_POS_WAIT - 814)) | (1 << (MySqlParser.MBRCONTAINS - 814)) | (1 << (MySqlParser.MBRDISJOINT - 814)) | (1 << (MySqlParser.MBREQUAL - 814)) | (1 << (MySqlParser.MBRINTERSECTS - 814)) | (1 << (MySqlParser.MBROVERLAPS - 814)) | (1 << (MySqlParser.MBRTOUCHES - 814)) | (1 << (MySqlParser.MBRWITHIN - 814)) | (1 << (MySqlParser.MD5 - 814)) | (1 << (MySqlParser.MLINEFROMTEXT - 814)))) !== 0) || ((((_la - 846)) & ~0x1f) == 0 && ((1 << (_la - 846)) & ((1 << (MySqlParser.MLINEFROMWKB - 846)) | (1 << (MySqlParser.MONTHNAME - 846)) | (1 << (MySqlParser.MPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MPOINTFROMWKB - 846)) | (1 << (MySqlParser.MPOLYFROMTEXT - 846)) | (1 << (MySqlParser.MPOLYFROMWKB - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 846)) | (1 << (MySqlParser.NAME_CONST - 846)) | (1 << (MySqlParser.NULLIF - 846)) | (1 << (MySqlParser.NUMGEOMETRIES - 846)) | (1 << (MySqlParser.NUMINTERIORRINGS - 846)) | (1 << (MySqlParser.NUMPOINTS - 846)) | (1 << (MySqlParser.OCT - 846)) | (1 << (MySqlParser.OCTET_LENGTH - 846)) | (1 << (MySqlParser.ORD - 846)) | (1 << (MySqlParser.OVERLAPS - 846)) | (1 << (MySqlParser.PERIOD_ADD - 846)) | (1 << (MySqlParser.PERIOD_DIFF - 846)) | (1 << (MySqlParser.PI - 846)) | (1 << (MySqlParser.POINTFROMTEXT - 846)) | (1 << (MySqlParser.POINTFROMWKB - 846)) | (1 << (MySqlParser.POINTN - 846)) | (1 << (MySqlParser.POLYFROMTEXT - 846)) | (1 << (MySqlParser.POLYFROMWKB - 846)) | (1 << (MySqlParser.POLYGONFROMTEXT - 846)) | (1 << (MySqlParser.POLYGONFROMWKB - 846)) | (1 << (MySqlParser.POW - 846)))) !== 0) || ((((_la - 878)) & ~0x1f) == 0 && ((1 << (_la - 878)) & ((1 << (MySqlParser.POWER - 878)) | (1 << (MySqlParser.QUOTE - 878)) | (1 << (MySqlParser.RADIANS - 878)) | (1 << (MySqlParser.RAND - 878)) | (1 << (MySqlParser.RANDOM_BYTES - 878)) | (1 << (MySqlParser.RELEASE_LOCK - 878)) | (1 << (MySqlParser.REVERSE - 878)) | (1 << (MySqlParser.ROUND - 878)) | (1 << (MySqlParser.ROW_COUNT - 878)) | (1 << (MySqlParser.RPAD - 878)) | (1 << (MySqlParser.RTRIM - 878)) | (1 << (MySqlParser.SEC_TO_TIME - 878)) | (1 << (MySqlParser.SESSION_USER - 878)) | (1 << (MySqlParser.SHA - 878)) | (1 << (MySqlParser.SHA1 - 878)) | (1 << (MySqlParser.SHA2 - 878)) | (1 << (MySqlParser.SCHEMA_NAME - 878)) | (1 << (MySqlParser.SIGN - 878)) | (1 << (MySqlParser.SIN - 878)) | (1 << (MySqlParser.SLEEP - 878)) | (1 << (MySqlParser.SOUNDEX - 878)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 878)) | (1 << (MySqlParser.SQRT - 878)) | (1 << (MySqlParser.SRID - 878)) | (1 << (MySqlParser.STARTPOINT - 878)) | (1 << (MySqlParser.STRCMP - 878)) | (1 << (MySqlParser.STR_TO_DATE - 878)) | (1 << (MySqlParser.ST_AREA - 878)) | (1 << (MySqlParser.ST_ASBINARY - 878)) | (1 << (MySqlParser.ST_ASTEXT - 878)) | (1 << (MySqlParser.ST_ASWKB - 878)) | (1 << (MySqlParser.ST_ASWKT - 878)))) !== 0) || ((((_la - 910)) & ~0x1f) == 0 && ((1 << (_la - 910)) & ((1 << (MySqlParser.ST_BUFFER - 910)) | (1 << (MySqlParser.ST_CENTROID - 910)) | (1 << (MySqlParser.ST_CONTAINS - 910)) | (1 << (MySqlParser.ST_CROSSES - 910)) | (1 << (MySqlParser.ST_DIFFERENCE - 910)) | (1 << (MySqlParser.ST_DIMENSION - 910)) | (1 << (MySqlParser.ST_DISJOINT - 910)) | (1 << (MySqlParser.ST_DISTANCE - 910)) | (1 << (MySqlParser.ST_ENDPOINT - 910)) | (1 << (MySqlParser.ST_ENVELOPE - 910)) | (1 << (MySqlParser.ST_EQUALS - 910)) | (1 << (MySqlParser.ST_EXTERIORRING - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYN - 910)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 910)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 910)) | (1 << (MySqlParser.ST_INTERIORRINGN - 910)) | (1 << (MySqlParser.ST_INTERSECTION - 910)) | (1 << (MySqlParser.ST_INTERSECTS - 910)) | (1 << (MySqlParser.ST_ISCLOSED - 910)) | (1 << (MySqlParser.ST_ISEMPTY - 910)) | (1 << (MySqlParser.ST_ISSIMPLE - 910)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 910)) | (1 << (MySqlParser.ST_LINEFROMWKB - 910)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 910)))) !== 0) || ((((_la - 942)) & ~0x1f) == 0 && ((1 << (_la - 942)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 942)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 942)) | (1 << (MySqlParser.ST_NUMPOINTS - 942)) | (1 << (MySqlParser.ST_OVERLAPS - 942)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 942)) | (1 << (MySqlParser.ST_POINTFROMWKB - 942)) | (1 << (MySqlParser.ST_POINTN - 942)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYFROMWKB - 942)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 942)) | (1 << (MySqlParser.ST_SRID - 942)) | (1 << (MySqlParser.ST_STARTPOINT - 942)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 942)) | (1 << (MySqlParser.ST_TOUCHES - 942)) | (1 << (MySqlParser.ST_UNION - 942)) | (1 << (MySqlParser.ST_WITHIN - 942)) | (1 << (MySqlParser.ST_X - 942)) | (1 << (MySqlParser.ST_Y - 942)) | (1 << (MySqlParser.SUBDATE - 942)) | (1 << (MySqlParser.SUBSTRING_INDEX - 942)) | (1 << (MySqlParser.SUBTIME - 942)) | (1 << (MySqlParser.SYSTEM_USER - 942)) | (1 << (MySqlParser.TAN - 942)) | (1 << (MySqlParser.TIMEDIFF - 942)) | (1 << (MySqlParser.TIMESTAMPADD - 942)) | (1 << (MySqlParser.TIMESTAMPDIFF - 942)) | (1 << (MySqlParser.TIME_FORMAT - 942)) | (1 << (MySqlParser.TIME_TO_SEC - 942)) | (1 << (MySqlParser.TOUCHES - 942)))) !== 0) || ((((_la - 974)) & ~0x1f) == 0 && ((1 << (_la - 974)) & ((1 << (MySqlParser.TO_BASE64 - 974)) | (1 << (MySqlParser.TO_DAYS - 974)) | (1 << (MySqlParser.TO_SECONDS - 974)) | (1 << (MySqlParser.UCASE - 974)) | (1 << (MySqlParser.UNCOMPRESS - 974)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 974)) | (1 << (MySqlParser.UNHEX - 974)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 974)) | (1 << (MySqlParser.UPDATEXML - 974)) | (1 << (MySqlParser.UPPER - 974)) | (1 << (MySqlParser.UUID - 974)) | (1 << (MySqlParser.UUID_SHORT - 974)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 974)) | (1 << (MySqlParser.VERSION - 974)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1 << (MySqlParser.WEEKDAY - 974)) | (1 << (MySqlParser.WEEKOFYEAR - 974)) | (1 << (MySqlParser.WEIGHT_STRING - 974)) | (1 << (MySqlParser.WITHIN - 974)) | (1 << (MySqlParser.YEARWEEK - 974)) | (1 << (MySqlParser.Y_FUNCTION - 974)) | (1 << (MySqlParser.X_FUNCTION - 974)))) !== 0) || ((((_la - 1034)) & ~0x1f) == 0 && ((1 << (_la - 1034)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (MySqlParser.STRING_LITERAL - 1034)) | (1 << (MySqlParser.ID - 1034)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1034)))) !== 0)) {
	            this.state = 940;
	            this.procedureParameter();
	        }

	        this.state = 947;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 943;
	            this.match(MySqlParser.COMMA);
	            this.state = 944;
	            this.procedureParameter();
	            this.state = 949;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 950;
	        this.match(MySqlParser.RR_BRACKET);
	        this.state = 954;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,49,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 951;
	                this.routineOption(); 
	            }
	            this.state = 956;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,49,this._ctx);
	        }

	        this.state = 957;
	        this.routineBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createFunction() {
	    let localctx = new CreateFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, MySqlParser.RULE_createFunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 959;
	        this.match(MySqlParser.CREATE);
	        this.state = 961;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.DEFINER) {
	            this.state = 960;
	            this.ownerStatement();
	        }

	        this.state = 963;
	        this.match(MySqlParser.FUNCTION);
	        this.state = 964;
	        this.fullId();
	        this.state = 965;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 967;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySqlParser.CURRENT - 32)) | (1 << (MySqlParser.DATABASE - 32)) | (1 << (MySqlParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySqlParser.LEFT || _la===MySqlParser.NUMBER || _la===MySqlParser.RIGHT || _la===MySqlParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.TIMESTAMP - 199)) | (1 << (MySqlParser.DATETIME - 199)) | (1 << (MySqlParser.YEAR - 199)) | (1 << (MySqlParser.TEXT - 199)) | (1 << (MySqlParser.ENUM - 199)) | (1 << (MySqlParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.JSON_VALID - 233)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySqlParser.AVG - 233)) | (1 << (MySqlParser.BIT_AND - 233)) | (1 << (MySqlParser.BIT_OR - 233)) | (1 << (MySqlParser.BIT_XOR - 233)) | (1 << (MySqlParser.COUNT - 233)) | (1 << (MySqlParser.GROUP_CONCAT - 233)) | (1 << (MySqlParser.MAX - 233)) | (1 << (MySqlParser.MIN - 233)) | (1 << (MySqlParser.STD - 233)) | (1 << (MySqlParser.STDDEV - 233)) | (1 << (MySqlParser.STDDEV_POP - 233)) | (1 << (MySqlParser.STDDEV_SAMP - 233)) | (1 << (MySqlParser.SUM - 233)) | (1 << (MySqlParser.VAR_POP - 233)) | (1 << (MySqlParser.VAR_SAMP - 233)) | (1 << (MySqlParser.VARIANCE - 233)) | (1 << (MySqlParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySqlParser.ACCOUNT - 270)) | (1 << (MySqlParser.ACTION - 270)) | (1 << (MySqlParser.AFTER - 270)) | (1 << (MySqlParser.AGGREGATE - 270)) | (1 << (MySqlParser.ALGORITHM - 270)) | (1 << (MySqlParser.ANY - 270)) | (1 << (MySqlParser.AT - 270)) | (1 << (MySqlParser.AUTHORS - 270)) | (1 << (MySqlParser.AUTOCOMMIT - 270)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySqlParser.AUTO_INCREMENT - 270)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 270)) | (1 << (MySqlParser.BEGIN - 270)) | (1 << (MySqlParser.BINLOG - 270)) | (1 << (MySqlParser.BIT - 270)) | (1 << (MySqlParser.BLOCK - 270)) | (1 << (MySqlParser.BOOL - 270)) | (1 << (MySqlParser.BOOLEAN - 270)) | (1 << (MySqlParser.BTREE - 270)) | (1 << (MySqlParser.CACHE - 270)) | (1 << (MySqlParser.CASCADED - 270)) | (1 << (MySqlParser.CHAIN - 270)) | (1 << (MySqlParser.CHANGED - 270)) | (1 << (MySqlParser.CHANNEL - 270)) | (1 << (MySqlParser.CHECKSUM - 270)) | (1 << (MySqlParser.PAGE_CHECKSUM - 270)) | (1 << (MySqlParser.CIPHER - 270)) | (1 << (MySqlParser.CLASS_ORIGIN - 270)) | (1 << (MySqlParser.CLIENT - 270)) | (1 << (MySqlParser.CLOSE - 270)) | (1 << (MySqlParser.COALESCE - 270)) | (1 << (MySqlParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySqlParser.COLUMNS - 302)) | (1 << (MySqlParser.COLUMN_FORMAT - 302)) | (1 << (MySqlParser.COLUMN_NAME - 302)) | (1 << (MySqlParser.COMMENT - 302)) | (1 << (MySqlParser.COMMIT - 302)) | (1 << (MySqlParser.COMPACT - 302)) | (1 << (MySqlParser.COMPLETION - 302)) | (1 << (MySqlParser.COMPRESSED - 302)) | (1 << (MySqlParser.COMPRESSION - 302)) | (1 << (MySqlParser.CONCURRENT - 302)) | (1 << (MySqlParser.CONNECTION - 302)) | (1 << (MySqlParser.CONSISTENT - 302)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySqlParser.CONSTRAINT_NAME - 302)) | (1 << (MySqlParser.CONTAINS - 302)) | (1 << (MySqlParser.CONTEXT - 302)) | (1 << (MySqlParser.CONTRIBUTORS - 302)) | (1 << (MySqlParser.COPY - 302)) | (1 << (MySqlParser.CPU - 302)) | (1 << (MySqlParser.CURSOR_NAME - 302)) | (1 << (MySqlParser.DATA - 302)) | (1 << (MySqlParser.DATAFILE - 302)) | (1 << (MySqlParser.DEALLOCATE - 302)) | (1 << (MySqlParser.DEFAULT_AUTH - 302)) | (1 << (MySqlParser.DEFINER - 302)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 302)) | (1 << (MySqlParser.DES_KEY_FILE - 302)) | (1 << (MySqlParser.DIRECTORY - 302)) | (1 << (MySqlParser.DISABLE - 302)) | (1 << (MySqlParser.DISCARD - 302)) | (1 << (MySqlParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySqlParser.DO - 334)) | (1 << (MySqlParser.DUMPFILE - 334)) | (1 << (MySqlParser.DUPLICATE - 334)) | (1 << (MySqlParser.DYNAMIC - 334)) | (1 << (MySqlParser.ENABLE - 334)) | (1 << (MySqlParser.ENCRYPTION - 334)) | (1 << (MySqlParser.END - 334)) | (1 << (MySqlParser.ENDS - 334)) | (1 << (MySqlParser.ENGINE - 334)) | (1 << (MySqlParser.ENGINES - 334)) | (1 << (MySqlParser.ERROR - 334)) | (1 << (MySqlParser.ERRORS - 334)) | (1 << (MySqlParser.ESCAPE - 334)) | (1 << (MySqlParser.EVEN - 334)) | (1 << (MySqlParser.EVENT - 334)) | (1 << (MySqlParser.EVENTS - 334)) | (1 << (MySqlParser.EVERY - 334)) | (1 << (MySqlParser.EXCHANGE - 334)) | (1 << (MySqlParser.EXCLUSIVE - 334)) | (1 << (MySqlParser.EXPIRE - 334)) | (1 << (MySqlParser.EXPORT - 334)) | (1 << (MySqlParser.EXTENDED - 334)) | (1 << (MySqlParser.EXTENT_SIZE - 334)) | (1 << (MySqlParser.FAST - 334)) | (1 << (MySqlParser.FAULTS - 334)) | (1 << (MySqlParser.FIELDS - 334)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySqlParser.FILTER - 334)) | (1 << (MySqlParser.FIRST - 334)) | (1 << (MySqlParser.FIXED - 334)) | (1 << (MySqlParser.FLUSH - 334)) | (1 << (MySqlParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySqlParser.FOUND - 366)) | (1 << (MySqlParser.FULL - 366)) | (1 << (MySqlParser.FUNCTION - 366)) | (1 << (MySqlParser.GENERAL - 366)) | (1 << (MySqlParser.GLOBAL - 366)) | (1 << (MySqlParser.GRANTS - 366)) | (1 << (MySqlParser.GROUP_REPLICATION - 366)) | (1 << (MySqlParser.HANDLER - 366)) | (1 << (MySqlParser.HASH - 366)) | (1 << (MySqlParser.HELP - 366)) | (1 << (MySqlParser.HOST - 366)) | (1 << (MySqlParser.HOSTS - 366)) | (1 << (MySqlParser.IDENTIFIED - 366)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySqlParser.IMPORT - 366)) | (1 << (MySqlParser.INDEXES - 366)) | (1 << (MySqlParser.INITIAL_SIZE - 366)) | (1 << (MySqlParser.INPLACE - 366)) | (1 << (MySqlParser.INSERT_METHOD - 366)) | (1 << (MySqlParser.INSTALL - 366)) | (1 << (MySqlParser.INSTANCE - 366)) | (1 << (MySqlParser.INVISIBLE - 366)) | (1 << (MySqlParser.INVOKER - 366)) | (1 << (MySqlParser.IO - 366)) | (1 << (MySqlParser.IO_THREAD - 366)) | (1 << (MySqlParser.IPC - 366)) | (1 << (MySqlParser.ISOLATION - 366)) | (1 << (MySqlParser.ISSUER - 366)) | (1 << (MySqlParser.JSON - 366)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySqlParser.LANGUAGE - 366)) | (1 << (MySqlParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.LEAVES - 398)) | (1 << (MySqlParser.LESS - 398)) | (1 << (MySqlParser.LEVEL - 398)) | (1 << (MySqlParser.LIST - 398)) | (1 << (MySqlParser.LOCAL - 398)) | (1 << (MySqlParser.LOGFILE - 398)) | (1 << (MySqlParser.LOGS - 398)) | (1 << (MySqlParser.MASTER - 398)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySqlParser.MASTER_DELAY - 398)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySqlParser.MASTER_HOST - 398)) | (1 << (MySqlParser.MASTER_LOG_FILE - 398)) | (1 << (MySqlParser.MASTER_LOG_POS - 398)) | (1 << (MySqlParser.MASTER_PASSWORD - 398)) | (1 << (MySqlParser.MASTER_PORT - 398)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySqlParser.MASTER_SSL - 398)) | (1 << (MySqlParser.MASTER_SSL_CA - 398)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_CERT - 398)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySqlParser.MASTER_SSL_CRL - 398)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_KEY - 398)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 398)) | (1 << (MySqlParser.MASTER_USER - 398)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySqlParser.MEDIUM - 430)) | (1 << (MySqlParser.MEMBER - 430)) | (1 << (MySqlParser.MERGE - 430)) | (1 << (MySqlParser.MESSAGE_TEXT - 430)) | (1 << (MySqlParser.MID - 430)) | (1 << (MySqlParser.MIGRATE - 430)) | (1 << (MySqlParser.MIN_ROWS - 430)) | (1 << (MySqlParser.MODE - 430)) | (1 << (MySqlParser.MODIFY - 430)) | (1 << (MySqlParser.MUTEX - 430)) | (1 << (MySqlParser.MYSQL - 430)) | (1 << (MySqlParser.MYSQL_ERRNO - 430)) | (1 << (MySqlParser.NAME - 430)) | (1 << (MySqlParser.NAMES - 430)) | (1 << (MySqlParser.NCHAR - 430)) | (1 << (MySqlParser.NEVER - 430)) | (1 << (MySqlParser.NEXT - 430)) | (1 << (MySqlParser.NO - 430)) | (1 << (MySqlParser.NODEGROUP - 430)) | (1 << (MySqlParser.NONE - 430)) | (1 << (MySqlParser.OFFLINE - 430)) | (1 << (MySqlParser.OFFSET - 430)) | (1 << (MySqlParser.OF - 430)) | (1 << (MySqlParser.OJ - 430)) | (1 << (MySqlParser.OLD_PASSWORD - 430)) | (1 << (MySqlParser.ONE - 430)) | (1 << (MySqlParser.ONLINE - 430)) | (1 << (MySqlParser.ONLY - 430)) | (1 << (MySqlParser.OPEN - 430)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySqlParser.OPTIONS - 462)) | (1 << (MySqlParser.OWNER - 462)) | (1 << (MySqlParser.PACK_KEYS - 462)) | (1 << (MySqlParser.PAGE - 462)) | (1 << (MySqlParser.PARSER - 462)) | (1 << (MySqlParser.PARTIAL - 462)) | (1 << (MySqlParser.PARTITIONING - 462)) | (1 << (MySqlParser.PARTITIONS - 462)) | (1 << (MySqlParser.PASSWORD - 462)) | (1 << (MySqlParser.PHASE - 462)) | (1 << (MySqlParser.PLUGIN - 462)) | (1 << (MySqlParser.PLUGIN_DIR - 462)) | (1 << (MySqlParser.PLUGINS - 462)) | (1 << (MySqlParser.PORT - 462)) | (1 << (MySqlParser.PRECEDES - 462)) | (1 << (MySqlParser.PREPARE - 462)) | (1 << (MySqlParser.PRESERVE - 462)) | (1 << (MySqlParser.PREV - 462)) | (1 << (MySqlParser.PROCESSLIST - 462)) | (1 << (MySqlParser.PROFILE - 462)) | (1 << (MySqlParser.PROFILES - 462)) | (1 << (MySqlParser.PROXY - 462)) | (1 << (MySqlParser.QUERY - 462)) | (1 << (MySqlParser.QUICK - 462)) | (1 << (MySqlParser.REBUILD - 462)) | (1 << (MySqlParser.RECOVER - 462)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySqlParser.REDUNDANT - 462)) | (1 << (MySqlParser.RELAY - 462)) | (1 << (MySqlParser.RELAY_LOG_FILE - 462)) | (1 << (MySqlParser.RELAY_LOG_POS - 462)) | (1 << (MySqlParser.RELAYLOG - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySqlParser.REMOVE - 494)) | (1 << (MySqlParser.REORGANIZE - 494)) | (1 << (MySqlParser.REPAIR - 494)) | (1 << (MySqlParser.REPLICATE_DO_DB - 494)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATION - 494)) | (1 << (MySqlParser.RESET - 494)) | (1 << (MySqlParser.RESUME - 494)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 494)) | (1 << (MySqlParser.RETURNS - 494)) | (1 << (MySqlParser.ROLE - 494)) | (1 << (MySqlParser.ROLLBACK - 494)) | (1 << (MySqlParser.ROLLUP - 494)) | (1 << (MySqlParser.ROTATE - 494)) | (1 << (MySqlParser.ROW - 494)) | (1 << (MySqlParser.ROWS - 494)) | (1 << (MySqlParser.ROW_FORMAT - 494)) | (1 << (MySqlParser.SAVEPOINT - 494)) | (1 << (MySqlParser.SCHEDULE - 494)) | (1 << (MySqlParser.SECURITY - 494)) | (1 << (MySqlParser.SERVER - 494)) | (1 << (MySqlParser.SESSION - 494)) | (1 << (MySqlParser.SHARE - 494)) | (1 << (MySqlParser.SHARED - 494)) | (1 << (MySqlParser.SIGNED - 494)) | (1 << (MySqlParser.SIMPLE - 494)) | (1 << (MySqlParser.SLAVE - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySqlParser.SLOW - 526)) | (1 << (MySqlParser.SNAPSHOT - 526)) | (1 << (MySqlParser.SOCKET - 526)) | (1 << (MySqlParser.SOME - 526)) | (1 << (MySqlParser.SONAME - 526)) | (1 << (MySqlParser.SOUNDS - 526)) | (1 << (MySqlParser.SOURCE - 526)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySqlParser.SQL_CACHE - 526)) | (1 << (MySqlParser.SQL_NO_CACHE - 526)) | (1 << (MySqlParser.SQL_THREAD - 526)) | (1 << (MySqlParser.START - 526)) | (1 << (MySqlParser.STARTS - 526)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 526)) | (1 << (MySqlParser.STATS_PERSISTENT - 526)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySqlParser.STATUS - 526)) | (1 << (MySqlParser.STOP - 526)) | (1 << (MySqlParser.STORAGE - 526)) | (1 << (MySqlParser.STRING - 526)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySqlParser.SUBJECT - 526)) | (1 << (MySqlParser.SUBPARTITION - 526)) | (1 << (MySqlParser.SUBPARTITIONS - 526)) | (1 << (MySqlParser.SUSPEND - 526)) | (1 << (MySqlParser.SWAPS - 526)) | (1 << (MySqlParser.SWITCHES - 526)) | (1 << (MySqlParser.TABLE_NAME - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySqlParser.TABLESPACE - 558)) | (1 << (MySqlParser.TEMPORARY - 558)) | (1 << (MySqlParser.TEMPTABLE - 558)) | (1 << (MySqlParser.THAN - 558)) | (1 << (MySqlParser.TRADITIONAL - 558)) | (1 << (MySqlParser.TRANSACTION - 558)) | (1 << (MySqlParser.TRANSACTIONAL - 558)) | (1 << (MySqlParser.TRIGGERS - 558)) | (1 << (MySqlParser.TRUNCATE - 558)) | (1 << (MySqlParser.UNDEFINED - 558)) | (1 << (MySqlParser.UNDOFILE - 558)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySqlParser.UNINSTALL - 558)) | (1 << (MySqlParser.UNKNOWN - 558)) | (1 << (MySqlParser.UNTIL - 558)) | (1 << (MySqlParser.UPGRADE - 558)) | (1 << (MySqlParser.USER - 558)) | (1 << (MySqlParser.USE_FRM - 558)) | (1 << (MySqlParser.USER_RESOURCES - 558)) | (1 << (MySqlParser.VALIDATION - 558)) | (1 << (MySqlParser.VALUE - 558)) | (1 << (MySqlParser.VARIABLES - 558)) | (1 << (MySqlParser.VIEW - 558)) | (1 << (MySqlParser.VISIBLE - 558)) | (1 << (MySqlParser.WAIT - 558)) | (1 << (MySqlParser.WARNINGS - 558)) | (1 << (MySqlParser.WITHOUT - 558)) | (1 << (MySqlParser.WORK - 558)) | (1 << (MySqlParser.WRAPPER - 558)) | (1 << (MySqlParser.X509 - 558)) | (1 << (MySqlParser.XA - 558)))) !== 0) || ((((_la - 590)) & ~0x1f) == 0 && ((1 << (_la - 590)) & ((1 << (MySqlParser.XML - 590)) | (1 << (MySqlParser.INTERNAL - 590)) | (1 << (MySqlParser.QUARTER - 590)) | (1 << (MySqlParser.MONTH - 590)) | (1 << (MySqlParser.DAY - 590)) | (1 << (MySqlParser.HOUR - 590)) | (1 << (MySqlParser.MINUTE - 590)) | (1 << (MySqlParser.WEEK - 590)) | (1 << (MySqlParser.SECOND - 590)) | (1 << (MySqlParser.MICROSECOND - 590)) | (1 << (MySqlParser.TABLES - 590)) | (1 << (MySqlParser.ROUTINE - 590)) | (1 << (MySqlParser.EXECUTE - 590)) | (1 << (MySqlParser.FILE - 590)) | (1 << (MySqlParser.PROCESS - 590)) | (1 << (MySqlParser.RELOAD - 590)) | (1 << (MySqlParser.SHUTDOWN - 590)) | (1 << (MySqlParser.SUPER - 590)) | (1 << (MySqlParser.PRIVILEGES - 590)) | (1 << (MySqlParser.AUDIT_ADMIN - 590)) | (1 << (MySqlParser.BACKUP_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 590)) | (1 << (MySqlParser.CLONE_ADMIN - 590)) | (1 << (MySqlParser.CONNECTION_ADMIN - 590)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 590)) | (1 << (MySqlParser.FIREWALL_ADMIN - 590)))) !== 0) || ((((_la - 622)) & ~0x1f) == 0 && ((1 << (_la - 622)) & ((1 << (MySqlParser.FIREWALL_USER - 622)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 622)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 622)) | (1 << (MySqlParser.NDB_STORED_USER - 622)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.REPLICATION_APPLIER - 622)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 622)) | (1 << (MySqlParser.ROLE_ADMIN - 622)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.SET_USER_ID - 622)) | (1 << (MySqlParser.SHOW_ROUTINE - 622)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 622)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 622)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 622)) | (1 << (MySqlParser.ARMSCII8 - 622)) | (1 << (MySqlParser.ASCII - 622)) | (1 << (MySqlParser.BIG5 - 622)) | (1 << (MySqlParser.CP1250 - 622)) | (1 << (MySqlParser.CP1251 - 622)) | (1 << (MySqlParser.CP1256 - 622)) | (1 << (MySqlParser.CP1257 - 622)) | (1 << (MySqlParser.CP850 - 622)) | (1 << (MySqlParser.CP852 - 622)) | (1 << (MySqlParser.CP866 - 622)) | (1 << (MySqlParser.CP932 - 622)) | (1 << (MySqlParser.DEC8 - 622)) | (1 << (MySqlParser.EUCJPMS - 622)) | (1 << (MySqlParser.EUCKR - 622)) | (1 << (MySqlParser.GB2312 - 622)))) !== 0) || ((((_la - 654)) & ~0x1f) == 0 && ((1 << (_la - 654)) & ((1 << (MySqlParser.GBK - 654)) | (1 << (MySqlParser.GEOSTD8 - 654)) | (1 << (MySqlParser.GREEK - 654)) | (1 << (MySqlParser.HEBREW - 654)) | (1 << (MySqlParser.HP8 - 654)) | (1 << (MySqlParser.KEYBCS2 - 654)) | (1 << (MySqlParser.KOI8R - 654)) | (1 << (MySqlParser.KOI8U - 654)) | (1 << (MySqlParser.LATIN1 - 654)) | (1 << (MySqlParser.LATIN2 - 654)) | (1 << (MySqlParser.LATIN5 - 654)) | (1 << (MySqlParser.LATIN7 - 654)) | (1 << (MySqlParser.MACCE - 654)) | (1 << (MySqlParser.MACROMAN - 654)) | (1 << (MySqlParser.SJIS - 654)) | (1 << (MySqlParser.SWE7 - 654)) | (1 << (MySqlParser.TIS620 - 654)) | (1 << (MySqlParser.UCS2 - 654)) | (1 << (MySqlParser.UJIS - 654)) | (1 << (MySqlParser.UTF16 - 654)) | (1 << (MySqlParser.UTF16LE - 654)) | (1 << (MySqlParser.UTF32 - 654)) | (1 << (MySqlParser.UTF8 - 654)) | (1 << (MySqlParser.UTF8MB3 - 654)) | (1 << (MySqlParser.UTF8MB4 - 654)) | (1 << (MySqlParser.ARCHIVE - 654)) | (1 << (MySqlParser.BLACKHOLE - 654)) | (1 << (MySqlParser.CSV - 654)) | (1 << (MySqlParser.FEDERATED - 654)) | (1 << (MySqlParser.INNODB - 654)) | (1 << (MySqlParser.MEMORY - 654)) | (1 << (MySqlParser.MRG_MYISAM - 654)))) !== 0) || ((((_la - 686)) & ~0x1f) == 0 && ((1 << (_la - 686)) & ((1 << (MySqlParser.MYISAM - 686)) | (1 << (MySqlParser.NDB - 686)) | (1 << (MySqlParser.NDBCLUSTER - 686)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 686)) | (1 << (MySqlParser.TOKUDB - 686)) | (1 << (MySqlParser.REPEATABLE - 686)) | (1 << (MySqlParser.COMMITTED - 686)) | (1 << (MySqlParser.UNCOMMITTED - 686)) | (1 << (MySqlParser.SERIALIZABLE - 686)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 686)) | (1 << (MySqlParser.LINESTRING - 686)) | (1 << (MySqlParser.MULTILINESTRING - 686)) | (1 << (MySqlParser.MULTIPOINT - 686)) | (1 << (MySqlParser.MULTIPOLYGON - 686)) | (1 << (MySqlParser.POINT - 686)) | (1 << (MySqlParser.POLYGON - 686)) | (1 << (MySqlParser.ABS - 686)) | (1 << (MySqlParser.ACOS - 686)) | (1 << (MySqlParser.ADDDATE - 686)) | (1 << (MySqlParser.ADDTIME - 686)) | (1 << (MySqlParser.AES_DECRYPT - 686)) | (1 << (MySqlParser.AES_ENCRYPT - 686)) | (1 << (MySqlParser.AREA - 686)) | (1 << (MySqlParser.ASBINARY - 686)) | (1 << (MySqlParser.ASIN - 686)) | (1 << (MySqlParser.ASTEXT - 686)) | (1 << (MySqlParser.ASWKB - 686)) | (1 << (MySqlParser.ASWKT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 686)))) !== 0) || ((((_la - 718)) & ~0x1f) == 0 && ((1 << (_la - 718)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 718)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 718)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 718)) | (1 << (MySqlParser.ATAN - 718)) | (1 << (MySqlParser.ATAN2 - 718)) | (1 << (MySqlParser.BENCHMARK - 718)) | (1 << (MySqlParser.BIN - 718)) | (1 << (MySqlParser.BIT_COUNT - 718)) | (1 << (MySqlParser.BIT_LENGTH - 718)) | (1 << (MySqlParser.BUFFER - 718)) | (1 << (MySqlParser.CATALOG_NAME - 718)) | (1 << (MySqlParser.CEIL - 718)) | (1 << (MySqlParser.CEILING - 718)) | (1 << (MySqlParser.CENTROID - 718)) | (1 << (MySqlParser.CHARACTER_LENGTH - 718)) | (1 << (MySqlParser.CHARSET - 718)) | (1 << (MySqlParser.CHAR_LENGTH - 718)) | (1 << (MySqlParser.COERCIBILITY - 718)) | (1 << (MySqlParser.COLLATION - 718)) | (1 << (MySqlParser.COMPRESS - 718)) | (1 << (MySqlParser.CONCAT - 718)) | (1 << (MySqlParser.CONCAT_WS - 718)) | (1 << (MySqlParser.CONNECTION_ID - 718)) | (1 << (MySqlParser.CONV - 718)) | (1 << (MySqlParser.CONVERT_TZ - 718)) | (1 << (MySqlParser.COS - 718)) | (1 << (MySqlParser.COT - 718)) | (1 << (MySqlParser.CRC32 - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 718)) | (1 << (MySqlParser.CREATE_DIGEST - 718)))) !== 0) || ((((_la - 750)) & ~0x1f) == 0 && ((1 << (_la - 750)) & ((1 << (MySqlParser.CROSSES - 750)) | (1 << (MySqlParser.DATEDIFF - 750)) | (1 << (MySqlParser.DATE_FORMAT - 750)) | (1 << (MySqlParser.DAYNAME - 750)) | (1 << (MySqlParser.DAYOFMONTH - 750)) | (1 << (MySqlParser.DAYOFWEEK - 750)) | (1 << (MySqlParser.DAYOFYEAR - 750)) | (1 << (MySqlParser.DECODE - 750)) | (1 << (MySqlParser.DEGREES - 750)) | (1 << (MySqlParser.DES_DECRYPT - 750)) | (1 << (MySqlParser.DES_ENCRYPT - 750)) | (1 << (MySqlParser.DIMENSION - 750)) | (1 << (MySqlParser.DISJOINT - 750)) | (1 << (MySqlParser.ELT - 750)) | (1 << (MySqlParser.ENCODE - 750)) | (1 << (MySqlParser.ENCRYPT - 750)) | (1 << (MySqlParser.ENDPOINT - 750)) | (1 << (MySqlParser.ENVELOPE - 750)) | (1 << (MySqlParser.EQUALS - 750)) | (1 << (MySqlParser.EXP - 750)) | (1 << (MySqlParser.EXPORT_SET - 750)) | (1 << (MySqlParser.EXTERIORRING - 750)) | (1 << (MySqlParser.EXTRACTVALUE - 750)) | (1 << (MySqlParser.FIELD - 750)) | (1 << (MySqlParser.FIND_IN_SET - 750)) | (1 << (MySqlParser.FLOOR - 750)) | (1 << (MySqlParser.FORMAT - 750)) | (1 << (MySqlParser.FOUND_ROWS - 750)) | (1 << (MySqlParser.FROM_BASE64 - 750)) | (1 << (MySqlParser.FROM_DAYS - 750)) | (1 << (MySqlParser.FROM_UNIXTIME - 750)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 750)))) !== 0) || ((((_la - 782)) & ~0x1f) == 0 && ((1 << (_la - 782)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYN - 782)) | (1 << (MySqlParser.GEOMETRYTYPE - 782)) | (1 << (MySqlParser.GEOMFROMTEXT - 782)) | (1 << (MySqlParser.GEOMFROMWKB - 782)) | (1 << (MySqlParser.GET_FORMAT - 782)) | (1 << (MySqlParser.GET_LOCK - 782)) | (1 << (MySqlParser.GLENGTH - 782)) | (1 << (MySqlParser.GREATEST - 782)) | (1 << (MySqlParser.GTID_SUBSET - 782)) | (1 << (MySqlParser.GTID_SUBTRACT - 782)) | (1 << (MySqlParser.HEX - 782)) | (1 << (MySqlParser.IFNULL - 782)) | (1 << (MySqlParser.INET6_ATON - 782)) | (1 << (MySqlParser.INET6_NTOA - 782)) | (1 << (MySqlParser.INET_ATON - 782)) | (1 << (MySqlParser.INET_NTOA - 782)) | (1 << (MySqlParser.INSTR - 782)) | (1 << (MySqlParser.INTERIORRINGN - 782)) | (1 << (MySqlParser.INTERSECTS - 782)) | (1 << (MySqlParser.ISCLOSED - 782)) | (1 << (MySqlParser.ISEMPTY - 782)) | (1 << (MySqlParser.ISNULL - 782)) | (1 << (MySqlParser.ISSIMPLE - 782)) | (1 << (MySqlParser.IS_FREE_LOCK - 782)) | (1 << (MySqlParser.IS_IPV4 - 782)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 782)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 782)))) !== 0) || ((((_la - 814)) & ~0x1f) == 0 && ((1 << (_la - 814)) & ((1 << (MySqlParser.IS_IPV6 - 814)) | (1 << (MySqlParser.IS_USED_LOCK - 814)) | (1 << (MySqlParser.LAST_INSERT_ID - 814)) | (1 << (MySqlParser.LCASE - 814)) | (1 << (MySqlParser.LEAST - 814)) | (1 << (MySqlParser.LENGTH - 814)) | (1 << (MySqlParser.LINEFROMTEXT - 814)) | (1 << (MySqlParser.LINEFROMWKB - 814)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 814)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 814)) | (1 << (MySqlParser.LN - 814)) | (1 << (MySqlParser.LOAD_FILE - 814)) | (1 << (MySqlParser.LOCATE - 814)) | (1 << (MySqlParser.LOG - 814)) | (1 << (MySqlParser.LOG10 - 814)) | (1 << (MySqlParser.LOG2 - 814)) | (1 << (MySqlParser.LOWER - 814)) | (1 << (MySqlParser.LPAD - 814)) | (1 << (MySqlParser.LTRIM - 814)) | (1 << (MySqlParser.MAKEDATE - 814)) | (1 << (MySqlParser.MAKETIME - 814)) | (1 << (MySqlParser.MAKE_SET - 814)) | (1 << (MySqlParser.MASTER_POS_WAIT - 814)) | (1 << (MySqlParser.MBRCONTAINS - 814)) | (1 << (MySqlParser.MBRDISJOINT - 814)) | (1 << (MySqlParser.MBREQUAL - 814)) | (1 << (MySqlParser.MBRINTERSECTS - 814)) | (1 << (MySqlParser.MBROVERLAPS - 814)) | (1 << (MySqlParser.MBRTOUCHES - 814)) | (1 << (MySqlParser.MBRWITHIN - 814)) | (1 << (MySqlParser.MD5 - 814)) | (1 << (MySqlParser.MLINEFROMTEXT - 814)))) !== 0) || ((((_la - 846)) & ~0x1f) == 0 && ((1 << (_la - 846)) & ((1 << (MySqlParser.MLINEFROMWKB - 846)) | (1 << (MySqlParser.MONTHNAME - 846)) | (1 << (MySqlParser.MPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MPOINTFROMWKB - 846)) | (1 << (MySqlParser.MPOLYFROMTEXT - 846)) | (1 << (MySqlParser.MPOLYFROMWKB - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 846)) | (1 << (MySqlParser.NAME_CONST - 846)) | (1 << (MySqlParser.NULLIF - 846)) | (1 << (MySqlParser.NUMGEOMETRIES - 846)) | (1 << (MySqlParser.NUMINTERIORRINGS - 846)) | (1 << (MySqlParser.NUMPOINTS - 846)) | (1 << (MySqlParser.OCT - 846)) | (1 << (MySqlParser.OCTET_LENGTH - 846)) | (1 << (MySqlParser.ORD - 846)) | (1 << (MySqlParser.OVERLAPS - 846)) | (1 << (MySqlParser.PERIOD_ADD - 846)) | (1 << (MySqlParser.PERIOD_DIFF - 846)) | (1 << (MySqlParser.PI - 846)) | (1 << (MySqlParser.POINTFROMTEXT - 846)) | (1 << (MySqlParser.POINTFROMWKB - 846)) | (1 << (MySqlParser.POINTN - 846)) | (1 << (MySqlParser.POLYFROMTEXT - 846)) | (1 << (MySqlParser.POLYFROMWKB - 846)) | (1 << (MySqlParser.POLYGONFROMTEXT - 846)) | (1 << (MySqlParser.POLYGONFROMWKB - 846)) | (1 << (MySqlParser.POW - 846)))) !== 0) || ((((_la - 878)) & ~0x1f) == 0 && ((1 << (_la - 878)) & ((1 << (MySqlParser.POWER - 878)) | (1 << (MySqlParser.QUOTE - 878)) | (1 << (MySqlParser.RADIANS - 878)) | (1 << (MySqlParser.RAND - 878)) | (1 << (MySqlParser.RANDOM_BYTES - 878)) | (1 << (MySqlParser.RELEASE_LOCK - 878)) | (1 << (MySqlParser.REVERSE - 878)) | (1 << (MySqlParser.ROUND - 878)) | (1 << (MySqlParser.ROW_COUNT - 878)) | (1 << (MySqlParser.RPAD - 878)) | (1 << (MySqlParser.RTRIM - 878)) | (1 << (MySqlParser.SEC_TO_TIME - 878)) | (1 << (MySqlParser.SESSION_USER - 878)) | (1 << (MySqlParser.SHA - 878)) | (1 << (MySqlParser.SHA1 - 878)) | (1 << (MySqlParser.SHA2 - 878)) | (1 << (MySqlParser.SCHEMA_NAME - 878)) | (1 << (MySqlParser.SIGN - 878)) | (1 << (MySqlParser.SIN - 878)) | (1 << (MySqlParser.SLEEP - 878)) | (1 << (MySqlParser.SOUNDEX - 878)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 878)) | (1 << (MySqlParser.SQRT - 878)) | (1 << (MySqlParser.SRID - 878)) | (1 << (MySqlParser.STARTPOINT - 878)) | (1 << (MySqlParser.STRCMP - 878)) | (1 << (MySqlParser.STR_TO_DATE - 878)) | (1 << (MySqlParser.ST_AREA - 878)) | (1 << (MySqlParser.ST_ASBINARY - 878)) | (1 << (MySqlParser.ST_ASTEXT - 878)) | (1 << (MySqlParser.ST_ASWKB - 878)) | (1 << (MySqlParser.ST_ASWKT - 878)))) !== 0) || ((((_la - 910)) & ~0x1f) == 0 && ((1 << (_la - 910)) & ((1 << (MySqlParser.ST_BUFFER - 910)) | (1 << (MySqlParser.ST_CENTROID - 910)) | (1 << (MySqlParser.ST_CONTAINS - 910)) | (1 << (MySqlParser.ST_CROSSES - 910)) | (1 << (MySqlParser.ST_DIFFERENCE - 910)) | (1 << (MySqlParser.ST_DIMENSION - 910)) | (1 << (MySqlParser.ST_DISJOINT - 910)) | (1 << (MySqlParser.ST_DISTANCE - 910)) | (1 << (MySqlParser.ST_ENDPOINT - 910)) | (1 << (MySqlParser.ST_ENVELOPE - 910)) | (1 << (MySqlParser.ST_EQUALS - 910)) | (1 << (MySqlParser.ST_EXTERIORRING - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYN - 910)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 910)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 910)) | (1 << (MySqlParser.ST_INTERIORRINGN - 910)) | (1 << (MySqlParser.ST_INTERSECTION - 910)) | (1 << (MySqlParser.ST_INTERSECTS - 910)) | (1 << (MySqlParser.ST_ISCLOSED - 910)) | (1 << (MySqlParser.ST_ISEMPTY - 910)) | (1 << (MySqlParser.ST_ISSIMPLE - 910)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 910)) | (1 << (MySqlParser.ST_LINEFROMWKB - 910)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 910)))) !== 0) || ((((_la - 942)) & ~0x1f) == 0 && ((1 << (_la - 942)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 942)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 942)) | (1 << (MySqlParser.ST_NUMPOINTS - 942)) | (1 << (MySqlParser.ST_OVERLAPS - 942)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 942)) | (1 << (MySqlParser.ST_POINTFROMWKB - 942)) | (1 << (MySqlParser.ST_POINTN - 942)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYFROMWKB - 942)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 942)) | (1 << (MySqlParser.ST_SRID - 942)) | (1 << (MySqlParser.ST_STARTPOINT - 942)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 942)) | (1 << (MySqlParser.ST_TOUCHES - 942)) | (1 << (MySqlParser.ST_UNION - 942)) | (1 << (MySqlParser.ST_WITHIN - 942)) | (1 << (MySqlParser.ST_X - 942)) | (1 << (MySqlParser.ST_Y - 942)) | (1 << (MySqlParser.SUBDATE - 942)) | (1 << (MySqlParser.SUBSTRING_INDEX - 942)) | (1 << (MySqlParser.SUBTIME - 942)) | (1 << (MySqlParser.SYSTEM_USER - 942)) | (1 << (MySqlParser.TAN - 942)) | (1 << (MySqlParser.TIMEDIFF - 942)) | (1 << (MySqlParser.TIMESTAMPADD - 942)) | (1 << (MySqlParser.TIMESTAMPDIFF - 942)) | (1 << (MySqlParser.TIME_FORMAT - 942)) | (1 << (MySqlParser.TIME_TO_SEC - 942)) | (1 << (MySqlParser.TOUCHES - 942)))) !== 0) || ((((_la - 974)) & ~0x1f) == 0 && ((1 << (_la - 974)) & ((1 << (MySqlParser.TO_BASE64 - 974)) | (1 << (MySqlParser.TO_DAYS - 974)) | (1 << (MySqlParser.TO_SECONDS - 974)) | (1 << (MySqlParser.UCASE - 974)) | (1 << (MySqlParser.UNCOMPRESS - 974)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 974)) | (1 << (MySqlParser.UNHEX - 974)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 974)) | (1 << (MySqlParser.UPDATEXML - 974)) | (1 << (MySqlParser.UPPER - 974)) | (1 << (MySqlParser.UUID - 974)) | (1 << (MySqlParser.UUID_SHORT - 974)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 974)) | (1 << (MySqlParser.VERSION - 974)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1 << (MySqlParser.WEEKDAY - 974)) | (1 << (MySqlParser.WEEKOFYEAR - 974)) | (1 << (MySqlParser.WEIGHT_STRING - 974)) | (1 << (MySqlParser.WITHIN - 974)) | (1 << (MySqlParser.YEARWEEK - 974)) | (1 << (MySqlParser.Y_FUNCTION - 974)) | (1 << (MySqlParser.X_FUNCTION - 974)))) !== 0) || ((((_la - 1034)) & ~0x1f) == 0 && ((1 << (_la - 1034)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (MySqlParser.STRING_LITERAL - 1034)) | (1 << (MySqlParser.ID - 1034)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1034)))) !== 0)) {
	            this.state = 966;
	            this.functionParameter();
	        }

	        this.state = 973;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 969;
	            this.match(MySqlParser.COMMA);
	            this.state = 970;
	            this.functionParameter();
	            this.state = 975;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 976;
	        this.match(MySqlParser.RR_BRACKET);
	        this.state = 977;
	        this.match(MySqlParser.RETURNS);
	        this.state = 978;
	        this.dataType();
	        this.state = 982;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,53,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 979;
	                this.routineOption(); 
	            }
	            this.state = 984;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,53,this._ctx);
	        }

	        this.state = 987;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.ALTER:
	        case MySqlParser.ANALYZE:
	        case MySqlParser.CALL:
	        case MySqlParser.CHANGE:
	        case MySqlParser.CHECK:
	        case MySqlParser.CREATE:
	        case MySqlParser.CURRENT:
	        case MySqlParser.DATABASE:
	        case MySqlParser.DELETE:
	        case MySqlParser.DESC:
	        case MySqlParser.DESCRIBE:
	        case MySqlParser.DIAGNOSTICS:
	        case MySqlParser.DROP:
	        case MySqlParser.EXPLAIN:
	        case MySqlParser.GET:
	        case MySqlParser.GRANT:
	        case MySqlParser.INSERT:
	        case MySqlParser.KILL:
	        case MySqlParser.LEFT:
	        case MySqlParser.LOAD:
	        case MySqlParser.LOCK:
	        case MySqlParser.NUMBER:
	        case MySqlParser.OPTIMIZE:
	        case MySqlParser.PURGE:
	        case MySqlParser.RELEASE:
	        case MySqlParser.RENAME:
	        case MySqlParser.REPLACE:
	        case MySqlParser.RESIGNAL:
	        case MySqlParser.REVOKE:
	        case MySqlParser.RIGHT:
	        case MySqlParser.SELECT:
	        case MySqlParser.SET:
	        case MySqlParser.SHOW:
	        case MySqlParser.SIGNAL:
	        case MySqlParser.STACKED:
	        case MySqlParser.UNLOCK:
	        case MySqlParser.UPDATE:
	        case MySqlParser.USE:
	        case MySqlParser.DATE:
	        case MySqlParser.TIME:
	        case MySqlParser.TIMESTAMP:
	        case MySqlParser.DATETIME:
	        case MySqlParser.YEAR:
	        case MySqlParser.TEXT:
	        case MySqlParser.ENUM:
	        case MySqlParser.SERIAL:
	        case MySqlParser.JSON_VALID:
	        case MySqlParser.JSON_SCHEMA_VALID:
	        case MySqlParser.AVG:
	        case MySqlParser.BIT_AND:
	        case MySqlParser.BIT_OR:
	        case MySqlParser.BIT_XOR:
	        case MySqlParser.COUNT:
	        case MySqlParser.GROUP_CONCAT:
	        case MySqlParser.MAX:
	        case MySqlParser.MIN:
	        case MySqlParser.STD:
	        case MySqlParser.STDDEV:
	        case MySqlParser.STDDEV_POP:
	        case MySqlParser.STDDEV_SAMP:
	        case MySqlParser.SUM:
	        case MySqlParser.VAR_POP:
	        case MySqlParser.VAR_SAMP:
	        case MySqlParser.VARIANCE:
	        case MySqlParser.POSITION:
	        case MySqlParser.ACCOUNT:
	        case MySqlParser.ACTION:
	        case MySqlParser.AFTER:
	        case MySqlParser.AGGREGATE:
	        case MySqlParser.ALGORITHM:
	        case MySqlParser.ANY:
	        case MySqlParser.AT:
	        case MySqlParser.AUTHORS:
	        case MySqlParser.AUTOCOMMIT:
	        case MySqlParser.AUTOEXTEND_SIZE:
	        case MySqlParser.AUTO_INCREMENT:
	        case MySqlParser.AVG_ROW_LENGTH:
	        case MySqlParser.BEGIN:
	        case MySqlParser.BINLOG:
	        case MySqlParser.BIT:
	        case MySqlParser.BLOCK:
	        case MySqlParser.BOOL:
	        case MySqlParser.BOOLEAN:
	        case MySqlParser.BTREE:
	        case MySqlParser.CACHE:
	        case MySqlParser.CASCADED:
	        case MySqlParser.CHAIN:
	        case MySqlParser.CHANGED:
	        case MySqlParser.CHANNEL:
	        case MySqlParser.CHECKSUM:
	        case MySqlParser.PAGE_CHECKSUM:
	        case MySqlParser.CIPHER:
	        case MySqlParser.CLASS_ORIGIN:
	        case MySqlParser.CLIENT:
	        case MySqlParser.CLOSE:
	        case MySqlParser.COALESCE:
	        case MySqlParser.CODE:
	        case MySqlParser.COLUMNS:
	        case MySqlParser.COLUMN_FORMAT:
	        case MySqlParser.COLUMN_NAME:
	        case MySqlParser.COMMENT:
	        case MySqlParser.COMMIT:
	        case MySqlParser.COMPACT:
	        case MySqlParser.COMPLETION:
	        case MySqlParser.COMPRESSED:
	        case MySqlParser.COMPRESSION:
	        case MySqlParser.CONCURRENT:
	        case MySqlParser.CONNECTION:
	        case MySqlParser.CONSISTENT:
	        case MySqlParser.CONSTRAINT_CATALOG:
	        case MySqlParser.CONSTRAINT_SCHEMA:
	        case MySqlParser.CONSTRAINT_NAME:
	        case MySqlParser.CONTAINS:
	        case MySqlParser.CONTEXT:
	        case MySqlParser.CONTRIBUTORS:
	        case MySqlParser.COPY:
	        case MySqlParser.CPU:
	        case MySqlParser.CURSOR_NAME:
	        case MySqlParser.DATA:
	        case MySqlParser.DATAFILE:
	        case MySqlParser.DEALLOCATE:
	        case MySqlParser.DEFAULT_AUTH:
	        case MySqlParser.DEFINER:
	        case MySqlParser.DELAY_KEY_WRITE:
	        case MySqlParser.DES_KEY_FILE:
	        case MySqlParser.DIRECTORY:
	        case MySqlParser.DISABLE:
	        case MySqlParser.DISCARD:
	        case MySqlParser.DISK:
	        case MySqlParser.DO:
	        case MySqlParser.DUMPFILE:
	        case MySqlParser.DUPLICATE:
	        case MySqlParser.DYNAMIC:
	        case MySqlParser.ENABLE:
	        case MySqlParser.ENCRYPTION:
	        case MySqlParser.END:
	        case MySqlParser.ENDS:
	        case MySqlParser.ENGINE:
	        case MySqlParser.ENGINES:
	        case MySqlParser.ERROR:
	        case MySqlParser.ERRORS:
	        case MySqlParser.ESCAPE:
	        case MySqlParser.EVEN:
	        case MySqlParser.EVENT:
	        case MySqlParser.EVENTS:
	        case MySqlParser.EVERY:
	        case MySqlParser.EXCHANGE:
	        case MySqlParser.EXCLUSIVE:
	        case MySqlParser.EXPIRE:
	        case MySqlParser.EXPORT:
	        case MySqlParser.EXTENDED:
	        case MySqlParser.EXTENT_SIZE:
	        case MySqlParser.FAST:
	        case MySqlParser.FAULTS:
	        case MySqlParser.FIELDS:
	        case MySqlParser.FILE_BLOCK_SIZE:
	        case MySqlParser.FILTER:
	        case MySqlParser.FIRST:
	        case MySqlParser.FIXED:
	        case MySqlParser.FLUSH:
	        case MySqlParser.FOLLOWS:
	        case MySqlParser.FOUND:
	        case MySqlParser.FULL:
	        case MySqlParser.FUNCTION:
	        case MySqlParser.GENERAL:
	        case MySqlParser.GLOBAL:
	        case MySqlParser.GRANTS:
	        case MySqlParser.GROUP_REPLICATION:
	        case MySqlParser.HANDLER:
	        case MySqlParser.HASH:
	        case MySqlParser.HELP:
	        case MySqlParser.HOST:
	        case MySqlParser.HOSTS:
	        case MySqlParser.IDENTIFIED:
	        case MySqlParser.IGNORE_SERVER_IDS:
	        case MySqlParser.IMPORT:
	        case MySqlParser.INDEXES:
	        case MySqlParser.INITIAL_SIZE:
	        case MySqlParser.INPLACE:
	        case MySqlParser.INSERT_METHOD:
	        case MySqlParser.INSTALL:
	        case MySqlParser.INSTANCE:
	        case MySqlParser.INVISIBLE:
	        case MySqlParser.INVOKER:
	        case MySqlParser.IO:
	        case MySqlParser.IO_THREAD:
	        case MySqlParser.IPC:
	        case MySqlParser.ISOLATION:
	        case MySqlParser.ISSUER:
	        case MySqlParser.JSON:
	        case MySqlParser.KEY_BLOCK_SIZE:
	        case MySqlParser.LANGUAGE:
	        case MySqlParser.LAST:
	        case MySqlParser.LEAVES:
	        case MySqlParser.LESS:
	        case MySqlParser.LEVEL:
	        case MySqlParser.LIST:
	        case MySqlParser.LOCAL:
	        case MySqlParser.LOGFILE:
	        case MySqlParser.LOGS:
	        case MySqlParser.MASTER:
	        case MySqlParser.MASTER_AUTO_POSITION:
	        case MySqlParser.MASTER_CONNECT_RETRY:
	        case MySqlParser.MASTER_DELAY:
	        case MySqlParser.MASTER_HEARTBEAT_PERIOD:
	        case MySqlParser.MASTER_HOST:
	        case MySqlParser.MASTER_LOG_FILE:
	        case MySqlParser.MASTER_LOG_POS:
	        case MySqlParser.MASTER_PASSWORD:
	        case MySqlParser.MASTER_PORT:
	        case MySqlParser.MASTER_RETRY_COUNT:
	        case MySqlParser.MASTER_SSL:
	        case MySqlParser.MASTER_SSL_CA:
	        case MySqlParser.MASTER_SSL_CAPATH:
	        case MySqlParser.MASTER_SSL_CERT:
	        case MySqlParser.MASTER_SSL_CIPHER:
	        case MySqlParser.MASTER_SSL_CRL:
	        case MySqlParser.MASTER_SSL_CRLPATH:
	        case MySqlParser.MASTER_SSL_KEY:
	        case MySqlParser.MASTER_TLS_VERSION:
	        case MySqlParser.MASTER_USER:
	        case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
	        case MySqlParser.MAX_QUERIES_PER_HOUR:
	        case MySqlParser.MAX_ROWS:
	        case MySqlParser.MAX_SIZE:
	        case MySqlParser.MAX_UPDATES_PER_HOUR:
	        case MySqlParser.MAX_USER_CONNECTIONS:
	        case MySqlParser.MEDIUM:
	        case MySqlParser.MEMBER:
	        case MySqlParser.MERGE:
	        case MySqlParser.MESSAGE_TEXT:
	        case MySqlParser.MID:
	        case MySqlParser.MIGRATE:
	        case MySqlParser.MIN_ROWS:
	        case MySqlParser.MODE:
	        case MySqlParser.MODIFY:
	        case MySqlParser.MUTEX:
	        case MySqlParser.MYSQL:
	        case MySqlParser.MYSQL_ERRNO:
	        case MySqlParser.NAME:
	        case MySqlParser.NAMES:
	        case MySqlParser.NCHAR:
	        case MySqlParser.NEVER:
	        case MySqlParser.NEXT:
	        case MySqlParser.NO:
	        case MySqlParser.NODEGROUP:
	        case MySqlParser.NONE:
	        case MySqlParser.OFFLINE:
	        case MySqlParser.OFFSET:
	        case MySqlParser.OF:
	        case MySqlParser.OJ:
	        case MySqlParser.OLD_PASSWORD:
	        case MySqlParser.ONE:
	        case MySqlParser.ONLINE:
	        case MySqlParser.ONLY:
	        case MySqlParser.OPEN:
	        case MySqlParser.OPTIMIZER_COSTS:
	        case MySqlParser.OPTIONS:
	        case MySqlParser.OWNER:
	        case MySqlParser.PACK_KEYS:
	        case MySqlParser.PAGE:
	        case MySqlParser.PARSER:
	        case MySqlParser.PARTIAL:
	        case MySqlParser.PARTITIONING:
	        case MySqlParser.PARTITIONS:
	        case MySqlParser.PASSWORD:
	        case MySqlParser.PHASE:
	        case MySqlParser.PLUGIN:
	        case MySqlParser.PLUGIN_DIR:
	        case MySqlParser.PLUGINS:
	        case MySqlParser.PORT:
	        case MySqlParser.PRECEDES:
	        case MySqlParser.PREPARE:
	        case MySqlParser.PRESERVE:
	        case MySqlParser.PREV:
	        case MySqlParser.PROCESSLIST:
	        case MySqlParser.PROFILE:
	        case MySqlParser.PROFILES:
	        case MySqlParser.PROXY:
	        case MySqlParser.QUERY:
	        case MySqlParser.QUICK:
	        case MySqlParser.REBUILD:
	        case MySqlParser.RECOVER:
	        case MySqlParser.REDO_BUFFER_SIZE:
	        case MySqlParser.REDUNDANT:
	        case MySqlParser.RELAY:
	        case MySqlParser.RELAY_LOG_FILE:
	        case MySqlParser.RELAY_LOG_POS:
	        case MySqlParser.RELAYLOG:
	        case MySqlParser.REMOVE:
	        case MySqlParser.REORGANIZE:
	        case MySqlParser.REPAIR:
	        case MySqlParser.REPLICATE_DO_DB:
	        case MySqlParser.REPLICATE_DO_TABLE:
	        case MySqlParser.REPLICATE_IGNORE_DB:
	        case MySqlParser.REPLICATE_IGNORE_TABLE:
	        case MySqlParser.REPLICATE_REWRITE_DB:
	        case MySqlParser.REPLICATE_WILD_DO_TABLE:
	        case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
	        case MySqlParser.REPLICATION:
	        case MySqlParser.RESET:
	        case MySqlParser.RESUME:
	        case MySqlParser.RETURNED_SQLSTATE:
	        case MySqlParser.RETURNS:
	        case MySqlParser.ROLE:
	        case MySqlParser.ROLLBACK:
	        case MySqlParser.ROLLUP:
	        case MySqlParser.ROTATE:
	        case MySqlParser.ROW:
	        case MySqlParser.ROWS:
	        case MySqlParser.ROW_FORMAT:
	        case MySqlParser.SAVEPOINT:
	        case MySqlParser.SCHEDULE:
	        case MySqlParser.SECURITY:
	        case MySqlParser.SERVER:
	        case MySqlParser.SESSION:
	        case MySqlParser.SHARE:
	        case MySqlParser.SHARED:
	        case MySqlParser.SIGNED:
	        case MySqlParser.SIMPLE:
	        case MySqlParser.SLAVE:
	        case MySqlParser.SLOW:
	        case MySqlParser.SNAPSHOT:
	        case MySqlParser.SOCKET:
	        case MySqlParser.SOME:
	        case MySqlParser.SONAME:
	        case MySqlParser.SOUNDS:
	        case MySqlParser.SOURCE:
	        case MySqlParser.SQL_AFTER_GTIDS:
	        case MySqlParser.SQL_AFTER_MTS_GAPS:
	        case MySqlParser.SQL_BEFORE_GTIDS:
	        case MySqlParser.SQL_BUFFER_RESULT:
	        case MySqlParser.SQL_CACHE:
	        case MySqlParser.SQL_NO_CACHE:
	        case MySqlParser.SQL_THREAD:
	        case MySqlParser.START:
	        case MySqlParser.STARTS:
	        case MySqlParser.STATS_AUTO_RECALC:
	        case MySqlParser.STATS_PERSISTENT:
	        case MySqlParser.STATS_SAMPLE_PAGES:
	        case MySqlParser.STATUS:
	        case MySqlParser.STOP:
	        case MySqlParser.STORAGE:
	        case MySqlParser.STRING:
	        case MySqlParser.SUBCLASS_ORIGIN:
	        case MySqlParser.SUBJECT:
	        case MySqlParser.SUBPARTITION:
	        case MySqlParser.SUBPARTITIONS:
	        case MySqlParser.SUSPEND:
	        case MySqlParser.SWAPS:
	        case MySqlParser.SWITCHES:
	        case MySqlParser.TABLE_NAME:
	        case MySqlParser.TABLESPACE:
	        case MySqlParser.TEMPORARY:
	        case MySqlParser.TEMPTABLE:
	        case MySqlParser.THAN:
	        case MySqlParser.TRADITIONAL:
	        case MySqlParser.TRANSACTION:
	        case MySqlParser.TRANSACTIONAL:
	        case MySqlParser.TRIGGERS:
	        case MySqlParser.TRUNCATE:
	        case MySqlParser.UNDEFINED:
	        case MySqlParser.UNDOFILE:
	        case MySqlParser.UNDO_BUFFER_SIZE:
	        case MySqlParser.UNINSTALL:
	        case MySqlParser.UNKNOWN:
	        case MySqlParser.UNTIL:
	        case MySqlParser.UPGRADE:
	        case MySqlParser.USER:
	        case MySqlParser.USE_FRM:
	        case MySqlParser.USER_RESOURCES:
	        case MySqlParser.VALIDATION:
	        case MySqlParser.VALUE:
	        case MySqlParser.VARIABLES:
	        case MySqlParser.VIEW:
	        case MySqlParser.VISIBLE:
	        case MySqlParser.WAIT:
	        case MySqlParser.WARNINGS:
	        case MySqlParser.WITHOUT:
	        case MySqlParser.WORK:
	        case MySqlParser.WRAPPER:
	        case MySqlParser.X509:
	        case MySqlParser.XA:
	        case MySqlParser.XML:
	        case MySqlParser.INTERNAL:
	        case MySqlParser.QUARTER:
	        case MySqlParser.MONTH:
	        case MySqlParser.DAY:
	        case MySqlParser.HOUR:
	        case MySqlParser.MINUTE:
	        case MySqlParser.WEEK:
	        case MySqlParser.SECOND:
	        case MySqlParser.MICROSECOND:
	        case MySqlParser.TABLES:
	        case MySqlParser.ROUTINE:
	        case MySqlParser.EXECUTE:
	        case MySqlParser.FILE:
	        case MySqlParser.PROCESS:
	        case MySqlParser.RELOAD:
	        case MySqlParser.SHUTDOWN:
	        case MySqlParser.SUPER:
	        case MySqlParser.PRIVILEGES:
	        case MySqlParser.AUDIT_ADMIN:
	        case MySqlParser.BACKUP_ADMIN:
	        case MySqlParser.BINLOG_ADMIN:
	        case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
	        case MySqlParser.CLONE_ADMIN:
	        case MySqlParser.CONNECTION_ADMIN:
	        case MySqlParser.ENCRYPTION_KEY_ADMIN:
	        case MySqlParser.FIREWALL_ADMIN:
	        case MySqlParser.FIREWALL_USER:
	        case MySqlParser.GROUP_REPLICATION_ADMIN:
	        case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
	        case MySqlParser.NDB_STORED_USER:
	        case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
	        case MySqlParser.REPLICATION_APPLIER:
	        case MySqlParser.REPLICATION_SLAVE_ADMIN:
	        case MySqlParser.RESOURCE_GROUP_ADMIN:
	        case MySqlParser.RESOURCE_GROUP_USER:
	        case MySqlParser.ROLE_ADMIN:
	        case MySqlParser.SESSION_VARIABLES_ADMIN:
	        case MySqlParser.SET_USER_ID:
	        case MySqlParser.SHOW_ROUTINE:
	        case MySqlParser.SYSTEM_VARIABLES_ADMIN:
	        case MySqlParser.TABLE_ENCRYPTION_ADMIN:
	        case MySqlParser.VERSION_TOKEN_ADMIN:
	        case MySqlParser.XA_RECOVER_ADMIN:
	        case MySqlParser.ARMSCII8:
	        case MySqlParser.ASCII:
	        case MySqlParser.BIG5:
	        case MySqlParser.CP1250:
	        case MySqlParser.CP1251:
	        case MySqlParser.CP1256:
	        case MySqlParser.CP1257:
	        case MySqlParser.CP850:
	        case MySqlParser.CP852:
	        case MySqlParser.CP866:
	        case MySqlParser.CP932:
	        case MySqlParser.DEC8:
	        case MySqlParser.EUCJPMS:
	        case MySqlParser.EUCKR:
	        case MySqlParser.GB2312:
	        case MySqlParser.GBK:
	        case MySqlParser.GEOSTD8:
	        case MySqlParser.GREEK:
	        case MySqlParser.HEBREW:
	        case MySqlParser.HP8:
	        case MySqlParser.KEYBCS2:
	        case MySqlParser.KOI8R:
	        case MySqlParser.KOI8U:
	        case MySqlParser.LATIN1:
	        case MySqlParser.LATIN2:
	        case MySqlParser.LATIN5:
	        case MySqlParser.LATIN7:
	        case MySqlParser.MACCE:
	        case MySqlParser.MACROMAN:
	        case MySqlParser.SJIS:
	        case MySqlParser.SWE7:
	        case MySqlParser.TIS620:
	        case MySqlParser.UCS2:
	        case MySqlParser.UJIS:
	        case MySqlParser.UTF16:
	        case MySqlParser.UTF16LE:
	        case MySqlParser.UTF32:
	        case MySqlParser.UTF8:
	        case MySqlParser.UTF8MB3:
	        case MySqlParser.UTF8MB4:
	        case MySqlParser.ARCHIVE:
	        case MySqlParser.BLACKHOLE:
	        case MySqlParser.CSV:
	        case MySqlParser.FEDERATED:
	        case MySqlParser.INNODB:
	        case MySqlParser.MEMORY:
	        case MySqlParser.MRG_MYISAM:
	        case MySqlParser.MYISAM:
	        case MySqlParser.NDB:
	        case MySqlParser.NDBCLUSTER:
	        case MySqlParser.PERFORMANCE_SCHEMA:
	        case MySqlParser.TOKUDB:
	        case MySqlParser.REPEATABLE:
	        case MySqlParser.COMMITTED:
	        case MySqlParser.UNCOMMITTED:
	        case MySqlParser.SERIALIZABLE:
	        case MySqlParser.GEOMETRYCOLLECTION:
	        case MySqlParser.LINESTRING:
	        case MySqlParser.MULTILINESTRING:
	        case MySqlParser.MULTIPOINT:
	        case MySqlParser.MULTIPOLYGON:
	        case MySqlParser.POINT:
	        case MySqlParser.POLYGON:
	        case MySqlParser.ABS:
	        case MySqlParser.ACOS:
	        case MySqlParser.ADDDATE:
	        case MySqlParser.ADDTIME:
	        case MySqlParser.AES_DECRYPT:
	        case MySqlParser.AES_ENCRYPT:
	        case MySqlParser.AREA:
	        case MySqlParser.ASBINARY:
	        case MySqlParser.ASIN:
	        case MySqlParser.ASTEXT:
	        case MySqlParser.ASWKB:
	        case MySqlParser.ASWKT:
	        case MySqlParser.ASYMMETRIC_DECRYPT:
	        case MySqlParser.ASYMMETRIC_DERIVE:
	        case MySqlParser.ASYMMETRIC_ENCRYPT:
	        case MySqlParser.ASYMMETRIC_SIGN:
	        case MySqlParser.ASYMMETRIC_VERIFY:
	        case MySqlParser.ATAN:
	        case MySqlParser.ATAN2:
	        case MySqlParser.BENCHMARK:
	        case MySqlParser.BIN:
	        case MySqlParser.BIT_COUNT:
	        case MySqlParser.BIT_LENGTH:
	        case MySqlParser.BUFFER:
	        case MySqlParser.CATALOG_NAME:
	        case MySqlParser.CEIL:
	        case MySqlParser.CEILING:
	        case MySqlParser.CENTROID:
	        case MySqlParser.CHARACTER_LENGTH:
	        case MySqlParser.CHARSET:
	        case MySqlParser.CHAR_LENGTH:
	        case MySqlParser.COERCIBILITY:
	        case MySqlParser.COLLATION:
	        case MySqlParser.COMPRESS:
	        case MySqlParser.CONCAT:
	        case MySqlParser.CONCAT_WS:
	        case MySqlParser.CONNECTION_ID:
	        case MySqlParser.CONV:
	        case MySqlParser.CONVERT_TZ:
	        case MySqlParser.COS:
	        case MySqlParser.COT:
	        case MySqlParser.CRC32:
	        case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
	        case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
	        case MySqlParser.CREATE_DH_PARAMETERS:
	        case MySqlParser.CREATE_DIGEST:
	        case MySqlParser.CROSSES:
	        case MySqlParser.DATEDIFF:
	        case MySqlParser.DATE_FORMAT:
	        case MySqlParser.DAYNAME:
	        case MySqlParser.DAYOFMONTH:
	        case MySqlParser.DAYOFWEEK:
	        case MySqlParser.DAYOFYEAR:
	        case MySqlParser.DECODE:
	        case MySqlParser.DEGREES:
	        case MySqlParser.DES_DECRYPT:
	        case MySqlParser.DES_ENCRYPT:
	        case MySqlParser.DIMENSION:
	        case MySqlParser.DISJOINT:
	        case MySqlParser.ELT:
	        case MySqlParser.ENCODE:
	        case MySqlParser.ENCRYPT:
	        case MySqlParser.ENDPOINT:
	        case MySqlParser.ENVELOPE:
	        case MySqlParser.EQUALS:
	        case MySqlParser.EXP:
	        case MySqlParser.EXPORT_SET:
	        case MySqlParser.EXTERIORRING:
	        case MySqlParser.EXTRACTVALUE:
	        case MySqlParser.FIELD:
	        case MySqlParser.FIND_IN_SET:
	        case MySqlParser.FLOOR:
	        case MySqlParser.FORMAT:
	        case MySqlParser.FOUND_ROWS:
	        case MySqlParser.FROM_BASE64:
	        case MySqlParser.FROM_DAYS:
	        case MySqlParser.FROM_UNIXTIME:
	        case MySqlParser.GEOMCOLLFROMTEXT:
	        case MySqlParser.GEOMCOLLFROMWKB:
	        case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
	        case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
	        case MySqlParser.GEOMETRYFROMTEXT:
	        case MySqlParser.GEOMETRYFROMWKB:
	        case MySqlParser.GEOMETRYN:
	        case MySqlParser.GEOMETRYTYPE:
	        case MySqlParser.GEOMFROMTEXT:
	        case MySqlParser.GEOMFROMWKB:
	        case MySqlParser.GET_FORMAT:
	        case MySqlParser.GET_LOCK:
	        case MySqlParser.GLENGTH:
	        case MySqlParser.GREATEST:
	        case MySqlParser.GTID_SUBSET:
	        case MySqlParser.GTID_SUBTRACT:
	        case MySqlParser.HEX:
	        case MySqlParser.IFNULL:
	        case MySqlParser.INET6_ATON:
	        case MySqlParser.INET6_NTOA:
	        case MySqlParser.INET_ATON:
	        case MySqlParser.INET_NTOA:
	        case MySqlParser.INSTR:
	        case MySqlParser.INTERIORRINGN:
	        case MySqlParser.INTERSECTS:
	        case MySqlParser.ISCLOSED:
	        case MySqlParser.ISEMPTY:
	        case MySqlParser.ISNULL:
	        case MySqlParser.ISSIMPLE:
	        case MySqlParser.IS_FREE_LOCK:
	        case MySqlParser.IS_IPV4:
	        case MySqlParser.IS_IPV4_COMPAT:
	        case MySqlParser.IS_IPV4_MAPPED:
	        case MySqlParser.IS_IPV6:
	        case MySqlParser.IS_USED_LOCK:
	        case MySqlParser.LAST_INSERT_ID:
	        case MySqlParser.LCASE:
	        case MySqlParser.LEAST:
	        case MySqlParser.LENGTH:
	        case MySqlParser.LINEFROMTEXT:
	        case MySqlParser.LINEFROMWKB:
	        case MySqlParser.LINESTRINGFROMTEXT:
	        case MySqlParser.LINESTRINGFROMWKB:
	        case MySqlParser.LN:
	        case MySqlParser.LOAD_FILE:
	        case MySqlParser.LOCATE:
	        case MySqlParser.LOG:
	        case MySqlParser.LOG10:
	        case MySqlParser.LOG2:
	        case MySqlParser.LOWER:
	        case MySqlParser.LPAD:
	        case MySqlParser.LTRIM:
	        case MySqlParser.MAKEDATE:
	        case MySqlParser.MAKETIME:
	        case MySqlParser.MAKE_SET:
	        case MySqlParser.MASTER_POS_WAIT:
	        case MySqlParser.MBRCONTAINS:
	        case MySqlParser.MBRDISJOINT:
	        case MySqlParser.MBREQUAL:
	        case MySqlParser.MBRINTERSECTS:
	        case MySqlParser.MBROVERLAPS:
	        case MySqlParser.MBRTOUCHES:
	        case MySqlParser.MBRWITHIN:
	        case MySqlParser.MD5:
	        case MySqlParser.MLINEFROMTEXT:
	        case MySqlParser.MLINEFROMWKB:
	        case MySqlParser.MONTHNAME:
	        case MySqlParser.MPOINTFROMTEXT:
	        case MySqlParser.MPOINTFROMWKB:
	        case MySqlParser.MPOLYFROMTEXT:
	        case MySqlParser.MPOLYFROMWKB:
	        case MySqlParser.MULTILINESTRINGFROMTEXT:
	        case MySqlParser.MULTILINESTRINGFROMWKB:
	        case MySqlParser.MULTIPOINTFROMTEXT:
	        case MySqlParser.MULTIPOINTFROMWKB:
	        case MySqlParser.MULTIPOLYGONFROMTEXT:
	        case MySqlParser.MULTIPOLYGONFROMWKB:
	        case MySqlParser.NAME_CONST:
	        case MySqlParser.NULLIF:
	        case MySqlParser.NUMGEOMETRIES:
	        case MySqlParser.NUMINTERIORRINGS:
	        case MySqlParser.NUMPOINTS:
	        case MySqlParser.OCT:
	        case MySqlParser.OCTET_LENGTH:
	        case MySqlParser.ORD:
	        case MySqlParser.OVERLAPS:
	        case MySqlParser.PERIOD_ADD:
	        case MySqlParser.PERIOD_DIFF:
	        case MySqlParser.PI:
	        case MySqlParser.POINTFROMTEXT:
	        case MySqlParser.POINTFROMWKB:
	        case MySqlParser.POINTN:
	        case MySqlParser.POLYFROMTEXT:
	        case MySqlParser.POLYFROMWKB:
	        case MySqlParser.POLYGONFROMTEXT:
	        case MySqlParser.POLYGONFROMWKB:
	        case MySqlParser.POW:
	        case MySqlParser.POWER:
	        case MySqlParser.QUOTE:
	        case MySqlParser.RADIANS:
	        case MySqlParser.RAND:
	        case MySqlParser.RANDOM_BYTES:
	        case MySqlParser.RELEASE_LOCK:
	        case MySqlParser.REVERSE:
	        case MySqlParser.ROUND:
	        case MySqlParser.ROW_COUNT:
	        case MySqlParser.RPAD:
	        case MySqlParser.RTRIM:
	        case MySqlParser.SEC_TO_TIME:
	        case MySqlParser.SESSION_USER:
	        case MySqlParser.SHA:
	        case MySqlParser.SHA1:
	        case MySqlParser.SHA2:
	        case MySqlParser.SCHEMA_NAME:
	        case MySqlParser.SIGN:
	        case MySqlParser.SIN:
	        case MySqlParser.SLEEP:
	        case MySqlParser.SOUNDEX:
	        case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
	        case MySqlParser.SQRT:
	        case MySqlParser.SRID:
	        case MySqlParser.STARTPOINT:
	        case MySqlParser.STRCMP:
	        case MySqlParser.STR_TO_DATE:
	        case MySqlParser.ST_AREA:
	        case MySqlParser.ST_ASBINARY:
	        case MySqlParser.ST_ASTEXT:
	        case MySqlParser.ST_ASWKB:
	        case MySqlParser.ST_ASWKT:
	        case MySqlParser.ST_BUFFER:
	        case MySqlParser.ST_CENTROID:
	        case MySqlParser.ST_CONTAINS:
	        case MySqlParser.ST_CROSSES:
	        case MySqlParser.ST_DIFFERENCE:
	        case MySqlParser.ST_DIMENSION:
	        case MySqlParser.ST_DISJOINT:
	        case MySqlParser.ST_DISTANCE:
	        case MySqlParser.ST_ENDPOINT:
	        case MySqlParser.ST_ENVELOPE:
	        case MySqlParser.ST_EQUALS:
	        case MySqlParser.ST_EXTERIORRING:
	        case MySqlParser.ST_GEOMCOLLFROMTEXT:
	        case MySqlParser.ST_GEOMCOLLFROMTXT:
	        case MySqlParser.ST_GEOMCOLLFROMWKB:
	        case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
	        case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
	        case MySqlParser.ST_GEOMETRYFROMTEXT:
	        case MySqlParser.ST_GEOMETRYFROMWKB:
	        case MySqlParser.ST_GEOMETRYN:
	        case MySqlParser.ST_GEOMETRYTYPE:
	        case MySqlParser.ST_GEOMFROMTEXT:
	        case MySqlParser.ST_GEOMFROMWKB:
	        case MySqlParser.ST_INTERIORRINGN:
	        case MySqlParser.ST_INTERSECTION:
	        case MySqlParser.ST_INTERSECTS:
	        case MySqlParser.ST_ISCLOSED:
	        case MySqlParser.ST_ISEMPTY:
	        case MySqlParser.ST_ISSIMPLE:
	        case MySqlParser.ST_LINEFROMTEXT:
	        case MySqlParser.ST_LINEFROMWKB:
	        case MySqlParser.ST_LINESTRINGFROMTEXT:
	        case MySqlParser.ST_LINESTRINGFROMWKB:
	        case MySqlParser.ST_NUMGEOMETRIES:
	        case MySqlParser.ST_NUMINTERIORRING:
	        case MySqlParser.ST_NUMINTERIORRINGS:
	        case MySqlParser.ST_NUMPOINTS:
	        case MySqlParser.ST_OVERLAPS:
	        case MySqlParser.ST_POINTFROMTEXT:
	        case MySqlParser.ST_POINTFROMWKB:
	        case MySqlParser.ST_POINTN:
	        case MySqlParser.ST_POLYFROMTEXT:
	        case MySqlParser.ST_POLYFROMWKB:
	        case MySqlParser.ST_POLYGONFROMTEXT:
	        case MySqlParser.ST_POLYGONFROMWKB:
	        case MySqlParser.ST_SRID:
	        case MySqlParser.ST_STARTPOINT:
	        case MySqlParser.ST_SYMDIFFERENCE:
	        case MySqlParser.ST_TOUCHES:
	        case MySqlParser.ST_UNION:
	        case MySqlParser.ST_WITHIN:
	        case MySqlParser.ST_X:
	        case MySqlParser.ST_Y:
	        case MySqlParser.SUBDATE:
	        case MySqlParser.SUBSTRING_INDEX:
	        case MySqlParser.SUBTIME:
	        case MySqlParser.SYSTEM_USER:
	        case MySqlParser.TAN:
	        case MySqlParser.TIMEDIFF:
	        case MySqlParser.TIMESTAMPADD:
	        case MySqlParser.TIMESTAMPDIFF:
	        case MySqlParser.TIME_FORMAT:
	        case MySqlParser.TIME_TO_SEC:
	        case MySqlParser.TOUCHES:
	        case MySqlParser.TO_BASE64:
	        case MySqlParser.TO_DAYS:
	        case MySqlParser.TO_SECONDS:
	        case MySqlParser.UCASE:
	        case MySqlParser.UNCOMPRESS:
	        case MySqlParser.UNCOMPRESSED_LENGTH:
	        case MySqlParser.UNHEX:
	        case MySqlParser.UNIX_TIMESTAMP:
	        case MySqlParser.UPDATEXML:
	        case MySqlParser.UPPER:
	        case MySqlParser.UUID:
	        case MySqlParser.UUID_SHORT:
	        case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
	        case MySqlParser.VERSION:
	        case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
	        case MySqlParser.WEEKDAY:
	        case MySqlParser.WEEKOFYEAR:
	        case MySqlParser.WEIGHT_STRING:
	        case MySqlParser.WITHIN:
	        case MySqlParser.YEARWEEK:
	        case MySqlParser.Y_FUNCTION:
	        case MySqlParser.X_FUNCTION:
	        case MySqlParser.LR_BRACKET:
	        case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
	        case MySqlParser.STRING_LITERAL:
	        case MySqlParser.ID:
	        case MySqlParser.REVERSE_QUOTE_ID:
	            this.state = 985;
	            this.routineBody();
	            break;
	        case MySqlParser.RETURN:
	            this.state = 986;
	            this.returnStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createServer() {
	    let localctx = new CreateServerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, MySqlParser.RULE_createServer);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 989;
	        this.match(MySqlParser.CREATE);
	        this.state = 990;
	        this.match(MySqlParser.SERVER);
	        this.state = 991;
	        this.uid();
	        this.state = 992;
	        this.match(MySqlParser.FOREIGN);
	        this.state = 993;
	        this.match(MySqlParser.DATA);
	        this.state = 994;
	        this.match(MySqlParser.WRAPPER);
	        this.state = 995;
	        localctx.wrapperName = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.MYSQL || _la===MySqlParser.STRING_LITERAL)) {
	            localctx.wrapperName = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 996;
	        this.match(MySqlParser.OPTIONS);
	        this.state = 997;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 998;
	        this.serverOption();
	        this.state = 1003;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 999;
	            this.match(MySqlParser.COMMA);
	            this.state = 1000;
	            this.serverOption();
	            this.state = 1005;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1006;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTable() {
	    let localctx = new CreateTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, MySqlParser.RULE_createTable);
	    var _la = 0; // Token type
	    try {
	        this.state = 1086;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new CopyCreateTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1008;
	            this.match(MySqlParser.CREATE);
	            this.state = 1010;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.TEMPORARY) {
	                this.state = 1009;
	                this.match(MySqlParser.TEMPORARY);
	            }

	            this.state = 1012;
	            this.match(MySqlParser.TABLE);
	            this.state = 1014;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.IF) {
	                this.state = 1013;
	                this.ifNotExists();
	            }

	            this.state = 1016;
	            this.tableName();
	            this.state = 1024;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.LIKE:
	                this.state = 1017;
	                this.match(MySqlParser.LIKE);
	                this.state = 1018;
	                this.tableName();
	                break;
	            case MySqlParser.LR_BRACKET:
	                this.state = 1019;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 1020;
	                this.match(MySqlParser.LIKE);
	                this.state = 1021;
	                localctx.parenthesisTable = this.tableName();
	                this.state = 1022;
	                this.match(MySqlParser.RR_BRACKET);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 2:
	            localctx = new QueryCreateTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1026;
	            this.match(MySqlParser.CREATE);
	            this.state = 1028;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.TEMPORARY) {
	                this.state = 1027;
	                this.match(MySqlParser.TEMPORARY);
	            }

	            this.state = 1030;
	            this.match(MySqlParser.TABLE);
	            this.state = 1032;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.IF) {
	                this.state = 1031;
	                this.ifNotExists();
	            }

	            this.state = 1034;
	            this.tableName();
	            this.state = 1036;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	            if(la_===1) {
	                this.state = 1035;
	                this.createDefinitions();

	            }
	            this.state = 1048;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 22)) & ~0x1f) == 0 && ((1 << (_la - 22)) & ((1 << (MySqlParser.CHARACTER - 22)) | (1 << (MySqlParser.COLLATE - 22)) | (1 << (MySqlParser.DEFAULT - 22)))) !== 0) || _la===MySqlParser.INDEX || _la===MySqlParser.UNION || ((((_la - 280)) & ~0x1f) == 0 && ((1 << (_la - 280)) & ((1 << (MySqlParser.AUTO_INCREMENT - 280)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 280)) | (1 << (MySqlParser.CHECKSUM - 280)) | (1 << (MySqlParser.PAGE_CHECKSUM - 280)) | (1 << (MySqlParser.COMMENT - 280)) | (1 << (MySqlParser.COMPRESSION - 280)))) !== 0) || ((((_la - 312)) & ~0x1f) == 0 && ((1 << (_la - 312)) & ((1 << (MySqlParser.CONNECTION - 312)) | (1 << (MySqlParser.DATA - 312)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 312)) | (1 << (MySqlParser.ENCRYPTION - 312)) | (1 << (MySqlParser.ENGINE - 312)))) !== 0) || _la===MySqlParser.INSERT_METHOD || _la===MySqlParser.KEY_BLOCK_SIZE || _la===MySqlParser.MAX_ROWS || _la===MySqlParser.MIN_ROWS || _la===MySqlParser.PACK_KEYS || _la===MySqlParser.PASSWORD || ((((_la - 515)) & ~0x1f) == 0 && ((1 << (_la - 515)) & ((1 << (MySqlParser.ROW_FORMAT - 515)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 515)) | (1 << (MySqlParser.STATS_PERSISTENT - 515)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 515)))) !== 0) || _la===MySqlParser.STORAGE || _la===MySqlParser.TABLESPACE || _la===MySqlParser.CHARSET) {
	                this.state = 1038;
	                this.tableOption();
	                this.state = 1045;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(((((_la - 22)) & ~0x1f) == 0 && ((1 << (_la - 22)) & ((1 << (MySqlParser.CHARACTER - 22)) | (1 << (MySqlParser.COLLATE - 22)) | (1 << (MySqlParser.DEFAULT - 22)))) !== 0) || _la===MySqlParser.INDEX || _la===MySqlParser.UNION || ((((_la - 280)) & ~0x1f) == 0 && ((1 << (_la - 280)) & ((1 << (MySqlParser.AUTO_INCREMENT - 280)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 280)) | (1 << (MySqlParser.CHECKSUM - 280)) | (1 << (MySqlParser.PAGE_CHECKSUM - 280)) | (1 << (MySqlParser.COMMENT - 280)) | (1 << (MySqlParser.COMPRESSION - 280)))) !== 0) || ((((_la - 312)) & ~0x1f) == 0 && ((1 << (_la - 312)) & ((1 << (MySqlParser.CONNECTION - 312)) | (1 << (MySqlParser.DATA - 312)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 312)) | (1 << (MySqlParser.ENCRYPTION - 312)) | (1 << (MySqlParser.ENGINE - 312)))) !== 0) || _la===MySqlParser.INSERT_METHOD || _la===MySqlParser.KEY_BLOCK_SIZE || _la===MySqlParser.MAX_ROWS || _la===MySqlParser.MIN_ROWS || _la===MySqlParser.PACK_KEYS || _la===MySqlParser.PASSWORD || ((((_la - 515)) & ~0x1f) == 0 && ((1 << (_la - 515)) & ((1 << (MySqlParser.ROW_FORMAT - 515)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 515)) | (1 << (MySqlParser.STATS_PERSISTENT - 515)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 515)))) !== 0) || _la===MySqlParser.STORAGE || _la===MySqlParser.TABLESPACE || _la===MySqlParser.CHARSET || _la===MySqlParser.COMMA) {
	                    this.state = 1040;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===MySqlParser.COMMA) {
	                        this.state = 1039;
	                        this.match(MySqlParser.COMMA);
	                    }

	                    this.state = 1042;
	                    this.tableOption();
	                    this.state = 1047;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1051;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.PARTITION) {
	                this.state = 1050;
	                this.partitionDefinitions();
	            }

	            this.state = 1054;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.IGNORE || _la===MySqlParser.REPLACE) {
	                this.state = 1053;
	                localctx.keyViolate = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.IGNORE || _la===MySqlParser.REPLACE)) {
	                    localctx.keyViolate = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 1057;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.AS) {
	                this.state = 1056;
	                this.match(MySqlParser.AS);
	            }

	            this.state = 1059;
	            this.selectStatement();
	            break;

	        case 3:
	            localctx = new ColumnCreateTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1061;
	            this.match(MySqlParser.CREATE);
	            this.state = 1063;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.TEMPORARY) {
	                this.state = 1062;
	                this.match(MySqlParser.TEMPORARY);
	            }

	            this.state = 1065;
	            this.match(MySqlParser.TABLE);
	            this.state = 1067;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.IF) {
	                this.state = 1066;
	                this.ifNotExists();
	            }

	            this.state = 1069;
	            this.tableName();
	            this.state = 1070;
	            this.createDefinitions();
	            this.state = 1081;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
	            if(la_===1) {
	                this.state = 1071;
	                this.tableOption();
	                this.state = 1078;
	                this._errHandler.sync(this);
	                let _alt = this._interp.adaptivePredict(this._input,71,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 1073;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        if(_la===MySqlParser.COMMA) {
	                            this.state = 1072;
	                            this.match(MySqlParser.COMMA);
	                        }

	                        this.state = 1075;
	                        this.tableOption(); 
	                    }
	                    this.state = 1080;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,71,this._ctx);
	                }


	            }
	            this.state = 1084;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.PARTITION) {
	                this.state = 1083;
	                this.partitionDefinitions();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTablespaceInnodb() {
	    let localctx = new CreateTablespaceInnodbContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, MySqlParser.RULE_createTablespaceInnodb);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1088;
	        this.match(MySqlParser.CREATE);
	        this.state = 1089;
	        this.match(MySqlParser.TABLESPACE);
	        this.state = 1090;
	        this.uid();
	        this.state = 1091;
	        this.match(MySqlParser.ADD);
	        this.state = 1092;
	        this.match(MySqlParser.DATAFILE);
	        this.state = 1093;
	        localctx.datafile = this.match(MySqlParser.STRING_LITERAL);
	        this.state = 1097;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.FILE_BLOCK_SIZE) {
	            this.state = 1094;
	            this.match(MySqlParser.FILE_BLOCK_SIZE);
	            this.state = 1095;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 1096;
	            localctx.fileBlockSize = this.fileSizeLiteral();
	        }

	        this.state = 1104;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.ENGINE) {
	            this.state = 1099;
	            this.match(MySqlParser.ENGINE);
	            this.state = 1101;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1100;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1103;
	            this.engineName();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTablespaceNdb() {
	    let localctx = new CreateTablespaceNdbContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, MySqlParser.RULE_createTablespaceNdb);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1106;
	        this.match(MySqlParser.CREATE);
	        this.state = 1107;
	        this.match(MySqlParser.TABLESPACE);
	        this.state = 1108;
	        this.uid();
	        this.state = 1109;
	        this.match(MySqlParser.ADD);
	        this.state = 1110;
	        this.match(MySqlParser.DATAFILE);
	        this.state = 1111;
	        localctx.datafile = this.match(MySqlParser.STRING_LITERAL);
	        this.state = 1112;
	        this.match(MySqlParser.USE);
	        this.state = 1113;
	        this.match(MySqlParser.LOGFILE);
	        this.state = 1114;
	        this.match(MySqlParser.GROUP);
	        this.state = 1115;
	        this.uid();
	        this.state = 1121;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.EXTENT_SIZE) {
	            this.state = 1116;
	            this.match(MySqlParser.EXTENT_SIZE);
	            this.state = 1118;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1117;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1120;
	            localctx.extentSize = this.fileSizeLiteral();
	        }

	        this.state = 1128;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.INITIAL_SIZE) {
	            this.state = 1123;
	            this.match(MySqlParser.INITIAL_SIZE);
	            this.state = 1125;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1124;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1127;
	            localctx.initialSize = this.fileSizeLiteral();
	        }

	        this.state = 1135;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.AUTOEXTEND_SIZE) {
	            this.state = 1130;
	            this.match(MySqlParser.AUTOEXTEND_SIZE);
	            this.state = 1132;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1131;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1134;
	            localctx.autoextendSize = this.fileSizeLiteral();
	        }

	        this.state = 1142;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.MAX_SIZE) {
	            this.state = 1137;
	            this.match(MySqlParser.MAX_SIZE);
	            this.state = 1139;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1138;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1141;
	            localctx.maxSize = this.fileSizeLiteral();
	        }

	        this.state = 1149;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.NODEGROUP) {
	            this.state = 1144;
	            this.match(MySqlParser.NODEGROUP);
	            this.state = 1146;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1145;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1148;
	            this.uid();
	        }

	        this.state = 1152;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.WAIT) {
	            this.state = 1151;
	            this.match(MySqlParser.WAIT);
	        }

	        this.state = 1159;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.COMMENT) {
	            this.state = 1154;
	            this.match(MySqlParser.COMMENT);
	            this.state = 1156;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1155;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1158;
	            localctx.comment = this.match(MySqlParser.STRING_LITERAL);
	        }

	        this.state = 1161;
	        this.match(MySqlParser.ENGINE);
	        this.state = 1163;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.EQUAL_SYMBOL) {
	            this.state = 1162;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	        }

	        this.state = 1165;
	        this.engineName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTrigger() {
	    let localctx = new CreateTriggerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, MySqlParser.RULE_createTrigger);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1167;
	        this.match(MySqlParser.CREATE);
	        this.state = 1169;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.DEFINER) {
	            this.state = 1168;
	            this.ownerStatement();
	        }

	        this.state = 1171;
	        this.match(MySqlParser.TRIGGER);
	        this.state = 1172;
	        localctx.thisTrigger = this.fullId();
	        this.state = 1173;
	        localctx.triggerTime = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.BEFORE || _la===MySqlParser.AFTER)) {
	            localctx.triggerTime = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1174;
	        localctx.triggerEvent = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.DELETE || _la===MySqlParser.INSERT || _la===MySqlParser.UPDATE)) {
	            localctx.triggerEvent = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1175;
	        this.match(MySqlParser.ON);
	        this.state = 1176;
	        this.tableName();
	        this.state = 1177;
	        this.match(MySqlParser.FOR);
	        this.state = 1178;
	        this.match(MySqlParser.EACH);
	        this.state = 1179;
	        this.match(MySqlParser.ROW);
	        this.state = 1182;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	        if(la_===1) {
	            this.state = 1180;
	            localctx.triggerPlace = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.FOLLOWS || _la===MySqlParser.PRECEDES)) {
	                localctx.triggerPlace = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1181;
	            localctx.otherTrigger = this.fullId();

	        }
	        this.state = 1184;
	        this.routineBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createView() {
	    let localctx = new CreateViewContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, MySqlParser.RULE_createView);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1186;
	        this.match(MySqlParser.CREATE);
	        this.state = 1189;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.OR) {
	            this.state = 1187;
	            this.match(MySqlParser.OR);
	            this.state = 1188;
	            this.match(MySqlParser.REPLACE);
	        }

	        this.state = 1194;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.ALGORITHM) {
	            this.state = 1191;
	            this.match(MySqlParser.ALGORITHM);
	            this.state = 1192;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 1193;
	            localctx.algType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.MERGE || _la===MySqlParser.TEMPTABLE || _la===MySqlParser.UNDEFINED)) {
	                localctx.algType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1197;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.DEFINER) {
	            this.state = 1196;
	            this.ownerStatement();
	        }

	        this.state = 1202;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.SQL) {
	            this.state = 1199;
	            this.match(MySqlParser.SQL);
	            this.state = 1200;
	            this.match(MySqlParser.SECURITY);
	            this.state = 1201;
	            localctx.secContext = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DEFINER || _la===MySqlParser.INVOKER)) {
	                localctx.secContext = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1204;
	        this.match(MySqlParser.VIEW);
	        this.state = 1205;
	        this.fullId();
	        this.state = 1210;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.LR_BRACKET) {
	            this.state = 1206;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 1207;
	            this.uidList();
	            this.state = 1208;
	            this.match(MySqlParser.RR_BRACKET);
	        }

	        this.state = 1212;
	        this.match(MySqlParser.AS);
	        this.state = 1213;
	        this.selectStatement();
	        this.state = 1220;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.WITH) {
	            this.state = 1214;
	            this.match(MySqlParser.WITH);
	            this.state = 1216;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.CASCADED || _la===MySqlParser.LOCAL) {
	                this.state = 1215;
	                localctx.checkOption = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.CASCADED || _la===MySqlParser.LOCAL)) {
	                    localctx.checkOption = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 1218;
	            this.match(MySqlParser.CHECK);
	            this.state = 1219;
	            this.match(MySqlParser.OPTION);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createDatabaseOption() {
	    let localctx = new CreateDatabaseOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, MySqlParser.RULE_createDatabaseOption);
	    var _la = 0; // Token type
	    try {
	        this.state = 1245;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1223;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.DEFAULT) {
	                this.state = 1222;
	                this.match(MySqlParser.DEFAULT);
	            }

	            this.state = 1228;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.CHARACTER:
	                this.state = 1225;
	                this.match(MySqlParser.CHARACTER);
	                this.state = 1226;
	                this.match(MySqlParser.SET);
	                break;
	            case MySqlParser.CHARSET:
	                this.state = 1227;
	                this.match(MySqlParser.CHARSET);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1231;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1230;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1235;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.BINARY:
	            case MySqlParser.ARMSCII8:
	            case MySqlParser.ASCII:
	            case MySqlParser.BIG5:
	            case MySqlParser.CP1250:
	            case MySqlParser.CP1251:
	            case MySqlParser.CP1256:
	            case MySqlParser.CP1257:
	            case MySqlParser.CP850:
	            case MySqlParser.CP852:
	            case MySqlParser.CP866:
	            case MySqlParser.CP932:
	            case MySqlParser.DEC8:
	            case MySqlParser.EUCJPMS:
	            case MySqlParser.EUCKR:
	            case MySqlParser.GB2312:
	            case MySqlParser.GBK:
	            case MySqlParser.GEOSTD8:
	            case MySqlParser.GREEK:
	            case MySqlParser.HEBREW:
	            case MySqlParser.HP8:
	            case MySqlParser.KEYBCS2:
	            case MySqlParser.KOI8R:
	            case MySqlParser.KOI8U:
	            case MySqlParser.LATIN1:
	            case MySqlParser.LATIN2:
	            case MySqlParser.LATIN5:
	            case MySqlParser.LATIN7:
	            case MySqlParser.MACCE:
	            case MySqlParser.MACROMAN:
	            case MySqlParser.SJIS:
	            case MySqlParser.SWE7:
	            case MySqlParser.TIS620:
	            case MySqlParser.UCS2:
	            case MySqlParser.UJIS:
	            case MySqlParser.UTF16:
	            case MySqlParser.UTF16LE:
	            case MySqlParser.UTF32:
	            case MySqlParser.UTF8:
	            case MySqlParser.UTF8MB3:
	            case MySqlParser.UTF8MB4:
	            case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
	            case MySqlParser.STRING_LITERAL:
	                this.state = 1233;
	                this.charsetName();
	                break;
	            case MySqlParser.DEFAULT:
	                this.state = 1234;
	                this.match(MySqlParser.DEFAULT);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1238;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.DEFAULT) {
	                this.state = 1237;
	                this.match(MySqlParser.DEFAULT);
	            }

	            this.state = 1240;
	            this.match(MySqlParser.COLLATE);
	            this.state = 1242;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1241;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1244;
	            this.collationName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ownerStatement() {
	    let localctx = new OwnerStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, MySqlParser.RULE_ownerStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1247;
	        this.match(MySqlParser.DEFINER);
	        this.state = 1248;
	        this.match(MySqlParser.EQUAL_SYMBOL);
	        this.state = 1255;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.STRING_LITERAL:
	        case MySqlParser.ID:
	        case MySqlParser.STRING_USER_NAME:
	            this.state = 1249;
	            this.userName();
	            break;
	        case MySqlParser.CURRENT_USER:
	            this.state = 1250;
	            this.match(MySqlParser.CURRENT_USER);
	            this.state = 1253;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.LR_BRACKET) {
	                this.state = 1251;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 1252;
	                this.match(MySqlParser.RR_BRACKET);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scheduleExpression() {
	    let localctx = new ScheduleExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, MySqlParser.RULE_scheduleExpression);
	    var _la = 0; // Token type
	    try {
	        this.state = 1291;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.AT:
	            localctx = new PreciseScheduleContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1257;
	            this.match(MySqlParser.AT);
	            this.state = 1258;
	            this.timestampValue();
	            this.state = 1262;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.PLUS) {
	                this.state = 1259;
	                this.intervalExpr();
	                this.state = 1264;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case MySqlParser.EVERY:
	            localctx = new IntervalScheduleContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1265;
	            this.match(MySqlParser.EVERY);
	            this.state = 1268;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1266;
	                this.decimalLiteral();
	                break;

	            case 2:
	                this.state = 1267;
	                this.expression(0);
	                break;

	            }
	            this.state = 1270;
	            this.intervalType();
	            this.state = 1279;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.STARTS) {
	                this.state = 1271;
	                this.match(MySqlParser.STARTS);
	                this.state = 1272;
	                localctx.startTimestamp = this.timestampValue();
	                this.state = 1276;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===MySqlParser.PLUS) {
	                    this.state = 1273;
	                    localctx._intervalExpr = this.intervalExpr();
	                    localctx.startIntervals.push(localctx._intervalExpr);
	                    this.state = 1278;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1289;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.ENDS) {
	                this.state = 1281;
	                this.match(MySqlParser.ENDS);
	                this.state = 1282;
	                localctx.endTimestamp = this.timestampValue();
	                this.state = 1286;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===MySqlParser.PLUS) {
	                    this.state = 1283;
	                    localctx._intervalExpr = this.intervalExpr();
	                    localctx.endIntervals.push(localctx._intervalExpr);
	                    this.state = 1288;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timestampValue() {
	    let localctx = new TimestampValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, MySqlParser.RULE_timestampValue);
	    try {
	        this.state = 1297;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1293;
	            this.match(MySqlParser.CURRENT_TIMESTAMP);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1294;
	            this.stringLiteral();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1295;
	            this.decimalLiteral();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1296;
	            this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intervalExpr() {
	    let localctx = new IntervalExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, MySqlParser.RULE_intervalExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1299;
	        this.match(MySqlParser.PLUS);
	        this.state = 1300;
	        this.match(MySqlParser.INTERVAL);
	        this.state = 1303;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1301;
	            this.decimalLiteral();
	            break;

	        case 2:
	            this.state = 1302;
	            this.expression(0);
	            break;

	        }
	        this.state = 1305;
	        this.intervalType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intervalType() {
	    let localctx = new IntervalTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, MySqlParser.RULE_intervalType);
	    try {
	        this.state = 1320;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.QUARTER:
	        case MySqlParser.MONTH:
	        case MySqlParser.DAY:
	        case MySqlParser.HOUR:
	        case MySqlParser.MINUTE:
	        case MySqlParser.WEEK:
	        case MySqlParser.SECOND:
	        case MySqlParser.MICROSECOND:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1307;
	            this.intervalTypeBase();
	            break;
	        case MySqlParser.YEAR:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1308;
	            this.match(MySqlParser.YEAR);
	            break;
	        case MySqlParser.YEAR_MONTH:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1309;
	            this.match(MySqlParser.YEAR_MONTH);
	            break;
	        case MySqlParser.DAY_HOUR:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1310;
	            this.match(MySqlParser.DAY_HOUR);
	            break;
	        case MySqlParser.DAY_MINUTE:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1311;
	            this.match(MySqlParser.DAY_MINUTE);
	            break;
	        case MySqlParser.DAY_SECOND:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1312;
	            this.match(MySqlParser.DAY_SECOND);
	            break;
	        case MySqlParser.HOUR_MINUTE:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1313;
	            this.match(MySqlParser.HOUR_MINUTE);
	            break;
	        case MySqlParser.HOUR_SECOND:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1314;
	            this.match(MySqlParser.HOUR_SECOND);
	            break;
	        case MySqlParser.MINUTE_SECOND:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1315;
	            this.match(MySqlParser.MINUTE_SECOND);
	            break;
	        case MySqlParser.SECOND_MICROSECOND:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1316;
	            this.match(MySqlParser.SECOND_MICROSECOND);
	            break;
	        case MySqlParser.MINUTE_MICROSECOND:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1317;
	            this.match(MySqlParser.MINUTE_MICROSECOND);
	            break;
	        case MySqlParser.HOUR_MICROSECOND:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1318;
	            this.match(MySqlParser.HOUR_MICROSECOND);
	            break;
	        case MySqlParser.DAY_MICROSECOND:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1319;
	            this.match(MySqlParser.DAY_MICROSECOND);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enableType() {
	    let localctx = new EnableTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, MySqlParser.RULE_enableType);
	    try {
	        this.state = 1327;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1322;
	            this.match(MySqlParser.ENABLE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1323;
	            this.match(MySqlParser.DISABLE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1324;
	            this.match(MySqlParser.DISABLE);
	            this.state = 1325;
	            this.match(MySqlParser.ON);
	            this.state = 1326;
	            this.match(MySqlParser.SLAVE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexType() {
	    let localctx = new IndexTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, MySqlParser.RULE_indexType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1329;
	        this.match(MySqlParser.USING);
	        this.state = 1330;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.BTREE || _la===MySqlParser.HASH)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexOption() {
	    let localctx = new IndexOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, MySqlParser.RULE_indexOption);
	    var _la = 0; // Token type
	    try {
	        this.state = 1345;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.KEY_BLOCK_SIZE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1332;
	            this.match(MySqlParser.KEY_BLOCK_SIZE);
	            this.state = 1334;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1333;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1336;
	            this.fileSizeLiteral();
	            break;
	        case MySqlParser.USING:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1337;
	            this.indexType();
	            break;
	        case MySqlParser.WITH:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1338;
	            this.match(MySqlParser.WITH);
	            this.state = 1339;
	            this.match(MySqlParser.PARSER);
	            this.state = 1340;
	            this.uid();
	            break;
	        case MySqlParser.COMMENT:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1341;
	            this.match(MySqlParser.COMMENT);
	            this.state = 1342;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.INVISIBLE:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1343;
	            this.match(MySqlParser.INVISIBLE);
	            break;
	        case MySqlParser.VISIBLE:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1344;
	            this.match(MySqlParser.VISIBLE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureParameter() {
	    let localctx = new ProcedureParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, MySqlParser.RULE_procedureParameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1348;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.IN || _la===MySqlParser.INOUT || _la===MySqlParser.OUT) {
	            this.state = 1347;
	            localctx.direction = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.IN || _la===MySqlParser.INOUT || _la===MySqlParser.OUT)) {
	                localctx.direction = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1350;
	        this.uid();
	        this.state = 1351;
	        this.dataType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionParameter() {
	    let localctx = new FunctionParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, MySqlParser.RULE_functionParameter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1353;
	        this.uid();
	        this.state = 1354;
	        this.dataType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	routineOption() {
	    let localctx = new RoutineOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, MySqlParser.RULE_routineOption);
	    var _la = 0; // Token type
	    try {
	        this.state = 1379;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.COMMENT:
	            localctx = new RoutineCommentContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1356;
	            this.match(MySqlParser.COMMENT);
	            this.state = 1357;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.LANGUAGE:
	            localctx = new RoutineLanguageContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1358;
	            this.match(MySqlParser.LANGUAGE);
	            this.state = 1359;
	            this.match(MySqlParser.SQL);
	            break;
	        case MySqlParser.DETERMINISTIC:
	        case MySqlParser.NOT:
	            localctx = new RoutineBehaviorContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1361;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.NOT) {
	                this.state = 1360;
	                this.match(MySqlParser.NOT);
	            }

	            this.state = 1363;
	            this.match(MySqlParser.DETERMINISTIC);
	            break;
	        case MySqlParser.MODIFIES:
	        case MySqlParser.READS:
	        case MySqlParser.CONTAINS:
	        case MySqlParser.NO:
	            localctx = new RoutineDataContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1374;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.CONTAINS:
	                this.state = 1364;
	                this.match(MySqlParser.CONTAINS);
	                this.state = 1365;
	                this.match(MySqlParser.SQL);
	                break;
	            case MySqlParser.NO:
	                this.state = 1366;
	                this.match(MySqlParser.NO);
	                this.state = 1367;
	                this.match(MySqlParser.SQL);
	                break;
	            case MySqlParser.READS:
	                this.state = 1368;
	                this.match(MySqlParser.READS);
	                this.state = 1369;
	                this.match(MySqlParser.SQL);
	                this.state = 1370;
	                this.match(MySqlParser.DATA);
	                break;
	            case MySqlParser.MODIFIES:
	                this.state = 1371;
	                this.match(MySqlParser.MODIFIES);
	                this.state = 1372;
	                this.match(MySqlParser.SQL);
	                this.state = 1373;
	                this.match(MySqlParser.DATA);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case MySqlParser.SQL:
	            localctx = new RoutineSecurityContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1376;
	            this.match(MySqlParser.SQL);
	            this.state = 1377;
	            this.match(MySqlParser.SECURITY);
	            this.state = 1378;
	            localctx.context = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DEFINER || _la===MySqlParser.INVOKER)) {
	                localctx.context = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	serverOption() {
	    let localctx = new ServerOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, MySqlParser.RULE_serverOption);
	    try {
	        this.state = 1395;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.HOST:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1381;
	            this.match(MySqlParser.HOST);
	            this.state = 1382;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.DATABASE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1383;
	            this.match(MySqlParser.DATABASE);
	            this.state = 1384;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.USER:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1385;
	            this.match(MySqlParser.USER);
	            this.state = 1386;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.PASSWORD:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1387;
	            this.match(MySqlParser.PASSWORD);
	            this.state = 1388;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.SOCKET:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1389;
	            this.match(MySqlParser.SOCKET);
	            this.state = 1390;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.OWNER:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1391;
	            this.match(MySqlParser.OWNER);
	            this.state = 1392;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.PORT:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1393;
	            this.match(MySqlParser.PORT);
	            this.state = 1394;
	            this.decimalLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createDefinitions() {
	    let localctx = new CreateDefinitionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, MySqlParser.RULE_createDefinitions);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1397;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 1398;
	        this.createDefinition();
	        this.state = 1403;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 1399;
	            this.match(MySqlParser.COMMA);
	            this.state = 1400;
	            this.createDefinition();
	            this.state = 1405;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1406;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createDefinition() {
	    let localctx = new CreateDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, MySqlParser.RULE_createDefinition);
	    try {
	        this.state = 1413;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.CURRENT:
	        case MySqlParser.DATABASE:
	        case MySqlParser.DIAGNOSTICS:
	        case MySqlParser.LEFT:
	        case MySqlParser.NUMBER:
	        case MySqlParser.RIGHT:
	        case MySqlParser.STACKED:
	        case MySqlParser.DATE:
	        case MySqlParser.TIME:
	        case MySqlParser.TIMESTAMP:
	        case MySqlParser.DATETIME:
	        case MySqlParser.YEAR:
	        case MySqlParser.TEXT:
	        case MySqlParser.ENUM:
	        case MySqlParser.SERIAL:
	        case MySqlParser.JSON_VALID:
	        case MySqlParser.JSON_SCHEMA_VALID:
	        case MySqlParser.AVG:
	        case MySqlParser.BIT_AND:
	        case MySqlParser.BIT_OR:
	        case MySqlParser.BIT_XOR:
	        case MySqlParser.COUNT:
	        case MySqlParser.GROUP_CONCAT:
	        case MySqlParser.MAX:
	        case MySqlParser.MIN:
	        case MySqlParser.STD:
	        case MySqlParser.STDDEV:
	        case MySqlParser.STDDEV_POP:
	        case MySqlParser.STDDEV_SAMP:
	        case MySqlParser.SUM:
	        case MySqlParser.VAR_POP:
	        case MySqlParser.VAR_SAMP:
	        case MySqlParser.VARIANCE:
	        case MySqlParser.POSITION:
	        case MySqlParser.ACCOUNT:
	        case MySqlParser.ACTION:
	        case MySqlParser.AFTER:
	        case MySqlParser.AGGREGATE:
	        case MySqlParser.ALGORITHM:
	        case MySqlParser.ANY:
	        case MySqlParser.AT:
	        case MySqlParser.AUTHORS:
	        case MySqlParser.AUTOCOMMIT:
	        case MySqlParser.AUTOEXTEND_SIZE:
	        case MySqlParser.AUTO_INCREMENT:
	        case MySqlParser.AVG_ROW_LENGTH:
	        case MySqlParser.BEGIN:
	        case MySqlParser.BINLOG:
	        case MySqlParser.BIT:
	        case MySqlParser.BLOCK:
	        case MySqlParser.BOOL:
	        case MySqlParser.BOOLEAN:
	        case MySqlParser.BTREE:
	        case MySqlParser.CACHE:
	        case MySqlParser.CASCADED:
	        case MySqlParser.CHAIN:
	        case MySqlParser.CHANGED:
	        case MySqlParser.CHANNEL:
	        case MySqlParser.CHECKSUM:
	        case MySqlParser.PAGE_CHECKSUM:
	        case MySqlParser.CIPHER:
	        case MySqlParser.CLASS_ORIGIN:
	        case MySqlParser.CLIENT:
	        case MySqlParser.CLOSE:
	        case MySqlParser.COALESCE:
	        case MySqlParser.CODE:
	        case MySqlParser.COLUMNS:
	        case MySqlParser.COLUMN_FORMAT:
	        case MySqlParser.COLUMN_NAME:
	        case MySqlParser.COMMENT:
	        case MySqlParser.COMMIT:
	        case MySqlParser.COMPACT:
	        case MySqlParser.COMPLETION:
	        case MySqlParser.COMPRESSED:
	        case MySqlParser.COMPRESSION:
	        case MySqlParser.CONCURRENT:
	        case MySqlParser.CONNECTION:
	        case MySqlParser.CONSISTENT:
	        case MySqlParser.CONSTRAINT_CATALOG:
	        case MySqlParser.CONSTRAINT_SCHEMA:
	        case MySqlParser.CONSTRAINT_NAME:
	        case MySqlParser.CONTAINS:
	        case MySqlParser.CONTEXT:
	        case MySqlParser.CONTRIBUTORS:
	        case MySqlParser.COPY:
	        case MySqlParser.CPU:
	        case MySqlParser.CURSOR_NAME:
	        case MySqlParser.DATA:
	        case MySqlParser.DATAFILE:
	        case MySqlParser.DEALLOCATE:
	        case MySqlParser.DEFAULT_AUTH:
	        case MySqlParser.DEFINER:
	        case MySqlParser.DELAY_KEY_WRITE:
	        case MySqlParser.DES_KEY_FILE:
	        case MySqlParser.DIRECTORY:
	        case MySqlParser.DISABLE:
	        case MySqlParser.DISCARD:
	        case MySqlParser.DISK:
	        case MySqlParser.DO:
	        case MySqlParser.DUMPFILE:
	        case MySqlParser.DUPLICATE:
	        case MySqlParser.DYNAMIC:
	        case MySqlParser.ENABLE:
	        case MySqlParser.ENCRYPTION:
	        case MySqlParser.END:
	        case MySqlParser.ENDS:
	        case MySqlParser.ENGINE:
	        case MySqlParser.ENGINES:
	        case MySqlParser.ERROR:
	        case MySqlParser.ERRORS:
	        case MySqlParser.ESCAPE:
	        case MySqlParser.EVEN:
	        case MySqlParser.EVENT:
	        case MySqlParser.EVENTS:
	        case MySqlParser.EVERY:
	        case MySqlParser.EXCHANGE:
	        case MySqlParser.EXCLUSIVE:
	        case MySqlParser.EXPIRE:
	        case MySqlParser.EXPORT:
	        case MySqlParser.EXTENDED:
	        case MySqlParser.EXTENT_SIZE:
	        case MySqlParser.FAST:
	        case MySqlParser.FAULTS:
	        case MySqlParser.FIELDS:
	        case MySqlParser.FILE_BLOCK_SIZE:
	        case MySqlParser.FILTER:
	        case MySqlParser.FIRST:
	        case MySqlParser.FIXED:
	        case MySqlParser.FLUSH:
	        case MySqlParser.FOLLOWS:
	        case MySqlParser.FOUND:
	        case MySqlParser.FULL:
	        case MySqlParser.FUNCTION:
	        case MySqlParser.GENERAL:
	        case MySqlParser.GLOBAL:
	        case MySqlParser.GRANTS:
	        case MySqlParser.GROUP_REPLICATION:
	        case MySqlParser.HANDLER:
	        case MySqlParser.HASH:
	        case MySqlParser.HELP:
	        case MySqlParser.HOST:
	        case MySqlParser.HOSTS:
	        case MySqlParser.IDENTIFIED:
	        case MySqlParser.IGNORE_SERVER_IDS:
	        case MySqlParser.IMPORT:
	        case MySqlParser.INDEXES:
	        case MySqlParser.INITIAL_SIZE:
	        case MySqlParser.INPLACE:
	        case MySqlParser.INSERT_METHOD:
	        case MySqlParser.INSTALL:
	        case MySqlParser.INSTANCE:
	        case MySqlParser.INVISIBLE:
	        case MySqlParser.INVOKER:
	        case MySqlParser.IO:
	        case MySqlParser.IO_THREAD:
	        case MySqlParser.IPC:
	        case MySqlParser.ISOLATION:
	        case MySqlParser.ISSUER:
	        case MySqlParser.JSON:
	        case MySqlParser.KEY_BLOCK_SIZE:
	        case MySqlParser.LANGUAGE:
	        case MySqlParser.LAST:
	        case MySqlParser.LEAVES:
	        case MySqlParser.LESS:
	        case MySqlParser.LEVEL:
	        case MySqlParser.LIST:
	        case MySqlParser.LOCAL:
	        case MySqlParser.LOGFILE:
	        case MySqlParser.LOGS:
	        case MySqlParser.MASTER:
	        case MySqlParser.MASTER_AUTO_POSITION:
	        case MySqlParser.MASTER_CONNECT_RETRY:
	        case MySqlParser.MASTER_DELAY:
	        case MySqlParser.MASTER_HEARTBEAT_PERIOD:
	        case MySqlParser.MASTER_HOST:
	        case MySqlParser.MASTER_LOG_FILE:
	        case MySqlParser.MASTER_LOG_POS:
	        case MySqlParser.MASTER_PASSWORD:
	        case MySqlParser.MASTER_PORT:
	        case MySqlParser.MASTER_RETRY_COUNT:
	        case MySqlParser.MASTER_SSL:
	        case MySqlParser.MASTER_SSL_CA:
	        case MySqlParser.MASTER_SSL_CAPATH:
	        case MySqlParser.MASTER_SSL_CERT:
	        case MySqlParser.MASTER_SSL_CIPHER:
	        case MySqlParser.MASTER_SSL_CRL:
	        case MySqlParser.MASTER_SSL_CRLPATH:
	        case MySqlParser.MASTER_SSL_KEY:
	        case MySqlParser.MASTER_TLS_VERSION:
	        case MySqlParser.MASTER_USER:
	        case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
	        case MySqlParser.MAX_QUERIES_PER_HOUR:
	        case MySqlParser.MAX_ROWS:
	        case MySqlParser.MAX_SIZE:
	        case MySqlParser.MAX_UPDATES_PER_HOUR:
	        case MySqlParser.MAX_USER_CONNECTIONS:
	        case MySqlParser.MEDIUM:
	        case MySqlParser.MEMBER:
	        case MySqlParser.MERGE:
	        case MySqlParser.MESSAGE_TEXT:
	        case MySqlParser.MID:
	        case MySqlParser.MIGRATE:
	        case MySqlParser.MIN_ROWS:
	        case MySqlParser.MODE:
	        case MySqlParser.MODIFY:
	        case MySqlParser.MUTEX:
	        case MySqlParser.MYSQL:
	        case MySqlParser.MYSQL_ERRNO:
	        case MySqlParser.NAME:
	        case MySqlParser.NAMES:
	        case MySqlParser.NCHAR:
	        case MySqlParser.NEVER:
	        case MySqlParser.NEXT:
	        case MySqlParser.NO:
	        case MySqlParser.NODEGROUP:
	        case MySqlParser.NONE:
	        case MySqlParser.OFFLINE:
	        case MySqlParser.OFFSET:
	        case MySqlParser.OF:
	        case MySqlParser.OJ:
	        case MySqlParser.OLD_PASSWORD:
	        case MySqlParser.ONE:
	        case MySqlParser.ONLINE:
	        case MySqlParser.ONLY:
	        case MySqlParser.OPEN:
	        case MySqlParser.OPTIMIZER_COSTS:
	        case MySqlParser.OPTIONS:
	        case MySqlParser.OWNER:
	        case MySqlParser.PACK_KEYS:
	        case MySqlParser.PAGE:
	        case MySqlParser.PARSER:
	        case MySqlParser.PARTIAL:
	        case MySqlParser.PARTITIONING:
	        case MySqlParser.PARTITIONS:
	        case MySqlParser.PASSWORD:
	        case MySqlParser.PHASE:
	        case MySqlParser.PLUGIN:
	        case MySqlParser.PLUGIN_DIR:
	        case MySqlParser.PLUGINS:
	        case MySqlParser.PORT:
	        case MySqlParser.PRECEDES:
	        case MySqlParser.PREPARE:
	        case MySqlParser.PRESERVE:
	        case MySqlParser.PREV:
	        case MySqlParser.PROCESSLIST:
	        case MySqlParser.PROFILE:
	        case MySqlParser.PROFILES:
	        case MySqlParser.PROXY:
	        case MySqlParser.QUERY:
	        case MySqlParser.QUICK:
	        case MySqlParser.REBUILD:
	        case MySqlParser.RECOVER:
	        case MySqlParser.REDO_BUFFER_SIZE:
	        case MySqlParser.REDUNDANT:
	        case MySqlParser.RELAY:
	        case MySqlParser.RELAY_LOG_FILE:
	        case MySqlParser.RELAY_LOG_POS:
	        case MySqlParser.RELAYLOG:
	        case MySqlParser.REMOVE:
	        case MySqlParser.REORGANIZE:
	        case MySqlParser.REPAIR:
	        case MySqlParser.REPLICATE_DO_DB:
	        case MySqlParser.REPLICATE_DO_TABLE:
	        case MySqlParser.REPLICATE_IGNORE_DB:
	        case MySqlParser.REPLICATE_IGNORE_TABLE:
	        case MySqlParser.REPLICATE_REWRITE_DB:
	        case MySqlParser.REPLICATE_WILD_DO_TABLE:
	        case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
	        case MySqlParser.REPLICATION:
	        case MySqlParser.RESET:
	        case MySqlParser.RESUME:
	        case MySqlParser.RETURNED_SQLSTATE:
	        case MySqlParser.RETURNS:
	        case MySqlParser.ROLE:
	        case MySqlParser.ROLLBACK:
	        case MySqlParser.ROLLUP:
	        case MySqlParser.ROTATE:
	        case MySqlParser.ROW:
	        case MySqlParser.ROWS:
	        case MySqlParser.ROW_FORMAT:
	        case MySqlParser.SAVEPOINT:
	        case MySqlParser.SCHEDULE:
	        case MySqlParser.SECURITY:
	        case MySqlParser.SERVER:
	        case MySqlParser.SESSION:
	        case MySqlParser.SHARE:
	        case MySqlParser.SHARED:
	        case MySqlParser.SIGNED:
	        case MySqlParser.SIMPLE:
	        case MySqlParser.SLAVE:
	        case MySqlParser.SLOW:
	        case MySqlParser.SNAPSHOT:
	        case MySqlParser.SOCKET:
	        case MySqlParser.SOME:
	        case MySqlParser.SONAME:
	        case MySqlParser.SOUNDS:
	        case MySqlParser.SOURCE:
	        case MySqlParser.SQL_AFTER_GTIDS:
	        case MySqlParser.SQL_AFTER_MTS_GAPS:
	        case MySqlParser.SQL_BEFORE_GTIDS:
	        case MySqlParser.SQL_BUFFER_RESULT:
	        case MySqlParser.SQL_CACHE:
	        case MySqlParser.SQL_NO_CACHE:
	        case MySqlParser.SQL_THREAD:
	        case MySqlParser.START:
	        case MySqlParser.STARTS:
	        case MySqlParser.STATS_AUTO_RECALC:
	        case MySqlParser.STATS_PERSISTENT:
	        case MySqlParser.STATS_SAMPLE_PAGES:
	        case MySqlParser.STATUS:
	        case MySqlParser.STOP:
	        case MySqlParser.STORAGE:
	        case MySqlParser.STRING:
	        case MySqlParser.SUBCLASS_ORIGIN:
	        case MySqlParser.SUBJECT:
	        case MySqlParser.SUBPARTITION:
	        case MySqlParser.SUBPARTITIONS:
	        case MySqlParser.SUSPEND:
	        case MySqlParser.SWAPS:
	        case MySqlParser.SWITCHES:
	        case MySqlParser.TABLE_NAME:
	        case MySqlParser.TABLESPACE:
	        case MySqlParser.TEMPORARY:
	        case MySqlParser.TEMPTABLE:
	        case MySqlParser.THAN:
	        case MySqlParser.TRADITIONAL:
	        case MySqlParser.TRANSACTION:
	        case MySqlParser.TRANSACTIONAL:
	        case MySqlParser.TRIGGERS:
	        case MySqlParser.TRUNCATE:
	        case MySqlParser.UNDEFINED:
	        case MySqlParser.UNDOFILE:
	        case MySqlParser.UNDO_BUFFER_SIZE:
	        case MySqlParser.UNINSTALL:
	        case MySqlParser.UNKNOWN:
	        case MySqlParser.UNTIL:
	        case MySqlParser.UPGRADE:
	        case MySqlParser.USER:
	        case MySqlParser.USE_FRM:
	        case MySqlParser.USER_RESOURCES:
	        case MySqlParser.VALIDATION:
	        case MySqlParser.VALUE:
	        case MySqlParser.VARIABLES:
	        case MySqlParser.VIEW:
	        case MySqlParser.VISIBLE:
	        case MySqlParser.WAIT:
	        case MySqlParser.WARNINGS:
	        case MySqlParser.WITHOUT:
	        case MySqlParser.WORK:
	        case MySqlParser.WRAPPER:
	        case MySqlParser.X509:
	        case MySqlParser.XA:
	        case MySqlParser.XML:
	        case MySqlParser.INTERNAL:
	        case MySqlParser.QUARTER:
	        case MySqlParser.MONTH:
	        case MySqlParser.DAY:
	        case MySqlParser.HOUR:
	        case MySqlParser.MINUTE:
	        case MySqlParser.WEEK:
	        case MySqlParser.SECOND:
	        case MySqlParser.MICROSECOND:
	        case MySqlParser.TABLES:
	        case MySqlParser.ROUTINE:
	        case MySqlParser.EXECUTE:
	        case MySqlParser.FILE:
	        case MySqlParser.PROCESS:
	        case MySqlParser.RELOAD:
	        case MySqlParser.SHUTDOWN:
	        case MySqlParser.SUPER:
	        case MySqlParser.PRIVILEGES:
	        case MySqlParser.AUDIT_ADMIN:
	        case MySqlParser.BACKUP_ADMIN:
	        case MySqlParser.BINLOG_ADMIN:
	        case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
	        case MySqlParser.CLONE_ADMIN:
	        case MySqlParser.CONNECTION_ADMIN:
	        case MySqlParser.ENCRYPTION_KEY_ADMIN:
	        case MySqlParser.FIREWALL_ADMIN:
	        case MySqlParser.FIREWALL_USER:
	        case MySqlParser.GROUP_REPLICATION_ADMIN:
	        case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
	        case MySqlParser.NDB_STORED_USER:
	        case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
	        case MySqlParser.REPLICATION_APPLIER:
	        case MySqlParser.REPLICATION_SLAVE_ADMIN:
	        case MySqlParser.RESOURCE_GROUP_ADMIN:
	        case MySqlParser.RESOURCE_GROUP_USER:
	        case MySqlParser.ROLE_ADMIN:
	        case MySqlParser.SESSION_VARIABLES_ADMIN:
	        case MySqlParser.SET_USER_ID:
	        case MySqlParser.SHOW_ROUTINE:
	        case MySqlParser.SYSTEM_VARIABLES_ADMIN:
	        case MySqlParser.TABLE_ENCRYPTION_ADMIN:
	        case MySqlParser.VERSION_TOKEN_ADMIN:
	        case MySqlParser.XA_RECOVER_ADMIN:
	        case MySqlParser.ARMSCII8:
	        case MySqlParser.ASCII:
	        case MySqlParser.BIG5:
	        case MySqlParser.CP1250:
	        case MySqlParser.CP1251:
	        case MySqlParser.CP1256:
	        case MySqlParser.CP1257:
	        case MySqlParser.CP850:
	        case MySqlParser.CP852:
	        case MySqlParser.CP866:
	        case MySqlParser.CP932:
	        case MySqlParser.DEC8:
	        case MySqlParser.EUCJPMS:
	        case MySqlParser.EUCKR:
	        case MySqlParser.GB2312:
	        case MySqlParser.GBK:
	        case MySqlParser.GEOSTD8:
	        case MySqlParser.GREEK:
	        case MySqlParser.HEBREW:
	        case MySqlParser.HP8:
	        case MySqlParser.KEYBCS2:
	        case MySqlParser.KOI8R:
	        case MySqlParser.KOI8U:
	        case MySqlParser.LATIN1:
	        case MySqlParser.LATIN2:
	        case MySqlParser.LATIN5:
	        case MySqlParser.LATIN7:
	        case MySqlParser.MACCE:
	        case MySqlParser.MACROMAN:
	        case MySqlParser.SJIS:
	        case MySqlParser.SWE7:
	        case MySqlParser.TIS620:
	        case MySqlParser.UCS2:
	        case MySqlParser.UJIS:
	        case MySqlParser.UTF16:
	        case MySqlParser.UTF16LE:
	        case MySqlParser.UTF32:
	        case MySqlParser.UTF8:
	        case MySqlParser.UTF8MB3:
	        case MySqlParser.UTF8MB4:
	        case MySqlParser.ARCHIVE:
	        case MySqlParser.BLACKHOLE:
	        case MySqlParser.CSV:
	        case MySqlParser.FEDERATED:
	        case MySqlParser.INNODB:
	        case MySqlParser.MEMORY:
	        case MySqlParser.MRG_MYISAM:
	        case MySqlParser.MYISAM:
	        case MySqlParser.NDB:
	        case MySqlParser.NDBCLUSTER:
	        case MySqlParser.PERFORMANCE_SCHEMA:
	        case MySqlParser.TOKUDB:
	        case MySqlParser.REPEATABLE:
	        case MySqlParser.COMMITTED:
	        case MySqlParser.UNCOMMITTED:
	        case MySqlParser.SERIALIZABLE:
	        case MySqlParser.GEOMETRYCOLLECTION:
	        case MySqlParser.LINESTRING:
	        case MySqlParser.MULTILINESTRING:
	        case MySqlParser.MULTIPOINT:
	        case MySqlParser.MULTIPOLYGON:
	        case MySqlParser.POINT:
	        case MySqlParser.POLYGON:
	        case MySqlParser.ABS:
	        case MySqlParser.ACOS:
	        case MySqlParser.ADDDATE:
	        case MySqlParser.ADDTIME:
	        case MySqlParser.AES_DECRYPT:
	        case MySqlParser.AES_ENCRYPT:
	        case MySqlParser.AREA:
	        case MySqlParser.ASBINARY:
	        case MySqlParser.ASIN:
	        case MySqlParser.ASTEXT:
	        case MySqlParser.ASWKB:
	        case MySqlParser.ASWKT:
	        case MySqlParser.ASYMMETRIC_DECRYPT:
	        case MySqlParser.ASYMMETRIC_DERIVE:
	        case MySqlParser.ASYMMETRIC_ENCRYPT:
	        case MySqlParser.ASYMMETRIC_SIGN:
	        case MySqlParser.ASYMMETRIC_VERIFY:
	        case MySqlParser.ATAN:
	        case MySqlParser.ATAN2:
	        case MySqlParser.BENCHMARK:
	        case MySqlParser.BIN:
	        case MySqlParser.BIT_COUNT:
	        case MySqlParser.BIT_LENGTH:
	        case MySqlParser.BUFFER:
	        case MySqlParser.CATALOG_NAME:
	        case MySqlParser.CEIL:
	        case MySqlParser.CEILING:
	        case MySqlParser.CENTROID:
	        case MySqlParser.CHARACTER_LENGTH:
	        case MySqlParser.CHARSET:
	        case MySqlParser.CHAR_LENGTH:
	        case MySqlParser.COERCIBILITY:
	        case MySqlParser.COLLATION:
	        case MySqlParser.COMPRESS:
	        case MySqlParser.CONCAT:
	        case MySqlParser.CONCAT_WS:
	        case MySqlParser.CONNECTION_ID:
	        case MySqlParser.CONV:
	        case MySqlParser.CONVERT_TZ:
	        case MySqlParser.COS:
	        case MySqlParser.COT:
	        case MySqlParser.CRC32:
	        case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
	        case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
	        case MySqlParser.CREATE_DH_PARAMETERS:
	        case MySqlParser.CREATE_DIGEST:
	        case MySqlParser.CROSSES:
	        case MySqlParser.DATEDIFF:
	        case MySqlParser.DATE_FORMAT:
	        case MySqlParser.DAYNAME:
	        case MySqlParser.DAYOFMONTH:
	        case MySqlParser.DAYOFWEEK:
	        case MySqlParser.DAYOFYEAR:
	        case MySqlParser.DECODE:
	        case MySqlParser.DEGREES:
	        case MySqlParser.DES_DECRYPT:
	        case MySqlParser.DES_ENCRYPT:
	        case MySqlParser.DIMENSION:
	        case MySqlParser.DISJOINT:
	        case MySqlParser.ELT:
	        case MySqlParser.ENCODE:
	        case MySqlParser.ENCRYPT:
	        case MySqlParser.ENDPOINT:
	        case MySqlParser.ENVELOPE:
	        case MySqlParser.EQUALS:
	        case MySqlParser.EXP:
	        case MySqlParser.EXPORT_SET:
	        case MySqlParser.EXTERIORRING:
	        case MySqlParser.EXTRACTVALUE:
	        case MySqlParser.FIELD:
	        case MySqlParser.FIND_IN_SET:
	        case MySqlParser.FLOOR:
	        case MySqlParser.FORMAT:
	        case MySqlParser.FOUND_ROWS:
	        case MySqlParser.FROM_BASE64:
	        case MySqlParser.FROM_DAYS:
	        case MySqlParser.FROM_UNIXTIME:
	        case MySqlParser.GEOMCOLLFROMTEXT:
	        case MySqlParser.GEOMCOLLFROMWKB:
	        case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
	        case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
	        case MySqlParser.GEOMETRYFROMTEXT:
	        case MySqlParser.GEOMETRYFROMWKB:
	        case MySqlParser.GEOMETRYN:
	        case MySqlParser.GEOMETRYTYPE:
	        case MySqlParser.GEOMFROMTEXT:
	        case MySqlParser.GEOMFROMWKB:
	        case MySqlParser.GET_FORMAT:
	        case MySqlParser.GET_LOCK:
	        case MySqlParser.GLENGTH:
	        case MySqlParser.GREATEST:
	        case MySqlParser.GTID_SUBSET:
	        case MySqlParser.GTID_SUBTRACT:
	        case MySqlParser.HEX:
	        case MySqlParser.IFNULL:
	        case MySqlParser.INET6_ATON:
	        case MySqlParser.INET6_NTOA:
	        case MySqlParser.INET_ATON:
	        case MySqlParser.INET_NTOA:
	        case MySqlParser.INSTR:
	        case MySqlParser.INTERIORRINGN:
	        case MySqlParser.INTERSECTS:
	        case MySqlParser.ISCLOSED:
	        case MySqlParser.ISEMPTY:
	        case MySqlParser.ISNULL:
	        case MySqlParser.ISSIMPLE:
	        case MySqlParser.IS_FREE_LOCK:
	        case MySqlParser.IS_IPV4:
	        case MySqlParser.IS_IPV4_COMPAT:
	        case MySqlParser.IS_IPV4_MAPPED:
	        case MySqlParser.IS_IPV6:
	        case MySqlParser.IS_USED_LOCK:
	        case MySqlParser.LAST_INSERT_ID:
	        case MySqlParser.LCASE:
	        case MySqlParser.LEAST:
	        case MySqlParser.LENGTH:
	        case MySqlParser.LINEFROMTEXT:
	        case MySqlParser.LINEFROMWKB:
	        case MySqlParser.LINESTRINGFROMTEXT:
	        case MySqlParser.LINESTRINGFROMWKB:
	        case MySqlParser.LN:
	        case MySqlParser.LOAD_FILE:
	        case MySqlParser.LOCATE:
	        case MySqlParser.LOG:
	        case MySqlParser.LOG10:
	        case MySqlParser.LOG2:
	        case MySqlParser.LOWER:
	        case MySqlParser.LPAD:
	        case MySqlParser.LTRIM:
	        case MySqlParser.MAKEDATE:
	        case MySqlParser.MAKETIME:
	        case MySqlParser.MAKE_SET:
	        case MySqlParser.MASTER_POS_WAIT:
	        case MySqlParser.MBRCONTAINS:
	        case MySqlParser.MBRDISJOINT:
	        case MySqlParser.MBREQUAL:
	        case MySqlParser.MBRINTERSECTS:
	        case MySqlParser.MBROVERLAPS:
	        case MySqlParser.MBRTOUCHES:
	        case MySqlParser.MBRWITHIN:
	        case MySqlParser.MD5:
	        case MySqlParser.MLINEFROMTEXT:
	        case MySqlParser.MLINEFROMWKB:
	        case MySqlParser.MONTHNAME:
	        case MySqlParser.MPOINTFROMTEXT:
	        case MySqlParser.MPOINTFROMWKB:
	        case MySqlParser.MPOLYFROMTEXT:
	        case MySqlParser.MPOLYFROMWKB:
	        case MySqlParser.MULTILINESTRINGFROMTEXT:
	        case MySqlParser.MULTILINESTRINGFROMWKB:
	        case MySqlParser.MULTIPOINTFROMTEXT:
	        case MySqlParser.MULTIPOINTFROMWKB:
	        case MySqlParser.MULTIPOLYGONFROMTEXT:
	        case MySqlParser.MULTIPOLYGONFROMWKB:
	        case MySqlParser.NAME_CONST:
	        case MySqlParser.NULLIF:
	        case MySqlParser.NUMGEOMETRIES:
	        case MySqlParser.NUMINTERIORRINGS:
	        case MySqlParser.NUMPOINTS:
	        case MySqlParser.OCT:
	        case MySqlParser.OCTET_LENGTH:
	        case MySqlParser.ORD:
	        case MySqlParser.OVERLAPS:
	        case MySqlParser.PERIOD_ADD:
	        case MySqlParser.PERIOD_DIFF:
	        case MySqlParser.PI:
	        case MySqlParser.POINTFROMTEXT:
	        case MySqlParser.POINTFROMWKB:
	        case MySqlParser.POINTN:
	        case MySqlParser.POLYFROMTEXT:
	        case MySqlParser.POLYFROMWKB:
	        case MySqlParser.POLYGONFROMTEXT:
	        case MySqlParser.POLYGONFROMWKB:
	        case MySqlParser.POW:
	        case MySqlParser.POWER:
	        case MySqlParser.QUOTE:
	        case MySqlParser.RADIANS:
	        case MySqlParser.RAND:
	        case MySqlParser.RANDOM_BYTES:
	        case MySqlParser.RELEASE_LOCK:
	        case MySqlParser.REVERSE:
	        case MySqlParser.ROUND:
	        case MySqlParser.ROW_COUNT:
	        case MySqlParser.RPAD:
	        case MySqlParser.RTRIM:
	        case MySqlParser.SEC_TO_TIME:
	        case MySqlParser.SESSION_USER:
	        case MySqlParser.SHA:
	        case MySqlParser.SHA1:
	        case MySqlParser.SHA2:
	        case MySqlParser.SCHEMA_NAME:
	        case MySqlParser.SIGN:
	        case MySqlParser.SIN:
	        case MySqlParser.SLEEP:
	        case MySqlParser.SOUNDEX:
	        case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
	        case MySqlParser.SQRT:
	        case MySqlParser.SRID:
	        case MySqlParser.STARTPOINT:
	        case MySqlParser.STRCMP:
	        case MySqlParser.STR_TO_DATE:
	        case MySqlParser.ST_AREA:
	        case MySqlParser.ST_ASBINARY:
	        case MySqlParser.ST_ASTEXT:
	        case MySqlParser.ST_ASWKB:
	        case MySqlParser.ST_ASWKT:
	        case MySqlParser.ST_BUFFER:
	        case MySqlParser.ST_CENTROID:
	        case MySqlParser.ST_CONTAINS:
	        case MySqlParser.ST_CROSSES:
	        case MySqlParser.ST_DIFFERENCE:
	        case MySqlParser.ST_DIMENSION:
	        case MySqlParser.ST_DISJOINT:
	        case MySqlParser.ST_DISTANCE:
	        case MySqlParser.ST_ENDPOINT:
	        case MySqlParser.ST_ENVELOPE:
	        case MySqlParser.ST_EQUALS:
	        case MySqlParser.ST_EXTERIORRING:
	        case MySqlParser.ST_GEOMCOLLFROMTEXT:
	        case MySqlParser.ST_GEOMCOLLFROMTXT:
	        case MySqlParser.ST_GEOMCOLLFROMWKB:
	        case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
	        case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
	        case MySqlParser.ST_GEOMETRYFROMTEXT:
	        case MySqlParser.ST_GEOMETRYFROMWKB:
	        case MySqlParser.ST_GEOMETRYN:
	        case MySqlParser.ST_GEOMETRYTYPE:
	        case MySqlParser.ST_GEOMFROMTEXT:
	        case MySqlParser.ST_GEOMFROMWKB:
	        case MySqlParser.ST_INTERIORRINGN:
	        case MySqlParser.ST_INTERSECTION:
	        case MySqlParser.ST_INTERSECTS:
	        case MySqlParser.ST_ISCLOSED:
	        case MySqlParser.ST_ISEMPTY:
	        case MySqlParser.ST_ISSIMPLE:
	        case MySqlParser.ST_LINEFROMTEXT:
	        case MySqlParser.ST_LINEFROMWKB:
	        case MySqlParser.ST_LINESTRINGFROMTEXT:
	        case MySqlParser.ST_LINESTRINGFROMWKB:
	        case MySqlParser.ST_NUMGEOMETRIES:
	        case MySqlParser.ST_NUMINTERIORRING:
	        case MySqlParser.ST_NUMINTERIORRINGS:
	        case MySqlParser.ST_NUMPOINTS:
	        case MySqlParser.ST_OVERLAPS:
	        case MySqlParser.ST_POINTFROMTEXT:
	        case MySqlParser.ST_POINTFROMWKB:
	        case MySqlParser.ST_POINTN:
	        case MySqlParser.ST_POLYFROMTEXT:
	        case MySqlParser.ST_POLYFROMWKB:
	        case MySqlParser.ST_POLYGONFROMTEXT:
	        case MySqlParser.ST_POLYGONFROMWKB:
	        case MySqlParser.ST_SRID:
	        case MySqlParser.ST_STARTPOINT:
	        case MySqlParser.ST_SYMDIFFERENCE:
	        case MySqlParser.ST_TOUCHES:
	        case MySqlParser.ST_UNION:
	        case MySqlParser.ST_WITHIN:
	        case MySqlParser.ST_X:
	        case MySqlParser.ST_Y:
	        case MySqlParser.SUBDATE:
	        case MySqlParser.SUBSTRING_INDEX:
	        case MySqlParser.SUBTIME:
	        case MySqlParser.SYSTEM_USER:
	        case MySqlParser.TAN:
	        case MySqlParser.TIMEDIFF:
	        case MySqlParser.TIMESTAMPADD:
	        case MySqlParser.TIMESTAMPDIFF:
	        case MySqlParser.TIME_FORMAT:
	        case MySqlParser.TIME_TO_SEC:
	        case MySqlParser.TOUCHES:
	        case MySqlParser.TO_BASE64:
	        case MySqlParser.TO_DAYS:
	        case MySqlParser.TO_SECONDS:
	        case MySqlParser.UCASE:
	        case MySqlParser.UNCOMPRESS:
	        case MySqlParser.UNCOMPRESSED_LENGTH:
	        case MySqlParser.UNHEX:
	        case MySqlParser.UNIX_TIMESTAMP:
	        case MySqlParser.UPDATEXML:
	        case MySqlParser.UPPER:
	        case MySqlParser.UUID:
	        case MySqlParser.UUID_SHORT:
	        case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
	        case MySqlParser.VERSION:
	        case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
	        case MySqlParser.WEEKDAY:
	        case MySqlParser.WEEKOFYEAR:
	        case MySqlParser.WEIGHT_STRING:
	        case MySqlParser.WITHIN:
	        case MySqlParser.YEARWEEK:
	        case MySqlParser.Y_FUNCTION:
	        case MySqlParser.X_FUNCTION:
	        case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
	        case MySqlParser.STRING_LITERAL:
	        case MySqlParser.ID:
	        case MySqlParser.REVERSE_QUOTE_ID:
	            localctx = new ColumnDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1408;
	            this.uid();
	            this.state = 1409;
	            this.columnDefinition();
	            break;
	        case MySqlParser.CHECK:
	        case MySqlParser.CONSTRAINT:
	        case MySqlParser.FOREIGN:
	        case MySqlParser.PRIMARY:
	        case MySqlParser.UNIQUE:
	            localctx = new ConstraintDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1411;
	            this.tableConstraint();
	            break;
	        case MySqlParser.FULLTEXT:
	        case MySqlParser.INDEX:
	        case MySqlParser.KEY:
	        case MySqlParser.SPATIAL:
	            localctx = new IndexDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1412;
	            this.indexColumnDefinition();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnDefinition() {
	    let localctx = new ColumnDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, MySqlParser.RULE_columnDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1415;
	        this.dataType();
	        this.state = 1419;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,130,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1416;
	                this.columnConstraint(); 
	            }
	            this.state = 1421;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,130,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnConstraint() {
	    let localctx = new ColumnConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, MySqlParser.RULE_columnConstraint);
	    var _la = 0; // Token type
	    try {
	        this.state = 1473;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.NOT:
	        case MySqlParser.NULL_LITERAL:
	        case MySqlParser.NULL_SPEC_LITERAL:
	            localctx = new NullColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1422;
	            this.nullNotnull();
	            break;
	        case MySqlParser.DEFAULT:
	            localctx = new DefaultColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1423;
	            this.match(MySqlParser.DEFAULT);
	            this.state = 1424;
	            this.defaultValue();
	            break;
	        case MySqlParser.ON:
	        case MySqlParser.AUTO_INCREMENT:
	            localctx = new AutoIncrementColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1429;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.AUTO_INCREMENT:
	                this.state = 1425;
	                this.match(MySqlParser.AUTO_INCREMENT);
	                break;
	            case MySqlParser.ON:
	                this.state = 1426;
	                this.match(MySqlParser.ON);
	                this.state = 1427;
	                this.match(MySqlParser.UPDATE);
	                this.state = 1428;
	                this.currentTimestamp();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case MySqlParser.KEY:
	        case MySqlParser.PRIMARY:
	            localctx = new PrimaryKeyColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1432;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.PRIMARY) {
	                this.state = 1431;
	                this.match(MySqlParser.PRIMARY);
	            }

	            this.state = 1434;
	            this.match(MySqlParser.KEY);
	            break;
	        case MySqlParser.UNIQUE:
	            localctx = new UniqueKeyColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1435;
	            this.match(MySqlParser.UNIQUE);
	            this.state = 1437;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,133,this._ctx);
	            if(la_===1) {
	                this.state = 1436;
	                this.match(MySqlParser.KEY);

	            }
	            break;
	        case MySqlParser.COMMENT:
	            localctx = new CommentColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1439;
	            this.match(MySqlParser.COMMENT);
	            this.state = 1440;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.COLUMN_FORMAT:
	            localctx = new FormatColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1441;
	            this.match(MySqlParser.COLUMN_FORMAT);
	            this.state = 1442;
	            localctx.colformat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DEFAULT || _la===MySqlParser.DYNAMIC || _la===MySqlParser.FIXED)) {
	                localctx.colformat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case MySqlParser.STORAGE:
	            localctx = new StorageColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1443;
	            this.match(MySqlParser.STORAGE);
	            this.state = 1444;
	            localctx.storageval = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DEFAULT || _la===MySqlParser.DISK || _la===MySqlParser.MEMORY)) {
	                localctx.storageval = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case MySqlParser.REFERENCES:
	            localctx = new ReferenceColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1445;
	            this.referenceDefinition();
	            break;
	        case MySqlParser.COLLATE:
	            localctx = new CollateColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1446;
	            this.match(MySqlParser.COLLATE);
	            this.state = 1447;
	            this.collationName();
	            break;
	        case MySqlParser.AS:
	        case MySqlParser.GENERATED:
	            localctx = new GeneratedColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1450;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.GENERATED) {
	                this.state = 1448;
	                this.match(MySqlParser.GENERATED);
	                this.state = 1449;
	                this.match(MySqlParser.ALWAYS);
	            }

	            this.state = 1452;
	            this.match(MySqlParser.AS);
	            this.state = 1453;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 1454;
	            this.expression(0);
	            this.state = 1455;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 1457;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.STORED || _la===MySqlParser.VIRTUAL) {
	                this.state = 1456;
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.STORED || _la===MySqlParser.VIRTUAL)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;
	        case MySqlParser.SERIAL:
	            localctx = new SerialDefaultColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1459;
	            this.match(MySqlParser.SERIAL);
	            this.state = 1460;
	            this.match(MySqlParser.DEFAULT);
	            this.state = 1461;
	            this.match(MySqlParser.VALUE);
	            break;
	        case MySqlParser.CHECK:
	        case MySqlParser.CONSTRAINT:
	            localctx = new CheckColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1466;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.CONSTRAINT) {
	                this.state = 1462;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 1464;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySqlParser.CURRENT - 32)) | (1 << (MySqlParser.DATABASE - 32)) | (1 << (MySqlParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySqlParser.LEFT || _la===MySqlParser.NUMBER || _la===MySqlParser.RIGHT || _la===MySqlParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.TIMESTAMP - 199)) | (1 << (MySqlParser.DATETIME - 199)) | (1 << (MySqlParser.YEAR - 199)) | (1 << (MySqlParser.TEXT - 199)) | (1 << (MySqlParser.ENUM - 199)) | (1 << (MySqlParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.JSON_VALID - 233)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySqlParser.AVG - 233)) | (1 << (MySqlParser.BIT_AND - 233)) | (1 << (MySqlParser.BIT_OR - 233)) | (1 << (MySqlParser.BIT_XOR - 233)) | (1 << (MySqlParser.COUNT - 233)) | (1 << (MySqlParser.GROUP_CONCAT - 233)) | (1 << (MySqlParser.MAX - 233)) | (1 << (MySqlParser.MIN - 233)) | (1 << (MySqlParser.STD - 233)) | (1 << (MySqlParser.STDDEV - 233)) | (1 << (MySqlParser.STDDEV_POP - 233)) | (1 << (MySqlParser.STDDEV_SAMP - 233)) | (1 << (MySqlParser.SUM - 233)) | (1 << (MySqlParser.VAR_POP - 233)) | (1 << (MySqlParser.VAR_SAMP - 233)) | (1 << (MySqlParser.VARIANCE - 233)) | (1 << (MySqlParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySqlParser.ACCOUNT - 270)) | (1 << (MySqlParser.ACTION - 270)) | (1 << (MySqlParser.AFTER - 270)) | (1 << (MySqlParser.AGGREGATE - 270)) | (1 << (MySqlParser.ALGORITHM - 270)) | (1 << (MySqlParser.ANY - 270)) | (1 << (MySqlParser.AT - 270)) | (1 << (MySqlParser.AUTHORS - 270)) | (1 << (MySqlParser.AUTOCOMMIT - 270)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySqlParser.AUTO_INCREMENT - 270)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 270)) | (1 << (MySqlParser.BEGIN - 270)) | (1 << (MySqlParser.BINLOG - 270)) | (1 << (MySqlParser.BIT - 270)) | (1 << (MySqlParser.BLOCK - 270)) | (1 << (MySqlParser.BOOL - 270)) | (1 << (MySqlParser.BOOLEAN - 270)) | (1 << (MySqlParser.BTREE - 270)) | (1 << (MySqlParser.CACHE - 270)) | (1 << (MySqlParser.CASCADED - 270)) | (1 << (MySqlParser.CHAIN - 270)) | (1 << (MySqlParser.CHANGED - 270)) | (1 << (MySqlParser.CHANNEL - 270)) | (1 << (MySqlParser.CHECKSUM - 270)) | (1 << (MySqlParser.PAGE_CHECKSUM - 270)) | (1 << (MySqlParser.CIPHER - 270)) | (1 << (MySqlParser.CLASS_ORIGIN - 270)) | (1 << (MySqlParser.CLIENT - 270)) | (1 << (MySqlParser.CLOSE - 270)) | (1 << (MySqlParser.COALESCE - 270)) | (1 << (MySqlParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySqlParser.COLUMNS - 302)) | (1 << (MySqlParser.COLUMN_FORMAT - 302)) | (1 << (MySqlParser.COLUMN_NAME - 302)) | (1 << (MySqlParser.COMMENT - 302)) | (1 << (MySqlParser.COMMIT - 302)) | (1 << (MySqlParser.COMPACT - 302)) | (1 << (MySqlParser.COMPLETION - 302)) | (1 << (MySqlParser.COMPRESSED - 302)) | (1 << (MySqlParser.COMPRESSION - 302)) | (1 << (MySqlParser.CONCURRENT - 302)) | (1 << (MySqlParser.CONNECTION - 302)) | (1 << (MySqlParser.CONSISTENT - 302)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySqlParser.CONSTRAINT_NAME - 302)) | (1 << (MySqlParser.CONTAINS - 302)) | (1 << (MySqlParser.CONTEXT - 302)) | (1 << (MySqlParser.CONTRIBUTORS - 302)) | (1 << (MySqlParser.COPY - 302)) | (1 << (MySqlParser.CPU - 302)) | (1 << (MySqlParser.CURSOR_NAME - 302)) | (1 << (MySqlParser.DATA - 302)) | (1 << (MySqlParser.DATAFILE - 302)) | (1 << (MySqlParser.DEALLOCATE - 302)) | (1 << (MySqlParser.DEFAULT_AUTH - 302)) | (1 << (MySqlParser.DEFINER - 302)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 302)) | (1 << (MySqlParser.DES_KEY_FILE - 302)) | (1 << (MySqlParser.DIRECTORY - 302)) | (1 << (MySqlParser.DISABLE - 302)) | (1 << (MySqlParser.DISCARD - 302)) | (1 << (MySqlParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySqlParser.DO - 334)) | (1 << (MySqlParser.DUMPFILE - 334)) | (1 << (MySqlParser.DUPLICATE - 334)) | (1 << (MySqlParser.DYNAMIC - 334)) | (1 << (MySqlParser.ENABLE - 334)) | (1 << (MySqlParser.ENCRYPTION - 334)) | (1 << (MySqlParser.END - 334)) | (1 << (MySqlParser.ENDS - 334)) | (1 << (MySqlParser.ENGINE - 334)) | (1 << (MySqlParser.ENGINES - 334)) | (1 << (MySqlParser.ERROR - 334)) | (1 << (MySqlParser.ERRORS - 334)) | (1 << (MySqlParser.ESCAPE - 334)) | (1 << (MySqlParser.EVEN - 334)) | (1 << (MySqlParser.EVENT - 334)) | (1 << (MySqlParser.EVENTS - 334)) | (1 << (MySqlParser.EVERY - 334)) | (1 << (MySqlParser.EXCHANGE - 334)) | (1 << (MySqlParser.EXCLUSIVE - 334)) | (1 << (MySqlParser.EXPIRE - 334)) | (1 << (MySqlParser.EXPORT - 334)) | (1 << (MySqlParser.EXTENDED - 334)) | (1 << (MySqlParser.EXTENT_SIZE - 334)) | (1 << (MySqlParser.FAST - 334)) | (1 << (MySqlParser.FAULTS - 334)) | (1 << (MySqlParser.FIELDS - 334)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySqlParser.FILTER - 334)) | (1 << (MySqlParser.FIRST - 334)) | (1 << (MySqlParser.FIXED - 334)) | (1 << (MySqlParser.FLUSH - 334)) | (1 << (MySqlParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySqlParser.FOUND - 366)) | (1 << (MySqlParser.FULL - 366)) | (1 << (MySqlParser.FUNCTION - 366)) | (1 << (MySqlParser.GENERAL - 366)) | (1 << (MySqlParser.GLOBAL - 366)) | (1 << (MySqlParser.GRANTS - 366)) | (1 << (MySqlParser.GROUP_REPLICATION - 366)) | (1 << (MySqlParser.HANDLER - 366)) | (1 << (MySqlParser.HASH - 366)) | (1 << (MySqlParser.HELP - 366)) | (1 << (MySqlParser.HOST - 366)) | (1 << (MySqlParser.HOSTS - 366)) | (1 << (MySqlParser.IDENTIFIED - 366)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySqlParser.IMPORT - 366)) | (1 << (MySqlParser.INDEXES - 366)) | (1 << (MySqlParser.INITIAL_SIZE - 366)) | (1 << (MySqlParser.INPLACE - 366)) | (1 << (MySqlParser.INSERT_METHOD - 366)) | (1 << (MySqlParser.INSTALL - 366)) | (1 << (MySqlParser.INSTANCE - 366)) | (1 << (MySqlParser.INVISIBLE - 366)) | (1 << (MySqlParser.INVOKER - 366)) | (1 << (MySqlParser.IO - 366)) | (1 << (MySqlParser.IO_THREAD - 366)) | (1 << (MySqlParser.IPC - 366)) | (1 << (MySqlParser.ISOLATION - 366)) | (1 << (MySqlParser.ISSUER - 366)) | (1 << (MySqlParser.JSON - 366)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySqlParser.LANGUAGE - 366)) | (1 << (MySqlParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.LEAVES - 398)) | (1 << (MySqlParser.LESS - 398)) | (1 << (MySqlParser.LEVEL - 398)) | (1 << (MySqlParser.LIST - 398)) | (1 << (MySqlParser.LOCAL - 398)) | (1 << (MySqlParser.LOGFILE - 398)) | (1 << (MySqlParser.LOGS - 398)) | (1 << (MySqlParser.MASTER - 398)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySqlParser.MASTER_DELAY - 398)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySqlParser.MASTER_HOST - 398)) | (1 << (MySqlParser.MASTER_LOG_FILE - 398)) | (1 << (MySqlParser.MASTER_LOG_POS - 398)) | (1 << (MySqlParser.MASTER_PASSWORD - 398)) | (1 << (MySqlParser.MASTER_PORT - 398)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySqlParser.MASTER_SSL - 398)) | (1 << (MySqlParser.MASTER_SSL_CA - 398)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_CERT - 398)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySqlParser.MASTER_SSL_CRL - 398)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_KEY - 398)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 398)) | (1 << (MySqlParser.MASTER_USER - 398)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySqlParser.MEDIUM - 430)) | (1 << (MySqlParser.MEMBER - 430)) | (1 << (MySqlParser.MERGE - 430)) | (1 << (MySqlParser.MESSAGE_TEXT - 430)) | (1 << (MySqlParser.MID - 430)) | (1 << (MySqlParser.MIGRATE - 430)) | (1 << (MySqlParser.MIN_ROWS - 430)) | (1 << (MySqlParser.MODE - 430)) | (1 << (MySqlParser.MODIFY - 430)) | (1 << (MySqlParser.MUTEX - 430)) | (1 << (MySqlParser.MYSQL - 430)) | (1 << (MySqlParser.MYSQL_ERRNO - 430)) | (1 << (MySqlParser.NAME - 430)) | (1 << (MySqlParser.NAMES - 430)) | (1 << (MySqlParser.NCHAR - 430)) | (1 << (MySqlParser.NEVER - 430)) | (1 << (MySqlParser.NEXT - 430)) | (1 << (MySqlParser.NO - 430)) | (1 << (MySqlParser.NODEGROUP - 430)) | (1 << (MySqlParser.NONE - 430)) | (1 << (MySqlParser.OFFLINE - 430)) | (1 << (MySqlParser.OFFSET - 430)) | (1 << (MySqlParser.OF - 430)) | (1 << (MySqlParser.OJ - 430)) | (1 << (MySqlParser.OLD_PASSWORD - 430)) | (1 << (MySqlParser.ONE - 430)) | (1 << (MySqlParser.ONLINE - 430)) | (1 << (MySqlParser.ONLY - 430)) | (1 << (MySqlParser.OPEN - 430)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySqlParser.OPTIONS - 462)) | (1 << (MySqlParser.OWNER - 462)) | (1 << (MySqlParser.PACK_KEYS - 462)) | (1 << (MySqlParser.PAGE - 462)) | (1 << (MySqlParser.PARSER - 462)) | (1 << (MySqlParser.PARTIAL - 462)) | (1 << (MySqlParser.PARTITIONING - 462)) | (1 << (MySqlParser.PARTITIONS - 462)) | (1 << (MySqlParser.PASSWORD - 462)) | (1 << (MySqlParser.PHASE - 462)) | (1 << (MySqlParser.PLUGIN - 462)) | (1 << (MySqlParser.PLUGIN_DIR - 462)) | (1 << (MySqlParser.PLUGINS - 462)) | (1 << (MySqlParser.PORT - 462)) | (1 << (MySqlParser.PRECEDES - 462)) | (1 << (MySqlParser.PREPARE - 462)) | (1 << (MySqlParser.PRESERVE - 462)) | (1 << (MySqlParser.PREV - 462)) | (1 << (MySqlParser.PROCESSLIST - 462)) | (1 << (MySqlParser.PROFILE - 462)) | (1 << (MySqlParser.PROFILES - 462)) | (1 << (MySqlParser.PROXY - 462)) | (1 << (MySqlParser.QUERY - 462)) | (1 << (MySqlParser.QUICK - 462)) | (1 << (MySqlParser.REBUILD - 462)) | (1 << (MySqlParser.RECOVER - 462)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySqlParser.REDUNDANT - 462)) | (1 << (MySqlParser.RELAY - 462)) | (1 << (MySqlParser.RELAY_LOG_FILE - 462)) | (1 << (MySqlParser.RELAY_LOG_POS - 462)) | (1 << (MySqlParser.RELAYLOG - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySqlParser.REMOVE - 494)) | (1 << (MySqlParser.REORGANIZE - 494)) | (1 << (MySqlParser.REPAIR - 494)) | (1 << (MySqlParser.REPLICATE_DO_DB - 494)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATION - 494)) | (1 << (MySqlParser.RESET - 494)) | (1 << (MySqlParser.RESUME - 494)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 494)) | (1 << (MySqlParser.RETURNS - 494)) | (1 << (MySqlParser.ROLE - 494)) | (1 << (MySqlParser.ROLLBACK - 494)) | (1 << (MySqlParser.ROLLUP - 494)) | (1 << (MySqlParser.ROTATE - 494)) | (1 << (MySqlParser.ROW - 494)) | (1 << (MySqlParser.ROWS - 494)) | (1 << (MySqlParser.ROW_FORMAT - 494)) | (1 << (MySqlParser.SAVEPOINT - 494)) | (1 << (MySqlParser.SCHEDULE - 494)) | (1 << (MySqlParser.SECURITY - 494)) | (1 << (MySqlParser.SERVER - 494)) | (1 << (MySqlParser.SESSION - 494)) | (1 << (MySqlParser.SHARE - 494)) | (1 << (MySqlParser.SHARED - 494)) | (1 << (MySqlParser.SIGNED - 494)) | (1 << (MySqlParser.SIMPLE - 494)) | (1 << (MySqlParser.SLAVE - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySqlParser.SLOW - 526)) | (1 << (MySqlParser.SNAPSHOT - 526)) | (1 << (MySqlParser.SOCKET - 526)) | (1 << (MySqlParser.SOME - 526)) | (1 << (MySqlParser.SONAME - 526)) | (1 << (MySqlParser.SOUNDS - 526)) | (1 << (MySqlParser.SOURCE - 526)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySqlParser.SQL_CACHE - 526)) | (1 << (MySqlParser.SQL_NO_CACHE - 526)) | (1 << (MySqlParser.SQL_THREAD - 526)) | (1 << (MySqlParser.START - 526)) | (1 << (MySqlParser.STARTS - 526)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 526)) | (1 << (MySqlParser.STATS_PERSISTENT - 526)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySqlParser.STATUS - 526)) | (1 << (MySqlParser.STOP - 526)) | (1 << (MySqlParser.STORAGE - 526)) | (1 << (MySqlParser.STRING - 526)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySqlParser.SUBJECT - 526)) | (1 << (MySqlParser.SUBPARTITION - 526)) | (1 << (MySqlParser.SUBPARTITIONS - 526)) | (1 << (MySqlParser.SUSPEND - 526)) | (1 << (MySqlParser.SWAPS - 526)) | (1 << (MySqlParser.SWITCHES - 526)) | (1 << (MySqlParser.TABLE_NAME - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySqlParser.TABLESPACE - 558)) | (1 << (MySqlParser.TEMPORARY - 558)) | (1 << (MySqlParser.TEMPTABLE - 558)) | (1 << (MySqlParser.THAN - 558)) | (1 << (MySqlParser.TRADITIONAL - 558)) | (1 << (MySqlParser.TRANSACTION - 558)) | (1 << (MySqlParser.TRANSACTIONAL - 558)) | (1 << (MySqlParser.TRIGGERS - 558)) | (1 << (MySqlParser.TRUNCATE - 558)) | (1 << (MySqlParser.UNDEFINED - 558)) | (1 << (MySqlParser.UNDOFILE - 558)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySqlParser.UNINSTALL - 558)) | (1 << (MySqlParser.UNKNOWN - 558)) | (1 << (MySqlParser.UNTIL - 558)) | (1 << (MySqlParser.UPGRADE - 558)) | (1 << (MySqlParser.USER - 558)) | (1 << (MySqlParser.USE_FRM - 558)) | (1 << (MySqlParser.USER_RESOURCES - 558)) | (1 << (MySqlParser.VALIDATION - 558)) | (1 << (MySqlParser.VALUE - 558)) | (1 << (MySqlParser.VARIABLES - 558)) | (1 << (MySqlParser.VIEW - 558)) | (1 << (MySqlParser.VISIBLE - 558)) | (1 << (MySqlParser.WAIT - 558)) | (1 << (MySqlParser.WARNINGS - 558)) | (1 << (MySqlParser.WITHOUT - 558)) | (1 << (MySqlParser.WORK - 558)) | (1 << (MySqlParser.WRAPPER - 558)) | (1 << (MySqlParser.X509 - 558)) | (1 << (MySqlParser.XA - 558)))) !== 0) || ((((_la - 590)) & ~0x1f) == 0 && ((1 << (_la - 590)) & ((1 << (MySqlParser.XML - 590)) | (1 << (MySqlParser.INTERNAL - 590)) | (1 << (MySqlParser.QUARTER - 590)) | (1 << (MySqlParser.MONTH - 590)) | (1 << (MySqlParser.DAY - 590)) | (1 << (MySqlParser.HOUR - 590)) | (1 << (MySqlParser.MINUTE - 590)) | (1 << (MySqlParser.WEEK - 590)) | (1 << (MySqlParser.SECOND - 590)) | (1 << (MySqlParser.MICROSECOND - 590)) | (1 << (MySqlParser.TABLES - 590)) | (1 << (MySqlParser.ROUTINE - 590)) | (1 << (MySqlParser.EXECUTE - 590)) | (1 << (MySqlParser.FILE - 590)) | (1 << (MySqlParser.PROCESS - 590)) | (1 << (MySqlParser.RELOAD - 590)) | (1 << (MySqlParser.SHUTDOWN - 590)) | (1 << (MySqlParser.SUPER - 590)) | (1 << (MySqlParser.PRIVILEGES - 590)) | (1 << (MySqlParser.AUDIT_ADMIN - 590)) | (1 << (MySqlParser.BACKUP_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 590)) | (1 << (MySqlParser.CLONE_ADMIN - 590)) | (1 << (MySqlParser.CONNECTION_ADMIN - 590)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 590)) | (1 << (MySqlParser.FIREWALL_ADMIN - 590)))) !== 0) || ((((_la - 622)) & ~0x1f) == 0 && ((1 << (_la - 622)) & ((1 << (MySqlParser.FIREWALL_USER - 622)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 622)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 622)) | (1 << (MySqlParser.NDB_STORED_USER - 622)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.REPLICATION_APPLIER - 622)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 622)) | (1 << (MySqlParser.ROLE_ADMIN - 622)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.SET_USER_ID - 622)) | (1 << (MySqlParser.SHOW_ROUTINE - 622)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 622)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 622)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 622)) | (1 << (MySqlParser.ARMSCII8 - 622)) | (1 << (MySqlParser.ASCII - 622)) | (1 << (MySqlParser.BIG5 - 622)) | (1 << (MySqlParser.CP1250 - 622)) | (1 << (MySqlParser.CP1251 - 622)) | (1 << (MySqlParser.CP1256 - 622)) | (1 << (MySqlParser.CP1257 - 622)) | (1 << (MySqlParser.CP850 - 622)) | (1 << (MySqlParser.CP852 - 622)) | (1 << (MySqlParser.CP866 - 622)) | (1 << (MySqlParser.CP932 - 622)) | (1 << (MySqlParser.DEC8 - 622)) | (1 << (MySqlParser.EUCJPMS - 622)) | (1 << (MySqlParser.EUCKR - 622)) | (1 << (MySqlParser.GB2312 - 622)))) !== 0) || ((((_la - 654)) & ~0x1f) == 0 && ((1 << (_la - 654)) & ((1 << (MySqlParser.GBK - 654)) | (1 << (MySqlParser.GEOSTD8 - 654)) | (1 << (MySqlParser.GREEK - 654)) | (1 << (MySqlParser.HEBREW - 654)) | (1 << (MySqlParser.HP8 - 654)) | (1 << (MySqlParser.KEYBCS2 - 654)) | (1 << (MySqlParser.KOI8R - 654)) | (1 << (MySqlParser.KOI8U - 654)) | (1 << (MySqlParser.LATIN1 - 654)) | (1 << (MySqlParser.LATIN2 - 654)) | (1 << (MySqlParser.LATIN5 - 654)) | (1 << (MySqlParser.LATIN7 - 654)) | (1 << (MySqlParser.MACCE - 654)) | (1 << (MySqlParser.MACROMAN - 654)) | (1 << (MySqlParser.SJIS - 654)) | (1 << (MySqlParser.SWE7 - 654)) | (1 << (MySqlParser.TIS620 - 654)) | (1 << (MySqlParser.UCS2 - 654)) | (1 << (MySqlParser.UJIS - 654)) | (1 << (MySqlParser.UTF16 - 654)) | (1 << (MySqlParser.UTF16LE - 654)) | (1 << (MySqlParser.UTF32 - 654)) | (1 << (MySqlParser.UTF8 - 654)) | (1 << (MySqlParser.UTF8MB3 - 654)) | (1 << (MySqlParser.UTF8MB4 - 654)) | (1 << (MySqlParser.ARCHIVE - 654)) | (1 << (MySqlParser.BLACKHOLE - 654)) | (1 << (MySqlParser.CSV - 654)) | (1 << (MySqlParser.FEDERATED - 654)) | (1 << (MySqlParser.INNODB - 654)) | (1 << (MySqlParser.MEMORY - 654)) | (1 << (MySqlParser.MRG_MYISAM - 654)))) !== 0) || ((((_la - 686)) & ~0x1f) == 0 && ((1 << (_la - 686)) & ((1 << (MySqlParser.MYISAM - 686)) | (1 << (MySqlParser.NDB - 686)) | (1 << (MySqlParser.NDBCLUSTER - 686)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 686)) | (1 << (MySqlParser.TOKUDB - 686)) | (1 << (MySqlParser.REPEATABLE - 686)) | (1 << (MySqlParser.COMMITTED - 686)) | (1 << (MySqlParser.UNCOMMITTED - 686)) | (1 << (MySqlParser.SERIALIZABLE - 686)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 686)) | (1 << (MySqlParser.LINESTRING - 686)) | (1 << (MySqlParser.MULTILINESTRING - 686)) | (1 << (MySqlParser.MULTIPOINT - 686)) | (1 << (MySqlParser.MULTIPOLYGON - 686)) | (1 << (MySqlParser.POINT - 686)) | (1 << (MySqlParser.POLYGON - 686)) | (1 << (MySqlParser.ABS - 686)) | (1 << (MySqlParser.ACOS - 686)) | (1 << (MySqlParser.ADDDATE - 686)) | (1 << (MySqlParser.ADDTIME - 686)) | (1 << (MySqlParser.AES_DECRYPT - 686)) | (1 << (MySqlParser.AES_ENCRYPT - 686)) | (1 << (MySqlParser.AREA - 686)) | (1 << (MySqlParser.ASBINARY - 686)) | (1 << (MySqlParser.ASIN - 686)) | (1 << (MySqlParser.ASTEXT - 686)) | (1 << (MySqlParser.ASWKB - 686)) | (1 << (MySqlParser.ASWKT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 686)))) !== 0) || ((((_la - 718)) & ~0x1f) == 0 && ((1 << (_la - 718)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 718)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 718)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 718)) | (1 << (MySqlParser.ATAN - 718)) | (1 << (MySqlParser.ATAN2 - 718)) | (1 << (MySqlParser.BENCHMARK - 718)) | (1 << (MySqlParser.BIN - 718)) | (1 << (MySqlParser.BIT_COUNT - 718)) | (1 << (MySqlParser.BIT_LENGTH - 718)) | (1 << (MySqlParser.BUFFER - 718)) | (1 << (MySqlParser.CATALOG_NAME - 718)) | (1 << (MySqlParser.CEIL - 718)) | (1 << (MySqlParser.CEILING - 718)) | (1 << (MySqlParser.CENTROID - 718)) | (1 << (MySqlParser.CHARACTER_LENGTH - 718)) | (1 << (MySqlParser.CHARSET - 718)) | (1 << (MySqlParser.CHAR_LENGTH - 718)) | (1 << (MySqlParser.COERCIBILITY - 718)) | (1 << (MySqlParser.COLLATION - 718)) | (1 << (MySqlParser.COMPRESS - 718)) | (1 << (MySqlParser.CONCAT - 718)) | (1 << (MySqlParser.CONCAT_WS - 718)) | (1 << (MySqlParser.CONNECTION_ID - 718)) | (1 << (MySqlParser.CONV - 718)) | (1 << (MySqlParser.CONVERT_TZ - 718)) | (1 << (MySqlParser.COS - 718)) | (1 << (MySqlParser.COT - 718)) | (1 << (MySqlParser.CRC32 - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 718)) | (1 << (MySqlParser.CREATE_DIGEST - 718)))) !== 0) || ((((_la - 750)) & ~0x1f) == 0 && ((1 << (_la - 750)) & ((1 << (MySqlParser.CROSSES - 750)) | (1 << (MySqlParser.DATEDIFF - 750)) | (1 << (MySqlParser.DATE_FORMAT - 750)) | (1 << (MySqlParser.DAYNAME - 750)) | (1 << (MySqlParser.DAYOFMONTH - 750)) | (1 << (MySqlParser.DAYOFWEEK - 750)) | (1 << (MySqlParser.DAYOFYEAR - 750)) | (1 << (MySqlParser.DECODE - 750)) | (1 << (MySqlParser.DEGREES - 750)) | (1 << (MySqlParser.DES_DECRYPT - 750)) | (1 << (MySqlParser.DES_ENCRYPT - 750)) | (1 << (MySqlParser.DIMENSION - 750)) | (1 << (MySqlParser.DISJOINT - 750)) | (1 << (MySqlParser.ELT - 750)) | (1 << (MySqlParser.ENCODE - 750)) | (1 << (MySqlParser.ENCRYPT - 750)) | (1 << (MySqlParser.ENDPOINT - 750)) | (1 << (MySqlParser.ENVELOPE - 750)) | (1 << (MySqlParser.EQUALS - 750)) | (1 << (MySqlParser.EXP - 750)) | (1 << (MySqlParser.EXPORT_SET - 750)) | (1 << (MySqlParser.EXTERIORRING - 750)) | (1 << (MySqlParser.EXTRACTVALUE - 750)) | (1 << (MySqlParser.FIELD - 750)) | (1 << (MySqlParser.FIND_IN_SET - 750)) | (1 << (MySqlParser.FLOOR - 750)) | (1 << (MySqlParser.FORMAT - 750)) | (1 << (MySqlParser.FOUND_ROWS - 750)) | (1 << (MySqlParser.FROM_BASE64 - 750)) | (1 << (MySqlParser.FROM_DAYS - 750)) | (1 << (MySqlParser.FROM_UNIXTIME - 750)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 750)))) !== 0) || ((((_la - 782)) & ~0x1f) == 0 && ((1 << (_la - 782)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYN - 782)) | (1 << (MySqlParser.GEOMETRYTYPE - 782)) | (1 << (MySqlParser.GEOMFROMTEXT - 782)) | (1 << (MySqlParser.GEOMFROMWKB - 782)) | (1 << (MySqlParser.GET_FORMAT - 782)) | (1 << (MySqlParser.GET_LOCK - 782)) | (1 << (MySqlParser.GLENGTH - 782)) | (1 << (MySqlParser.GREATEST - 782)) | (1 << (MySqlParser.GTID_SUBSET - 782)) | (1 << (MySqlParser.GTID_SUBTRACT - 782)) | (1 << (MySqlParser.HEX - 782)) | (1 << (MySqlParser.IFNULL - 782)) | (1 << (MySqlParser.INET6_ATON - 782)) | (1 << (MySqlParser.INET6_NTOA - 782)) | (1 << (MySqlParser.INET_ATON - 782)) | (1 << (MySqlParser.INET_NTOA - 782)) | (1 << (MySqlParser.INSTR - 782)) | (1 << (MySqlParser.INTERIORRINGN - 782)) | (1 << (MySqlParser.INTERSECTS - 782)) | (1 << (MySqlParser.ISCLOSED - 782)) | (1 << (MySqlParser.ISEMPTY - 782)) | (1 << (MySqlParser.ISNULL - 782)) | (1 << (MySqlParser.ISSIMPLE - 782)) | (1 << (MySqlParser.IS_FREE_LOCK - 782)) | (1 << (MySqlParser.IS_IPV4 - 782)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 782)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 782)))) !== 0) || ((((_la - 814)) & ~0x1f) == 0 && ((1 << (_la - 814)) & ((1 << (MySqlParser.IS_IPV6 - 814)) | (1 << (MySqlParser.IS_USED_LOCK - 814)) | (1 << (MySqlParser.LAST_INSERT_ID - 814)) | (1 << (MySqlParser.LCASE - 814)) | (1 << (MySqlParser.LEAST - 814)) | (1 << (MySqlParser.LENGTH - 814)) | (1 << (MySqlParser.LINEFROMTEXT - 814)) | (1 << (MySqlParser.LINEFROMWKB - 814)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 814)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 814)) | (1 << (MySqlParser.LN - 814)) | (1 << (MySqlParser.LOAD_FILE - 814)) | (1 << (MySqlParser.LOCATE - 814)) | (1 << (MySqlParser.LOG - 814)) | (1 << (MySqlParser.LOG10 - 814)) | (1 << (MySqlParser.LOG2 - 814)) | (1 << (MySqlParser.LOWER - 814)) | (1 << (MySqlParser.LPAD - 814)) | (1 << (MySqlParser.LTRIM - 814)) | (1 << (MySqlParser.MAKEDATE - 814)) | (1 << (MySqlParser.MAKETIME - 814)) | (1 << (MySqlParser.MAKE_SET - 814)) | (1 << (MySqlParser.MASTER_POS_WAIT - 814)) | (1 << (MySqlParser.MBRCONTAINS - 814)) | (1 << (MySqlParser.MBRDISJOINT - 814)) | (1 << (MySqlParser.MBREQUAL - 814)) | (1 << (MySqlParser.MBRINTERSECTS - 814)) | (1 << (MySqlParser.MBROVERLAPS - 814)) | (1 << (MySqlParser.MBRTOUCHES - 814)) | (1 << (MySqlParser.MBRWITHIN - 814)) | (1 << (MySqlParser.MD5 - 814)) | (1 << (MySqlParser.MLINEFROMTEXT - 814)))) !== 0) || ((((_la - 846)) & ~0x1f) == 0 && ((1 << (_la - 846)) & ((1 << (MySqlParser.MLINEFROMWKB - 846)) | (1 << (MySqlParser.MONTHNAME - 846)) | (1 << (MySqlParser.MPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MPOINTFROMWKB - 846)) | (1 << (MySqlParser.MPOLYFROMTEXT - 846)) | (1 << (MySqlParser.MPOLYFROMWKB - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 846)) | (1 << (MySqlParser.NAME_CONST - 846)) | (1 << (MySqlParser.NULLIF - 846)) | (1 << (MySqlParser.NUMGEOMETRIES - 846)) | (1 << (MySqlParser.NUMINTERIORRINGS - 846)) | (1 << (MySqlParser.NUMPOINTS - 846)) | (1 << (MySqlParser.OCT - 846)) | (1 << (MySqlParser.OCTET_LENGTH - 846)) | (1 << (MySqlParser.ORD - 846)) | (1 << (MySqlParser.OVERLAPS - 846)) | (1 << (MySqlParser.PERIOD_ADD - 846)) | (1 << (MySqlParser.PERIOD_DIFF - 846)) | (1 << (MySqlParser.PI - 846)) | (1 << (MySqlParser.POINTFROMTEXT - 846)) | (1 << (MySqlParser.POINTFROMWKB - 846)) | (1 << (MySqlParser.POINTN - 846)) | (1 << (MySqlParser.POLYFROMTEXT - 846)) | (1 << (MySqlParser.POLYFROMWKB - 846)) | (1 << (MySqlParser.POLYGONFROMTEXT - 846)) | (1 << (MySqlParser.POLYGONFROMWKB - 846)) | (1 << (MySqlParser.POW - 846)))) !== 0) || ((((_la - 878)) & ~0x1f) == 0 && ((1 << (_la - 878)) & ((1 << (MySqlParser.POWER - 878)) | (1 << (MySqlParser.QUOTE - 878)) | (1 << (MySqlParser.RADIANS - 878)) | (1 << (MySqlParser.RAND - 878)) | (1 << (MySqlParser.RANDOM_BYTES - 878)) | (1 << (MySqlParser.RELEASE_LOCK - 878)) | (1 << (MySqlParser.REVERSE - 878)) | (1 << (MySqlParser.ROUND - 878)) | (1 << (MySqlParser.ROW_COUNT - 878)) | (1 << (MySqlParser.RPAD - 878)) | (1 << (MySqlParser.RTRIM - 878)) | (1 << (MySqlParser.SEC_TO_TIME - 878)) | (1 << (MySqlParser.SESSION_USER - 878)) | (1 << (MySqlParser.SHA - 878)) | (1 << (MySqlParser.SHA1 - 878)) | (1 << (MySqlParser.SHA2 - 878)) | (1 << (MySqlParser.SCHEMA_NAME - 878)) | (1 << (MySqlParser.SIGN - 878)) | (1 << (MySqlParser.SIN - 878)) | (1 << (MySqlParser.SLEEP - 878)) | (1 << (MySqlParser.SOUNDEX - 878)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 878)) | (1 << (MySqlParser.SQRT - 878)) | (1 << (MySqlParser.SRID - 878)) | (1 << (MySqlParser.STARTPOINT - 878)) | (1 << (MySqlParser.STRCMP - 878)) | (1 << (MySqlParser.STR_TO_DATE - 878)) | (1 << (MySqlParser.ST_AREA - 878)) | (1 << (MySqlParser.ST_ASBINARY - 878)) | (1 << (MySqlParser.ST_ASTEXT - 878)) | (1 << (MySqlParser.ST_ASWKB - 878)) | (1 << (MySqlParser.ST_ASWKT - 878)))) !== 0) || ((((_la - 910)) & ~0x1f) == 0 && ((1 << (_la - 910)) & ((1 << (MySqlParser.ST_BUFFER - 910)) | (1 << (MySqlParser.ST_CENTROID - 910)) | (1 << (MySqlParser.ST_CONTAINS - 910)) | (1 << (MySqlParser.ST_CROSSES - 910)) | (1 << (MySqlParser.ST_DIFFERENCE - 910)) | (1 << (MySqlParser.ST_DIMENSION - 910)) | (1 << (MySqlParser.ST_DISJOINT - 910)) | (1 << (MySqlParser.ST_DISTANCE - 910)) | (1 << (MySqlParser.ST_ENDPOINT - 910)) | (1 << (MySqlParser.ST_ENVELOPE - 910)) | (1 << (MySqlParser.ST_EQUALS - 910)) | (1 << (MySqlParser.ST_EXTERIORRING - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYN - 910)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 910)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 910)) | (1 << (MySqlParser.ST_INTERIORRINGN - 910)) | (1 << (MySqlParser.ST_INTERSECTION - 910)) | (1 << (MySqlParser.ST_INTERSECTS - 910)) | (1 << (MySqlParser.ST_ISCLOSED - 910)) | (1 << (MySqlParser.ST_ISEMPTY - 910)) | (1 << (MySqlParser.ST_ISSIMPLE - 910)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 910)) | (1 << (MySqlParser.ST_LINEFROMWKB - 910)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 910)))) !== 0) || ((((_la - 942)) & ~0x1f) == 0 && ((1 << (_la - 942)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 942)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 942)) | (1 << (MySqlParser.ST_NUMPOINTS - 942)) | (1 << (MySqlParser.ST_OVERLAPS - 942)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 942)) | (1 << (MySqlParser.ST_POINTFROMWKB - 942)) | (1 << (MySqlParser.ST_POINTN - 942)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYFROMWKB - 942)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 942)) | (1 << (MySqlParser.ST_SRID - 942)) | (1 << (MySqlParser.ST_STARTPOINT - 942)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 942)) | (1 << (MySqlParser.ST_TOUCHES - 942)) | (1 << (MySqlParser.ST_UNION - 942)) | (1 << (MySqlParser.ST_WITHIN - 942)) | (1 << (MySqlParser.ST_X - 942)) | (1 << (MySqlParser.ST_Y - 942)) | (1 << (MySqlParser.SUBDATE - 942)) | (1 << (MySqlParser.SUBSTRING_INDEX - 942)) | (1 << (MySqlParser.SUBTIME - 942)) | (1 << (MySqlParser.SYSTEM_USER - 942)) | (1 << (MySqlParser.TAN - 942)) | (1 << (MySqlParser.TIMEDIFF - 942)) | (1 << (MySqlParser.TIMESTAMPADD - 942)) | (1 << (MySqlParser.TIMESTAMPDIFF - 942)) | (1 << (MySqlParser.TIME_FORMAT - 942)) | (1 << (MySqlParser.TIME_TO_SEC - 942)) | (1 << (MySqlParser.TOUCHES - 942)))) !== 0) || ((((_la - 974)) & ~0x1f) == 0 && ((1 << (_la - 974)) & ((1 << (MySqlParser.TO_BASE64 - 974)) | (1 << (MySqlParser.TO_DAYS - 974)) | (1 << (MySqlParser.TO_SECONDS - 974)) | (1 << (MySqlParser.UCASE - 974)) | (1 << (MySqlParser.UNCOMPRESS - 974)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 974)) | (1 << (MySqlParser.UNHEX - 974)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 974)) | (1 << (MySqlParser.UPDATEXML - 974)) | (1 << (MySqlParser.UPPER - 974)) | (1 << (MySqlParser.UUID - 974)) | (1 << (MySqlParser.UUID_SHORT - 974)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 974)) | (1 << (MySqlParser.VERSION - 974)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1 << (MySqlParser.WEEKDAY - 974)) | (1 << (MySqlParser.WEEKOFYEAR - 974)) | (1 << (MySqlParser.WEIGHT_STRING - 974)) | (1 << (MySqlParser.WITHIN - 974)) | (1 << (MySqlParser.YEARWEEK - 974)) | (1 << (MySqlParser.Y_FUNCTION - 974)) | (1 << (MySqlParser.X_FUNCTION - 974)))) !== 0) || ((((_la - 1034)) & ~0x1f) == 0 && ((1 << (_la - 1034)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (MySqlParser.STRING_LITERAL - 1034)) | (1 << (MySqlParser.ID - 1034)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1034)))) !== 0)) {
	                    this.state = 1463;
	                    localctx.name = this.uid();
	                }

	            }

	            this.state = 1468;
	            this.match(MySqlParser.CHECK);
	            this.state = 1469;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 1470;
	            this.expression(0);
	            this.state = 1471;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableConstraint() {
	    let localctx = new TableConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, MySqlParser.RULE_tableConstraint);
	    var _la = 0; // Token type
	    try {
	        this.state = 1544;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,155,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PrimaryKeyTableConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1479;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.CONSTRAINT) {
	                this.state = 1475;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 1477;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySqlParser.CURRENT - 32)) | (1 << (MySqlParser.DATABASE - 32)) | (1 << (MySqlParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySqlParser.LEFT || _la===MySqlParser.NUMBER || _la===MySqlParser.RIGHT || _la===MySqlParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.TIMESTAMP - 199)) | (1 << (MySqlParser.DATETIME - 199)) | (1 << (MySqlParser.YEAR - 199)) | (1 << (MySqlParser.TEXT - 199)) | (1 << (MySqlParser.ENUM - 199)) | (1 << (MySqlParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.JSON_VALID - 233)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySqlParser.AVG - 233)) | (1 << (MySqlParser.BIT_AND - 233)) | (1 << (MySqlParser.BIT_OR - 233)) | (1 << (MySqlParser.BIT_XOR - 233)) | (1 << (MySqlParser.COUNT - 233)) | (1 << (MySqlParser.GROUP_CONCAT - 233)) | (1 << (MySqlParser.MAX - 233)) | (1 << (MySqlParser.MIN - 233)) | (1 << (MySqlParser.STD - 233)) | (1 << (MySqlParser.STDDEV - 233)) | (1 << (MySqlParser.STDDEV_POP - 233)) | (1 << (MySqlParser.STDDEV_SAMP - 233)) | (1 << (MySqlParser.SUM - 233)) | (1 << (MySqlParser.VAR_POP - 233)) | (1 << (MySqlParser.VAR_SAMP - 233)) | (1 << (MySqlParser.VARIANCE - 233)) | (1 << (MySqlParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySqlParser.ACCOUNT - 270)) | (1 << (MySqlParser.ACTION - 270)) | (1 << (MySqlParser.AFTER - 270)) | (1 << (MySqlParser.AGGREGATE - 270)) | (1 << (MySqlParser.ALGORITHM - 270)) | (1 << (MySqlParser.ANY - 270)) | (1 << (MySqlParser.AT - 270)) | (1 << (MySqlParser.AUTHORS - 270)) | (1 << (MySqlParser.AUTOCOMMIT - 270)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySqlParser.AUTO_INCREMENT - 270)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 270)) | (1 << (MySqlParser.BEGIN - 270)) | (1 << (MySqlParser.BINLOG - 270)) | (1 << (MySqlParser.BIT - 270)) | (1 << (MySqlParser.BLOCK - 270)) | (1 << (MySqlParser.BOOL - 270)) | (1 << (MySqlParser.BOOLEAN - 270)) | (1 << (MySqlParser.BTREE - 270)) | (1 << (MySqlParser.CACHE - 270)) | (1 << (MySqlParser.CASCADED - 270)) | (1 << (MySqlParser.CHAIN - 270)) | (1 << (MySqlParser.CHANGED - 270)) | (1 << (MySqlParser.CHANNEL - 270)) | (1 << (MySqlParser.CHECKSUM - 270)) | (1 << (MySqlParser.PAGE_CHECKSUM - 270)) | (1 << (MySqlParser.CIPHER - 270)) | (1 << (MySqlParser.CLASS_ORIGIN - 270)) | (1 << (MySqlParser.CLIENT - 270)) | (1 << (MySqlParser.CLOSE - 270)) | (1 << (MySqlParser.COALESCE - 270)) | (1 << (MySqlParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySqlParser.COLUMNS - 302)) | (1 << (MySqlParser.COLUMN_FORMAT - 302)) | (1 << (MySqlParser.COLUMN_NAME - 302)) | (1 << (MySqlParser.COMMENT - 302)) | (1 << (MySqlParser.COMMIT - 302)) | (1 << (MySqlParser.COMPACT - 302)) | (1 << (MySqlParser.COMPLETION - 302)) | (1 << (MySqlParser.COMPRESSED - 302)) | (1 << (MySqlParser.COMPRESSION - 302)) | (1 << (MySqlParser.CONCURRENT - 302)) | (1 << (MySqlParser.CONNECTION - 302)) | (1 << (MySqlParser.CONSISTENT - 302)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySqlParser.CONSTRAINT_NAME - 302)) | (1 << (MySqlParser.CONTAINS - 302)) | (1 << (MySqlParser.CONTEXT - 302)) | (1 << (MySqlParser.CONTRIBUTORS - 302)) | (1 << (MySqlParser.COPY - 302)) | (1 << (MySqlParser.CPU - 302)) | (1 << (MySqlParser.CURSOR_NAME - 302)) | (1 << (MySqlParser.DATA - 302)) | (1 << (MySqlParser.DATAFILE - 302)) | (1 << (MySqlParser.DEALLOCATE - 302)) | (1 << (MySqlParser.DEFAULT_AUTH - 302)) | (1 << (MySqlParser.DEFINER - 302)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 302)) | (1 << (MySqlParser.DES_KEY_FILE - 302)) | (1 << (MySqlParser.DIRECTORY - 302)) | (1 << (MySqlParser.DISABLE - 302)) | (1 << (MySqlParser.DISCARD - 302)) | (1 << (MySqlParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySqlParser.DO - 334)) | (1 << (MySqlParser.DUMPFILE - 334)) | (1 << (MySqlParser.DUPLICATE - 334)) | (1 << (MySqlParser.DYNAMIC - 334)) | (1 << (MySqlParser.ENABLE - 334)) | (1 << (MySqlParser.ENCRYPTION - 334)) | (1 << (MySqlParser.END - 334)) | (1 << (MySqlParser.ENDS - 334)) | (1 << (MySqlParser.ENGINE - 334)) | (1 << (MySqlParser.ENGINES - 334)) | (1 << (MySqlParser.ERROR - 334)) | (1 << (MySqlParser.ERRORS - 334)) | (1 << (MySqlParser.ESCAPE - 334)) | (1 << (MySqlParser.EVEN - 334)) | (1 << (MySqlParser.EVENT - 334)) | (1 << (MySqlParser.EVENTS - 334)) | (1 << (MySqlParser.EVERY - 334)) | (1 << (MySqlParser.EXCHANGE - 334)) | (1 << (MySqlParser.EXCLUSIVE - 334)) | (1 << (MySqlParser.EXPIRE - 334)) | (1 << (MySqlParser.EXPORT - 334)) | (1 << (MySqlParser.EXTENDED - 334)) | (1 << (MySqlParser.EXTENT_SIZE - 334)) | (1 << (MySqlParser.FAST - 334)) | (1 << (MySqlParser.FAULTS - 334)) | (1 << (MySqlParser.FIELDS - 334)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySqlParser.FILTER - 334)) | (1 << (MySqlParser.FIRST - 334)) | (1 << (MySqlParser.FIXED - 334)) | (1 << (MySqlParser.FLUSH - 334)) | (1 << (MySqlParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySqlParser.FOUND - 366)) | (1 << (MySqlParser.FULL - 366)) | (1 << (MySqlParser.FUNCTION - 366)) | (1 << (MySqlParser.GENERAL - 366)) | (1 << (MySqlParser.GLOBAL - 366)) | (1 << (MySqlParser.GRANTS - 366)) | (1 << (MySqlParser.GROUP_REPLICATION - 366)) | (1 << (MySqlParser.HANDLER - 366)) | (1 << (MySqlParser.HASH - 366)) | (1 << (MySqlParser.HELP - 366)) | (1 << (MySqlParser.HOST - 366)) | (1 << (MySqlParser.HOSTS - 366)) | (1 << (MySqlParser.IDENTIFIED - 366)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySqlParser.IMPORT - 366)) | (1 << (MySqlParser.INDEXES - 366)) | (1 << (MySqlParser.INITIAL_SIZE - 366)) | (1 << (MySqlParser.INPLACE - 366)) | (1 << (MySqlParser.INSERT_METHOD - 366)) | (1 << (MySqlParser.INSTALL - 366)) | (1 << (MySqlParser.INSTANCE - 366)) | (1 << (MySqlParser.INVISIBLE - 366)) | (1 << (MySqlParser.INVOKER - 366)) | (1 << (MySqlParser.IO - 366)) | (1 << (MySqlParser.IO_THREAD - 366)) | (1 << (MySqlParser.IPC - 366)) | (1 << (MySqlParser.ISOLATION - 366)) | (1 << (MySqlParser.ISSUER - 366)) | (1 << (MySqlParser.JSON - 366)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySqlParser.LANGUAGE - 366)) | (1 << (MySqlParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.LEAVES - 398)) | (1 << (MySqlParser.LESS - 398)) | (1 << (MySqlParser.LEVEL - 398)) | (1 << (MySqlParser.LIST - 398)) | (1 << (MySqlParser.LOCAL - 398)) | (1 << (MySqlParser.LOGFILE - 398)) | (1 << (MySqlParser.LOGS - 398)) | (1 << (MySqlParser.MASTER - 398)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySqlParser.MASTER_DELAY - 398)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySqlParser.MASTER_HOST - 398)) | (1 << (MySqlParser.MASTER_LOG_FILE - 398)) | (1 << (MySqlParser.MASTER_LOG_POS - 398)) | (1 << (MySqlParser.MASTER_PASSWORD - 398)) | (1 << (MySqlParser.MASTER_PORT - 398)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySqlParser.MASTER_SSL - 398)) | (1 << (MySqlParser.MASTER_SSL_CA - 398)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_CERT - 398)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySqlParser.MASTER_SSL_CRL - 398)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_KEY - 398)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 398)) | (1 << (MySqlParser.MASTER_USER - 398)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySqlParser.MEDIUM - 430)) | (1 << (MySqlParser.MEMBER - 430)) | (1 << (MySqlParser.MERGE - 430)) | (1 << (MySqlParser.MESSAGE_TEXT - 430)) | (1 << (MySqlParser.MID - 430)) | (1 << (MySqlParser.MIGRATE - 430)) | (1 << (MySqlParser.MIN_ROWS - 430)) | (1 << (MySqlParser.MODE - 430)) | (1 << (MySqlParser.MODIFY - 430)) | (1 << (MySqlParser.MUTEX - 430)) | (1 << (MySqlParser.MYSQL - 430)) | (1 << (MySqlParser.MYSQL_ERRNO - 430)) | (1 << (MySqlParser.NAME - 430)) | (1 << (MySqlParser.NAMES - 430)) | (1 << (MySqlParser.NCHAR - 430)) | (1 << (MySqlParser.NEVER - 430)) | (1 << (MySqlParser.NEXT - 430)) | (1 << (MySqlParser.NO - 430)) | (1 << (MySqlParser.NODEGROUP - 430)) | (1 << (MySqlParser.NONE - 430)) | (1 << (MySqlParser.OFFLINE - 430)) | (1 << (MySqlParser.OFFSET - 430)) | (1 << (MySqlParser.OF - 430)) | (1 << (MySqlParser.OJ - 430)) | (1 << (MySqlParser.OLD_PASSWORD - 430)) | (1 << (MySqlParser.ONE - 430)) | (1 << (MySqlParser.ONLINE - 430)) | (1 << (MySqlParser.ONLY - 430)) | (1 << (MySqlParser.OPEN - 430)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySqlParser.OPTIONS - 462)) | (1 << (MySqlParser.OWNER - 462)) | (1 << (MySqlParser.PACK_KEYS - 462)) | (1 << (MySqlParser.PAGE - 462)) | (1 << (MySqlParser.PARSER - 462)) | (1 << (MySqlParser.PARTIAL - 462)) | (1 << (MySqlParser.PARTITIONING - 462)) | (1 << (MySqlParser.PARTITIONS - 462)) | (1 << (MySqlParser.PASSWORD - 462)) | (1 << (MySqlParser.PHASE - 462)) | (1 << (MySqlParser.PLUGIN - 462)) | (1 << (MySqlParser.PLUGIN_DIR - 462)) | (1 << (MySqlParser.PLUGINS - 462)) | (1 << (MySqlParser.PORT - 462)) | (1 << (MySqlParser.PRECEDES - 462)) | (1 << (MySqlParser.PREPARE - 462)) | (1 << (MySqlParser.PRESERVE - 462)) | (1 << (MySqlParser.PREV - 462)) | (1 << (MySqlParser.PROCESSLIST - 462)) | (1 << (MySqlParser.PROFILE - 462)) | (1 << (MySqlParser.PROFILES - 462)) | (1 << (MySqlParser.PROXY - 462)) | (1 << (MySqlParser.QUERY - 462)) | (1 << (MySqlParser.QUICK - 462)) | (1 << (MySqlParser.REBUILD - 462)) | (1 << (MySqlParser.RECOVER - 462)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySqlParser.REDUNDANT - 462)) | (1 << (MySqlParser.RELAY - 462)) | (1 << (MySqlParser.RELAY_LOG_FILE - 462)) | (1 << (MySqlParser.RELAY_LOG_POS - 462)) | (1 << (MySqlParser.RELAYLOG - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySqlParser.REMOVE - 494)) | (1 << (MySqlParser.REORGANIZE - 494)) | (1 << (MySqlParser.REPAIR - 494)) | (1 << (MySqlParser.REPLICATE_DO_DB - 494)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATION - 494)) | (1 << (MySqlParser.RESET - 494)) | (1 << (MySqlParser.RESUME - 494)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 494)) | (1 << (MySqlParser.RETURNS - 494)) | (1 << (MySqlParser.ROLE - 494)) | (1 << (MySqlParser.ROLLBACK - 494)) | (1 << (MySqlParser.ROLLUP - 494)) | (1 << (MySqlParser.ROTATE - 494)) | (1 << (MySqlParser.ROW - 494)) | (1 << (MySqlParser.ROWS - 494)) | (1 << (MySqlParser.ROW_FORMAT - 494)) | (1 << (MySqlParser.SAVEPOINT - 494)) | (1 << (MySqlParser.SCHEDULE - 494)) | (1 << (MySqlParser.SECURITY - 494)) | (1 << (MySqlParser.SERVER - 494)) | (1 << (MySqlParser.SESSION - 494)) | (1 << (MySqlParser.SHARE - 494)) | (1 << (MySqlParser.SHARED - 494)) | (1 << (MySqlParser.SIGNED - 494)) | (1 << (MySqlParser.SIMPLE - 494)) | (1 << (MySqlParser.SLAVE - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySqlParser.SLOW - 526)) | (1 << (MySqlParser.SNAPSHOT - 526)) | (1 << (MySqlParser.SOCKET - 526)) | (1 << (MySqlParser.SOME - 526)) | (1 << (MySqlParser.SONAME - 526)) | (1 << (MySqlParser.SOUNDS - 526)) | (1 << (MySqlParser.SOURCE - 526)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySqlParser.SQL_CACHE - 526)) | (1 << (MySqlParser.SQL_NO_CACHE - 526)) | (1 << (MySqlParser.SQL_THREAD - 526)) | (1 << (MySqlParser.START - 526)) | (1 << (MySqlParser.STARTS - 526)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 526)) | (1 << (MySqlParser.STATS_PERSISTENT - 526)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySqlParser.STATUS - 526)) | (1 << (MySqlParser.STOP - 526)) | (1 << (MySqlParser.STORAGE - 526)) | (1 << (MySqlParser.STRING - 526)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySqlParser.SUBJECT - 526)) | (1 << (MySqlParser.SUBPARTITION - 526)) | (1 << (MySqlParser.SUBPARTITIONS - 526)) | (1 << (MySqlParser.SUSPEND - 526)) | (1 << (MySqlParser.SWAPS - 526)) | (1 << (MySqlParser.SWITCHES - 526)) | (1 << (MySqlParser.TABLE_NAME - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySqlParser.TABLESPACE - 558)) | (1 << (MySqlParser.TEMPORARY - 558)) | (1 << (MySqlParser.TEMPTABLE - 558)) | (1 << (MySqlParser.THAN - 558)) | (1 << (MySqlParser.TRADITIONAL - 558)) | (1 << (MySqlParser.TRANSACTION - 558)) | (1 << (MySqlParser.TRANSACTIONAL - 558)) | (1 << (MySqlParser.TRIGGERS - 558)) | (1 << (MySqlParser.TRUNCATE - 558)) | (1 << (MySqlParser.UNDEFINED - 558)) | (1 << (MySqlParser.UNDOFILE - 558)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySqlParser.UNINSTALL - 558)) | (1 << (MySqlParser.UNKNOWN - 558)) | (1 << (MySqlParser.UNTIL - 558)) | (1 << (MySqlParser.UPGRADE - 558)) | (1 << (MySqlParser.USER - 558)) | (1 << (MySqlParser.USE_FRM - 558)) | (1 << (MySqlParser.USER_RESOURCES - 558)) | (1 << (MySqlParser.VALIDATION - 558)) | (1 << (MySqlParser.VALUE - 558)) | (1 << (MySqlParser.VARIABLES - 558)) | (1 << (MySqlParser.VIEW - 558)) | (1 << (MySqlParser.VISIBLE - 558)) | (1 << (MySqlParser.WAIT - 558)) | (1 << (MySqlParser.WARNINGS - 558)) | (1 << (MySqlParser.WITHOUT - 558)) | (1 << (MySqlParser.WORK - 558)) | (1 << (MySqlParser.WRAPPER - 558)) | (1 << (MySqlParser.X509 - 558)) | (1 << (MySqlParser.XA - 558)))) !== 0) || ((((_la - 590)) & ~0x1f) == 0 && ((1 << (_la - 590)) & ((1 << (MySqlParser.XML - 590)) | (1 << (MySqlParser.INTERNAL - 590)) | (1 << (MySqlParser.QUARTER - 590)) | (1 << (MySqlParser.MONTH - 590)) | (1 << (MySqlParser.DAY - 590)) | (1 << (MySqlParser.HOUR - 590)) | (1 << (MySqlParser.MINUTE - 590)) | (1 << (MySqlParser.WEEK - 590)) | (1 << (MySqlParser.SECOND - 590)) | (1 << (MySqlParser.MICROSECOND - 590)) | (1 << (MySqlParser.TABLES - 590)) | (1 << (MySqlParser.ROUTINE - 590)) | (1 << (MySqlParser.EXECUTE - 590)) | (1 << (MySqlParser.FILE - 590)) | (1 << (MySqlParser.PROCESS - 590)) | (1 << (MySqlParser.RELOAD - 590)) | (1 << (MySqlParser.SHUTDOWN - 590)) | (1 << (MySqlParser.SUPER - 590)) | (1 << (MySqlParser.PRIVILEGES - 590)) | (1 << (MySqlParser.AUDIT_ADMIN - 590)) | (1 << (MySqlParser.BACKUP_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 590)) | (1 << (MySqlParser.CLONE_ADMIN - 590)) | (1 << (MySqlParser.CONNECTION_ADMIN - 590)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 590)) | (1 << (MySqlParser.FIREWALL_ADMIN - 590)))) !== 0) || ((((_la - 622)) & ~0x1f) == 0 && ((1 << (_la - 622)) & ((1 << (MySqlParser.FIREWALL_USER - 622)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 622)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 622)) | (1 << (MySqlParser.NDB_STORED_USER - 622)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.REPLICATION_APPLIER - 622)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 622)) | (1 << (MySqlParser.ROLE_ADMIN - 622)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.SET_USER_ID - 622)) | (1 << (MySqlParser.SHOW_ROUTINE - 622)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 622)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 622)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 622)) | (1 << (MySqlParser.ARMSCII8 - 622)) | (1 << (MySqlParser.ASCII - 622)) | (1 << (MySqlParser.BIG5 - 622)) | (1 << (MySqlParser.CP1250 - 622)) | (1 << (MySqlParser.CP1251 - 622)) | (1 << (MySqlParser.CP1256 - 622)) | (1 << (MySqlParser.CP1257 - 622)) | (1 << (MySqlParser.CP850 - 622)) | (1 << (MySqlParser.CP852 - 622)) | (1 << (MySqlParser.CP866 - 622)) | (1 << (MySqlParser.CP932 - 622)) | (1 << (MySqlParser.DEC8 - 622)) | (1 << (MySqlParser.EUCJPMS - 622)) | (1 << (MySqlParser.EUCKR - 622)) | (1 << (MySqlParser.GB2312 - 622)))) !== 0) || ((((_la - 654)) & ~0x1f) == 0 && ((1 << (_la - 654)) & ((1 << (MySqlParser.GBK - 654)) | (1 << (MySqlParser.GEOSTD8 - 654)) | (1 << (MySqlParser.GREEK - 654)) | (1 << (MySqlParser.HEBREW - 654)) | (1 << (MySqlParser.HP8 - 654)) | (1 << (MySqlParser.KEYBCS2 - 654)) | (1 << (MySqlParser.KOI8R - 654)) | (1 << (MySqlParser.KOI8U - 654)) | (1 << (MySqlParser.LATIN1 - 654)) | (1 << (MySqlParser.LATIN2 - 654)) | (1 << (MySqlParser.LATIN5 - 654)) | (1 << (MySqlParser.LATIN7 - 654)) | (1 << (MySqlParser.MACCE - 654)) | (1 << (MySqlParser.MACROMAN - 654)) | (1 << (MySqlParser.SJIS - 654)) | (1 << (MySqlParser.SWE7 - 654)) | (1 << (MySqlParser.TIS620 - 654)) | (1 << (MySqlParser.UCS2 - 654)) | (1 << (MySqlParser.UJIS - 654)) | (1 << (MySqlParser.UTF16 - 654)) | (1 << (MySqlParser.UTF16LE - 654)) | (1 << (MySqlParser.UTF32 - 654)) | (1 << (MySqlParser.UTF8 - 654)) | (1 << (MySqlParser.UTF8MB3 - 654)) | (1 << (MySqlParser.UTF8MB4 - 654)) | (1 << (MySqlParser.ARCHIVE - 654)) | (1 << (MySqlParser.BLACKHOLE - 654)) | (1 << (MySqlParser.CSV - 654)) | (1 << (MySqlParser.FEDERATED - 654)) | (1 << (MySqlParser.INNODB - 654)) | (1 << (MySqlParser.MEMORY - 654)) | (1 << (MySqlParser.MRG_MYISAM - 654)))) !== 0) || ((((_la - 686)) & ~0x1f) == 0 && ((1 << (_la - 686)) & ((1 << (MySqlParser.MYISAM - 686)) | (1 << (MySqlParser.NDB - 686)) | (1 << (MySqlParser.NDBCLUSTER - 686)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 686)) | (1 << (MySqlParser.TOKUDB - 686)) | (1 << (MySqlParser.REPEATABLE - 686)) | (1 << (MySqlParser.COMMITTED - 686)) | (1 << (MySqlParser.UNCOMMITTED - 686)) | (1 << (MySqlParser.SERIALIZABLE - 686)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 686)) | (1 << (MySqlParser.LINESTRING - 686)) | (1 << (MySqlParser.MULTILINESTRING - 686)) | (1 << (MySqlParser.MULTIPOINT - 686)) | (1 << (MySqlParser.MULTIPOLYGON - 686)) | (1 << (MySqlParser.POINT - 686)) | (1 << (MySqlParser.POLYGON - 686)) | (1 << (MySqlParser.ABS - 686)) | (1 << (MySqlParser.ACOS - 686)) | (1 << (MySqlParser.ADDDATE - 686)) | (1 << (MySqlParser.ADDTIME - 686)) | (1 << (MySqlParser.AES_DECRYPT - 686)) | (1 << (MySqlParser.AES_ENCRYPT - 686)) | (1 << (MySqlParser.AREA - 686)) | (1 << (MySqlParser.ASBINARY - 686)) | (1 << (MySqlParser.ASIN - 686)) | (1 << (MySqlParser.ASTEXT - 686)) | (1 << (MySqlParser.ASWKB - 686)) | (1 << (MySqlParser.ASWKT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 686)))) !== 0) || ((((_la - 718)) & ~0x1f) == 0 && ((1 << (_la - 718)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 718)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 718)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 718)) | (1 << (MySqlParser.ATAN - 718)) | (1 << (MySqlParser.ATAN2 - 718)) | (1 << (MySqlParser.BENCHMARK - 718)) | (1 << (MySqlParser.BIN - 718)) | (1 << (MySqlParser.BIT_COUNT - 718)) | (1 << (MySqlParser.BIT_LENGTH - 718)) | (1 << (MySqlParser.BUFFER - 718)) | (1 << (MySqlParser.CATALOG_NAME - 718)) | (1 << (MySqlParser.CEIL - 718)) | (1 << (MySqlParser.CEILING - 718)) | (1 << (MySqlParser.CENTROID - 718)) | (1 << (MySqlParser.CHARACTER_LENGTH - 718)) | (1 << (MySqlParser.CHARSET - 718)) | (1 << (MySqlParser.CHAR_LENGTH - 718)) | (1 << (MySqlParser.COERCIBILITY - 718)) | (1 << (MySqlParser.COLLATION - 718)) | (1 << (MySqlParser.COMPRESS - 718)) | (1 << (MySqlParser.CONCAT - 718)) | (1 << (MySqlParser.CONCAT_WS - 718)) | (1 << (MySqlParser.CONNECTION_ID - 718)) | (1 << (MySqlParser.CONV - 718)) | (1 << (MySqlParser.CONVERT_TZ - 718)) | (1 << (MySqlParser.COS - 718)) | (1 << (MySqlParser.COT - 718)) | (1 << (MySqlParser.CRC32 - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 718)) | (1 << (MySqlParser.CREATE_DIGEST - 718)))) !== 0) || ((((_la - 750)) & ~0x1f) == 0 && ((1 << (_la - 750)) & ((1 << (MySqlParser.CROSSES - 750)) | (1 << (MySqlParser.DATEDIFF - 750)) | (1 << (MySqlParser.DATE_FORMAT - 750)) | (1 << (MySqlParser.DAYNAME - 750)) | (1 << (MySqlParser.DAYOFMONTH - 750)) | (1 << (MySqlParser.DAYOFWEEK - 750)) | (1 << (MySqlParser.DAYOFYEAR - 750)) | (1 << (MySqlParser.DECODE - 750)) | (1 << (MySqlParser.DEGREES - 750)) | (1 << (MySqlParser.DES_DECRYPT - 750)) | (1 << (MySqlParser.DES_ENCRYPT - 750)) | (1 << (MySqlParser.DIMENSION - 750)) | (1 << (MySqlParser.DISJOINT - 750)) | (1 << (MySqlParser.ELT - 750)) | (1 << (MySqlParser.ENCODE - 750)) | (1 << (MySqlParser.ENCRYPT - 750)) | (1 << (MySqlParser.ENDPOINT - 750)) | (1 << (MySqlParser.ENVELOPE - 750)) | (1 << (MySqlParser.EQUALS - 750)) | (1 << (MySqlParser.EXP - 750)) | (1 << (MySqlParser.EXPORT_SET - 750)) | (1 << (MySqlParser.EXTERIORRING - 750)) | (1 << (MySqlParser.EXTRACTVALUE - 750)) | (1 << (MySqlParser.FIELD - 750)) | (1 << (MySqlParser.FIND_IN_SET - 750)) | (1 << (MySqlParser.FLOOR - 750)) | (1 << (MySqlParser.FORMAT - 750)) | (1 << (MySqlParser.FOUND_ROWS - 750)) | (1 << (MySqlParser.FROM_BASE64 - 750)) | (1 << (MySqlParser.FROM_DAYS - 750)) | (1 << (MySqlParser.FROM_UNIXTIME - 750)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 750)))) !== 0) || ((((_la - 782)) & ~0x1f) == 0 && ((1 << (_la - 782)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYN - 782)) | (1 << (MySqlParser.GEOMETRYTYPE - 782)) | (1 << (MySqlParser.GEOMFROMTEXT - 782)) | (1 << (MySqlParser.GEOMFROMWKB - 782)) | (1 << (MySqlParser.GET_FORMAT - 782)) | (1 << (MySqlParser.GET_LOCK - 782)) | (1 << (MySqlParser.GLENGTH - 782)) | (1 << (MySqlParser.GREATEST - 782)) | (1 << (MySqlParser.GTID_SUBSET - 782)) | (1 << (MySqlParser.GTID_SUBTRACT - 782)) | (1 << (MySqlParser.HEX - 782)) | (1 << (MySqlParser.IFNULL - 782)) | (1 << (MySqlParser.INET6_ATON - 782)) | (1 << (MySqlParser.INET6_NTOA - 782)) | (1 << (MySqlParser.INET_ATON - 782)) | (1 << (MySqlParser.INET_NTOA - 782)) | (1 << (MySqlParser.INSTR - 782)) | (1 << (MySqlParser.INTERIORRINGN - 782)) | (1 << (MySqlParser.INTERSECTS - 782)) | (1 << (MySqlParser.ISCLOSED - 782)) | (1 << (MySqlParser.ISEMPTY - 782)) | (1 << (MySqlParser.ISNULL - 782)) | (1 << (MySqlParser.ISSIMPLE - 782)) | (1 << (MySqlParser.IS_FREE_LOCK - 782)) | (1 << (MySqlParser.IS_IPV4 - 782)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 782)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 782)))) !== 0) || ((((_la - 814)) & ~0x1f) == 0 && ((1 << (_la - 814)) & ((1 << (MySqlParser.IS_IPV6 - 814)) | (1 << (MySqlParser.IS_USED_LOCK - 814)) | (1 << (MySqlParser.LAST_INSERT_ID - 814)) | (1 << (MySqlParser.LCASE - 814)) | (1 << (MySqlParser.LEAST - 814)) | (1 << (MySqlParser.LENGTH - 814)) | (1 << (MySqlParser.LINEFROMTEXT - 814)) | (1 << (MySqlParser.LINEFROMWKB - 814)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 814)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 814)) | (1 << (MySqlParser.LN - 814)) | (1 << (MySqlParser.LOAD_FILE - 814)) | (1 << (MySqlParser.LOCATE - 814)) | (1 << (MySqlParser.LOG - 814)) | (1 << (MySqlParser.LOG10 - 814)) | (1 << (MySqlParser.LOG2 - 814)) | (1 << (MySqlParser.LOWER - 814)) | (1 << (MySqlParser.LPAD - 814)) | (1 << (MySqlParser.LTRIM - 814)) | (1 << (MySqlParser.MAKEDATE - 814)) | (1 << (MySqlParser.MAKETIME - 814)) | (1 << (MySqlParser.MAKE_SET - 814)) | (1 << (MySqlParser.MASTER_POS_WAIT - 814)) | (1 << (MySqlParser.MBRCONTAINS - 814)) | (1 << (MySqlParser.MBRDISJOINT - 814)) | (1 << (MySqlParser.MBREQUAL - 814)) | (1 << (MySqlParser.MBRINTERSECTS - 814)) | (1 << (MySqlParser.MBROVERLAPS - 814)) | (1 << (MySqlParser.MBRTOUCHES - 814)) | (1 << (MySqlParser.MBRWITHIN - 814)) | (1 << (MySqlParser.MD5 - 814)) | (1 << (MySqlParser.MLINEFROMTEXT - 814)))) !== 0) || ((((_la - 846)) & ~0x1f) == 0 && ((1 << (_la - 846)) & ((1 << (MySqlParser.MLINEFROMWKB - 846)) | (1 << (MySqlParser.MONTHNAME - 846)) | (1 << (MySqlParser.MPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MPOINTFROMWKB - 846)) | (1 << (MySqlParser.MPOLYFROMTEXT - 846)) | (1 << (MySqlParser.MPOLYFROMWKB - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 846)) | (1 << (MySqlParser.NAME_CONST - 846)) | (1 << (MySqlParser.NULLIF - 846)) | (1 << (MySqlParser.NUMGEOMETRIES - 846)) | (1 << (MySqlParser.NUMINTERIORRINGS - 846)) | (1 << (MySqlParser.NUMPOINTS - 846)) | (1 << (MySqlParser.OCT - 846)) | (1 << (MySqlParser.OCTET_LENGTH - 846)) | (1 << (MySqlParser.ORD - 846)) | (1 << (MySqlParser.OVERLAPS - 846)) | (1 << (MySqlParser.PERIOD_ADD - 846)) | (1 << (MySqlParser.PERIOD_DIFF - 846)) | (1 << (MySqlParser.PI - 846)) | (1 << (MySqlParser.POINTFROMTEXT - 846)) | (1 << (MySqlParser.POINTFROMWKB - 846)) | (1 << (MySqlParser.POINTN - 846)) | (1 << (MySqlParser.POLYFROMTEXT - 846)) | (1 << (MySqlParser.POLYFROMWKB - 846)) | (1 << (MySqlParser.POLYGONFROMTEXT - 846)) | (1 << (MySqlParser.POLYGONFROMWKB - 846)) | (1 << (MySqlParser.POW - 846)))) !== 0) || ((((_la - 878)) & ~0x1f) == 0 && ((1 << (_la - 878)) & ((1 << (MySqlParser.POWER - 878)) | (1 << (MySqlParser.QUOTE - 878)) | (1 << (MySqlParser.RADIANS - 878)) | (1 << (MySqlParser.RAND - 878)) | (1 << (MySqlParser.RANDOM_BYTES - 878)) | (1 << (MySqlParser.RELEASE_LOCK - 878)) | (1 << (MySqlParser.REVERSE - 878)) | (1 << (MySqlParser.ROUND - 878)) | (1 << (MySqlParser.ROW_COUNT - 878)) | (1 << (MySqlParser.RPAD - 878)) | (1 << (MySqlParser.RTRIM - 878)) | (1 << (MySqlParser.SEC_TO_TIME - 878)) | (1 << (MySqlParser.SESSION_USER - 878)) | (1 << (MySqlParser.SHA - 878)) | (1 << (MySqlParser.SHA1 - 878)) | (1 << (MySqlParser.SHA2 - 878)) | (1 << (MySqlParser.SCHEMA_NAME - 878)) | (1 << (MySqlParser.SIGN - 878)) | (1 << (MySqlParser.SIN - 878)) | (1 << (MySqlParser.SLEEP - 878)) | (1 << (MySqlParser.SOUNDEX - 878)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 878)) | (1 << (MySqlParser.SQRT - 878)) | (1 << (MySqlParser.SRID - 878)) | (1 << (MySqlParser.STARTPOINT - 878)) | (1 << (MySqlParser.STRCMP - 878)) | (1 << (MySqlParser.STR_TO_DATE - 878)) | (1 << (MySqlParser.ST_AREA - 878)) | (1 << (MySqlParser.ST_ASBINARY - 878)) | (1 << (MySqlParser.ST_ASTEXT - 878)) | (1 << (MySqlParser.ST_ASWKB - 878)) | (1 << (MySqlParser.ST_ASWKT - 878)))) !== 0) || ((((_la - 910)) & ~0x1f) == 0 && ((1 << (_la - 910)) & ((1 << (MySqlParser.ST_BUFFER - 910)) | (1 << (MySqlParser.ST_CENTROID - 910)) | (1 << (MySqlParser.ST_CONTAINS - 910)) | (1 << (MySqlParser.ST_CROSSES - 910)) | (1 << (MySqlParser.ST_DIFFERENCE - 910)) | (1 << (MySqlParser.ST_DIMENSION - 910)) | (1 << (MySqlParser.ST_DISJOINT - 910)) | (1 << (MySqlParser.ST_DISTANCE - 910)) | (1 << (MySqlParser.ST_ENDPOINT - 910)) | (1 << (MySqlParser.ST_ENVELOPE - 910)) | (1 << (MySqlParser.ST_EQUALS - 910)) | (1 << (MySqlParser.ST_EXTERIORRING - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYN - 910)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 910)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 910)) | (1 << (MySqlParser.ST_INTERIORRINGN - 910)) | (1 << (MySqlParser.ST_INTERSECTION - 910)) | (1 << (MySqlParser.ST_INTERSECTS - 910)) | (1 << (MySqlParser.ST_ISCLOSED - 910)) | (1 << (MySqlParser.ST_ISEMPTY - 910)) | (1 << (MySqlParser.ST_ISSIMPLE - 910)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 910)) | (1 << (MySqlParser.ST_LINEFROMWKB - 910)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 910)))) !== 0) || ((((_la - 942)) & ~0x1f) == 0 && ((1 << (_la - 942)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 942)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 942)) | (1 << (MySqlParser.ST_NUMPOINTS - 942)) | (1 << (MySqlParser.ST_OVERLAPS - 942)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 942)) | (1 << (MySqlParser.ST_POINTFROMWKB - 942)) | (1 << (MySqlParser.ST_POINTN - 942)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYFROMWKB - 942)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 942)) | (1 << (MySqlParser.ST_SRID - 942)) | (1 << (MySqlParser.ST_STARTPOINT - 942)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 942)) | (1 << (MySqlParser.ST_TOUCHES - 942)) | (1 << (MySqlParser.ST_UNION - 942)) | (1 << (MySqlParser.ST_WITHIN - 942)) | (1 << (MySqlParser.ST_X - 942)) | (1 << (MySqlParser.ST_Y - 942)) | (1 << (MySqlParser.SUBDATE - 942)) | (1 << (MySqlParser.SUBSTRING_INDEX - 942)) | (1 << (MySqlParser.SUBTIME - 942)) | (1 << (MySqlParser.SYSTEM_USER - 942)) | (1 << (MySqlParser.TAN - 942)) | (1 << (MySqlParser.TIMEDIFF - 942)) | (1 << (MySqlParser.TIMESTAMPADD - 942)) | (1 << (MySqlParser.TIMESTAMPDIFF - 942)) | (1 << (MySqlParser.TIME_FORMAT - 942)) | (1 << (MySqlParser.TIME_TO_SEC - 942)) | (1 << (MySqlParser.TOUCHES - 942)))) !== 0) || ((((_la - 974)) & ~0x1f) == 0 && ((1 << (_la - 974)) & ((1 << (MySqlParser.TO_BASE64 - 974)) | (1 << (MySqlParser.TO_DAYS - 974)) | (1 << (MySqlParser.TO_SECONDS - 974)) | (1 << (MySqlParser.UCASE - 974)) | (1 << (MySqlParser.UNCOMPRESS - 974)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 974)) | (1 << (MySqlParser.UNHEX - 974)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 974)) | (1 << (MySqlParser.UPDATEXML - 974)) | (1 << (MySqlParser.UPPER - 974)) | (1 << (MySqlParser.UUID - 974)) | (1 << (MySqlParser.UUID_SHORT - 974)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 974)) | (1 << (MySqlParser.VERSION - 974)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1 << (MySqlParser.WEEKDAY - 974)) | (1 << (MySqlParser.WEEKOFYEAR - 974)) | (1 << (MySqlParser.WEIGHT_STRING - 974)) | (1 << (MySqlParser.WITHIN - 974)) | (1 << (MySqlParser.YEARWEEK - 974)) | (1 << (MySqlParser.Y_FUNCTION - 974)) | (1 << (MySqlParser.X_FUNCTION - 974)))) !== 0) || ((((_la - 1034)) & ~0x1f) == 0 && ((1 << (_la - 1034)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (MySqlParser.STRING_LITERAL - 1034)) | (1 << (MySqlParser.ID - 1034)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1034)))) !== 0)) {
	                    this.state = 1476;
	                    localctx.name = this.uid();
	                }

	            }

	            this.state = 1481;
	            this.match(MySqlParser.PRIMARY);
	            this.state = 1482;
	            this.match(MySqlParser.KEY);
	            this.state = 1484;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySqlParser.CURRENT - 32)) | (1 << (MySqlParser.DATABASE - 32)) | (1 << (MySqlParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySqlParser.LEFT || _la===MySqlParser.NUMBER || _la===MySqlParser.RIGHT || _la===MySqlParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.TIMESTAMP - 199)) | (1 << (MySqlParser.DATETIME - 199)) | (1 << (MySqlParser.YEAR - 199)) | (1 << (MySqlParser.TEXT - 199)) | (1 << (MySqlParser.ENUM - 199)) | (1 << (MySqlParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.JSON_VALID - 233)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySqlParser.AVG - 233)) | (1 << (MySqlParser.BIT_AND - 233)) | (1 << (MySqlParser.BIT_OR - 233)) | (1 << (MySqlParser.BIT_XOR - 233)) | (1 << (MySqlParser.COUNT - 233)) | (1 << (MySqlParser.GROUP_CONCAT - 233)) | (1 << (MySqlParser.MAX - 233)) | (1 << (MySqlParser.MIN - 233)) | (1 << (MySqlParser.STD - 233)) | (1 << (MySqlParser.STDDEV - 233)) | (1 << (MySqlParser.STDDEV_POP - 233)) | (1 << (MySqlParser.STDDEV_SAMP - 233)) | (1 << (MySqlParser.SUM - 233)) | (1 << (MySqlParser.VAR_POP - 233)) | (1 << (MySqlParser.VAR_SAMP - 233)) | (1 << (MySqlParser.VARIANCE - 233)) | (1 << (MySqlParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySqlParser.ACCOUNT - 270)) | (1 << (MySqlParser.ACTION - 270)) | (1 << (MySqlParser.AFTER - 270)) | (1 << (MySqlParser.AGGREGATE - 270)) | (1 << (MySqlParser.ALGORITHM - 270)) | (1 << (MySqlParser.ANY - 270)) | (1 << (MySqlParser.AT - 270)) | (1 << (MySqlParser.AUTHORS - 270)) | (1 << (MySqlParser.AUTOCOMMIT - 270)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySqlParser.AUTO_INCREMENT - 270)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 270)) | (1 << (MySqlParser.BEGIN - 270)) | (1 << (MySqlParser.BINLOG - 270)) | (1 << (MySqlParser.BIT - 270)) | (1 << (MySqlParser.BLOCK - 270)) | (1 << (MySqlParser.BOOL - 270)) | (1 << (MySqlParser.BOOLEAN - 270)) | (1 << (MySqlParser.BTREE - 270)) | (1 << (MySqlParser.CACHE - 270)) | (1 << (MySqlParser.CASCADED - 270)) | (1 << (MySqlParser.CHAIN - 270)) | (1 << (MySqlParser.CHANGED - 270)) | (1 << (MySqlParser.CHANNEL - 270)) | (1 << (MySqlParser.CHECKSUM - 270)) | (1 << (MySqlParser.PAGE_CHECKSUM - 270)) | (1 << (MySqlParser.CIPHER - 270)) | (1 << (MySqlParser.CLASS_ORIGIN - 270)) | (1 << (MySqlParser.CLIENT - 270)) | (1 << (MySqlParser.CLOSE - 270)) | (1 << (MySqlParser.COALESCE - 270)) | (1 << (MySqlParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySqlParser.COLUMNS - 302)) | (1 << (MySqlParser.COLUMN_FORMAT - 302)) | (1 << (MySqlParser.COLUMN_NAME - 302)) | (1 << (MySqlParser.COMMENT - 302)) | (1 << (MySqlParser.COMMIT - 302)) | (1 << (MySqlParser.COMPACT - 302)) | (1 << (MySqlParser.COMPLETION - 302)) | (1 << (MySqlParser.COMPRESSED - 302)) | (1 << (MySqlParser.COMPRESSION - 302)) | (1 << (MySqlParser.CONCURRENT - 302)) | (1 << (MySqlParser.CONNECTION - 302)) | (1 << (MySqlParser.CONSISTENT - 302)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySqlParser.CONSTRAINT_NAME - 302)) | (1 << (MySqlParser.CONTAINS - 302)) | (1 << (MySqlParser.CONTEXT - 302)) | (1 << (MySqlParser.CONTRIBUTORS - 302)) | (1 << (MySqlParser.COPY - 302)) | (1 << (MySqlParser.CPU - 302)) | (1 << (MySqlParser.CURSOR_NAME - 302)) | (1 << (MySqlParser.DATA - 302)) | (1 << (MySqlParser.DATAFILE - 302)) | (1 << (MySqlParser.DEALLOCATE - 302)) | (1 << (MySqlParser.DEFAULT_AUTH - 302)) | (1 << (MySqlParser.DEFINER - 302)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 302)) | (1 << (MySqlParser.DES_KEY_FILE - 302)) | (1 << (MySqlParser.DIRECTORY - 302)) | (1 << (MySqlParser.DISABLE - 302)) | (1 << (MySqlParser.DISCARD - 302)) | (1 << (MySqlParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySqlParser.DO - 334)) | (1 << (MySqlParser.DUMPFILE - 334)) | (1 << (MySqlParser.DUPLICATE - 334)) | (1 << (MySqlParser.DYNAMIC - 334)) | (1 << (MySqlParser.ENABLE - 334)) | (1 << (MySqlParser.ENCRYPTION - 334)) | (1 << (MySqlParser.END - 334)) | (1 << (MySqlParser.ENDS - 334)) | (1 << (MySqlParser.ENGINE - 334)) | (1 << (MySqlParser.ENGINES - 334)) | (1 << (MySqlParser.ERROR - 334)) | (1 << (MySqlParser.ERRORS - 334)) | (1 << (MySqlParser.ESCAPE - 334)) | (1 << (MySqlParser.EVEN - 334)) | (1 << (MySqlParser.EVENT - 334)) | (1 << (MySqlParser.EVENTS - 334)) | (1 << (MySqlParser.EVERY - 334)) | (1 << (MySqlParser.EXCHANGE - 334)) | (1 << (MySqlParser.EXCLUSIVE - 334)) | (1 << (MySqlParser.EXPIRE - 334)) | (1 << (MySqlParser.EXPORT - 334)) | (1 << (MySqlParser.EXTENDED - 334)) | (1 << (MySqlParser.EXTENT_SIZE - 334)) | (1 << (MySqlParser.FAST - 334)) | (1 << (MySqlParser.FAULTS - 334)) | (1 << (MySqlParser.FIELDS - 334)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySqlParser.FILTER - 334)) | (1 << (MySqlParser.FIRST - 334)) | (1 << (MySqlParser.FIXED - 334)) | (1 << (MySqlParser.FLUSH - 334)) | (1 << (MySqlParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySqlParser.FOUND - 366)) | (1 << (MySqlParser.FULL - 366)) | (1 << (MySqlParser.FUNCTION - 366)) | (1 << (MySqlParser.GENERAL - 366)) | (1 << (MySqlParser.GLOBAL - 366)) | (1 << (MySqlParser.GRANTS - 366)) | (1 << (MySqlParser.GROUP_REPLICATION - 366)) | (1 << (MySqlParser.HANDLER - 366)) | (1 << (MySqlParser.HASH - 366)) | (1 << (MySqlParser.HELP - 366)) | (1 << (MySqlParser.HOST - 366)) | (1 << (MySqlParser.HOSTS - 366)) | (1 << (MySqlParser.IDENTIFIED - 366)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySqlParser.IMPORT - 366)) | (1 << (MySqlParser.INDEXES - 366)) | (1 << (MySqlParser.INITIAL_SIZE - 366)) | (1 << (MySqlParser.INPLACE - 366)) | (1 << (MySqlParser.INSERT_METHOD - 366)) | (1 << (MySqlParser.INSTALL - 366)) | (1 << (MySqlParser.INSTANCE - 366)) | (1 << (MySqlParser.INVISIBLE - 366)) | (1 << (MySqlParser.INVOKER - 366)) | (1 << (MySqlParser.IO - 366)) | (1 << (MySqlParser.IO_THREAD - 366)) | (1 << (MySqlParser.IPC - 366)) | (1 << (MySqlParser.ISOLATION - 366)) | (1 << (MySqlParser.ISSUER - 366)) | (1 << (MySqlParser.JSON - 366)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySqlParser.LANGUAGE - 366)) | (1 << (MySqlParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.LEAVES - 398)) | (1 << (MySqlParser.LESS - 398)) | (1 << (MySqlParser.LEVEL - 398)) | (1 << (MySqlParser.LIST - 398)) | (1 << (MySqlParser.LOCAL - 398)) | (1 << (MySqlParser.LOGFILE - 398)) | (1 << (MySqlParser.LOGS - 398)) | (1 << (MySqlParser.MASTER - 398)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySqlParser.MASTER_DELAY - 398)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySqlParser.MASTER_HOST - 398)) | (1 << (MySqlParser.MASTER_LOG_FILE - 398)) | (1 << (MySqlParser.MASTER_LOG_POS - 398)) | (1 << (MySqlParser.MASTER_PASSWORD - 398)) | (1 << (MySqlParser.MASTER_PORT - 398)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySqlParser.MASTER_SSL - 398)) | (1 << (MySqlParser.MASTER_SSL_CA - 398)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_CERT - 398)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySqlParser.MASTER_SSL_CRL - 398)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_KEY - 398)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 398)) | (1 << (MySqlParser.MASTER_USER - 398)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySqlParser.MEDIUM - 430)) | (1 << (MySqlParser.MEMBER - 430)) | (1 << (MySqlParser.MERGE - 430)) | (1 << (MySqlParser.MESSAGE_TEXT - 430)) | (1 << (MySqlParser.MID - 430)) | (1 << (MySqlParser.MIGRATE - 430)) | (1 << (MySqlParser.MIN_ROWS - 430)) | (1 << (MySqlParser.MODE - 430)) | (1 << (MySqlParser.MODIFY - 430)) | (1 << (MySqlParser.MUTEX - 430)) | (1 << (MySqlParser.MYSQL - 430)) | (1 << (MySqlParser.MYSQL_ERRNO - 430)) | (1 << (MySqlParser.NAME - 430)) | (1 << (MySqlParser.NAMES - 430)) | (1 << (MySqlParser.NCHAR - 430)) | (1 << (MySqlParser.NEVER - 430)) | (1 << (MySqlParser.NEXT - 430)) | (1 << (MySqlParser.NO - 430)) | (1 << (MySqlParser.NODEGROUP - 430)) | (1 << (MySqlParser.NONE - 430)) | (1 << (MySqlParser.OFFLINE - 430)) | (1 << (MySqlParser.OFFSET - 430)) | (1 << (MySqlParser.OF - 430)) | (1 << (MySqlParser.OJ - 430)) | (1 << (MySqlParser.OLD_PASSWORD - 430)) | (1 << (MySqlParser.ONE - 430)) | (1 << (MySqlParser.ONLINE - 430)) | (1 << (MySqlParser.ONLY - 430)) | (1 << (MySqlParser.OPEN - 430)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySqlParser.OPTIONS - 462)) | (1 << (MySqlParser.OWNER - 462)) | (1 << (MySqlParser.PACK_KEYS - 462)) | (1 << (MySqlParser.PAGE - 462)) | (1 << (MySqlParser.PARSER - 462)) | (1 << (MySqlParser.PARTIAL - 462)) | (1 << (MySqlParser.PARTITIONING - 462)) | (1 << (MySqlParser.PARTITIONS - 462)) | (1 << (MySqlParser.PASSWORD - 462)) | (1 << (MySqlParser.PHASE - 462)) | (1 << (MySqlParser.PLUGIN - 462)) | (1 << (MySqlParser.PLUGIN_DIR - 462)) | (1 << (MySqlParser.PLUGINS - 462)) | (1 << (MySqlParser.PORT - 462)) | (1 << (MySqlParser.PRECEDES - 462)) | (1 << (MySqlParser.PREPARE - 462)) | (1 << (MySqlParser.PRESERVE - 462)) | (1 << (MySqlParser.PREV - 462)) | (1 << (MySqlParser.PROCESSLIST - 462)) | (1 << (MySqlParser.PROFILE - 462)) | (1 << (MySqlParser.PROFILES - 462)) | (1 << (MySqlParser.PROXY - 462)) | (1 << (MySqlParser.QUERY - 462)) | (1 << (MySqlParser.QUICK - 462)) | (1 << (MySqlParser.REBUILD - 462)) | (1 << (MySqlParser.RECOVER - 462)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySqlParser.REDUNDANT - 462)) | (1 << (MySqlParser.RELAY - 462)) | (1 << (MySqlParser.RELAY_LOG_FILE - 462)) | (1 << (MySqlParser.RELAY_LOG_POS - 462)) | (1 << (MySqlParser.RELAYLOG - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySqlParser.REMOVE - 494)) | (1 << (MySqlParser.REORGANIZE - 494)) | (1 << (MySqlParser.REPAIR - 494)) | (1 << (MySqlParser.REPLICATE_DO_DB - 494)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATION - 494)) | (1 << (MySqlParser.RESET - 494)) | (1 << (MySqlParser.RESUME - 494)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 494)) | (1 << (MySqlParser.RETURNS - 494)) | (1 << (MySqlParser.ROLE - 494)) | (1 << (MySqlParser.ROLLBACK - 494)) | (1 << (MySqlParser.ROLLUP - 494)) | (1 << (MySqlParser.ROTATE - 494)) | (1 << (MySqlParser.ROW - 494)) | (1 << (MySqlParser.ROWS - 494)) | (1 << (MySqlParser.ROW_FORMAT - 494)) | (1 << (MySqlParser.SAVEPOINT - 494)) | (1 << (MySqlParser.SCHEDULE - 494)) | (1 << (MySqlParser.SECURITY - 494)) | (1 << (MySqlParser.SERVER - 494)) | (1 << (MySqlParser.SESSION - 494)) | (1 << (MySqlParser.SHARE - 494)) | (1 << (MySqlParser.SHARED - 494)) | (1 << (MySqlParser.SIGNED - 494)) | (1 << (MySqlParser.SIMPLE - 494)) | (1 << (MySqlParser.SLAVE - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySqlParser.SLOW - 526)) | (1 << (MySqlParser.SNAPSHOT - 526)) | (1 << (MySqlParser.SOCKET - 526)) | (1 << (MySqlParser.SOME - 526)) | (1 << (MySqlParser.SONAME - 526)) | (1 << (MySqlParser.SOUNDS - 526)) | (1 << (MySqlParser.SOURCE - 526)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySqlParser.SQL_CACHE - 526)) | (1 << (MySqlParser.SQL_NO_CACHE - 526)) | (1 << (MySqlParser.SQL_THREAD - 526)) | (1 << (MySqlParser.START - 526)) | (1 << (MySqlParser.STARTS - 526)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 526)) | (1 << (MySqlParser.STATS_PERSISTENT - 526)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySqlParser.STATUS - 526)) | (1 << (MySqlParser.STOP - 526)) | (1 << (MySqlParser.STORAGE - 526)) | (1 << (MySqlParser.STRING - 526)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySqlParser.SUBJECT - 526)) | (1 << (MySqlParser.SUBPARTITION - 526)) | (1 << (MySqlParser.SUBPARTITIONS - 526)) | (1 << (MySqlParser.SUSPEND - 526)) | (1 << (MySqlParser.SWAPS - 526)) | (1 << (MySqlParser.SWITCHES - 526)) | (1 << (MySqlParser.TABLE_NAME - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySqlParser.TABLESPACE - 558)) | (1 << (MySqlParser.TEMPORARY - 558)) | (1 << (MySqlParser.TEMPTABLE - 558)) | (1 << (MySqlParser.THAN - 558)) | (1 << (MySqlParser.TRADITIONAL - 558)) | (1 << (MySqlParser.TRANSACTION - 558)) | (1 << (MySqlParser.TRANSACTIONAL - 558)) | (1 << (MySqlParser.TRIGGERS - 558)) | (1 << (MySqlParser.TRUNCATE - 558)) | (1 << (MySqlParser.UNDEFINED - 558)) | (1 << (MySqlParser.UNDOFILE - 558)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySqlParser.UNINSTALL - 558)) | (1 << (MySqlParser.UNKNOWN - 558)) | (1 << (MySqlParser.UNTIL - 558)) | (1 << (MySqlParser.UPGRADE - 558)) | (1 << (MySqlParser.USER - 558)) | (1 << (MySqlParser.USE_FRM - 558)) | (1 << (MySqlParser.USER_RESOURCES - 558)) | (1 << (MySqlParser.VALIDATION - 558)) | (1 << (MySqlParser.VALUE - 558)) | (1 << (MySqlParser.VARIABLES - 558)) | (1 << (MySqlParser.VIEW - 558)) | (1 << (MySqlParser.VISIBLE - 558)) | (1 << (MySqlParser.WAIT - 558)) | (1 << (MySqlParser.WARNINGS - 558)) | (1 << (MySqlParser.WITHOUT - 558)) | (1 << (MySqlParser.WORK - 558)) | (1 << (MySqlParser.WRAPPER - 558)) | (1 << (MySqlParser.X509 - 558)) | (1 << (MySqlParser.XA - 558)))) !== 0) || ((((_la - 590)) & ~0x1f) == 0 && ((1 << (_la - 590)) & ((1 << (MySqlParser.XML - 590)) | (1 << (MySqlParser.INTERNAL - 590)) | (1 << (MySqlParser.QUARTER - 590)) | (1 << (MySqlParser.MONTH - 590)) | (1 << (MySqlParser.DAY - 590)) | (1 << (MySqlParser.HOUR - 590)) | (1 << (MySqlParser.MINUTE - 590)) | (1 << (MySqlParser.WEEK - 590)) | (1 << (MySqlParser.SECOND - 590)) | (1 << (MySqlParser.MICROSECOND - 590)) | (1 << (MySqlParser.TABLES - 590)) | (1 << (MySqlParser.ROUTINE - 590)) | (1 << (MySqlParser.EXECUTE - 590)) | (1 << (MySqlParser.FILE - 590)) | (1 << (MySqlParser.PROCESS - 590)) | (1 << (MySqlParser.RELOAD - 590)) | (1 << (MySqlParser.SHUTDOWN - 590)) | (1 << (MySqlParser.SUPER - 590)) | (1 << (MySqlParser.PRIVILEGES - 590)) | (1 << (MySqlParser.AUDIT_ADMIN - 590)) | (1 << (MySqlParser.BACKUP_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 590)) | (1 << (MySqlParser.CLONE_ADMIN - 590)) | (1 << (MySqlParser.CONNECTION_ADMIN - 590)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 590)) | (1 << (MySqlParser.FIREWALL_ADMIN - 590)))) !== 0) || ((((_la - 622)) & ~0x1f) == 0 && ((1 << (_la - 622)) & ((1 << (MySqlParser.FIREWALL_USER - 622)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 622)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 622)) | (1 << (MySqlParser.NDB_STORED_USER - 622)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.REPLICATION_APPLIER - 622)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 622)) | (1 << (MySqlParser.ROLE_ADMIN - 622)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.SET_USER_ID - 622)) | (1 << (MySqlParser.SHOW_ROUTINE - 622)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 622)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 622)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 622)) | (1 << (MySqlParser.ARMSCII8 - 622)) | (1 << (MySqlParser.ASCII - 622)) | (1 << (MySqlParser.BIG5 - 622)) | (1 << (MySqlParser.CP1250 - 622)) | (1 << (MySqlParser.CP1251 - 622)) | (1 << (MySqlParser.CP1256 - 622)) | (1 << (MySqlParser.CP1257 - 622)) | (1 << (MySqlParser.CP850 - 622)) | (1 << (MySqlParser.CP852 - 622)) | (1 << (MySqlParser.CP866 - 622)) | (1 << (MySqlParser.CP932 - 622)) | (1 << (MySqlParser.DEC8 - 622)) | (1 << (MySqlParser.EUCJPMS - 622)) | (1 << (MySqlParser.EUCKR - 622)) | (1 << (MySqlParser.GB2312 - 622)))) !== 0) || ((((_la - 654)) & ~0x1f) == 0 && ((1 << (_la - 654)) & ((1 << (MySqlParser.GBK - 654)) | (1 << (MySqlParser.GEOSTD8 - 654)) | (1 << (MySqlParser.GREEK - 654)) | (1 << (MySqlParser.HEBREW - 654)) | (1 << (MySqlParser.HP8 - 654)) | (1 << (MySqlParser.KEYBCS2 - 654)) | (1 << (MySqlParser.KOI8R - 654)) | (1 << (MySqlParser.KOI8U - 654)) | (1 << (MySqlParser.LATIN1 - 654)) | (1 << (MySqlParser.LATIN2 - 654)) | (1 << (MySqlParser.LATIN5 - 654)) | (1 << (MySqlParser.LATIN7 - 654)) | (1 << (MySqlParser.MACCE - 654)) | (1 << (MySqlParser.MACROMAN - 654)) | (1 << (MySqlParser.SJIS - 654)) | (1 << (MySqlParser.SWE7 - 654)) | (1 << (MySqlParser.TIS620 - 654)) | (1 << (MySqlParser.UCS2 - 654)) | (1 << (MySqlParser.UJIS - 654)) | (1 << (MySqlParser.UTF16 - 654)) | (1 << (MySqlParser.UTF16LE - 654)) | (1 << (MySqlParser.UTF32 - 654)) | (1 << (MySqlParser.UTF8 - 654)) | (1 << (MySqlParser.UTF8MB3 - 654)) | (1 << (MySqlParser.UTF8MB4 - 654)) | (1 << (MySqlParser.ARCHIVE - 654)) | (1 << (MySqlParser.BLACKHOLE - 654)) | (1 << (MySqlParser.CSV - 654)) | (1 << (MySqlParser.FEDERATED - 654)) | (1 << (MySqlParser.INNODB - 654)) | (1 << (MySqlParser.MEMORY - 654)) | (1 << (MySqlParser.MRG_MYISAM - 654)))) !== 0) || ((((_la - 686)) & ~0x1f) == 0 && ((1 << (_la - 686)) & ((1 << (MySqlParser.MYISAM - 686)) | (1 << (MySqlParser.NDB - 686)) | (1 << (MySqlParser.NDBCLUSTER - 686)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 686)) | (1 << (MySqlParser.TOKUDB - 686)) | (1 << (MySqlParser.REPEATABLE - 686)) | (1 << (MySqlParser.COMMITTED - 686)) | (1 << (MySqlParser.UNCOMMITTED - 686)) | (1 << (MySqlParser.SERIALIZABLE - 686)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 686)) | (1 << (MySqlParser.LINESTRING - 686)) | (1 << (MySqlParser.MULTILINESTRING - 686)) | (1 << (MySqlParser.MULTIPOINT - 686)) | (1 << (MySqlParser.MULTIPOLYGON - 686)) | (1 << (MySqlParser.POINT - 686)) | (1 << (MySqlParser.POLYGON - 686)) | (1 << (MySqlParser.ABS - 686)) | (1 << (MySqlParser.ACOS - 686)) | (1 << (MySqlParser.ADDDATE - 686)) | (1 << (MySqlParser.ADDTIME - 686)) | (1 << (MySqlParser.AES_DECRYPT - 686)) | (1 << (MySqlParser.AES_ENCRYPT - 686)) | (1 << (MySqlParser.AREA - 686)) | (1 << (MySqlParser.ASBINARY - 686)) | (1 << (MySqlParser.ASIN - 686)) | (1 << (MySqlParser.ASTEXT - 686)) | (1 << (MySqlParser.ASWKB - 686)) | (1 << (MySqlParser.ASWKT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 686)))) !== 0) || ((((_la - 718)) & ~0x1f) == 0 && ((1 << (_la - 718)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 718)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 718)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 718)) | (1 << (MySqlParser.ATAN - 718)) | (1 << (MySqlParser.ATAN2 - 718)) | (1 << (MySqlParser.BENCHMARK - 718)) | (1 << (MySqlParser.BIN - 718)) | (1 << (MySqlParser.BIT_COUNT - 718)) | (1 << (MySqlParser.BIT_LENGTH - 718)) | (1 << (MySqlParser.BUFFER - 718)) | (1 << (MySqlParser.CATALOG_NAME - 718)) | (1 << (MySqlParser.CEIL - 718)) | (1 << (MySqlParser.CEILING - 718)) | (1 << (MySqlParser.CENTROID - 718)) | (1 << (MySqlParser.CHARACTER_LENGTH - 718)) | (1 << (MySqlParser.CHARSET - 718)) | (1 << (MySqlParser.CHAR_LENGTH - 718)) | (1 << (MySqlParser.COERCIBILITY - 718)) | (1 << (MySqlParser.COLLATION - 718)) | (1 << (MySqlParser.COMPRESS - 718)) | (1 << (MySqlParser.CONCAT - 718)) | (1 << (MySqlParser.CONCAT_WS - 718)) | (1 << (MySqlParser.CONNECTION_ID - 718)) | (1 << (MySqlParser.CONV - 718)) | (1 << (MySqlParser.CONVERT_TZ - 718)) | (1 << (MySqlParser.COS - 718)) | (1 << (MySqlParser.COT - 718)) | (1 << (MySqlParser.CRC32 - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 718)) | (1 << (MySqlParser.CREATE_DIGEST - 718)))) !== 0) || ((((_la - 750)) & ~0x1f) == 0 && ((1 << (_la - 750)) & ((1 << (MySqlParser.CROSSES - 750)) | (1 << (MySqlParser.DATEDIFF - 750)) | (1 << (MySqlParser.DATE_FORMAT - 750)) | (1 << (MySqlParser.DAYNAME - 750)) | (1 << (MySqlParser.DAYOFMONTH - 750)) | (1 << (MySqlParser.DAYOFWEEK - 750)) | (1 << (MySqlParser.DAYOFYEAR - 750)) | (1 << (MySqlParser.DECODE - 750)) | (1 << (MySqlParser.DEGREES - 750)) | (1 << (MySqlParser.DES_DECRYPT - 750)) | (1 << (MySqlParser.DES_ENCRYPT - 750)) | (1 << (MySqlParser.DIMENSION - 750)) | (1 << (MySqlParser.DISJOINT - 750)) | (1 << (MySqlParser.ELT - 750)) | (1 << (MySqlParser.ENCODE - 750)) | (1 << (MySqlParser.ENCRYPT - 750)) | (1 << (MySqlParser.ENDPOINT - 750)) | (1 << (MySqlParser.ENVELOPE - 750)) | (1 << (MySqlParser.EQUALS - 750)) | (1 << (MySqlParser.EXP - 750)) | (1 << (MySqlParser.EXPORT_SET - 750)) | (1 << (MySqlParser.EXTERIORRING - 750)) | (1 << (MySqlParser.EXTRACTVALUE - 750)) | (1 << (MySqlParser.FIELD - 750)) | (1 << (MySqlParser.FIND_IN_SET - 750)) | (1 << (MySqlParser.FLOOR - 750)) | (1 << (MySqlParser.FORMAT - 750)) | (1 << (MySqlParser.FOUND_ROWS - 750)) | (1 << (MySqlParser.FROM_BASE64 - 750)) | (1 << (MySqlParser.FROM_DAYS - 750)) | (1 << (MySqlParser.FROM_UNIXTIME - 750)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 750)))) !== 0) || ((((_la - 782)) & ~0x1f) == 0 && ((1 << (_la - 782)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYN - 782)) | (1 << (MySqlParser.GEOMETRYTYPE - 782)) | (1 << (MySqlParser.GEOMFROMTEXT - 782)) | (1 << (MySqlParser.GEOMFROMWKB - 782)) | (1 << (MySqlParser.GET_FORMAT - 782)) | (1 << (MySqlParser.GET_LOCK - 782)) | (1 << (MySqlParser.GLENGTH - 782)) | (1 << (MySqlParser.GREATEST - 782)) | (1 << (MySqlParser.GTID_SUBSET - 782)) | (1 << (MySqlParser.GTID_SUBTRACT - 782)) | (1 << (MySqlParser.HEX - 782)) | (1 << (MySqlParser.IFNULL - 782)) | (1 << (MySqlParser.INET6_ATON - 782)) | (1 << (MySqlParser.INET6_NTOA - 782)) | (1 << (MySqlParser.INET_ATON - 782)) | (1 << (MySqlParser.INET_NTOA - 782)) | (1 << (MySqlParser.INSTR - 782)) | (1 << (MySqlParser.INTERIORRINGN - 782)) | (1 << (MySqlParser.INTERSECTS - 782)) | (1 << (MySqlParser.ISCLOSED - 782)) | (1 << (MySqlParser.ISEMPTY - 782)) | (1 << (MySqlParser.ISNULL - 782)) | (1 << (MySqlParser.ISSIMPLE - 782)) | (1 << (MySqlParser.IS_FREE_LOCK - 782)) | (1 << (MySqlParser.IS_IPV4 - 782)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 782)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 782)))) !== 0) || ((((_la - 814)) & ~0x1f) == 0 && ((1 << (_la - 814)) & ((1 << (MySqlParser.IS_IPV6 - 814)) | (1 << (MySqlParser.IS_USED_LOCK - 814)) | (1 << (MySqlParser.LAST_INSERT_ID - 814)) | (1 << (MySqlParser.LCASE - 814)) | (1 << (MySqlParser.LEAST - 814)) | (1 << (MySqlParser.LENGTH - 814)) | (1 << (MySqlParser.LINEFROMTEXT - 814)) | (1 << (MySqlParser.LINEFROMWKB - 814)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 814)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 814)) | (1 << (MySqlParser.LN - 814)) | (1 << (MySqlParser.LOAD_FILE - 814)) | (1 << (MySqlParser.LOCATE - 814)) | (1 << (MySqlParser.LOG - 814)) | (1 << (MySqlParser.LOG10 - 814)) | (1 << (MySqlParser.LOG2 - 814)) | (1 << (MySqlParser.LOWER - 814)) | (1 << (MySqlParser.LPAD - 814)) | (1 << (MySqlParser.LTRIM - 814)) | (1 << (MySqlParser.MAKEDATE - 814)) | (1 << (MySqlParser.MAKETIME - 814)) | (1 << (MySqlParser.MAKE_SET - 814)) | (1 << (MySqlParser.MASTER_POS_WAIT - 814)) | (1 << (MySqlParser.MBRCONTAINS - 814)) | (1 << (MySqlParser.MBRDISJOINT - 814)) | (1 << (MySqlParser.MBREQUAL - 814)) | (1 << (MySqlParser.MBRINTERSECTS - 814)) | (1 << (MySqlParser.MBROVERLAPS - 814)) | (1 << (MySqlParser.MBRTOUCHES - 814)) | (1 << (MySqlParser.MBRWITHIN - 814)) | (1 << (MySqlParser.MD5 - 814)) | (1 << (MySqlParser.MLINEFROMTEXT - 814)))) !== 0) || ((((_la - 846)) & ~0x1f) == 0 && ((1 << (_la - 846)) & ((1 << (MySqlParser.MLINEFROMWKB - 846)) | (1 << (MySqlParser.MONTHNAME - 846)) | (1 << (MySqlParser.MPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MPOINTFROMWKB - 846)) | (1 << (MySqlParser.MPOLYFROMTEXT - 846)) | (1 << (MySqlParser.MPOLYFROMWKB - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 846)) | (1 << (MySqlParser.NAME_CONST - 846)) | (1 << (MySqlParser.NULLIF - 846)) | (1 << (MySqlParser.NUMGEOMETRIES - 846)) | (1 << (MySqlParser.NUMINTERIORRINGS - 846)) | (1 << (MySqlParser.NUMPOINTS - 846)) | (1 << (MySqlParser.OCT - 846)) | (1 << (MySqlParser.OCTET_LENGTH - 846)) | (1 << (MySqlParser.ORD - 846)) | (1 << (MySqlParser.OVERLAPS - 846)) | (1 << (MySqlParser.PERIOD_ADD - 846)) | (1 << (MySqlParser.PERIOD_DIFF - 846)) | (1 << (MySqlParser.PI - 846)) | (1 << (MySqlParser.POINTFROMTEXT - 846)) | (1 << (MySqlParser.POINTFROMWKB - 846)) | (1 << (MySqlParser.POINTN - 846)) | (1 << (MySqlParser.POLYFROMTEXT - 846)) | (1 << (MySqlParser.POLYFROMWKB - 846)) | (1 << (MySqlParser.POLYGONFROMTEXT - 846)) | (1 << (MySqlParser.POLYGONFROMWKB - 846)) | (1 << (MySqlParser.POW - 846)))) !== 0) || ((((_la - 878)) & ~0x1f) == 0 && ((1 << (_la - 878)) & ((1 << (MySqlParser.POWER - 878)) | (1 << (MySqlParser.QUOTE - 878)) | (1 << (MySqlParser.RADIANS - 878)) | (1 << (MySqlParser.RAND - 878)) | (1 << (MySqlParser.RANDOM_BYTES - 878)) | (1 << (MySqlParser.RELEASE_LOCK - 878)) | (1 << (MySqlParser.REVERSE - 878)) | (1 << (MySqlParser.ROUND - 878)) | (1 << (MySqlParser.ROW_COUNT - 878)) | (1 << (MySqlParser.RPAD - 878)) | (1 << (MySqlParser.RTRIM - 878)) | (1 << (MySqlParser.SEC_TO_TIME - 878)) | (1 << (MySqlParser.SESSION_USER - 878)) | (1 << (MySqlParser.SHA - 878)) | (1 << (MySqlParser.SHA1 - 878)) | (1 << (MySqlParser.SHA2 - 878)) | (1 << (MySqlParser.SCHEMA_NAME - 878)) | (1 << (MySqlParser.SIGN - 878)) | (1 << (MySqlParser.SIN - 878)) | (1 << (MySqlParser.SLEEP - 878)) | (1 << (MySqlParser.SOUNDEX - 878)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 878)) | (1 << (MySqlParser.SQRT - 878)) | (1 << (MySqlParser.SRID - 878)) | (1 << (MySqlParser.STARTPOINT - 878)) | (1 << (MySqlParser.STRCMP - 878)) | (1 << (MySqlParser.STR_TO_DATE - 878)) | (1 << (MySqlParser.ST_AREA - 878)) | (1 << (MySqlParser.ST_ASBINARY - 878)) | (1 << (MySqlParser.ST_ASTEXT - 878)) | (1 << (MySqlParser.ST_ASWKB - 878)) | (1 << (MySqlParser.ST_ASWKT - 878)))) !== 0) || ((((_la - 910)) & ~0x1f) == 0 && ((1 << (_la - 910)) & ((1 << (MySqlParser.ST_BUFFER - 910)) | (1 << (MySqlParser.ST_CENTROID - 910)) | (1 << (MySqlParser.ST_CONTAINS - 910)) | (1 << (MySqlParser.ST_CROSSES - 910)) | (1 << (MySqlParser.ST_DIFFERENCE - 910)) | (1 << (MySqlParser.ST_DIMENSION - 910)) | (1 << (MySqlParser.ST_DISJOINT - 910)) | (1 << (MySqlParser.ST_DISTANCE - 910)) | (1 << (MySqlParser.ST_ENDPOINT - 910)) | (1 << (MySqlParser.ST_ENVELOPE - 910)) | (1 << (MySqlParser.ST_EQUALS - 910)) | (1 << (MySqlParser.ST_EXTERIORRING - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYN - 910)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 910)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 910)) | (1 << (MySqlParser.ST_INTERIORRINGN - 910)) | (1 << (MySqlParser.ST_INTERSECTION - 910)) | (1 << (MySqlParser.ST_INTERSECTS - 910)) | (1 << (MySqlParser.ST_ISCLOSED - 910)) | (1 << (MySqlParser.ST_ISEMPTY - 910)) | (1 << (MySqlParser.ST_ISSIMPLE - 910)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 910)) | (1 << (MySqlParser.ST_LINEFROMWKB - 910)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 910)))) !== 0) || ((((_la - 942)) & ~0x1f) == 0 && ((1 << (_la - 942)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 942)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 942)) | (1 << (MySqlParser.ST_NUMPOINTS - 942)) | (1 << (MySqlParser.ST_OVERLAPS - 942)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 942)) | (1 << (MySqlParser.ST_POINTFROMWKB - 942)) | (1 << (MySqlParser.ST_POINTN - 942)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYFROMWKB - 942)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 942)) | (1 << (MySqlParser.ST_SRID - 942)) | (1 << (MySqlParser.ST_STARTPOINT - 942)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 942)) | (1 << (MySqlParser.ST_TOUCHES - 942)) | (1 << (MySqlParser.ST_UNION - 942)) | (1 << (MySqlParser.ST_WITHIN - 942)) | (1 << (MySqlParser.ST_X - 942)) | (1 << (MySqlParser.ST_Y - 942)) | (1 << (MySqlParser.SUBDATE - 942)) | (1 << (MySqlParser.SUBSTRING_INDEX - 942)) | (1 << (MySqlParser.SUBTIME - 942)) | (1 << (MySqlParser.SYSTEM_USER - 942)) | (1 << (MySqlParser.TAN - 942)) | (1 << (MySqlParser.TIMEDIFF - 942)) | (1 << (MySqlParser.TIMESTAMPADD - 942)) | (1 << (MySqlParser.TIMESTAMPDIFF - 942)) | (1 << (MySqlParser.TIME_FORMAT - 942)) | (1 << (MySqlParser.TIME_TO_SEC - 942)) | (1 << (MySqlParser.TOUCHES - 942)))) !== 0) || ((((_la - 974)) & ~0x1f) == 0 && ((1 << (_la - 974)) & ((1 << (MySqlParser.TO_BASE64 - 974)) | (1 << (MySqlParser.TO_DAYS - 974)) | (1 << (MySqlParser.TO_SECONDS - 974)) | (1 << (MySqlParser.UCASE - 974)) | (1 << (MySqlParser.UNCOMPRESS - 974)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 974)) | (1 << (MySqlParser.UNHEX - 974)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 974)) | (1 << (MySqlParser.UPDATEXML - 974)) | (1 << (MySqlParser.UPPER - 974)) | (1 << (MySqlParser.UUID - 974)) | (1 << (MySqlParser.UUID_SHORT - 974)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 974)) | (1 << (MySqlParser.VERSION - 974)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1 << (MySqlParser.WEEKDAY - 974)) | (1 << (MySqlParser.WEEKOFYEAR - 974)) | (1 << (MySqlParser.WEIGHT_STRING - 974)) | (1 << (MySqlParser.WITHIN - 974)) | (1 << (MySqlParser.YEARWEEK - 974)) | (1 << (MySqlParser.Y_FUNCTION - 974)) | (1 << (MySqlParser.X_FUNCTION - 974)))) !== 0) || ((((_la - 1034)) & ~0x1f) == 0 && ((1 << (_la - 1034)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (MySqlParser.STRING_LITERAL - 1034)) | (1 << (MySqlParser.ID - 1034)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1034)))) !== 0)) {
	                this.state = 1483;
	                localctx.index = this.uid();
	            }

	            this.state = 1487;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.USING) {
	                this.state = 1486;
	                this.indexType();
	            }

	            this.state = 1489;
	            this.indexColumnNames();
	            this.state = 1493;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.USING || _la===MySqlParser.WITH || _la===MySqlParser.COMMENT || _la===MySqlParser.INVISIBLE || _la===MySqlParser.KEY_BLOCK_SIZE || _la===MySqlParser.VISIBLE) {
	                this.state = 1490;
	                this.indexOption();
	                this.state = 1495;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            localctx = new UniqueKeyTableConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1500;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.CONSTRAINT) {
	                this.state = 1496;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 1498;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySqlParser.CURRENT - 32)) | (1 << (MySqlParser.DATABASE - 32)) | (1 << (MySqlParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySqlParser.LEFT || _la===MySqlParser.NUMBER || _la===MySqlParser.RIGHT || _la===MySqlParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.TIMESTAMP - 199)) | (1 << (MySqlParser.DATETIME - 199)) | (1 << (MySqlParser.YEAR - 199)) | (1 << (MySqlParser.TEXT - 199)) | (1 << (MySqlParser.ENUM - 199)) | (1 << (MySqlParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.JSON_VALID - 233)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySqlParser.AVG - 233)) | (1 << (MySqlParser.BIT_AND - 233)) | (1 << (MySqlParser.BIT_OR - 233)) | (1 << (MySqlParser.BIT_XOR - 233)) | (1 << (MySqlParser.COUNT - 233)) | (1 << (MySqlParser.GROUP_CONCAT - 233)) | (1 << (MySqlParser.MAX - 233)) | (1 << (MySqlParser.MIN - 233)) | (1 << (MySqlParser.STD - 233)) | (1 << (MySqlParser.STDDEV - 233)) | (1 << (MySqlParser.STDDEV_POP - 233)) | (1 << (MySqlParser.STDDEV_SAMP - 233)) | (1 << (MySqlParser.SUM - 233)) | (1 << (MySqlParser.VAR_POP - 233)) | (1 << (MySqlParser.VAR_SAMP - 233)) | (1 << (MySqlParser.VARIANCE - 233)) | (1 << (MySqlParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySqlParser.ACCOUNT - 270)) | (1 << (MySqlParser.ACTION - 270)) | (1 << (MySqlParser.AFTER - 270)) | (1 << (MySqlParser.AGGREGATE - 270)) | (1 << (MySqlParser.ALGORITHM - 270)) | (1 << (MySqlParser.ANY - 270)) | (1 << (MySqlParser.AT - 270)) | (1 << (MySqlParser.AUTHORS - 270)) | (1 << (MySqlParser.AUTOCOMMIT - 270)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySqlParser.AUTO_INCREMENT - 270)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 270)) | (1 << (MySqlParser.BEGIN - 270)) | (1 << (MySqlParser.BINLOG - 270)) | (1 << (MySqlParser.BIT - 270)) | (1 << (MySqlParser.BLOCK - 270)) | (1 << (MySqlParser.BOOL - 270)) | (1 << (MySqlParser.BOOLEAN - 270)) | (1 << (MySqlParser.BTREE - 270)) | (1 << (MySqlParser.CACHE - 270)) | (1 << (MySqlParser.CASCADED - 270)) | (1 << (MySqlParser.CHAIN - 270)) | (1 << (MySqlParser.CHANGED - 270)) | (1 << (MySqlParser.CHANNEL - 270)) | (1 << (MySqlParser.CHECKSUM - 270)) | (1 << (MySqlParser.PAGE_CHECKSUM - 270)) | (1 << (MySqlParser.CIPHER - 270)) | (1 << (MySqlParser.CLASS_ORIGIN - 270)) | (1 << (MySqlParser.CLIENT - 270)) | (1 << (MySqlParser.CLOSE - 270)) | (1 << (MySqlParser.COALESCE - 270)) | (1 << (MySqlParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySqlParser.COLUMNS - 302)) | (1 << (MySqlParser.COLUMN_FORMAT - 302)) | (1 << (MySqlParser.COLUMN_NAME - 302)) | (1 << (MySqlParser.COMMENT - 302)) | (1 << (MySqlParser.COMMIT - 302)) | (1 << (MySqlParser.COMPACT - 302)) | (1 << (MySqlParser.COMPLETION - 302)) | (1 << (MySqlParser.COMPRESSED - 302)) | (1 << (MySqlParser.COMPRESSION - 302)) | (1 << (MySqlParser.CONCURRENT - 302)) | (1 << (MySqlParser.CONNECTION - 302)) | (1 << (MySqlParser.CONSISTENT - 302)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySqlParser.CONSTRAINT_NAME - 302)) | (1 << (MySqlParser.CONTAINS - 302)) | (1 << (MySqlParser.CONTEXT - 302)) | (1 << (MySqlParser.CONTRIBUTORS - 302)) | (1 << (MySqlParser.COPY - 302)) | (1 << (MySqlParser.CPU - 302)) | (1 << (MySqlParser.CURSOR_NAME - 302)) | (1 << (MySqlParser.DATA - 302)) | (1 << (MySqlParser.DATAFILE - 302)) | (1 << (MySqlParser.DEALLOCATE - 302)) | (1 << (MySqlParser.DEFAULT_AUTH - 302)) | (1 << (MySqlParser.DEFINER - 302)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 302)) | (1 << (MySqlParser.DES_KEY_FILE - 302)) | (1 << (MySqlParser.DIRECTORY - 302)) | (1 << (MySqlParser.DISABLE - 302)) | (1 << (MySqlParser.DISCARD - 302)) | (1 << (MySqlParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySqlParser.DO - 334)) | (1 << (MySqlParser.DUMPFILE - 334)) | (1 << (MySqlParser.DUPLICATE - 334)) | (1 << (MySqlParser.DYNAMIC - 334)) | (1 << (MySqlParser.ENABLE - 334)) | (1 << (MySqlParser.ENCRYPTION - 334)) | (1 << (MySqlParser.END - 334)) | (1 << (MySqlParser.ENDS - 334)) | (1 << (MySqlParser.ENGINE - 334)) | (1 << (MySqlParser.ENGINES - 334)) | (1 << (MySqlParser.ERROR - 334)) | (1 << (MySqlParser.ERRORS - 334)) | (1 << (MySqlParser.ESCAPE - 334)) | (1 << (MySqlParser.EVEN - 334)) | (1 << (MySqlParser.EVENT - 334)) | (1 << (MySqlParser.EVENTS - 334)) | (1 << (MySqlParser.EVERY - 334)) | (1 << (MySqlParser.EXCHANGE - 334)) | (1 << (MySqlParser.EXCLUSIVE - 334)) | (1 << (MySqlParser.EXPIRE - 334)) | (1 << (MySqlParser.EXPORT - 334)) | (1 << (MySqlParser.EXTENDED - 334)) | (1 << (MySqlParser.EXTENT_SIZE - 334)) | (1 << (MySqlParser.FAST - 334)) | (1 << (MySqlParser.FAULTS - 334)) | (1 << (MySqlParser.FIELDS - 334)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySqlParser.FILTER - 334)) | (1 << (MySqlParser.FIRST - 334)) | (1 << (MySqlParser.FIXED - 334)) | (1 << (MySqlParser.FLUSH - 334)) | (1 << (MySqlParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySqlParser.FOUND - 366)) | (1 << (MySqlParser.FULL - 366)) | (1 << (MySqlParser.FUNCTION - 366)) | (1 << (MySqlParser.GENERAL - 366)) | (1 << (MySqlParser.GLOBAL - 366)) | (1 << (MySqlParser.GRANTS - 366)) | (1 << (MySqlParser.GROUP_REPLICATION - 366)) | (1 << (MySqlParser.HANDLER - 366)) | (1 << (MySqlParser.HASH - 366)) | (1 << (MySqlParser.HELP - 366)) | (1 << (MySqlParser.HOST - 366)) | (1 << (MySqlParser.HOSTS - 366)) | (1 << (MySqlParser.IDENTIFIED - 366)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySqlParser.IMPORT - 366)) | (1 << (MySqlParser.INDEXES - 366)) | (1 << (MySqlParser.INITIAL_SIZE - 366)) | (1 << (MySqlParser.INPLACE - 366)) | (1 << (MySqlParser.INSERT_METHOD - 366)) | (1 << (MySqlParser.INSTALL - 366)) | (1 << (MySqlParser.INSTANCE - 366)) | (1 << (MySqlParser.INVISIBLE - 366)) | (1 << (MySqlParser.INVOKER - 366)) | (1 << (MySqlParser.IO - 366)) | (1 << (MySqlParser.IO_THREAD - 366)) | (1 << (MySqlParser.IPC - 366)) | (1 << (MySqlParser.ISOLATION - 366)) | (1 << (MySqlParser.ISSUER - 366)) | (1 << (MySqlParser.JSON - 366)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySqlParser.LANGUAGE - 366)) | (1 << (MySqlParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.LEAVES - 398)) | (1 << (MySqlParser.LESS - 398)) | (1 << (MySqlParser.LEVEL - 398)) | (1 << (MySqlParser.LIST - 398)) | (1 << (MySqlParser.LOCAL - 398)) | (1 << (MySqlParser.LOGFILE - 398)) | (1 << (MySqlParser.LOGS - 398)) | (1 << (MySqlParser.MASTER - 398)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySqlParser.MASTER_DELAY - 398)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySqlParser.MASTER_HOST - 398)) | (1 << (MySqlParser.MASTER_LOG_FILE - 398)) | (1 << (MySqlParser.MASTER_LOG_POS - 398)) | (1 << (MySqlParser.MASTER_PASSWORD - 398)) | (1 << (MySqlParser.MASTER_PORT - 398)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySqlParser.MASTER_SSL - 398)) | (1 << (MySqlParser.MASTER_SSL_CA - 398)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_CERT - 398)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySqlParser.MASTER_SSL_CRL - 398)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_KEY - 398)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 398)) | (1 << (MySqlParser.MASTER_USER - 398)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySqlParser.MEDIUM - 430)) | (1 << (MySqlParser.MEMBER - 430)) | (1 << (MySqlParser.MERGE - 430)) | (1 << (MySqlParser.MESSAGE_TEXT - 430)) | (1 << (MySqlParser.MID - 430)) | (1 << (MySqlParser.MIGRATE - 430)) | (1 << (MySqlParser.MIN_ROWS - 430)) | (1 << (MySqlParser.MODE - 430)) | (1 << (MySqlParser.MODIFY - 430)) | (1 << (MySqlParser.MUTEX - 430)) | (1 << (MySqlParser.MYSQL - 430)) | (1 << (MySqlParser.MYSQL_ERRNO - 430)) | (1 << (MySqlParser.NAME - 430)) | (1 << (MySqlParser.NAMES - 430)) | (1 << (MySqlParser.NCHAR - 430)) | (1 << (MySqlParser.NEVER - 430)) | (1 << (MySqlParser.NEXT - 430)) | (1 << (MySqlParser.NO - 430)) | (1 << (MySqlParser.NODEGROUP - 430)) | (1 << (MySqlParser.NONE - 430)) | (1 << (MySqlParser.OFFLINE - 430)) | (1 << (MySqlParser.OFFSET - 430)) | (1 << (MySqlParser.OF - 430)) | (1 << (MySqlParser.OJ - 430)) | (1 << (MySqlParser.OLD_PASSWORD - 430)) | (1 << (MySqlParser.ONE - 430)) | (1 << (MySqlParser.ONLINE - 430)) | (1 << (MySqlParser.ONLY - 430)) | (1 << (MySqlParser.OPEN - 430)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySqlParser.OPTIONS - 462)) | (1 << (MySqlParser.OWNER - 462)) | (1 << (MySqlParser.PACK_KEYS - 462)) | (1 << (MySqlParser.PAGE - 462)) | (1 << (MySqlParser.PARSER - 462)) | (1 << (MySqlParser.PARTIAL - 462)) | (1 << (MySqlParser.PARTITIONING - 462)) | (1 << (MySqlParser.PARTITIONS - 462)) | (1 << (MySqlParser.PASSWORD - 462)) | (1 << (MySqlParser.PHASE - 462)) | (1 << (MySqlParser.PLUGIN - 462)) | (1 << (MySqlParser.PLUGIN_DIR - 462)) | (1 << (MySqlParser.PLUGINS - 462)) | (1 << (MySqlParser.PORT - 462)) | (1 << (MySqlParser.PRECEDES - 462)) | (1 << (MySqlParser.PREPARE - 462)) | (1 << (MySqlParser.PRESERVE - 462)) | (1 << (MySqlParser.PREV - 462)) | (1 << (MySqlParser.PROCESSLIST - 462)) | (1 << (MySqlParser.PROFILE - 462)) | (1 << (MySqlParser.PROFILES - 462)) | (1 << (MySqlParser.PROXY - 462)) | (1 << (MySqlParser.QUERY - 462)) | (1 << (MySqlParser.QUICK - 462)) | (1 << (MySqlParser.REBUILD - 462)) | (1 << (MySqlParser.RECOVER - 462)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySqlParser.REDUNDANT - 462)) | (1 << (MySqlParser.RELAY - 462)) | (1 << (MySqlParser.RELAY_LOG_FILE - 462)) | (1 << (MySqlParser.RELAY_LOG_POS - 462)) | (1 << (MySqlParser.RELAYLOG - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySqlParser.REMOVE - 494)) | (1 << (MySqlParser.REORGANIZE - 494)) | (1 << (MySqlParser.REPAIR - 494)) | (1 << (MySqlParser.REPLICATE_DO_DB - 494)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATION - 494)) | (1 << (MySqlParser.RESET - 494)) | (1 << (MySqlParser.RESUME - 494)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 494)) | (1 << (MySqlParser.RETURNS - 494)) | (1 << (MySqlParser.ROLE - 494)) | (1 << (MySqlParser.ROLLBACK - 494)) | (1 << (MySqlParser.ROLLUP - 494)) | (1 << (MySqlParser.ROTATE - 494)) | (1 << (MySqlParser.ROW - 494)) | (1 << (MySqlParser.ROWS - 494)) | (1 << (MySqlParser.ROW_FORMAT - 494)) | (1 << (MySqlParser.SAVEPOINT - 494)) | (1 << (MySqlParser.SCHEDULE - 494)) | (1 << (MySqlParser.SECURITY - 494)) | (1 << (MySqlParser.SERVER - 494)) | (1 << (MySqlParser.SESSION - 494)) | (1 << (MySqlParser.SHARE - 494)) | (1 << (MySqlParser.SHARED - 494)) | (1 << (MySqlParser.SIGNED - 494)) | (1 << (MySqlParser.SIMPLE - 494)) | (1 << (MySqlParser.SLAVE - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySqlParser.SLOW - 526)) | (1 << (MySqlParser.SNAPSHOT - 526)) | (1 << (MySqlParser.SOCKET - 526)) | (1 << (MySqlParser.SOME - 526)) | (1 << (MySqlParser.SONAME - 526)) | (1 << (MySqlParser.SOUNDS - 526)) | (1 << (MySqlParser.SOURCE - 526)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySqlParser.SQL_CACHE - 526)) | (1 << (MySqlParser.SQL_NO_CACHE - 526)) | (1 << (MySqlParser.SQL_THREAD - 526)) | (1 << (MySqlParser.START - 526)) | (1 << (MySqlParser.STARTS - 526)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 526)) | (1 << (MySqlParser.STATS_PERSISTENT - 526)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySqlParser.STATUS - 526)) | (1 << (MySqlParser.STOP - 526)) | (1 << (MySqlParser.STORAGE - 526)) | (1 << (MySqlParser.STRING - 526)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySqlParser.SUBJECT - 526)) | (1 << (MySqlParser.SUBPARTITION - 526)) | (1 << (MySqlParser.SUBPARTITIONS - 526)) | (1 << (MySqlParser.SUSPEND - 526)) | (1 << (MySqlParser.SWAPS - 526)) | (1 << (MySqlParser.SWITCHES - 526)) | (1 << (MySqlParser.TABLE_NAME - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySqlParser.TABLESPACE - 558)) | (1 << (MySqlParser.TEMPORARY - 558)) | (1 << (MySqlParser.TEMPTABLE - 558)) | (1 << (MySqlParser.THAN - 558)) | (1 << (MySqlParser.TRADITIONAL - 558)) | (1 << (MySqlParser.TRANSACTION - 558)) | (1 << (MySqlParser.TRANSACTIONAL - 558)) | (1 << (MySqlParser.TRIGGERS - 558)) | (1 << (MySqlParser.TRUNCATE - 558)) | (1 << (MySqlParser.UNDEFINED - 558)) | (1 << (MySqlParser.UNDOFILE - 558)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySqlParser.UNINSTALL - 558)) | (1 << (MySqlParser.UNKNOWN - 558)) | (1 << (MySqlParser.UNTIL - 558)) | (1 << (MySqlParser.UPGRADE - 558)) | (1 << (MySqlParser.USER - 558)) | (1 << (MySqlParser.USE_FRM - 558)) | (1 << (MySqlParser.USER_RESOURCES - 558)) | (1 << (MySqlParser.VALIDATION - 558)) | (1 << (MySqlParser.VALUE - 558)) | (1 << (MySqlParser.VARIABLES - 558)) | (1 << (MySqlParser.VIEW - 558)) | (1 << (MySqlParser.VISIBLE - 558)) | (1 << (MySqlParser.WAIT - 558)) | (1 << (MySqlParser.WARNINGS - 558)) | (1 << (MySqlParser.WITHOUT - 558)) | (1 << (MySqlParser.WORK - 558)) | (1 << (MySqlParser.WRAPPER - 558)) | (1 << (MySqlParser.X509 - 558)) | (1 << (MySqlParser.XA - 558)))) !== 0) || ((((_la - 590)) & ~0x1f) == 0 && ((1 << (_la - 590)) & ((1 << (MySqlParser.XML - 590)) | (1 << (MySqlParser.INTERNAL - 590)) | (1 << (MySqlParser.QUARTER - 590)) | (1 << (MySqlParser.MONTH - 590)) | (1 << (MySqlParser.DAY - 590)) | (1 << (MySqlParser.HOUR - 590)) | (1 << (MySqlParser.MINUTE - 590)) | (1 << (MySqlParser.WEEK - 590)) | (1 << (MySqlParser.SECOND - 590)) | (1 << (MySqlParser.MICROSECOND - 590)) | (1 << (MySqlParser.TABLES - 590)) | (1 << (MySqlParser.ROUTINE - 590)) | (1 << (MySqlParser.EXECUTE - 590)) | (1 << (MySqlParser.FILE - 590)) | (1 << (MySqlParser.PROCESS - 590)) | (1 << (MySqlParser.RELOAD - 590)) | (1 << (MySqlParser.SHUTDOWN - 590)) | (1 << (MySqlParser.SUPER - 590)) | (1 << (MySqlParser.PRIVILEGES - 590)) | (1 << (MySqlParser.AUDIT_ADMIN - 590)) | (1 << (MySqlParser.BACKUP_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 590)) | (1 << (MySqlParser.CLONE_ADMIN - 590)) | (1 << (MySqlParser.CONNECTION_ADMIN - 590)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 590)) | (1 << (MySqlParser.FIREWALL_ADMIN - 590)))) !== 0) || ((((_la - 622)) & ~0x1f) == 0 && ((1 << (_la - 622)) & ((1 << (MySqlParser.FIREWALL_USER - 622)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 622)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 622)) | (1 << (MySqlParser.NDB_STORED_USER - 622)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.REPLICATION_APPLIER - 622)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 622)) | (1 << (MySqlParser.ROLE_ADMIN - 622)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.SET_USER_ID - 622)) | (1 << (MySqlParser.SHOW_ROUTINE - 622)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 622)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 622)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 622)) | (1 << (MySqlParser.ARMSCII8 - 622)) | (1 << (MySqlParser.ASCII - 622)) | (1 << (MySqlParser.BIG5 - 622)) | (1 << (MySqlParser.CP1250 - 622)) | (1 << (MySqlParser.CP1251 - 622)) | (1 << (MySqlParser.CP1256 - 622)) | (1 << (MySqlParser.CP1257 - 622)) | (1 << (MySqlParser.CP850 - 622)) | (1 << (MySqlParser.CP852 - 622)) | (1 << (MySqlParser.CP866 - 622)) | (1 << (MySqlParser.CP932 - 622)) | (1 << (MySqlParser.DEC8 - 622)) | (1 << (MySqlParser.EUCJPMS - 622)) | (1 << (MySqlParser.EUCKR - 622)) | (1 << (MySqlParser.GB2312 - 622)))) !== 0) || ((((_la - 654)) & ~0x1f) == 0 && ((1 << (_la - 654)) & ((1 << (MySqlParser.GBK - 654)) | (1 << (MySqlParser.GEOSTD8 - 654)) | (1 << (MySqlParser.GREEK - 654)) | (1 << (MySqlParser.HEBREW - 654)) | (1 << (MySqlParser.HP8 - 654)) | (1 << (MySqlParser.KEYBCS2 - 654)) | (1 << (MySqlParser.KOI8R - 654)) | (1 << (MySqlParser.KOI8U - 654)) | (1 << (MySqlParser.LATIN1 - 654)) | (1 << (MySqlParser.LATIN2 - 654)) | (1 << (MySqlParser.LATIN5 - 654)) | (1 << (MySqlParser.LATIN7 - 654)) | (1 << (MySqlParser.MACCE - 654)) | (1 << (MySqlParser.MACROMAN - 654)) | (1 << (MySqlParser.SJIS - 654)) | (1 << (MySqlParser.SWE7 - 654)) | (1 << (MySqlParser.TIS620 - 654)) | (1 << (MySqlParser.UCS2 - 654)) | (1 << (MySqlParser.UJIS - 654)) | (1 << (MySqlParser.UTF16 - 654)) | (1 << (MySqlParser.UTF16LE - 654)) | (1 << (MySqlParser.UTF32 - 654)) | (1 << (MySqlParser.UTF8 - 654)) | (1 << (MySqlParser.UTF8MB3 - 654)) | (1 << (MySqlParser.UTF8MB4 - 654)) | (1 << (MySqlParser.ARCHIVE - 654)) | (1 << (MySqlParser.BLACKHOLE - 654)) | (1 << (MySqlParser.CSV - 654)) | (1 << (MySqlParser.FEDERATED - 654)) | (1 << (MySqlParser.INNODB - 654)) | (1 << (MySqlParser.MEMORY - 654)) | (1 << (MySqlParser.MRG_MYISAM - 654)))) !== 0) || ((((_la - 686)) & ~0x1f) == 0 && ((1 << (_la - 686)) & ((1 << (MySqlParser.MYISAM - 686)) | (1 << (MySqlParser.NDB - 686)) | (1 << (MySqlParser.NDBCLUSTER - 686)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 686)) | (1 << (MySqlParser.TOKUDB - 686)) | (1 << (MySqlParser.REPEATABLE - 686)) | (1 << (MySqlParser.COMMITTED - 686)) | (1 << (MySqlParser.UNCOMMITTED - 686)) | (1 << (MySqlParser.SERIALIZABLE - 686)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 686)) | (1 << (MySqlParser.LINESTRING - 686)) | (1 << (MySqlParser.MULTILINESTRING - 686)) | (1 << (MySqlParser.MULTIPOINT - 686)) | (1 << (MySqlParser.MULTIPOLYGON - 686)) | (1 << (MySqlParser.POINT - 686)) | (1 << (MySqlParser.POLYGON - 686)) | (1 << (MySqlParser.ABS - 686)) | (1 << (MySqlParser.ACOS - 686)) | (1 << (MySqlParser.ADDDATE - 686)) | (1 << (MySqlParser.ADDTIME - 686)) | (1 << (MySqlParser.AES_DECRYPT - 686)) | (1 << (MySqlParser.AES_ENCRYPT - 686)) | (1 << (MySqlParser.AREA - 686)) | (1 << (MySqlParser.ASBINARY - 686)) | (1 << (MySqlParser.ASIN - 686)) | (1 << (MySqlParser.ASTEXT - 686)) | (1 << (MySqlParser.ASWKB - 686)) | (1 << (MySqlParser.ASWKT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 686)))) !== 0) || ((((_la - 718)) & ~0x1f) == 0 && ((1 << (_la - 718)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 718)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 718)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 718)) | (1 << (MySqlParser.ATAN - 718)) | (1 << (MySqlParser.ATAN2 - 718)) | (1 << (MySqlParser.BENCHMARK - 718)) | (1 << (MySqlParser.BIN - 718)) | (1 << (MySqlParser.BIT_COUNT - 718)) | (1 << (MySqlParser.BIT_LENGTH - 718)) | (1 << (MySqlParser.BUFFER - 718)) | (1 << (MySqlParser.CATALOG_NAME - 718)) | (1 << (MySqlParser.CEIL - 718)) | (1 << (MySqlParser.CEILING - 718)) | (1 << (MySqlParser.CENTROID - 718)) | (1 << (MySqlParser.CHARACTER_LENGTH - 718)) | (1 << (MySqlParser.CHARSET - 718)) | (1 << (MySqlParser.CHAR_LENGTH - 718)) | (1 << (MySqlParser.COERCIBILITY - 718)) | (1 << (MySqlParser.COLLATION - 718)) | (1 << (MySqlParser.COMPRESS - 718)) | (1 << (MySqlParser.CONCAT - 718)) | (1 << (MySqlParser.CONCAT_WS - 718)) | (1 << (MySqlParser.CONNECTION_ID - 718)) | (1 << (MySqlParser.CONV - 718)) | (1 << (MySqlParser.CONVERT_TZ - 718)) | (1 << (MySqlParser.COS - 718)) | (1 << (MySqlParser.COT - 718)) | (1 << (MySqlParser.CRC32 - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 718)) | (1 << (MySqlParser.CREATE_DIGEST - 718)))) !== 0) || ((((_la - 750)) & ~0x1f) == 0 && ((1 << (_la - 750)) & ((1 << (MySqlParser.CROSSES - 750)) | (1 << (MySqlParser.DATEDIFF - 750)) | (1 << (MySqlParser.DATE_FORMAT - 750)) | (1 << (MySqlParser.DAYNAME - 750)) | (1 << (MySqlParser.DAYOFMONTH - 750)) | (1 << (MySqlParser.DAYOFWEEK - 750)) | (1 << (MySqlParser.DAYOFYEAR - 750)) | (1 << (MySqlParser.DECODE - 750)) | (1 << (MySqlParser.DEGREES - 750)) | (1 << (MySqlParser.DES_DECRYPT - 750)) | (1 << (MySqlParser.DES_ENCRYPT - 750)) | (1 << (MySqlParser.DIMENSION - 750)) | (1 << (MySqlParser.DISJOINT - 750)) | (1 << (MySqlParser.ELT - 750)) | (1 << (MySqlParser.ENCODE - 750)) | (1 << (MySqlParser.ENCRYPT - 750)) | (1 << (MySqlParser.ENDPOINT - 750)) | (1 << (MySqlParser.ENVELOPE - 750)) | (1 << (MySqlParser.EQUALS - 750)) | (1 << (MySqlParser.EXP - 750)) | (1 << (MySqlParser.EXPORT_SET - 750)) | (1 << (MySqlParser.EXTERIORRING - 750)) | (1 << (MySqlParser.EXTRACTVALUE - 750)) | (1 << (MySqlParser.FIELD - 750)) | (1 << (MySqlParser.FIND_IN_SET - 750)) | (1 << (MySqlParser.FLOOR - 750)) | (1 << (MySqlParser.FORMAT - 750)) | (1 << (MySqlParser.FOUND_ROWS - 750)) | (1 << (MySqlParser.FROM_BASE64 - 750)) | (1 << (MySqlParser.FROM_DAYS - 750)) | (1 << (MySqlParser.FROM_UNIXTIME - 750)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 750)))) !== 0) || ((((_la - 782)) & ~0x1f) == 0 && ((1 << (_la - 782)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYN - 782)) | (1 << (MySqlParser.GEOMETRYTYPE - 782)) | (1 << (MySqlParser.GEOMFROMTEXT - 782)) | (1 << (MySqlParser.GEOMFROMWKB - 782)) | (1 << (MySqlParser.GET_FORMAT - 782)) | (1 << (MySqlParser.GET_LOCK - 782)) | (1 << (MySqlParser.GLENGTH - 782)) | (1 << (MySqlParser.GREATEST - 782)) | (1 << (MySqlParser.GTID_SUBSET - 782)) | (1 << (MySqlParser.GTID_SUBTRACT - 782)) | (1 << (MySqlParser.HEX - 782)) | (1 << (MySqlParser.IFNULL - 782)) | (1 << (MySqlParser.INET6_ATON - 782)) | (1 << (MySqlParser.INET6_NTOA - 782)) | (1 << (MySqlParser.INET_ATON - 782)) | (1 << (MySqlParser.INET_NTOA - 782)) | (1 << (MySqlParser.INSTR - 782)) | (1 << (MySqlParser.INTERIORRINGN - 782)) | (1 << (MySqlParser.INTERSECTS - 782)) | (1 << (MySqlParser.ISCLOSED - 782)) | (1 << (MySqlParser.ISEMPTY - 782)) | (1 << (MySqlParser.ISNULL - 782)) | (1 << (MySqlParser.ISSIMPLE - 782)) | (1 << (MySqlParser.IS_FREE_LOCK - 782)) | (1 << (MySqlParser.IS_IPV4 - 782)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 782)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 782)))) !== 0) || ((((_la - 814)) & ~0x1f) == 0 && ((1 << (_la - 814)) & ((1 << (MySqlParser.IS_IPV6 - 814)) | (1 << (MySqlParser.IS_USED_LOCK - 814)) | (1 << (MySqlParser.LAST_INSERT_ID - 814)) | (1 << (MySqlParser.LCASE - 814)) | (1 << (MySqlParser.LEAST - 814)) | (1 << (MySqlParser.LENGTH - 814)) | (1 << (MySqlParser.LINEFROMTEXT - 814)) | (1 << (MySqlParser.LINEFROMWKB - 814)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 814)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 814)) | (1 << (MySqlParser.LN - 814)) | (1 << (MySqlParser.LOAD_FILE - 814)) | (1 << (MySqlParser.LOCATE - 814)) | (1 << (MySqlParser.LOG - 814)) | (1 << (MySqlParser.LOG10 - 814)) | (1 << (MySqlParser.LOG2 - 814)) | (1 << (MySqlParser.LOWER - 814)) | (1 << (MySqlParser.LPAD - 814)) | (1 << (MySqlParser.LTRIM - 814)) | (1 << (MySqlParser.MAKEDATE - 814)) | (1 << (MySqlParser.MAKETIME - 814)) | (1 << (MySqlParser.MAKE_SET - 814)) | (1 << (MySqlParser.MASTER_POS_WAIT - 814)) | (1 << (MySqlParser.MBRCONTAINS - 814)) | (1 << (MySqlParser.MBRDISJOINT - 814)) | (1 << (MySqlParser.MBREQUAL - 814)) | (1 << (MySqlParser.MBRINTERSECTS - 814)) | (1 << (MySqlParser.MBROVERLAPS - 814)) | (1 << (MySqlParser.MBRTOUCHES - 814)) | (1 << (MySqlParser.MBRWITHIN - 814)) | (1 << (MySqlParser.MD5 - 814)) | (1 << (MySqlParser.MLINEFROMTEXT - 814)))) !== 0) || ((((_la - 846)) & ~0x1f) == 0 && ((1 << (_la - 846)) & ((1 << (MySqlParser.MLINEFROMWKB - 846)) | (1 << (MySqlParser.MONTHNAME - 846)) | (1 << (MySqlParser.MPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MPOINTFROMWKB - 846)) | (1 << (MySqlParser.MPOLYFROMTEXT - 846)) | (1 << (MySqlParser.MPOLYFROMWKB - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 846)) | (1 << (MySqlParser.NAME_CONST - 846)) | (1 << (MySqlParser.NULLIF - 846)) | (1 << (MySqlParser.NUMGEOMETRIES - 846)) | (1 << (MySqlParser.NUMINTERIORRINGS - 846)) | (1 << (MySqlParser.NUMPOINTS - 846)) | (1 << (MySqlParser.OCT - 846)) | (1 << (MySqlParser.OCTET_LENGTH - 846)) | (1 << (MySqlParser.ORD - 846)) | (1 << (MySqlParser.OVERLAPS - 846)) | (1 << (MySqlParser.PERIOD_ADD - 846)) | (1 << (MySqlParser.PERIOD_DIFF - 846)) | (1 << (MySqlParser.PI - 846)) | (1 << (MySqlParser.POINTFROMTEXT - 846)) | (1 << (MySqlParser.POINTFROMWKB - 846)) | (1 << (MySqlParser.POINTN - 846)) | (1 << (MySqlParser.POLYFROMTEXT - 846)) | (1 << (MySqlParser.POLYFROMWKB - 846)) | (1 << (MySqlParser.POLYGONFROMTEXT - 846)) | (1 << (MySqlParser.POLYGONFROMWKB - 846)) | (1 << (MySqlParser.POW - 846)))) !== 0) || ((((_la - 878)) & ~0x1f) == 0 && ((1 << (_la - 878)) & ((1 << (MySqlParser.POWER - 878)) | (1 << (MySqlParser.QUOTE - 878)) | (1 << (MySqlParser.RADIANS - 878)) | (1 << (MySqlParser.RAND - 878)) | (1 << (MySqlParser.RANDOM_BYTES - 878)) | (1 << (MySqlParser.RELEASE_LOCK - 878)) | (1 << (MySqlParser.REVERSE - 878)) | (1 << (MySqlParser.ROUND - 878)) | (1 << (MySqlParser.ROW_COUNT - 878)) | (1 << (MySqlParser.RPAD - 878)) | (1 << (MySqlParser.RTRIM - 878)) | (1 << (MySqlParser.SEC_TO_TIME - 878)) | (1 << (MySqlParser.SESSION_USER - 878)) | (1 << (MySqlParser.SHA - 878)) | (1 << (MySqlParser.SHA1 - 878)) | (1 << (MySqlParser.SHA2 - 878)) | (1 << (MySqlParser.SCHEMA_NAME - 878)) | (1 << (MySqlParser.SIGN - 878)) | (1 << (MySqlParser.SIN - 878)) | (1 << (MySqlParser.SLEEP - 878)) | (1 << (MySqlParser.SOUNDEX - 878)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 878)) | (1 << (MySqlParser.SQRT - 878)) | (1 << (MySqlParser.SRID - 878)) | (1 << (MySqlParser.STARTPOINT - 878)) | (1 << (MySqlParser.STRCMP - 878)) | (1 << (MySqlParser.STR_TO_DATE - 878)) | (1 << (MySqlParser.ST_AREA - 878)) | (1 << (MySqlParser.ST_ASBINARY - 878)) | (1 << (MySqlParser.ST_ASTEXT - 878)) | (1 << (MySqlParser.ST_ASWKB - 878)) | (1 << (MySqlParser.ST_ASWKT - 878)))) !== 0) || ((((_la - 910)) & ~0x1f) == 0 && ((1 << (_la - 910)) & ((1 << (MySqlParser.ST_BUFFER - 910)) | (1 << (MySqlParser.ST_CENTROID - 910)) | (1 << (MySqlParser.ST_CONTAINS - 910)) | (1 << (MySqlParser.ST_CROSSES - 910)) | (1 << (MySqlParser.ST_DIFFERENCE - 910)) | (1 << (MySqlParser.ST_DIMENSION - 910)) | (1 << (MySqlParser.ST_DISJOINT - 910)) | (1 << (MySqlParser.ST_DISTANCE - 910)) | (1 << (MySqlParser.ST_ENDPOINT - 910)) | (1 << (MySqlParser.ST_ENVELOPE - 910)) | (1 << (MySqlParser.ST_EQUALS - 910)) | (1 << (MySqlParser.ST_EXTERIORRING - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYN - 910)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 910)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 910)) | (1 << (MySqlParser.ST_INTERIORRINGN - 910)) | (1 << (MySqlParser.ST_INTERSECTION - 910)) | (1 << (MySqlParser.ST_INTERSECTS - 910)) | (1 << (MySqlParser.ST_ISCLOSED - 910)) | (1 << (MySqlParser.ST_ISEMPTY - 910)) | (1 << (MySqlParser.ST_ISSIMPLE - 910)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 910)) | (1 << (MySqlParser.ST_LINEFROMWKB - 910)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 910)))) !== 0) || ((((_la - 942)) & ~0x1f) == 0 && ((1 << (_la - 942)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 942)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 942)) | (1 << (MySqlParser.ST_NUMPOINTS - 942)) | (1 << (MySqlParser.ST_OVERLAPS - 942)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 942)) | (1 << (MySqlParser.ST_POINTFROMWKB - 942)) | (1 << (MySqlParser.ST_POINTN - 942)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYFROMWKB - 942)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 942)) | (1 << (MySqlParser.ST_SRID - 942)) | (1 << (MySqlParser.ST_STARTPOINT - 942)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 942)) | (1 << (MySqlParser.ST_TOUCHES - 942)) | (1 << (MySqlParser.ST_UNION - 942)) | (1 << (MySqlParser.ST_WITHIN - 942)) | (1 << (MySqlParser.ST_X - 942)) | (1 << (MySqlParser.ST_Y - 942)) | (1 << (MySqlParser.SUBDATE - 942)) | (1 << (MySqlParser.SUBSTRING_INDEX - 942)) | (1 << (MySqlParser.SUBTIME - 942)) | (1 << (MySqlParser.SYSTEM_USER - 942)) | (1 << (MySqlParser.TAN - 942)) | (1 << (MySqlParser.TIMEDIFF - 942)) | (1 << (MySqlParser.TIMESTAMPADD - 942)) | (1 << (MySqlParser.TIMESTAMPDIFF - 942)) | (1 << (MySqlParser.TIME_FORMAT - 942)) | (1 << (MySqlParser.TIME_TO_SEC - 942)) | (1 << (MySqlParser.TOUCHES - 942)))) !== 0) || ((((_la - 974)) & ~0x1f) == 0 && ((1 << (_la - 974)) & ((1 << (MySqlParser.TO_BASE64 - 974)) | (1 << (MySqlParser.TO_DAYS - 974)) | (1 << (MySqlParser.TO_SECONDS - 974)) | (1 << (MySqlParser.UCASE - 974)) | (1 << (MySqlParser.UNCOMPRESS - 974)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 974)) | (1 << (MySqlParser.UNHEX - 974)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 974)) | (1 << (MySqlParser.UPDATEXML - 974)) | (1 << (MySqlParser.UPPER - 974)) | (1 << (MySqlParser.UUID - 974)) | (1 << (MySqlParser.UUID_SHORT - 974)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 974)) | (1 << (MySqlParser.VERSION - 974)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1 << (MySqlParser.WEEKDAY - 974)) | (1 << (MySqlParser.WEEKOFYEAR - 974)) | (1 << (MySqlParser.WEIGHT_STRING - 974)) | (1 << (MySqlParser.WITHIN - 974)) | (1 << (MySqlParser.YEARWEEK - 974)) | (1 << (MySqlParser.Y_FUNCTION - 974)) | (1 << (MySqlParser.X_FUNCTION - 974)))) !== 0) || ((((_la - 1034)) & ~0x1f) == 0 && ((1 << (_la - 1034)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (MySqlParser.STRING_LITERAL - 1034)) | (1 << (MySqlParser.ID - 1034)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1034)))) !== 0)) {
	                    this.state = 1497;
	                    localctx.name = this.uid();
	                }

	            }

	            this.state = 1502;
	            this.match(MySqlParser.UNIQUE);
	            this.state = 1504;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.INDEX || _la===MySqlParser.KEY) {
	                this.state = 1503;
	                localctx.indexFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.INDEX || _la===MySqlParser.KEY)) {
	                    localctx.indexFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 1507;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySqlParser.CURRENT - 32)) | (1 << (MySqlParser.DATABASE - 32)) | (1 << (MySqlParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySqlParser.LEFT || _la===MySqlParser.NUMBER || _la===MySqlParser.RIGHT || _la===MySqlParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.TIMESTAMP - 199)) | (1 << (MySqlParser.DATETIME - 199)) | (1 << (MySqlParser.YEAR - 199)) | (1 << (MySqlParser.TEXT - 199)) | (1 << (MySqlParser.ENUM - 199)) | (1 << (MySqlParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.JSON_VALID - 233)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySqlParser.AVG - 233)) | (1 << (MySqlParser.BIT_AND - 233)) | (1 << (MySqlParser.BIT_OR - 233)) | (1 << (MySqlParser.BIT_XOR - 233)) | (1 << (MySqlParser.COUNT - 233)) | (1 << (MySqlParser.GROUP_CONCAT - 233)) | (1 << (MySqlParser.MAX - 233)) | (1 << (MySqlParser.MIN - 233)) | (1 << (MySqlParser.STD - 233)) | (1 << (MySqlParser.STDDEV - 233)) | (1 << (MySqlParser.STDDEV_POP - 233)) | (1 << (MySqlParser.STDDEV_SAMP - 233)) | (1 << (MySqlParser.SUM - 233)) | (1 << (MySqlParser.VAR_POP - 233)) | (1 << (MySqlParser.VAR_SAMP - 233)) | (1 << (MySqlParser.VARIANCE - 233)) | (1 << (MySqlParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySqlParser.ACCOUNT - 270)) | (1 << (MySqlParser.ACTION - 270)) | (1 << (MySqlParser.AFTER - 270)) | (1 << (MySqlParser.AGGREGATE - 270)) | (1 << (MySqlParser.ALGORITHM - 270)) | (1 << (MySqlParser.ANY - 270)) | (1 << (MySqlParser.AT - 270)) | (1 << (MySqlParser.AUTHORS - 270)) | (1 << (MySqlParser.AUTOCOMMIT - 270)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySqlParser.AUTO_INCREMENT - 270)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 270)) | (1 << (MySqlParser.BEGIN - 270)) | (1 << (MySqlParser.BINLOG - 270)) | (1 << (MySqlParser.BIT - 270)) | (1 << (MySqlParser.BLOCK - 270)) | (1 << (MySqlParser.BOOL - 270)) | (1 << (MySqlParser.BOOLEAN - 270)) | (1 << (MySqlParser.BTREE - 270)) | (1 << (MySqlParser.CACHE - 270)) | (1 << (MySqlParser.CASCADED - 270)) | (1 << (MySqlParser.CHAIN - 270)) | (1 << (MySqlParser.CHANGED - 270)) | (1 << (MySqlParser.CHANNEL - 270)) | (1 << (MySqlParser.CHECKSUM - 270)) | (1 << (MySqlParser.PAGE_CHECKSUM - 270)) | (1 << (MySqlParser.CIPHER - 270)) | (1 << (MySqlParser.CLASS_ORIGIN - 270)) | (1 << (MySqlParser.CLIENT - 270)) | (1 << (MySqlParser.CLOSE - 270)) | (1 << (MySqlParser.COALESCE - 270)) | (1 << (MySqlParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySqlParser.COLUMNS - 302)) | (1 << (MySqlParser.COLUMN_FORMAT - 302)) | (1 << (MySqlParser.COLUMN_NAME - 302)) | (1 << (MySqlParser.COMMENT - 302)) | (1 << (MySqlParser.COMMIT - 302)) | (1 << (MySqlParser.COMPACT - 302)) | (1 << (MySqlParser.COMPLETION - 302)) | (1 << (MySqlParser.COMPRESSED - 302)) | (1 << (MySqlParser.COMPRESSION - 302)) | (1 << (MySqlParser.CONCURRENT - 302)) | (1 << (MySqlParser.CONNECTION - 302)) | (1 << (MySqlParser.CONSISTENT - 302)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySqlParser.CONSTRAINT_NAME - 302)) | (1 << (MySqlParser.CONTAINS - 302)) | (1 << (MySqlParser.CONTEXT - 302)) | (1 << (MySqlParser.CONTRIBUTORS - 302)) | (1 << (MySqlParser.COPY - 302)) | (1 << (MySqlParser.CPU - 302)) | (1 << (MySqlParser.CURSOR_NAME - 302)) | (1 << (MySqlParser.DATA - 302)) | (1 << (MySqlParser.DATAFILE - 302)) | (1 << (MySqlParser.DEALLOCATE - 302)) | (1 << (MySqlParser.DEFAULT_AUTH - 302)) | (1 << (MySqlParser.DEFINER - 302)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 302)) | (1 << (MySqlParser.DES_KEY_FILE - 302)) | (1 << (MySqlParser.DIRECTORY - 302)) | (1 << (MySqlParser.DISABLE - 302)) | (1 << (MySqlParser.DISCARD - 302)) | (1 << (MySqlParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySqlParser.DO - 334)) | (1 << (MySqlParser.DUMPFILE - 334)) | (1 << (MySqlParser.DUPLICATE - 334)) | (1 << (MySqlParser.DYNAMIC - 334)) | (1 << (MySqlParser.ENABLE - 334)) | (1 << (MySqlParser.ENCRYPTION - 334)) | (1 << (MySqlParser.END - 334)) | (1 << (MySqlParser.ENDS - 334)) | (1 << (MySqlParser.ENGINE - 334)) | (1 << (MySqlParser.ENGINES - 334)) | (1 << (MySqlParser.ERROR - 334)) | (1 << (MySqlParser.ERRORS - 334)) | (1 << (MySqlParser.ESCAPE - 334)) | (1 << (MySqlParser.EVEN - 334)) | (1 << (MySqlParser.EVENT - 334)) | (1 << (MySqlParser.EVENTS - 334)) | (1 << (MySqlParser.EVERY - 334)) | (1 << (MySqlParser.EXCHANGE - 334)) | (1 << (MySqlParser.EXCLUSIVE - 334)) | (1 << (MySqlParser.EXPIRE - 334)) | (1 << (MySqlParser.EXPORT - 334)) | (1 << (MySqlParser.EXTENDED - 334)) | (1 << (MySqlParser.EXTENT_SIZE - 334)) | (1 << (MySqlParser.FAST - 334)) | (1 << (MySqlParser.FAULTS - 334)) | (1 << (MySqlParser.FIELDS - 334)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySqlParser.FILTER - 334)) | (1 << (MySqlParser.FIRST - 334)) | (1 << (MySqlParser.FIXED - 334)) | (1 << (MySqlParser.FLUSH - 334)) | (1 << (MySqlParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySqlParser.FOUND - 366)) | (1 << (MySqlParser.FULL - 366)) | (1 << (MySqlParser.FUNCTION - 366)) | (1 << (MySqlParser.GENERAL - 366)) | (1 << (MySqlParser.GLOBAL - 366)) | (1 << (MySqlParser.GRANTS - 366)) | (1 << (MySqlParser.GROUP_REPLICATION - 366)) | (1 << (MySqlParser.HANDLER - 366)) | (1 << (MySqlParser.HASH - 366)) | (1 << (MySqlParser.HELP - 366)) | (1 << (MySqlParser.HOST - 366)) | (1 << (MySqlParser.HOSTS - 366)) | (1 << (MySqlParser.IDENTIFIED - 366)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySqlParser.IMPORT - 366)) | (1 << (MySqlParser.INDEXES - 366)) | (1 << (MySqlParser.INITIAL_SIZE - 366)) | (1 << (MySqlParser.INPLACE - 366)) | (1 << (MySqlParser.INSERT_METHOD - 366)) | (1 << (MySqlParser.INSTALL - 366)) | (1 << (MySqlParser.INSTANCE - 366)) | (1 << (MySqlParser.INVISIBLE - 366)) | (1 << (MySqlParser.INVOKER - 366)) | (1 << (MySqlParser.IO - 366)) | (1 << (MySqlParser.IO_THREAD - 366)) | (1 << (MySqlParser.IPC - 366)) | (1 << (MySqlParser.ISOLATION - 366)) | (1 << (MySqlParser.ISSUER - 366)) | (1 << (MySqlParser.JSON - 366)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySqlParser.LANGUAGE - 366)) | (1 << (MySqlParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.LEAVES - 398)) | (1 << (MySqlParser.LESS - 398)) | (1 << (MySqlParser.LEVEL - 398)) | (1 << (MySqlParser.LIST - 398)) | (1 << (MySqlParser.LOCAL - 398)) | (1 << (MySqlParser.LOGFILE - 398)) | (1 << (MySqlParser.LOGS - 398)) | (1 << (MySqlParser.MASTER - 398)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySqlParser.MASTER_DELAY - 398)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySqlParser.MASTER_HOST - 398)) | (1 << (MySqlParser.MASTER_LOG_FILE - 398)) | (1 << (MySqlParser.MASTER_LOG_POS - 398)) | (1 << (MySqlParser.MASTER_PASSWORD - 398)) | (1 << (MySqlParser.MASTER_PORT - 398)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySqlParser.MASTER_SSL - 398)) | (1 << (MySqlParser.MASTER_SSL_CA - 398)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_CERT - 398)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySqlParser.MASTER_SSL_CRL - 398)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_KEY - 398)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 398)) | (1 << (MySqlParser.MASTER_USER - 398)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySqlParser.MEDIUM - 430)) | (1 << (MySqlParser.MEMBER - 430)) | (1 << (MySqlParser.MERGE - 430)) | (1 << (MySqlParser.MESSAGE_TEXT - 430)) | (1 << (MySqlParser.MID - 430)) | (1 << (MySqlParser.MIGRATE - 430)) | (1 << (MySqlParser.MIN_ROWS - 430)) | (1 << (MySqlParser.MODE - 430)) | (1 << (MySqlParser.MODIFY - 430)) | (1 << (MySqlParser.MUTEX - 430)) | (1 << (MySqlParser.MYSQL - 430)) | (1 << (MySqlParser.MYSQL_ERRNO - 430)) | (1 << (MySqlParser.NAME - 430)) | (1 << (MySqlParser.NAMES - 430)) | (1 << (MySqlParser.NCHAR - 430)) | (1 << (MySqlParser.NEVER - 430)) | (1 << (MySqlParser.NEXT - 430)) | (1 << (MySqlParser.NO - 430)) | (1 << (MySqlParser.NODEGROUP - 430)) | (1 << (MySqlParser.NONE - 430)) | (1 << (MySqlParser.OFFLINE - 430)) | (1 << (MySqlParser.OFFSET - 430)) | (1 << (MySqlParser.OF - 430)) | (1 << (MySqlParser.OJ - 430)) | (1 << (MySqlParser.OLD_PASSWORD - 430)) | (1 << (MySqlParser.ONE - 430)) | (1 << (MySqlParser.ONLINE - 430)) | (1 << (MySqlParser.ONLY - 430)) | (1 << (MySqlParser.OPEN - 430)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySqlParser.OPTIONS - 462)) | (1 << (MySqlParser.OWNER - 462)) | (1 << (MySqlParser.PACK_KEYS - 462)) | (1 << (MySqlParser.PAGE - 462)) | (1 << (MySqlParser.PARSER - 462)) | (1 << (MySqlParser.PARTIAL - 462)) | (1 << (MySqlParser.PARTITIONING - 462)) | (1 << (MySqlParser.PARTITIONS - 462)) | (1 << (MySqlParser.PASSWORD - 462)) | (1 << (MySqlParser.PHASE - 462)) | (1 << (MySqlParser.PLUGIN - 462)) | (1 << (MySqlParser.PLUGIN_DIR - 462)) | (1 << (MySqlParser.PLUGINS - 462)) | (1 << (MySqlParser.PORT - 462)) | (1 << (MySqlParser.PRECEDES - 462)) | (1 << (MySqlParser.PREPARE - 462)) | (1 << (MySqlParser.PRESERVE - 462)) | (1 << (MySqlParser.PREV - 462)) | (1 << (MySqlParser.PROCESSLIST - 462)) | (1 << (MySqlParser.PROFILE - 462)) | (1 << (MySqlParser.PROFILES - 462)) | (1 << (MySqlParser.PROXY - 462)) | (1 << (MySqlParser.QUERY - 462)) | (1 << (MySqlParser.QUICK - 462)) | (1 << (MySqlParser.REBUILD - 462)) | (1 << (MySqlParser.RECOVER - 462)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySqlParser.REDUNDANT - 462)) | (1 << (MySqlParser.RELAY - 462)) | (1 << (MySqlParser.RELAY_LOG_FILE - 462)) | (1 << (MySqlParser.RELAY_LOG_POS - 462)) | (1 << (MySqlParser.RELAYLOG - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySqlParser.REMOVE - 494)) | (1 << (MySqlParser.REORGANIZE - 494)) | (1 << (MySqlParser.REPAIR - 494)) | (1 << (MySqlParser.REPLICATE_DO_DB - 494)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATION - 494)) | (1 << (MySqlParser.RESET - 494)) | (1 << (MySqlParser.RESUME - 494)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 494)) | (1 << (MySqlParser.RETURNS - 494)) | (1 << (MySqlParser.ROLE - 494)) | (1 << (MySqlParser.ROLLBACK - 494)) | (1 << (MySqlParser.ROLLUP - 494)) | (1 << (MySqlParser.ROTATE - 494)) | (1 << (MySqlParser.ROW - 494)) | (1 << (MySqlParser.ROWS - 494)) | (1 << (MySqlParser.ROW_FORMAT - 494)) | (1 << (MySqlParser.SAVEPOINT - 494)) | (1 << (MySqlParser.SCHEDULE - 494)) | (1 << (MySqlParser.SECURITY - 494)) | (1 << (MySqlParser.SERVER - 494)) | (1 << (MySqlParser.SESSION - 494)) | (1 << (MySqlParser.SHARE - 494)) | (1 << (MySqlParser.SHARED - 494)) | (1 << (MySqlParser.SIGNED - 494)) | (1 << (MySqlParser.SIMPLE - 494)) | (1 << (MySqlParser.SLAVE - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySqlParser.SLOW - 526)) | (1 << (MySqlParser.SNAPSHOT - 526)) | (1 << (MySqlParser.SOCKET - 526)) | (1 << (MySqlParser.SOME - 526)) | (1 << (MySqlParser.SONAME - 526)) | (1 << (MySqlParser.SOUNDS - 526)) | (1 << (MySqlParser.SOURCE - 526)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySqlParser.SQL_CACHE - 526)) | (1 << (MySqlParser.SQL_NO_CACHE - 526)) | (1 << (MySqlParser.SQL_THREAD - 526)) | (1 << (MySqlParser.START - 526)) | (1 << (MySqlParser.STARTS - 526)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 526)) | (1 << (MySqlParser.STATS_PERSISTENT - 526)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySqlParser.STATUS - 526)) | (1 << (MySqlParser.STOP - 526)) | (1 << (MySqlParser.STORAGE - 526)) | (1 << (MySqlParser.STRING - 526)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySqlParser.SUBJECT - 526)) | (1 << (MySqlParser.SUBPARTITION - 526)) | (1 << (MySqlParser.SUBPARTITIONS - 526)) | (1 << (MySqlParser.SUSPEND - 526)) | (1 << (MySqlParser.SWAPS - 526)) | (1 << (MySqlParser.SWITCHES - 526)) | (1 << (MySqlParser.TABLE_NAME - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySqlParser.TABLESPACE - 558)) | (1 << (MySqlParser.TEMPORARY - 558)) | (1 << (MySqlParser.TEMPTABLE - 558)) | (1 << (MySqlParser.THAN - 558)) | (1 << (MySqlParser.TRADITIONAL - 558)) | (1 << (MySqlParser.TRANSACTION - 558)) | (1 << (MySqlParser.TRANSACTIONAL - 558)) | (1 << (MySqlParser.TRIGGERS - 558)) | (1 << (MySqlParser.TRUNCATE - 558)) | (1 << (MySqlParser.UNDEFINED - 558)) | (1 << (MySqlParser.UNDOFILE - 558)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySqlParser.UNINSTALL - 558)) | (1 << (MySqlParser.UNKNOWN - 558)) | (1 << (MySqlParser.UNTIL - 558)) | (1 << (MySqlParser.UPGRADE - 558)) | (1 << (MySqlParser.USER - 558)) | (1 << (MySqlParser.USE_FRM - 558)) | (1 << (MySqlParser.USER_RESOURCES - 558)) | (1 << (MySqlParser.VALIDATION - 558)) | (1 << (MySqlParser.VALUE - 558)) | (1 << (MySqlParser.VARIABLES - 558)) | (1 << (MySqlParser.VIEW - 558)) | (1 << (MySqlParser.VISIBLE - 558)) | (1 << (MySqlParser.WAIT - 558)) | (1 << (MySqlParser.WARNINGS - 558)) | (1 << (MySqlParser.WITHOUT - 558)) | (1 << (MySqlParser.WORK - 558)) | (1 << (MySqlParser.WRAPPER - 558)) | (1 << (MySqlParser.X509 - 558)) | (1 << (MySqlParser.XA - 558)))) !== 0) || ((((_la - 590)) & ~0x1f) == 0 && ((1 << (_la - 590)) & ((1 << (MySqlParser.XML - 590)) | (1 << (MySqlParser.INTERNAL - 590)) | (1 << (MySqlParser.QUARTER - 590)) | (1 << (MySqlParser.MONTH - 590)) | (1 << (MySqlParser.DAY - 590)) | (1 << (MySqlParser.HOUR - 590)) | (1 << (MySqlParser.MINUTE - 590)) | (1 << (MySqlParser.WEEK - 590)) | (1 << (MySqlParser.SECOND - 590)) | (1 << (MySqlParser.MICROSECOND - 590)) | (1 << (MySqlParser.TABLES - 590)) | (1 << (MySqlParser.ROUTINE - 590)) | (1 << (MySqlParser.EXECUTE - 590)) | (1 << (MySqlParser.FILE - 590)) | (1 << (MySqlParser.PROCESS - 590)) | (1 << (MySqlParser.RELOAD - 590)) | (1 << (MySqlParser.SHUTDOWN - 590)) | (1 << (MySqlParser.SUPER - 590)) | (1 << (MySqlParser.PRIVILEGES - 590)) | (1 << (MySqlParser.AUDIT_ADMIN - 590)) | (1 << (MySqlParser.BACKUP_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 590)) | (1 << (MySqlParser.CLONE_ADMIN - 590)) | (1 << (MySqlParser.CONNECTION_ADMIN - 590)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 590)) | (1 << (MySqlParser.FIREWALL_ADMIN - 590)))) !== 0) || ((((_la - 622)) & ~0x1f) == 0 && ((1 << (_la - 622)) & ((1 << (MySqlParser.FIREWALL_USER - 622)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 622)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 622)) | (1 << (MySqlParser.NDB_STORED_USER - 622)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.REPLICATION_APPLIER - 622)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 622)) | (1 << (MySqlParser.ROLE_ADMIN - 622)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.SET_USER_ID - 622)) | (1 << (MySqlParser.SHOW_ROUTINE - 622)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 622)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 622)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 622)) | (1 << (MySqlParser.ARMSCII8 - 622)) | (1 << (MySqlParser.ASCII - 622)) | (1 << (MySqlParser.BIG5 - 622)) | (1 << (MySqlParser.CP1250 - 622)) | (1 << (MySqlParser.CP1251 - 622)) | (1 << (MySqlParser.CP1256 - 622)) | (1 << (MySqlParser.CP1257 - 622)) | (1 << (MySqlParser.CP850 - 622)) | (1 << (MySqlParser.CP852 - 622)) | (1 << (MySqlParser.CP866 - 622)) | (1 << (MySqlParser.CP932 - 622)) | (1 << (MySqlParser.DEC8 - 622)) | (1 << (MySqlParser.EUCJPMS - 622)) | (1 << (MySqlParser.EUCKR - 622)) | (1 << (MySqlParser.GB2312 - 622)))) !== 0) || ((((_la - 654)) & ~0x1f) == 0 && ((1 << (_la - 654)) & ((1 << (MySqlParser.GBK - 654)) | (1 << (MySqlParser.GEOSTD8 - 654)) | (1 << (MySqlParser.GREEK - 654)) | (1 << (MySqlParser.HEBREW - 654)) | (1 << (MySqlParser.HP8 - 654)) | (1 << (MySqlParser.KEYBCS2 - 654)) | (1 << (MySqlParser.KOI8R - 654)) | (1 << (MySqlParser.KOI8U - 654)) | (1 << (MySqlParser.LATIN1 - 654)) | (1 << (MySqlParser.LATIN2 - 654)) | (1 << (MySqlParser.LATIN5 - 654)) | (1 << (MySqlParser.LATIN7 - 654)) | (1 << (MySqlParser.MACCE - 654)) | (1 << (MySqlParser.MACROMAN - 654)) | (1 << (MySqlParser.SJIS - 654)) | (1 << (MySqlParser.SWE7 - 654)) | (1 << (MySqlParser.TIS620 - 654)) | (1 << (MySqlParser.UCS2 - 654)) | (1 << (MySqlParser.UJIS - 654)) | (1 << (MySqlParser.UTF16 - 654)) | (1 << (MySqlParser.UTF16LE - 654)) | (1 << (MySqlParser.UTF32 - 654)) | (1 << (MySqlParser.UTF8 - 654)) | (1 << (MySqlParser.UTF8MB3 - 654)) | (1 << (MySqlParser.UTF8MB4 - 654)) | (1 << (MySqlParser.ARCHIVE - 654)) | (1 << (MySqlParser.BLACKHOLE - 654)) | (1 << (MySqlParser.CSV - 654)) | (1 << (MySqlParser.FEDERATED - 654)) | (1 << (MySqlParser.INNODB - 654)) | (1 << (MySqlParser.MEMORY - 654)) | (1 << (MySqlParser.MRG_MYISAM - 654)))) !== 0) || ((((_la - 686)) & ~0x1f) == 0 && ((1 << (_la - 686)) & ((1 << (MySqlParser.MYISAM - 686)) | (1 << (MySqlParser.NDB - 686)) | (1 << (MySqlParser.NDBCLUSTER - 686)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 686)) | (1 << (MySqlParser.TOKUDB - 686)) | (1 << (MySqlParser.REPEATABLE - 686)) | (1 << (MySqlParser.COMMITTED - 686)) | (1 << (MySqlParser.UNCOMMITTED - 686)) | (1 << (MySqlParser.SERIALIZABLE - 686)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 686)) | (1 << (MySqlParser.LINESTRING - 686)) | (1 << (MySqlParser.MULTILINESTRING - 686)) | (1 << (MySqlParser.MULTIPOINT - 686)) | (1 << (MySqlParser.MULTIPOLYGON - 686)) | (1 << (MySqlParser.POINT - 686)) | (1 << (MySqlParser.POLYGON - 686)) | (1 << (MySqlParser.ABS - 686)) | (1 << (MySqlParser.ACOS - 686)) | (1 << (MySqlParser.ADDDATE - 686)) | (1 << (MySqlParser.ADDTIME - 686)) | (1 << (MySqlParser.AES_DECRYPT - 686)) | (1 << (MySqlParser.AES_ENCRYPT - 686)) | (1 << (MySqlParser.AREA - 686)) | (1 << (MySqlParser.ASBINARY - 686)) | (1 << (MySqlParser.ASIN - 686)) | (1 << (MySqlParser.ASTEXT - 686)) | (1 << (MySqlParser.ASWKB - 686)) | (1 << (MySqlParser.ASWKT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 686)))) !== 0) || ((((_la - 718)) & ~0x1f) == 0 && ((1 << (_la - 718)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 718)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 718)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 718)) | (1 << (MySqlParser.ATAN - 718)) | (1 << (MySqlParser.ATAN2 - 718)) | (1 << (MySqlParser.BENCHMARK - 718)) | (1 << (MySqlParser.BIN - 718)) | (1 << (MySqlParser.BIT_COUNT - 718)) | (1 << (MySqlParser.BIT_LENGTH - 718)) | (1 << (MySqlParser.BUFFER - 718)) | (1 << (MySqlParser.CATALOG_NAME - 718)) | (1 << (MySqlParser.CEIL - 718)) | (1 << (MySqlParser.CEILING - 718)) | (1 << (MySqlParser.CENTROID - 718)) | (1 << (MySqlParser.CHARACTER_LENGTH - 718)) | (1 << (MySqlParser.CHARSET - 718)) | (1 << (MySqlParser.CHAR_LENGTH - 718)) | (1 << (MySqlParser.COERCIBILITY - 718)) | (1 << (MySqlParser.COLLATION - 718)) | (1 << (MySqlParser.COMPRESS - 718)) | (1 << (MySqlParser.CONCAT - 718)) | (1 << (MySqlParser.CONCAT_WS - 718)) | (1 << (MySqlParser.CONNECTION_ID - 718)) | (1 << (MySqlParser.CONV - 718)) | (1 << (MySqlParser.CONVERT_TZ - 718)) | (1 << (MySqlParser.COS - 718)) | (1 << (MySqlParser.COT - 718)) | (1 << (MySqlParser.CRC32 - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 718)) | (1 << (MySqlParser.CREATE_DIGEST - 718)))) !== 0) || ((((_la - 750)) & ~0x1f) == 0 && ((1 << (_la - 750)) & ((1 << (MySqlParser.CROSSES - 750)) | (1 << (MySqlParser.DATEDIFF - 750)) | (1 << (MySqlParser.DATE_FORMAT - 750)) | (1 << (MySqlParser.DAYNAME - 750)) | (1 << (MySqlParser.DAYOFMONTH - 750)) | (1 << (MySqlParser.DAYOFWEEK - 750)) | (1 << (MySqlParser.DAYOFYEAR - 750)) | (1 << (MySqlParser.DECODE - 750)) | (1 << (MySqlParser.DEGREES - 750)) | (1 << (MySqlParser.DES_DECRYPT - 750)) | (1 << (MySqlParser.DES_ENCRYPT - 750)) | (1 << (MySqlParser.DIMENSION - 750)) | (1 << (MySqlParser.DISJOINT - 750)) | (1 << (MySqlParser.ELT - 750)) | (1 << (MySqlParser.ENCODE - 750)) | (1 << (MySqlParser.ENCRYPT - 750)) | (1 << (MySqlParser.ENDPOINT - 750)) | (1 << (MySqlParser.ENVELOPE - 750)) | (1 << (MySqlParser.EQUALS - 750)) | (1 << (MySqlParser.EXP - 750)) | (1 << (MySqlParser.EXPORT_SET - 750)) | (1 << (MySqlParser.EXTERIORRING - 750)) | (1 << (MySqlParser.EXTRACTVALUE - 750)) | (1 << (MySqlParser.FIELD - 750)) | (1 << (MySqlParser.FIND_IN_SET - 750)) | (1 << (MySqlParser.FLOOR - 750)) | (1 << (MySqlParser.FORMAT - 750)) | (1 << (MySqlParser.FOUND_ROWS - 750)) | (1 << (MySqlParser.FROM_BASE64 - 750)) | (1 << (MySqlParser.FROM_DAYS - 750)) | (1 << (MySqlParser.FROM_UNIXTIME - 750)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 750)))) !== 0) || ((((_la - 782)) & ~0x1f) == 0 && ((1 << (_la - 782)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYN - 782)) | (1 << (MySqlParser.GEOMETRYTYPE - 782)) | (1 << (MySqlParser.GEOMFROMTEXT - 782)) | (1 << (MySqlParser.GEOMFROMWKB - 782)) | (1 << (MySqlParser.GET_FORMAT - 782)) | (1 << (MySqlParser.GET_LOCK - 782)) | (1 << (MySqlParser.GLENGTH - 782)) | (1 << (MySqlParser.GREATEST - 782)) | (1 << (MySqlParser.GTID_SUBSET - 782)) | (1 << (MySqlParser.GTID_SUBTRACT - 782)) | (1 << (MySqlParser.HEX - 782)) | (1 << (MySqlParser.IFNULL - 782)) | (1 << (MySqlParser.INET6_ATON - 782)) | (1 << (MySqlParser.INET6_NTOA - 782)) | (1 << (MySqlParser.INET_ATON - 782)) | (1 << (MySqlParser.INET_NTOA - 782)) | (1 << (MySqlParser.INSTR - 782)) | (1 << (MySqlParser.INTERIORRINGN - 782)) | (1 << (MySqlParser.INTERSECTS - 782)) | (1 << (MySqlParser.ISCLOSED - 782)) | (1 << (MySqlParser.ISEMPTY - 782)) | (1 << (MySqlParser.ISNULL - 782)) | (1 << (MySqlParser.ISSIMPLE - 782)) | (1 << (MySqlParser.IS_FREE_LOCK - 782)) | (1 << (MySqlParser.IS_IPV4 - 782)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 782)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 782)))) !== 0) || ((((_la - 814)) & ~0x1f) == 0 && ((1 << (_la - 814)) & ((1 << (MySqlParser.IS_IPV6 - 814)) | (1 << (MySqlParser.IS_USED_LOCK - 814)) | (1 << (MySqlParser.LAST_INSERT_ID - 814)) | (1 << (MySqlParser.LCASE - 814)) | (1 << (MySqlParser.LEAST - 814)) | (1 << (MySqlParser.LENGTH - 814)) | (1 << (MySqlParser.LINEFROMTEXT - 814)) | (1 << (MySqlParser.LINEFROMWKB - 814)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 814)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 814)) | (1 << (MySqlParser.LN - 814)) | (1 << (MySqlParser.LOAD_FILE - 814)) | (1 << (MySqlParser.LOCATE - 814)) | (1 << (MySqlParser.LOG - 814)) | (1 << (MySqlParser.LOG10 - 814)) | (1 << (MySqlParser.LOG2 - 814)) | (1 << (MySqlParser.LOWER - 814)) | (1 << (MySqlParser.LPAD - 814)) | (1 << (MySqlParser.LTRIM - 814)) | (1 << (MySqlParser.MAKEDATE - 814)) | (1 << (MySqlParser.MAKETIME - 814)) | (1 << (MySqlParser.MAKE_SET - 814)) | (1 << (MySqlParser.MASTER_POS_WAIT - 814)) | (1 << (MySqlParser.MBRCONTAINS - 814)) | (1 << (MySqlParser.MBRDISJOINT - 814)) | (1 << (MySqlParser.MBREQUAL - 814)) | (1 << (MySqlParser.MBRINTERSECTS - 814)) | (1 << (MySqlParser.MBROVERLAPS - 814)) | (1 << (MySqlParser.MBRTOUCHES - 814)) | (1 << (MySqlParser.MBRWITHIN - 814)) | (1 << (MySqlParser.MD5 - 814)) | (1 << (MySqlParser.MLINEFROMTEXT - 814)))) !== 0) || ((((_la - 846)) & ~0x1f) == 0 && ((1 << (_la - 846)) & ((1 << (MySqlParser.MLINEFROMWKB - 846)) | (1 << (MySqlParser.MONTHNAME - 846)) | (1 << (MySqlParser.MPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MPOINTFROMWKB - 846)) | (1 << (MySqlParser.MPOLYFROMTEXT - 846)) | (1 << (MySqlParser.MPOLYFROMWKB - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 846)) | (1 << (MySqlParser.NAME_CONST - 846)) | (1 << (MySqlParser.NULLIF - 846)) | (1 << (MySqlParser.NUMGEOMETRIES - 846)) | (1 << (MySqlParser.NUMINTERIORRINGS - 846)) | (1 << (MySqlParser.NUMPOINTS - 846)) | (1 << (MySqlParser.OCT - 846)) | (1 << (MySqlParser.OCTET_LENGTH - 846)) | (1 << (MySqlParser.ORD - 846)) | (1 << (MySqlParser.OVERLAPS - 846)) | (1 << (MySqlParser.PERIOD_ADD - 846)) | (1 << (MySqlParser.PERIOD_DIFF - 846)) | (1 << (MySqlParser.PI - 846)) | (1 << (MySqlParser.POINTFROMTEXT - 846)) | (1 << (MySqlParser.POINTFROMWKB - 846)) | (1 << (MySqlParser.POINTN - 846)) | (1 << (MySqlParser.POLYFROMTEXT - 846)) | (1 << (MySqlParser.POLYFROMWKB - 846)) | (1 << (MySqlParser.POLYGONFROMTEXT - 846)) | (1 << (MySqlParser.POLYGONFROMWKB - 846)) | (1 << (MySqlParser.POW - 846)))) !== 0) || ((((_la - 878)) & ~0x1f) == 0 && ((1 << (_la - 878)) & ((1 << (MySqlParser.POWER - 878)) | (1 << (MySqlParser.QUOTE - 878)) | (1 << (MySqlParser.RADIANS - 878)) | (1 << (MySqlParser.RAND - 878)) | (1 << (MySqlParser.RANDOM_BYTES - 878)) | (1 << (MySqlParser.RELEASE_LOCK - 878)) | (1 << (MySqlParser.REVERSE - 878)) | (1 << (MySqlParser.ROUND - 878)) | (1 << (MySqlParser.ROW_COUNT - 878)) | (1 << (MySqlParser.RPAD - 878)) | (1 << (MySqlParser.RTRIM - 878)) | (1 << (MySqlParser.SEC_TO_TIME - 878)) | (1 << (MySqlParser.SESSION_USER - 878)) | (1 << (MySqlParser.SHA - 878)) | (1 << (MySqlParser.SHA1 - 878)) | (1 << (MySqlParser.SHA2 - 878)) | (1 << (MySqlParser.SCHEMA_NAME - 878)) | (1 << (MySqlParser.SIGN - 878)) | (1 << (MySqlParser.SIN - 878)) | (1 << (MySqlParser.SLEEP - 878)) | (1 << (MySqlParser.SOUNDEX - 878)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 878)) | (1 << (MySqlParser.SQRT - 878)) | (1 << (MySqlParser.SRID - 878)) | (1 << (MySqlParser.STARTPOINT - 878)) | (1 << (MySqlParser.STRCMP - 878)) | (1 << (MySqlParser.STR_TO_DATE - 878)) | (1 << (MySqlParser.ST_AREA - 878)) | (1 << (MySqlParser.ST_ASBINARY - 878)) | (1 << (MySqlParser.ST_ASTEXT - 878)) | (1 << (MySqlParser.ST_ASWKB - 878)) | (1 << (MySqlParser.ST_ASWKT - 878)))) !== 0) || ((((_la - 910)) & ~0x1f) == 0 && ((1 << (_la - 910)) & ((1 << (MySqlParser.ST_BUFFER - 910)) | (1 << (MySqlParser.ST_CENTROID - 910)) | (1 << (MySqlParser.ST_CONTAINS - 910)) | (1 << (MySqlParser.ST_CROSSES - 910)) | (1 << (MySqlParser.ST_DIFFERENCE - 910)) | (1 << (MySqlParser.ST_DIMENSION - 910)) | (1 << (MySqlParser.ST_DISJOINT - 910)) | (1 << (MySqlParser.ST_DISTANCE - 910)) | (1 << (MySqlParser.ST_ENDPOINT - 910)) | (1 << (MySqlParser.ST_ENVELOPE - 910)) | (1 << (MySqlParser.ST_EQUALS - 910)) | (1 << (MySqlParser.ST_EXTERIORRING - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYN - 910)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 910)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 910)) | (1 << (MySqlParser.ST_INTERIORRINGN - 910)) | (1 << (MySqlParser.ST_INTERSECTION - 910)) | (1 << (MySqlParser.ST_INTERSECTS - 910)) | (1 << (MySqlParser.ST_ISCLOSED - 910)) | (1 << (MySqlParser.ST_ISEMPTY - 910)) | (1 << (MySqlParser.ST_ISSIMPLE - 910)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 910)) | (1 << (MySqlParser.ST_LINEFROMWKB - 910)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 910)))) !== 0) || ((((_la - 942)) & ~0x1f) == 0 && ((1 << (_la - 942)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 942)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 942)) | (1 << (MySqlParser.ST_NUMPOINTS - 942)) | (1 << (MySqlParser.ST_OVERLAPS - 942)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 942)) | (1 << (MySqlParser.ST_POINTFROMWKB - 942)) | (1 << (MySqlParser.ST_POINTN - 942)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYFROMWKB - 942)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 942)) | (1 << (MySqlParser.ST_SRID - 942)) | (1 << (MySqlParser.ST_STARTPOINT - 942)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 942)) | (1 << (MySqlParser.ST_TOUCHES - 942)) | (1 << (MySqlParser.ST_UNION - 942)) | (1 << (MySqlParser.ST_WITHIN - 942)) | (1 << (MySqlParser.ST_X - 942)) | (1 << (MySqlParser.ST_Y - 942)) | (1 << (MySqlParser.SUBDATE - 942)) | (1 << (MySqlParser.SUBSTRING_INDEX - 942)) | (1 << (MySqlParser.SUBTIME - 942)) | (1 << (MySqlParser.SYSTEM_USER - 942)) | (1 << (MySqlParser.TAN - 942)) | (1 << (MySqlParser.TIMEDIFF - 942)) | (1 << (MySqlParser.TIMESTAMPADD - 942)) | (1 << (MySqlParser.TIMESTAMPDIFF - 942)) | (1 << (MySqlParser.TIME_FORMAT - 942)) | (1 << (MySqlParser.TIME_TO_SEC - 942)) | (1 << (MySqlParser.TOUCHES - 942)))) !== 0) || ((((_la - 974)) & ~0x1f) == 0 && ((1 << (_la - 974)) & ((1 << (MySqlParser.TO_BASE64 - 974)) | (1 << (MySqlParser.TO_DAYS - 974)) | (1 << (MySqlParser.TO_SECONDS - 974)) | (1 << (MySqlParser.UCASE - 974)) | (1 << (MySqlParser.UNCOMPRESS - 974)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 974)) | (1 << (MySqlParser.UNHEX - 974)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 974)) | (1 << (MySqlParser.UPDATEXML - 974)) | (1 << (MySqlParser.UPPER - 974)) | (1 << (MySqlParser.UUID - 974)) | (1 << (MySqlParser.UUID_SHORT - 974)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 974)) | (1 << (MySqlParser.VERSION - 974)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1 << (MySqlParser.WEEKDAY - 974)) | (1 << (MySqlParser.WEEKOFYEAR - 974)) | (1 << (MySqlParser.WEIGHT_STRING - 974)) | (1 << (MySqlParser.WITHIN - 974)) | (1 << (MySqlParser.YEARWEEK - 974)) | (1 << (MySqlParser.Y_FUNCTION - 974)) | (1 << (MySqlParser.X_FUNCTION - 974)))) !== 0) || ((((_la - 1034)) & ~0x1f) == 0 && ((1 << (_la - 1034)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (MySqlParser.STRING_LITERAL - 1034)) | (1 << (MySqlParser.ID - 1034)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1034)))) !== 0)) {
	                this.state = 1506;
	                localctx.index = this.uid();
	            }

	            this.state = 1510;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.USING) {
	                this.state = 1509;
	                this.indexType();
	            }

	            this.state = 1512;
	            this.indexColumnNames();
	            this.state = 1516;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.USING || _la===MySqlParser.WITH || _la===MySqlParser.COMMENT || _la===MySqlParser.INVISIBLE || _la===MySqlParser.KEY_BLOCK_SIZE || _la===MySqlParser.VISIBLE) {
	                this.state = 1513;
	                this.indexOption();
	                this.state = 1518;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 3:
	            localctx = new ForeignKeyTableConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1523;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.CONSTRAINT) {
	                this.state = 1519;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 1521;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySqlParser.CURRENT - 32)) | (1 << (MySqlParser.DATABASE - 32)) | (1 << (MySqlParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySqlParser.LEFT || _la===MySqlParser.NUMBER || _la===MySqlParser.RIGHT || _la===MySqlParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.TIMESTAMP - 199)) | (1 << (MySqlParser.DATETIME - 199)) | (1 << (MySqlParser.YEAR - 199)) | (1 << (MySqlParser.TEXT - 199)) | (1 << (MySqlParser.ENUM - 199)) | (1 << (MySqlParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.JSON_VALID - 233)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySqlParser.AVG - 233)) | (1 << (MySqlParser.BIT_AND - 233)) | (1 << (MySqlParser.BIT_OR - 233)) | (1 << (MySqlParser.BIT_XOR - 233)) | (1 << (MySqlParser.COUNT - 233)) | (1 << (MySqlParser.GROUP_CONCAT - 233)) | (1 << (MySqlParser.MAX - 233)) | (1 << (MySqlParser.MIN - 233)) | (1 << (MySqlParser.STD - 233)) | (1 << (MySqlParser.STDDEV - 233)) | (1 << (MySqlParser.STDDEV_POP - 233)) | (1 << (MySqlParser.STDDEV_SAMP - 233)) | (1 << (MySqlParser.SUM - 233)) | (1 << (MySqlParser.VAR_POP - 233)) | (1 << (MySqlParser.VAR_SAMP - 233)) | (1 << (MySqlParser.VARIANCE - 233)) | (1 << (MySqlParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySqlParser.ACCOUNT - 270)) | (1 << (MySqlParser.ACTION - 270)) | (1 << (MySqlParser.AFTER - 270)) | (1 << (MySqlParser.AGGREGATE - 270)) | (1 << (MySqlParser.ALGORITHM - 270)) | (1 << (MySqlParser.ANY - 270)) | (1 << (MySqlParser.AT - 270)) | (1 << (MySqlParser.AUTHORS - 270)) | (1 << (MySqlParser.AUTOCOMMIT - 270)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySqlParser.AUTO_INCREMENT - 270)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 270)) | (1 << (MySqlParser.BEGIN - 270)) | (1 << (MySqlParser.BINLOG - 270)) | (1 << (MySqlParser.BIT - 270)) | (1 << (MySqlParser.BLOCK - 270)) | (1 << (MySqlParser.BOOL - 270)) | (1 << (MySqlParser.BOOLEAN - 270)) | (1 << (MySqlParser.BTREE - 270)) | (1 << (MySqlParser.CACHE - 270)) | (1 << (MySqlParser.CASCADED - 270)) | (1 << (MySqlParser.CHAIN - 270)) | (1 << (MySqlParser.CHANGED - 270)) | (1 << (MySqlParser.CHANNEL - 270)) | (1 << (MySqlParser.CHECKSUM - 270)) | (1 << (MySqlParser.PAGE_CHECKSUM - 270)) | (1 << (MySqlParser.CIPHER - 270)) | (1 << (MySqlParser.CLASS_ORIGIN - 270)) | (1 << (MySqlParser.CLIENT - 270)) | (1 << (MySqlParser.CLOSE - 270)) | (1 << (MySqlParser.COALESCE - 270)) | (1 << (MySqlParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySqlParser.COLUMNS - 302)) | (1 << (MySqlParser.COLUMN_FORMAT - 302)) | (1 << (MySqlParser.COLUMN_NAME - 302)) | (1 << (MySqlParser.COMMENT - 302)) | (1 << (MySqlParser.COMMIT - 302)) | (1 << (MySqlParser.COMPACT - 302)) | (1 << (MySqlParser.COMPLETION - 302)) | (1 << (MySqlParser.COMPRESSED - 302)) | (1 << (MySqlParser.COMPRESSION - 302)) | (1 << (MySqlParser.CONCURRENT - 302)) | (1 << (MySqlParser.CONNECTION - 302)) | (1 << (MySqlParser.CONSISTENT - 302)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySqlParser.CONSTRAINT_NAME - 302)) | (1 << (MySqlParser.CONTAINS - 302)) | (1 << (MySqlParser.CONTEXT - 302)) | (1 << (MySqlParser.CONTRIBUTORS - 302)) | (1 << (MySqlParser.COPY - 302)) | (1 << (MySqlParser.CPU - 302)) | (1 << (MySqlParser.CURSOR_NAME - 302)) | (1 << (MySqlParser.DATA - 302)) | (1 << (MySqlParser.DATAFILE - 302)) | (1 << (MySqlParser.DEALLOCATE - 302)) | (1 << (MySqlParser.DEFAULT_AUTH - 302)) | (1 << (MySqlParser.DEFINER - 302)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 302)) | (1 << (MySqlParser.DES_KEY_FILE - 302)) | (1 << (MySqlParser.DIRECTORY - 302)) | (1 << (MySqlParser.DISABLE - 302)) | (1 << (MySqlParser.DISCARD - 302)) | (1 << (MySqlParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySqlParser.DO - 334)) | (1 << (MySqlParser.DUMPFILE - 334)) | (1 << (MySqlParser.DUPLICATE - 334)) | (1 << (MySqlParser.DYNAMIC - 334)) | (1 << (MySqlParser.ENABLE - 334)) | (1 << (MySqlParser.ENCRYPTION - 334)) | (1 << (MySqlParser.END - 334)) | (1 << (MySqlParser.ENDS - 334)) | (1 << (MySqlParser.ENGINE - 334)) | (1 << (MySqlParser.ENGINES - 334)) | (1 << (MySqlParser.ERROR - 334)) | (1 << (MySqlParser.ERRORS - 334)) | (1 << (MySqlParser.ESCAPE - 334)) | (1 << (MySqlParser.EVEN - 334)) | (1 << (MySqlParser.EVENT - 334)) | (1 << (MySqlParser.EVENTS - 334)) | (1 << (MySqlParser.EVERY - 334)) | (1 << (MySqlParser.EXCHANGE - 334)) | (1 << (MySqlParser.EXCLUSIVE - 334)) | (1 << (MySqlParser.EXPIRE - 334)) | (1 << (MySqlParser.EXPORT - 334)) | (1 << (MySqlParser.EXTENDED - 334)) | (1 << (MySqlParser.EXTENT_SIZE - 334)) | (1 << (MySqlParser.FAST - 334)) | (1 << (MySqlParser.FAULTS - 334)) | (1 << (MySqlParser.FIELDS - 334)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySqlParser.FILTER - 334)) | (1 << (MySqlParser.FIRST - 334)) | (1 << (MySqlParser.FIXED - 334)) | (1 << (MySqlParser.FLUSH - 334)) | (1 << (MySqlParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySqlParser.FOUND - 366)) | (1 << (MySqlParser.FULL - 366)) | (1 << (MySqlParser.FUNCTION - 366)) | (1 << (MySqlParser.GENERAL - 366)) | (1 << (MySqlParser.GLOBAL - 366)) | (1 << (MySqlParser.GRANTS - 366)) | (1 << (MySqlParser.GROUP_REPLICATION - 366)) | (1 << (MySqlParser.HANDLER - 366)) | (1 << (MySqlParser.HASH - 366)) | (1 << (MySqlParser.HELP - 366)) | (1 << (MySqlParser.HOST - 366)) | (1 << (MySqlParser.HOSTS - 366)) | (1 << (MySqlParser.IDENTIFIED - 366)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySqlParser.IMPORT - 366)) | (1 << (MySqlParser.INDEXES - 366)) | (1 << (MySqlParser.INITIAL_SIZE - 366)) | (1 << (MySqlParser.INPLACE - 366)) | (1 << (MySqlParser.INSERT_METHOD - 366)) | (1 << (MySqlParser.INSTALL - 366)) | (1 << (MySqlParser.INSTANCE - 366)) | (1 << (MySqlParser.INVISIBLE - 366)) | (1 << (MySqlParser.INVOKER - 366)) | (1 << (MySqlParser.IO - 366)) | (1 << (MySqlParser.IO_THREAD - 366)) | (1 << (MySqlParser.IPC - 366)) | (1 << (MySqlParser.ISOLATION - 366)) | (1 << (MySqlParser.ISSUER - 366)) | (1 << (MySqlParser.JSON - 366)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySqlParser.LANGUAGE - 366)) | (1 << (MySqlParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.LEAVES - 398)) | (1 << (MySqlParser.LESS - 398)) | (1 << (MySqlParser.LEVEL - 398)) | (1 << (MySqlParser.LIST - 398)) | (1 << (MySqlParser.LOCAL - 398)) | (1 << (MySqlParser.LOGFILE - 398)) | (1 << (MySqlParser.LOGS - 398)) | (1 << (MySqlParser.MASTER - 398)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySqlParser.MASTER_DELAY - 398)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySqlParser.MASTER_HOST - 398)) | (1 << (MySqlParser.MASTER_LOG_FILE - 398)) | (1 << (MySqlParser.MASTER_LOG_POS - 398)) | (1 << (MySqlParser.MASTER_PASSWORD - 398)) | (1 << (MySqlParser.MASTER_PORT - 398)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySqlParser.MASTER_SSL - 398)) | (1 << (MySqlParser.MASTER_SSL_CA - 398)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_CERT - 398)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySqlParser.MASTER_SSL_CRL - 398)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_KEY - 398)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 398)) | (1 << (MySqlParser.MASTER_USER - 398)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySqlParser.MEDIUM - 430)) | (1 << (MySqlParser.MEMBER - 430)) | (1 << (MySqlParser.MERGE - 430)) | (1 << (MySqlParser.MESSAGE_TEXT - 430)) | (1 << (MySqlParser.MID - 430)) | (1 << (MySqlParser.MIGRATE - 430)) | (1 << (MySqlParser.MIN_ROWS - 430)) | (1 << (MySqlParser.MODE - 430)) | (1 << (MySqlParser.MODIFY - 430)) | (1 << (MySqlParser.MUTEX - 430)) | (1 << (MySqlParser.MYSQL - 430)) | (1 << (MySqlParser.MYSQL_ERRNO - 430)) | (1 << (MySqlParser.NAME - 430)) | (1 << (MySqlParser.NAMES - 430)) | (1 << (MySqlParser.NCHAR - 430)) | (1 << (MySqlParser.NEVER - 430)) | (1 << (MySqlParser.NEXT - 430)) | (1 << (MySqlParser.NO - 430)) | (1 << (MySqlParser.NODEGROUP - 430)) | (1 << (MySqlParser.NONE - 430)) | (1 << (MySqlParser.OFFLINE - 430)) | (1 << (MySqlParser.OFFSET - 430)) | (1 << (MySqlParser.OF - 430)) | (1 << (MySqlParser.OJ - 430)) | (1 << (MySqlParser.OLD_PASSWORD - 430)) | (1 << (MySqlParser.ONE - 430)) | (1 << (MySqlParser.ONLINE - 430)) | (1 << (MySqlParser.ONLY - 430)) | (1 << (MySqlParser.OPEN - 430)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySqlParser.OPTIONS - 462)) | (1 << (MySqlParser.OWNER - 462)) | (1 << (MySqlParser.PACK_KEYS - 462)) | (1 << (MySqlParser.PAGE - 462)) | (1 << (MySqlParser.PARSER - 462)) | (1 << (MySqlParser.PARTIAL - 462)) | (1 << (MySqlParser.PARTITIONING - 462)) | (1 << (MySqlParser.PARTITIONS - 462)) | (1 << (MySqlParser.PASSWORD - 462)) | (1 << (MySqlParser.PHASE - 462)) | (1 << (MySqlParser.PLUGIN - 462)) | (1 << (MySqlParser.PLUGIN_DIR - 462)) | (1 << (MySqlParser.PLUGINS - 462)) | (1 << (MySqlParser.PORT - 462)) | (1 << (MySqlParser.PRECEDES - 462)) | (1 << (MySqlParser.PREPARE - 462)) | (1 << (MySqlParser.PRESERVE - 462)) | (1 << (MySqlParser.PREV - 462)) | (1 << (MySqlParser.PROCESSLIST - 462)) | (1 << (MySqlParser.PROFILE - 462)) | (1 << (MySqlParser.PROFILES - 462)) | (1 << (MySqlParser.PROXY - 462)) | (1 << (MySqlParser.QUERY - 462)) | (1 << (MySqlParser.QUICK - 462)) | (1 << (MySqlParser.REBUILD - 462)) | (1 << (MySqlParser.RECOVER - 462)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySqlParser.REDUNDANT - 462)) | (1 << (MySqlParser.RELAY - 462)) | (1 << (MySqlParser.RELAY_LOG_FILE - 462)) | (1 << (MySqlParser.RELAY_LOG_POS - 462)) | (1 << (MySqlParser.RELAYLOG - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySqlParser.REMOVE - 494)) | (1 << (MySqlParser.REORGANIZE - 494)) | (1 << (MySqlParser.REPAIR - 494)) | (1 << (MySqlParser.REPLICATE_DO_DB - 494)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATION - 494)) | (1 << (MySqlParser.RESET - 494)) | (1 << (MySqlParser.RESUME - 494)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 494)) | (1 << (MySqlParser.RETURNS - 494)) | (1 << (MySqlParser.ROLE - 494)) | (1 << (MySqlParser.ROLLBACK - 494)) | (1 << (MySqlParser.ROLLUP - 494)) | (1 << (MySqlParser.ROTATE - 494)) | (1 << (MySqlParser.ROW - 494)) | (1 << (MySqlParser.ROWS - 494)) | (1 << (MySqlParser.ROW_FORMAT - 494)) | (1 << (MySqlParser.SAVEPOINT - 494)) | (1 << (MySqlParser.SCHEDULE - 494)) | (1 << (MySqlParser.SECURITY - 494)) | (1 << (MySqlParser.SERVER - 494)) | (1 << (MySqlParser.SESSION - 494)) | (1 << (MySqlParser.SHARE - 494)) | (1 << (MySqlParser.SHARED - 494)) | (1 << (MySqlParser.SIGNED - 494)) | (1 << (MySqlParser.SIMPLE - 494)) | (1 << (MySqlParser.SLAVE - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySqlParser.SLOW - 526)) | (1 << (MySqlParser.SNAPSHOT - 526)) | (1 << (MySqlParser.SOCKET - 526)) | (1 << (MySqlParser.SOME - 526)) | (1 << (MySqlParser.SONAME - 526)) | (1 << (MySqlParser.SOUNDS - 526)) | (1 << (MySqlParser.SOURCE - 526)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySqlParser.SQL_CACHE - 526)) | (1 << (MySqlParser.SQL_NO_CACHE - 526)) | (1 << (MySqlParser.SQL_THREAD - 526)) | (1 << (MySqlParser.START - 526)) | (1 << (MySqlParser.STARTS - 526)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 526)) | (1 << (MySqlParser.STATS_PERSISTENT - 526)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySqlParser.STATUS - 526)) | (1 << (MySqlParser.STOP - 526)) | (1 << (MySqlParser.STORAGE - 526)) | (1 << (MySqlParser.STRING - 526)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySqlParser.SUBJECT - 526)) | (1 << (MySqlParser.SUBPARTITION - 526)) | (1 << (MySqlParser.SUBPARTITIONS - 526)) | (1 << (MySqlParser.SUSPEND - 526)) | (1 << (MySqlParser.SWAPS - 526)) | (1 << (MySqlParser.SWITCHES - 526)) | (1 << (MySqlParser.TABLE_NAME - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySqlParser.TABLESPACE - 558)) | (1 << (MySqlParser.TEMPORARY - 558)) | (1 << (MySqlParser.TEMPTABLE - 558)) | (1 << (MySqlParser.THAN - 558)) | (1 << (MySqlParser.TRADITIONAL - 558)) | (1 << (MySqlParser.TRANSACTION - 558)) | (1 << (MySqlParser.TRANSACTIONAL - 558)) | (1 << (MySqlParser.TRIGGERS - 558)) | (1 << (MySqlParser.TRUNCATE - 558)) | (1 << (MySqlParser.UNDEFINED - 558)) | (1 << (MySqlParser.UNDOFILE - 558)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySqlParser.UNINSTALL - 558)) | (1 << (MySqlParser.UNKNOWN - 558)) | (1 << (MySqlParser.UNTIL - 558)) | (1 << (MySqlParser.UPGRADE - 558)) | (1 << (MySqlParser.USER - 558)) | (1 << (MySqlParser.USE_FRM - 558)) | (1 << (MySqlParser.USER_RESOURCES - 558)) | (1 << (MySqlParser.VALIDATION - 558)) | (1 << (MySqlParser.VALUE - 558)) | (1 << (MySqlParser.VARIABLES - 558)) | (1 << (MySqlParser.VIEW - 558)) | (1 << (MySqlParser.VISIBLE - 558)) | (1 << (MySqlParser.WAIT - 558)) | (1 << (MySqlParser.WARNINGS - 558)) | (1 << (MySqlParser.WITHOUT - 558)) | (1 << (MySqlParser.WORK - 558)) | (1 << (MySqlParser.WRAPPER - 558)) | (1 << (MySqlParser.X509 - 558)) | (1 << (MySqlParser.XA - 558)))) !== 0) || ((((_la - 590)) & ~0x1f) == 0 && ((1 << (_la - 590)) & ((1 << (MySqlParser.XML - 590)) | (1 << (MySqlParser.INTERNAL - 590)) | (1 << (MySqlParser.QUARTER - 590)) | (1 << (MySqlParser.MONTH - 590)) | (1 << (MySqlParser.DAY - 590)) | (1 << (MySqlParser.HOUR - 590)) | (1 << (MySqlParser.MINUTE - 590)) | (1 << (MySqlParser.WEEK - 590)) | (1 << (MySqlParser.SECOND - 590)) | (1 << (MySqlParser.MICROSECOND - 590)) | (1 << (MySqlParser.TABLES - 590)) | (1 << (MySqlParser.ROUTINE - 590)) | (1 << (MySqlParser.EXECUTE - 590)) | (1 << (MySqlParser.FILE - 590)) | (1 << (MySqlParser.PROCESS - 590)) | (1 << (MySqlParser.RELOAD - 590)) | (1 << (MySqlParser.SHUTDOWN - 590)) | (1 << (MySqlParser.SUPER - 590)) | (1 << (MySqlParser.PRIVILEGES - 590)) | (1 << (MySqlParser.AUDIT_ADMIN - 590)) | (1 << (MySqlParser.BACKUP_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 590)) | (1 << (MySqlParser.CLONE_ADMIN - 590)) | (1 << (MySqlParser.CONNECTION_ADMIN - 590)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 590)) | (1 << (MySqlParser.FIREWALL_ADMIN - 590)))) !== 0) || ((((_la - 622)) & ~0x1f) == 0 && ((1 << (_la - 622)) & ((1 << (MySqlParser.FIREWALL_USER - 622)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 622)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 622)) | (1 << (MySqlParser.NDB_STORED_USER - 622)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.REPLICATION_APPLIER - 622)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 622)) | (1 << (MySqlParser.ROLE_ADMIN - 622)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.SET_USER_ID - 622)) | (1 << (MySqlParser.SHOW_ROUTINE - 622)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 622)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 622)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 622)) | (1 << (MySqlParser.ARMSCII8 - 622)) | (1 << (MySqlParser.ASCII - 622)) | (1 << (MySqlParser.BIG5 - 622)) | (1 << (MySqlParser.CP1250 - 622)) | (1 << (MySqlParser.CP1251 - 622)) | (1 << (MySqlParser.CP1256 - 622)) | (1 << (MySqlParser.CP1257 - 622)) | (1 << (MySqlParser.CP850 - 622)) | (1 << (MySqlParser.CP852 - 622)) | (1 << (MySqlParser.CP866 - 622)) | (1 << (MySqlParser.CP932 - 622)) | (1 << (MySqlParser.DEC8 - 622)) | (1 << (MySqlParser.EUCJPMS - 622)) | (1 << (MySqlParser.EUCKR - 622)) | (1 << (MySqlParser.GB2312 - 622)))) !== 0) || ((((_la - 654)) & ~0x1f) == 0 && ((1 << (_la - 654)) & ((1 << (MySqlParser.GBK - 654)) | (1 << (MySqlParser.GEOSTD8 - 654)) | (1 << (MySqlParser.GREEK - 654)) | (1 << (MySqlParser.HEBREW - 654)) | (1 << (MySqlParser.HP8 - 654)) | (1 << (MySqlParser.KEYBCS2 - 654)) | (1 << (MySqlParser.KOI8R - 654)) | (1 << (MySqlParser.KOI8U - 654)) | (1 << (MySqlParser.LATIN1 - 654)) | (1 << (MySqlParser.LATIN2 - 654)) | (1 << (MySqlParser.LATIN5 - 654)) | (1 << (MySqlParser.LATIN7 - 654)) | (1 << (MySqlParser.MACCE - 654)) | (1 << (MySqlParser.MACROMAN - 654)) | (1 << (MySqlParser.SJIS - 654)) | (1 << (MySqlParser.SWE7 - 654)) | (1 << (MySqlParser.TIS620 - 654)) | (1 << (MySqlParser.UCS2 - 654)) | (1 << (MySqlParser.UJIS - 654)) | (1 << (MySqlParser.UTF16 - 654)) | (1 << (MySqlParser.UTF16LE - 654)) | (1 << (MySqlParser.UTF32 - 654)) | (1 << (MySqlParser.UTF8 - 654)) | (1 << (MySqlParser.UTF8MB3 - 654)) | (1 << (MySqlParser.UTF8MB4 - 654)) | (1 << (MySqlParser.ARCHIVE - 654)) | (1 << (MySqlParser.BLACKHOLE - 654)) | (1 << (MySqlParser.CSV - 654)) | (1 << (MySqlParser.FEDERATED - 654)) | (1 << (MySqlParser.INNODB - 654)) | (1 << (MySqlParser.MEMORY - 654)) | (1 << (MySqlParser.MRG_MYISAM - 654)))) !== 0) || ((((_la - 686)) & ~0x1f) == 0 && ((1 << (_la - 686)) & ((1 << (MySqlParser.MYISAM - 686)) | (1 << (MySqlParser.NDB - 686)) | (1 << (MySqlParser.NDBCLUSTER - 686)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 686)) | (1 << (MySqlParser.TOKUDB - 686)) | (1 << (MySqlParser.REPEATABLE - 686)) | (1 << (MySqlParser.COMMITTED - 686)) | (1 << (MySqlParser.UNCOMMITTED - 686)) | (1 << (MySqlParser.SERIALIZABLE - 686)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 686)) | (1 << (MySqlParser.LINESTRING - 686)) | (1 << (MySqlParser.MULTILINESTRING - 686)) | (1 << (MySqlParser.MULTIPOINT - 686)) | (1 << (MySqlParser.MULTIPOLYGON - 686)) | (1 << (MySqlParser.POINT - 686)) | (1 << (MySqlParser.POLYGON - 686)) | (1 << (MySqlParser.ABS - 686)) | (1 << (MySqlParser.ACOS - 686)) | (1 << (MySqlParser.ADDDATE - 686)) | (1 << (MySqlParser.ADDTIME - 686)) | (1 << (MySqlParser.AES_DECRYPT - 686)) | (1 << (MySqlParser.AES_ENCRYPT - 686)) | (1 << (MySqlParser.AREA - 686)) | (1 << (MySqlParser.ASBINARY - 686)) | (1 << (MySqlParser.ASIN - 686)) | (1 << (MySqlParser.ASTEXT - 686)) | (1 << (MySqlParser.ASWKB - 686)) | (1 << (MySqlParser.ASWKT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 686)))) !== 0) || ((((_la - 718)) & ~0x1f) == 0 && ((1 << (_la - 718)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 718)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 718)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 718)) | (1 << (MySqlParser.ATAN - 718)) | (1 << (MySqlParser.ATAN2 - 718)) | (1 << (MySqlParser.BENCHMARK - 718)) | (1 << (MySqlParser.BIN - 718)) | (1 << (MySqlParser.BIT_COUNT - 718)) | (1 << (MySqlParser.BIT_LENGTH - 718)) | (1 << (MySqlParser.BUFFER - 718)) | (1 << (MySqlParser.CATALOG_NAME - 718)) | (1 << (MySqlParser.CEIL - 718)) | (1 << (MySqlParser.CEILING - 718)) | (1 << (MySqlParser.CENTROID - 718)) | (1 << (MySqlParser.CHARACTER_LENGTH - 718)) | (1 << (MySqlParser.CHARSET - 718)) | (1 << (MySqlParser.CHAR_LENGTH - 718)) | (1 << (MySqlParser.COERCIBILITY - 718)) | (1 << (MySqlParser.COLLATION - 718)) | (1 << (MySqlParser.COMPRESS - 718)) | (1 << (MySqlParser.CONCAT - 718)) | (1 << (MySqlParser.CONCAT_WS - 718)) | (1 << (MySqlParser.CONNECTION_ID - 718)) | (1 << (MySqlParser.CONV - 718)) | (1 << (MySqlParser.CONVERT_TZ - 718)) | (1 << (MySqlParser.COS - 718)) | (1 << (MySqlParser.COT - 718)) | (1 << (MySqlParser.CRC32 - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 718)) | (1 << (MySqlParser.CREATE_DIGEST - 718)))) !== 0) || ((((_la - 750)) & ~0x1f) == 0 && ((1 << (_la - 750)) & ((1 << (MySqlParser.CROSSES - 750)) | (1 << (MySqlParser.DATEDIFF - 750)) | (1 << (MySqlParser.DATE_FORMAT - 750)) | (1 << (MySqlParser.DAYNAME - 750)) | (1 << (MySqlParser.DAYOFMONTH - 750)) | (1 << (MySqlParser.DAYOFWEEK - 750)) | (1 << (MySqlParser.DAYOFYEAR - 750)) | (1 << (MySqlParser.DECODE - 750)) | (1 << (MySqlParser.DEGREES - 750)) | (1 << (MySqlParser.DES_DECRYPT - 750)) | (1 << (MySqlParser.DES_ENCRYPT - 750)) | (1 << (MySqlParser.DIMENSION - 750)) | (1 << (MySqlParser.DISJOINT - 750)) | (1 << (MySqlParser.ELT - 750)) | (1 << (MySqlParser.ENCODE - 750)) | (1 << (MySqlParser.ENCRYPT - 750)) | (1 << (MySqlParser.ENDPOINT - 750)) | (1 << (MySqlParser.ENVELOPE - 750)) | (1 << (MySqlParser.EQUALS - 750)) | (1 << (MySqlParser.EXP - 750)) | (1 << (MySqlParser.EXPORT_SET - 750)) | (1 << (MySqlParser.EXTERIORRING - 750)) | (1 << (MySqlParser.EXTRACTVALUE - 750)) | (1 << (MySqlParser.FIELD - 750)) | (1 << (MySqlParser.FIND_IN_SET - 750)) | (1 << (MySqlParser.FLOOR - 750)) | (1 << (MySqlParser.FORMAT - 750)) | (1 << (MySqlParser.FOUND_ROWS - 750)) | (1 << (MySqlParser.FROM_BASE64 - 750)) | (1 << (MySqlParser.FROM_DAYS - 750)) | (1 << (MySqlParser.FROM_UNIXTIME - 750)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 750)))) !== 0) || ((((_la - 782)) & ~0x1f) == 0 && ((1 << (_la - 782)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYN - 782)) | (1 << (MySqlParser.GEOMETRYTYPE - 782)) | (1 << (MySqlParser.GEOMFROMTEXT - 782)) | (1 << (MySqlParser.GEOMFROMWKB - 782)) | (1 << (MySqlParser.GET_FORMAT - 782)) | (1 << (MySqlParser.GET_LOCK - 782)) | (1 << (MySqlParser.GLENGTH - 782)) | (1 << (MySqlParser.GREATEST - 782)) | (1 << (MySqlParser.GTID_SUBSET - 782)) | (1 << (MySqlParser.GTID_SUBTRACT - 782)) | (1 << (MySqlParser.HEX - 782)) | (1 << (MySqlParser.IFNULL - 782)) | (1 << (MySqlParser.INET6_ATON - 782)) | (1 << (MySqlParser.INET6_NTOA - 782)) | (1 << (MySqlParser.INET_ATON - 782)) | (1 << (MySqlParser.INET_NTOA - 782)) | (1 << (MySqlParser.INSTR - 782)) | (1 << (MySqlParser.INTERIORRINGN - 782)) | (1 << (MySqlParser.INTERSECTS - 782)) | (1 << (MySqlParser.ISCLOSED - 782)) | (1 << (MySqlParser.ISEMPTY - 782)) | (1 << (MySqlParser.ISNULL - 782)) | (1 << (MySqlParser.ISSIMPLE - 782)) | (1 << (MySqlParser.IS_FREE_LOCK - 782)) | (1 << (MySqlParser.IS_IPV4 - 782)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 782)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 782)))) !== 0) || ((((_la - 814)) & ~0x1f) == 0 && ((1 << (_la - 814)) & ((1 << (MySqlParser.IS_IPV6 - 814)) | (1 << (MySqlParser.IS_USED_LOCK - 814)) | (1 << (MySqlParser.LAST_INSERT_ID - 814)) | (1 << (MySqlParser.LCASE - 814)) | (1 << (MySqlParser.LEAST - 814)) | (1 << (MySqlParser.LENGTH - 814)) | (1 << (MySqlParser.LINEFROMTEXT - 814)) | (1 << (MySqlParser.LINEFROMWKB - 814)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 814)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 814)) | (1 << (MySqlParser.LN - 814)) | (1 << (MySqlParser.LOAD_FILE - 814)) | (1 << (MySqlParser.LOCATE - 814)) | (1 << (MySqlParser.LOG - 814)) | (1 << (MySqlParser.LOG10 - 814)) | (1 << (MySqlParser.LOG2 - 814)) | (1 << (MySqlParser.LOWER - 814)) | (1 << (MySqlParser.LPAD - 814)) | (1 << (MySqlParser.LTRIM - 814)) | (1 << (MySqlParser.MAKEDATE - 814)) | (1 << (MySqlParser.MAKETIME - 814)) | (1 << (MySqlParser.MAKE_SET - 814)) | (1 << (MySqlParser.MASTER_POS_WAIT - 814)) | (1 << (MySqlParser.MBRCONTAINS - 814)) | (1 << (MySqlParser.MBRDISJOINT - 814)) | (1 << (MySqlParser.MBREQUAL - 814)) | (1 << (MySqlParser.MBRINTERSECTS - 814)) | (1 << (MySqlParser.MBROVERLAPS - 814)) | (1 << (MySqlParser.MBRTOUCHES - 814)) | (1 << (MySqlParser.MBRWITHIN - 814)) | (1 << (MySqlParser.MD5 - 814)) | (1 << (MySqlParser.MLINEFROMTEXT - 814)))) !== 0) || ((((_la - 846)) & ~0x1f) == 0 && ((1 << (_la - 846)) & ((1 << (MySqlParser.MLINEFROMWKB - 846)) | (1 << (MySqlParser.MONTHNAME - 846)) | (1 << (MySqlParser.MPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MPOINTFROMWKB - 846)) | (1 << (MySqlParser.MPOLYFROMTEXT - 846)) | (1 << (MySqlParser.MPOLYFROMWKB - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 846)) | (1 << (MySqlParser.NAME_CONST - 846)) | (1 << (MySqlParser.NULLIF - 846)) | (1 << (MySqlParser.NUMGEOMETRIES - 846)) | (1 << (MySqlParser.NUMINTERIORRINGS - 846)) | (1 << (MySqlParser.NUMPOINTS - 846)) | (1 << (MySqlParser.OCT - 846)) | (1 << (MySqlParser.OCTET_LENGTH - 846)) | (1 << (MySqlParser.ORD - 846)) | (1 << (MySqlParser.OVERLAPS - 846)) | (1 << (MySqlParser.PERIOD_ADD - 846)) | (1 << (MySqlParser.PERIOD_DIFF - 846)) | (1 << (MySqlParser.PI - 846)) | (1 << (MySqlParser.POINTFROMTEXT - 846)) | (1 << (MySqlParser.POINTFROMWKB - 846)) | (1 << (MySqlParser.POINTN - 846)) | (1 << (MySqlParser.POLYFROMTEXT - 846)) | (1 << (MySqlParser.POLYFROMWKB - 846)) | (1 << (MySqlParser.POLYGONFROMTEXT - 846)) | (1 << (MySqlParser.POLYGONFROMWKB - 846)) | (1 << (MySqlParser.POW - 846)))) !== 0) || ((((_la - 878)) & ~0x1f) == 0 && ((1 << (_la - 878)) & ((1 << (MySqlParser.POWER - 878)) | (1 << (MySqlParser.QUOTE - 878)) | (1 << (MySqlParser.RADIANS - 878)) | (1 << (MySqlParser.RAND - 878)) | (1 << (MySqlParser.RANDOM_BYTES - 878)) | (1 << (MySqlParser.RELEASE_LOCK - 878)) | (1 << (MySqlParser.REVERSE - 878)) | (1 << (MySqlParser.ROUND - 878)) | (1 << (MySqlParser.ROW_COUNT - 878)) | (1 << (MySqlParser.RPAD - 878)) | (1 << (MySqlParser.RTRIM - 878)) | (1 << (MySqlParser.SEC_TO_TIME - 878)) | (1 << (MySqlParser.SESSION_USER - 878)) | (1 << (MySqlParser.SHA - 878)) | (1 << (MySqlParser.SHA1 - 878)) | (1 << (MySqlParser.SHA2 - 878)) | (1 << (MySqlParser.SCHEMA_NAME - 878)) | (1 << (MySqlParser.SIGN - 878)) | (1 << (MySqlParser.SIN - 878)) | (1 << (MySqlParser.SLEEP - 878)) | (1 << (MySqlParser.SOUNDEX - 878)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 878)) | (1 << (MySqlParser.SQRT - 878)) | (1 << (MySqlParser.SRID - 878)) | (1 << (MySqlParser.STARTPOINT - 878)) | (1 << (MySqlParser.STRCMP - 878)) | (1 << (MySqlParser.STR_TO_DATE - 878)) | (1 << (MySqlParser.ST_AREA - 878)) | (1 << (MySqlParser.ST_ASBINARY - 878)) | (1 << (MySqlParser.ST_ASTEXT - 878)) | (1 << (MySqlParser.ST_ASWKB - 878)) | (1 << (MySqlParser.ST_ASWKT - 878)))) !== 0) || ((((_la - 910)) & ~0x1f) == 0 && ((1 << (_la - 910)) & ((1 << (MySqlParser.ST_BUFFER - 910)) | (1 << (MySqlParser.ST_CENTROID - 910)) | (1 << (MySqlParser.ST_CONTAINS - 910)) | (1 << (MySqlParser.ST_CROSSES - 910)) | (1 << (MySqlParser.ST_DIFFERENCE - 910)) | (1 << (MySqlParser.ST_DIMENSION - 910)) | (1 << (MySqlParser.ST_DISJOINT - 910)) | (1 << (MySqlParser.ST_DISTANCE - 910)) | (1 << (MySqlParser.ST_ENDPOINT - 910)) | (1 << (MySqlParser.ST_ENVELOPE - 910)) | (1 << (MySqlParser.ST_EQUALS - 910)) | (1 << (MySqlParser.ST_EXTERIORRING - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYN - 910)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 910)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 910)) | (1 << (MySqlParser.ST_INTERIORRINGN - 910)) | (1 << (MySqlParser.ST_INTERSECTION - 910)) | (1 << (MySqlParser.ST_INTERSECTS - 910)) | (1 << (MySqlParser.ST_ISCLOSED - 910)) | (1 << (MySqlParser.ST_ISEMPTY - 910)) | (1 << (MySqlParser.ST_ISSIMPLE - 910)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 910)) | (1 << (MySqlParser.ST_LINEFROMWKB - 910)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 910)))) !== 0) || ((((_la - 942)) & ~0x1f) == 0 && ((1 << (_la - 942)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 942)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 942)) | (1 << (MySqlParser.ST_NUMPOINTS - 942)) | (1 << (MySqlParser.ST_OVERLAPS - 942)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 942)) | (1 << (MySqlParser.ST_POINTFROMWKB - 942)) | (1 << (MySqlParser.ST_POINTN - 942)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYFROMWKB - 942)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 942)) | (1 << (MySqlParser.ST_SRID - 942)) | (1 << (MySqlParser.ST_STARTPOINT - 942)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 942)) | (1 << (MySqlParser.ST_TOUCHES - 942)) | (1 << (MySqlParser.ST_UNION - 942)) | (1 << (MySqlParser.ST_WITHIN - 942)) | (1 << (MySqlParser.ST_X - 942)) | (1 << (MySqlParser.ST_Y - 942)) | (1 << (MySqlParser.SUBDATE - 942)) | (1 << (MySqlParser.SUBSTRING_INDEX - 942)) | (1 << (MySqlParser.SUBTIME - 942)) | (1 << (MySqlParser.SYSTEM_USER - 942)) | (1 << (MySqlParser.TAN - 942)) | (1 << (MySqlParser.TIMEDIFF - 942)) | (1 << (MySqlParser.TIMESTAMPADD - 942)) | (1 << (MySqlParser.TIMESTAMPDIFF - 942)) | (1 << (MySqlParser.TIME_FORMAT - 942)) | (1 << (MySqlParser.TIME_TO_SEC - 942)) | (1 << (MySqlParser.TOUCHES - 942)))) !== 0) || ((((_la - 974)) & ~0x1f) == 0 && ((1 << (_la - 974)) & ((1 << (MySqlParser.TO_BASE64 - 974)) | (1 << (MySqlParser.TO_DAYS - 974)) | (1 << (MySqlParser.TO_SECONDS - 974)) | (1 << (MySqlParser.UCASE - 974)) | (1 << (MySqlParser.UNCOMPRESS - 974)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 974)) | (1 << (MySqlParser.UNHEX - 974)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 974)) | (1 << (MySqlParser.UPDATEXML - 974)) | (1 << (MySqlParser.UPPER - 974)) | (1 << (MySqlParser.UUID - 974)) | (1 << (MySqlParser.UUID_SHORT - 974)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 974)) | (1 << (MySqlParser.VERSION - 974)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1 << (MySqlParser.WEEKDAY - 974)) | (1 << (MySqlParser.WEEKOFYEAR - 974)) | (1 << (MySqlParser.WEIGHT_STRING - 974)) | (1 << (MySqlParser.WITHIN - 974)) | (1 << (MySqlParser.YEARWEEK - 974)) | (1 << (MySqlParser.Y_FUNCTION - 974)) | (1 << (MySqlParser.X_FUNCTION - 974)))) !== 0) || ((((_la - 1034)) & ~0x1f) == 0 && ((1 << (_la - 1034)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (MySqlParser.STRING_LITERAL - 1034)) | (1 << (MySqlParser.ID - 1034)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1034)))) !== 0)) {
	                    this.state = 1520;
	                    localctx.name = this.uid();
	                }

	            }

	            this.state = 1525;
	            this.match(MySqlParser.FOREIGN);
	            this.state = 1526;
	            this.match(MySqlParser.KEY);
	            this.state = 1528;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySqlParser.CURRENT - 32)) | (1 << (MySqlParser.DATABASE - 32)) | (1 << (MySqlParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySqlParser.LEFT || _la===MySqlParser.NUMBER || _la===MySqlParser.RIGHT || _la===MySqlParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.TIMESTAMP - 199)) | (1 << (MySqlParser.DATETIME - 199)) | (1 << (MySqlParser.YEAR - 199)) | (1 << (MySqlParser.TEXT - 199)) | (1 << (MySqlParser.ENUM - 199)) | (1 << (MySqlParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.JSON_VALID - 233)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySqlParser.AVG - 233)) | (1 << (MySqlParser.BIT_AND - 233)) | (1 << (MySqlParser.BIT_OR - 233)) | (1 << (MySqlParser.BIT_XOR - 233)) | (1 << (MySqlParser.COUNT - 233)) | (1 << (MySqlParser.GROUP_CONCAT - 233)) | (1 << (MySqlParser.MAX - 233)) | (1 << (MySqlParser.MIN - 233)) | (1 << (MySqlParser.STD - 233)) | (1 << (MySqlParser.STDDEV - 233)) | (1 << (MySqlParser.STDDEV_POP - 233)) | (1 << (MySqlParser.STDDEV_SAMP - 233)) | (1 << (MySqlParser.SUM - 233)) | (1 << (MySqlParser.VAR_POP - 233)) | (1 << (MySqlParser.VAR_SAMP - 233)) | (1 << (MySqlParser.VARIANCE - 233)) | (1 << (MySqlParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySqlParser.ACCOUNT - 270)) | (1 << (MySqlParser.ACTION - 270)) | (1 << (MySqlParser.AFTER - 270)) | (1 << (MySqlParser.AGGREGATE - 270)) | (1 << (MySqlParser.ALGORITHM - 270)) | (1 << (MySqlParser.ANY - 270)) | (1 << (MySqlParser.AT - 270)) | (1 << (MySqlParser.AUTHORS - 270)) | (1 << (MySqlParser.AUTOCOMMIT - 270)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySqlParser.AUTO_INCREMENT - 270)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 270)) | (1 << (MySqlParser.BEGIN - 270)) | (1 << (MySqlParser.BINLOG - 270)) | (1 << (MySqlParser.BIT - 270)) | (1 << (MySqlParser.BLOCK - 270)) | (1 << (MySqlParser.BOOL - 270)) | (1 << (MySqlParser.BOOLEAN - 270)) | (1 << (MySqlParser.BTREE - 270)) | (1 << (MySqlParser.CACHE - 270)) | (1 << (MySqlParser.CASCADED - 270)) | (1 << (MySqlParser.CHAIN - 270)) | (1 << (MySqlParser.CHANGED - 270)) | (1 << (MySqlParser.CHANNEL - 270)) | (1 << (MySqlParser.CHECKSUM - 270)) | (1 << (MySqlParser.PAGE_CHECKSUM - 270)) | (1 << (MySqlParser.CIPHER - 270)) | (1 << (MySqlParser.CLASS_ORIGIN - 270)) | (1 << (MySqlParser.CLIENT - 270)) | (1 << (MySqlParser.CLOSE - 270)) | (1 << (MySqlParser.COALESCE - 270)) | (1 << (MySqlParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySqlParser.COLUMNS - 302)) | (1 << (MySqlParser.COLUMN_FORMAT - 302)) | (1 << (MySqlParser.COLUMN_NAME - 302)) | (1 << (MySqlParser.COMMENT - 302)) | (1 << (MySqlParser.COMMIT - 302)) | (1 << (MySqlParser.COMPACT - 302)) | (1 << (MySqlParser.COMPLETION - 302)) | (1 << (MySqlParser.COMPRESSED - 302)) | (1 << (MySqlParser.COMPRESSION - 302)) | (1 << (MySqlParser.CONCURRENT - 302)) | (1 << (MySqlParser.CONNECTION - 302)) | (1 << (MySqlParser.CONSISTENT - 302)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySqlParser.CONSTRAINT_NAME - 302)) | (1 << (MySqlParser.CONTAINS - 302)) | (1 << (MySqlParser.CONTEXT - 302)) | (1 << (MySqlParser.CONTRIBUTORS - 302)) | (1 << (MySqlParser.COPY - 302)) | (1 << (MySqlParser.CPU - 302)) | (1 << (MySqlParser.CURSOR_NAME - 302)) | (1 << (MySqlParser.DATA - 302)) | (1 << (MySqlParser.DATAFILE - 302)) | (1 << (MySqlParser.DEALLOCATE - 302)) | (1 << (MySqlParser.DEFAULT_AUTH - 302)) | (1 << (MySqlParser.DEFINER - 302)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 302)) | (1 << (MySqlParser.DES_KEY_FILE - 302)) | (1 << (MySqlParser.DIRECTORY - 302)) | (1 << (MySqlParser.DISABLE - 302)) | (1 << (MySqlParser.DISCARD - 302)) | (1 << (MySqlParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySqlParser.DO - 334)) | (1 << (MySqlParser.DUMPFILE - 334)) | (1 << (MySqlParser.DUPLICATE - 334)) | (1 << (MySqlParser.DYNAMIC - 334)) | (1 << (MySqlParser.ENABLE - 334)) | (1 << (MySqlParser.ENCRYPTION - 334)) | (1 << (MySqlParser.END - 334)) | (1 << (MySqlParser.ENDS - 334)) | (1 << (MySqlParser.ENGINE - 334)) | (1 << (MySqlParser.ENGINES - 334)) | (1 << (MySqlParser.ERROR - 334)) | (1 << (MySqlParser.ERRORS - 334)) | (1 << (MySqlParser.ESCAPE - 334)) | (1 << (MySqlParser.EVEN - 334)) | (1 << (MySqlParser.EVENT - 334)) | (1 << (MySqlParser.EVENTS - 334)) | (1 << (MySqlParser.EVERY - 334)) | (1 << (MySqlParser.EXCHANGE - 334)) | (1 << (MySqlParser.EXCLUSIVE - 334)) | (1 << (MySqlParser.EXPIRE - 334)) | (1 << (MySqlParser.EXPORT - 334)) | (1 << (MySqlParser.EXTENDED - 334)) | (1 << (MySqlParser.EXTENT_SIZE - 334)) | (1 << (MySqlParser.FAST - 334)) | (1 << (MySqlParser.FAULTS - 334)) | (1 << (MySqlParser.FIELDS - 334)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySqlParser.FILTER - 334)) | (1 << (MySqlParser.FIRST - 334)) | (1 << (MySqlParser.FIXED - 334)) | (1 << (MySqlParser.FLUSH - 334)) | (1 << (MySqlParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySqlParser.FOUND - 366)) | (1 << (MySqlParser.FULL - 366)) | (1 << (MySqlParser.FUNCTION - 366)) | (1 << (MySqlParser.GENERAL - 366)) | (1 << (MySqlParser.GLOBAL - 366)) | (1 << (MySqlParser.GRANTS - 366)) | (1 << (MySqlParser.GROUP_REPLICATION - 366)) | (1 << (MySqlParser.HANDLER - 366)) | (1 << (MySqlParser.HASH - 366)) | (1 << (MySqlParser.HELP - 366)) | (1 << (MySqlParser.HOST - 366)) | (1 << (MySqlParser.HOSTS - 366)) | (1 << (MySqlParser.IDENTIFIED - 366)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySqlParser.IMPORT - 366)) | (1 << (MySqlParser.INDEXES - 366)) | (1 << (MySqlParser.INITIAL_SIZE - 366)) | (1 << (MySqlParser.INPLACE - 366)) | (1 << (MySqlParser.INSERT_METHOD - 366)) | (1 << (MySqlParser.INSTALL - 366)) | (1 << (MySqlParser.INSTANCE - 366)) | (1 << (MySqlParser.INVISIBLE - 366)) | (1 << (MySqlParser.INVOKER - 366)) | (1 << (MySqlParser.IO - 366)) | (1 << (MySqlParser.IO_THREAD - 366)) | (1 << (MySqlParser.IPC - 366)) | (1 << (MySqlParser.ISOLATION - 366)) | (1 << (MySqlParser.ISSUER - 366)) | (1 << (MySqlParser.JSON - 366)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySqlParser.LANGUAGE - 366)) | (1 << (MySqlParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.LEAVES - 398)) | (1 << (MySqlParser.LESS - 398)) | (1 << (MySqlParser.LEVEL - 398)) | (1 << (MySqlParser.LIST - 398)) | (1 << (MySqlParser.LOCAL - 398)) | (1 << (MySqlParser.LOGFILE - 398)) | (1 << (MySqlParser.LOGS - 398)) | (1 << (MySqlParser.MASTER - 398)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySqlParser.MASTER_DELAY - 398)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySqlParser.MASTER_HOST - 398)) | (1 << (MySqlParser.MASTER_LOG_FILE - 398)) | (1 << (MySqlParser.MASTER_LOG_POS - 398)) | (1 << (MySqlParser.MASTER_PASSWORD - 398)) | (1 << (MySqlParser.MASTER_PORT - 398)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySqlParser.MASTER_SSL - 398)) | (1 << (MySqlParser.MASTER_SSL_CA - 398)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_CERT - 398)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySqlParser.MASTER_SSL_CRL - 398)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_KEY - 398)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 398)) | (1 << (MySqlParser.MASTER_USER - 398)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySqlParser.MEDIUM - 430)) | (1 << (MySqlParser.MEMBER - 430)) | (1 << (MySqlParser.MERGE - 430)) | (1 << (MySqlParser.MESSAGE_TEXT - 430)) | (1 << (MySqlParser.MID - 430)) | (1 << (MySqlParser.MIGRATE - 430)) | (1 << (MySqlParser.MIN_ROWS - 430)) | (1 << (MySqlParser.MODE - 430)) | (1 << (MySqlParser.MODIFY - 430)) | (1 << (MySqlParser.MUTEX - 430)) | (1 << (MySqlParser.MYSQL - 430)) | (1 << (MySqlParser.MYSQL_ERRNO - 430)) | (1 << (MySqlParser.NAME - 430)) | (1 << (MySqlParser.NAMES - 430)) | (1 << (MySqlParser.NCHAR - 430)) | (1 << (MySqlParser.NEVER - 430)) | (1 << (MySqlParser.NEXT - 430)) | (1 << (MySqlParser.NO - 430)) | (1 << (MySqlParser.NODEGROUP - 430)) | (1 << (MySqlParser.NONE - 430)) | (1 << (MySqlParser.OFFLINE - 430)) | (1 << (MySqlParser.OFFSET - 430)) | (1 << (MySqlParser.OF - 430)) | (1 << (MySqlParser.OJ - 430)) | (1 << (MySqlParser.OLD_PASSWORD - 430)) | (1 << (MySqlParser.ONE - 430)) | (1 << (MySqlParser.ONLINE - 430)) | (1 << (MySqlParser.ONLY - 430)) | (1 << (MySqlParser.OPEN - 430)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySqlParser.OPTIONS - 462)) | (1 << (MySqlParser.OWNER - 462)) | (1 << (MySqlParser.PACK_KEYS - 462)) | (1 << (MySqlParser.PAGE - 462)) | (1 << (MySqlParser.PARSER - 462)) | (1 << (MySqlParser.PARTIAL - 462)) | (1 << (MySqlParser.PARTITIONING - 462)) | (1 << (MySqlParser.PARTITIONS - 462)) | (1 << (MySqlParser.PASSWORD - 462)) | (1 << (MySqlParser.PHASE - 462)) | (1 << (MySqlParser.PLUGIN - 462)) | (1 << (MySqlParser.PLUGIN_DIR - 462)) | (1 << (MySqlParser.PLUGINS - 462)) | (1 << (MySqlParser.PORT - 462)) | (1 << (MySqlParser.PRECEDES - 462)) | (1 << (MySqlParser.PREPARE - 462)) | (1 << (MySqlParser.PRESERVE - 462)) | (1 << (MySqlParser.PREV - 462)) | (1 << (MySqlParser.PROCESSLIST - 462)) | (1 << (MySqlParser.PROFILE - 462)) | (1 << (MySqlParser.PROFILES - 462)) | (1 << (MySqlParser.PROXY - 462)) | (1 << (MySqlParser.QUERY - 462)) | (1 << (MySqlParser.QUICK - 462)) | (1 << (MySqlParser.REBUILD - 462)) | (1 << (MySqlParser.RECOVER - 462)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySqlParser.REDUNDANT - 462)) | (1 << (MySqlParser.RELAY - 462)) | (1 << (MySqlParser.RELAY_LOG_FILE - 462)) | (1 << (MySqlParser.RELAY_LOG_POS - 462)) | (1 << (MySqlParser.RELAYLOG - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySqlParser.REMOVE - 494)) | (1 << (MySqlParser.REORGANIZE - 494)) | (1 << (MySqlParser.REPAIR - 494)) | (1 << (MySqlParser.REPLICATE_DO_DB - 494)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATION - 494)) | (1 << (MySqlParser.RESET - 494)) | (1 << (MySqlParser.RESUME - 494)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 494)) | (1 << (MySqlParser.RETURNS - 494)) | (1 << (MySqlParser.ROLE - 494)) | (1 << (MySqlParser.ROLLBACK - 494)) | (1 << (MySqlParser.ROLLUP - 494)) | (1 << (MySqlParser.ROTATE - 494)) | (1 << (MySqlParser.ROW - 494)) | (1 << (MySqlParser.ROWS - 494)) | (1 << (MySqlParser.ROW_FORMAT - 494)) | (1 << (MySqlParser.SAVEPOINT - 494)) | (1 << (MySqlParser.SCHEDULE - 494)) | (1 << (MySqlParser.SECURITY - 494)) | (1 << (MySqlParser.SERVER - 494)) | (1 << (MySqlParser.SESSION - 494)) | (1 << (MySqlParser.SHARE - 494)) | (1 << (MySqlParser.SHARED - 494)) | (1 << (MySqlParser.SIGNED - 494)) | (1 << (MySqlParser.SIMPLE - 494)) | (1 << (MySqlParser.SLAVE - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySqlParser.SLOW - 526)) | (1 << (MySqlParser.SNAPSHOT - 526)) | (1 << (MySqlParser.SOCKET - 526)) | (1 << (MySqlParser.SOME - 526)) | (1 << (MySqlParser.SONAME - 526)) | (1 << (MySqlParser.SOUNDS - 526)) | (1 << (MySqlParser.SOURCE - 526)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySqlParser.SQL_CACHE - 526)) | (1 << (MySqlParser.SQL_NO_CACHE - 526)) | (1 << (MySqlParser.SQL_THREAD - 526)) | (1 << (MySqlParser.START - 526)) | (1 << (MySqlParser.STARTS - 526)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 526)) | (1 << (MySqlParser.STATS_PERSISTENT - 526)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySqlParser.STATUS - 526)) | (1 << (MySqlParser.STOP - 526)) | (1 << (MySqlParser.STORAGE - 526)) | (1 << (MySqlParser.STRING - 526)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySqlParser.SUBJECT - 526)) | (1 << (MySqlParser.SUBPARTITION - 526)) | (1 << (MySqlParser.SUBPARTITIONS - 526)) | (1 << (MySqlParser.SUSPEND - 526)) | (1 << (MySqlParser.SWAPS - 526)) | (1 << (MySqlParser.SWITCHES - 526)) | (1 << (MySqlParser.TABLE_NAME - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySqlParser.TABLESPACE - 558)) | (1 << (MySqlParser.TEMPORARY - 558)) | (1 << (MySqlParser.TEMPTABLE - 558)) | (1 << (MySqlParser.THAN - 558)) | (1 << (MySqlParser.TRADITIONAL - 558)) | (1 << (MySqlParser.TRANSACTION - 558)) | (1 << (MySqlParser.TRANSACTIONAL - 558)) | (1 << (MySqlParser.TRIGGERS - 558)) | (1 << (MySqlParser.TRUNCATE - 558)) | (1 << (MySqlParser.UNDEFINED - 558)) | (1 << (MySqlParser.UNDOFILE - 558)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySqlParser.UNINSTALL - 558)) | (1 << (MySqlParser.UNKNOWN - 558)) | (1 << (MySqlParser.UNTIL - 558)) | (1 << (MySqlParser.UPGRADE - 558)) | (1 << (MySqlParser.USER - 558)) | (1 << (MySqlParser.USE_FRM - 558)) | (1 << (MySqlParser.USER_RESOURCES - 558)) | (1 << (MySqlParser.VALIDATION - 558)) | (1 << (MySqlParser.VALUE - 558)) | (1 << (MySqlParser.VARIABLES - 558)) | (1 << (MySqlParser.VIEW - 558)) | (1 << (MySqlParser.VISIBLE - 558)) | (1 << (MySqlParser.WAIT - 558)) | (1 << (MySqlParser.WARNINGS - 558)) | (1 << (MySqlParser.WITHOUT - 558)) | (1 << (MySqlParser.WORK - 558)) | (1 << (MySqlParser.WRAPPER - 558)) | (1 << (MySqlParser.X509 - 558)) | (1 << (MySqlParser.XA - 558)))) !== 0) || ((((_la - 590)) & ~0x1f) == 0 && ((1 << (_la - 590)) & ((1 << (MySqlParser.XML - 590)) | (1 << (MySqlParser.INTERNAL - 590)) | (1 << (MySqlParser.QUARTER - 590)) | (1 << (MySqlParser.MONTH - 590)) | (1 << (MySqlParser.DAY - 590)) | (1 << (MySqlParser.HOUR - 590)) | (1 << (MySqlParser.MINUTE - 590)) | (1 << (MySqlParser.WEEK - 590)) | (1 << (MySqlParser.SECOND - 590)) | (1 << (MySqlParser.MICROSECOND - 590)) | (1 << (MySqlParser.TABLES - 590)) | (1 << (MySqlParser.ROUTINE - 590)) | (1 << (MySqlParser.EXECUTE - 590)) | (1 << (MySqlParser.FILE - 590)) | (1 << (MySqlParser.PROCESS - 590)) | (1 << (MySqlParser.RELOAD - 590)) | (1 << (MySqlParser.SHUTDOWN - 590)) | (1 << (MySqlParser.SUPER - 590)) | (1 << (MySqlParser.PRIVILEGES - 590)) | (1 << (MySqlParser.AUDIT_ADMIN - 590)) | (1 << (MySqlParser.BACKUP_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 590)) | (1 << (MySqlParser.CLONE_ADMIN - 590)) | (1 << (MySqlParser.CONNECTION_ADMIN - 590)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 590)) | (1 << (MySqlParser.FIREWALL_ADMIN - 590)))) !== 0) || ((((_la - 622)) & ~0x1f) == 0 && ((1 << (_la - 622)) & ((1 << (MySqlParser.FIREWALL_USER - 622)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 622)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 622)) | (1 << (MySqlParser.NDB_STORED_USER - 622)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.REPLICATION_APPLIER - 622)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 622)) | (1 << (MySqlParser.ROLE_ADMIN - 622)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.SET_USER_ID - 622)) | (1 << (MySqlParser.SHOW_ROUTINE - 622)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 622)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 622)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 622)) | (1 << (MySqlParser.ARMSCII8 - 622)) | (1 << (MySqlParser.ASCII - 622)) | (1 << (MySqlParser.BIG5 - 622)) | (1 << (MySqlParser.CP1250 - 622)) | (1 << (MySqlParser.CP1251 - 622)) | (1 << (MySqlParser.CP1256 - 622)) | (1 << (MySqlParser.CP1257 - 622)) | (1 << (MySqlParser.CP850 - 622)) | (1 << (MySqlParser.CP852 - 622)) | (1 << (MySqlParser.CP866 - 622)) | (1 << (MySqlParser.CP932 - 622)) | (1 << (MySqlParser.DEC8 - 622)) | (1 << (MySqlParser.EUCJPMS - 622)) | (1 << (MySqlParser.EUCKR - 622)) | (1 << (MySqlParser.GB2312 - 622)))) !== 0) || ((((_la - 654)) & ~0x1f) == 0 && ((1 << (_la - 654)) & ((1 << (MySqlParser.GBK - 654)) | (1 << (MySqlParser.GEOSTD8 - 654)) | (1 << (MySqlParser.GREEK - 654)) | (1 << (MySqlParser.HEBREW - 654)) | (1 << (MySqlParser.HP8 - 654)) | (1 << (MySqlParser.KEYBCS2 - 654)) | (1 << (MySqlParser.KOI8R - 654)) | (1 << (MySqlParser.KOI8U - 654)) | (1 << (MySqlParser.LATIN1 - 654)) | (1 << (MySqlParser.LATIN2 - 654)) | (1 << (MySqlParser.LATIN5 - 654)) | (1 << (MySqlParser.LATIN7 - 654)) | (1 << (MySqlParser.MACCE - 654)) | (1 << (MySqlParser.MACROMAN - 654)) | (1 << (MySqlParser.SJIS - 654)) | (1 << (MySqlParser.SWE7 - 654)) | (1 << (MySqlParser.TIS620 - 654)) | (1 << (MySqlParser.UCS2 - 654)) | (1 << (MySqlParser.UJIS - 654)) | (1 << (MySqlParser.UTF16 - 654)) | (1 << (MySqlParser.UTF16LE - 654)) | (1 << (MySqlParser.UTF32 - 654)) | (1 << (MySqlParser.UTF8 - 654)) | (1 << (MySqlParser.UTF8MB3 - 654)) | (1 << (MySqlParser.UTF8MB4 - 654)) | (1 << (MySqlParser.ARCHIVE - 654)) | (1 << (MySqlParser.BLACKHOLE - 654)) | (1 << (MySqlParser.CSV - 654)) | (1 << (MySqlParser.FEDERATED - 654)) | (1 << (MySqlParser.INNODB - 654)) | (1 << (MySqlParser.MEMORY - 654)) | (1 << (MySqlParser.MRG_MYISAM - 654)))) !== 0) || ((((_la - 686)) & ~0x1f) == 0 && ((1 << (_la - 686)) & ((1 << (MySqlParser.MYISAM - 686)) | (1 << (MySqlParser.NDB - 686)) | (1 << (MySqlParser.NDBCLUSTER - 686)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 686)) | (1 << (MySqlParser.TOKUDB - 686)) | (1 << (MySqlParser.REPEATABLE - 686)) | (1 << (MySqlParser.COMMITTED - 686)) | (1 << (MySqlParser.UNCOMMITTED - 686)) | (1 << (MySqlParser.SERIALIZABLE - 686)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 686)) | (1 << (MySqlParser.LINESTRING - 686)) | (1 << (MySqlParser.MULTILINESTRING - 686)) | (1 << (MySqlParser.MULTIPOINT - 686)) | (1 << (MySqlParser.MULTIPOLYGON - 686)) | (1 << (MySqlParser.POINT - 686)) | (1 << (MySqlParser.POLYGON - 686)) | (1 << (MySqlParser.ABS - 686)) | (1 << (MySqlParser.ACOS - 686)) | (1 << (MySqlParser.ADDDATE - 686)) | (1 << (MySqlParser.ADDTIME - 686)) | (1 << (MySqlParser.AES_DECRYPT - 686)) | (1 << (MySqlParser.AES_ENCRYPT - 686)) | (1 << (MySqlParser.AREA - 686)) | (1 << (MySqlParser.ASBINARY - 686)) | (1 << (MySqlParser.ASIN - 686)) | (1 << (MySqlParser.ASTEXT - 686)) | (1 << (MySqlParser.ASWKB - 686)) | (1 << (MySqlParser.ASWKT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 686)))) !== 0) || ((((_la - 718)) & ~0x1f) == 0 && ((1 << (_la - 718)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 718)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 718)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 718)) | (1 << (MySqlParser.ATAN - 718)) | (1 << (MySqlParser.ATAN2 - 718)) | (1 << (MySqlParser.BENCHMARK - 718)) | (1 << (MySqlParser.BIN - 718)) | (1 << (MySqlParser.BIT_COUNT - 718)) | (1 << (MySqlParser.BIT_LENGTH - 718)) | (1 << (MySqlParser.BUFFER - 718)) | (1 << (MySqlParser.CATALOG_NAME - 718)) | (1 << (MySqlParser.CEIL - 718)) | (1 << (MySqlParser.CEILING - 718)) | (1 << (MySqlParser.CENTROID - 718)) | (1 << (MySqlParser.CHARACTER_LENGTH - 718)) | (1 << (MySqlParser.CHARSET - 718)) | (1 << (MySqlParser.CHAR_LENGTH - 718)) | (1 << (MySqlParser.COERCIBILITY - 718)) | (1 << (MySqlParser.COLLATION - 718)) | (1 << (MySqlParser.COMPRESS - 718)) | (1 << (MySqlParser.CONCAT - 718)) | (1 << (MySqlParser.CONCAT_WS - 718)) | (1 << (MySqlParser.CONNECTION_ID - 718)) | (1 << (MySqlParser.CONV - 718)) | (1 << (MySqlParser.CONVERT_TZ - 718)) | (1 << (MySqlParser.COS - 718)) | (1 << (MySqlParser.COT - 718)) | (1 << (MySqlParser.CRC32 - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 718)) | (1 << (MySqlParser.CREATE_DIGEST - 718)))) !== 0) || ((((_la - 750)) & ~0x1f) == 0 && ((1 << (_la - 750)) & ((1 << (MySqlParser.CROSSES - 750)) | (1 << (MySqlParser.DATEDIFF - 750)) | (1 << (MySqlParser.DATE_FORMAT - 750)) | (1 << (MySqlParser.DAYNAME - 750)) | (1 << (MySqlParser.DAYOFMONTH - 750)) | (1 << (MySqlParser.DAYOFWEEK - 750)) | (1 << (MySqlParser.DAYOFYEAR - 750)) | (1 << (MySqlParser.DECODE - 750)) | (1 << (MySqlParser.DEGREES - 750)) | (1 << (MySqlParser.DES_DECRYPT - 750)) | (1 << (MySqlParser.DES_ENCRYPT - 750)) | (1 << (MySqlParser.DIMENSION - 750)) | (1 << (MySqlParser.DISJOINT - 750)) | (1 << (MySqlParser.ELT - 750)) | (1 << (MySqlParser.ENCODE - 750)) | (1 << (MySqlParser.ENCRYPT - 750)) | (1 << (MySqlParser.ENDPOINT - 750)) | (1 << (MySqlParser.ENVELOPE - 750)) | (1 << (MySqlParser.EQUALS - 750)) | (1 << (MySqlParser.EXP - 750)) | (1 << (MySqlParser.EXPORT_SET - 750)) | (1 << (MySqlParser.EXTERIORRING - 750)) | (1 << (MySqlParser.EXTRACTVALUE - 750)) | (1 << (MySqlParser.FIELD - 750)) | (1 << (MySqlParser.FIND_IN_SET - 750)) | (1 << (MySqlParser.FLOOR - 750)) | (1 << (MySqlParser.FORMAT - 750)) | (1 << (MySqlParser.FOUND_ROWS - 750)) | (1 << (MySqlParser.FROM_BASE64 - 750)) | (1 << (MySqlParser.FROM_DAYS - 750)) | (1 << (MySqlParser.FROM_UNIXTIME - 750)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 750)))) !== 0) || ((((_la - 782)) & ~0x1f) == 0 && ((1 << (_la - 782)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYN - 782)) | (1 << (MySqlParser.GEOMETRYTYPE - 782)) | (1 << (MySqlParser.GEOMFROMTEXT - 782)) | (1 << (MySqlParser.GEOMFROMWKB - 782)) | (1 << (MySqlParser.GET_FORMAT - 782)) | (1 << (MySqlParser.GET_LOCK - 782)) | (1 << (MySqlParser.GLENGTH - 782)) | (1 << (MySqlParser.GREATEST - 782)) | (1 << (MySqlParser.GTID_SUBSET - 782)) | (1 << (MySqlParser.GTID_SUBTRACT - 782)) | (1 << (MySqlParser.HEX - 782)) | (1 << (MySqlParser.IFNULL - 782)) | (1 << (MySqlParser.INET6_ATON - 782)) | (1 << (MySqlParser.INET6_NTOA - 782)) | (1 << (MySqlParser.INET_ATON - 782)) | (1 << (MySqlParser.INET_NTOA - 782)) | (1 << (MySqlParser.INSTR - 782)) | (1 << (MySqlParser.INTERIORRINGN - 782)) | (1 << (MySqlParser.INTERSECTS - 782)) | (1 << (MySqlParser.ISCLOSED - 782)) | (1 << (MySqlParser.ISEMPTY - 782)) | (1 << (MySqlParser.ISNULL - 782)) | (1 << (MySqlParser.ISSIMPLE - 782)) | (1 << (MySqlParser.IS_FREE_LOCK - 782)) | (1 << (MySqlParser.IS_IPV4 - 782)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 782)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 782)))) !== 0) || ((((_la - 814)) & ~0x1f) == 0 && ((1 << (_la - 814)) & ((1 << (MySqlParser.IS_IPV6 - 814)) | (1 << (MySqlParser.IS_USED_LOCK - 814)) | (1 << (MySqlParser.LAST_INSERT_ID - 814)) | (1 << (MySqlParser.LCASE - 814)) | (1 << (MySqlParser.LEAST - 814)) | (1 << (MySqlParser.LENGTH - 814)) | (1 << (MySqlParser.LINEFROMTEXT - 814)) | (1 << (MySqlParser.LINEFROMWKB - 814)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 814)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 814)) | (1 << (MySqlParser.LN - 814)) | (1 << (MySqlParser.LOAD_FILE - 814)) | (1 << (MySqlParser.LOCATE - 814)) | (1 << (MySqlParser.LOG - 814)) | (1 << (MySqlParser.LOG10 - 814)) | (1 << (MySqlParser.LOG2 - 814)) | (1 << (MySqlParser.LOWER - 814)) | (1 << (MySqlParser.LPAD - 814)) | (1 << (MySqlParser.LTRIM - 814)) | (1 << (MySqlParser.MAKEDATE - 814)) | (1 << (MySqlParser.MAKETIME - 814)) | (1 << (MySqlParser.MAKE_SET - 814)) | (1 << (MySqlParser.MASTER_POS_WAIT - 814)) | (1 << (MySqlParser.MBRCONTAINS - 814)) | (1 << (MySqlParser.MBRDISJOINT - 814)) | (1 << (MySqlParser.MBREQUAL - 814)) | (1 << (MySqlParser.MBRINTERSECTS - 814)) | (1 << (MySqlParser.MBROVERLAPS - 814)) | (1 << (MySqlParser.MBRTOUCHES - 814)) | (1 << (MySqlParser.MBRWITHIN - 814)) | (1 << (MySqlParser.MD5 - 814)) | (1 << (MySqlParser.MLINEFROMTEXT - 814)))) !== 0) || ((((_la - 846)) & ~0x1f) == 0 && ((1 << (_la - 846)) & ((1 << (MySqlParser.MLINEFROMWKB - 846)) | (1 << (MySqlParser.MONTHNAME - 846)) | (1 << (MySqlParser.MPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MPOINTFROMWKB - 846)) | (1 << (MySqlParser.MPOLYFROMTEXT - 846)) | (1 << (MySqlParser.MPOLYFROMWKB - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 846)) | (1 << (MySqlParser.NAME_CONST - 846)) | (1 << (MySqlParser.NULLIF - 846)) | (1 << (MySqlParser.NUMGEOMETRIES - 846)) | (1 << (MySqlParser.NUMINTERIORRINGS - 846)) | (1 << (MySqlParser.NUMPOINTS - 846)) | (1 << (MySqlParser.OCT - 846)) | (1 << (MySqlParser.OCTET_LENGTH - 846)) | (1 << (MySqlParser.ORD - 846)) | (1 << (MySqlParser.OVERLAPS - 846)) | (1 << (MySqlParser.PERIOD_ADD - 846)) | (1 << (MySqlParser.PERIOD_DIFF - 846)) | (1 << (MySqlParser.PI - 846)) | (1 << (MySqlParser.POINTFROMTEXT - 846)) | (1 << (MySqlParser.POINTFROMWKB - 846)) | (1 << (MySqlParser.POINTN - 846)) | (1 << (MySqlParser.POLYFROMTEXT - 846)) | (1 << (MySqlParser.POLYFROMWKB - 846)) | (1 << (MySqlParser.POLYGONFROMTEXT - 846)) | (1 << (MySqlParser.POLYGONFROMWKB - 846)) | (1 << (MySqlParser.POW - 846)))) !== 0) || ((((_la - 878)) & ~0x1f) == 0 && ((1 << (_la - 878)) & ((1 << (MySqlParser.POWER - 878)) | (1 << (MySqlParser.QUOTE - 878)) | (1 << (MySqlParser.RADIANS - 878)) | (1 << (MySqlParser.RAND - 878)) | (1 << (MySqlParser.RANDOM_BYTES - 878)) | (1 << (MySqlParser.RELEASE_LOCK - 878)) | (1 << (MySqlParser.REVERSE - 878)) | (1 << (MySqlParser.ROUND - 878)) | (1 << (MySqlParser.ROW_COUNT - 878)) | (1 << (MySqlParser.RPAD - 878)) | (1 << (MySqlParser.RTRIM - 878)) | (1 << (MySqlParser.SEC_TO_TIME - 878)) | (1 << (MySqlParser.SESSION_USER - 878)) | (1 << (MySqlParser.SHA - 878)) | (1 << (MySqlParser.SHA1 - 878)) | (1 << (MySqlParser.SHA2 - 878)) | (1 << (MySqlParser.SCHEMA_NAME - 878)) | (1 << (MySqlParser.SIGN - 878)) | (1 << (MySqlParser.SIN - 878)) | (1 << (MySqlParser.SLEEP - 878)) | (1 << (MySqlParser.SOUNDEX - 878)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 878)) | (1 << (MySqlParser.SQRT - 878)) | (1 << (MySqlParser.SRID - 878)) | (1 << (MySqlParser.STARTPOINT - 878)) | (1 << (MySqlParser.STRCMP - 878)) | (1 << (MySqlParser.STR_TO_DATE - 878)) | (1 << (MySqlParser.ST_AREA - 878)) | (1 << (MySqlParser.ST_ASBINARY - 878)) | (1 << (MySqlParser.ST_ASTEXT - 878)) | (1 << (MySqlParser.ST_ASWKB - 878)) | (1 << (MySqlParser.ST_ASWKT - 878)))) !== 0) || ((((_la - 910)) & ~0x1f) == 0 && ((1 << (_la - 910)) & ((1 << (MySqlParser.ST_BUFFER - 910)) | (1 << (MySqlParser.ST_CENTROID - 910)) | (1 << (MySqlParser.ST_CONTAINS - 910)) | (1 << (MySqlParser.ST_CROSSES - 910)) | (1 << (MySqlParser.ST_DIFFERENCE - 910)) | (1 << (MySqlParser.ST_DIMENSION - 910)) | (1 << (MySqlParser.ST_DISJOINT - 910)) | (1 << (MySqlParser.ST_DISTANCE - 910)) | (1 << (MySqlParser.ST_ENDPOINT - 910)) | (1 << (MySqlParser.ST_ENVELOPE - 910)) | (1 << (MySqlParser.ST_EQUALS - 910)) | (1 << (MySqlParser.ST_EXTERIORRING - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYN - 910)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 910)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 910)) | (1 << (MySqlParser.ST_INTERIORRINGN - 910)) | (1 << (MySqlParser.ST_INTERSECTION - 910)) | (1 << (MySqlParser.ST_INTERSECTS - 910)) | (1 << (MySqlParser.ST_ISCLOSED - 910)) | (1 << (MySqlParser.ST_ISEMPTY - 910)) | (1 << (MySqlParser.ST_ISSIMPLE - 910)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 910)) | (1 << (MySqlParser.ST_LINEFROMWKB - 910)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 910)))) !== 0) || ((((_la - 942)) & ~0x1f) == 0 && ((1 << (_la - 942)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 942)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 942)) | (1 << (MySqlParser.ST_NUMPOINTS - 942)) | (1 << (MySqlParser.ST_OVERLAPS - 942)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 942)) | (1 << (MySqlParser.ST_POINTFROMWKB - 942)) | (1 << (MySqlParser.ST_POINTN - 942)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYFROMWKB - 942)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 942)) | (1 << (MySqlParser.ST_SRID - 942)) | (1 << (MySqlParser.ST_STARTPOINT - 942)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 942)) | (1 << (MySqlParser.ST_TOUCHES - 942)) | (1 << (MySqlParser.ST_UNION - 942)) | (1 << (MySqlParser.ST_WITHIN - 942)) | (1 << (MySqlParser.ST_X - 942)) | (1 << (MySqlParser.ST_Y - 942)) | (1 << (MySqlParser.SUBDATE - 942)) | (1 << (MySqlParser.SUBSTRING_INDEX - 942)) | (1 << (MySqlParser.SUBTIME - 942)) | (1 << (MySqlParser.SYSTEM_USER - 942)) | (1 << (MySqlParser.TAN - 942)) | (1 << (MySqlParser.TIMEDIFF - 942)) | (1 << (MySqlParser.TIMESTAMPADD - 942)) | (1 << (MySqlParser.TIMESTAMPDIFF - 942)) | (1 << (MySqlParser.TIME_FORMAT - 942)) | (1 << (MySqlParser.TIME_TO_SEC - 942)) | (1 << (MySqlParser.TOUCHES - 942)))) !== 0) || ((((_la - 974)) & ~0x1f) == 0 && ((1 << (_la - 974)) & ((1 << (MySqlParser.TO_BASE64 - 974)) | (1 << (MySqlParser.TO_DAYS - 974)) | (1 << (MySqlParser.TO_SECONDS - 974)) | (1 << (MySqlParser.UCASE - 974)) | (1 << (MySqlParser.UNCOMPRESS - 974)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 974)) | (1 << (MySqlParser.UNHEX - 974)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 974)) | (1 << (MySqlParser.UPDATEXML - 974)) | (1 << (MySqlParser.UPPER - 974)) | (1 << (MySqlParser.UUID - 974)) | (1 << (MySqlParser.UUID_SHORT - 974)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 974)) | (1 << (MySqlParser.VERSION - 974)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1 << (MySqlParser.WEEKDAY - 974)) | (1 << (MySqlParser.WEEKOFYEAR - 974)) | (1 << (MySqlParser.WEIGHT_STRING - 974)) | (1 << (MySqlParser.WITHIN - 974)) | (1 << (MySqlParser.YEARWEEK - 974)) | (1 << (MySqlParser.Y_FUNCTION - 974)) | (1 << (MySqlParser.X_FUNCTION - 974)))) !== 0) || ((((_la - 1034)) & ~0x1f) == 0 && ((1 << (_la - 1034)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (MySqlParser.STRING_LITERAL - 1034)) | (1 << (MySqlParser.ID - 1034)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1034)))) !== 0)) {
	                this.state = 1527;
	                localctx.index = this.uid();
	            }

	            this.state = 1530;
	            this.indexColumnNames();
	            this.state = 1531;
	            this.referenceDefinition();
	            break;

	        case 4:
	            localctx = new CheckTableConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1537;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.CONSTRAINT) {
	                this.state = 1533;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 1535;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySqlParser.CURRENT - 32)) | (1 << (MySqlParser.DATABASE - 32)) | (1 << (MySqlParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySqlParser.LEFT || _la===MySqlParser.NUMBER || _la===MySqlParser.RIGHT || _la===MySqlParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.TIMESTAMP - 199)) | (1 << (MySqlParser.DATETIME - 199)) | (1 << (MySqlParser.YEAR - 199)) | (1 << (MySqlParser.TEXT - 199)) | (1 << (MySqlParser.ENUM - 199)) | (1 << (MySqlParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.JSON_VALID - 233)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySqlParser.AVG - 233)) | (1 << (MySqlParser.BIT_AND - 233)) | (1 << (MySqlParser.BIT_OR - 233)) | (1 << (MySqlParser.BIT_XOR - 233)) | (1 << (MySqlParser.COUNT - 233)) | (1 << (MySqlParser.GROUP_CONCAT - 233)) | (1 << (MySqlParser.MAX - 233)) | (1 << (MySqlParser.MIN - 233)) | (1 << (MySqlParser.STD - 233)) | (1 << (MySqlParser.STDDEV - 233)) | (1 << (MySqlParser.STDDEV_POP - 233)) | (1 << (MySqlParser.STDDEV_SAMP - 233)) | (1 << (MySqlParser.SUM - 233)) | (1 << (MySqlParser.VAR_POP - 233)) | (1 << (MySqlParser.VAR_SAMP - 233)) | (1 << (MySqlParser.VARIANCE - 233)) | (1 << (MySqlParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySqlParser.ACCOUNT - 270)) | (1 << (MySqlParser.ACTION - 270)) | (1 << (MySqlParser.AFTER - 270)) | (1 << (MySqlParser.AGGREGATE - 270)) | (1 << (MySqlParser.ALGORITHM - 270)) | (1 << (MySqlParser.ANY - 270)) | (1 << (MySqlParser.AT - 270)) | (1 << (MySqlParser.AUTHORS - 270)) | (1 << (MySqlParser.AUTOCOMMIT - 270)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySqlParser.AUTO_INCREMENT - 270)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 270)) | (1 << (MySqlParser.BEGIN - 270)) | (1 << (MySqlParser.BINLOG - 270)) | (1 << (MySqlParser.BIT - 270)) | (1 << (MySqlParser.BLOCK - 270)) | (1 << (MySqlParser.BOOL - 270)) | (1 << (MySqlParser.BOOLEAN - 270)) | (1 << (MySqlParser.BTREE - 270)) | (1 << (MySqlParser.CACHE - 270)) | (1 << (MySqlParser.CASCADED - 270)) | (1 << (MySqlParser.CHAIN - 270)) | (1 << (MySqlParser.CHANGED - 270)) | (1 << (MySqlParser.CHANNEL - 270)) | (1 << (MySqlParser.CHECKSUM - 270)) | (1 << (MySqlParser.PAGE_CHECKSUM - 270)) | (1 << (MySqlParser.CIPHER - 270)) | (1 << (MySqlParser.CLASS_ORIGIN - 270)) | (1 << (MySqlParser.CLIENT - 270)) | (1 << (MySqlParser.CLOSE - 270)) | (1 << (MySqlParser.COALESCE - 270)) | (1 << (MySqlParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySqlParser.COLUMNS - 302)) | (1 << (MySqlParser.COLUMN_FORMAT - 302)) | (1 << (MySqlParser.COLUMN_NAME - 302)) | (1 << (MySqlParser.COMMENT - 302)) | (1 << (MySqlParser.COMMIT - 302)) | (1 << (MySqlParser.COMPACT - 302)) | (1 << (MySqlParser.COMPLETION - 302)) | (1 << (MySqlParser.COMPRESSED - 302)) | (1 << (MySqlParser.COMPRESSION - 302)) | (1 << (MySqlParser.CONCURRENT - 302)) | (1 << (MySqlParser.CONNECTION - 302)) | (1 << (MySqlParser.CONSISTENT - 302)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySqlParser.CONSTRAINT_NAME - 302)) | (1 << (MySqlParser.CONTAINS - 302)) | (1 << (MySqlParser.CONTEXT - 302)) | (1 << (MySqlParser.CONTRIBUTORS - 302)) | (1 << (MySqlParser.COPY - 302)) | (1 << (MySqlParser.CPU - 302)) | (1 << (MySqlParser.CURSOR_NAME - 302)) | (1 << (MySqlParser.DATA - 302)) | (1 << (MySqlParser.DATAFILE - 302)) | (1 << (MySqlParser.DEALLOCATE - 302)) | (1 << (MySqlParser.DEFAULT_AUTH - 302)) | (1 << (MySqlParser.DEFINER - 302)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 302)) | (1 << (MySqlParser.DES_KEY_FILE - 302)) | (1 << (MySqlParser.DIRECTORY - 302)) | (1 << (MySqlParser.DISABLE - 302)) | (1 << (MySqlParser.DISCARD - 302)) | (1 << (MySqlParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySqlParser.DO - 334)) | (1 << (MySqlParser.DUMPFILE - 334)) | (1 << (MySqlParser.DUPLICATE - 334)) | (1 << (MySqlParser.DYNAMIC - 334)) | (1 << (MySqlParser.ENABLE - 334)) | (1 << (MySqlParser.ENCRYPTION - 334)) | (1 << (MySqlParser.END - 334)) | (1 << (MySqlParser.ENDS - 334)) | (1 << (MySqlParser.ENGINE - 334)) | (1 << (MySqlParser.ENGINES - 334)) | (1 << (MySqlParser.ERROR - 334)) | (1 << (MySqlParser.ERRORS - 334)) | (1 << (MySqlParser.ESCAPE - 334)) | (1 << (MySqlParser.EVEN - 334)) | (1 << (MySqlParser.EVENT - 334)) | (1 << (MySqlParser.EVENTS - 334)) | (1 << (MySqlParser.EVERY - 334)) | (1 << (MySqlParser.EXCHANGE - 334)) | (1 << (MySqlParser.EXCLUSIVE - 334)) | (1 << (MySqlParser.EXPIRE - 334)) | (1 << (MySqlParser.EXPORT - 334)) | (1 << (MySqlParser.EXTENDED - 334)) | (1 << (MySqlParser.EXTENT_SIZE - 334)) | (1 << (MySqlParser.FAST - 334)) | (1 << (MySqlParser.FAULTS - 334)) | (1 << (MySqlParser.FIELDS - 334)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySqlParser.FILTER - 334)) | (1 << (MySqlParser.FIRST - 334)) | (1 << (MySqlParser.FIXED - 334)) | (1 << (MySqlParser.FLUSH - 334)) | (1 << (MySqlParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySqlParser.FOUND - 366)) | (1 << (MySqlParser.FULL - 366)) | (1 << (MySqlParser.FUNCTION - 366)) | (1 << (MySqlParser.GENERAL - 366)) | (1 << (MySqlParser.GLOBAL - 366)) | (1 << (MySqlParser.GRANTS - 366)) | (1 << (MySqlParser.GROUP_REPLICATION - 366)) | (1 << (MySqlParser.HANDLER - 366)) | (1 << (MySqlParser.HASH - 366)) | (1 << (MySqlParser.HELP - 366)) | (1 << (MySqlParser.HOST - 366)) | (1 << (MySqlParser.HOSTS - 366)) | (1 << (MySqlParser.IDENTIFIED - 366)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySqlParser.IMPORT - 366)) | (1 << (MySqlParser.INDEXES - 366)) | (1 << (MySqlParser.INITIAL_SIZE - 366)) | (1 << (MySqlParser.INPLACE - 366)) | (1 << (MySqlParser.INSERT_METHOD - 366)) | (1 << (MySqlParser.INSTALL - 366)) | (1 << (MySqlParser.INSTANCE - 366)) | (1 << (MySqlParser.INVISIBLE - 366)) | (1 << (MySqlParser.INVOKER - 366)) | (1 << (MySqlParser.IO - 366)) | (1 << (MySqlParser.IO_THREAD - 366)) | (1 << (MySqlParser.IPC - 366)) | (1 << (MySqlParser.ISOLATION - 366)) | (1 << (MySqlParser.ISSUER - 366)) | (1 << (MySqlParser.JSON - 366)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySqlParser.LANGUAGE - 366)) | (1 << (MySqlParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.LEAVES - 398)) | (1 << (MySqlParser.LESS - 398)) | (1 << (MySqlParser.LEVEL - 398)) | (1 << (MySqlParser.LIST - 398)) | (1 << (MySqlParser.LOCAL - 398)) | (1 << (MySqlParser.LOGFILE - 398)) | (1 << (MySqlParser.LOGS - 398)) | (1 << (MySqlParser.MASTER - 398)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySqlParser.MASTER_DELAY - 398)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySqlParser.MASTER_HOST - 398)) | (1 << (MySqlParser.MASTER_LOG_FILE - 398)) | (1 << (MySqlParser.MASTER_LOG_POS - 398)) | (1 << (MySqlParser.MASTER_PASSWORD - 398)) | (1 << (MySqlParser.MASTER_PORT - 398)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySqlParser.MASTER_SSL - 398)) | (1 << (MySqlParser.MASTER_SSL_CA - 398)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_CERT - 398)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySqlParser.MASTER_SSL_CRL - 398)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_KEY - 398)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 398)) | (1 << (MySqlParser.MASTER_USER - 398)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySqlParser.MEDIUM - 430)) | (1 << (MySqlParser.MEMBER - 430)) | (1 << (MySqlParser.MERGE - 430)) | (1 << (MySqlParser.MESSAGE_TEXT - 430)) | (1 << (MySqlParser.MID - 430)) | (1 << (MySqlParser.MIGRATE - 430)) | (1 << (MySqlParser.MIN_ROWS - 430)) | (1 << (MySqlParser.MODE - 430)) | (1 << (MySqlParser.MODIFY - 430)) | (1 << (MySqlParser.MUTEX - 430)) | (1 << (MySqlParser.MYSQL - 430)) | (1 << (MySqlParser.MYSQL_ERRNO - 430)) | (1 << (MySqlParser.NAME - 430)) | (1 << (MySqlParser.NAMES - 430)) | (1 << (MySqlParser.NCHAR - 430)) | (1 << (MySqlParser.NEVER - 430)) | (1 << (MySqlParser.NEXT - 430)) | (1 << (MySqlParser.NO - 430)) | (1 << (MySqlParser.NODEGROUP - 430)) | (1 << (MySqlParser.NONE - 430)) | (1 << (MySqlParser.OFFLINE - 430)) | (1 << (MySqlParser.OFFSET - 430)) | (1 << (MySqlParser.OF - 430)) | (1 << (MySqlParser.OJ - 430)) | (1 << (MySqlParser.OLD_PASSWORD - 430)) | (1 << (MySqlParser.ONE - 430)) | (1 << (MySqlParser.ONLINE - 430)) | (1 << (MySqlParser.ONLY - 430)) | (1 << (MySqlParser.OPEN - 430)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySqlParser.OPTIONS - 462)) | (1 << (MySqlParser.OWNER - 462)) | (1 << (MySqlParser.PACK_KEYS - 462)) | (1 << (MySqlParser.PAGE - 462)) | (1 << (MySqlParser.PARSER - 462)) | (1 << (MySqlParser.PARTIAL - 462)) | (1 << (MySqlParser.PARTITIONING - 462)) | (1 << (MySqlParser.PARTITIONS - 462)) | (1 << (MySqlParser.PASSWORD - 462)) | (1 << (MySqlParser.PHASE - 462)) | (1 << (MySqlParser.PLUGIN - 462)) | (1 << (MySqlParser.PLUGIN_DIR - 462)) | (1 << (MySqlParser.PLUGINS - 462)) | (1 << (MySqlParser.PORT - 462)) | (1 << (MySqlParser.PRECEDES - 462)) | (1 << (MySqlParser.PREPARE - 462)) | (1 << (MySqlParser.PRESERVE - 462)) | (1 << (MySqlParser.PREV - 462)) | (1 << (MySqlParser.PROCESSLIST - 462)) | (1 << (MySqlParser.PROFILE - 462)) | (1 << (MySqlParser.PROFILES - 462)) | (1 << (MySqlParser.PROXY - 462)) | (1 << (MySqlParser.QUERY - 462)) | (1 << (MySqlParser.QUICK - 462)) | (1 << (MySqlParser.REBUILD - 462)) | (1 << (MySqlParser.RECOVER - 462)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySqlParser.REDUNDANT - 462)) | (1 << (MySqlParser.RELAY - 462)) | (1 << (MySqlParser.RELAY_LOG_FILE - 462)) | (1 << (MySqlParser.RELAY_LOG_POS - 462)) | (1 << (MySqlParser.RELAYLOG - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySqlParser.REMOVE - 494)) | (1 << (MySqlParser.REORGANIZE - 494)) | (1 << (MySqlParser.REPAIR - 494)) | (1 << (MySqlParser.REPLICATE_DO_DB - 494)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATION - 494)) | (1 << (MySqlParser.RESET - 494)) | (1 << (MySqlParser.RESUME - 494)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 494)) | (1 << (MySqlParser.RETURNS - 494)) | (1 << (MySqlParser.ROLE - 494)) | (1 << (MySqlParser.ROLLBACK - 494)) | (1 << (MySqlParser.ROLLUP - 494)) | (1 << (MySqlParser.ROTATE - 494)) | (1 << (MySqlParser.ROW - 494)) | (1 << (MySqlParser.ROWS - 494)) | (1 << (MySqlParser.ROW_FORMAT - 494)) | (1 << (MySqlParser.SAVEPOINT - 494)) | (1 << (MySqlParser.SCHEDULE - 494)) | (1 << (MySqlParser.SECURITY - 494)) | (1 << (MySqlParser.SERVER - 494)) | (1 << (MySqlParser.SESSION - 494)) | (1 << (MySqlParser.SHARE - 494)) | (1 << (MySqlParser.SHARED - 494)) | (1 << (MySqlParser.SIGNED - 494)) | (1 << (MySqlParser.SIMPLE - 494)) | (1 << (MySqlParser.SLAVE - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySqlParser.SLOW - 526)) | (1 << (MySqlParser.SNAPSHOT - 526)) | (1 << (MySqlParser.SOCKET - 526)) | (1 << (MySqlParser.SOME - 526)) | (1 << (MySqlParser.SONAME - 526)) | (1 << (MySqlParser.SOUNDS - 526)) | (1 << (MySqlParser.SOURCE - 526)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySqlParser.SQL_CACHE - 526)) | (1 << (MySqlParser.SQL_NO_CACHE - 526)) | (1 << (MySqlParser.SQL_THREAD - 526)) | (1 << (MySqlParser.START - 526)) | (1 << (MySqlParser.STARTS - 526)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 526)) | (1 << (MySqlParser.STATS_PERSISTENT - 526)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySqlParser.STATUS - 526)) | (1 << (MySqlParser.STOP - 526)) | (1 << (MySqlParser.STORAGE - 526)) | (1 << (MySqlParser.STRING - 526)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySqlParser.SUBJECT - 526)) | (1 << (MySqlParser.SUBPARTITION - 526)) | (1 << (MySqlParser.SUBPARTITIONS - 526)) | (1 << (MySqlParser.SUSPEND - 526)) | (1 << (MySqlParser.SWAPS - 526)) | (1 << (MySqlParser.SWITCHES - 526)) | (1 << (MySqlParser.TABLE_NAME - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySqlParser.TABLESPACE - 558)) | (1 << (MySqlParser.TEMPORARY - 558)) | (1 << (MySqlParser.TEMPTABLE - 558)) | (1 << (MySqlParser.THAN - 558)) | (1 << (MySqlParser.TRADITIONAL - 558)) | (1 << (MySqlParser.TRANSACTION - 558)) | (1 << (MySqlParser.TRANSACTIONAL - 558)) | (1 << (MySqlParser.TRIGGERS - 558)) | (1 << (MySqlParser.TRUNCATE - 558)) | (1 << (MySqlParser.UNDEFINED - 558)) | (1 << (MySqlParser.UNDOFILE - 558)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySqlParser.UNINSTALL - 558)) | (1 << (MySqlParser.UNKNOWN - 558)) | (1 << (MySqlParser.UNTIL - 558)) | (1 << (MySqlParser.UPGRADE - 558)) | (1 << (MySqlParser.USER - 558)) | (1 << (MySqlParser.USE_FRM - 558)) | (1 << (MySqlParser.USER_RESOURCES - 558)) | (1 << (MySqlParser.VALIDATION - 558)) | (1 << (MySqlParser.VALUE - 558)) | (1 << (MySqlParser.VARIABLES - 558)) | (1 << (MySqlParser.VIEW - 558)) | (1 << (MySqlParser.VISIBLE - 558)) | (1 << (MySqlParser.WAIT - 558)) | (1 << (MySqlParser.WARNINGS - 558)) | (1 << (MySqlParser.WITHOUT - 558)) | (1 << (MySqlParser.WORK - 558)) | (1 << (MySqlParser.WRAPPER - 558)) | (1 << (MySqlParser.X509 - 558)) | (1 << (MySqlParser.XA - 558)))) !== 0) || ((((_la - 590)) & ~0x1f) == 0 && ((1 << (_la - 590)) & ((1 << (MySqlParser.XML - 590)) | (1 << (MySqlParser.INTERNAL - 590)) | (1 << (MySqlParser.QUARTER - 590)) | (1 << (MySqlParser.MONTH - 590)) | (1 << (MySqlParser.DAY - 590)) | (1 << (MySqlParser.HOUR - 590)) | (1 << (MySqlParser.MINUTE - 590)) | (1 << (MySqlParser.WEEK - 590)) | (1 << (MySqlParser.SECOND - 590)) | (1 << (MySqlParser.MICROSECOND - 590)) | (1 << (MySqlParser.TABLES - 590)) | (1 << (MySqlParser.ROUTINE - 590)) | (1 << (MySqlParser.EXECUTE - 590)) | (1 << (MySqlParser.FILE - 590)) | (1 << (MySqlParser.PROCESS - 590)) | (1 << (MySqlParser.RELOAD - 590)) | (1 << (MySqlParser.SHUTDOWN - 590)) | (1 << (MySqlParser.SUPER - 590)) | (1 << (MySqlParser.PRIVILEGES - 590)) | (1 << (MySqlParser.AUDIT_ADMIN - 590)) | (1 << (MySqlParser.BACKUP_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 590)) | (1 << (MySqlParser.CLONE_ADMIN - 590)) | (1 << (MySqlParser.CONNECTION_ADMIN - 590)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 590)) | (1 << (MySqlParser.FIREWALL_ADMIN - 590)))) !== 0) || ((((_la - 622)) & ~0x1f) == 0 && ((1 << (_la - 622)) & ((1 << (MySqlParser.FIREWALL_USER - 622)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 622)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 622)) | (1 << (MySqlParser.NDB_STORED_USER - 622)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.REPLICATION_APPLIER - 622)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 622)) | (1 << (MySqlParser.ROLE_ADMIN - 622)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.SET_USER_ID - 622)) | (1 << (MySqlParser.SHOW_ROUTINE - 622)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 622)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 622)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 622)) | (1 << (MySqlParser.ARMSCII8 - 622)) | (1 << (MySqlParser.ASCII - 622)) | (1 << (MySqlParser.BIG5 - 622)) | (1 << (MySqlParser.CP1250 - 622)) | (1 << (MySqlParser.CP1251 - 622)) | (1 << (MySqlParser.CP1256 - 622)) | (1 << (MySqlParser.CP1257 - 622)) | (1 << (MySqlParser.CP850 - 622)) | (1 << (MySqlParser.CP852 - 622)) | (1 << (MySqlParser.CP866 - 622)) | (1 << (MySqlParser.CP932 - 622)) | (1 << (MySqlParser.DEC8 - 622)) | (1 << (MySqlParser.EUCJPMS - 622)) | (1 << (MySqlParser.EUCKR - 622)) | (1 << (MySqlParser.GB2312 - 622)))) !== 0) || ((((_la - 654)) & ~0x1f) == 0 && ((1 << (_la - 654)) & ((1 << (MySqlParser.GBK - 654)) | (1 << (MySqlParser.GEOSTD8 - 654)) | (1 << (MySqlParser.GREEK - 654)) | (1 << (MySqlParser.HEBREW - 654)) | (1 << (MySqlParser.HP8 - 654)) | (1 << (MySqlParser.KEYBCS2 - 654)) | (1 << (MySqlParser.KOI8R - 654)) | (1 << (MySqlParser.KOI8U - 654)) | (1 << (MySqlParser.LATIN1 - 654)) | (1 << (MySqlParser.LATIN2 - 654)) | (1 << (MySqlParser.LATIN5 - 654)) | (1 << (MySqlParser.LATIN7 - 654)) | (1 << (MySqlParser.MACCE - 654)) | (1 << (MySqlParser.MACROMAN - 654)) | (1 << (MySqlParser.SJIS - 654)) | (1 << (MySqlParser.SWE7 - 654)) | (1 << (MySqlParser.TIS620 - 654)) | (1 << (MySqlParser.UCS2 - 654)) | (1 << (MySqlParser.UJIS - 654)) | (1 << (MySqlParser.UTF16 - 654)) | (1 << (MySqlParser.UTF16LE - 654)) | (1 << (MySqlParser.UTF32 - 654)) | (1 << (MySqlParser.UTF8 - 654)) | (1 << (MySqlParser.UTF8MB3 - 654)) | (1 << (MySqlParser.UTF8MB4 - 654)) | (1 << (MySqlParser.ARCHIVE - 654)) | (1 << (MySqlParser.BLACKHOLE - 654)) | (1 << (MySqlParser.CSV - 654)) | (1 << (MySqlParser.FEDERATED - 654)) | (1 << (MySqlParser.INNODB - 654)) | (1 << (MySqlParser.MEMORY - 654)) | (1 << (MySqlParser.MRG_MYISAM - 654)))) !== 0) || ((((_la - 686)) & ~0x1f) == 0 && ((1 << (_la - 686)) & ((1 << (MySqlParser.MYISAM - 686)) | (1 << (MySqlParser.NDB - 686)) | (1 << (MySqlParser.NDBCLUSTER - 686)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 686)) | (1 << (MySqlParser.TOKUDB - 686)) | (1 << (MySqlParser.REPEATABLE - 686)) | (1 << (MySqlParser.COMMITTED - 686)) | (1 << (MySqlParser.UNCOMMITTED - 686)) | (1 << (MySqlParser.SERIALIZABLE - 686)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 686)) | (1 << (MySqlParser.LINESTRING - 686)) | (1 << (MySqlParser.MULTILINESTRING - 686)) | (1 << (MySqlParser.MULTIPOINT - 686)) | (1 << (MySqlParser.MULTIPOLYGON - 686)) | (1 << (MySqlParser.POINT - 686)) | (1 << (MySqlParser.POLYGON - 686)) | (1 << (MySqlParser.ABS - 686)) | (1 << (MySqlParser.ACOS - 686)) | (1 << (MySqlParser.ADDDATE - 686)) | (1 << (MySqlParser.ADDTIME - 686)) | (1 << (MySqlParser.AES_DECRYPT - 686)) | (1 << (MySqlParser.AES_ENCRYPT - 686)) | (1 << (MySqlParser.AREA - 686)) | (1 << (MySqlParser.ASBINARY - 686)) | (1 << (MySqlParser.ASIN - 686)) | (1 << (MySqlParser.ASTEXT - 686)) | (1 << (MySqlParser.ASWKB - 686)) | (1 << (MySqlParser.ASWKT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 686)))) !== 0) || ((((_la - 718)) & ~0x1f) == 0 && ((1 << (_la - 718)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 718)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 718)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 718)) | (1 << (MySqlParser.ATAN - 718)) | (1 << (MySqlParser.ATAN2 - 718)) | (1 << (MySqlParser.BENCHMARK - 718)) | (1 << (MySqlParser.BIN - 718)) | (1 << (MySqlParser.BIT_COUNT - 718)) | (1 << (MySqlParser.BIT_LENGTH - 718)) | (1 << (MySqlParser.BUFFER - 718)) | (1 << (MySqlParser.CATALOG_NAME - 718)) | (1 << (MySqlParser.CEIL - 718)) | (1 << (MySqlParser.CEILING - 718)) | (1 << (MySqlParser.CENTROID - 718)) | (1 << (MySqlParser.CHARACTER_LENGTH - 718)) | (1 << (MySqlParser.CHARSET - 718)) | (1 << (MySqlParser.CHAR_LENGTH - 718)) | (1 << (MySqlParser.COERCIBILITY - 718)) | (1 << (MySqlParser.COLLATION - 718)) | (1 << (MySqlParser.COMPRESS - 718)) | (1 << (MySqlParser.CONCAT - 718)) | (1 << (MySqlParser.CONCAT_WS - 718)) | (1 << (MySqlParser.CONNECTION_ID - 718)) | (1 << (MySqlParser.CONV - 718)) | (1 << (MySqlParser.CONVERT_TZ - 718)) | (1 << (MySqlParser.COS - 718)) | (1 << (MySqlParser.COT - 718)) | (1 << (MySqlParser.CRC32 - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 718)) | (1 << (MySqlParser.CREATE_DIGEST - 718)))) !== 0) || ((((_la - 750)) & ~0x1f) == 0 && ((1 << (_la - 750)) & ((1 << (MySqlParser.CROSSES - 750)) | (1 << (MySqlParser.DATEDIFF - 750)) | (1 << (MySqlParser.DATE_FORMAT - 750)) | (1 << (MySqlParser.DAYNAME - 750)) | (1 << (MySqlParser.DAYOFMONTH - 750)) | (1 << (MySqlParser.DAYOFWEEK - 750)) | (1 << (MySqlParser.DAYOFYEAR - 750)) | (1 << (MySqlParser.DECODE - 750)) | (1 << (MySqlParser.DEGREES - 750)) | (1 << (MySqlParser.DES_DECRYPT - 750)) | (1 << (MySqlParser.DES_ENCRYPT - 750)) | (1 << (MySqlParser.DIMENSION - 750)) | (1 << (MySqlParser.DISJOINT - 750)) | (1 << (MySqlParser.ELT - 750)) | (1 << (MySqlParser.ENCODE - 750)) | (1 << (MySqlParser.ENCRYPT - 750)) | (1 << (MySqlParser.ENDPOINT - 750)) | (1 << (MySqlParser.ENVELOPE - 750)) | (1 << (MySqlParser.EQUALS - 750)) | (1 << (MySqlParser.EXP - 750)) | (1 << (MySqlParser.EXPORT_SET - 750)) | (1 << (MySqlParser.EXTERIORRING - 750)) | (1 << (MySqlParser.EXTRACTVALUE - 750)) | (1 << (MySqlParser.FIELD - 750)) | (1 << (MySqlParser.FIND_IN_SET - 750)) | (1 << (MySqlParser.FLOOR - 750)) | (1 << (MySqlParser.FORMAT - 750)) | (1 << (MySqlParser.FOUND_ROWS - 750)) | (1 << (MySqlParser.FROM_BASE64 - 750)) | (1 << (MySqlParser.FROM_DAYS - 750)) | (1 << (MySqlParser.FROM_UNIXTIME - 750)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 750)))) !== 0) || ((((_la - 782)) & ~0x1f) == 0 && ((1 << (_la - 782)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYN - 782)) | (1 << (MySqlParser.GEOMETRYTYPE - 782)) | (1 << (MySqlParser.GEOMFROMTEXT - 782)) | (1 << (MySqlParser.GEOMFROMWKB - 782)) | (1 << (MySqlParser.GET_FORMAT - 782)) | (1 << (MySqlParser.GET_LOCK - 782)) | (1 << (MySqlParser.GLENGTH - 782)) | (1 << (MySqlParser.GREATEST - 782)) | (1 << (MySqlParser.GTID_SUBSET - 782)) | (1 << (MySqlParser.GTID_SUBTRACT - 782)) | (1 << (MySqlParser.HEX - 782)) | (1 << (MySqlParser.IFNULL - 782)) | (1 << (MySqlParser.INET6_ATON - 782)) | (1 << (MySqlParser.INET6_NTOA - 782)) | (1 << (MySqlParser.INET_ATON - 782)) | (1 << (MySqlParser.INET_NTOA - 782)) | (1 << (MySqlParser.INSTR - 782)) | (1 << (MySqlParser.INTERIORRINGN - 782)) | (1 << (MySqlParser.INTERSECTS - 782)) | (1 << (MySqlParser.ISCLOSED - 782)) | (1 << (MySqlParser.ISEMPTY - 782)) | (1 << (MySqlParser.ISNULL - 782)) | (1 << (MySqlParser.ISSIMPLE - 782)) | (1 << (MySqlParser.IS_FREE_LOCK - 782)) | (1 << (MySqlParser.IS_IPV4 - 782)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 782)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 782)))) !== 0) || ((((_la - 814)) & ~0x1f) == 0 && ((1 << (_la - 814)) & ((1 << (MySqlParser.IS_IPV6 - 814)) | (1 << (MySqlParser.IS_USED_LOCK - 814)) | (1 << (MySqlParser.LAST_INSERT_ID - 814)) | (1 << (MySqlParser.LCASE - 814)) | (1 << (MySqlParser.LEAST - 814)) | (1 << (MySqlParser.LENGTH - 814)) | (1 << (MySqlParser.LINEFROMTEXT - 814)) | (1 << (MySqlParser.LINEFROMWKB - 814)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 814)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 814)) | (1 << (MySqlParser.LN - 814)) | (1 << (MySqlParser.LOAD_FILE - 814)) | (1 << (MySqlParser.LOCATE - 814)) | (1 << (MySqlParser.LOG - 814)) | (1 << (MySqlParser.LOG10 - 814)) | (1 << (MySqlParser.LOG2 - 814)) | (1 << (MySqlParser.LOWER - 814)) | (1 << (MySqlParser.LPAD - 814)) | (1 << (MySqlParser.LTRIM - 814)) | (1 << (MySqlParser.MAKEDATE - 814)) | (1 << (MySqlParser.MAKETIME - 814)) | (1 << (MySqlParser.MAKE_SET - 814)) | (1 << (MySqlParser.MASTER_POS_WAIT - 814)) | (1 << (MySqlParser.MBRCONTAINS - 814)) | (1 << (MySqlParser.MBRDISJOINT - 814)) | (1 << (MySqlParser.MBREQUAL - 814)) | (1 << (MySqlParser.MBRINTERSECTS - 814)) | (1 << (MySqlParser.MBROVERLAPS - 814)) | (1 << (MySqlParser.MBRTOUCHES - 814)) | (1 << (MySqlParser.MBRWITHIN - 814)) | (1 << (MySqlParser.MD5 - 814)) | (1 << (MySqlParser.MLINEFROMTEXT - 814)))) !== 0) || ((((_la - 846)) & ~0x1f) == 0 && ((1 << (_la - 846)) & ((1 << (MySqlParser.MLINEFROMWKB - 846)) | (1 << (MySqlParser.MONTHNAME - 846)) | (1 << (MySqlParser.MPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MPOINTFROMWKB - 846)) | (1 << (MySqlParser.MPOLYFROMTEXT - 846)) | (1 << (MySqlParser.MPOLYFROMWKB - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 846)) | (1 << (MySqlParser.NAME_CONST - 846)) | (1 << (MySqlParser.NULLIF - 846)) | (1 << (MySqlParser.NUMGEOMETRIES - 846)) | (1 << (MySqlParser.NUMINTERIORRINGS - 846)) | (1 << (MySqlParser.NUMPOINTS - 846)) | (1 << (MySqlParser.OCT - 846)) | (1 << (MySqlParser.OCTET_LENGTH - 846)) | (1 << (MySqlParser.ORD - 846)) | (1 << (MySqlParser.OVERLAPS - 846)) | (1 << (MySqlParser.PERIOD_ADD - 846)) | (1 << (MySqlParser.PERIOD_DIFF - 846)) | (1 << (MySqlParser.PI - 846)) | (1 << (MySqlParser.POINTFROMTEXT - 846)) | (1 << (MySqlParser.POINTFROMWKB - 846)) | (1 << (MySqlParser.POINTN - 846)) | (1 << (MySqlParser.POLYFROMTEXT - 846)) | (1 << (MySqlParser.POLYFROMWKB - 846)) | (1 << (MySqlParser.POLYGONFROMTEXT - 846)) | (1 << (MySqlParser.POLYGONFROMWKB - 846)) | (1 << (MySqlParser.POW - 846)))) !== 0) || ((((_la - 878)) & ~0x1f) == 0 && ((1 << (_la - 878)) & ((1 << (MySqlParser.POWER - 878)) | (1 << (MySqlParser.QUOTE - 878)) | (1 << (MySqlParser.RADIANS - 878)) | (1 << (MySqlParser.RAND - 878)) | (1 << (MySqlParser.RANDOM_BYTES - 878)) | (1 << (MySqlParser.RELEASE_LOCK - 878)) | (1 << (MySqlParser.REVERSE - 878)) | (1 << (MySqlParser.ROUND - 878)) | (1 << (MySqlParser.ROW_COUNT - 878)) | (1 << (MySqlParser.RPAD - 878)) | (1 << (MySqlParser.RTRIM - 878)) | (1 << (MySqlParser.SEC_TO_TIME - 878)) | (1 << (MySqlParser.SESSION_USER - 878)) | (1 << (MySqlParser.SHA - 878)) | (1 << (MySqlParser.SHA1 - 878)) | (1 << (MySqlParser.SHA2 - 878)) | (1 << (MySqlParser.SCHEMA_NAME - 878)) | (1 << (MySqlParser.SIGN - 878)) | (1 << (MySqlParser.SIN - 878)) | (1 << (MySqlParser.SLEEP - 878)) | (1 << (MySqlParser.SOUNDEX - 878)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 878)) | (1 << (MySqlParser.SQRT - 878)) | (1 << (MySqlParser.SRID - 878)) | (1 << (MySqlParser.STARTPOINT - 878)) | (1 << (MySqlParser.STRCMP - 878)) | (1 << (MySqlParser.STR_TO_DATE - 878)) | (1 << (MySqlParser.ST_AREA - 878)) | (1 << (MySqlParser.ST_ASBINARY - 878)) | (1 << (MySqlParser.ST_ASTEXT - 878)) | (1 << (MySqlParser.ST_ASWKB - 878)) | (1 << (MySqlParser.ST_ASWKT - 878)))) !== 0) || ((((_la - 910)) & ~0x1f) == 0 && ((1 << (_la - 910)) & ((1 << (MySqlParser.ST_BUFFER - 910)) | (1 << (MySqlParser.ST_CENTROID - 910)) | (1 << (MySqlParser.ST_CONTAINS - 910)) | (1 << (MySqlParser.ST_CROSSES - 910)) | (1 << (MySqlParser.ST_DIFFERENCE - 910)) | (1 << (MySqlParser.ST_DIMENSION - 910)) | (1 << (MySqlParser.ST_DISJOINT - 910)) | (1 << (MySqlParser.ST_DISTANCE - 910)) | (1 << (MySqlParser.ST_ENDPOINT - 910)) | (1 << (MySqlParser.ST_ENVELOPE - 910)) | (1 << (MySqlParser.ST_EQUALS - 910)) | (1 << (MySqlParser.ST_EXTERIORRING - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYN - 910)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 910)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 910)) | (1 << (MySqlParser.ST_INTERIORRINGN - 910)) | (1 << (MySqlParser.ST_INTERSECTION - 910)) | (1 << (MySqlParser.ST_INTERSECTS - 910)) | (1 << (MySqlParser.ST_ISCLOSED - 910)) | (1 << (MySqlParser.ST_ISEMPTY - 910)) | (1 << (MySqlParser.ST_ISSIMPLE - 910)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 910)) | (1 << (MySqlParser.ST_LINEFROMWKB - 910)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 910)))) !== 0) || ((((_la - 942)) & ~0x1f) == 0 && ((1 << (_la - 942)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 942)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 942)) | (1 << (MySqlParser.ST_NUMPOINTS - 942)) | (1 << (MySqlParser.ST_OVERLAPS - 942)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 942)) | (1 << (MySqlParser.ST_POINTFROMWKB - 942)) | (1 << (MySqlParser.ST_POINTN - 942)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYFROMWKB - 942)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 942)) | (1 << (MySqlParser.ST_SRID - 942)) | (1 << (MySqlParser.ST_STARTPOINT - 942)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 942)) | (1 << (MySqlParser.ST_TOUCHES - 942)) | (1 << (MySqlParser.ST_UNION - 942)) | (1 << (MySqlParser.ST_WITHIN - 942)) | (1 << (MySqlParser.ST_X - 942)) | (1 << (MySqlParser.ST_Y - 942)) | (1 << (MySqlParser.SUBDATE - 942)) | (1 << (MySqlParser.SUBSTRING_INDEX - 942)) | (1 << (MySqlParser.SUBTIME - 942)) | (1 << (MySqlParser.SYSTEM_USER - 942)) | (1 << (MySqlParser.TAN - 942)) | (1 << (MySqlParser.TIMEDIFF - 942)) | (1 << (MySqlParser.TIMESTAMPADD - 942)) | (1 << (MySqlParser.TIMESTAMPDIFF - 942)) | (1 << (MySqlParser.TIME_FORMAT - 942)) | (1 << (MySqlParser.TIME_TO_SEC - 942)) | (1 << (MySqlParser.TOUCHES - 942)))) !== 0) || ((((_la - 974)) & ~0x1f) == 0 && ((1 << (_la - 974)) & ((1 << (MySqlParser.TO_BASE64 - 974)) | (1 << (MySqlParser.TO_DAYS - 974)) | (1 << (MySqlParser.TO_SECONDS - 974)) | (1 << (MySqlParser.UCASE - 974)) | (1 << (MySqlParser.UNCOMPRESS - 974)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 974)) | (1 << (MySqlParser.UNHEX - 974)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 974)) | (1 << (MySqlParser.UPDATEXML - 974)) | (1 << (MySqlParser.UPPER - 974)) | (1 << (MySqlParser.UUID - 974)) | (1 << (MySqlParser.UUID_SHORT - 974)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 974)) | (1 << (MySqlParser.VERSION - 974)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1 << (MySqlParser.WEEKDAY - 974)) | (1 << (MySqlParser.WEEKOFYEAR - 974)) | (1 << (MySqlParser.WEIGHT_STRING - 974)) | (1 << (MySqlParser.WITHIN - 974)) | (1 << (MySqlParser.YEARWEEK - 974)) | (1 << (MySqlParser.Y_FUNCTION - 974)) | (1 << (MySqlParser.X_FUNCTION - 974)))) !== 0) || ((((_la - 1034)) & ~0x1f) == 0 && ((1 << (_la - 1034)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (MySqlParser.STRING_LITERAL - 1034)) | (1 << (MySqlParser.ID - 1034)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1034)))) !== 0)) {
	                    this.state = 1534;
	                    localctx.name = this.uid();
	                }

	            }

	            this.state = 1539;
	            this.match(MySqlParser.CHECK);
	            this.state = 1540;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 1541;
	            this.expression(0);
	            this.state = 1542;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	referenceDefinition() {
	    let localctx = new ReferenceDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, MySqlParser.RULE_referenceDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1546;
	        this.match(MySqlParser.REFERENCES);
	        this.state = 1547;
	        this.tableName();
	        this.state = 1549;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
	        if(la_===1) {
	            this.state = 1548;
	            this.indexColumnNames();

	        }
	        this.state = 1553;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.MATCH) {
	            this.state = 1551;
	            this.match(MySqlParser.MATCH);
	            this.state = 1552;
	            localctx.matchType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.FULL || _la===MySqlParser.PARTIAL || _la===MySqlParser.SIMPLE)) {
	                localctx.matchType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1556;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
	        if(la_===1) {
	            this.state = 1555;
	            this.referenceAction();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	referenceAction() {
	    let localctx = new ReferenceActionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, MySqlParser.RULE_referenceAction);
	    try {
	        this.state = 1574;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1558;
	            this.match(MySqlParser.ON);
	            this.state = 1559;
	            this.match(MySqlParser.DELETE);
	            this.state = 1560;
	            localctx.onDelete = this.referenceControlType();
	            this.state = 1564;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,159,this._ctx);
	            if(la_===1) {
	                this.state = 1561;
	                this.match(MySqlParser.ON);
	                this.state = 1562;
	                this.match(MySqlParser.UPDATE);
	                this.state = 1563;
	                localctx.onUpdate = this.referenceControlType();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1566;
	            this.match(MySqlParser.ON);
	            this.state = 1567;
	            this.match(MySqlParser.UPDATE);
	            this.state = 1568;
	            localctx.onUpdate = this.referenceControlType();
	            this.state = 1572;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,160,this._ctx);
	            if(la_===1) {
	                this.state = 1569;
	                this.match(MySqlParser.ON);
	                this.state = 1570;
	                this.match(MySqlParser.DELETE);
	                this.state = 1571;
	                localctx.onDelete = this.referenceControlType();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	referenceControlType() {
	    let localctx = new ReferenceControlTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, MySqlParser.RULE_referenceControlType);
	    try {
	        this.state = 1582;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.RESTRICT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1576;
	            this.match(MySqlParser.RESTRICT);
	            break;
	        case MySqlParser.CASCADE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1577;
	            this.match(MySqlParser.CASCADE);
	            break;
	        case MySqlParser.SET:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1578;
	            this.match(MySqlParser.SET);
	            this.state = 1579;
	            this.match(MySqlParser.NULL_LITERAL);
	            break;
	        case MySqlParser.NO:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1580;
	            this.match(MySqlParser.NO);
	            this.state = 1581;
	            this.match(MySqlParser.ACTION);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexColumnDefinition() {
	    let localctx = new IndexColumnDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, MySqlParser.RULE_indexColumnDefinition);
	    var _la = 0; // Token type
	    try {
	        this.state = 1612;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.INDEX:
	        case MySqlParser.KEY:
	            localctx = new SimpleIndexDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1584;
	            localctx.indexFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.INDEX || _la===MySqlParser.KEY)) {
	                localctx.indexFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1586;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySqlParser.CURRENT - 32)) | (1 << (MySqlParser.DATABASE - 32)) | (1 << (MySqlParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySqlParser.LEFT || _la===MySqlParser.NUMBER || _la===MySqlParser.RIGHT || _la===MySqlParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.TIMESTAMP - 199)) | (1 << (MySqlParser.DATETIME - 199)) | (1 << (MySqlParser.YEAR - 199)) | (1 << (MySqlParser.TEXT - 199)) | (1 << (MySqlParser.ENUM - 199)) | (1 << (MySqlParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.JSON_VALID - 233)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySqlParser.AVG - 233)) | (1 << (MySqlParser.BIT_AND - 233)) | (1 << (MySqlParser.BIT_OR - 233)) | (1 << (MySqlParser.BIT_XOR - 233)) | (1 << (MySqlParser.COUNT - 233)) | (1 << (MySqlParser.GROUP_CONCAT - 233)) | (1 << (MySqlParser.MAX - 233)) | (1 << (MySqlParser.MIN - 233)) | (1 << (MySqlParser.STD - 233)) | (1 << (MySqlParser.STDDEV - 233)) | (1 << (MySqlParser.STDDEV_POP - 233)) | (1 << (MySqlParser.STDDEV_SAMP - 233)) | (1 << (MySqlParser.SUM - 233)) | (1 << (MySqlParser.VAR_POP - 233)) | (1 << (MySqlParser.VAR_SAMP - 233)) | (1 << (MySqlParser.VARIANCE - 233)) | (1 << (MySqlParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySqlParser.ACCOUNT - 270)) | (1 << (MySqlParser.ACTION - 270)) | (1 << (MySqlParser.AFTER - 270)) | (1 << (MySqlParser.AGGREGATE - 270)) | (1 << (MySqlParser.ALGORITHM - 270)) | (1 << (MySqlParser.ANY - 270)) | (1 << (MySqlParser.AT - 270)) | (1 << (MySqlParser.AUTHORS - 270)) | (1 << (MySqlParser.AUTOCOMMIT - 270)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySqlParser.AUTO_INCREMENT - 270)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 270)) | (1 << (MySqlParser.BEGIN - 270)) | (1 << (MySqlParser.BINLOG - 270)) | (1 << (MySqlParser.BIT - 270)) | (1 << (MySqlParser.BLOCK - 270)) | (1 << (MySqlParser.BOOL - 270)) | (1 << (MySqlParser.BOOLEAN - 270)) | (1 << (MySqlParser.BTREE - 270)) | (1 << (MySqlParser.CACHE - 270)) | (1 << (MySqlParser.CASCADED - 270)) | (1 << (MySqlParser.CHAIN - 270)) | (1 << (MySqlParser.CHANGED - 270)) | (1 << (MySqlParser.CHANNEL - 270)) | (1 << (MySqlParser.CHECKSUM - 270)) | (1 << (MySqlParser.PAGE_CHECKSUM - 270)) | (1 << (MySqlParser.CIPHER - 270)) | (1 << (MySqlParser.CLASS_ORIGIN - 270)) | (1 << (MySqlParser.CLIENT - 270)) | (1 << (MySqlParser.CLOSE - 270)) | (1 << (MySqlParser.COALESCE - 270)) | (1 << (MySqlParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySqlParser.COLUMNS - 302)) | (1 << (MySqlParser.COLUMN_FORMAT - 302)) | (1 << (MySqlParser.COLUMN_NAME - 302)) | (1 << (MySqlParser.COMMENT - 302)) | (1 << (MySqlParser.COMMIT - 302)) | (1 << (MySqlParser.COMPACT - 302)) | (1 << (MySqlParser.COMPLETION - 302)) | (1 << (MySqlParser.COMPRESSED - 302)) | (1 << (MySqlParser.COMPRESSION - 302)) | (1 << (MySqlParser.CONCURRENT - 302)) | (1 << (MySqlParser.CONNECTION - 302)) | (1 << (MySqlParser.CONSISTENT - 302)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySqlParser.CONSTRAINT_NAME - 302)) | (1 << (MySqlParser.CONTAINS - 302)) | (1 << (MySqlParser.CONTEXT - 302)) | (1 << (MySqlParser.CONTRIBUTORS - 302)) | (1 << (MySqlParser.COPY - 302)) | (1 << (MySqlParser.CPU - 302)) | (1 << (MySqlParser.CURSOR_NAME - 302)) | (1 << (MySqlParser.DATA - 302)) | (1 << (MySqlParser.DATAFILE - 302)) | (1 << (MySqlParser.DEALLOCATE - 302)) | (1 << (MySqlParser.DEFAULT_AUTH - 302)) | (1 << (MySqlParser.DEFINER - 302)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 302)) | (1 << (MySqlParser.DES_KEY_FILE - 302)) | (1 << (MySqlParser.DIRECTORY - 302)) | (1 << (MySqlParser.DISABLE - 302)) | (1 << (MySqlParser.DISCARD - 302)) | (1 << (MySqlParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySqlParser.DO - 334)) | (1 << (MySqlParser.DUMPFILE - 334)) | (1 << (MySqlParser.DUPLICATE - 334)) | (1 << (MySqlParser.DYNAMIC - 334)) | (1 << (MySqlParser.ENABLE - 334)) | (1 << (MySqlParser.ENCRYPTION - 334)) | (1 << (MySqlParser.END - 334)) | (1 << (MySqlParser.ENDS - 334)) | (1 << (MySqlParser.ENGINE - 334)) | (1 << (MySqlParser.ENGINES - 334)) | (1 << (MySqlParser.ERROR - 334)) | (1 << (MySqlParser.ERRORS - 334)) | (1 << (MySqlParser.ESCAPE - 334)) | (1 << (MySqlParser.EVEN - 334)) | (1 << (MySqlParser.EVENT - 334)) | (1 << (MySqlParser.EVENTS - 334)) | (1 << (MySqlParser.EVERY - 334)) | (1 << (MySqlParser.EXCHANGE - 334)) | (1 << (MySqlParser.EXCLUSIVE - 334)) | (1 << (MySqlParser.EXPIRE - 334)) | (1 << (MySqlParser.EXPORT - 334)) | (1 << (MySqlParser.EXTENDED - 334)) | (1 << (MySqlParser.EXTENT_SIZE - 334)) | (1 << (MySqlParser.FAST - 334)) | (1 << (MySqlParser.FAULTS - 334)) | (1 << (MySqlParser.FIELDS - 334)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySqlParser.FILTER - 334)) | (1 << (MySqlParser.FIRST - 334)) | (1 << (MySqlParser.FIXED - 334)) | (1 << (MySqlParser.FLUSH - 334)) | (1 << (MySqlParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySqlParser.FOUND - 366)) | (1 << (MySqlParser.FULL - 366)) | (1 << (MySqlParser.FUNCTION - 366)) | (1 << (MySqlParser.GENERAL - 366)) | (1 << (MySqlParser.GLOBAL - 366)) | (1 << (MySqlParser.GRANTS - 366)) | (1 << (MySqlParser.GROUP_REPLICATION - 366)) | (1 << (MySqlParser.HANDLER - 366)) | (1 << (MySqlParser.HASH - 366)) | (1 << (MySqlParser.HELP - 366)) | (1 << (MySqlParser.HOST - 366)) | (1 << (MySqlParser.HOSTS - 366)) | (1 << (MySqlParser.IDENTIFIED - 366)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySqlParser.IMPORT - 366)) | (1 << (MySqlParser.INDEXES - 366)) | (1 << (MySqlParser.INITIAL_SIZE - 366)) | (1 << (MySqlParser.INPLACE - 366)) | (1 << (MySqlParser.INSERT_METHOD - 366)) | (1 << (MySqlParser.INSTALL - 366)) | (1 << (MySqlParser.INSTANCE - 366)) | (1 << (MySqlParser.INVISIBLE - 366)) | (1 << (MySqlParser.INVOKER - 366)) | (1 << (MySqlParser.IO - 366)) | (1 << (MySqlParser.IO_THREAD - 366)) | (1 << (MySqlParser.IPC - 366)) | (1 << (MySqlParser.ISOLATION - 366)) | (1 << (MySqlParser.ISSUER - 366)) | (1 << (MySqlParser.JSON - 366)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySqlParser.LANGUAGE - 366)) | (1 << (MySqlParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.LEAVES - 398)) | (1 << (MySqlParser.LESS - 398)) | (1 << (MySqlParser.LEVEL - 398)) | (1 << (MySqlParser.LIST - 398)) | (1 << (MySqlParser.LOCAL - 398)) | (1 << (MySqlParser.LOGFILE - 398)) | (1 << (MySqlParser.LOGS - 398)) | (1 << (MySqlParser.MASTER - 398)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySqlParser.MASTER_DELAY - 398)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySqlParser.MASTER_HOST - 398)) | (1 << (MySqlParser.MASTER_LOG_FILE - 398)) | (1 << (MySqlParser.MASTER_LOG_POS - 398)) | (1 << (MySqlParser.MASTER_PASSWORD - 398)) | (1 << (MySqlParser.MASTER_PORT - 398)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySqlParser.MASTER_SSL - 398)) | (1 << (MySqlParser.MASTER_SSL_CA - 398)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_CERT - 398)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySqlParser.MASTER_SSL_CRL - 398)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_KEY - 398)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 398)) | (1 << (MySqlParser.MASTER_USER - 398)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySqlParser.MEDIUM - 430)) | (1 << (MySqlParser.MEMBER - 430)) | (1 << (MySqlParser.MERGE - 430)) | (1 << (MySqlParser.MESSAGE_TEXT - 430)) | (1 << (MySqlParser.MID - 430)) | (1 << (MySqlParser.MIGRATE - 430)) | (1 << (MySqlParser.MIN_ROWS - 430)) | (1 << (MySqlParser.MODE - 430)) | (1 << (MySqlParser.MODIFY - 430)) | (1 << (MySqlParser.MUTEX - 430)) | (1 << (MySqlParser.MYSQL - 430)) | (1 << (MySqlParser.MYSQL_ERRNO - 430)) | (1 << (MySqlParser.NAME - 430)) | (1 << (MySqlParser.NAMES - 430)) | (1 << (MySqlParser.NCHAR - 430)) | (1 << (MySqlParser.NEVER - 430)) | (1 << (MySqlParser.NEXT - 430)) | (1 << (MySqlParser.NO - 430)) | (1 << (MySqlParser.NODEGROUP - 430)) | (1 << (MySqlParser.NONE - 430)) | (1 << (MySqlParser.OFFLINE - 430)) | (1 << (MySqlParser.OFFSET - 430)) | (1 << (MySqlParser.OF - 430)) | (1 << (MySqlParser.OJ - 430)) | (1 << (MySqlParser.OLD_PASSWORD - 430)) | (1 << (MySqlParser.ONE - 430)) | (1 << (MySqlParser.ONLINE - 430)) | (1 << (MySqlParser.ONLY - 430)) | (1 << (MySqlParser.OPEN - 430)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySqlParser.OPTIONS - 462)) | (1 << (MySqlParser.OWNER - 462)) | (1 << (MySqlParser.PACK_KEYS - 462)) | (1 << (MySqlParser.PAGE - 462)) | (1 << (MySqlParser.PARSER - 462)) | (1 << (MySqlParser.PARTIAL - 462)) | (1 << (MySqlParser.PARTITIONING - 462)) | (1 << (MySqlParser.PARTITIONS - 462)) | (1 << (MySqlParser.PASSWORD - 462)) | (1 << (MySqlParser.PHASE - 462)) | (1 << (MySqlParser.PLUGIN - 462)) | (1 << (MySqlParser.PLUGIN_DIR - 462)) | (1 << (MySqlParser.PLUGINS - 462)) | (1 << (MySqlParser.PORT - 462)) | (1 << (MySqlParser.PRECEDES - 462)) | (1 << (MySqlParser.PREPARE - 462)) | (1 << (MySqlParser.PRESERVE - 462)) | (1 << (MySqlParser.PREV - 462)) | (1 << (MySqlParser.PROCESSLIST - 462)) | (1 << (MySqlParser.PROFILE - 462)) | (1 << (MySqlParser.PROFILES - 462)) | (1 << (MySqlParser.PROXY - 462)) | (1 << (MySqlParser.QUERY - 462)) | (1 << (MySqlParser.QUICK - 462)) | (1 << (MySqlParser.REBUILD - 462)) | (1 << (MySqlParser.RECOVER - 462)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySqlParser.REDUNDANT - 462)) | (1 << (MySqlParser.RELAY - 462)) | (1 << (MySqlParser.RELAY_LOG_FILE - 462)) | (1 << (MySqlParser.RELAY_LOG_POS - 462)) | (1 << (MySqlParser.RELAYLOG - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySqlParser.REMOVE - 494)) | (1 << (MySqlParser.REORGANIZE - 494)) | (1 << (MySqlParser.REPAIR - 494)) | (1 << (MySqlParser.REPLICATE_DO_DB - 494)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATION - 494)) | (1 << (MySqlParser.RESET - 494)) | (1 << (MySqlParser.RESUME - 494)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 494)) | (1 << (MySqlParser.RETURNS - 494)) | (1 << (MySqlParser.ROLE - 494)) | (1 << (MySqlParser.ROLLBACK - 494)) | (1 << (MySqlParser.ROLLUP - 494)) | (1 << (MySqlParser.ROTATE - 494)) | (1 << (MySqlParser.ROW - 494)) | (1 << (MySqlParser.ROWS - 494)) | (1 << (MySqlParser.ROW_FORMAT - 494)) | (1 << (MySqlParser.SAVEPOINT - 494)) | (1 << (MySqlParser.SCHEDULE - 494)) | (1 << (MySqlParser.SECURITY - 494)) | (1 << (MySqlParser.SERVER - 494)) | (1 << (MySqlParser.SESSION - 494)) | (1 << (MySqlParser.SHARE - 494)) | (1 << (MySqlParser.SHARED - 494)) | (1 << (MySqlParser.SIGNED - 494)) | (1 << (MySqlParser.SIMPLE - 494)) | (1 << (MySqlParser.SLAVE - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySqlParser.SLOW - 526)) | (1 << (MySqlParser.SNAPSHOT - 526)) | (1 << (MySqlParser.SOCKET - 526)) | (1 << (MySqlParser.SOME - 526)) | (1 << (MySqlParser.SONAME - 526)) | (1 << (MySqlParser.SOUNDS - 526)) | (1 << (MySqlParser.SOURCE - 526)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySqlParser.SQL_CACHE - 526)) | (1 << (MySqlParser.SQL_NO_CACHE - 526)) | (1 << (MySqlParser.SQL_THREAD - 526)) | (1 << (MySqlParser.START - 526)) | (1 << (MySqlParser.STARTS - 526)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 526)) | (1 << (MySqlParser.STATS_PERSISTENT - 526)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySqlParser.STATUS - 526)) | (1 << (MySqlParser.STOP - 526)) | (1 << (MySqlParser.STORAGE - 526)) | (1 << (MySqlParser.STRING - 526)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySqlParser.SUBJECT - 526)) | (1 << (MySqlParser.SUBPARTITION - 526)) | (1 << (MySqlParser.SUBPARTITIONS - 526)) | (1 << (MySqlParser.SUSPEND - 526)) | (1 << (MySqlParser.SWAPS - 526)) | (1 << (MySqlParser.SWITCHES - 526)) | (1 << (MySqlParser.TABLE_NAME - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySqlParser.TABLESPACE - 558)) | (1 << (MySqlParser.TEMPORARY - 558)) | (1 << (MySqlParser.TEMPTABLE - 558)) | (1 << (MySqlParser.THAN - 558)) | (1 << (MySqlParser.TRADITIONAL - 558)) | (1 << (MySqlParser.TRANSACTION - 558)) | (1 << (MySqlParser.TRANSACTIONAL - 558)) | (1 << (MySqlParser.TRIGGERS - 558)) | (1 << (MySqlParser.TRUNCATE - 558)) | (1 << (MySqlParser.UNDEFINED - 558)) | (1 << (MySqlParser.UNDOFILE - 558)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySqlParser.UNINSTALL - 558)) | (1 << (MySqlParser.UNKNOWN - 558)) | (1 << (MySqlParser.UNTIL - 558)) | (1 << (MySqlParser.UPGRADE - 558)) | (1 << (MySqlParser.USER - 558)) | (1 << (MySqlParser.USE_FRM - 558)) | (1 << (MySqlParser.USER_RESOURCES - 558)) | (1 << (MySqlParser.VALIDATION - 558)) | (1 << (MySqlParser.VALUE - 558)) | (1 << (MySqlParser.VARIABLES - 558)) | (1 << (MySqlParser.VIEW - 558)) | (1 << (MySqlParser.VISIBLE - 558)) | (1 << (MySqlParser.WAIT - 558)) | (1 << (MySqlParser.WARNINGS - 558)) | (1 << (MySqlParser.WITHOUT - 558)) | (1 << (MySqlParser.WORK - 558)) | (1 << (MySqlParser.WRAPPER - 558)) | (1 << (MySqlParser.X509 - 558)) | (1 << (MySqlParser.XA - 558)))) !== 0) || ((((_la - 590)) & ~0x1f) == 0 && ((1 << (_la - 590)) & ((1 << (MySqlParser.XML - 590)) | (1 << (MySqlParser.INTERNAL - 590)) | (1 << (MySqlParser.QUARTER - 590)) | (1 << (MySqlParser.MONTH - 590)) | (1 << (MySqlParser.DAY - 590)) | (1 << (MySqlParser.HOUR - 590)) | (1 << (MySqlParser.MINUTE - 590)) | (1 << (MySqlParser.WEEK - 590)) | (1 << (MySqlParser.SECOND - 590)) | (1 << (MySqlParser.MICROSECOND - 590)) | (1 << (MySqlParser.TABLES - 590)) | (1 << (MySqlParser.ROUTINE - 590)) | (1 << (MySqlParser.EXECUTE - 590)) | (1 << (MySqlParser.FILE - 590)) | (1 << (MySqlParser.PROCESS - 590)) | (1 << (MySqlParser.RELOAD - 590)) | (1 << (MySqlParser.SHUTDOWN - 590)) | (1 << (MySqlParser.SUPER - 590)) | (1 << (MySqlParser.PRIVILEGES - 590)) | (1 << (MySqlParser.AUDIT_ADMIN - 590)) | (1 << (MySqlParser.BACKUP_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 590)) | (1 << (MySqlParser.CLONE_ADMIN - 590)) | (1 << (MySqlParser.CONNECTION_ADMIN - 590)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 590)) | (1 << (MySqlParser.FIREWALL_ADMIN - 590)))) !== 0) || ((((_la - 622)) & ~0x1f) == 0 && ((1 << (_la - 622)) & ((1 << (MySqlParser.FIREWALL_USER - 622)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 622)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 622)) | (1 << (MySqlParser.NDB_STORED_USER - 622)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.REPLICATION_APPLIER - 622)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 622)) | (1 << (MySqlParser.ROLE_ADMIN - 622)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.SET_USER_ID - 622)) | (1 << (MySqlParser.SHOW_ROUTINE - 622)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 622)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 622)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 622)) | (1 << (MySqlParser.ARMSCII8 - 622)) | (1 << (MySqlParser.ASCII - 622)) | (1 << (MySqlParser.BIG5 - 622)) | (1 << (MySqlParser.CP1250 - 622)) | (1 << (MySqlParser.CP1251 - 622)) | (1 << (MySqlParser.CP1256 - 622)) | (1 << (MySqlParser.CP1257 - 622)) | (1 << (MySqlParser.CP850 - 622)) | (1 << (MySqlParser.CP852 - 622)) | (1 << (MySqlParser.CP866 - 622)) | (1 << (MySqlParser.CP932 - 622)) | (1 << (MySqlParser.DEC8 - 622)) | (1 << (MySqlParser.EUCJPMS - 622)) | (1 << (MySqlParser.EUCKR - 622)) | (1 << (MySqlParser.GB2312 - 622)))) !== 0) || ((((_la - 654)) & ~0x1f) == 0 && ((1 << (_la - 654)) & ((1 << (MySqlParser.GBK - 654)) | (1 << (MySqlParser.GEOSTD8 - 654)) | (1 << (MySqlParser.GREEK - 654)) | (1 << (MySqlParser.HEBREW - 654)) | (1 << (MySqlParser.HP8 - 654)) | (1 << (MySqlParser.KEYBCS2 - 654)) | (1 << (MySqlParser.KOI8R - 654)) | (1 << (MySqlParser.KOI8U - 654)) | (1 << (MySqlParser.LATIN1 - 654)) | (1 << (MySqlParser.LATIN2 - 654)) | (1 << (MySqlParser.LATIN5 - 654)) | (1 << (MySqlParser.LATIN7 - 654)) | (1 << (MySqlParser.MACCE - 654)) | (1 << (MySqlParser.MACROMAN - 654)) | (1 << (MySqlParser.SJIS - 654)) | (1 << (MySqlParser.SWE7 - 654)) | (1 << (MySqlParser.TIS620 - 654)) | (1 << (MySqlParser.UCS2 - 654)) | (1 << (MySqlParser.UJIS - 654)) | (1 << (MySqlParser.UTF16 - 654)) | (1 << (MySqlParser.UTF16LE - 654)) | (1 << (MySqlParser.UTF32 - 654)) | (1 << (MySqlParser.UTF8 - 654)) | (1 << (MySqlParser.UTF8MB3 - 654)) | (1 << (MySqlParser.UTF8MB4 - 654)) | (1 << (MySqlParser.ARCHIVE - 654)) | (1 << (MySqlParser.BLACKHOLE - 654)) | (1 << (MySqlParser.CSV - 654)) | (1 << (MySqlParser.FEDERATED - 654)) | (1 << (MySqlParser.INNODB - 654)) | (1 << (MySqlParser.MEMORY - 654)) | (1 << (MySqlParser.MRG_MYISAM - 654)))) !== 0) || ((((_la - 686)) & ~0x1f) == 0 && ((1 << (_la - 686)) & ((1 << (MySqlParser.MYISAM - 686)) | (1 << (MySqlParser.NDB - 686)) | (1 << (MySqlParser.NDBCLUSTER - 686)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 686)) | (1 << (MySqlParser.TOKUDB - 686)) | (1 << (MySqlParser.REPEATABLE - 686)) | (1 << (MySqlParser.COMMITTED - 686)) | (1 << (MySqlParser.UNCOMMITTED - 686)) | (1 << (MySqlParser.SERIALIZABLE - 686)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 686)) | (1 << (MySqlParser.LINESTRING - 686)) | (1 << (MySqlParser.MULTILINESTRING - 686)) | (1 << (MySqlParser.MULTIPOINT - 686)) | (1 << (MySqlParser.MULTIPOLYGON - 686)) | (1 << (MySqlParser.POINT - 686)) | (1 << (MySqlParser.POLYGON - 686)) | (1 << (MySqlParser.ABS - 686)) | (1 << (MySqlParser.ACOS - 686)) | (1 << (MySqlParser.ADDDATE - 686)) | (1 << (MySqlParser.ADDTIME - 686)) | (1 << (MySqlParser.AES_DECRYPT - 686)) | (1 << (MySqlParser.AES_ENCRYPT - 686)) | (1 << (MySqlParser.AREA - 686)) | (1 << (MySqlParser.ASBINARY - 686)) | (1 << (MySqlParser.ASIN - 686)) | (1 << (MySqlParser.ASTEXT - 686)) | (1 << (MySqlParser.ASWKB - 686)) | (1 << (MySqlParser.ASWKT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 686)))) !== 0) || ((((_la - 718)) & ~0x1f) == 0 && ((1 << (_la - 718)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 718)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 718)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 718)) | (1 << (MySqlParser.ATAN - 718)) | (1 << (MySqlParser.ATAN2 - 718)) | (1 << (MySqlParser.BENCHMARK - 718)) | (1 << (MySqlParser.BIN - 718)) | (1 << (MySqlParser.BIT_COUNT - 718)) | (1 << (MySqlParser.BIT_LENGTH - 718)) | (1 << (MySqlParser.BUFFER - 718)) | (1 << (MySqlParser.CATALOG_NAME - 718)) | (1 << (MySqlParser.CEIL - 718)) | (1 << (MySqlParser.CEILING - 718)) | (1 << (MySqlParser.CENTROID - 718)) | (1 << (MySqlParser.CHARACTER_LENGTH - 718)) | (1 << (MySqlParser.CHARSET - 718)) | (1 << (MySqlParser.CHAR_LENGTH - 718)) | (1 << (MySqlParser.COERCIBILITY - 718)) | (1 << (MySqlParser.COLLATION - 718)) | (1 << (MySqlParser.COMPRESS - 718)) | (1 << (MySqlParser.CONCAT - 718)) | (1 << (MySqlParser.CONCAT_WS - 718)) | (1 << (MySqlParser.CONNECTION_ID - 718)) | (1 << (MySqlParser.CONV - 718)) | (1 << (MySqlParser.CONVERT_TZ - 718)) | (1 << (MySqlParser.COS - 718)) | (1 << (MySqlParser.COT - 718)) | (1 << (MySqlParser.CRC32 - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 718)) | (1 << (MySqlParser.CREATE_DIGEST - 718)))) !== 0) || ((((_la - 750)) & ~0x1f) == 0 && ((1 << (_la - 750)) & ((1 << (MySqlParser.CROSSES - 750)) | (1 << (MySqlParser.DATEDIFF - 750)) | (1 << (MySqlParser.DATE_FORMAT - 750)) | (1 << (MySqlParser.DAYNAME - 750)) | (1 << (MySqlParser.DAYOFMONTH - 750)) | (1 << (MySqlParser.DAYOFWEEK - 750)) | (1 << (MySqlParser.DAYOFYEAR - 750)) | (1 << (MySqlParser.DECODE - 750)) | (1 << (MySqlParser.DEGREES - 750)) | (1 << (MySqlParser.DES_DECRYPT - 750)) | (1 << (MySqlParser.DES_ENCRYPT - 750)) | (1 << (MySqlParser.DIMENSION - 750)) | (1 << (MySqlParser.DISJOINT - 750)) | (1 << (MySqlParser.ELT - 750)) | (1 << (MySqlParser.ENCODE - 750)) | (1 << (MySqlParser.ENCRYPT - 750)) | (1 << (MySqlParser.ENDPOINT - 750)) | (1 << (MySqlParser.ENVELOPE - 750)) | (1 << (MySqlParser.EQUALS - 750)) | (1 << (MySqlParser.EXP - 750)) | (1 << (MySqlParser.EXPORT_SET - 750)) | (1 << (MySqlParser.EXTERIORRING - 750)) | (1 << (MySqlParser.EXTRACTVALUE - 750)) | (1 << (MySqlParser.FIELD - 750)) | (1 << (MySqlParser.FIND_IN_SET - 750)) | (1 << (MySqlParser.FLOOR - 750)) | (1 << (MySqlParser.FORMAT - 750)) | (1 << (MySqlParser.FOUND_ROWS - 750)) | (1 << (MySqlParser.FROM_BASE64 - 750)) | (1 << (MySqlParser.FROM_DAYS - 750)) | (1 << (MySqlParser.FROM_UNIXTIME - 750)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 750)))) !== 0) || ((((_la - 782)) & ~0x1f) == 0 && ((1 << (_la - 782)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYN - 782)) | (1 << (MySqlParser.GEOMETRYTYPE - 782)) | (1 << (MySqlParser.GEOMFROMTEXT - 782)) | (1 << (MySqlParser.GEOMFROMWKB - 782)) | (1 << (MySqlParser.GET_FORMAT - 782)) | (1 << (MySqlParser.GET_LOCK - 782)) | (1 << (MySqlParser.GLENGTH - 782)) | (1 << (MySqlParser.GREATEST - 782)) | (1 << (MySqlParser.GTID_SUBSET - 782)) | (1 << (MySqlParser.GTID_SUBTRACT - 782)) | (1 << (MySqlParser.HEX - 782)) | (1 << (MySqlParser.IFNULL - 782)) | (1 << (MySqlParser.INET6_ATON - 782)) | (1 << (MySqlParser.INET6_NTOA - 782)) | (1 << (MySqlParser.INET_ATON - 782)) | (1 << (MySqlParser.INET_NTOA - 782)) | (1 << (MySqlParser.INSTR - 782)) | (1 << (MySqlParser.INTERIORRINGN - 782)) | (1 << (MySqlParser.INTERSECTS - 782)) | (1 << (MySqlParser.ISCLOSED - 782)) | (1 << (MySqlParser.ISEMPTY - 782)) | (1 << (MySqlParser.ISNULL - 782)) | (1 << (MySqlParser.ISSIMPLE - 782)) | (1 << (MySqlParser.IS_FREE_LOCK - 782)) | (1 << (MySqlParser.IS_IPV4 - 782)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 782)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 782)))) !== 0) || ((((_la - 814)) & ~0x1f) == 0 && ((1 << (_la - 814)) & ((1 << (MySqlParser.IS_IPV6 - 814)) | (1 << (MySqlParser.IS_USED_LOCK - 814)) | (1 << (MySqlParser.LAST_INSERT_ID - 814)) | (1 << (MySqlParser.LCASE - 814)) | (1 << (MySqlParser.LEAST - 814)) | (1 << (MySqlParser.LENGTH - 814)) | (1 << (MySqlParser.LINEFROMTEXT - 814)) | (1 << (MySqlParser.LINEFROMWKB - 814)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 814)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 814)) | (1 << (MySqlParser.LN - 814)) | (1 << (MySqlParser.LOAD_FILE - 814)) | (1 << (MySqlParser.LOCATE - 814)) | (1 << (MySqlParser.LOG - 814)) | (1 << (MySqlParser.LOG10 - 814)) | (1 << (MySqlParser.LOG2 - 814)) | (1 << (MySqlParser.LOWER - 814)) | (1 << (MySqlParser.LPAD - 814)) | (1 << (MySqlParser.LTRIM - 814)) | (1 << (MySqlParser.MAKEDATE - 814)) | (1 << (MySqlParser.MAKETIME - 814)) | (1 << (MySqlParser.MAKE_SET - 814)) | (1 << (MySqlParser.MASTER_POS_WAIT - 814)) | (1 << (MySqlParser.MBRCONTAINS - 814)) | (1 << (MySqlParser.MBRDISJOINT - 814)) | (1 << (MySqlParser.MBREQUAL - 814)) | (1 << (MySqlParser.MBRINTERSECTS - 814)) | (1 << (MySqlParser.MBROVERLAPS - 814)) | (1 << (MySqlParser.MBRTOUCHES - 814)) | (1 << (MySqlParser.MBRWITHIN - 814)) | (1 << (MySqlParser.MD5 - 814)) | (1 << (MySqlParser.MLINEFROMTEXT - 814)))) !== 0) || ((((_la - 846)) & ~0x1f) == 0 && ((1 << (_la - 846)) & ((1 << (MySqlParser.MLINEFROMWKB - 846)) | (1 << (MySqlParser.MONTHNAME - 846)) | (1 << (MySqlParser.MPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MPOINTFROMWKB - 846)) | (1 << (MySqlParser.MPOLYFROMTEXT - 846)) | (1 << (MySqlParser.MPOLYFROMWKB - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 846)) | (1 << (MySqlParser.NAME_CONST - 846)) | (1 << (MySqlParser.NULLIF - 846)) | (1 << (MySqlParser.NUMGEOMETRIES - 846)) | (1 << (MySqlParser.NUMINTERIORRINGS - 846)) | (1 << (MySqlParser.NUMPOINTS - 846)) | (1 << (MySqlParser.OCT - 846)) | (1 << (MySqlParser.OCTET_LENGTH - 846)) | (1 << (MySqlParser.ORD - 846)) | (1 << (MySqlParser.OVERLAPS - 846)) | (1 << (MySqlParser.PERIOD_ADD - 846)) | (1 << (MySqlParser.PERIOD_DIFF - 846)) | (1 << (MySqlParser.PI - 846)) | (1 << (MySqlParser.POINTFROMTEXT - 846)) | (1 << (MySqlParser.POINTFROMWKB - 846)) | (1 << (MySqlParser.POINTN - 846)) | (1 << (MySqlParser.POLYFROMTEXT - 846)) | (1 << (MySqlParser.POLYFROMWKB - 846)) | (1 << (MySqlParser.POLYGONFROMTEXT - 846)) | (1 << (MySqlParser.POLYGONFROMWKB - 846)) | (1 << (MySqlParser.POW - 846)))) !== 0) || ((((_la - 878)) & ~0x1f) == 0 && ((1 << (_la - 878)) & ((1 << (MySqlParser.POWER - 878)) | (1 << (MySqlParser.QUOTE - 878)) | (1 << (MySqlParser.RADIANS - 878)) | (1 << (MySqlParser.RAND - 878)) | (1 << (MySqlParser.RANDOM_BYTES - 878)) | (1 << (MySqlParser.RELEASE_LOCK - 878)) | (1 << (MySqlParser.REVERSE - 878)) | (1 << (MySqlParser.ROUND - 878)) | (1 << (MySqlParser.ROW_COUNT - 878)) | (1 << (MySqlParser.RPAD - 878)) | (1 << (MySqlParser.RTRIM - 878)) | (1 << (MySqlParser.SEC_TO_TIME - 878)) | (1 << (MySqlParser.SESSION_USER - 878)) | (1 << (MySqlParser.SHA - 878)) | (1 << (MySqlParser.SHA1 - 878)) | (1 << (MySqlParser.SHA2 - 878)) | (1 << (MySqlParser.SCHEMA_NAME - 878)) | (1 << (MySqlParser.SIGN - 878)) | (1 << (MySqlParser.SIN - 878)) | (1 << (MySqlParser.SLEEP - 878)) | (1 << (MySqlParser.SOUNDEX - 878)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 878)) | (1 << (MySqlParser.SQRT - 878)) | (1 << (MySqlParser.SRID - 878)) | (1 << (MySqlParser.STARTPOINT - 878)) | (1 << (MySqlParser.STRCMP - 878)) | (1 << (MySqlParser.STR_TO_DATE - 878)) | (1 << (MySqlParser.ST_AREA - 878)) | (1 << (MySqlParser.ST_ASBINARY - 878)) | (1 << (MySqlParser.ST_ASTEXT - 878)) | (1 << (MySqlParser.ST_ASWKB - 878)) | (1 << (MySqlParser.ST_ASWKT - 878)))) !== 0) || ((((_la - 910)) & ~0x1f) == 0 && ((1 << (_la - 910)) & ((1 << (MySqlParser.ST_BUFFER - 910)) | (1 << (MySqlParser.ST_CENTROID - 910)) | (1 << (MySqlParser.ST_CONTAINS - 910)) | (1 << (MySqlParser.ST_CROSSES - 910)) | (1 << (MySqlParser.ST_DIFFERENCE - 910)) | (1 << (MySqlParser.ST_DIMENSION - 910)) | (1 << (MySqlParser.ST_DISJOINT - 910)) | (1 << (MySqlParser.ST_DISTANCE - 910)) | (1 << (MySqlParser.ST_ENDPOINT - 910)) | (1 << (MySqlParser.ST_ENVELOPE - 910)) | (1 << (MySqlParser.ST_EQUALS - 910)) | (1 << (MySqlParser.ST_EXTERIORRING - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYN - 910)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 910)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 910)) | (1 << (MySqlParser.ST_INTERIORRINGN - 910)) | (1 << (MySqlParser.ST_INTERSECTION - 910)) | (1 << (MySqlParser.ST_INTERSECTS - 910)) | (1 << (MySqlParser.ST_ISCLOSED - 910)) | (1 << (MySqlParser.ST_ISEMPTY - 910)) | (1 << (MySqlParser.ST_ISSIMPLE - 910)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 910)) | (1 << (MySqlParser.ST_LINEFROMWKB - 910)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 910)))) !== 0) || ((((_la - 942)) & ~0x1f) == 0 && ((1 << (_la - 942)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 942)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 942)) | (1 << (MySqlParser.ST_NUMPOINTS - 942)) | (1 << (MySqlParser.ST_OVERLAPS - 942)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 942)) | (1 << (MySqlParser.ST_POINTFROMWKB - 942)) | (1 << (MySqlParser.ST_POINTN - 942)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYFROMWKB - 942)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 942)) | (1 << (MySqlParser.ST_SRID - 942)) | (1 << (MySqlParser.ST_STARTPOINT - 942)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 942)) | (1 << (MySqlParser.ST_TOUCHES - 942)) | (1 << (MySqlParser.ST_UNION - 942)) | (1 << (MySqlParser.ST_WITHIN - 942)) | (1 << (MySqlParser.ST_X - 942)) | (1 << (MySqlParser.ST_Y - 942)) | (1 << (MySqlParser.SUBDATE - 942)) | (1 << (MySqlParser.SUBSTRING_INDEX - 942)) | (1 << (MySqlParser.SUBTIME - 942)) | (1 << (MySqlParser.SYSTEM_USER - 942)) | (1 << (MySqlParser.TAN - 942)) | (1 << (MySqlParser.TIMEDIFF - 942)) | (1 << (MySqlParser.TIMESTAMPADD - 942)) | (1 << (MySqlParser.TIMESTAMPDIFF - 942)) | (1 << (MySqlParser.TIME_FORMAT - 942)) | (1 << (MySqlParser.TIME_TO_SEC - 942)) | (1 << (MySqlParser.TOUCHES - 942)))) !== 0) || ((((_la - 974)) & ~0x1f) == 0 && ((1 << (_la - 974)) & ((1 << (MySqlParser.TO_BASE64 - 974)) | (1 << (MySqlParser.TO_DAYS - 974)) | (1 << (MySqlParser.TO_SECONDS - 974)) | (1 << (MySqlParser.UCASE - 974)) | (1 << (MySqlParser.UNCOMPRESS - 974)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 974)) | (1 << (MySqlParser.UNHEX - 974)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 974)) | (1 << (MySqlParser.UPDATEXML - 974)) | (1 << (MySqlParser.UPPER - 974)) | (1 << (MySqlParser.UUID - 974)) | (1 << (MySqlParser.UUID_SHORT - 974)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 974)) | (1 << (MySqlParser.VERSION - 974)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1 << (MySqlParser.WEEKDAY - 974)) | (1 << (MySqlParser.WEEKOFYEAR - 974)) | (1 << (MySqlParser.WEIGHT_STRING - 974)) | (1 << (MySqlParser.WITHIN - 974)) | (1 << (MySqlParser.YEARWEEK - 974)) | (1 << (MySqlParser.Y_FUNCTION - 974)) | (1 << (MySqlParser.X_FUNCTION - 974)))) !== 0) || ((((_la - 1034)) & ~0x1f) == 0 && ((1 << (_la - 1034)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (MySqlParser.STRING_LITERAL - 1034)) | (1 << (MySqlParser.ID - 1034)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1034)))) !== 0)) {
	                this.state = 1585;
	                this.uid();
	            }

	            this.state = 1589;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.USING) {
	                this.state = 1588;
	                this.indexType();
	            }

	            this.state = 1591;
	            this.indexColumnNames();
	            this.state = 1595;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.USING || _la===MySqlParser.WITH || _la===MySqlParser.COMMENT || _la===MySqlParser.INVISIBLE || _la===MySqlParser.KEY_BLOCK_SIZE || _la===MySqlParser.VISIBLE) {
	                this.state = 1592;
	                this.indexOption();
	                this.state = 1597;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case MySqlParser.FULLTEXT:
	        case MySqlParser.SPATIAL:
	            localctx = new SpecialIndexDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1598;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.FULLTEXT || _la===MySqlParser.SPATIAL)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1600;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.INDEX || _la===MySqlParser.KEY) {
	                this.state = 1599;
	                localctx.indexFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.INDEX || _la===MySqlParser.KEY)) {
	                    localctx.indexFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 1603;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySqlParser.CURRENT - 32)) | (1 << (MySqlParser.DATABASE - 32)) | (1 << (MySqlParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySqlParser.LEFT || _la===MySqlParser.NUMBER || _la===MySqlParser.RIGHT || _la===MySqlParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.TIMESTAMP - 199)) | (1 << (MySqlParser.DATETIME - 199)) | (1 << (MySqlParser.YEAR - 199)) | (1 << (MySqlParser.TEXT - 199)) | (1 << (MySqlParser.ENUM - 199)) | (1 << (MySqlParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.JSON_VALID - 233)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySqlParser.AVG - 233)) | (1 << (MySqlParser.BIT_AND - 233)) | (1 << (MySqlParser.BIT_OR - 233)) | (1 << (MySqlParser.BIT_XOR - 233)) | (1 << (MySqlParser.COUNT - 233)) | (1 << (MySqlParser.GROUP_CONCAT - 233)) | (1 << (MySqlParser.MAX - 233)) | (1 << (MySqlParser.MIN - 233)) | (1 << (MySqlParser.STD - 233)) | (1 << (MySqlParser.STDDEV - 233)) | (1 << (MySqlParser.STDDEV_POP - 233)) | (1 << (MySqlParser.STDDEV_SAMP - 233)) | (1 << (MySqlParser.SUM - 233)) | (1 << (MySqlParser.VAR_POP - 233)) | (1 << (MySqlParser.VAR_SAMP - 233)) | (1 << (MySqlParser.VARIANCE - 233)) | (1 << (MySqlParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySqlParser.ACCOUNT - 270)) | (1 << (MySqlParser.ACTION - 270)) | (1 << (MySqlParser.AFTER - 270)) | (1 << (MySqlParser.AGGREGATE - 270)) | (1 << (MySqlParser.ALGORITHM - 270)) | (1 << (MySqlParser.ANY - 270)) | (1 << (MySqlParser.AT - 270)) | (1 << (MySqlParser.AUTHORS - 270)) | (1 << (MySqlParser.AUTOCOMMIT - 270)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySqlParser.AUTO_INCREMENT - 270)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 270)) | (1 << (MySqlParser.BEGIN - 270)) | (1 << (MySqlParser.BINLOG - 270)) | (1 << (MySqlParser.BIT - 270)) | (1 << (MySqlParser.BLOCK - 270)) | (1 << (MySqlParser.BOOL - 270)) | (1 << (MySqlParser.BOOLEAN - 270)) | (1 << (MySqlParser.BTREE - 270)) | (1 << (MySqlParser.CACHE - 270)) | (1 << (MySqlParser.CASCADED - 270)) | (1 << (MySqlParser.CHAIN - 270)) | (1 << (MySqlParser.CHANGED - 270)) | (1 << (MySqlParser.CHANNEL - 270)) | (1 << (MySqlParser.CHECKSUM - 270)) | (1 << (MySqlParser.PAGE_CHECKSUM - 270)) | (1 << (MySqlParser.CIPHER - 270)) | (1 << (MySqlParser.CLASS_ORIGIN - 270)) | (1 << (MySqlParser.CLIENT - 270)) | (1 << (MySqlParser.CLOSE - 270)) | (1 << (MySqlParser.COALESCE - 270)) | (1 << (MySqlParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySqlParser.COLUMNS - 302)) | (1 << (MySqlParser.COLUMN_FORMAT - 302)) | (1 << (MySqlParser.COLUMN_NAME - 302)) | (1 << (MySqlParser.COMMENT - 302)) | (1 << (MySqlParser.COMMIT - 302)) | (1 << (MySqlParser.COMPACT - 302)) | (1 << (MySqlParser.COMPLETION - 302)) | (1 << (MySqlParser.COMPRESSED - 302)) | (1 << (MySqlParser.COMPRESSION - 302)) | (1 << (MySqlParser.CONCURRENT - 302)) | (1 << (MySqlParser.CONNECTION - 302)) | (1 << (MySqlParser.CONSISTENT - 302)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySqlParser.CONSTRAINT_NAME - 302)) | (1 << (MySqlParser.CONTAINS - 302)) | (1 << (MySqlParser.CONTEXT - 302)) | (1 << (MySqlParser.CONTRIBUTORS - 302)) | (1 << (MySqlParser.COPY - 302)) | (1 << (MySqlParser.CPU - 302)) | (1 << (MySqlParser.CURSOR_NAME - 302)) | (1 << (MySqlParser.DATA - 302)) | (1 << (MySqlParser.DATAFILE - 302)) | (1 << (MySqlParser.DEALLOCATE - 302)) | (1 << (MySqlParser.DEFAULT_AUTH - 302)) | (1 << (MySqlParser.DEFINER - 302)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 302)) | (1 << (MySqlParser.DES_KEY_FILE - 302)) | (1 << (MySqlParser.DIRECTORY - 302)) | (1 << (MySqlParser.DISABLE - 302)) | (1 << (MySqlParser.DISCARD - 302)) | (1 << (MySqlParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySqlParser.DO - 334)) | (1 << (MySqlParser.DUMPFILE - 334)) | (1 << (MySqlParser.DUPLICATE - 334)) | (1 << (MySqlParser.DYNAMIC - 334)) | (1 << (MySqlParser.ENABLE - 334)) | (1 << (MySqlParser.ENCRYPTION - 334)) | (1 << (MySqlParser.END - 334)) | (1 << (MySqlParser.ENDS - 334)) | (1 << (MySqlParser.ENGINE - 334)) | (1 << (MySqlParser.ENGINES - 334)) | (1 << (MySqlParser.ERROR - 334)) | (1 << (MySqlParser.ERRORS - 334)) | (1 << (MySqlParser.ESCAPE - 334)) | (1 << (MySqlParser.EVEN - 334)) | (1 << (MySqlParser.EVENT - 334)) | (1 << (MySqlParser.EVENTS - 334)) | (1 << (MySqlParser.EVERY - 334)) | (1 << (MySqlParser.EXCHANGE - 334)) | (1 << (MySqlParser.EXCLUSIVE - 334)) | (1 << (MySqlParser.EXPIRE - 334)) | (1 << (MySqlParser.EXPORT - 334)) | (1 << (MySqlParser.EXTENDED - 334)) | (1 << (MySqlParser.EXTENT_SIZE - 334)) | (1 << (MySqlParser.FAST - 334)) | (1 << (MySqlParser.FAULTS - 334)) | (1 << (MySqlParser.FIELDS - 334)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySqlParser.FILTER - 334)) | (1 << (MySqlParser.FIRST - 334)) | (1 << (MySqlParser.FIXED - 334)) | (1 << (MySqlParser.FLUSH - 334)) | (1 << (MySqlParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySqlParser.FOUND - 366)) | (1 << (MySqlParser.FULL - 366)) | (1 << (MySqlParser.FUNCTION - 366)) | (1 << (MySqlParser.GENERAL - 366)) | (1 << (MySqlParser.GLOBAL - 366)) | (1 << (MySqlParser.GRANTS - 366)) | (1 << (MySqlParser.GROUP_REPLICATION - 366)) | (1 << (MySqlParser.HANDLER - 366)) | (1 << (MySqlParser.HASH - 366)) | (1 << (MySqlParser.HELP - 366)) | (1 << (MySqlParser.HOST - 366)) | (1 << (MySqlParser.HOSTS - 366)) | (1 << (MySqlParser.IDENTIFIED - 366)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySqlParser.IMPORT - 366)) | (1 << (MySqlParser.INDEXES - 366)) | (1 << (MySqlParser.INITIAL_SIZE - 366)) | (1 << (MySqlParser.INPLACE - 366)) | (1 << (MySqlParser.INSERT_METHOD - 366)) | (1 << (MySqlParser.INSTALL - 366)) | (1 << (MySqlParser.INSTANCE - 366)) | (1 << (MySqlParser.INVISIBLE - 366)) | (1 << (MySqlParser.INVOKER - 366)) | (1 << (MySqlParser.IO - 366)) | (1 << (MySqlParser.IO_THREAD - 366)) | (1 << (MySqlParser.IPC - 366)) | (1 << (MySqlParser.ISOLATION - 366)) | (1 << (MySqlParser.ISSUER - 366)) | (1 << (MySqlParser.JSON - 366)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySqlParser.LANGUAGE - 366)) | (1 << (MySqlParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.LEAVES - 398)) | (1 << (MySqlParser.LESS - 398)) | (1 << (MySqlParser.LEVEL - 398)) | (1 << (MySqlParser.LIST - 398)) | (1 << (MySqlParser.LOCAL - 398)) | (1 << (MySqlParser.LOGFILE - 398)) | (1 << (MySqlParser.LOGS - 398)) | (1 << (MySqlParser.MASTER - 398)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySqlParser.MASTER_DELAY - 398)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySqlParser.MASTER_HOST - 398)) | (1 << (MySqlParser.MASTER_LOG_FILE - 398)) | (1 << (MySqlParser.MASTER_LOG_POS - 398)) | (1 << (MySqlParser.MASTER_PASSWORD - 398)) | (1 << (MySqlParser.MASTER_PORT - 398)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySqlParser.MASTER_SSL - 398)) | (1 << (MySqlParser.MASTER_SSL_CA - 398)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_CERT - 398)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySqlParser.MASTER_SSL_CRL - 398)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_KEY - 398)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 398)) | (1 << (MySqlParser.MASTER_USER - 398)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySqlParser.MEDIUM - 430)) | (1 << (MySqlParser.MEMBER - 430)) | (1 << (MySqlParser.MERGE - 430)) | (1 << (MySqlParser.MESSAGE_TEXT - 430)) | (1 << (MySqlParser.MID - 430)) | (1 << (MySqlParser.MIGRATE - 430)) | (1 << (MySqlParser.MIN_ROWS - 430)) | (1 << (MySqlParser.MODE - 430)) | (1 << (MySqlParser.MODIFY - 430)) | (1 << (MySqlParser.MUTEX - 430)) | (1 << (MySqlParser.MYSQL - 430)) | (1 << (MySqlParser.MYSQL_ERRNO - 430)) | (1 << (MySqlParser.NAME - 430)) | (1 << (MySqlParser.NAMES - 430)) | (1 << (MySqlParser.NCHAR - 430)) | (1 << (MySqlParser.NEVER - 430)) | (1 << (MySqlParser.NEXT - 430)) | (1 << (MySqlParser.NO - 430)) | (1 << (MySqlParser.NODEGROUP - 430)) | (1 << (MySqlParser.NONE - 430)) | (1 << (MySqlParser.OFFLINE - 430)) | (1 << (MySqlParser.OFFSET - 430)) | (1 << (MySqlParser.OF - 430)) | (1 << (MySqlParser.OJ - 430)) | (1 << (MySqlParser.OLD_PASSWORD - 430)) | (1 << (MySqlParser.ONE - 430)) | (1 << (MySqlParser.ONLINE - 430)) | (1 << (MySqlParser.ONLY - 430)) | (1 << (MySqlParser.OPEN - 430)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySqlParser.OPTIONS - 462)) | (1 << (MySqlParser.OWNER - 462)) | (1 << (MySqlParser.PACK_KEYS - 462)) | (1 << (MySqlParser.PAGE - 462)) | (1 << (MySqlParser.PARSER - 462)) | (1 << (MySqlParser.PARTIAL - 462)) | (1 << (MySqlParser.PARTITIONING - 462)) | (1 << (MySqlParser.PARTITIONS - 462)) | (1 << (MySqlParser.PASSWORD - 462)) | (1 << (MySqlParser.PHASE - 462)) | (1 << (MySqlParser.PLUGIN - 462)) | (1 << (MySqlParser.PLUGIN_DIR - 462)) | (1 << (MySqlParser.PLUGINS - 462)) | (1 << (MySqlParser.PORT - 462)) | (1 << (MySqlParser.PRECEDES - 462)) | (1 << (MySqlParser.PREPARE - 462)) | (1 << (MySqlParser.PRESERVE - 462)) | (1 << (MySqlParser.PREV - 462)) | (1 << (MySqlParser.PROCESSLIST - 462)) | (1 << (MySqlParser.PROFILE - 462)) | (1 << (MySqlParser.PROFILES - 462)) | (1 << (MySqlParser.PROXY - 462)) | (1 << (MySqlParser.QUERY - 462)) | (1 << (MySqlParser.QUICK - 462)) | (1 << (MySqlParser.REBUILD - 462)) | (1 << (MySqlParser.RECOVER - 462)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySqlParser.REDUNDANT - 462)) | (1 << (MySqlParser.RELAY - 462)) | (1 << (MySqlParser.RELAY_LOG_FILE - 462)) | (1 << (MySqlParser.RELAY_LOG_POS - 462)) | (1 << (MySqlParser.RELAYLOG - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySqlParser.REMOVE - 494)) | (1 << (MySqlParser.REORGANIZE - 494)) | (1 << (MySqlParser.REPAIR - 494)) | (1 << (MySqlParser.REPLICATE_DO_DB - 494)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATION - 494)) | (1 << (MySqlParser.RESET - 494)) | (1 << (MySqlParser.RESUME - 494)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 494)) | (1 << (MySqlParser.RETURNS - 494)) | (1 << (MySqlParser.ROLE - 494)) | (1 << (MySqlParser.ROLLBACK - 494)) | (1 << (MySqlParser.ROLLUP - 494)) | (1 << (MySqlParser.ROTATE - 494)) | (1 << (MySqlParser.ROW - 494)) | (1 << (MySqlParser.ROWS - 494)) | (1 << (MySqlParser.ROW_FORMAT - 494)) | (1 << (MySqlParser.SAVEPOINT - 494)) | (1 << (MySqlParser.SCHEDULE - 494)) | (1 << (MySqlParser.SECURITY - 494)) | (1 << (MySqlParser.SERVER - 494)) | (1 << (MySqlParser.SESSION - 494)) | (1 << (MySqlParser.SHARE - 494)) | (1 << (MySqlParser.SHARED - 494)) | (1 << (MySqlParser.SIGNED - 494)) | (1 << (MySqlParser.SIMPLE - 494)) | (1 << (MySqlParser.SLAVE - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySqlParser.SLOW - 526)) | (1 << (MySqlParser.SNAPSHOT - 526)) | (1 << (MySqlParser.SOCKET - 526)) | (1 << (MySqlParser.SOME - 526)) | (1 << (MySqlParser.SONAME - 526)) | (1 << (MySqlParser.SOUNDS - 526)) | (1 << (MySqlParser.SOURCE - 526)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySqlParser.SQL_CACHE - 526)) | (1 << (MySqlParser.SQL_NO_CACHE - 526)) | (1 << (MySqlParser.SQL_THREAD - 526)) | (1 << (MySqlParser.START - 526)) | (1 << (MySqlParser.STARTS - 526)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 526)) | (1 << (MySqlParser.STATS_PERSISTENT - 526)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySqlParser.STATUS - 526)) | (1 << (MySqlParser.STOP - 526)) | (1 << (MySqlParser.STORAGE - 526)) | (1 << (MySqlParser.STRING - 526)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySqlParser.SUBJECT - 526)) | (1 << (MySqlParser.SUBPARTITION - 526)) | (1 << (MySqlParser.SUBPARTITIONS - 526)) | (1 << (MySqlParser.SUSPEND - 526)) | (1 << (MySqlParser.SWAPS - 526)) | (1 << (MySqlParser.SWITCHES - 526)) | (1 << (MySqlParser.TABLE_NAME - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySqlParser.TABLESPACE - 558)) | (1 << (MySqlParser.TEMPORARY - 558)) | (1 << (MySqlParser.TEMPTABLE - 558)) | (1 << (MySqlParser.THAN - 558)) | (1 << (MySqlParser.TRADITIONAL - 558)) | (1 << (MySqlParser.TRANSACTION - 558)) | (1 << (MySqlParser.TRANSACTIONAL - 558)) | (1 << (MySqlParser.TRIGGERS - 558)) | (1 << (MySqlParser.TRUNCATE - 558)) | (1 << (MySqlParser.UNDEFINED - 558)) | (1 << (MySqlParser.UNDOFILE - 558)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySqlParser.UNINSTALL - 558)) | (1 << (MySqlParser.UNKNOWN - 558)) | (1 << (MySqlParser.UNTIL - 558)) | (1 << (MySqlParser.UPGRADE - 558)) | (1 << (MySqlParser.USER - 558)) | (1 << (MySqlParser.USE_FRM - 558)) | (1 << (MySqlParser.USER_RESOURCES - 558)) | (1 << (MySqlParser.VALIDATION - 558)) | (1 << (MySqlParser.VALUE - 558)) | (1 << (MySqlParser.VARIABLES - 558)) | (1 << (MySqlParser.VIEW - 558)) | (1 << (MySqlParser.VISIBLE - 558)) | (1 << (MySqlParser.WAIT - 558)) | (1 << (MySqlParser.WARNINGS - 558)) | (1 << (MySqlParser.WITHOUT - 558)) | (1 << (MySqlParser.WORK - 558)) | (1 << (MySqlParser.WRAPPER - 558)) | (1 << (MySqlParser.X509 - 558)) | (1 << (MySqlParser.XA - 558)))) !== 0) || ((((_la - 590)) & ~0x1f) == 0 && ((1 << (_la - 590)) & ((1 << (MySqlParser.XML - 590)) | (1 << (MySqlParser.INTERNAL - 590)) | (1 << (MySqlParser.QUARTER - 590)) | (1 << (MySqlParser.MONTH - 590)) | (1 << (MySqlParser.DAY - 590)) | (1 << (MySqlParser.HOUR - 590)) | (1 << (MySqlParser.MINUTE - 590)) | (1 << (MySqlParser.WEEK - 590)) | (1 << (MySqlParser.SECOND - 590)) | (1 << (MySqlParser.MICROSECOND - 590)) | (1 << (MySqlParser.TABLES - 590)) | (1 << (MySqlParser.ROUTINE - 590)) | (1 << (MySqlParser.EXECUTE - 590)) | (1 << (MySqlParser.FILE - 590)) | (1 << (MySqlParser.PROCESS - 590)) | (1 << (MySqlParser.RELOAD - 590)) | (1 << (MySqlParser.SHUTDOWN - 590)) | (1 << (MySqlParser.SUPER - 590)) | (1 << (MySqlParser.PRIVILEGES - 590)) | (1 << (MySqlParser.AUDIT_ADMIN - 590)) | (1 << (MySqlParser.BACKUP_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 590)) | (1 << (MySqlParser.CLONE_ADMIN - 590)) | (1 << (MySqlParser.CONNECTION_ADMIN - 590)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 590)) | (1 << (MySqlParser.FIREWALL_ADMIN - 590)))) !== 0) || ((((_la - 622)) & ~0x1f) == 0 && ((1 << (_la - 622)) & ((1 << (MySqlParser.FIREWALL_USER - 622)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 622)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 622)) | (1 << (MySqlParser.NDB_STORED_USER - 622)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.REPLICATION_APPLIER - 622)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 622)) | (1 << (MySqlParser.ROLE_ADMIN - 622)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.SET_USER_ID - 622)) | (1 << (MySqlParser.SHOW_ROUTINE - 622)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 622)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 622)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 622)) | (1 << (MySqlParser.ARMSCII8 - 622)) | (1 << (MySqlParser.ASCII - 622)) | (1 << (MySqlParser.BIG5 - 622)) | (1 << (MySqlParser.CP1250 - 622)) | (1 << (MySqlParser.CP1251 - 622)) | (1 << (MySqlParser.CP1256 - 622)) | (1 << (MySqlParser.CP1257 - 622)) | (1 << (MySqlParser.CP850 - 622)) | (1 << (MySqlParser.CP852 - 622)) | (1 << (MySqlParser.CP866 - 622)) | (1 << (MySqlParser.CP932 - 622)) | (1 << (MySqlParser.DEC8 - 622)) | (1 << (MySqlParser.EUCJPMS - 622)) | (1 << (MySqlParser.EUCKR - 622)) | (1 << (MySqlParser.GB2312 - 622)))) !== 0) || ((((_la - 654)) & ~0x1f) == 0 && ((1 << (_la - 654)) & ((1 << (MySqlParser.GBK - 654)) | (1 << (MySqlParser.GEOSTD8 - 654)) | (1 << (MySqlParser.GREEK - 654)) | (1 << (MySqlParser.HEBREW - 654)) | (1 << (MySqlParser.HP8 - 654)) | (1 << (MySqlParser.KEYBCS2 - 654)) | (1 << (MySqlParser.KOI8R - 654)) | (1 << (MySqlParser.KOI8U - 654)) | (1 << (MySqlParser.LATIN1 - 654)) | (1 << (MySqlParser.LATIN2 - 654)) | (1 << (MySqlParser.LATIN5 - 654)) | (1 << (MySqlParser.LATIN7 - 654)) | (1 << (MySqlParser.MACCE - 654)) | (1 << (MySqlParser.MACROMAN - 654)) | (1 << (MySqlParser.SJIS - 654)) | (1 << (MySqlParser.SWE7 - 654)) | (1 << (MySqlParser.TIS620 - 654)) | (1 << (MySqlParser.UCS2 - 654)) | (1 << (MySqlParser.UJIS - 654)) | (1 << (MySqlParser.UTF16 - 654)) | (1 << (MySqlParser.UTF16LE - 654)) | (1 << (MySqlParser.UTF32 - 654)) | (1 << (MySqlParser.UTF8 - 654)) | (1 << (MySqlParser.UTF8MB3 - 654)) | (1 << (MySqlParser.UTF8MB4 - 654)) | (1 << (MySqlParser.ARCHIVE - 654)) | (1 << (MySqlParser.BLACKHOLE - 654)) | (1 << (MySqlParser.CSV - 654)) | (1 << (MySqlParser.FEDERATED - 654)) | (1 << (MySqlParser.INNODB - 654)) | (1 << (MySqlParser.MEMORY - 654)) | (1 << (MySqlParser.MRG_MYISAM - 654)))) !== 0) || ((((_la - 686)) & ~0x1f) == 0 && ((1 << (_la - 686)) & ((1 << (MySqlParser.MYISAM - 686)) | (1 << (MySqlParser.NDB - 686)) | (1 << (MySqlParser.NDBCLUSTER - 686)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 686)) | (1 << (MySqlParser.TOKUDB - 686)) | (1 << (MySqlParser.REPEATABLE - 686)) | (1 << (MySqlParser.COMMITTED - 686)) | (1 << (MySqlParser.UNCOMMITTED - 686)) | (1 << (MySqlParser.SERIALIZABLE - 686)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 686)) | (1 << (MySqlParser.LINESTRING - 686)) | (1 << (MySqlParser.MULTILINESTRING - 686)) | (1 << (MySqlParser.MULTIPOINT - 686)) | (1 << (MySqlParser.MULTIPOLYGON - 686)) | (1 << (MySqlParser.POINT - 686)) | (1 << (MySqlParser.POLYGON - 686)) | (1 << (MySqlParser.ABS - 686)) | (1 << (MySqlParser.ACOS - 686)) | (1 << (MySqlParser.ADDDATE - 686)) | (1 << (MySqlParser.ADDTIME - 686)) | (1 << (MySqlParser.AES_DECRYPT - 686)) | (1 << (MySqlParser.AES_ENCRYPT - 686)) | (1 << (MySqlParser.AREA - 686)) | (1 << (MySqlParser.ASBINARY - 686)) | (1 << (MySqlParser.ASIN - 686)) | (1 << (MySqlParser.ASTEXT - 686)) | (1 << (MySqlParser.ASWKB - 686)) | (1 << (MySqlParser.ASWKT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 686)))) !== 0) || ((((_la - 718)) & ~0x1f) == 0 && ((1 << (_la - 718)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 718)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 718)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 718)) | (1 << (MySqlParser.ATAN - 718)) | (1 << (MySqlParser.ATAN2 - 718)) | (1 << (MySqlParser.BENCHMARK - 718)) | (1 << (MySqlParser.BIN - 718)) | (1 << (MySqlParser.BIT_COUNT - 718)) | (1 << (MySqlParser.BIT_LENGTH - 718)) | (1 << (MySqlParser.BUFFER - 718)) | (1 << (MySqlParser.CATALOG_NAME - 718)) | (1 << (MySqlParser.CEIL - 718)) | (1 << (MySqlParser.CEILING - 718)) | (1 << (MySqlParser.CENTROID - 718)) | (1 << (MySqlParser.CHARACTER_LENGTH - 718)) | (1 << (MySqlParser.CHARSET - 718)) | (1 << (MySqlParser.CHAR_LENGTH - 718)) | (1 << (MySqlParser.COERCIBILITY - 718)) | (1 << (MySqlParser.COLLATION - 718)) | (1 << (MySqlParser.COMPRESS - 718)) | (1 << (MySqlParser.CONCAT - 718)) | (1 << (MySqlParser.CONCAT_WS - 718)) | (1 << (MySqlParser.CONNECTION_ID - 718)) | (1 << (MySqlParser.CONV - 718)) | (1 << (MySqlParser.CONVERT_TZ - 718)) | (1 << (MySqlParser.COS - 718)) | (1 << (MySqlParser.COT - 718)) | (1 << (MySqlParser.CRC32 - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 718)) | (1 << (MySqlParser.CREATE_DIGEST - 718)))) !== 0) || ((((_la - 750)) & ~0x1f) == 0 && ((1 << (_la - 750)) & ((1 << (MySqlParser.CROSSES - 750)) | (1 << (MySqlParser.DATEDIFF - 750)) | (1 << (MySqlParser.DATE_FORMAT - 750)) | (1 << (MySqlParser.DAYNAME - 750)) | (1 << (MySqlParser.DAYOFMONTH - 750)) | (1 << (MySqlParser.DAYOFWEEK - 750)) | (1 << (MySqlParser.DAYOFYEAR - 750)) | (1 << (MySqlParser.DECODE - 750)) | (1 << (MySqlParser.DEGREES - 750)) | (1 << (MySqlParser.DES_DECRYPT - 750)) | (1 << (MySqlParser.DES_ENCRYPT - 750)) | (1 << (MySqlParser.DIMENSION - 750)) | (1 << (MySqlParser.DISJOINT - 750)) | (1 << (MySqlParser.ELT - 750)) | (1 << (MySqlParser.ENCODE - 750)) | (1 << (MySqlParser.ENCRYPT - 750)) | (1 << (MySqlParser.ENDPOINT - 750)) | (1 << (MySqlParser.ENVELOPE - 750)) | (1 << (MySqlParser.EQUALS - 750)) | (1 << (MySqlParser.EXP - 750)) | (1 << (MySqlParser.EXPORT_SET - 750)) | (1 << (MySqlParser.EXTERIORRING - 750)) | (1 << (MySqlParser.EXTRACTVALUE - 750)) | (1 << (MySqlParser.FIELD - 750)) | (1 << (MySqlParser.FIND_IN_SET - 750)) | (1 << (MySqlParser.FLOOR - 750)) | (1 << (MySqlParser.FORMAT - 750)) | (1 << (MySqlParser.FOUND_ROWS - 750)) | (1 << (MySqlParser.FROM_BASE64 - 750)) | (1 << (MySqlParser.FROM_DAYS - 750)) | (1 << (MySqlParser.FROM_UNIXTIME - 750)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 750)))) !== 0) || ((((_la - 782)) & ~0x1f) == 0 && ((1 << (_la - 782)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYN - 782)) | (1 << (MySqlParser.GEOMETRYTYPE - 782)) | (1 << (MySqlParser.GEOMFROMTEXT - 782)) | (1 << (MySqlParser.GEOMFROMWKB - 782)) | (1 << (MySqlParser.GET_FORMAT - 782)) | (1 << (MySqlParser.GET_LOCK - 782)) | (1 << (MySqlParser.GLENGTH - 782)) | (1 << (MySqlParser.GREATEST - 782)) | (1 << (MySqlParser.GTID_SUBSET - 782)) | (1 << (MySqlParser.GTID_SUBTRACT - 782)) | (1 << (MySqlParser.HEX - 782)) | (1 << (MySqlParser.IFNULL - 782)) | (1 << (MySqlParser.INET6_ATON - 782)) | (1 << (MySqlParser.INET6_NTOA - 782)) | (1 << (MySqlParser.INET_ATON - 782)) | (1 << (MySqlParser.INET_NTOA - 782)) | (1 << (MySqlParser.INSTR - 782)) | (1 << (MySqlParser.INTERIORRINGN - 782)) | (1 << (MySqlParser.INTERSECTS - 782)) | (1 << (MySqlParser.ISCLOSED - 782)) | (1 << (MySqlParser.ISEMPTY - 782)) | (1 << (MySqlParser.ISNULL - 782)) | (1 << (MySqlParser.ISSIMPLE - 782)) | (1 << (MySqlParser.IS_FREE_LOCK - 782)) | (1 << (MySqlParser.IS_IPV4 - 782)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 782)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 782)))) !== 0) || ((((_la - 814)) & ~0x1f) == 0 && ((1 << (_la - 814)) & ((1 << (MySqlParser.IS_IPV6 - 814)) | (1 << (MySqlParser.IS_USED_LOCK - 814)) | (1 << (MySqlParser.LAST_INSERT_ID - 814)) | (1 << (MySqlParser.LCASE - 814)) | (1 << (MySqlParser.LEAST - 814)) | (1 << (MySqlParser.LENGTH - 814)) | (1 << (MySqlParser.LINEFROMTEXT - 814)) | (1 << (MySqlParser.LINEFROMWKB - 814)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 814)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 814)) | (1 << (MySqlParser.LN - 814)) | (1 << (MySqlParser.LOAD_FILE - 814)) | (1 << (MySqlParser.LOCATE - 814)) | (1 << (MySqlParser.LOG - 814)) | (1 << (MySqlParser.LOG10 - 814)) | (1 << (MySqlParser.LOG2 - 814)) | (1 << (MySqlParser.LOWER - 814)) | (1 << (MySqlParser.LPAD - 814)) | (1 << (MySqlParser.LTRIM - 814)) | (1 << (MySqlParser.MAKEDATE - 814)) | (1 << (MySqlParser.MAKETIME - 814)) | (1 << (MySqlParser.MAKE_SET - 814)) | (1 << (MySqlParser.MASTER_POS_WAIT - 814)) | (1 << (MySqlParser.MBRCONTAINS - 814)) | (1 << (MySqlParser.MBRDISJOINT - 814)) | (1 << (MySqlParser.MBREQUAL - 814)) | (1 << (MySqlParser.MBRINTERSECTS - 814)) | (1 << (MySqlParser.MBROVERLAPS - 814)) | (1 << (MySqlParser.MBRTOUCHES - 814)) | (1 << (MySqlParser.MBRWITHIN - 814)) | (1 << (MySqlParser.MD5 - 814)) | (1 << (MySqlParser.MLINEFROMTEXT - 814)))) !== 0) || ((((_la - 846)) & ~0x1f) == 0 && ((1 << (_la - 846)) & ((1 << (MySqlParser.MLINEFROMWKB - 846)) | (1 << (MySqlParser.MONTHNAME - 846)) | (1 << (MySqlParser.MPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MPOINTFROMWKB - 846)) | (1 << (MySqlParser.MPOLYFROMTEXT - 846)) | (1 << (MySqlParser.MPOLYFROMWKB - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 846)) | (1 << (MySqlParser.NAME_CONST - 846)) | (1 << (MySqlParser.NULLIF - 846)) | (1 << (MySqlParser.NUMGEOMETRIES - 846)) | (1 << (MySqlParser.NUMINTERIORRINGS - 846)) | (1 << (MySqlParser.NUMPOINTS - 846)) | (1 << (MySqlParser.OCT - 846)) | (1 << (MySqlParser.OCTET_LENGTH - 846)) | (1 << (MySqlParser.ORD - 846)) | (1 << (MySqlParser.OVERLAPS - 846)) | (1 << (MySqlParser.PERIOD_ADD - 846)) | (1 << (MySqlParser.PERIOD_DIFF - 846)) | (1 << (MySqlParser.PI - 846)) | (1 << (MySqlParser.POINTFROMTEXT - 846)) | (1 << (MySqlParser.POINTFROMWKB - 846)) | (1 << (MySqlParser.POINTN - 846)) | (1 << (MySqlParser.POLYFROMTEXT - 846)) | (1 << (MySqlParser.POLYFROMWKB - 846)) | (1 << (MySqlParser.POLYGONFROMTEXT - 846)) | (1 << (MySqlParser.POLYGONFROMWKB - 846)) | (1 << (MySqlParser.POW - 846)))) !== 0) || ((((_la - 878)) & ~0x1f) == 0 && ((1 << (_la - 878)) & ((1 << (MySqlParser.POWER - 878)) | (1 << (MySqlParser.QUOTE - 878)) | (1 << (MySqlParser.RADIANS - 878)) | (1 << (MySqlParser.RAND - 878)) | (1 << (MySqlParser.RANDOM_BYTES - 878)) | (1 << (MySqlParser.RELEASE_LOCK - 878)) | (1 << (MySqlParser.REVERSE - 878)) | (1 << (MySqlParser.ROUND - 878)) | (1 << (MySqlParser.ROW_COUNT - 878)) | (1 << (MySqlParser.RPAD - 878)) | (1 << (MySqlParser.RTRIM - 878)) | (1 << (MySqlParser.SEC_TO_TIME - 878)) | (1 << (MySqlParser.SESSION_USER - 878)) | (1 << (MySqlParser.SHA - 878)) | (1 << (MySqlParser.SHA1 - 878)) | (1 << (MySqlParser.SHA2 - 878)) | (1 << (MySqlParser.SCHEMA_NAME - 878)) | (1 << (MySqlParser.SIGN - 878)) | (1 << (MySqlParser.SIN - 878)) | (1 << (MySqlParser.SLEEP - 878)) | (1 << (MySqlParser.SOUNDEX - 878)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 878)) | (1 << (MySqlParser.SQRT - 878)) | (1 << (MySqlParser.SRID - 878)) | (1 << (MySqlParser.STARTPOINT - 878)) | (1 << (MySqlParser.STRCMP - 878)) | (1 << (MySqlParser.STR_TO_DATE - 878)) | (1 << (MySqlParser.ST_AREA - 878)) | (1 << (MySqlParser.ST_ASBINARY - 878)) | (1 << (MySqlParser.ST_ASTEXT - 878)) | (1 << (MySqlParser.ST_ASWKB - 878)) | (1 << (MySqlParser.ST_ASWKT - 878)))) !== 0) || ((((_la - 910)) & ~0x1f) == 0 && ((1 << (_la - 910)) & ((1 << (MySqlParser.ST_BUFFER - 910)) | (1 << (MySqlParser.ST_CENTROID - 910)) | (1 << (MySqlParser.ST_CONTAINS - 910)) | (1 << (MySqlParser.ST_CROSSES - 910)) | (1 << (MySqlParser.ST_DIFFERENCE - 910)) | (1 << (MySqlParser.ST_DIMENSION - 910)) | (1 << (MySqlParser.ST_DISJOINT - 910)) | (1 << (MySqlParser.ST_DISTANCE - 910)) | (1 << (MySqlParser.ST_ENDPOINT - 910)) | (1 << (MySqlParser.ST_ENVELOPE - 910)) | (1 << (MySqlParser.ST_EQUALS - 910)) | (1 << (MySqlParser.ST_EXTERIORRING - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYN - 910)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 910)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 910)) | (1 << (MySqlParser.ST_INTERIORRINGN - 910)) | (1 << (MySqlParser.ST_INTERSECTION - 910)) | (1 << (MySqlParser.ST_INTERSECTS - 910)) | (1 << (MySqlParser.ST_ISCLOSED - 910)) | (1 << (MySqlParser.ST_ISEMPTY - 910)) | (1 << (MySqlParser.ST_ISSIMPLE - 910)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 910)) | (1 << (MySqlParser.ST_LINEFROMWKB - 910)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 910)))) !== 0) || ((((_la - 942)) & ~0x1f) == 0 && ((1 << (_la - 942)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 942)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 942)) | (1 << (MySqlParser.ST_NUMPOINTS - 942)) | (1 << (MySqlParser.ST_OVERLAPS - 942)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 942)) | (1 << (MySqlParser.ST_POINTFROMWKB - 942)) | (1 << (MySqlParser.ST_POINTN - 942)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYFROMWKB - 942)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 942)) | (1 << (MySqlParser.ST_SRID - 942)) | (1 << (MySqlParser.ST_STARTPOINT - 942)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 942)) | (1 << (MySqlParser.ST_TOUCHES - 942)) | (1 << (MySqlParser.ST_UNION - 942)) | (1 << (MySqlParser.ST_WITHIN - 942)) | (1 << (MySqlParser.ST_X - 942)) | (1 << (MySqlParser.ST_Y - 942)) | (1 << (MySqlParser.SUBDATE - 942)) | (1 << (MySqlParser.SUBSTRING_INDEX - 942)) | (1 << (MySqlParser.SUBTIME - 942)) | (1 << (MySqlParser.SYSTEM_USER - 942)) | (1 << (MySqlParser.TAN - 942)) | (1 << (MySqlParser.TIMEDIFF - 942)) | (1 << (MySqlParser.TIMESTAMPADD - 942)) | (1 << (MySqlParser.TIMESTAMPDIFF - 942)) | (1 << (MySqlParser.TIME_FORMAT - 942)) | (1 << (MySqlParser.TIME_TO_SEC - 942)) | (1 << (MySqlParser.TOUCHES - 942)))) !== 0) || ((((_la - 974)) & ~0x1f) == 0 && ((1 << (_la - 974)) & ((1 << (MySqlParser.TO_BASE64 - 974)) | (1 << (MySqlParser.TO_DAYS - 974)) | (1 << (MySqlParser.TO_SECONDS - 974)) | (1 << (MySqlParser.UCASE - 974)) | (1 << (MySqlParser.UNCOMPRESS - 974)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 974)) | (1 << (MySqlParser.UNHEX - 974)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 974)) | (1 << (MySqlParser.UPDATEXML - 974)) | (1 << (MySqlParser.UPPER - 974)) | (1 << (MySqlParser.UUID - 974)) | (1 << (MySqlParser.UUID_SHORT - 974)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 974)) | (1 << (MySqlParser.VERSION - 974)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1 << (MySqlParser.WEEKDAY - 974)) | (1 << (MySqlParser.WEEKOFYEAR - 974)) | (1 << (MySqlParser.WEIGHT_STRING - 974)) | (1 << (MySqlParser.WITHIN - 974)) | (1 << (MySqlParser.YEARWEEK - 974)) | (1 << (MySqlParser.Y_FUNCTION - 974)) | (1 << (MySqlParser.X_FUNCTION - 974)))) !== 0) || ((((_la - 1034)) & ~0x1f) == 0 && ((1 << (_la - 1034)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (MySqlParser.STRING_LITERAL - 1034)) | (1 << (MySqlParser.ID - 1034)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1034)))) !== 0)) {
	                this.state = 1602;
	                this.uid();
	            }

	            this.state = 1605;
	            this.indexColumnNames();
	            this.state = 1609;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.USING || _la===MySqlParser.WITH || _la===MySqlParser.COMMENT || _la===MySqlParser.INVISIBLE || _la===MySqlParser.KEY_BLOCK_SIZE || _la===MySqlParser.VISIBLE) {
	                this.state = 1606;
	                this.indexOption();
	                this.state = 1611;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableOption() {
	    let localctx = new TableOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, MySqlParser.RULE_tableOption);
	    var _la = 0; // Token type
	    try {
	        this.state = 1758;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,199,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new TableOptionEngineContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1614;
	            this.match(MySqlParser.ENGINE);
	            this.state = 1616;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1615;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1618;
	            this.engineName();
	            break;

	        case 2:
	            localctx = new TableOptionAutoIncrementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1619;
	            this.match(MySqlParser.AUTO_INCREMENT);
	            this.state = 1621;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1620;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1623;
	            this.decimalLiteral();
	            break;

	        case 3:
	            localctx = new TableOptionAverageContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1624;
	            this.match(MySqlParser.AVG_ROW_LENGTH);
	            this.state = 1626;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1625;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1628;
	            this.decimalLiteral();
	            break;

	        case 4:
	            localctx = new TableOptionCharsetContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1630;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.DEFAULT) {
	                this.state = 1629;
	                this.match(MySqlParser.DEFAULT);
	            }

	            this.state = 1635;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.CHARACTER:
	                this.state = 1632;
	                this.match(MySqlParser.CHARACTER);
	                this.state = 1633;
	                this.match(MySqlParser.SET);
	                break;
	            case MySqlParser.CHARSET:
	                this.state = 1634;
	                this.match(MySqlParser.CHARSET);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1638;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1637;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1642;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.BINARY:
	            case MySqlParser.ARMSCII8:
	            case MySqlParser.ASCII:
	            case MySqlParser.BIG5:
	            case MySqlParser.CP1250:
	            case MySqlParser.CP1251:
	            case MySqlParser.CP1256:
	            case MySqlParser.CP1257:
	            case MySqlParser.CP850:
	            case MySqlParser.CP852:
	            case MySqlParser.CP866:
	            case MySqlParser.CP932:
	            case MySqlParser.DEC8:
	            case MySqlParser.EUCJPMS:
	            case MySqlParser.EUCKR:
	            case MySqlParser.GB2312:
	            case MySqlParser.GBK:
	            case MySqlParser.GEOSTD8:
	            case MySqlParser.GREEK:
	            case MySqlParser.HEBREW:
	            case MySqlParser.HP8:
	            case MySqlParser.KEYBCS2:
	            case MySqlParser.KOI8R:
	            case MySqlParser.KOI8U:
	            case MySqlParser.LATIN1:
	            case MySqlParser.LATIN2:
	            case MySqlParser.LATIN5:
	            case MySqlParser.LATIN7:
	            case MySqlParser.MACCE:
	            case MySqlParser.MACROMAN:
	            case MySqlParser.SJIS:
	            case MySqlParser.SWE7:
	            case MySqlParser.TIS620:
	            case MySqlParser.UCS2:
	            case MySqlParser.UJIS:
	            case MySqlParser.UTF16:
	            case MySqlParser.UTF16LE:
	            case MySqlParser.UTF32:
	            case MySqlParser.UTF8:
	            case MySqlParser.UTF8MB3:
	            case MySqlParser.UTF8MB4:
	            case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
	            case MySqlParser.STRING_LITERAL:
	                this.state = 1640;
	                this.charsetName();
	                break;
	            case MySqlParser.DEFAULT:
	                this.state = 1641;
	                this.match(MySqlParser.DEFAULT);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 5:
	            localctx = new TableOptionChecksumContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1644;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.CHECKSUM || _la===MySqlParser.PAGE_CHECKSUM)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1646;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1645;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1648;
	            localctx.boolValue = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.ZERO_DECIMAL || _la===MySqlParser.ONE_DECIMAL)) {
	                localctx.boolValue = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 6:
	            localctx = new TableOptionCollateContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1650;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.DEFAULT) {
	                this.state = 1649;
	                this.match(MySqlParser.DEFAULT);
	            }

	            this.state = 1652;
	            this.match(MySqlParser.COLLATE);
	            this.state = 1654;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1653;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1656;
	            this.collationName();
	            break;

	        case 7:
	            localctx = new TableOptionCommentContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1657;
	            this.match(MySqlParser.COMMENT);
	            this.state = 1659;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1658;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1661;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        case 8:
	            localctx = new TableOptionCompressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1662;
	            this.match(MySqlParser.COMPRESSION);
	            this.state = 1664;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1663;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1666;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.STRING_LITERAL || _la===MySqlParser.ID)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 9:
	            localctx = new TableOptionConnectionContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1667;
	            this.match(MySqlParser.CONNECTION);
	            this.state = 1669;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1668;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1671;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        case 10:
	            localctx = new TableOptionDataDirectoryContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1672;
	            this.match(MySqlParser.DATA);
	            this.state = 1673;
	            this.match(MySqlParser.DIRECTORY);
	            this.state = 1675;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1674;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1677;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        case 11:
	            localctx = new TableOptionDelayContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1678;
	            this.match(MySqlParser.DELAY_KEY_WRITE);
	            this.state = 1680;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1679;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1682;
	            localctx.boolValue = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.ZERO_DECIMAL || _la===MySqlParser.ONE_DECIMAL)) {
	                localctx.boolValue = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 12:
	            localctx = new TableOptionEncryptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1683;
	            this.match(MySqlParser.ENCRYPTION);
	            this.state = 1685;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1684;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1687;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        case 13:
	            localctx = new TableOptionIndexDirectoryContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1688;
	            this.match(MySqlParser.INDEX);
	            this.state = 1689;
	            this.match(MySqlParser.DIRECTORY);
	            this.state = 1691;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1690;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1693;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        case 14:
	            localctx = new TableOptionInsertMethodContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1694;
	            this.match(MySqlParser.INSERT_METHOD);
	            this.state = 1696;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1695;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1698;
	            localctx.insertMethod = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.FIRST || _la===MySqlParser.LAST || _la===MySqlParser.NO)) {
	                localctx.insertMethod = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 15:
	            localctx = new TableOptionKeyBlockSizeContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1699;
	            this.match(MySqlParser.KEY_BLOCK_SIZE);
	            this.state = 1701;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1700;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1703;
	            this.fileSizeLiteral();
	            break;

	        case 16:
	            localctx = new TableOptionMaxRowsContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1704;
	            this.match(MySqlParser.MAX_ROWS);
	            this.state = 1706;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1705;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1708;
	            this.decimalLiteral();
	            break;

	        case 17:
	            localctx = new TableOptionMinRowsContext(this, localctx);
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1709;
	            this.match(MySqlParser.MIN_ROWS);
	            this.state = 1711;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1710;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1713;
	            this.decimalLiteral();
	            break;

	        case 18:
	            localctx = new TableOptionPackKeysContext(this, localctx);
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1714;
	            this.match(MySqlParser.PACK_KEYS);
	            this.state = 1716;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1715;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1718;
	            localctx.extBoolValue = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DEFAULT || _la===MySqlParser.ZERO_DECIMAL || _la===MySqlParser.ONE_DECIMAL)) {
	                localctx.extBoolValue = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 19:
	            localctx = new TableOptionPasswordContext(this, localctx);
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1719;
	            this.match(MySqlParser.PASSWORD);
	            this.state = 1721;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1720;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1723;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        case 20:
	            localctx = new TableOptionRowFormatContext(this, localctx);
	            this.enterOuterAlt(localctx, 20);
	            this.state = 1724;
	            this.match(MySqlParser.ROW_FORMAT);
	            this.state = 1726;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1725;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1728;
	            localctx.rowFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DEFAULT || ((((_la - 307)) & ~0x1f) == 0 && ((1 << (_la - 307)) & ((1 << (MySqlParser.COMPACT - 307)) | (1 << (MySqlParser.COMPRESSED - 307)) | (1 << (MySqlParser.DYNAMIC - 307)))) !== 0) || _la===MySqlParser.FIXED || _la===MySqlParser.REDUNDANT)) {
	                localctx.rowFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 21:
	            localctx = new TableOptionRecalculationContext(this, localctx);
	            this.enterOuterAlt(localctx, 21);
	            this.state = 1729;
	            this.match(MySqlParser.STATS_AUTO_RECALC);
	            this.state = 1731;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1730;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1733;
	            localctx.extBoolValue = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DEFAULT || _la===MySqlParser.ZERO_DECIMAL || _la===MySqlParser.ONE_DECIMAL)) {
	                localctx.extBoolValue = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 22:
	            localctx = new TableOptionPersistentContext(this, localctx);
	            this.enterOuterAlt(localctx, 22);
	            this.state = 1734;
	            this.match(MySqlParser.STATS_PERSISTENT);
	            this.state = 1736;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1735;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1738;
	            localctx.extBoolValue = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DEFAULT || _la===MySqlParser.ZERO_DECIMAL || _la===MySqlParser.ONE_DECIMAL)) {
	                localctx.extBoolValue = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 23:
	            localctx = new TableOptionSamplePageContext(this, localctx);
	            this.enterOuterAlt(localctx, 23);
	            this.state = 1739;
	            this.match(MySqlParser.STATS_SAMPLE_PAGES);
	            this.state = 1741;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1740;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1743;
	            this.decimalLiteral();
	            break;

	        case 24:
	            localctx = new TableOptionTablespaceContext(this, localctx);
	            this.enterOuterAlt(localctx, 24);
	            this.state = 1744;
	            this.match(MySqlParser.TABLESPACE);
	            this.state = 1745;
	            this.uid();
	            this.state = 1747;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,197,this._ctx);
	            if(la_===1) {
	                this.state = 1746;
	                this.tablespaceStorage();

	            }
	            break;

	        case 25:
	            localctx = new TableOptionTablespaceContext(this, localctx);
	            this.enterOuterAlt(localctx, 25);
	            this.state = 1749;
	            this.tablespaceStorage();
	            break;

	        case 26:
	            localctx = new TableOptionUnionContext(this, localctx);
	            this.enterOuterAlt(localctx, 26);
	            this.state = 1750;
	            this.match(MySqlParser.UNION);
	            this.state = 1752;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 1751;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1754;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 1755;
	            this.tables();
	            this.state = 1756;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tablespaceStorage() {
	    let localctx = new TablespaceStorageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, MySqlParser.RULE_tablespaceStorage);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1760;
	        this.match(MySqlParser.STORAGE);
	        this.state = 1761;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.DEFAULT || _la===MySqlParser.DISK || _la===MySqlParser.MEMORY)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionDefinitions() {
	    let localctx = new PartitionDefinitionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, MySqlParser.RULE_partitionDefinitions);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1763;
	        this.match(MySqlParser.PARTITION);
	        this.state = 1764;
	        this.match(MySqlParser.BY);
	        this.state = 1765;
	        this.partitionFunctionDefinition();
	        this.state = 1768;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.PARTITIONS) {
	            this.state = 1766;
	            this.match(MySqlParser.PARTITIONS);
	            this.state = 1767;
	            localctx.count = this.decimalLiteral();
	        }

	        this.state = 1777;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.SUBPARTITION) {
	            this.state = 1770;
	            this.match(MySqlParser.SUBPARTITION);
	            this.state = 1771;
	            this.match(MySqlParser.BY);
	            this.state = 1772;
	            this.subpartitionFunctionDefinition();
	            this.state = 1775;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.SUBPARTITIONS) {
	                this.state = 1773;
	                this.match(MySqlParser.SUBPARTITIONS);
	                this.state = 1774;
	                localctx.subCount = this.decimalLiteral();
	            }

	        }

	        this.state = 1790;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,204,this._ctx);
	        if(la_===1) {
	            this.state = 1779;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 1780;
	            this.partitionDefinition();
	            this.state = 1785;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 1781;
	                this.match(MySqlParser.COMMA);
	                this.state = 1782;
	                this.partitionDefinition();
	                this.state = 1787;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1788;
	            this.match(MySqlParser.RR_BRACKET);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionFunctionDefinition() {
	    let localctx = new PartitionFunctionDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, MySqlParser.RULE_partitionFunctionDefinition);
	    var _la = 0; // Token type
	    try {
	        this.state = 1837;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,210,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PartitionFunctionHashContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1793;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.LINEAR) {
	                this.state = 1792;
	                this.match(MySqlParser.LINEAR);
	            }

	            this.state = 1795;
	            this.match(MySqlParser.HASH);
	            this.state = 1796;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 1797;
	            this.expression(0);
	            this.state = 1798;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 2:
	            localctx = new PartitionFunctionKeyContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1801;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.LINEAR) {
	                this.state = 1800;
	                this.match(MySqlParser.LINEAR);
	            }

	            this.state = 1803;
	            this.match(MySqlParser.KEY);
	            this.state = 1807;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.ALGORITHM) {
	                this.state = 1804;
	                this.match(MySqlParser.ALGORITHM);
	                this.state = 1805;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	                this.state = 1806;
	                localctx.algType = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.ONE_DECIMAL || _la===MySqlParser.TWO_DECIMAL)) {
	                    localctx.algType = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 1809;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 1810;
	            this.uidList();
	            this.state = 1811;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 3:
	            localctx = new PartitionFunctionRangeContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1813;
	            this.match(MySqlParser.RANGE);
	            this.state = 1823;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.LR_BRACKET:
	                this.state = 1814;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 1815;
	                this.expression(0);
	                this.state = 1816;
	                this.match(MySqlParser.RR_BRACKET);
	                break;
	            case MySqlParser.COLUMNS:
	                this.state = 1818;
	                this.match(MySqlParser.COLUMNS);
	                this.state = 1819;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 1820;
	                this.uidList();
	                this.state = 1821;
	                this.match(MySqlParser.RR_BRACKET);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 4:
	            localctx = new PartitionFunctionListContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1825;
	            this.match(MySqlParser.LIST);
	            this.state = 1835;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.LR_BRACKET:
	                this.state = 1826;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 1827;
	                this.expression(0);
	                this.state = 1828;
	                this.match(MySqlParser.RR_BRACKET);
	                break;
	            case MySqlParser.COLUMNS:
	                this.state = 1830;
	                this.match(MySqlParser.COLUMNS);
	                this.state = 1831;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 1832;
	                this.uidList();
	                this.state = 1833;
	                this.match(MySqlParser.RR_BRACKET);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subpartitionFunctionDefinition() {
	    let localctx = new SubpartitionFunctionDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, MySqlParser.RULE_subpartitionFunctionDefinition);
	    var _la = 0; // Token type
	    try {
	        this.state = 1860;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,214,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SubPartitionFunctionHashContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1840;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.LINEAR) {
	                this.state = 1839;
	                this.match(MySqlParser.LINEAR);
	            }

	            this.state = 1842;
	            this.match(MySqlParser.HASH);
	            this.state = 1843;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 1844;
	            this.expression(0);
	            this.state = 1845;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 2:
	            localctx = new SubPartitionFunctionKeyContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1848;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.LINEAR) {
	                this.state = 1847;
	                this.match(MySqlParser.LINEAR);
	            }

	            this.state = 1850;
	            this.match(MySqlParser.KEY);
	            this.state = 1854;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.ALGORITHM) {
	                this.state = 1851;
	                this.match(MySqlParser.ALGORITHM);
	                this.state = 1852;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	                this.state = 1853;
	                localctx.algType = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.ONE_DECIMAL || _la===MySqlParser.TWO_DECIMAL)) {
	                    localctx.algType = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 1856;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 1857;
	            this.uidList();
	            this.state = 1858;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionDefinition() {
	    let localctx = new PartitionDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, MySqlParser.RULE_partitionDefinition);
	    var _la = 0; // Token type
	    try {
	        this.state = 1993;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,233,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PartitionComparisionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1862;
	            this.match(MySqlParser.PARTITION);
	            this.state = 1863;
	            this.uid();
	            this.state = 1864;
	            this.match(MySqlParser.VALUES);
	            this.state = 1865;
	            this.match(MySqlParser.LESS);
	            this.state = 1866;
	            this.match(MySqlParser.THAN);
	            this.state = 1867;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 1868;
	            this.partitionDefinerAtom();
	            this.state = 1873;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 1869;
	                this.match(MySqlParser.COMMA);
	                this.state = 1870;
	                this.partitionDefinerAtom();
	                this.state = 1875;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1876;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 1880;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.INDEX || _la===MySqlParser.COMMENT || _la===MySqlParser.DATA || _la===MySqlParser.ENGINE || ((((_la - 428)) & ~0x1f) == 0 && ((1 << (_la - 428)) & ((1 << (MySqlParser.MAX_ROWS - 428)) | (1 << (MySqlParser.MIN_ROWS - 428)) | (1 << (MySqlParser.NODEGROUP - 428)))) !== 0) || _la===MySqlParser.STORAGE || _la===MySqlParser.TABLESPACE) {
	                this.state = 1877;
	                this.partitionOption();
	                this.state = 1882;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1891;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.SUBPARTITION) {
	                this.state = 1883;
	                this.subpartitionDefinition();
	                this.state = 1888;
	                this._errHandler.sync(this);
	                let _alt = this._interp.adaptivePredict(this._input,217,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 1884;
	                        this.match(MySqlParser.COMMA);
	                        this.state = 1885;
	                        this.subpartitionDefinition(); 
	                    }
	                    this.state = 1890;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,217,this._ctx);
	                }

	            }

	            break;

	        case 2:
	            localctx = new PartitionComparisionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1893;
	            this.match(MySqlParser.PARTITION);
	            this.state = 1894;
	            this.uid();
	            this.state = 1895;
	            this.match(MySqlParser.VALUES);
	            this.state = 1896;
	            this.match(MySqlParser.LESS);
	            this.state = 1897;
	            this.match(MySqlParser.THAN);
	            this.state = 1898;
	            this.partitionDefinerAtom();
	            this.state = 1902;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.INDEX || _la===MySqlParser.COMMENT || _la===MySqlParser.DATA || _la===MySqlParser.ENGINE || ((((_la - 428)) & ~0x1f) == 0 && ((1 << (_la - 428)) & ((1 << (MySqlParser.MAX_ROWS - 428)) | (1 << (MySqlParser.MIN_ROWS - 428)) | (1 << (MySqlParser.NODEGROUP - 428)))) !== 0) || _la===MySqlParser.STORAGE || _la===MySqlParser.TABLESPACE) {
	                this.state = 1899;
	                this.partitionOption();
	                this.state = 1904;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1913;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.SUBPARTITION) {
	                this.state = 1905;
	                this.subpartitionDefinition();
	                this.state = 1910;
	                this._errHandler.sync(this);
	                let _alt = this._interp.adaptivePredict(this._input,220,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 1906;
	                        this.match(MySqlParser.COMMA);
	                        this.state = 1907;
	                        this.subpartitionDefinition(); 
	                    }
	                    this.state = 1912;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,220,this._ctx);
	                }

	            }

	            break;

	        case 3:
	            localctx = new PartitionListAtomContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1915;
	            this.match(MySqlParser.PARTITION);
	            this.state = 1916;
	            this.uid();
	            this.state = 1917;
	            this.match(MySqlParser.VALUES);
	            this.state = 1918;
	            this.match(MySqlParser.IN);
	            this.state = 1919;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 1920;
	            this.partitionDefinerAtom();
	            this.state = 1925;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 1921;
	                this.match(MySqlParser.COMMA);
	                this.state = 1922;
	                this.partitionDefinerAtom();
	                this.state = 1927;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1928;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 1932;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.INDEX || _la===MySqlParser.COMMENT || _la===MySqlParser.DATA || _la===MySqlParser.ENGINE || ((((_la - 428)) & ~0x1f) == 0 && ((1 << (_la - 428)) & ((1 << (MySqlParser.MAX_ROWS - 428)) | (1 << (MySqlParser.MIN_ROWS - 428)) | (1 << (MySqlParser.NODEGROUP - 428)))) !== 0) || _la===MySqlParser.STORAGE || _la===MySqlParser.TABLESPACE) {
	                this.state = 1929;
	                this.partitionOption();
	                this.state = 1934;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1943;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.SUBPARTITION) {
	                this.state = 1935;
	                this.subpartitionDefinition();
	                this.state = 1940;
	                this._errHandler.sync(this);
	                let _alt = this._interp.adaptivePredict(this._input,224,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 1936;
	                        this.match(MySqlParser.COMMA);
	                        this.state = 1937;
	                        this.subpartitionDefinition(); 
	                    }
	                    this.state = 1942;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,224,this._ctx);
	                }

	            }

	            break;

	        case 4:
	            localctx = new PartitionListVectorContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1945;
	            this.match(MySqlParser.PARTITION);
	            this.state = 1946;
	            this.uid();
	            this.state = 1947;
	            this.match(MySqlParser.VALUES);
	            this.state = 1948;
	            this.match(MySqlParser.IN);
	            this.state = 1949;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 1950;
	            this.partitionDefinerVector();
	            this.state = 1955;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 1951;
	                this.match(MySqlParser.COMMA);
	                this.state = 1952;
	                this.partitionDefinerVector();
	                this.state = 1957;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1958;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 1962;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.INDEX || _la===MySqlParser.COMMENT || _la===MySqlParser.DATA || _la===MySqlParser.ENGINE || ((((_la - 428)) & ~0x1f) == 0 && ((1 << (_la - 428)) & ((1 << (MySqlParser.MAX_ROWS - 428)) | (1 << (MySqlParser.MIN_ROWS - 428)) | (1 << (MySqlParser.NODEGROUP - 428)))) !== 0) || _la===MySqlParser.STORAGE || _la===MySqlParser.TABLESPACE) {
	                this.state = 1959;
	                this.partitionOption();
	                this.state = 1964;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1973;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.SUBPARTITION) {
	                this.state = 1965;
	                this.subpartitionDefinition();
	                this.state = 1970;
	                this._errHandler.sync(this);
	                let _alt = this._interp.adaptivePredict(this._input,228,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 1966;
	                        this.match(MySqlParser.COMMA);
	                        this.state = 1967;
	                        this.subpartitionDefinition(); 
	                    }
	                    this.state = 1972;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,228,this._ctx);
	                }

	            }

	            break;

	        case 5:
	            localctx = new PartitionSimpleContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1975;
	            this.match(MySqlParser.PARTITION);
	            this.state = 1976;
	            this.uid();
	            this.state = 1980;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.INDEX || _la===MySqlParser.COMMENT || _la===MySqlParser.DATA || _la===MySqlParser.ENGINE || ((((_la - 428)) & ~0x1f) == 0 && ((1 << (_la - 428)) & ((1 << (MySqlParser.MAX_ROWS - 428)) | (1 << (MySqlParser.MIN_ROWS - 428)) | (1 << (MySqlParser.NODEGROUP - 428)))) !== 0) || _la===MySqlParser.STORAGE || _la===MySqlParser.TABLESPACE) {
	                this.state = 1977;
	                this.partitionOption();
	                this.state = 1982;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1991;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.SUBPARTITION) {
	                this.state = 1983;
	                this.subpartitionDefinition();
	                this.state = 1988;
	                this._errHandler.sync(this);
	                let _alt = this._interp.adaptivePredict(this._input,231,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 1984;
	                        this.match(MySqlParser.COMMA);
	                        this.state = 1985;
	                        this.subpartitionDefinition(); 
	                    }
	                    this.state = 1990;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,231,this._ctx);
	                }

	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionDefinerAtom() {
	    let localctx = new PartitionDefinerAtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, MySqlParser.RULE_partitionDefinerAtom);
	    try {
	        this.state = 1998;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,234,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1995;
	            this.constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1996;
	            this.expression(0);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1997;
	            this.match(MySqlParser.MAXVALUE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionDefinerVector() {
	    let localctx = new PartitionDefinerVectorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, MySqlParser.RULE_partitionDefinerVector);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2000;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 2001;
	        this.partitionDefinerAtom();
	        this.state = 2004; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2002;
	            this.match(MySqlParser.COMMA);
	            this.state = 2003;
	            this.partitionDefinerAtom();
	            this.state = 2006; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===MySqlParser.COMMA);
	        this.state = 2008;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subpartitionDefinition() {
	    let localctx = new SubpartitionDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, MySqlParser.RULE_subpartitionDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2010;
	        this.match(MySqlParser.SUBPARTITION);
	        this.state = 2011;
	        this.uid();
	        this.state = 2015;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.INDEX || _la===MySqlParser.COMMENT || _la===MySqlParser.DATA || _la===MySqlParser.ENGINE || ((((_la - 428)) & ~0x1f) == 0 && ((1 << (_la - 428)) & ((1 << (MySqlParser.MAX_ROWS - 428)) | (1 << (MySqlParser.MIN_ROWS - 428)) | (1 << (MySqlParser.NODEGROUP - 428)))) !== 0) || _la===MySqlParser.STORAGE || _la===MySqlParser.TABLESPACE) {
	            this.state = 2012;
	            this.partitionOption();
	            this.state = 2017;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionOption() {
	    let localctx = new PartitionOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, MySqlParser.RULE_partitionOption);
	    var _la = 0; // Token type
	    try {
	        this.state = 2063;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.ENGINE:
	        case MySqlParser.STORAGE:
	            localctx = new PartitionOptionEngineContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2019;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.STORAGE) {
	                this.state = 2018;
	                this.match(MySqlParser.STORAGE);
	            }

	            this.state = 2021;
	            this.match(MySqlParser.ENGINE);
	            this.state = 2023;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2022;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2025;
	            this.engineName();
	            break;
	        case MySqlParser.COMMENT:
	            localctx = new PartitionOptionCommentContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2026;
	            this.match(MySqlParser.COMMENT);
	            this.state = 2028;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2027;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2030;
	            localctx.comment = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.DATA:
	            localctx = new PartitionOptionDataDirectoryContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2031;
	            this.match(MySqlParser.DATA);
	            this.state = 2032;
	            this.match(MySqlParser.DIRECTORY);
	            this.state = 2034;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2033;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2036;
	            localctx.dataDirectory = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.INDEX:
	            localctx = new PartitionOptionIndexDirectoryContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2037;
	            this.match(MySqlParser.INDEX);
	            this.state = 2038;
	            this.match(MySqlParser.DIRECTORY);
	            this.state = 2040;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2039;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2042;
	            localctx.indexDirectory = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.MAX_ROWS:
	            localctx = new PartitionOptionMaxRowsContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2043;
	            this.match(MySqlParser.MAX_ROWS);
	            this.state = 2045;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2044;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2047;
	            localctx.maxRows = this.decimalLiteral();
	            break;
	        case MySqlParser.MIN_ROWS:
	            localctx = new PartitionOptionMinRowsContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2048;
	            this.match(MySqlParser.MIN_ROWS);
	            this.state = 2050;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2049;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2052;
	            localctx.minRows = this.decimalLiteral();
	            break;
	        case MySqlParser.TABLESPACE:
	            localctx = new PartitionOptionTablespaceContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2053;
	            this.match(MySqlParser.TABLESPACE);
	            this.state = 2055;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2054;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2057;
	            localctx.tablespace = this.uid();
	            break;
	        case MySqlParser.NODEGROUP:
	            localctx = new PartitionOptionNodeGroupContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2058;
	            this.match(MySqlParser.NODEGROUP);
	            this.state = 2060;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2059;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2062;
	            localctx.nodegroup = this.uid();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterDatabase() {
	    let localctx = new AlterDatabaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, MySqlParser.RULE_alterDatabase);
	    var _la = 0; // Token type
	    try {
	        this.state = 2083;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,249,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new AlterSimpleDatabaseContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2065;
	            this.match(MySqlParser.ALTER);
	            this.state = 2066;
	            localctx.dbFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DATABASE || _la===MySqlParser.SCHEMA)) {
	                localctx.dbFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2068;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,247,this._ctx);
	            if(la_===1) {
	                this.state = 2067;
	                this.uid();

	            }
	            this.state = 2071; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 2070;
	                this.createDatabaseOption();
	                this.state = 2073; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(((((_la - 22)) & ~0x1f) == 0 && ((1 << (_la - 22)) & ((1 << (MySqlParser.CHARACTER - 22)) | (1 << (MySqlParser.COLLATE - 22)) | (1 << (MySqlParser.DEFAULT - 22)))) !== 0) || _la===MySqlParser.CHARSET);
	            break;

	        case 2:
	            localctx = new AlterUpgradeNameContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2075;
	            this.match(MySqlParser.ALTER);
	            this.state = 2076;
	            localctx.dbFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DATABASE || _la===MySqlParser.SCHEMA)) {
	                localctx.dbFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2077;
	            this.uid();
	            this.state = 2078;
	            this.match(MySqlParser.UPGRADE);
	            this.state = 2079;
	            this.match(MySqlParser.DATA);
	            this.state = 2080;
	            this.match(MySqlParser.DIRECTORY);
	            this.state = 2081;
	            this.match(MySqlParser.NAME);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterEvent() {
	    let localctx = new AlterEventContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, MySqlParser.RULE_alterEvent);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2085;
	        this.match(MySqlParser.ALTER);
	        this.state = 2087;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.DEFINER) {
	            this.state = 2086;
	            this.ownerStatement();
	        }

	        this.state = 2089;
	        this.match(MySqlParser.EVENT);
	        this.state = 2090;
	        this.fullId();
	        this.state = 2094;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,251,this._ctx);
	        if(la_===1) {
	            this.state = 2091;
	            this.match(MySqlParser.ON);
	            this.state = 2092;
	            this.match(MySqlParser.SCHEDULE);
	            this.state = 2093;
	            this.scheduleExpression();

	        }
	        this.state = 2102;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.ON) {
	            this.state = 2096;
	            this.match(MySqlParser.ON);
	            this.state = 2097;
	            this.match(MySqlParser.COMPLETION);
	            this.state = 2099;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.NOT) {
	                this.state = 2098;
	                this.match(MySqlParser.NOT);
	            }

	            this.state = 2101;
	            this.match(MySqlParser.PRESERVE);
	        }

	        this.state = 2107;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,254,this._ctx);
	        if(la_===1) {
	            this.state = 2104;
	            this.match(MySqlParser.RENAME);
	            this.state = 2105;
	            this.match(MySqlParser.TO);
	            this.state = 2106;
	            this.fullId();

	        }
	        this.state = 2110;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.DISABLE || _la===MySqlParser.ENABLE) {
	            this.state = 2109;
	            this.enableType();
	        }

	        this.state = 2114;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.COMMENT) {
	            this.state = 2112;
	            this.match(MySqlParser.COMMENT);
	            this.state = 2113;
	            this.match(MySqlParser.STRING_LITERAL);
	        }

	        this.state = 2118;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,257,this._ctx);
	        if(la_===1) {
	            this.state = 2116;
	            this.match(MySqlParser.DO);
	            this.state = 2117;
	            this.routineBody();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterFunction() {
	    let localctx = new AlterFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, MySqlParser.RULE_alterFunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2120;
	        this.match(MySqlParser.ALTER);
	        this.state = 2121;
	        this.match(MySqlParser.FUNCTION);
	        this.state = 2122;
	        this.fullId();
	        this.state = 2126;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.DETERMINISTIC || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (MySqlParser.MODIFIES - 100)) | (1 << (MySqlParser.NOT - 100)) | (1 << (MySqlParser.READS - 100)))) !== 0) || _la===MySqlParser.SQL || _la===MySqlParser.COMMENT || _la===MySqlParser.CONTAINS || _la===MySqlParser.LANGUAGE || _la===MySqlParser.NO) {
	            this.state = 2123;
	            this.routineOption();
	            this.state = 2128;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterInstance() {
	    let localctx = new AlterInstanceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, MySqlParser.RULE_alterInstance);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2129;
	        this.match(MySqlParser.ALTER);
	        this.state = 2130;
	        this.match(MySqlParser.INSTANCE);
	        this.state = 2131;
	        this.match(MySqlParser.ROTATE);
	        this.state = 2132;
	        this.match(MySqlParser.INNODB);
	        this.state = 2133;
	        this.match(MySqlParser.MASTER);
	        this.state = 2134;
	        this.match(MySqlParser.KEY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterLogfileGroup() {
	    let localctx = new AlterLogfileGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, MySqlParser.RULE_alterLogfileGroup);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2136;
	        this.match(MySqlParser.ALTER);
	        this.state = 2137;
	        this.match(MySqlParser.LOGFILE);
	        this.state = 2138;
	        this.match(MySqlParser.GROUP);
	        this.state = 2139;
	        this.uid();
	        this.state = 2140;
	        this.match(MySqlParser.ADD);
	        this.state = 2141;
	        this.match(MySqlParser.UNDOFILE);
	        this.state = 2142;
	        this.match(MySqlParser.STRING_LITERAL);
	        this.state = 2148;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.INITIAL_SIZE) {
	            this.state = 2143;
	            this.match(MySqlParser.INITIAL_SIZE);
	            this.state = 2145;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2144;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2147;
	            this.fileSizeLiteral();
	        }

	        this.state = 2151;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.WAIT) {
	            this.state = 2150;
	            this.match(MySqlParser.WAIT);
	        }

	        this.state = 2153;
	        this.match(MySqlParser.ENGINE);
	        this.state = 2155;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.EQUAL_SYMBOL) {
	            this.state = 2154;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	        }

	        this.state = 2157;
	        this.engineName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterProcedure() {
	    let localctx = new AlterProcedureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, MySqlParser.RULE_alterProcedure);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2159;
	        this.match(MySqlParser.ALTER);
	        this.state = 2160;
	        this.match(MySqlParser.PROCEDURE);
	        this.state = 2161;
	        this.fullId();
	        this.state = 2165;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.DETERMINISTIC || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (MySqlParser.MODIFIES - 100)) | (1 << (MySqlParser.NOT - 100)) | (1 << (MySqlParser.READS - 100)))) !== 0) || _la===MySqlParser.SQL || _la===MySqlParser.COMMENT || _la===MySqlParser.CONTAINS || _la===MySqlParser.LANGUAGE || _la===MySqlParser.NO) {
	            this.state = 2162;
	            this.routineOption();
	            this.state = 2167;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterServer() {
	    let localctx = new AlterServerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, MySqlParser.RULE_alterServer);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2168;
	        this.match(MySqlParser.ALTER);
	        this.state = 2169;
	        this.match(MySqlParser.SERVER);
	        this.state = 2170;
	        this.uid();
	        this.state = 2171;
	        this.match(MySqlParser.OPTIONS);
	        this.state = 2172;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 2173;
	        this.serverOption();
	        this.state = 2178;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 2174;
	            this.match(MySqlParser.COMMA);
	            this.state = 2175;
	            this.serverOption();
	            this.state = 2180;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2181;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTable() {
	    let localctx = new AlterTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, MySqlParser.RULE_alterTable);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2183;
	        this.match(MySqlParser.ALTER);
	        this.state = 2185;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.OFFLINE || _la===MySqlParser.ONLINE) {
	            this.state = 2184;
	            localctx.intimeAction = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.OFFLINE || _la===MySqlParser.ONLINE)) {
	                localctx.intimeAction = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 2188;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.IGNORE) {
	            this.state = 2187;
	            this.match(MySqlParser.IGNORE);
	        }

	        this.state = 2190;
	        this.match(MySqlParser.TABLE);
	        this.state = 2191;
	        this.tableName();
	        this.state = 2200;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,268,this._ctx);
	        if(la_===1) {
	            this.state = 2192;
	            this.alterSpecification();
	            this.state = 2197;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 2193;
	                this.match(MySqlParser.COMMA);
	                this.state = 2194;
	                this.alterSpecification();
	                this.state = 2199;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }

	        }
	        this.state = 2203;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.PARTITION) {
	            this.state = 2202;
	            this.partitionDefinitions();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTablespace() {
	    let localctx = new AlterTablespaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, MySqlParser.RULE_alterTablespace);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2205;
	        this.match(MySqlParser.ALTER);
	        this.state = 2206;
	        this.match(MySqlParser.TABLESPACE);
	        this.state = 2207;
	        this.uid();
	        this.state = 2208;
	        localctx.objectAction = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.ADD || _la===MySqlParser.DROP)) {
	            localctx.objectAction = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2209;
	        this.match(MySqlParser.DATAFILE);
	        this.state = 2210;
	        this.match(MySqlParser.STRING_LITERAL);
	        this.state = 2214;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.INITIAL_SIZE) {
	            this.state = 2211;
	            this.match(MySqlParser.INITIAL_SIZE);
	            this.state = 2212;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 2213;
	            this.fileSizeLiteral();
	        }

	        this.state = 2217;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.WAIT) {
	            this.state = 2216;
	            this.match(MySqlParser.WAIT);
	        }

	        this.state = 2219;
	        this.match(MySqlParser.ENGINE);
	        this.state = 2221;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.EQUAL_SYMBOL) {
	            this.state = 2220;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	        }

	        this.state = 2223;
	        this.engineName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterView() {
	    let localctx = new AlterViewContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, MySqlParser.RULE_alterView);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2225;
	        this.match(MySqlParser.ALTER);
	        this.state = 2229;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.ALGORITHM) {
	            this.state = 2226;
	            this.match(MySqlParser.ALGORITHM);
	            this.state = 2227;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 2228;
	            localctx.algType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.MERGE || _la===MySqlParser.TEMPTABLE || _la===MySqlParser.UNDEFINED)) {
	                localctx.algType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 2232;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.DEFINER) {
	            this.state = 2231;
	            this.ownerStatement();
	        }

	        this.state = 2237;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.SQL) {
	            this.state = 2234;
	            this.match(MySqlParser.SQL);
	            this.state = 2235;
	            this.match(MySqlParser.SECURITY);
	            this.state = 2236;
	            localctx.secContext = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DEFINER || _la===MySqlParser.INVOKER)) {
	                localctx.secContext = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 2239;
	        this.match(MySqlParser.VIEW);
	        this.state = 2240;
	        this.fullId();
	        this.state = 2245;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.LR_BRACKET) {
	            this.state = 2241;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2242;
	            this.uidList();
	            this.state = 2243;
	            this.match(MySqlParser.RR_BRACKET);
	        }

	        this.state = 2247;
	        this.match(MySqlParser.AS);
	        this.state = 2248;
	        this.selectStatement();
	        this.state = 2255;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.WITH) {
	            this.state = 2249;
	            this.match(MySqlParser.WITH);
	            this.state = 2251;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.CASCADED || _la===MySqlParser.LOCAL) {
	                this.state = 2250;
	                localctx.checkOpt = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.CASCADED || _la===MySqlParser.LOCAL)) {
	                    localctx.checkOpt = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 2253;
	            this.match(MySqlParser.CHECK);
	            this.state = 2254;
	            this.match(MySqlParser.OPTION);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterSpecification() {
	    let localctx = new AlterSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, MySqlParser.RULE_alterSpecification);
	    var _la = 0; // Token type
	    try {
	        this.state = 2623;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,333,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new AlterByTableOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2257;
	            this.tableOption();
	            this.state = 2264;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,280,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2259;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===MySqlParser.COMMA) {
	                        this.state = 2258;
	                        this.match(MySqlParser.COMMA);
	                    }

	                    this.state = 2261;
	                    this.tableOption(); 
	                }
	                this.state = 2266;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,280,this._ctx);
	            }

	            break;

	        case 2:
	            localctx = new AlterByAddColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2267;
	            this.match(MySqlParser.ADD);
	            this.state = 2269;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.COLUMN) {
	                this.state = 2268;
	                this.match(MySqlParser.COLUMN);
	            }

	            this.state = 2271;
	            this.uid();
	            this.state = 2272;
	            this.columnDefinition();
	            this.state = 2276;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case MySqlParser.FIRST:
	            	this.state = 2273;
	            	this.match(MySqlParser.FIRST);
	            	break;
	            case MySqlParser.AFTER:
	            	this.state = 2274;
	            	this.match(MySqlParser.AFTER);
	            	this.state = 2275;
	            	this.uid();
	            	break;
	            case MySqlParser.EOF:
	            case MySqlParser.ALTER:
	            case MySqlParser.ANALYZE:
	            case MySqlParser.CALL:
	            case MySqlParser.CHANGE:
	            case MySqlParser.CHECK:
	            case MySqlParser.CREATE:
	            case MySqlParser.DELETE:
	            case MySqlParser.DESC:
	            case MySqlParser.DESCRIBE:
	            case MySqlParser.DROP:
	            case MySqlParser.EXPLAIN:
	            case MySqlParser.GET:
	            case MySqlParser.GRANT:
	            case MySqlParser.INSERT:
	            case MySqlParser.KILL:
	            case MySqlParser.LOAD:
	            case MySqlParser.LOCK:
	            case MySqlParser.OPTIMIZE:
	            case MySqlParser.PARTITION:
	            case MySqlParser.PURGE:
	            case MySqlParser.RELEASE:
	            case MySqlParser.RENAME:
	            case MySqlParser.REPLACE:
	            case MySqlParser.RESIGNAL:
	            case MySqlParser.REVOKE:
	            case MySqlParser.SELECT:
	            case MySqlParser.SET:
	            case MySqlParser.SHOW:
	            case MySqlParser.SIGNAL:
	            case MySqlParser.UNLOCK:
	            case MySqlParser.UPDATE:
	            case MySqlParser.USE:
	            case MySqlParser.BEGIN:
	            case MySqlParser.BINLOG:
	            case MySqlParser.CACHE:
	            case MySqlParser.CHECKSUM:
	            case MySqlParser.COMMIT:
	            case MySqlParser.DEALLOCATE:
	            case MySqlParser.DO:
	            case MySqlParser.FLUSH:
	            case MySqlParser.HANDLER:
	            case MySqlParser.HELP:
	            case MySqlParser.INSTALL:
	            case MySqlParser.PREPARE:
	            case MySqlParser.REPAIR:
	            case MySqlParser.RESET:
	            case MySqlParser.ROLLBACK:
	            case MySqlParser.SAVEPOINT:
	            case MySqlParser.START:
	            case MySqlParser.STOP:
	            case MySqlParser.TRUNCATE:
	            case MySqlParser.UNINSTALL:
	            case MySqlParser.XA:
	            case MySqlParser.EXECUTE:
	            case MySqlParser.SHUTDOWN:
	            case MySqlParser.MINUSMINUS:
	            case MySqlParser.LR_BRACKET:
	            case MySqlParser.COMMA:
	            case MySqlParser.SEMI:
	            	break;
	            default:
	            	break;
	            }
	            break;

	        case 3:
	            localctx = new AlterByAddColumnsContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2278;
	            this.match(MySqlParser.ADD);
	            this.state = 2280;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.COLUMN) {
	                this.state = 2279;
	                this.match(MySqlParser.COLUMN);
	            }

	            this.state = 2282;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2283;
	            this.uid();
	            this.state = 2284;
	            this.columnDefinition();
	            this.state = 2291;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 2285;
	                this.match(MySqlParser.COMMA);
	                this.state = 2286;
	                this.uid();
	                this.state = 2287;
	                this.columnDefinition();
	                this.state = 2293;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2294;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 4:
	            localctx = new AlterByAddIndexContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2296;
	            this.match(MySqlParser.ADD);
	            this.state = 2297;
	            localctx.indexFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.INDEX || _la===MySqlParser.KEY)) {
	                localctx.indexFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2299;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySqlParser.CURRENT - 32)) | (1 << (MySqlParser.DATABASE - 32)) | (1 << (MySqlParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySqlParser.LEFT || _la===MySqlParser.NUMBER || _la===MySqlParser.RIGHT || _la===MySqlParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.TIMESTAMP - 199)) | (1 << (MySqlParser.DATETIME - 199)) | (1 << (MySqlParser.YEAR - 199)) | (1 << (MySqlParser.TEXT - 199)) | (1 << (MySqlParser.ENUM - 199)) | (1 << (MySqlParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.JSON_VALID - 233)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySqlParser.AVG - 233)) | (1 << (MySqlParser.BIT_AND - 233)) | (1 << (MySqlParser.BIT_OR - 233)) | (1 << (MySqlParser.BIT_XOR - 233)) | (1 << (MySqlParser.COUNT - 233)) | (1 << (MySqlParser.GROUP_CONCAT - 233)) | (1 << (MySqlParser.MAX - 233)) | (1 << (MySqlParser.MIN - 233)) | (1 << (MySqlParser.STD - 233)) | (1 << (MySqlParser.STDDEV - 233)) | (1 << (MySqlParser.STDDEV_POP - 233)) | (1 << (MySqlParser.STDDEV_SAMP - 233)) | (1 << (MySqlParser.SUM - 233)) | (1 << (MySqlParser.VAR_POP - 233)) | (1 << (MySqlParser.VAR_SAMP - 233)) | (1 << (MySqlParser.VARIANCE - 233)) | (1 << (MySqlParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySqlParser.ACCOUNT - 270)) | (1 << (MySqlParser.ACTION - 270)) | (1 << (MySqlParser.AFTER - 270)) | (1 << (MySqlParser.AGGREGATE - 270)) | (1 << (MySqlParser.ALGORITHM - 270)) | (1 << (MySqlParser.ANY - 270)) | (1 << (MySqlParser.AT - 270)) | (1 << (MySqlParser.AUTHORS - 270)) | (1 << (MySqlParser.AUTOCOMMIT - 270)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySqlParser.AUTO_INCREMENT - 270)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 270)) | (1 << (MySqlParser.BEGIN - 270)) | (1 << (MySqlParser.BINLOG - 270)) | (1 << (MySqlParser.BIT - 270)) | (1 << (MySqlParser.BLOCK - 270)) | (1 << (MySqlParser.BOOL - 270)) | (1 << (MySqlParser.BOOLEAN - 270)) | (1 << (MySqlParser.BTREE - 270)) | (1 << (MySqlParser.CACHE - 270)) | (1 << (MySqlParser.CASCADED - 270)) | (1 << (MySqlParser.CHAIN - 270)) | (1 << (MySqlParser.CHANGED - 270)) | (1 << (MySqlParser.CHANNEL - 270)) | (1 << (MySqlParser.CHECKSUM - 270)) | (1 << (MySqlParser.PAGE_CHECKSUM - 270)) | (1 << (MySqlParser.CIPHER - 270)) | (1 << (MySqlParser.CLASS_ORIGIN - 270)) | (1 << (MySqlParser.CLIENT - 270)) | (1 << (MySqlParser.CLOSE - 270)) | (1 << (MySqlParser.COALESCE - 270)) | (1 << (MySqlParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySqlParser.COLUMNS - 302)) | (1 << (MySqlParser.COLUMN_FORMAT - 302)) | (1 << (MySqlParser.COLUMN_NAME - 302)) | (1 << (MySqlParser.COMMENT - 302)) | (1 << (MySqlParser.COMMIT - 302)) | (1 << (MySqlParser.COMPACT - 302)) | (1 << (MySqlParser.COMPLETION - 302)) | (1 << (MySqlParser.COMPRESSED - 302)) | (1 << (MySqlParser.COMPRESSION - 302)) | (1 << (MySqlParser.CONCURRENT - 302)) | (1 << (MySqlParser.CONNECTION - 302)) | (1 << (MySqlParser.CONSISTENT - 302)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySqlParser.CONSTRAINT_NAME - 302)) | (1 << (MySqlParser.CONTAINS - 302)) | (1 << (MySqlParser.CONTEXT - 302)) | (1 << (MySqlParser.CONTRIBUTORS - 302)) | (1 << (MySqlParser.COPY - 302)) | (1 << (MySqlParser.CPU - 302)) | (1 << (MySqlParser.CURSOR_NAME - 302)) | (1 << (MySqlParser.DATA - 302)) | (1 << (MySqlParser.DATAFILE - 302)) | (1 << (MySqlParser.DEALLOCATE - 302)) | (1 << (MySqlParser.DEFAULT_AUTH - 302)) | (1 << (MySqlParser.DEFINER - 302)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 302)) | (1 << (MySqlParser.DES_KEY_FILE - 302)) | (1 << (MySqlParser.DIRECTORY - 302)) | (1 << (MySqlParser.DISABLE - 302)) | (1 << (MySqlParser.DISCARD - 302)) | (1 << (MySqlParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySqlParser.DO - 334)) | (1 << (MySqlParser.DUMPFILE - 334)) | (1 << (MySqlParser.DUPLICATE - 334)) | (1 << (MySqlParser.DYNAMIC - 334)) | (1 << (MySqlParser.ENABLE - 334)) | (1 << (MySqlParser.ENCRYPTION - 334)) | (1 << (MySqlParser.END - 334)) | (1 << (MySqlParser.ENDS - 334)) | (1 << (MySqlParser.ENGINE - 334)) | (1 << (MySqlParser.ENGINES - 334)) | (1 << (MySqlParser.ERROR - 334)) | (1 << (MySqlParser.ERRORS - 334)) | (1 << (MySqlParser.ESCAPE - 334)) | (1 << (MySqlParser.EVEN - 334)) | (1 << (MySqlParser.EVENT - 334)) | (1 << (MySqlParser.EVENTS - 334)) | (1 << (MySqlParser.EVERY - 334)) | (1 << (MySqlParser.EXCHANGE - 334)) | (1 << (MySqlParser.EXCLUSIVE - 334)) | (1 << (MySqlParser.EXPIRE - 334)) | (1 << (MySqlParser.EXPORT - 334)) | (1 << (MySqlParser.EXTENDED - 334)) | (1 << (MySqlParser.EXTENT_SIZE - 334)) | (1 << (MySqlParser.FAST - 334)) | (1 << (MySqlParser.FAULTS - 334)) | (1 << (MySqlParser.FIELDS - 334)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySqlParser.FILTER - 334)) | (1 << (MySqlParser.FIRST - 334)) | (1 << (MySqlParser.FIXED - 334)) | (1 << (MySqlParser.FLUSH - 334)) | (1 << (MySqlParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySqlParser.FOUND - 366)) | (1 << (MySqlParser.FULL - 366)) | (1 << (MySqlParser.FUNCTION - 366)) | (1 << (MySqlParser.GENERAL - 366)) | (1 << (MySqlParser.GLOBAL - 366)) | (1 << (MySqlParser.GRANTS - 366)) | (1 << (MySqlParser.GROUP_REPLICATION - 366)) | (1 << (MySqlParser.HANDLER - 366)) | (1 << (MySqlParser.HASH - 366)) | (1 << (MySqlParser.HELP - 366)) | (1 << (MySqlParser.HOST - 366)) | (1 << (MySqlParser.HOSTS - 366)) | (1 << (MySqlParser.IDENTIFIED - 366)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySqlParser.IMPORT - 366)) | (1 << (MySqlParser.INDEXES - 366)) | (1 << (MySqlParser.INITIAL_SIZE - 366)) | (1 << (MySqlParser.INPLACE - 366)) | (1 << (MySqlParser.INSERT_METHOD - 366)) | (1 << (MySqlParser.INSTALL - 366)) | (1 << (MySqlParser.INSTANCE - 366)) | (1 << (MySqlParser.INVISIBLE - 366)) | (1 << (MySqlParser.INVOKER - 366)) | (1 << (MySqlParser.IO - 366)) | (1 << (MySqlParser.IO_THREAD - 366)) | (1 << (MySqlParser.IPC - 366)) | (1 << (MySqlParser.ISOLATION - 366)) | (1 << (MySqlParser.ISSUER - 366)) | (1 << (MySqlParser.JSON - 366)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySqlParser.LANGUAGE - 366)) | (1 << (MySqlParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.LEAVES - 398)) | (1 << (MySqlParser.LESS - 398)) | (1 << (MySqlParser.LEVEL - 398)) | (1 << (MySqlParser.LIST - 398)) | (1 << (MySqlParser.LOCAL - 398)) | (1 << (MySqlParser.LOGFILE - 398)) | (1 << (MySqlParser.LOGS - 398)) | (1 << (MySqlParser.MASTER - 398)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySqlParser.MASTER_DELAY - 398)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySqlParser.MASTER_HOST - 398)) | (1 << (MySqlParser.MASTER_LOG_FILE - 398)) | (1 << (MySqlParser.MASTER_LOG_POS - 398)) | (1 << (MySqlParser.MASTER_PASSWORD - 398)) | (1 << (MySqlParser.MASTER_PORT - 398)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySqlParser.MASTER_SSL - 398)) | (1 << (MySqlParser.MASTER_SSL_CA - 398)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_CERT - 398)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySqlParser.MASTER_SSL_CRL - 398)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_KEY - 398)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 398)) | (1 << (MySqlParser.MASTER_USER - 398)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySqlParser.MEDIUM - 430)) | (1 << (MySqlParser.MEMBER - 430)) | (1 << (MySqlParser.MERGE - 430)) | (1 << (MySqlParser.MESSAGE_TEXT - 430)) | (1 << (MySqlParser.MID - 430)) | (1 << (MySqlParser.MIGRATE - 430)) | (1 << (MySqlParser.MIN_ROWS - 430)) | (1 << (MySqlParser.MODE - 430)) | (1 << (MySqlParser.MODIFY - 430)) | (1 << (MySqlParser.MUTEX - 430)) | (1 << (MySqlParser.MYSQL - 430)) | (1 << (MySqlParser.MYSQL_ERRNO - 430)) | (1 << (MySqlParser.NAME - 430)) | (1 << (MySqlParser.NAMES - 430)) | (1 << (MySqlParser.NCHAR - 430)) | (1 << (MySqlParser.NEVER - 430)) | (1 << (MySqlParser.NEXT - 430)) | (1 << (MySqlParser.NO - 430)) | (1 << (MySqlParser.NODEGROUP - 430)) | (1 << (MySqlParser.NONE - 430)) | (1 << (MySqlParser.OFFLINE - 430)) | (1 << (MySqlParser.OFFSET - 430)) | (1 << (MySqlParser.OF - 430)) | (1 << (MySqlParser.OJ - 430)) | (1 << (MySqlParser.OLD_PASSWORD - 430)) | (1 << (MySqlParser.ONE - 430)) | (1 << (MySqlParser.ONLINE - 430)) | (1 << (MySqlParser.ONLY - 430)) | (1 << (MySqlParser.OPEN - 430)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySqlParser.OPTIONS - 462)) | (1 << (MySqlParser.OWNER - 462)) | (1 << (MySqlParser.PACK_KEYS - 462)) | (1 << (MySqlParser.PAGE - 462)) | (1 << (MySqlParser.PARSER - 462)) | (1 << (MySqlParser.PARTIAL - 462)) | (1 << (MySqlParser.PARTITIONING - 462)) | (1 << (MySqlParser.PARTITIONS - 462)) | (1 << (MySqlParser.PASSWORD - 462)) | (1 << (MySqlParser.PHASE - 462)) | (1 << (MySqlParser.PLUGIN - 462)) | (1 << (MySqlParser.PLUGIN_DIR - 462)) | (1 << (MySqlParser.PLUGINS - 462)) | (1 << (MySqlParser.PORT - 462)) | (1 << (MySqlParser.PRECEDES - 462)) | (1 << (MySqlParser.PREPARE - 462)) | (1 << (MySqlParser.PRESERVE - 462)) | (1 << (MySqlParser.PREV - 462)) | (1 << (MySqlParser.PROCESSLIST - 462)) | (1 << (MySqlParser.PROFILE - 462)) | (1 << (MySqlParser.PROFILES - 462)) | (1 << (MySqlParser.PROXY - 462)) | (1 << (MySqlParser.QUERY - 462)) | (1 << (MySqlParser.QUICK - 462)) | (1 << (MySqlParser.REBUILD - 462)) | (1 << (MySqlParser.RECOVER - 462)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySqlParser.REDUNDANT - 462)) | (1 << (MySqlParser.RELAY - 462)) | (1 << (MySqlParser.RELAY_LOG_FILE - 462)) | (1 << (MySqlParser.RELAY_LOG_POS - 462)) | (1 << (MySqlParser.RELAYLOG - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySqlParser.REMOVE - 494)) | (1 << (MySqlParser.REORGANIZE - 494)) | (1 << (MySqlParser.REPAIR - 494)) | (1 << (MySqlParser.REPLICATE_DO_DB - 494)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATION - 494)) | (1 << (MySqlParser.RESET - 494)) | (1 << (MySqlParser.RESUME - 494)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 494)) | (1 << (MySqlParser.RETURNS - 494)) | (1 << (MySqlParser.ROLE - 494)) | (1 << (MySqlParser.ROLLBACK - 494)) | (1 << (MySqlParser.ROLLUP - 494)) | (1 << (MySqlParser.ROTATE - 494)) | (1 << (MySqlParser.ROW - 494)) | (1 << (MySqlParser.ROWS - 494)) | (1 << (MySqlParser.ROW_FORMAT - 494)) | (1 << (MySqlParser.SAVEPOINT - 494)) | (1 << (MySqlParser.SCHEDULE - 494)) | (1 << (MySqlParser.SECURITY - 494)) | (1 << (MySqlParser.SERVER - 494)) | (1 << (MySqlParser.SESSION - 494)) | (1 << (MySqlParser.SHARE - 494)) | (1 << (MySqlParser.SHARED - 494)) | (1 << (MySqlParser.SIGNED - 494)) | (1 << (MySqlParser.SIMPLE - 494)) | (1 << (MySqlParser.SLAVE - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySqlParser.SLOW - 526)) | (1 << (MySqlParser.SNAPSHOT - 526)) | (1 << (MySqlParser.SOCKET - 526)) | (1 << (MySqlParser.SOME - 526)) | (1 << (MySqlParser.SONAME - 526)) | (1 << (MySqlParser.SOUNDS - 526)) | (1 << (MySqlParser.SOURCE - 526)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySqlParser.SQL_CACHE - 526)) | (1 << (MySqlParser.SQL_NO_CACHE - 526)) | (1 << (MySqlParser.SQL_THREAD - 526)) | (1 << (MySqlParser.START - 526)) | (1 << (MySqlParser.STARTS - 526)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 526)) | (1 << (MySqlParser.STATS_PERSISTENT - 526)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySqlParser.STATUS - 526)) | (1 << (MySqlParser.STOP - 526)) | (1 << (MySqlParser.STORAGE - 526)) | (1 << (MySqlParser.STRING - 526)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySqlParser.SUBJECT - 526)) | (1 << (MySqlParser.SUBPARTITION - 526)) | (1 << (MySqlParser.SUBPARTITIONS - 526)) | (1 << (MySqlParser.SUSPEND - 526)) | (1 << (MySqlParser.SWAPS - 526)) | (1 << (MySqlParser.SWITCHES - 526)) | (1 << (MySqlParser.TABLE_NAME - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySqlParser.TABLESPACE - 558)) | (1 << (MySqlParser.TEMPORARY - 558)) | (1 << (MySqlParser.TEMPTABLE - 558)) | (1 << (MySqlParser.THAN - 558)) | (1 << (MySqlParser.TRADITIONAL - 558)) | (1 << (MySqlParser.TRANSACTION - 558)) | (1 << (MySqlParser.TRANSACTIONAL - 558)) | (1 << (MySqlParser.TRIGGERS - 558)) | (1 << (MySqlParser.TRUNCATE - 558)) | (1 << (MySqlParser.UNDEFINED - 558)) | (1 << (MySqlParser.UNDOFILE - 558)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySqlParser.UNINSTALL - 558)) | (1 << (MySqlParser.UNKNOWN - 558)) | (1 << (MySqlParser.UNTIL - 558)) | (1 << (MySqlParser.UPGRADE - 558)) | (1 << (MySqlParser.USER - 558)) | (1 << (MySqlParser.USE_FRM - 558)) | (1 << (MySqlParser.USER_RESOURCES - 558)) | (1 << (MySqlParser.VALIDATION - 558)) | (1 << (MySqlParser.VALUE - 558)) | (1 << (MySqlParser.VARIABLES - 558)) | (1 << (MySqlParser.VIEW - 558)) | (1 << (MySqlParser.VISIBLE - 558)) | (1 << (MySqlParser.WAIT - 558)) | (1 << (MySqlParser.WARNINGS - 558)) | (1 << (MySqlParser.WITHOUT - 558)) | (1 << (MySqlParser.WORK - 558)) | (1 << (MySqlParser.WRAPPER - 558)) | (1 << (MySqlParser.X509 - 558)) | (1 << (MySqlParser.XA - 558)))) !== 0) || ((((_la - 590)) & ~0x1f) == 0 && ((1 << (_la - 590)) & ((1 << (MySqlParser.XML - 590)) | (1 << (MySqlParser.INTERNAL - 590)) | (1 << (MySqlParser.QUARTER - 590)) | (1 << (MySqlParser.MONTH - 590)) | (1 << (MySqlParser.DAY - 590)) | (1 << (MySqlParser.HOUR - 590)) | (1 << (MySqlParser.MINUTE - 590)) | (1 << (MySqlParser.WEEK - 590)) | (1 << (MySqlParser.SECOND - 590)) | (1 << (MySqlParser.MICROSECOND - 590)) | (1 << (MySqlParser.TABLES - 590)) | (1 << (MySqlParser.ROUTINE - 590)) | (1 << (MySqlParser.EXECUTE - 590)) | (1 << (MySqlParser.FILE - 590)) | (1 << (MySqlParser.PROCESS - 590)) | (1 << (MySqlParser.RELOAD - 590)) | (1 << (MySqlParser.SHUTDOWN - 590)) | (1 << (MySqlParser.SUPER - 590)) | (1 << (MySqlParser.PRIVILEGES - 590)) | (1 << (MySqlParser.AUDIT_ADMIN - 590)) | (1 << (MySqlParser.BACKUP_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 590)) | (1 << (MySqlParser.CLONE_ADMIN - 590)) | (1 << (MySqlParser.CONNECTION_ADMIN - 590)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 590)) | (1 << (MySqlParser.FIREWALL_ADMIN - 590)))) !== 0) || ((((_la - 622)) & ~0x1f) == 0 && ((1 << (_la - 622)) & ((1 << (MySqlParser.FIREWALL_USER - 622)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 622)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 622)) | (1 << (MySqlParser.NDB_STORED_USER - 622)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.REPLICATION_APPLIER - 622)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 622)) | (1 << (MySqlParser.ROLE_ADMIN - 622)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.SET_USER_ID - 622)) | (1 << (MySqlParser.SHOW_ROUTINE - 622)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 622)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 622)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 622)) | (1 << (MySqlParser.ARMSCII8 - 622)) | (1 << (MySqlParser.ASCII - 622)) | (1 << (MySqlParser.BIG5 - 622)) | (1 << (MySqlParser.CP1250 - 622)) | (1 << (MySqlParser.CP1251 - 622)) | (1 << (MySqlParser.CP1256 - 622)) | (1 << (MySqlParser.CP1257 - 622)) | (1 << (MySqlParser.CP850 - 622)) | (1 << (MySqlParser.CP852 - 622)) | (1 << (MySqlParser.CP866 - 622)) | (1 << (MySqlParser.CP932 - 622)) | (1 << (MySqlParser.DEC8 - 622)) | (1 << (MySqlParser.EUCJPMS - 622)) | (1 << (MySqlParser.EUCKR - 622)) | (1 << (MySqlParser.GB2312 - 622)))) !== 0) || ((((_la - 654)) & ~0x1f) == 0 && ((1 << (_la - 654)) & ((1 << (MySqlParser.GBK - 654)) | (1 << (MySqlParser.GEOSTD8 - 654)) | (1 << (MySqlParser.GREEK - 654)) | (1 << (MySqlParser.HEBREW - 654)) | (1 << (MySqlParser.HP8 - 654)) | (1 << (MySqlParser.KEYBCS2 - 654)) | (1 << (MySqlParser.KOI8R - 654)) | (1 << (MySqlParser.KOI8U - 654)) | (1 << (MySqlParser.LATIN1 - 654)) | (1 << (MySqlParser.LATIN2 - 654)) | (1 << (MySqlParser.LATIN5 - 654)) | (1 << (MySqlParser.LATIN7 - 654)) | (1 << (MySqlParser.MACCE - 654)) | (1 << (MySqlParser.MACROMAN - 654)) | (1 << (MySqlParser.SJIS - 654)) | (1 << (MySqlParser.SWE7 - 654)) | (1 << (MySqlParser.TIS620 - 654)) | (1 << (MySqlParser.UCS2 - 654)) | (1 << (MySqlParser.UJIS - 654)) | (1 << (MySqlParser.UTF16 - 654)) | (1 << (MySqlParser.UTF16LE - 654)) | (1 << (MySqlParser.UTF32 - 654)) | (1 << (MySqlParser.UTF8 - 654)) | (1 << (MySqlParser.UTF8MB3 - 654)) | (1 << (MySqlParser.UTF8MB4 - 654)) | (1 << (MySqlParser.ARCHIVE - 654)) | (1 << (MySqlParser.BLACKHOLE - 654)) | (1 << (MySqlParser.CSV - 654)) | (1 << (MySqlParser.FEDERATED - 654)) | (1 << (MySqlParser.INNODB - 654)) | (1 << (MySqlParser.MEMORY - 654)) | (1 << (MySqlParser.MRG_MYISAM - 654)))) !== 0) || ((((_la - 686)) & ~0x1f) == 0 && ((1 << (_la - 686)) & ((1 << (MySqlParser.MYISAM - 686)) | (1 << (MySqlParser.NDB - 686)) | (1 << (MySqlParser.NDBCLUSTER - 686)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 686)) | (1 << (MySqlParser.TOKUDB - 686)) | (1 << (MySqlParser.REPEATABLE - 686)) | (1 << (MySqlParser.COMMITTED - 686)) | (1 << (MySqlParser.UNCOMMITTED - 686)) | (1 << (MySqlParser.SERIALIZABLE - 686)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 686)) | (1 << (MySqlParser.LINESTRING - 686)) | (1 << (MySqlParser.MULTILINESTRING - 686)) | (1 << (MySqlParser.MULTIPOINT - 686)) | (1 << (MySqlParser.MULTIPOLYGON - 686)) | (1 << (MySqlParser.POINT - 686)) | (1 << (MySqlParser.POLYGON - 686)) | (1 << (MySqlParser.ABS - 686)) | (1 << (MySqlParser.ACOS - 686)) | (1 << (MySqlParser.ADDDATE - 686)) | (1 << (MySqlParser.ADDTIME - 686)) | (1 << (MySqlParser.AES_DECRYPT - 686)) | (1 << (MySqlParser.AES_ENCRYPT - 686)) | (1 << (MySqlParser.AREA - 686)) | (1 << (MySqlParser.ASBINARY - 686)) | (1 << (MySqlParser.ASIN - 686)) | (1 << (MySqlParser.ASTEXT - 686)) | (1 << (MySqlParser.ASWKB - 686)) | (1 << (MySqlParser.ASWKT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 686)))) !== 0) || ((((_la - 718)) & ~0x1f) == 0 && ((1 << (_la - 718)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 718)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 718)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 718)) | (1 << (MySqlParser.ATAN - 718)) | (1 << (MySqlParser.ATAN2 - 718)) | (1 << (MySqlParser.BENCHMARK - 718)) | (1 << (MySqlParser.BIN - 718)) | (1 << (MySqlParser.BIT_COUNT - 718)) | (1 << (MySqlParser.BIT_LENGTH - 718)) | (1 << (MySqlParser.BUFFER - 718)) | (1 << (MySqlParser.CATALOG_NAME - 718)) | (1 << (MySqlParser.CEIL - 718)) | (1 << (MySqlParser.CEILING - 718)) | (1 << (MySqlParser.CENTROID - 718)) | (1 << (MySqlParser.CHARACTER_LENGTH - 718)) | (1 << (MySqlParser.CHARSET - 718)) | (1 << (MySqlParser.CHAR_LENGTH - 718)) | (1 << (MySqlParser.COERCIBILITY - 718)) | (1 << (MySqlParser.COLLATION - 718)) | (1 << (MySqlParser.COMPRESS - 718)) | (1 << (MySqlParser.CONCAT - 718)) | (1 << (MySqlParser.CONCAT_WS - 718)) | (1 << (MySqlParser.CONNECTION_ID - 718)) | (1 << (MySqlParser.CONV - 718)) | (1 << (MySqlParser.CONVERT_TZ - 718)) | (1 << (MySqlParser.COS - 718)) | (1 << (MySqlParser.COT - 718)) | (1 << (MySqlParser.CRC32 - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 718)) | (1 << (MySqlParser.CREATE_DIGEST - 718)))) !== 0) || ((((_la - 750)) & ~0x1f) == 0 && ((1 << (_la - 750)) & ((1 << (MySqlParser.CROSSES - 750)) | (1 << (MySqlParser.DATEDIFF - 750)) | (1 << (MySqlParser.DATE_FORMAT - 750)) | (1 << (MySqlParser.DAYNAME - 750)) | (1 << (MySqlParser.DAYOFMONTH - 750)) | (1 << (MySqlParser.DAYOFWEEK - 750)) | (1 << (MySqlParser.DAYOFYEAR - 750)) | (1 << (MySqlParser.DECODE - 750)) | (1 << (MySqlParser.DEGREES - 750)) | (1 << (MySqlParser.DES_DECRYPT - 750)) | (1 << (MySqlParser.DES_ENCRYPT - 750)) | (1 << (MySqlParser.DIMENSION - 750)) | (1 << (MySqlParser.DISJOINT - 750)) | (1 << (MySqlParser.ELT - 750)) | (1 << (MySqlParser.ENCODE - 750)) | (1 << (MySqlParser.ENCRYPT - 750)) | (1 << (MySqlParser.ENDPOINT - 750)) | (1 << (MySqlParser.ENVELOPE - 750)) | (1 << (MySqlParser.EQUALS - 750)) | (1 << (MySqlParser.EXP - 750)) | (1 << (MySqlParser.EXPORT_SET - 750)) | (1 << (MySqlParser.EXTERIORRING - 750)) | (1 << (MySqlParser.EXTRACTVALUE - 750)) | (1 << (MySqlParser.FIELD - 750)) | (1 << (MySqlParser.FIND_IN_SET - 750)) | (1 << (MySqlParser.FLOOR - 750)) | (1 << (MySqlParser.FORMAT - 750)) | (1 << (MySqlParser.FOUND_ROWS - 750)) | (1 << (MySqlParser.FROM_BASE64 - 750)) | (1 << (MySqlParser.FROM_DAYS - 750)) | (1 << (MySqlParser.FROM_UNIXTIME - 750)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 750)))) !== 0) || ((((_la - 782)) & ~0x1f) == 0 && ((1 << (_la - 782)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYN - 782)) | (1 << (MySqlParser.GEOMETRYTYPE - 782)) | (1 << (MySqlParser.GEOMFROMTEXT - 782)) | (1 << (MySqlParser.GEOMFROMWKB - 782)) | (1 << (MySqlParser.GET_FORMAT - 782)) | (1 << (MySqlParser.GET_LOCK - 782)) | (1 << (MySqlParser.GLENGTH - 782)) | (1 << (MySqlParser.GREATEST - 782)) | (1 << (MySqlParser.GTID_SUBSET - 782)) | (1 << (MySqlParser.GTID_SUBTRACT - 782)) | (1 << (MySqlParser.HEX - 782)) | (1 << (MySqlParser.IFNULL - 782)) | (1 << (MySqlParser.INET6_ATON - 782)) | (1 << (MySqlParser.INET6_NTOA - 782)) | (1 << (MySqlParser.INET_ATON - 782)) | (1 << (MySqlParser.INET_NTOA - 782)) | (1 << (MySqlParser.INSTR - 782)) | (1 << (MySqlParser.INTERIORRINGN - 782)) | (1 << (MySqlParser.INTERSECTS - 782)) | (1 << (MySqlParser.ISCLOSED - 782)) | (1 << (MySqlParser.ISEMPTY - 782)) | (1 << (MySqlParser.ISNULL - 782)) | (1 << (MySqlParser.ISSIMPLE - 782)) | (1 << (MySqlParser.IS_FREE_LOCK - 782)) | (1 << (MySqlParser.IS_IPV4 - 782)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 782)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 782)))) !== 0) || ((((_la - 814)) & ~0x1f) == 0 && ((1 << (_la - 814)) & ((1 << (MySqlParser.IS_IPV6 - 814)) | (1 << (MySqlParser.IS_USED_LOCK - 814)) | (1 << (MySqlParser.LAST_INSERT_ID - 814)) | (1 << (MySqlParser.LCASE - 814)) | (1 << (MySqlParser.LEAST - 814)) | (1 << (MySqlParser.LENGTH - 814)) | (1 << (MySqlParser.LINEFROMTEXT - 814)) | (1 << (MySqlParser.LINEFROMWKB - 814)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 814)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 814)) | (1 << (MySqlParser.LN - 814)) | (1 << (MySqlParser.LOAD_FILE - 814)) | (1 << (MySqlParser.LOCATE - 814)) | (1 << (MySqlParser.LOG - 814)) | (1 << (MySqlParser.LOG10 - 814)) | (1 << (MySqlParser.LOG2 - 814)) | (1 << (MySqlParser.LOWER - 814)) | (1 << (MySqlParser.LPAD - 814)) | (1 << (MySqlParser.LTRIM - 814)) | (1 << (MySqlParser.MAKEDATE - 814)) | (1 << (MySqlParser.MAKETIME - 814)) | (1 << (MySqlParser.MAKE_SET - 814)) | (1 << (MySqlParser.MASTER_POS_WAIT - 814)) | (1 << (MySqlParser.MBRCONTAINS - 814)) | (1 << (MySqlParser.MBRDISJOINT - 814)) | (1 << (MySqlParser.MBREQUAL - 814)) | (1 << (MySqlParser.MBRINTERSECTS - 814)) | (1 << (MySqlParser.MBROVERLAPS - 814)) | (1 << (MySqlParser.MBRTOUCHES - 814)) | (1 << (MySqlParser.MBRWITHIN - 814)) | (1 << (MySqlParser.MD5 - 814)) | (1 << (MySqlParser.MLINEFROMTEXT - 814)))) !== 0) || ((((_la - 846)) & ~0x1f) == 0 && ((1 << (_la - 846)) & ((1 << (MySqlParser.MLINEFROMWKB - 846)) | (1 << (MySqlParser.MONTHNAME - 846)) | (1 << (MySqlParser.MPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MPOINTFROMWKB - 846)) | (1 << (MySqlParser.MPOLYFROMTEXT - 846)) | (1 << (MySqlParser.MPOLYFROMWKB - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 846)) | (1 << (MySqlParser.NAME_CONST - 846)) | (1 << (MySqlParser.NULLIF - 846)) | (1 << (MySqlParser.NUMGEOMETRIES - 846)) | (1 << (MySqlParser.NUMINTERIORRINGS - 846)) | (1 << (MySqlParser.NUMPOINTS - 846)) | (1 << (MySqlParser.OCT - 846)) | (1 << (MySqlParser.OCTET_LENGTH - 846)) | (1 << (MySqlParser.ORD - 846)) | (1 << (MySqlParser.OVERLAPS - 846)) | (1 << (MySqlParser.PERIOD_ADD - 846)) | (1 << (MySqlParser.PERIOD_DIFF - 846)) | (1 << (MySqlParser.PI - 846)) | (1 << (MySqlParser.POINTFROMTEXT - 846)) | (1 << (MySqlParser.POINTFROMWKB - 846)) | (1 << (MySqlParser.POINTN - 846)) | (1 << (MySqlParser.POLYFROMTEXT - 846)) | (1 << (MySqlParser.POLYFROMWKB - 846)) | (1 << (MySqlParser.POLYGONFROMTEXT - 846)) | (1 << (MySqlParser.POLYGONFROMWKB - 846)) | (1 << (MySqlParser.POW - 846)))) !== 0) || ((((_la - 878)) & ~0x1f) == 0 && ((1 << (_la - 878)) & ((1 << (MySqlParser.POWER - 878)) | (1 << (MySqlParser.QUOTE - 878)) | (1 << (MySqlParser.RADIANS - 878)) | (1 << (MySqlParser.RAND - 878)) | (1 << (MySqlParser.RANDOM_BYTES - 878)) | (1 << (MySqlParser.RELEASE_LOCK - 878)) | (1 << (MySqlParser.REVERSE - 878)) | (1 << (MySqlParser.ROUND - 878)) | (1 << (MySqlParser.ROW_COUNT - 878)) | (1 << (MySqlParser.RPAD - 878)) | (1 << (MySqlParser.RTRIM - 878)) | (1 << (MySqlParser.SEC_TO_TIME - 878)) | (1 << (MySqlParser.SESSION_USER - 878)) | (1 << (MySqlParser.SHA - 878)) | (1 << (MySqlParser.SHA1 - 878)) | (1 << (MySqlParser.SHA2 - 878)) | (1 << (MySqlParser.SCHEMA_NAME - 878)) | (1 << (MySqlParser.SIGN - 878)) | (1 << (MySqlParser.SIN - 878)) | (1 << (MySqlParser.SLEEP - 878)) | (1 << (MySqlParser.SOUNDEX - 878)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 878)) | (1 << (MySqlParser.SQRT - 878)) | (1 << (MySqlParser.SRID - 878)) | (1 << (MySqlParser.STARTPOINT - 878)) | (1 << (MySqlParser.STRCMP - 878)) | (1 << (MySqlParser.STR_TO_DATE - 878)) | (1 << (MySqlParser.ST_AREA - 878)) | (1 << (MySqlParser.ST_ASBINARY - 878)) | (1 << (MySqlParser.ST_ASTEXT - 878)) | (1 << (MySqlParser.ST_ASWKB - 878)) | (1 << (MySqlParser.ST_ASWKT - 878)))) !== 0) || ((((_la - 910)) & ~0x1f) == 0 && ((1 << (_la - 910)) & ((1 << (MySqlParser.ST_BUFFER - 910)) | (1 << (MySqlParser.ST_CENTROID - 910)) | (1 << (MySqlParser.ST_CONTAINS - 910)) | (1 << (MySqlParser.ST_CROSSES - 910)) | (1 << (MySqlParser.ST_DIFFERENCE - 910)) | (1 << (MySqlParser.ST_DIMENSION - 910)) | (1 << (MySqlParser.ST_DISJOINT - 910)) | (1 << (MySqlParser.ST_DISTANCE - 910)) | (1 << (MySqlParser.ST_ENDPOINT - 910)) | (1 << (MySqlParser.ST_ENVELOPE - 910)) | (1 << (MySqlParser.ST_EQUALS - 910)) | (1 << (MySqlParser.ST_EXTERIORRING - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYN - 910)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 910)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 910)) | (1 << (MySqlParser.ST_INTERIORRINGN - 910)) | (1 << (MySqlParser.ST_INTERSECTION - 910)) | (1 << (MySqlParser.ST_INTERSECTS - 910)) | (1 << (MySqlParser.ST_ISCLOSED - 910)) | (1 << (MySqlParser.ST_ISEMPTY - 910)) | (1 << (MySqlParser.ST_ISSIMPLE - 910)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 910)) | (1 << (MySqlParser.ST_LINEFROMWKB - 910)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 910)))) !== 0) || ((((_la - 942)) & ~0x1f) == 0 && ((1 << (_la - 942)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 942)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 942)) | (1 << (MySqlParser.ST_NUMPOINTS - 942)) | (1 << (MySqlParser.ST_OVERLAPS - 942)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 942)) | (1 << (MySqlParser.ST_POINTFROMWKB - 942)) | (1 << (MySqlParser.ST_POINTN - 942)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYFROMWKB - 942)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 942)) | (1 << (MySqlParser.ST_SRID - 942)) | (1 << (MySqlParser.ST_STARTPOINT - 942)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 942)) | (1 << (MySqlParser.ST_TOUCHES - 942)) | (1 << (MySqlParser.ST_UNION - 942)) | (1 << (MySqlParser.ST_WITHIN - 942)) | (1 << (MySqlParser.ST_X - 942)) | (1 << (MySqlParser.ST_Y - 942)) | (1 << (MySqlParser.SUBDATE - 942)) | (1 << (MySqlParser.SUBSTRING_INDEX - 942)) | (1 << (MySqlParser.SUBTIME - 942)) | (1 << (MySqlParser.SYSTEM_USER - 942)) | (1 << (MySqlParser.TAN - 942)) | (1 << (MySqlParser.TIMEDIFF - 942)) | (1 << (MySqlParser.TIMESTAMPADD - 942)) | (1 << (MySqlParser.TIMESTAMPDIFF - 942)) | (1 << (MySqlParser.TIME_FORMAT - 942)) | (1 << (MySqlParser.TIME_TO_SEC - 942)) | (1 << (MySqlParser.TOUCHES - 942)))) !== 0) || ((((_la - 974)) & ~0x1f) == 0 && ((1 << (_la - 974)) & ((1 << (MySqlParser.TO_BASE64 - 974)) | (1 << (MySqlParser.TO_DAYS - 974)) | (1 << (MySqlParser.TO_SECONDS - 974)) | (1 << (MySqlParser.UCASE - 974)) | (1 << (MySqlParser.UNCOMPRESS - 974)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 974)) | (1 << (MySqlParser.UNHEX - 974)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 974)) | (1 << (MySqlParser.UPDATEXML - 974)) | (1 << (MySqlParser.UPPER - 974)) | (1 << (MySqlParser.UUID - 974)) | (1 << (MySqlParser.UUID_SHORT - 974)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 974)) | (1 << (MySqlParser.VERSION - 974)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1 << (MySqlParser.WEEKDAY - 974)) | (1 << (MySqlParser.WEEKOFYEAR - 974)) | (1 << (MySqlParser.WEIGHT_STRING - 974)) | (1 << (MySqlParser.WITHIN - 974)) | (1 << (MySqlParser.YEARWEEK - 974)) | (1 << (MySqlParser.Y_FUNCTION - 974)) | (1 << (MySqlParser.X_FUNCTION - 974)))) !== 0) || ((((_la - 1034)) & ~0x1f) == 0 && ((1 << (_la - 1034)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (MySqlParser.STRING_LITERAL - 1034)) | (1 << (MySqlParser.ID - 1034)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1034)))) !== 0)) {
	                this.state = 2298;
	                this.uid();
	            }

	            this.state = 2302;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.USING) {
	                this.state = 2301;
	                this.indexType();
	            }

	            this.state = 2304;
	            this.indexColumnNames();
	            this.state = 2308;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.USING || _la===MySqlParser.WITH || _la===MySqlParser.COMMENT || _la===MySqlParser.INVISIBLE || _la===MySqlParser.KEY_BLOCK_SIZE || _la===MySqlParser.VISIBLE) {
	                this.state = 2305;
	                this.indexOption();
	                this.state = 2310;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 5:
	            localctx = new AlterByAddPrimaryKeyContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2311;
	            this.match(MySqlParser.ADD);
	            this.state = 2316;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.CONSTRAINT) {
	                this.state = 2312;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 2314;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySqlParser.CURRENT - 32)) | (1 << (MySqlParser.DATABASE - 32)) | (1 << (MySqlParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySqlParser.LEFT || _la===MySqlParser.NUMBER || _la===MySqlParser.RIGHT || _la===MySqlParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.TIMESTAMP - 199)) | (1 << (MySqlParser.DATETIME - 199)) | (1 << (MySqlParser.YEAR - 199)) | (1 << (MySqlParser.TEXT - 199)) | (1 << (MySqlParser.ENUM - 199)) | (1 << (MySqlParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.JSON_VALID - 233)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySqlParser.AVG - 233)) | (1 << (MySqlParser.BIT_AND - 233)) | (1 << (MySqlParser.BIT_OR - 233)) | (1 << (MySqlParser.BIT_XOR - 233)) | (1 << (MySqlParser.COUNT - 233)) | (1 << (MySqlParser.GROUP_CONCAT - 233)) | (1 << (MySqlParser.MAX - 233)) | (1 << (MySqlParser.MIN - 233)) | (1 << (MySqlParser.STD - 233)) | (1 << (MySqlParser.STDDEV - 233)) | (1 << (MySqlParser.STDDEV_POP - 233)) | (1 << (MySqlParser.STDDEV_SAMP - 233)) | (1 << (MySqlParser.SUM - 233)) | (1 << (MySqlParser.VAR_POP - 233)) | (1 << (MySqlParser.VAR_SAMP - 233)) | (1 << (MySqlParser.VARIANCE - 233)) | (1 << (MySqlParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySqlParser.ACCOUNT - 270)) | (1 << (MySqlParser.ACTION - 270)) | (1 << (MySqlParser.AFTER - 270)) | (1 << (MySqlParser.AGGREGATE - 270)) | (1 << (MySqlParser.ALGORITHM - 270)) | (1 << (MySqlParser.ANY - 270)) | (1 << (MySqlParser.AT - 270)) | (1 << (MySqlParser.AUTHORS - 270)) | (1 << (MySqlParser.AUTOCOMMIT - 270)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySqlParser.AUTO_INCREMENT - 270)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 270)) | (1 << (MySqlParser.BEGIN - 270)) | (1 << (MySqlParser.BINLOG - 270)) | (1 << (MySqlParser.BIT - 270)) | (1 << (MySqlParser.BLOCK - 270)) | (1 << (MySqlParser.BOOL - 270)) | (1 << (MySqlParser.BOOLEAN - 270)) | (1 << (MySqlParser.BTREE - 270)) | (1 << (MySqlParser.CACHE - 270)) | (1 << (MySqlParser.CASCADED - 270)) | (1 << (MySqlParser.CHAIN - 270)) | (1 << (MySqlParser.CHANGED - 270)) | (1 << (MySqlParser.CHANNEL - 270)) | (1 << (MySqlParser.CHECKSUM - 270)) | (1 << (MySqlParser.PAGE_CHECKSUM - 270)) | (1 << (MySqlParser.CIPHER - 270)) | (1 << (MySqlParser.CLASS_ORIGIN - 270)) | (1 << (MySqlParser.CLIENT - 270)) | (1 << (MySqlParser.CLOSE - 270)) | (1 << (MySqlParser.COALESCE - 270)) | (1 << (MySqlParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySqlParser.COLUMNS - 302)) | (1 << (MySqlParser.COLUMN_FORMAT - 302)) | (1 << (MySqlParser.COLUMN_NAME - 302)) | (1 << (MySqlParser.COMMENT - 302)) | (1 << (MySqlParser.COMMIT - 302)) | (1 << (MySqlParser.COMPACT - 302)) | (1 << (MySqlParser.COMPLETION - 302)) | (1 << (MySqlParser.COMPRESSED - 302)) | (1 << (MySqlParser.COMPRESSION - 302)) | (1 << (MySqlParser.CONCURRENT - 302)) | (1 << (MySqlParser.CONNECTION - 302)) | (1 << (MySqlParser.CONSISTENT - 302)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySqlParser.CONSTRAINT_NAME - 302)) | (1 << (MySqlParser.CONTAINS - 302)) | (1 << (MySqlParser.CONTEXT - 302)) | (1 << (MySqlParser.CONTRIBUTORS - 302)) | (1 << (MySqlParser.COPY - 302)) | (1 << (MySqlParser.CPU - 302)) | (1 << (MySqlParser.CURSOR_NAME - 302)) | (1 << (MySqlParser.DATA - 302)) | (1 << (MySqlParser.DATAFILE - 302)) | (1 << (MySqlParser.DEALLOCATE - 302)) | (1 << (MySqlParser.DEFAULT_AUTH - 302)) | (1 << (MySqlParser.DEFINER - 302)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 302)) | (1 << (MySqlParser.DES_KEY_FILE - 302)) | (1 << (MySqlParser.DIRECTORY - 302)) | (1 << (MySqlParser.DISABLE - 302)) | (1 << (MySqlParser.DISCARD - 302)) | (1 << (MySqlParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySqlParser.DO - 334)) | (1 << (MySqlParser.DUMPFILE - 334)) | (1 << (MySqlParser.DUPLICATE - 334)) | (1 << (MySqlParser.DYNAMIC - 334)) | (1 << (MySqlParser.ENABLE - 334)) | (1 << (MySqlParser.ENCRYPTION - 334)) | (1 << (MySqlParser.END - 334)) | (1 << (MySqlParser.ENDS - 334)) | (1 << (MySqlParser.ENGINE - 334)) | (1 << (MySqlParser.ENGINES - 334)) | (1 << (MySqlParser.ERROR - 334)) | (1 << (MySqlParser.ERRORS - 334)) | (1 << (MySqlParser.ESCAPE - 334)) | (1 << (MySqlParser.EVEN - 334)) | (1 << (MySqlParser.EVENT - 334)) | (1 << (MySqlParser.EVENTS - 334)) | (1 << (MySqlParser.EVERY - 334)) | (1 << (MySqlParser.EXCHANGE - 334)) | (1 << (MySqlParser.EXCLUSIVE - 334)) | (1 << (MySqlParser.EXPIRE - 334)) | (1 << (MySqlParser.EXPORT - 334)) | (1 << (MySqlParser.EXTENDED - 334)) | (1 << (MySqlParser.EXTENT_SIZE - 334)) | (1 << (MySqlParser.FAST - 334)) | (1 << (MySqlParser.FAULTS - 334)) | (1 << (MySqlParser.FIELDS - 334)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySqlParser.FILTER - 334)) | (1 << (MySqlParser.FIRST - 334)) | (1 << (MySqlParser.FIXED - 334)) | (1 << (MySqlParser.FLUSH - 334)) | (1 << (MySqlParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySqlParser.FOUND - 366)) | (1 << (MySqlParser.FULL - 366)) | (1 << (MySqlParser.FUNCTION - 366)) | (1 << (MySqlParser.GENERAL - 366)) | (1 << (MySqlParser.GLOBAL - 366)) | (1 << (MySqlParser.GRANTS - 366)) | (1 << (MySqlParser.GROUP_REPLICATION - 366)) | (1 << (MySqlParser.HANDLER - 366)) | (1 << (MySqlParser.HASH - 366)) | (1 << (MySqlParser.HELP - 366)) | (1 << (MySqlParser.HOST - 366)) | (1 << (MySqlParser.HOSTS - 366)) | (1 << (MySqlParser.IDENTIFIED - 366)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySqlParser.IMPORT - 366)) | (1 << (MySqlParser.INDEXES - 366)) | (1 << (MySqlParser.INITIAL_SIZE - 366)) | (1 << (MySqlParser.INPLACE - 366)) | (1 << (MySqlParser.INSERT_METHOD - 366)) | (1 << (MySqlParser.INSTALL - 366)) | (1 << (MySqlParser.INSTANCE - 366)) | (1 << (MySqlParser.INVISIBLE - 366)) | (1 << (MySqlParser.INVOKER - 366)) | (1 << (MySqlParser.IO - 366)) | (1 << (MySqlParser.IO_THREAD - 366)) | (1 << (MySqlParser.IPC - 366)) | (1 << (MySqlParser.ISOLATION - 366)) | (1 << (MySqlParser.ISSUER - 366)) | (1 << (MySqlParser.JSON - 366)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySqlParser.LANGUAGE - 366)) | (1 << (MySqlParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.LEAVES - 398)) | (1 << (MySqlParser.LESS - 398)) | (1 << (MySqlParser.LEVEL - 398)) | (1 << (MySqlParser.LIST - 398)) | (1 << (MySqlParser.LOCAL - 398)) | (1 << (MySqlParser.LOGFILE - 398)) | (1 << (MySqlParser.LOGS - 398)) | (1 << (MySqlParser.MASTER - 398)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySqlParser.MASTER_DELAY - 398)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySqlParser.MASTER_HOST - 398)) | (1 << (MySqlParser.MASTER_LOG_FILE - 398)) | (1 << (MySqlParser.MASTER_LOG_POS - 398)) | (1 << (MySqlParser.MASTER_PASSWORD - 398)) | (1 << (MySqlParser.MASTER_PORT - 398)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySqlParser.MASTER_SSL - 398)) | (1 << (MySqlParser.MASTER_SSL_CA - 398)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_CERT - 398)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySqlParser.MASTER_SSL_CRL - 398)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_KEY - 398)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 398)) | (1 << (MySqlParser.MASTER_USER - 398)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySqlParser.MEDIUM - 430)) | (1 << (MySqlParser.MEMBER - 430)) | (1 << (MySqlParser.MERGE - 430)) | (1 << (MySqlParser.MESSAGE_TEXT - 430)) | (1 << (MySqlParser.MID - 430)) | (1 << (MySqlParser.MIGRATE - 430)) | (1 << (MySqlParser.MIN_ROWS - 430)) | (1 << (MySqlParser.MODE - 430)) | (1 << (MySqlParser.MODIFY - 430)) | (1 << (MySqlParser.MUTEX - 430)) | (1 << (MySqlParser.MYSQL - 430)) | (1 << (MySqlParser.MYSQL_ERRNO - 430)) | (1 << (MySqlParser.NAME - 430)) | (1 << (MySqlParser.NAMES - 430)) | (1 << (MySqlParser.NCHAR - 430)) | (1 << (MySqlParser.NEVER - 430)) | (1 << (MySqlParser.NEXT - 430)) | (1 << (MySqlParser.NO - 430)) | (1 << (MySqlParser.NODEGROUP - 430)) | (1 << (MySqlParser.NONE - 430)) | (1 << (MySqlParser.OFFLINE - 430)) | (1 << (MySqlParser.OFFSET - 430)) | (1 << (MySqlParser.OF - 430)) | (1 << (MySqlParser.OJ - 430)) | (1 << (MySqlParser.OLD_PASSWORD - 430)) | (1 << (MySqlParser.ONE - 430)) | (1 << (MySqlParser.ONLINE - 430)) | (1 << (MySqlParser.ONLY - 430)) | (1 << (MySqlParser.OPEN - 430)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySqlParser.OPTIONS - 462)) | (1 << (MySqlParser.OWNER - 462)) | (1 << (MySqlParser.PACK_KEYS - 462)) | (1 << (MySqlParser.PAGE - 462)) | (1 << (MySqlParser.PARSER - 462)) | (1 << (MySqlParser.PARTIAL - 462)) | (1 << (MySqlParser.PARTITIONING - 462)) | (1 << (MySqlParser.PARTITIONS - 462)) | (1 << (MySqlParser.PASSWORD - 462)) | (1 << (MySqlParser.PHASE - 462)) | (1 << (MySqlParser.PLUGIN - 462)) | (1 << (MySqlParser.PLUGIN_DIR - 462)) | (1 << (MySqlParser.PLUGINS - 462)) | (1 << (MySqlParser.PORT - 462)) | (1 << (MySqlParser.PRECEDES - 462)) | (1 << (MySqlParser.PREPARE - 462)) | (1 << (MySqlParser.PRESERVE - 462)) | (1 << (MySqlParser.PREV - 462)) | (1 << (MySqlParser.PROCESSLIST - 462)) | (1 << (MySqlParser.PROFILE - 462)) | (1 << (MySqlParser.PROFILES - 462)) | (1 << (MySqlParser.PROXY - 462)) | (1 << (MySqlParser.QUERY - 462)) | (1 << (MySqlParser.QUICK - 462)) | (1 << (MySqlParser.REBUILD - 462)) | (1 << (MySqlParser.RECOVER - 462)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySqlParser.REDUNDANT - 462)) | (1 << (MySqlParser.RELAY - 462)) | (1 << (MySqlParser.RELAY_LOG_FILE - 462)) | (1 << (MySqlParser.RELAY_LOG_POS - 462)) | (1 << (MySqlParser.RELAYLOG - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySqlParser.REMOVE - 494)) | (1 << (MySqlParser.REORGANIZE - 494)) | (1 << (MySqlParser.REPAIR - 494)) | (1 << (MySqlParser.REPLICATE_DO_DB - 494)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATION - 494)) | (1 << (MySqlParser.RESET - 494)) | (1 << (MySqlParser.RESUME - 494)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 494)) | (1 << (MySqlParser.RETURNS - 494)) | (1 << (MySqlParser.ROLE - 494)) | (1 << (MySqlParser.ROLLBACK - 494)) | (1 << (MySqlParser.ROLLUP - 494)) | (1 << (MySqlParser.ROTATE - 494)) | (1 << (MySqlParser.ROW - 494)) | (1 << (MySqlParser.ROWS - 494)) | (1 << (MySqlParser.ROW_FORMAT - 494)) | (1 << (MySqlParser.SAVEPOINT - 494)) | (1 << (MySqlParser.SCHEDULE - 494)) | (1 << (MySqlParser.SECURITY - 494)) | (1 << (MySqlParser.SERVER - 494)) | (1 << (MySqlParser.SESSION - 494)) | (1 << (MySqlParser.SHARE - 494)) | (1 << (MySqlParser.SHARED - 494)) | (1 << (MySqlParser.SIGNED - 494)) | (1 << (MySqlParser.SIMPLE - 494)) | (1 << (MySqlParser.SLAVE - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySqlParser.SLOW - 526)) | (1 << (MySqlParser.SNAPSHOT - 526)) | (1 << (MySqlParser.SOCKET - 526)) | (1 << (MySqlParser.SOME - 526)) | (1 << (MySqlParser.SONAME - 526)) | (1 << (MySqlParser.SOUNDS - 526)) | (1 << (MySqlParser.SOURCE - 526)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySqlParser.SQL_CACHE - 526)) | (1 << (MySqlParser.SQL_NO_CACHE - 526)) | (1 << (MySqlParser.SQL_THREAD - 526)) | (1 << (MySqlParser.START - 526)) | (1 << (MySqlParser.STARTS - 526)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 526)) | (1 << (MySqlParser.STATS_PERSISTENT - 526)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySqlParser.STATUS - 526)) | (1 << (MySqlParser.STOP - 526)) | (1 << (MySqlParser.STORAGE - 526)) | (1 << (MySqlParser.STRING - 526)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySqlParser.SUBJECT - 526)) | (1 << (MySqlParser.SUBPARTITION - 526)) | (1 << (MySqlParser.SUBPARTITIONS - 526)) | (1 << (MySqlParser.SUSPEND - 526)) | (1 << (MySqlParser.SWAPS - 526)) | (1 << (MySqlParser.SWITCHES - 526)) | (1 << (MySqlParser.TABLE_NAME - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySqlParser.TABLESPACE - 558)) | (1 << (MySqlParser.TEMPORARY - 558)) | (1 << (MySqlParser.TEMPTABLE - 558)) | (1 << (MySqlParser.THAN - 558)) | (1 << (MySqlParser.TRADITIONAL - 558)) | (1 << (MySqlParser.TRANSACTION - 558)) | (1 << (MySqlParser.TRANSACTIONAL - 558)) | (1 << (MySqlParser.TRIGGERS - 558)) | (1 << (MySqlParser.TRUNCATE - 558)) | (1 << (MySqlParser.UNDEFINED - 558)) | (1 << (MySqlParser.UNDOFILE - 558)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySqlParser.UNINSTALL - 558)) | (1 << (MySqlParser.UNKNOWN - 558)) | (1 << (MySqlParser.UNTIL - 558)) | (1 << (MySqlParser.UPGRADE - 558)) | (1 << (MySqlParser.USER - 558)) | (1 << (MySqlParser.USE_FRM - 558)) | (1 << (MySqlParser.USER_RESOURCES - 558)) | (1 << (MySqlParser.VALIDATION - 558)) | (1 << (MySqlParser.VALUE - 558)) | (1 << (MySqlParser.VARIABLES - 558)) | (1 << (MySqlParser.VIEW - 558)) | (1 << (MySqlParser.VISIBLE - 558)) | (1 << (MySqlParser.WAIT - 558)) | (1 << (MySqlParser.WARNINGS - 558)) | (1 << (MySqlParser.WITHOUT - 558)) | (1 << (MySqlParser.WORK - 558)) | (1 << (MySqlParser.WRAPPER - 558)) | (1 << (MySqlParser.X509 - 558)) | (1 << (MySqlParser.XA - 558)))) !== 0) || ((((_la - 590)) & ~0x1f) == 0 && ((1 << (_la - 590)) & ((1 << (MySqlParser.XML - 590)) | (1 << (MySqlParser.INTERNAL - 590)) | (1 << (MySqlParser.QUARTER - 590)) | (1 << (MySqlParser.MONTH - 590)) | (1 << (MySqlParser.DAY - 590)) | (1 << (MySqlParser.HOUR - 590)) | (1 << (MySqlParser.MINUTE - 590)) | (1 << (MySqlParser.WEEK - 590)) | (1 << (MySqlParser.SECOND - 590)) | (1 << (MySqlParser.MICROSECOND - 590)) | (1 << (MySqlParser.TABLES - 590)) | (1 << (MySqlParser.ROUTINE - 590)) | (1 << (MySqlParser.EXECUTE - 590)) | (1 << (MySqlParser.FILE - 590)) | (1 << (MySqlParser.PROCESS - 590)) | (1 << (MySqlParser.RELOAD - 590)) | (1 << (MySqlParser.SHUTDOWN - 590)) | (1 << (MySqlParser.SUPER - 590)) | (1 << (MySqlParser.PRIVILEGES - 590)) | (1 << (MySqlParser.AUDIT_ADMIN - 590)) | (1 << (MySqlParser.BACKUP_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 590)) | (1 << (MySqlParser.CLONE_ADMIN - 590)) | (1 << (MySqlParser.CONNECTION_ADMIN - 590)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 590)) | (1 << (MySqlParser.FIREWALL_ADMIN - 590)))) !== 0) || ((((_la - 622)) & ~0x1f) == 0 && ((1 << (_la - 622)) & ((1 << (MySqlParser.FIREWALL_USER - 622)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 622)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 622)) | (1 << (MySqlParser.NDB_STORED_USER - 622)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.REPLICATION_APPLIER - 622)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 622)) | (1 << (MySqlParser.ROLE_ADMIN - 622)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.SET_USER_ID - 622)) | (1 << (MySqlParser.SHOW_ROUTINE - 622)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 622)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 622)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 622)) | (1 << (MySqlParser.ARMSCII8 - 622)) | (1 << (MySqlParser.ASCII - 622)) | (1 << (MySqlParser.BIG5 - 622)) | (1 << (MySqlParser.CP1250 - 622)) | (1 << (MySqlParser.CP1251 - 622)) | (1 << (MySqlParser.CP1256 - 622)) | (1 << (MySqlParser.CP1257 - 622)) | (1 << (MySqlParser.CP850 - 622)) | (1 << (MySqlParser.CP852 - 622)) | (1 << (MySqlParser.CP866 - 622)) | (1 << (MySqlParser.CP932 - 622)) | (1 << (MySqlParser.DEC8 - 622)) | (1 << (MySqlParser.EUCJPMS - 622)) | (1 << (MySqlParser.EUCKR - 622)) | (1 << (MySqlParser.GB2312 - 622)))) !== 0) || ((((_la - 654)) & ~0x1f) == 0 && ((1 << (_la - 654)) & ((1 << (MySqlParser.GBK - 654)) | (1 << (MySqlParser.GEOSTD8 - 654)) | (1 << (MySqlParser.GREEK - 654)) | (1 << (MySqlParser.HEBREW - 654)) | (1 << (MySqlParser.HP8 - 654)) | (1 << (MySqlParser.KEYBCS2 - 654)) | (1 << (MySqlParser.KOI8R - 654)) | (1 << (MySqlParser.KOI8U - 654)) | (1 << (MySqlParser.LATIN1 - 654)) | (1 << (MySqlParser.LATIN2 - 654)) | (1 << (MySqlParser.LATIN5 - 654)) | (1 << (MySqlParser.LATIN7 - 654)) | (1 << (MySqlParser.MACCE - 654)) | (1 << (MySqlParser.MACROMAN - 654)) | (1 << (MySqlParser.SJIS - 654)) | (1 << (MySqlParser.SWE7 - 654)) | (1 << (MySqlParser.TIS620 - 654)) | (1 << (MySqlParser.UCS2 - 654)) | (1 << (MySqlParser.UJIS - 654)) | (1 << (MySqlParser.UTF16 - 654)) | (1 << (MySqlParser.UTF16LE - 654)) | (1 << (MySqlParser.UTF32 - 654)) | (1 << (MySqlParser.UTF8 - 654)) | (1 << (MySqlParser.UTF8MB3 - 654)) | (1 << (MySqlParser.UTF8MB4 - 654)) | (1 << (MySqlParser.ARCHIVE - 654)) | (1 << (MySqlParser.BLACKHOLE - 654)) | (1 << (MySqlParser.CSV - 654)) | (1 << (MySqlParser.FEDERATED - 654)) | (1 << (MySqlParser.INNODB - 654)) | (1 << (MySqlParser.MEMORY - 654)) | (1 << (MySqlParser.MRG_MYISAM - 654)))) !== 0) || ((((_la - 686)) & ~0x1f) == 0 && ((1 << (_la - 686)) & ((1 << (MySqlParser.MYISAM - 686)) | (1 << (MySqlParser.NDB - 686)) | (1 << (MySqlParser.NDBCLUSTER - 686)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 686)) | (1 << (MySqlParser.TOKUDB - 686)) | (1 << (MySqlParser.REPEATABLE - 686)) | (1 << (MySqlParser.COMMITTED - 686)) | (1 << (MySqlParser.UNCOMMITTED - 686)) | (1 << (MySqlParser.SERIALIZABLE - 686)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 686)) | (1 << (MySqlParser.LINESTRING - 686)) | (1 << (MySqlParser.MULTILINESTRING - 686)) | (1 << (MySqlParser.MULTIPOINT - 686)) | (1 << (MySqlParser.MULTIPOLYGON - 686)) | (1 << (MySqlParser.POINT - 686)) | (1 << (MySqlParser.POLYGON - 686)) | (1 << (MySqlParser.ABS - 686)) | (1 << (MySqlParser.ACOS - 686)) | (1 << (MySqlParser.ADDDATE - 686)) | (1 << (MySqlParser.ADDTIME - 686)) | (1 << (MySqlParser.AES_DECRYPT - 686)) | (1 << (MySqlParser.AES_ENCRYPT - 686)) | (1 << (MySqlParser.AREA - 686)) | (1 << (MySqlParser.ASBINARY - 686)) | (1 << (MySqlParser.ASIN - 686)) | (1 << (MySqlParser.ASTEXT - 686)) | (1 << (MySqlParser.ASWKB - 686)) | (1 << (MySqlParser.ASWKT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 686)))) !== 0) || ((((_la - 718)) & ~0x1f) == 0 && ((1 << (_la - 718)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 718)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 718)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 718)) | (1 << (MySqlParser.ATAN - 718)) | (1 << (MySqlParser.ATAN2 - 718)) | (1 << (MySqlParser.BENCHMARK - 718)) | (1 << (MySqlParser.BIN - 718)) | (1 << (MySqlParser.BIT_COUNT - 718)) | (1 << (MySqlParser.BIT_LENGTH - 718)) | (1 << (MySqlParser.BUFFER - 718)) | (1 << (MySqlParser.CATALOG_NAME - 718)) | (1 << (MySqlParser.CEIL - 718)) | (1 << (MySqlParser.CEILING - 718)) | (1 << (MySqlParser.CENTROID - 718)) | (1 << (MySqlParser.CHARACTER_LENGTH - 718)) | (1 << (MySqlParser.CHARSET - 718)) | (1 << (MySqlParser.CHAR_LENGTH - 718)) | (1 << (MySqlParser.COERCIBILITY - 718)) | (1 << (MySqlParser.COLLATION - 718)) | (1 << (MySqlParser.COMPRESS - 718)) | (1 << (MySqlParser.CONCAT - 718)) | (1 << (MySqlParser.CONCAT_WS - 718)) | (1 << (MySqlParser.CONNECTION_ID - 718)) | (1 << (MySqlParser.CONV - 718)) | (1 << (MySqlParser.CONVERT_TZ - 718)) | (1 << (MySqlParser.COS - 718)) | (1 << (MySqlParser.COT - 718)) | (1 << (MySqlParser.CRC32 - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 718)) | (1 << (MySqlParser.CREATE_DIGEST - 718)))) !== 0) || ((((_la - 750)) & ~0x1f) == 0 && ((1 << (_la - 750)) & ((1 << (MySqlParser.CROSSES - 750)) | (1 << (MySqlParser.DATEDIFF - 750)) | (1 << (MySqlParser.DATE_FORMAT - 750)) | (1 << (MySqlParser.DAYNAME - 750)) | (1 << (MySqlParser.DAYOFMONTH - 750)) | (1 << (MySqlParser.DAYOFWEEK - 750)) | (1 << (MySqlParser.DAYOFYEAR - 750)) | (1 << (MySqlParser.DECODE - 750)) | (1 << (MySqlParser.DEGREES - 750)) | (1 << (MySqlParser.DES_DECRYPT - 750)) | (1 << (MySqlParser.DES_ENCRYPT - 750)) | (1 << (MySqlParser.DIMENSION - 750)) | (1 << (MySqlParser.DISJOINT - 750)) | (1 << (MySqlParser.ELT - 750)) | (1 << (MySqlParser.ENCODE - 750)) | (1 << (MySqlParser.ENCRYPT - 750)) | (1 << (MySqlParser.ENDPOINT - 750)) | (1 << (MySqlParser.ENVELOPE - 750)) | (1 << (MySqlParser.EQUALS - 750)) | (1 << (MySqlParser.EXP - 750)) | (1 << (MySqlParser.EXPORT_SET - 750)) | (1 << (MySqlParser.EXTERIORRING - 750)) | (1 << (MySqlParser.EXTRACTVALUE - 750)) | (1 << (MySqlParser.FIELD - 750)) | (1 << (MySqlParser.FIND_IN_SET - 750)) | (1 << (MySqlParser.FLOOR - 750)) | (1 << (MySqlParser.FORMAT - 750)) | (1 << (MySqlParser.FOUND_ROWS - 750)) | (1 << (MySqlParser.FROM_BASE64 - 750)) | (1 << (MySqlParser.FROM_DAYS - 750)) | (1 << (MySqlParser.FROM_UNIXTIME - 750)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 750)))) !== 0) || ((((_la - 782)) & ~0x1f) == 0 && ((1 << (_la - 782)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYN - 782)) | (1 << (MySqlParser.GEOMETRYTYPE - 782)) | (1 << (MySqlParser.GEOMFROMTEXT - 782)) | (1 << (MySqlParser.GEOMFROMWKB - 782)) | (1 << (MySqlParser.GET_FORMAT - 782)) | (1 << (MySqlParser.GET_LOCK - 782)) | (1 << (MySqlParser.GLENGTH - 782)) | (1 << (MySqlParser.GREATEST - 782)) | (1 << (MySqlParser.GTID_SUBSET - 782)) | (1 << (MySqlParser.GTID_SUBTRACT - 782)) | (1 << (MySqlParser.HEX - 782)) | (1 << (MySqlParser.IFNULL - 782)) | (1 << (MySqlParser.INET6_ATON - 782)) | (1 << (MySqlParser.INET6_NTOA - 782)) | (1 << (MySqlParser.INET_ATON - 782)) | (1 << (MySqlParser.INET_NTOA - 782)) | (1 << (MySqlParser.INSTR - 782)) | (1 << (MySqlParser.INTERIORRINGN - 782)) | (1 << (MySqlParser.INTERSECTS - 782)) | (1 << (MySqlParser.ISCLOSED - 782)) | (1 << (MySqlParser.ISEMPTY - 782)) | (1 << (MySqlParser.ISNULL - 782)) | (1 << (MySqlParser.ISSIMPLE - 782)) | (1 << (MySqlParser.IS_FREE_LOCK - 782)) | (1 << (MySqlParser.IS_IPV4 - 782)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 782)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 782)))) !== 0) || ((((_la - 814)) & ~0x1f) == 0 && ((1 << (_la - 814)) & ((1 << (MySqlParser.IS_IPV6 - 814)) | (1 << (MySqlParser.IS_USED_LOCK - 814)) | (1 << (MySqlParser.LAST_INSERT_ID - 814)) | (1 << (MySqlParser.LCASE - 814)) | (1 << (MySqlParser.LEAST - 814)) | (1 << (MySqlParser.LENGTH - 814)) | (1 << (MySqlParser.LINEFROMTEXT - 814)) | (1 << (MySqlParser.LINEFROMWKB - 814)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 814)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 814)) | (1 << (MySqlParser.LN - 814)) | (1 << (MySqlParser.LOAD_FILE - 814)) | (1 << (MySqlParser.LOCATE - 814)) | (1 << (MySqlParser.LOG - 814)) | (1 << (MySqlParser.LOG10 - 814)) | (1 << (MySqlParser.LOG2 - 814)) | (1 << (MySqlParser.LOWER - 814)) | (1 << (MySqlParser.LPAD - 814)) | (1 << (MySqlParser.LTRIM - 814)) | (1 << (MySqlParser.MAKEDATE - 814)) | (1 << (MySqlParser.MAKETIME - 814)) | (1 << (MySqlParser.MAKE_SET - 814)) | (1 << (MySqlParser.MASTER_POS_WAIT - 814)) | (1 << (MySqlParser.MBRCONTAINS - 814)) | (1 << (MySqlParser.MBRDISJOINT - 814)) | (1 << (MySqlParser.MBREQUAL - 814)) | (1 << (MySqlParser.MBRINTERSECTS - 814)) | (1 << (MySqlParser.MBROVERLAPS - 814)) | (1 << (MySqlParser.MBRTOUCHES - 814)) | (1 << (MySqlParser.MBRWITHIN - 814)) | (1 << (MySqlParser.MD5 - 814)) | (1 << (MySqlParser.MLINEFROMTEXT - 814)))) !== 0) || ((((_la - 846)) & ~0x1f) == 0 && ((1 << (_la - 846)) & ((1 << (MySqlParser.MLINEFROMWKB - 846)) | (1 << (MySqlParser.MONTHNAME - 846)) | (1 << (MySqlParser.MPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MPOINTFROMWKB - 846)) | (1 << (MySqlParser.MPOLYFROMTEXT - 846)) | (1 << (MySqlParser.MPOLYFROMWKB - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 846)) | (1 << (MySqlParser.NAME_CONST - 846)) | (1 << (MySqlParser.NULLIF - 846)) | (1 << (MySqlParser.NUMGEOMETRIES - 846)) | (1 << (MySqlParser.NUMINTERIORRINGS - 846)) | (1 << (MySqlParser.NUMPOINTS - 846)) | (1 << (MySqlParser.OCT - 846)) | (1 << (MySqlParser.OCTET_LENGTH - 846)) | (1 << (MySqlParser.ORD - 846)) | (1 << (MySqlParser.OVERLAPS - 846)) | (1 << (MySqlParser.PERIOD_ADD - 846)) | (1 << (MySqlParser.PERIOD_DIFF - 846)) | (1 << (MySqlParser.PI - 846)) | (1 << (MySqlParser.POINTFROMTEXT - 846)) | (1 << (MySqlParser.POINTFROMWKB - 846)) | (1 << (MySqlParser.POINTN - 846)) | (1 << (MySqlParser.POLYFROMTEXT - 846)) | (1 << (MySqlParser.POLYFROMWKB - 846)) | (1 << (MySqlParser.POLYGONFROMTEXT - 846)) | (1 << (MySqlParser.POLYGONFROMWKB - 846)) | (1 << (MySqlParser.POW - 846)))) !== 0) || ((((_la - 878)) & ~0x1f) == 0 && ((1 << (_la - 878)) & ((1 << (MySqlParser.POWER - 878)) | (1 << (MySqlParser.QUOTE - 878)) | (1 << (MySqlParser.RADIANS - 878)) | (1 << (MySqlParser.RAND - 878)) | (1 << (MySqlParser.RANDOM_BYTES - 878)) | (1 << (MySqlParser.RELEASE_LOCK - 878)) | (1 << (MySqlParser.REVERSE - 878)) | (1 << (MySqlParser.ROUND - 878)) | (1 << (MySqlParser.ROW_COUNT - 878)) | (1 << (MySqlParser.RPAD - 878)) | (1 << (MySqlParser.RTRIM - 878)) | (1 << (MySqlParser.SEC_TO_TIME - 878)) | (1 << (MySqlParser.SESSION_USER - 878)) | (1 << (MySqlParser.SHA - 878)) | (1 << (MySqlParser.SHA1 - 878)) | (1 << (MySqlParser.SHA2 - 878)) | (1 << (MySqlParser.SCHEMA_NAME - 878)) | (1 << (MySqlParser.SIGN - 878)) | (1 << (MySqlParser.SIN - 878)) | (1 << (MySqlParser.SLEEP - 878)) | (1 << (MySqlParser.SOUNDEX - 878)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 878)) | (1 << (MySqlParser.SQRT - 878)) | (1 << (MySqlParser.SRID - 878)) | (1 << (MySqlParser.STARTPOINT - 878)) | (1 << (MySqlParser.STRCMP - 878)) | (1 << (MySqlParser.STR_TO_DATE - 878)) | (1 << (MySqlParser.ST_AREA - 878)) | (1 << (MySqlParser.ST_ASBINARY - 878)) | (1 << (MySqlParser.ST_ASTEXT - 878)) | (1 << (MySqlParser.ST_ASWKB - 878)) | (1 << (MySqlParser.ST_ASWKT - 878)))) !== 0) || ((((_la - 910)) & ~0x1f) == 0 && ((1 << (_la - 910)) & ((1 << (MySqlParser.ST_BUFFER - 910)) | (1 << (MySqlParser.ST_CENTROID - 910)) | (1 << (MySqlParser.ST_CONTAINS - 910)) | (1 << (MySqlParser.ST_CROSSES - 910)) | (1 << (MySqlParser.ST_DIFFERENCE - 910)) | (1 << (MySqlParser.ST_DIMENSION - 910)) | (1 << (MySqlParser.ST_DISJOINT - 910)) | (1 << (MySqlParser.ST_DISTANCE - 910)) | (1 << (MySqlParser.ST_ENDPOINT - 910)) | (1 << (MySqlParser.ST_ENVELOPE - 910)) | (1 << (MySqlParser.ST_EQUALS - 910)) | (1 << (MySqlParser.ST_EXTERIORRING - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYN - 910)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 910)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 910)) | (1 << (MySqlParser.ST_INTERIORRINGN - 910)) | (1 << (MySqlParser.ST_INTERSECTION - 910)) | (1 << (MySqlParser.ST_INTERSECTS - 910)) | (1 << (MySqlParser.ST_ISCLOSED - 910)) | (1 << (MySqlParser.ST_ISEMPTY - 910)) | (1 << (MySqlParser.ST_ISSIMPLE - 910)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 910)) | (1 << (MySqlParser.ST_LINEFROMWKB - 910)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 910)))) !== 0) || ((((_la - 942)) & ~0x1f) == 0 && ((1 << (_la - 942)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 942)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 942)) | (1 << (MySqlParser.ST_NUMPOINTS - 942)) | (1 << (MySqlParser.ST_OVERLAPS - 942)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 942)) | (1 << (MySqlParser.ST_POINTFROMWKB - 942)) | (1 << (MySqlParser.ST_POINTN - 942)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYFROMWKB - 942)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 942)) | (1 << (MySqlParser.ST_SRID - 942)) | (1 << (MySqlParser.ST_STARTPOINT - 942)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 942)) | (1 << (MySqlParser.ST_TOUCHES - 942)) | (1 << (MySqlParser.ST_UNION - 942)) | (1 << (MySqlParser.ST_WITHIN - 942)) | (1 << (MySqlParser.ST_X - 942)) | (1 << (MySqlParser.ST_Y - 942)) | (1 << (MySqlParser.SUBDATE - 942)) | (1 << (MySqlParser.SUBSTRING_INDEX - 942)) | (1 << (MySqlParser.SUBTIME - 942)) | (1 << (MySqlParser.SYSTEM_USER - 942)) | (1 << (MySqlParser.TAN - 942)) | (1 << (MySqlParser.TIMEDIFF - 942)) | (1 << (MySqlParser.TIMESTAMPADD - 942)) | (1 << (MySqlParser.TIMESTAMPDIFF - 942)) | (1 << (MySqlParser.TIME_FORMAT - 942)) | (1 << (MySqlParser.TIME_TO_SEC - 942)) | (1 << (MySqlParser.TOUCHES - 942)))) !== 0) || ((((_la - 974)) & ~0x1f) == 0 && ((1 << (_la - 974)) & ((1 << (MySqlParser.TO_BASE64 - 974)) | (1 << (MySqlParser.TO_DAYS - 974)) | (1 << (MySqlParser.TO_SECONDS - 974)) | (1 << (MySqlParser.UCASE - 974)) | (1 << (MySqlParser.UNCOMPRESS - 974)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 974)) | (1 << (MySqlParser.UNHEX - 974)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 974)) | (1 << (MySqlParser.UPDATEXML - 974)) | (1 << (MySqlParser.UPPER - 974)) | (1 << (MySqlParser.UUID - 974)) | (1 << (MySqlParser.UUID_SHORT - 974)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 974)) | (1 << (MySqlParser.VERSION - 974)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1 << (MySqlParser.WEEKDAY - 974)) | (1 << (MySqlParser.WEEKOFYEAR - 974)) | (1 << (MySqlParser.WEIGHT_STRING - 974)) | (1 << (MySqlParser.WITHIN - 974)) | (1 << (MySqlParser.YEARWEEK - 974)) | (1 << (MySqlParser.Y_FUNCTION - 974)) | (1 << (MySqlParser.X_FUNCTION - 974)))) !== 0) || ((((_la - 1034)) & ~0x1f) == 0 && ((1 << (_la - 1034)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (MySqlParser.STRING_LITERAL - 1034)) | (1 << (MySqlParser.ID - 1034)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1034)))) !== 0)) {
	                    this.state = 2313;
	                    localctx.name = this.uid();
	                }

	            }

	            this.state = 2318;
	            this.match(MySqlParser.PRIMARY);
	            this.state = 2319;
	            this.match(MySqlParser.KEY);
	            this.state = 2321;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySqlParser.CURRENT - 32)) | (1 << (MySqlParser.DATABASE - 32)) | (1 << (MySqlParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySqlParser.LEFT || _la===MySqlParser.NUMBER || _la===MySqlParser.RIGHT || _la===MySqlParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.TIMESTAMP - 199)) | (1 << (MySqlParser.DATETIME - 199)) | (1 << (MySqlParser.YEAR - 199)) | (1 << (MySqlParser.TEXT - 199)) | (1 << (MySqlParser.ENUM - 199)) | (1 << (MySqlParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.JSON_VALID - 233)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySqlParser.AVG - 233)) | (1 << (MySqlParser.BIT_AND - 233)) | (1 << (MySqlParser.BIT_OR - 233)) | (1 << (MySqlParser.BIT_XOR - 233)) | (1 << (MySqlParser.COUNT - 233)) | (1 << (MySqlParser.GROUP_CONCAT - 233)) | (1 << (MySqlParser.MAX - 233)) | (1 << (MySqlParser.MIN - 233)) | (1 << (MySqlParser.STD - 233)) | (1 << (MySqlParser.STDDEV - 233)) | (1 << (MySqlParser.STDDEV_POP - 233)) | (1 << (MySqlParser.STDDEV_SAMP - 233)) | (1 << (MySqlParser.SUM - 233)) | (1 << (MySqlParser.VAR_POP - 233)) | (1 << (MySqlParser.VAR_SAMP - 233)) | (1 << (MySqlParser.VARIANCE - 233)) | (1 << (MySqlParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySqlParser.ACCOUNT - 270)) | (1 << (MySqlParser.ACTION - 270)) | (1 << (MySqlParser.AFTER - 270)) | (1 << (MySqlParser.AGGREGATE - 270)) | (1 << (MySqlParser.ALGORITHM - 270)) | (1 << (MySqlParser.ANY - 270)) | (1 << (MySqlParser.AT - 270)) | (1 << (MySqlParser.AUTHORS - 270)) | (1 << (MySqlParser.AUTOCOMMIT - 270)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySqlParser.AUTO_INCREMENT - 270)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 270)) | (1 << (MySqlParser.BEGIN - 270)) | (1 << (MySqlParser.BINLOG - 270)) | (1 << (MySqlParser.BIT - 270)) | (1 << (MySqlParser.BLOCK - 270)) | (1 << (MySqlParser.BOOL - 270)) | (1 << (MySqlParser.BOOLEAN - 270)) | (1 << (MySqlParser.BTREE - 270)) | (1 << (MySqlParser.CACHE - 270)) | (1 << (MySqlParser.CASCADED - 270)) | (1 << (MySqlParser.CHAIN - 270)) | (1 << (MySqlParser.CHANGED - 270)) | (1 << (MySqlParser.CHANNEL - 270)) | (1 << (MySqlParser.CHECKSUM - 270)) | (1 << (MySqlParser.PAGE_CHECKSUM - 270)) | (1 << (MySqlParser.CIPHER - 270)) | (1 << (MySqlParser.CLASS_ORIGIN - 270)) | (1 << (MySqlParser.CLIENT - 270)) | (1 << (MySqlParser.CLOSE - 270)) | (1 << (MySqlParser.COALESCE - 270)) | (1 << (MySqlParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySqlParser.COLUMNS - 302)) | (1 << (MySqlParser.COLUMN_FORMAT - 302)) | (1 << (MySqlParser.COLUMN_NAME - 302)) | (1 << (MySqlParser.COMMENT - 302)) | (1 << (MySqlParser.COMMIT - 302)) | (1 << (MySqlParser.COMPACT - 302)) | (1 << (MySqlParser.COMPLETION - 302)) | (1 << (MySqlParser.COMPRESSED - 302)) | (1 << (MySqlParser.COMPRESSION - 302)) | (1 << (MySqlParser.CONCURRENT - 302)) | (1 << (MySqlParser.CONNECTION - 302)) | (1 << (MySqlParser.CONSISTENT - 302)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySqlParser.CONSTRAINT_NAME - 302)) | (1 << (MySqlParser.CONTAINS - 302)) | (1 << (MySqlParser.CONTEXT - 302)) | (1 << (MySqlParser.CONTRIBUTORS - 302)) | (1 << (MySqlParser.COPY - 302)) | (1 << (MySqlParser.CPU - 302)) | (1 << (MySqlParser.CURSOR_NAME - 302)) | (1 << (MySqlParser.DATA - 302)) | (1 << (MySqlParser.DATAFILE - 302)) | (1 << (MySqlParser.DEALLOCATE - 302)) | (1 << (MySqlParser.DEFAULT_AUTH - 302)) | (1 << (MySqlParser.DEFINER - 302)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 302)) | (1 << (MySqlParser.DES_KEY_FILE - 302)) | (1 << (MySqlParser.DIRECTORY - 302)) | (1 << (MySqlParser.DISABLE - 302)) | (1 << (MySqlParser.DISCARD - 302)) | (1 << (MySqlParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySqlParser.DO - 334)) | (1 << (MySqlParser.DUMPFILE - 334)) | (1 << (MySqlParser.DUPLICATE - 334)) | (1 << (MySqlParser.DYNAMIC - 334)) | (1 << (MySqlParser.ENABLE - 334)) | (1 << (MySqlParser.ENCRYPTION - 334)) | (1 << (MySqlParser.END - 334)) | (1 << (MySqlParser.ENDS - 334)) | (1 << (MySqlParser.ENGINE - 334)) | (1 << (MySqlParser.ENGINES - 334)) | (1 << (MySqlParser.ERROR - 334)) | (1 << (MySqlParser.ERRORS - 334)) | (1 << (MySqlParser.ESCAPE - 334)) | (1 << (MySqlParser.EVEN - 334)) | (1 << (MySqlParser.EVENT - 334)) | (1 << (MySqlParser.EVENTS - 334)) | (1 << (MySqlParser.EVERY - 334)) | (1 << (MySqlParser.EXCHANGE - 334)) | (1 << (MySqlParser.EXCLUSIVE - 334)) | (1 << (MySqlParser.EXPIRE - 334)) | (1 << (MySqlParser.EXPORT - 334)) | (1 << (MySqlParser.EXTENDED - 334)) | (1 << (MySqlParser.EXTENT_SIZE - 334)) | (1 << (MySqlParser.FAST - 334)) | (1 << (MySqlParser.FAULTS - 334)) | (1 << (MySqlParser.FIELDS - 334)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySqlParser.FILTER - 334)) | (1 << (MySqlParser.FIRST - 334)) | (1 << (MySqlParser.FIXED - 334)) | (1 << (MySqlParser.FLUSH - 334)) | (1 << (MySqlParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySqlParser.FOUND - 366)) | (1 << (MySqlParser.FULL - 366)) | (1 << (MySqlParser.FUNCTION - 366)) | (1 << (MySqlParser.GENERAL - 366)) | (1 << (MySqlParser.GLOBAL - 366)) | (1 << (MySqlParser.GRANTS - 366)) | (1 << (MySqlParser.GROUP_REPLICATION - 366)) | (1 << (MySqlParser.HANDLER - 366)) | (1 << (MySqlParser.HASH - 366)) | (1 << (MySqlParser.HELP - 366)) | (1 << (MySqlParser.HOST - 366)) | (1 << (MySqlParser.HOSTS - 366)) | (1 << (MySqlParser.IDENTIFIED - 366)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySqlParser.IMPORT - 366)) | (1 << (MySqlParser.INDEXES - 366)) | (1 << (MySqlParser.INITIAL_SIZE - 366)) | (1 << (MySqlParser.INPLACE - 366)) | (1 << (MySqlParser.INSERT_METHOD - 366)) | (1 << (MySqlParser.INSTALL - 366)) | (1 << (MySqlParser.INSTANCE - 366)) | (1 << (MySqlParser.INVISIBLE - 366)) | (1 << (MySqlParser.INVOKER - 366)) | (1 << (MySqlParser.IO - 366)) | (1 << (MySqlParser.IO_THREAD - 366)) | (1 << (MySqlParser.IPC - 366)) | (1 << (MySqlParser.ISOLATION - 366)) | (1 << (MySqlParser.ISSUER - 366)) | (1 << (MySqlParser.JSON - 366)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySqlParser.LANGUAGE - 366)) | (1 << (MySqlParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.LEAVES - 398)) | (1 << (MySqlParser.LESS - 398)) | (1 << (MySqlParser.LEVEL - 398)) | (1 << (MySqlParser.LIST - 398)) | (1 << (MySqlParser.LOCAL - 398)) | (1 << (MySqlParser.LOGFILE - 398)) | (1 << (MySqlParser.LOGS - 398)) | (1 << (MySqlParser.MASTER - 398)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySqlParser.MASTER_DELAY - 398)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySqlParser.MASTER_HOST - 398)) | (1 << (MySqlParser.MASTER_LOG_FILE - 398)) | (1 << (MySqlParser.MASTER_LOG_POS - 398)) | (1 << (MySqlParser.MASTER_PASSWORD - 398)) | (1 << (MySqlParser.MASTER_PORT - 398)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySqlParser.MASTER_SSL - 398)) | (1 << (MySqlParser.MASTER_SSL_CA - 398)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_CERT - 398)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySqlParser.MASTER_SSL_CRL - 398)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_KEY - 398)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 398)) | (1 << (MySqlParser.MASTER_USER - 398)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySqlParser.MEDIUM - 430)) | (1 << (MySqlParser.MEMBER - 430)) | (1 << (MySqlParser.MERGE - 430)) | (1 << (MySqlParser.MESSAGE_TEXT - 430)) | (1 << (MySqlParser.MID - 430)) | (1 << (MySqlParser.MIGRATE - 430)) | (1 << (MySqlParser.MIN_ROWS - 430)) | (1 << (MySqlParser.MODE - 430)) | (1 << (MySqlParser.MODIFY - 430)) | (1 << (MySqlParser.MUTEX - 430)) | (1 << (MySqlParser.MYSQL - 430)) | (1 << (MySqlParser.MYSQL_ERRNO - 430)) | (1 << (MySqlParser.NAME - 430)) | (1 << (MySqlParser.NAMES - 430)) | (1 << (MySqlParser.NCHAR - 430)) | (1 << (MySqlParser.NEVER - 430)) | (1 << (MySqlParser.NEXT - 430)) | (1 << (MySqlParser.NO - 430)) | (1 << (MySqlParser.NODEGROUP - 430)) | (1 << (MySqlParser.NONE - 430)) | (1 << (MySqlParser.OFFLINE - 430)) | (1 << (MySqlParser.OFFSET - 430)) | (1 << (MySqlParser.OF - 430)) | (1 << (MySqlParser.OJ - 430)) | (1 << (MySqlParser.OLD_PASSWORD - 430)) | (1 << (MySqlParser.ONE - 430)) | (1 << (MySqlParser.ONLINE - 430)) | (1 << (MySqlParser.ONLY - 430)) | (1 << (MySqlParser.OPEN - 430)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySqlParser.OPTIONS - 462)) | (1 << (MySqlParser.OWNER - 462)) | (1 << (MySqlParser.PACK_KEYS - 462)) | (1 << (MySqlParser.PAGE - 462)) | (1 << (MySqlParser.PARSER - 462)) | (1 << (MySqlParser.PARTIAL - 462)) | (1 << (MySqlParser.PARTITIONING - 462)) | (1 << (MySqlParser.PARTITIONS - 462)) | (1 << (MySqlParser.PASSWORD - 462)) | (1 << (MySqlParser.PHASE - 462)) | (1 << (MySqlParser.PLUGIN - 462)) | (1 << (MySqlParser.PLUGIN_DIR - 462)) | (1 << (MySqlParser.PLUGINS - 462)) | (1 << (MySqlParser.PORT - 462)) | (1 << (MySqlParser.PRECEDES - 462)) | (1 << (MySqlParser.PREPARE - 462)) | (1 << (MySqlParser.PRESERVE - 462)) | (1 << (MySqlParser.PREV - 462)) | (1 << (MySqlParser.PROCESSLIST - 462)) | (1 << (MySqlParser.PROFILE - 462)) | (1 << (MySqlParser.PROFILES - 462)) | (1 << (MySqlParser.PROXY - 462)) | (1 << (MySqlParser.QUERY - 462)) | (1 << (MySqlParser.QUICK - 462)) | (1 << (MySqlParser.REBUILD - 462)) | (1 << (MySqlParser.RECOVER - 462)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySqlParser.REDUNDANT - 462)) | (1 << (MySqlParser.RELAY - 462)) | (1 << (MySqlParser.RELAY_LOG_FILE - 462)) | (1 << (MySqlParser.RELAY_LOG_POS - 462)) | (1 << (MySqlParser.RELAYLOG - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySqlParser.REMOVE - 494)) | (1 << (MySqlParser.REORGANIZE - 494)) | (1 << (MySqlParser.REPAIR - 494)) | (1 << (MySqlParser.REPLICATE_DO_DB - 494)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATION - 494)) | (1 << (MySqlParser.RESET - 494)) | (1 << (MySqlParser.RESUME - 494)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 494)) | (1 << (MySqlParser.RETURNS - 494)) | (1 << (MySqlParser.ROLE - 494)) | (1 << (MySqlParser.ROLLBACK - 494)) | (1 << (MySqlParser.ROLLUP - 494)) | (1 << (MySqlParser.ROTATE - 494)) | (1 << (MySqlParser.ROW - 494)) | (1 << (MySqlParser.ROWS - 494)) | (1 << (MySqlParser.ROW_FORMAT - 494)) | (1 << (MySqlParser.SAVEPOINT - 494)) | (1 << (MySqlParser.SCHEDULE - 494)) | (1 << (MySqlParser.SECURITY - 494)) | (1 << (MySqlParser.SERVER - 494)) | (1 << (MySqlParser.SESSION - 494)) | (1 << (MySqlParser.SHARE - 494)) | (1 << (MySqlParser.SHARED - 494)) | (1 << (MySqlParser.SIGNED - 494)) | (1 << (MySqlParser.SIMPLE - 494)) | (1 << (MySqlParser.SLAVE - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySqlParser.SLOW - 526)) | (1 << (MySqlParser.SNAPSHOT - 526)) | (1 << (MySqlParser.SOCKET - 526)) | (1 << (MySqlParser.SOME - 526)) | (1 << (MySqlParser.SONAME - 526)) | (1 << (MySqlParser.SOUNDS - 526)) | (1 << (MySqlParser.SOURCE - 526)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySqlParser.SQL_CACHE - 526)) | (1 << (MySqlParser.SQL_NO_CACHE - 526)) | (1 << (MySqlParser.SQL_THREAD - 526)) | (1 << (MySqlParser.START - 526)) | (1 << (MySqlParser.STARTS - 526)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 526)) | (1 << (MySqlParser.STATS_PERSISTENT - 526)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySqlParser.STATUS - 526)) | (1 << (MySqlParser.STOP - 526)) | (1 << (MySqlParser.STORAGE - 526)) | (1 << (MySqlParser.STRING - 526)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySqlParser.SUBJECT - 526)) | (1 << (MySqlParser.SUBPARTITION - 526)) | (1 << (MySqlParser.SUBPARTITIONS - 526)) | (1 << (MySqlParser.SUSPEND - 526)) | (1 << (MySqlParser.SWAPS - 526)) | (1 << (MySqlParser.SWITCHES - 526)) | (1 << (MySqlParser.TABLE_NAME - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySqlParser.TABLESPACE - 558)) | (1 << (MySqlParser.TEMPORARY - 558)) | (1 << (MySqlParser.TEMPTABLE - 558)) | (1 << (MySqlParser.THAN - 558)) | (1 << (MySqlParser.TRADITIONAL - 558)) | (1 << (MySqlParser.TRANSACTION - 558)) | (1 << (MySqlParser.TRANSACTIONAL - 558)) | (1 << (MySqlParser.TRIGGERS - 558)) | (1 << (MySqlParser.TRUNCATE - 558)) | (1 << (MySqlParser.UNDEFINED - 558)) | (1 << (MySqlParser.UNDOFILE - 558)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySqlParser.UNINSTALL - 558)) | (1 << (MySqlParser.UNKNOWN - 558)) | (1 << (MySqlParser.UNTIL - 558)) | (1 << (MySqlParser.UPGRADE - 558)) | (1 << (MySqlParser.USER - 558)) | (1 << (MySqlParser.USE_FRM - 558)) | (1 << (MySqlParser.USER_RESOURCES - 558)) | (1 << (MySqlParser.VALIDATION - 558)) | (1 << (MySqlParser.VALUE - 558)) | (1 << (MySqlParser.VARIABLES - 558)) | (1 << (MySqlParser.VIEW - 558)) | (1 << (MySqlParser.VISIBLE - 558)) | (1 << (MySqlParser.WAIT - 558)) | (1 << (MySqlParser.WARNINGS - 558)) | (1 << (MySqlParser.WITHOUT - 558)) | (1 << (MySqlParser.WORK - 558)) | (1 << (MySqlParser.WRAPPER - 558)) | (1 << (MySqlParser.X509 - 558)) | (1 << (MySqlParser.XA - 558)))) !== 0) || ((((_la - 590)) & ~0x1f) == 0 && ((1 << (_la - 590)) & ((1 << (MySqlParser.XML - 590)) | (1 << (MySqlParser.INTERNAL - 590)) | (1 << (MySqlParser.QUARTER - 590)) | (1 << (MySqlParser.MONTH - 590)) | (1 << (MySqlParser.DAY - 590)) | (1 << (MySqlParser.HOUR - 590)) | (1 << (MySqlParser.MINUTE - 590)) | (1 << (MySqlParser.WEEK - 590)) | (1 << (MySqlParser.SECOND - 590)) | (1 << (MySqlParser.MICROSECOND - 590)) | (1 << (MySqlParser.TABLES - 590)) | (1 << (MySqlParser.ROUTINE - 590)) | (1 << (MySqlParser.EXECUTE - 590)) | (1 << (MySqlParser.FILE - 590)) | (1 << (MySqlParser.PROCESS - 590)) | (1 << (MySqlParser.RELOAD - 590)) | (1 << (MySqlParser.SHUTDOWN - 590)) | (1 << (MySqlParser.SUPER - 590)) | (1 << (MySqlParser.PRIVILEGES - 590)) | (1 << (MySqlParser.AUDIT_ADMIN - 590)) | (1 << (MySqlParser.BACKUP_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 590)) | (1 << (MySqlParser.CLONE_ADMIN - 590)) | (1 << (MySqlParser.CONNECTION_ADMIN - 590)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 590)) | (1 << (MySqlParser.FIREWALL_ADMIN - 590)))) !== 0) || ((((_la - 622)) & ~0x1f) == 0 && ((1 << (_la - 622)) & ((1 << (MySqlParser.FIREWALL_USER - 622)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 622)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 622)) | (1 << (MySqlParser.NDB_STORED_USER - 622)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.REPLICATION_APPLIER - 622)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 622)) | (1 << (MySqlParser.ROLE_ADMIN - 622)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.SET_USER_ID - 622)) | (1 << (MySqlParser.SHOW_ROUTINE - 622)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 622)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 622)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 622)) | (1 << (MySqlParser.ARMSCII8 - 622)) | (1 << (MySqlParser.ASCII - 622)) | (1 << (MySqlParser.BIG5 - 622)) | (1 << (MySqlParser.CP1250 - 622)) | (1 << (MySqlParser.CP1251 - 622)) | (1 << (MySqlParser.CP1256 - 622)) | (1 << (MySqlParser.CP1257 - 622)) | (1 << (MySqlParser.CP850 - 622)) | (1 << (MySqlParser.CP852 - 622)) | (1 << (MySqlParser.CP866 - 622)) | (1 << (MySqlParser.CP932 - 622)) | (1 << (MySqlParser.DEC8 - 622)) | (1 << (MySqlParser.EUCJPMS - 622)) | (1 << (MySqlParser.EUCKR - 622)) | (1 << (MySqlParser.GB2312 - 622)))) !== 0) || ((((_la - 654)) & ~0x1f) == 0 && ((1 << (_la - 654)) & ((1 << (MySqlParser.GBK - 654)) | (1 << (MySqlParser.GEOSTD8 - 654)) | (1 << (MySqlParser.GREEK - 654)) | (1 << (MySqlParser.HEBREW - 654)) | (1 << (MySqlParser.HP8 - 654)) | (1 << (MySqlParser.KEYBCS2 - 654)) | (1 << (MySqlParser.KOI8R - 654)) | (1 << (MySqlParser.KOI8U - 654)) | (1 << (MySqlParser.LATIN1 - 654)) | (1 << (MySqlParser.LATIN2 - 654)) | (1 << (MySqlParser.LATIN5 - 654)) | (1 << (MySqlParser.LATIN7 - 654)) | (1 << (MySqlParser.MACCE - 654)) | (1 << (MySqlParser.MACROMAN - 654)) | (1 << (MySqlParser.SJIS - 654)) | (1 << (MySqlParser.SWE7 - 654)) | (1 << (MySqlParser.TIS620 - 654)) | (1 << (MySqlParser.UCS2 - 654)) | (1 << (MySqlParser.UJIS - 654)) | (1 << (MySqlParser.UTF16 - 654)) | (1 << (MySqlParser.UTF16LE - 654)) | (1 << (MySqlParser.UTF32 - 654)) | (1 << (MySqlParser.UTF8 - 654)) | (1 << (MySqlParser.UTF8MB3 - 654)) | (1 << (MySqlParser.UTF8MB4 - 654)) | (1 << (MySqlParser.ARCHIVE - 654)) | (1 << (MySqlParser.BLACKHOLE - 654)) | (1 << (MySqlParser.CSV - 654)) | (1 << (MySqlParser.FEDERATED - 654)) | (1 << (MySqlParser.INNODB - 654)) | (1 << (MySqlParser.MEMORY - 654)) | (1 << (MySqlParser.MRG_MYISAM - 654)))) !== 0) || ((((_la - 686)) & ~0x1f) == 0 && ((1 << (_la - 686)) & ((1 << (MySqlParser.MYISAM - 686)) | (1 << (MySqlParser.NDB - 686)) | (1 << (MySqlParser.NDBCLUSTER - 686)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 686)) | (1 << (MySqlParser.TOKUDB - 686)) | (1 << (MySqlParser.REPEATABLE - 686)) | (1 << (MySqlParser.COMMITTED - 686)) | (1 << (MySqlParser.UNCOMMITTED - 686)) | (1 << (MySqlParser.SERIALIZABLE - 686)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 686)) | (1 << (MySqlParser.LINESTRING - 686)) | (1 << (MySqlParser.MULTILINESTRING - 686)) | (1 << (MySqlParser.MULTIPOINT - 686)) | (1 << (MySqlParser.MULTIPOLYGON - 686)) | (1 << (MySqlParser.POINT - 686)) | (1 << (MySqlParser.POLYGON - 686)) | (1 << (MySqlParser.ABS - 686)) | (1 << (MySqlParser.ACOS - 686)) | (1 << (MySqlParser.ADDDATE - 686)) | (1 << (MySqlParser.ADDTIME - 686)) | (1 << (MySqlParser.AES_DECRYPT - 686)) | (1 << (MySqlParser.AES_ENCRYPT - 686)) | (1 << (MySqlParser.AREA - 686)) | (1 << (MySqlParser.ASBINARY - 686)) | (1 << (MySqlParser.ASIN - 686)) | (1 << (MySqlParser.ASTEXT - 686)) | (1 << (MySqlParser.ASWKB - 686)) | (1 << (MySqlParser.ASWKT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 686)))) !== 0) || ((((_la - 718)) & ~0x1f) == 0 && ((1 << (_la - 718)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 718)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 718)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 718)) | (1 << (MySqlParser.ATAN - 718)) | (1 << (MySqlParser.ATAN2 - 718)) | (1 << (MySqlParser.BENCHMARK - 718)) | (1 << (MySqlParser.BIN - 718)) | (1 << (MySqlParser.BIT_COUNT - 718)) | (1 << (MySqlParser.BIT_LENGTH - 718)) | (1 << (MySqlParser.BUFFER - 718)) | (1 << (MySqlParser.CATALOG_NAME - 718)) | (1 << (MySqlParser.CEIL - 718)) | (1 << (MySqlParser.CEILING - 718)) | (1 << (MySqlParser.CENTROID - 718)) | (1 << (MySqlParser.CHARACTER_LENGTH - 718)) | (1 << (MySqlParser.CHARSET - 718)) | (1 << (MySqlParser.CHAR_LENGTH - 718)) | (1 << (MySqlParser.COERCIBILITY - 718)) | (1 << (MySqlParser.COLLATION - 718)) | (1 << (MySqlParser.COMPRESS - 718)) | (1 << (MySqlParser.CONCAT - 718)) | (1 << (MySqlParser.CONCAT_WS - 718)) | (1 << (MySqlParser.CONNECTION_ID - 718)) | (1 << (MySqlParser.CONV - 718)) | (1 << (MySqlParser.CONVERT_TZ - 718)) | (1 << (MySqlParser.COS - 718)) | (1 << (MySqlParser.COT - 718)) | (1 << (MySqlParser.CRC32 - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 718)) | (1 << (MySqlParser.CREATE_DIGEST - 718)))) !== 0) || ((((_la - 750)) & ~0x1f) == 0 && ((1 << (_la - 750)) & ((1 << (MySqlParser.CROSSES - 750)) | (1 << (MySqlParser.DATEDIFF - 750)) | (1 << (MySqlParser.DATE_FORMAT - 750)) | (1 << (MySqlParser.DAYNAME - 750)) | (1 << (MySqlParser.DAYOFMONTH - 750)) | (1 << (MySqlParser.DAYOFWEEK - 750)) | (1 << (MySqlParser.DAYOFYEAR - 750)) | (1 << (MySqlParser.DECODE - 750)) | (1 << (MySqlParser.DEGREES - 750)) | (1 << (MySqlParser.DES_DECRYPT - 750)) | (1 << (MySqlParser.DES_ENCRYPT - 750)) | (1 << (MySqlParser.DIMENSION - 750)) | (1 << (MySqlParser.DISJOINT - 750)) | (1 << (MySqlParser.ELT - 750)) | (1 << (MySqlParser.ENCODE - 750)) | (1 << (MySqlParser.ENCRYPT - 750)) | (1 << (MySqlParser.ENDPOINT - 750)) | (1 << (MySqlParser.ENVELOPE - 750)) | (1 << (MySqlParser.EQUALS - 750)) | (1 << (MySqlParser.EXP - 750)) | (1 << (MySqlParser.EXPORT_SET - 750)) | (1 << (MySqlParser.EXTERIORRING - 750)) | (1 << (MySqlParser.EXTRACTVALUE - 750)) | (1 << (MySqlParser.FIELD - 750)) | (1 << (MySqlParser.FIND_IN_SET - 750)) | (1 << (MySqlParser.FLOOR - 750)) | (1 << (MySqlParser.FORMAT - 750)) | (1 << (MySqlParser.FOUND_ROWS - 750)) | (1 << (MySqlParser.FROM_BASE64 - 750)) | (1 << (MySqlParser.FROM_DAYS - 750)) | (1 << (MySqlParser.FROM_UNIXTIME - 750)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 750)))) !== 0) || ((((_la - 782)) & ~0x1f) == 0 && ((1 << (_la - 782)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYN - 782)) | (1 << (MySqlParser.GEOMETRYTYPE - 782)) | (1 << (MySqlParser.GEOMFROMTEXT - 782)) | (1 << (MySqlParser.GEOMFROMWKB - 782)) | (1 << (MySqlParser.GET_FORMAT - 782)) | (1 << (MySqlParser.GET_LOCK - 782)) | (1 << (MySqlParser.GLENGTH - 782)) | (1 << (MySqlParser.GREATEST - 782)) | (1 << (MySqlParser.GTID_SUBSET - 782)) | (1 << (MySqlParser.GTID_SUBTRACT - 782)) | (1 << (MySqlParser.HEX - 782)) | (1 << (MySqlParser.IFNULL - 782)) | (1 << (MySqlParser.INET6_ATON - 782)) | (1 << (MySqlParser.INET6_NTOA - 782)) | (1 << (MySqlParser.INET_ATON - 782)) | (1 << (MySqlParser.INET_NTOA - 782)) | (1 << (MySqlParser.INSTR - 782)) | (1 << (MySqlParser.INTERIORRINGN - 782)) | (1 << (MySqlParser.INTERSECTS - 782)) | (1 << (MySqlParser.ISCLOSED - 782)) | (1 << (MySqlParser.ISEMPTY - 782)) | (1 << (MySqlParser.ISNULL - 782)) | (1 << (MySqlParser.ISSIMPLE - 782)) | (1 << (MySqlParser.IS_FREE_LOCK - 782)) | (1 << (MySqlParser.IS_IPV4 - 782)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 782)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 782)))) !== 0) || ((((_la - 814)) & ~0x1f) == 0 && ((1 << (_la - 814)) & ((1 << (MySqlParser.IS_IPV6 - 814)) | (1 << (MySqlParser.IS_USED_LOCK - 814)) | (1 << (MySqlParser.LAST_INSERT_ID - 814)) | (1 << (MySqlParser.LCASE - 814)) | (1 << (MySqlParser.LEAST - 814)) | (1 << (MySqlParser.LENGTH - 814)) | (1 << (MySqlParser.LINEFROMTEXT - 814)) | (1 << (MySqlParser.LINEFROMWKB - 814)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 814)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 814)) | (1 << (MySqlParser.LN - 814)) | (1 << (MySqlParser.LOAD_FILE - 814)) | (1 << (MySqlParser.LOCATE - 814)) | (1 << (MySqlParser.LOG - 814)) | (1 << (MySqlParser.LOG10 - 814)) | (1 << (MySqlParser.LOG2 - 814)) | (1 << (MySqlParser.LOWER - 814)) | (1 << (MySqlParser.LPAD - 814)) | (1 << (MySqlParser.LTRIM - 814)) | (1 << (MySqlParser.MAKEDATE - 814)) | (1 << (MySqlParser.MAKETIME - 814)) | (1 << (MySqlParser.MAKE_SET - 814)) | (1 << (MySqlParser.MASTER_POS_WAIT - 814)) | (1 << (MySqlParser.MBRCONTAINS - 814)) | (1 << (MySqlParser.MBRDISJOINT - 814)) | (1 << (MySqlParser.MBREQUAL - 814)) | (1 << (MySqlParser.MBRINTERSECTS - 814)) | (1 << (MySqlParser.MBROVERLAPS - 814)) | (1 << (MySqlParser.MBRTOUCHES - 814)) | (1 << (MySqlParser.MBRWITHIN - 814)) | (1 << (MySqlParser.MD5 - 814)) | (1 << (MySqlParser.MLINEFROMTEXT - 814)))) !== 0) || ((((_la - 846)) & ~0x1f) == 0 && ((1 << (_la - 846)) & ((1 << (MySqlParser.MLINEFROMWKB - 846)) | (1 << (MySqlParser.MONTHNAME - 846)) | (1 << (MySqlParser.MPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MPOINTFROMWKB - 846)) | (1 << (MySqlParser.MPOLYFROMTEXT - 846)) | (1 << (MySqlParser.MPOLYFROMWKB - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 846)) | (1 << (MySqlParser.NAME_CONST - 846)) | (1 << (MySqlParser.NULLIF - 846)) | (1 << (MySqlParser.NUMGEOMETRIES - 846)) | (1 << (MySqlParser.NUMINTERIORRINGS - 846)) | (1 << (MySqlParser.NUMPOINTS - 846)) | (1 << (MySqlParser.OCT - 846)) | (1 << (MySqlParser.OCTET_LENGTH - 846)) | (1 << (MySqlParser.ORD - 846)) | (1 << (MySqlParser.OVERLAPS - 846)) | (1 << (MySqlParser.PERIOD_ADD - 846)) | (1 << (MySqlParser.PERIOD_DIFF - 846)) | (1 << (MySqlParser.PI - 846)) | (1 << (MySqlParser.POINTFROMTEXT - 846)) | (1 << (MySqlParser.POINTFROMWKB - 846)) | (1 << (MySqlParser.POINTN - 846)) | (1 << (MySqlParser.POLYFROMTEXT - 846)) | (1 << (MySqlParser.POLYFROMWKB - 846)) | (1 << (MySqlParser.POLYGONFROMTEXT - 846)) | (1 << (MySqlParser.POLYGONFROMWKB - 846)) | (1 << (MySqlParser.POW - 846)))) !== 0) || ((((_la - 878)) & ~0x1f) == 0 && ((1 << (_la - 878)) & ((1 << (MySqlParser.POWER - 878)) | (1 << (MySqlParser.QUOTE - 878)) | (1 << (MySqlParser.RADIANS - 878)) | (1 << (MySqlParser.RAND - 878)) | (1 << (MySqlParser.RANDOM_BYTES - 878)) | (1 << (MySqlParser.RELEASE_LOCK - 878)) | (1 << (MySqlParser.REVERSE - 878)) | (1 << (MySqlParser.ROUND - 878)) | (1 << (MySqlParser.ROW_COUNT - 878)) | (1 << (MySqlParser.RPAD - 878)) | (1 << (MySqlParser.RTRIM - 878)) | (1 << (MySqlParser.SEC_TO_TIME - 878)) | (1 << (MySqlParser.SESSION_USER - 878)) | (1 << (MySqlParser.SHA - 878)) | (1 << (MySqlParser.SHA1 - 878)) | (1 << (MySqlParser.SHA2 - 878)) | (1 << (MySqlParser.SCHEMA_NAME - 878)) | (1 << (MySqlParser.SIGN - 878)) | (1 << (MySqlParser.SIN - 878)) | (1 << (MySqlParser.SLEEP - 878)) | (1 << (MySqlParser.SOUNDEX - 878)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 878)) | (1 << (MySqlParser.SQRT - 878)) | (1 << (MySqlParser.SRID - 878)) | (1 << (MySqlParser.STARTPOINT - 878)) | (1 << (MySqlParser.STRCMP - 878)) | (1 << (MySqlParser.STR_TO_DATE - 878)) | (1 << (MySqlParser.ST_AREA - 878)) | (1 << (MySqlParser.ST_ASBINARY - 878)) | (1 << (MySqlParser.ST_ASTEXT - 878)) | (1 << (MySqlParser.ST_ASWKB - 878)) | (1 << (MySqlParser.ST_ASWKT - 878)))) !== 0) || ((((_la - 910)) & ~0x1f) == 0 && ((1 << (_la - 910)) & ((1 << (MySqlParser.ST_BUFFER - 910)) | (1 << (MySqlParser.ST_CENTROID - 910)) | (1 << (MySqlParser.ST_CONTAINS - 910)) | (1 << (MySqlParser.ST_CROSSES - 910)) | (1 << (MySqlParser.ST_DIFFERENCE - 910)) | (1 << (MySqlParser.ST_DIMENSION - 910)) | (1 << (MySqlParser.ST_DISJOINT - 910)) | (1 << (MySqlParser.ST_DISTANCE - 910)) | (1 << (MySqlParser.ST_ENDPOINT - 910)) | (1 << (MySqlParser.ST_ENVELOPE - 910)) | (1 << (MySqlParser.ST_EQUALS - 910)) | (1 << (MySqlParser.ST_EXTERIORRING - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYN - 910)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 910)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 910)) | (1 << (MySqlParser.ST_INTERIORRINGN - 910)) | (1 << (MySqlParser.ST_INTERSECTION - 910)) | (1 << (MySqlParser.ST_INTERSECTS - 910)) | (1 << (MySqlParser.ST_ISCLOSED - 910)) | (1 << (MySqlParser.ST_ISEMPTY - 910)) | (1 << (MySqlParser.ST_ISSIMPLE - 910)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 910)) | (1 << (MySqlParser.ST_LINEFROMWKB - 910)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 910)))) !== 0) || ((((_la - 942)) & ~0x1f) == 0 && ((1 << (_la - 942)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 942)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 942)) | (1 << (MySqlParser.ST_NUMPOINTS - 942)) | (1 << (MySqlParser.ST_OVERLAPS - 942)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 942)) | (1 << (MySqlParser.ST_POINTFROMWKB - 942)) | (1 << (MySqlParser.ST_POINTN - 942)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYFROMWKB - 942)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 942)) | (1 << (MySqlParser.ST_SRID - 942)) | (1 << (MySqlParser.ST_STARTPOINT - 942)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 942)) | (1 << (MySqlParser.ST_TOUCHES - 942)) | (1 << (MySqlParser.ST_UNION - 942)) | (1 << (MySqlParser.ST_WITHIN - 942)) | (1 << (MySqlParser.ST_X - 942)) | (1 << (MySqlParser.ST_Y - 942)) | (1 << (MySqlParser.SUBDATE - 942)) | (1 << (MySqlParser.SUBSTRING_INDEX - 942)) | (1 << (MySqlParser.SUBTIME - 942)) | (1 << (MySqlParser.SYSTEM_USER - 942)) | (1 << (MySqlParser.TAN - 942)) | (1 << (MySqlParser.TIMEDIFF - 942)) | (1 << (MySqlParser.TIMESTAMPADD - 942)) | (1 << (MySqlParser.TIMESTAMPDIFF - 942)) | (1 << (MySqlParser.TIME_FORMAT - 942)) | (1 << (MySqlParser.TIME_TO_SEC - 942)) | (1 << (MySqlParser.TOUCHES - 942)))) !== 0) || ((((_la - 974)) & ~0x1f) == 0 && ((1 << (_la - 974)) & ((1 << (MySqlParser.TO_BASE64 - 974)) | (1 << (MySqlParser.TO_DAYS - 974)) | (1 << (MySqlParser.TO_SECONDS - 974)) | (1 << (MySqlParser.UCASE - 974)) | (1 << (MySqlParser.UNCOMPRESS - 974)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 974)) | (1 << (MySqlParser.UNHEX - 974)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 974)) | (1 << (MySqlParser.UPDATEXML - 974)) | (1 << (MySqlParser.UPPER - 974)) | (1 << (MySqlParser.UUID - 974)) | (1 << (MySqlParser.UUID_SHORT - 974)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 974)) | (1 << (MySqlParser.VERSION - 974)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1 << (MySqlParser.WEEKDAY - 974)) | (1 << (MySqlParser.WEEKOFYEAR - 974)) | (1 << (MySqlParser.WEIGHT_STRING - 974)) | (1 << (MySqlParser.WITHIN - 974)) | (1 << (MySqlParser.YEARWEEK - 974)) | (1 << (MySqlParser.Y_FUNCTION - 974)) | (1 << (MySqlParser.X_FUNCTION - 974)))) !== 0) || ((((_la - 1034)) & ~0x1f) == 0 && ((1 << (_la - 1034)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (MySqlParser.STRING_LITERAL - 1034)) | (1 << (MySqlParser.ID - 1034)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1034)))) !== 0)) {
	                this.state = 2320;
	                localctx.index = this.uid();
	            }

	            this.state = 2324;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.USING) {
	                this.state = 2323;
	                this.indexType();
	            }

	            this.state = 2326;
	            this.indexColumnNames();
	            this.state = 2330;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.USING || _la===MySqlParser.WITH || _la===MySqlParser.COMMENT || _la===MySqlParser.INVISIBLE || _la===MySqlParser.KEY_BLOCK_SIZE || _la===MySqlParser.VISIBLE) {
	                this.state = 2327;
	                this.indexOption();
	                this.state = 2332;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 6:
	            localctx = new AlterByAddUniqueKeyContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2333;
	            this.match(MySqlParser.ADD);
	            this.state = 2338;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.CONSTRAINT) {
	                this.state = 2334;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 2336;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySqlParser.CURRENT - 32)) | (1 << (MySqlParser.DATABASE - 32)) | (1 << (MySqlParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySqlParser.LEFT || _la===MySqlParser.NUMBER || _la===MySqlParser.RIGHT || _la===MySqlParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.TIMESTAMP - 199)) | (1 << (MySqlParser.DATETIME - 199)) | (1 << (MySqlParser.YEAR - 199)) | (1 << (MySqlParser.TEXT - 199)) | (1 << (MySqlParser.ENUM - 199)) | (1 << (MySqlParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.JSON_VALID - 233)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySqlParser.AVG - 233)) | (1 << (MySqlParser.BIT_AND - 233)) | (1 << (MySqlParser.BIT_OR - 233)) | (1 << (MySqlParser.BIT_XOR - 233)) | (1 << (MySqlParser.COUNT - 233)) | (1 << (MySqlParser.GROUP_CONCAT - 233)) | (1 << (MySqlParser.MAX - 233)) | (1 << (MySqlParser.MIN - 233)) | (1 << (MySqlParser.STD - 233)) | (1 << (MySqlParser.STDDEV - 233)) | (1 << (MySqlParser.STDDEV_POP - 233)) | (1 << (MySqlParser.STDDEV_SAMP - 233)) | (1 << (MySqlParser.SUM - 233)) | (1 << (MySqlParser.VAR_POP - 233)) | (1 << (MySqlParser.VAR_SAMP - 233)) | (1 << (MySqlParser.VARIANCE - 233)) | (1 << (MySqlParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySqlParser.ACCOUNT - 270)) | (1 << (MySqlParser.ACTION - 270)) | (1 << (MySqlParser.AFTER - 270)) | (1 << (MySqlParser.AGGREGATE - 270)) | (1 << (MySqlParser.ALGORITHM - 270)) | (1 << (MySqlParser.ANY - 270)) | (1 << (MySqlParser.AT - 270)) | (1 << (MySqlParser.AUTHORS - 270)) | (1 << (MySqlParser.AUTOCOMMIT - 270)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySqlParser.AUTO_INCREMENT - 270)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 270)) | (1 << (MySqlParser.BEGIN - 270)) | (1 << (MySqlParser.BINLOG - 270)) | (1 << (MySqlParser.BIT - 270)) | (1 << (MySqlParser.BLOCK - 270)) | (1 << (MySqlParser.BOOL - 270)) | (1 << (MySqlParser.BOOLEAN - 270)) | (1 << (MySqlParser.BTREE - 270)) | (1 << (MySqlParser.CACHE - 270)) | (1 << (MySqlParser.CASCADED - 270)) | (1 << (MySqlParser.CHAIN - 270)) | (1 << (MySqlParser.CHANGED - 270)) | (1 << (MySqlParser.CHANNEL - 270)) | (1 << (MySqlParser.CHECKSUM - 270)) | (1 << (MySqlParser.PAGE_CHECKSUM - 270)) | (1 << (MySqlParser.CIPHER - 270)) | (1 << (MySqlParser.CLASS_ORIGIN - 270)) | (1 << (MySqlParser.CLIENT - 270)) | (1 << (MySqlParser.CLOSE - 270)) | (1 << (MySqlParser.COALESCE - 270)) | (1 << (MySqlParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySqlParser.COLUMNS - 302)) | (1 << (MySqlParser.COLUMN_FORMAT - 302)) | (1 << (MySqlParser.COLUMN_NAME - 302)) | (1 << (MySqlParser.COMMENT - 302)) | (1 << (MySqlParser.COMMIT - 302)) | (1 << (MySqlParser.COMPACT - 302)) | (1 << (MySqlParser.COMPLETION - 302)) | (1 << (MySqlParser.COMPRESSED - 302)) | (1 << (MySqlParser.COMPRESSION - 302)) | (1 << (MySqlParser.CONCURRENT - 302)) | (1 << (MySqlParser.CONNECTION - 302)) | (1 << (MySqlParser.CONSISTENT - 302)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySqlParser.CONSTRAINT_NAME - 302)) | (1 << (MySqlParser.CONTAINS - 302)) | (1 << (MySqlParser.CONTEXT - 302)) | (1 << (MySqlParser.CONTRIBUTORS - 302)) | (1 << (MySqlParser.COPY - 302)) | (1 << (MySqlParser.CPU - 302)) | (1 << (MySqlParser.CURSOR_NAME - 302)) | (1 << (MySqlParser.DATA - 302)) | (1 << (MySqlParser.DATAFILE - 302)) | (1 << (MySqlParser.DEALLOCATE - 302)) | (1 << (MySqlParser.DEFAULT_AUTH - 302)) | (1 << (MySqlParser.DEFINER - 302)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 302)) | (1 << (MySqlParser.DES_KEY_FILE - 302)) | (1 << (MySqlParser.DIRECTORY - 302)) | (1 << (MySqlParser.DISABLE - 302)) | (1 << (MySqlParser.DISCARD - 302)) | (1 << (MySqlParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySqlParser.DO - 334)) | (1 << (MySqlParser.DUMPFILE - 334)) | (1 << (MySqlParser.DUPLICATE - 334)) | (1 << (MySqlParser.DYNAMIC - 334)) | (1 << (MySqlParser.ENABLE - 334)) | (1 << (MySqlParser.ENCRYPTION - 334)) | (1 << (MySqlParser.END - 334)) | (1 << (MySqlParser.ENDS - 334)) | (1 << (MySqlParser.ENGINE - 334)) | (1 << (MySqlParser.ENGINES - 334)) | (1 << (MySqlParser.ERROR - 334)) | (1 << (MySqlParser.ERRORS - 334)) | (1 << (MySqlParser.ESCAPE - 334)) | (1 << (MySqlParser.EVEN - 334)) | (1 << (MySqlParser.EVENT - 334)) | (1 << (MySqlParser.EVENTS - 334)) | (1 << (MySqlParser.EVERY - 334)) | (1 << (MySqlParser.EXCHANGE - 334)) | (1 << (MySqlParser.EXCLUSIVE - 334)) | (1 << (MySqlParser.EXPIRE - 334)) | (1 << (MySqlParser.EXPORT - 334)) | (1 << (MySqlParser.EXTENDED - 334)) | (1 << (MySqlParser.EXTENT_SIZE - 334)) | (1 << (MySqlParser.FAST - 334)) | (1 << (MySqlParser.FAULTS - 334)) | (1 << (MySqlParser.FIELDS - 334)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySqlParser.FILTER - 334)) | (1 << (MySqlParser.FIRST - 334)) | (1 << (MySqlParser.FIXED - 334)) | (1 << (MySqlParser.FLUSH - 334)) | (1 << (MySqlParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySqlParser.FOUND - 366)) | (1 << (MySqlParser.FULL - 366)) | (1 << (MySqlParser.FUNCTION - 366)) | (1 << (MySqlParser.GENERAL - 366)) | (1 << (MySqlParser.GLOBAL - 366)) | (1 << (MySqlParser.GRANTS - 366)) | (1 << (MySqlParser.GROUP_REPLICATION - 366)) | (1 << (MySqlParser.HANDLER - 366)) | (1 << (MySqlParser.HASH - 366)) | (1 << (MySqlParser.HELP - 366)) | (1 << (MySqlParser.HOST - 366)) | (1 << (MySqlParser.HOSTS - 366)) | (1 << (MySqlParser.IDENTIFIED - 366)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySqlParser.IMPORT - 366)) | (1 << (MySqlParser.INDEXES - 366)) | (1 << (MySqlParser.INITIAL_SIZE - 366)) | (1 << (MySqlParser.INPLACE - 366)) | (1 << (MySqlParser.INSERT_METHOD - 366)) | (1 << (MySqlParser.INSTALL - 366)) | (1 << (MySqlParser.INSTANCE - 366)) | (1 << (MySqlParser.INVISIBLE - 366)) | (1 << (MySqlParser.INVOKER - 366)) | (1 << (MySqlParser.IO - 366)) | (1 << (MySqlParser.IO_THREAD - 366)) | (1 << (MySqlParser.IPC - 366)) | (1 << (MySqlParser.ISOLATION - 366)) | (1 << (MySqlParser.ISSUER - 366)) | (1 << (MySqlParser.JSON - 366)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySqlParser.LANGUAGE - 366)) | (1 << (MySqlParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.LEAVES - 398)) | (1 << (MySqlParser.LESS - 398)) | (1 << (MySqlParser.LEVEL - 398)) | (1 << (MySqlParser.LIST - 398)) | (1 << (MySqlParser.LOCAL - 398)) | (1 << (MySqlParser.LOGFILE - 398)) | (1 << (MySqlParser.LOGS - 398)) | (1 << (MySqlParser.MASTER - 398)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySqlParser.MASTER_DELAY - 398)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySqlParser.MASTER_HOST - 398)) | (1 << (MySqlParser.MASTER_LOG_FILE - 398)) | (1 << (MySqlParser.MASTER_LOG_POS - 398)) | (1 << (MySqlParser.MASTER_PASSWORD - 398)) | (1 << (MySqlParser.MASTER_PORT - 398)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySqlParser.MASTER_SSL - 398)) | (1 << (MySqlParser.MASTER_SSL_CA - 398)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_CERT - 398)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySqlParser.MASTER_SSL_CRL - 398)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_KEY - 398)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 398)) | (1 << (MySqlParser.MASTER_USER - 398)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySqlParser.MEDIUM - 430)) | (1 << (MySqlParser.MEMBER - 430)) | (1 << (MySqlParser.MERGE - 430)) | (1 << (MySqlParser.MESSAGE_TEXT - 430)) | (1 << (MySqlParser.MID - 430)) | (1 << (MySqlParser.MIGRATE - 430)) | (1 << (MySqlParser.MIN_ROWS - 430)) | (1 << (MySqlParser.MODE - 430)) | (1 << (MySqlParser.MODIFY - 430)) | (1 << (MySqlParser.MUTEX - 430)) | (1 << (MySqlParser.MYSQL - 430)) | (1 << (MySqlParser.MYSQL_ERRNO - 430)) | (1 << (MySqlParser.NAME - 430)) | (1 << (MySqlParser.NAMES - 430)) | (1 << (MySqlParser.NCHAR - 430)) | (1 << (MySqlParser.NEVER - 430)) | (1 << (MySqlParser.NEXT - 430)) | (1 << (MySqlParser.NO - 430)) | (1 << (MySqlParser.NODEGROUP - 430)) | (1 << (MySqlParser.NONE - 430)) | (1 << (MySqlParser.OFFLINE - 430)) | (1 << (MySqlParser.OFFSET - 430)) | (1 << (MySqlParser.OF - 430)) | (1 << (MySqlParser.OJ - 430)) | (1 << (MySqlParser.OLD_PASSWORD - 430)) | (1 << (MySqlParser.ONE - 430)) | (1 << (MySqlParser.ONLINE - 430)) | (1 << (MySqlParser.ONLY - 430)) | (1 << (MySqlParser.OPEN - 430)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySqlParser.OPTIONS - 462)) | (1 << (MySqlParser.OWNER - 462)) | (1 << (MySqlParser.PACK_KEYS - 462)) | (1 << (MySqlParser.PAGE - 462)) | (1 << (MySqlParser.PARSER - 462)) | (1 << (MySqlParser.PARTIAL - 462)) | (1 << (MySqlParser.PARTITIONING - 462)) | (1 << (MySqlParser.PARTITIONS - 462)) | (1 << (MySqlParser.PASSWORD - 462)) | (1 << (MySqlParser.PHASE - 462)) | (1 << (MySqlParser.PLUGIN - 462)) | (1 << (MySqlParser.PLUGIN_DIR - 462)) | (1 << (MySqlParser.PLUGINS - 462)) | (1 << (MySqlParser.PORT - 462)) | (1 << (MySqlParser.PRECEDES - 462)) | (1 << (MySqlParser.PREPARE - 462)) | (1 << (MySqlParser.PRESERVE - 462)) | (1 << (MySqlParser.PREV - 462)) | (1 << (MySqlParser.PROCESSLIST - 462)) | (1 << (MySqlParser.PROFILE - 462)) | (1 << (MySqlParser.PROFILES - 462)) | (1 << (MySqlParser.PROXY - 462)) | (1 << (MySqlParser.QUERY - 462)) | (1 << (MySqlParser.QUICK - 462)) | (1 << (MySqlParser.REBUILD - 462)) | (1 << (MySqlParser.RECOVER - 462)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySqlParser.REDUNDANT - 462)) | (1 << (MySqlParser.RELAY - 462)) | (1 << (MySqlParser.RELAY_LOG_FILE - 462)) | (1 << (MySqlParser.RELAY_LOG_POS - 462)) | (1 << (MySqlParser.RELAYLOG - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySqlParser.REMOVE - 494)) | (1 << (MySqlParser.REORGANIZE - 494)) | (1 << (MySqlParser.REPAIR - 494)) | (1 << (MySqlParser.REPLICATE_DO_DB - 494)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATION - 494)) | (1 << (MySqlParser.RESET - 494)) | (1 << (MySqlParser.RESUME - 494)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 494)) | (1 << (MySqlParser.RETURNS - 494)) | (1 << (MySqlParser.ROLE - 494)) | (1 << (MySqlParser.ROLLBACK - 494)) | (1 << (MySqlParser.ROLLUP - 494)) | (1 << (MySqlParser.ROTATE - 494)) | (1 << (MySqlParser.ROW - 494)) | (1 << (MySqlParser.ROWS - 494)) | (1 << (MySqlParser.ROW_FORMAT - 494)) | (1 << (MySqlParser.SAVEPOINT - 494)) | (1 << (MySqlParser.SCHEDULE - 494)) | (1 << (MySqlParser.SECURITY - 494)) | (1 << (MySqlParser.SERVER - 494)) | (1 << (MySqlParser.SESSION - 494)) | (1 << (MySqlParser.SHARE - 494)) | (1 << (MySqlParser.SHARED - 494)) | (1 << (MySqlParser.SIGNED - 494)) | (1 << (MySqlParser.SIMPLE - 494)) | (1 << (MySqlParser.SLAVE - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySqlParser.SLOW - 526)) | (1 << (MySqlParser.SNAPSHOT - 526)) | (1 << (MySqlParser.SOCKET - 526)) | (1 << (MySqlParser.SOME - 526)) | (1 << (MySqlParser.SONAME - 526)) | (1 << (MySqlParser.SOUNDS - 526)) | (1 << (MySqlParser.SOURCE - 526)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySqlParser.SQL_CACHE - 526)) | (1 << (MySqlParser.SQL_NO_CACHE - 526)) | (1 << (MySqlParser.SQL_THREAD - 526)) | (1 << (MySqlParser.START - 526)) | (1 << (MySqlParser.STARTS - 526)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 526)) | (1 << (MySqlParser.STATS_PERSISTENT - 526)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySqlParser.STATUS - 526)) | (1 << (MySqlParser.STOP - 526)) | (1 << (MySqlParser.STORAGE - 526)) | (1 << (MySqlParser.STRING - 526)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySqlParser.SUBJECT - 526)) | (1 << (MySqlParser.SUBPARTITION - 526)) | (1 << (MySqlParser.SUBPARTITIONS - 526)) | (1 << (MySqlParser.SUSPEND - 526)) | (1 << (MySqlParser.SWAPS - 526)) | (1 << (MySqlParser.SWITCHES - 526)) | (1 << (MySqlParser.TABLE_NAME - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySqlParser.TABLESPACE - 558)) | (1 << (MySqlParser.TEMPORARY - 558)) | (1 << (MySqlParser.TEMPTABLE - 558)) | (1 << (MySqlParser.THAN - 558)) | (1 << (MySqlParser.TRADITIONAL - 558)) | (1 << (MySqlParser.TRANSACTION - 558)) | (1 << (MySqlParser.TRANSACTIONAL - 558)) | (1 << (MySqlParser.TRIGGERS - 558)) | (1 << (MySqlParser.TRUNCATE - 558)) | (1 << (MySqlParser.UNDEFINED - 558)) | (1 << (MySqlParser.UNDOFILE - 558)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySqlParser.UNINSTALL - 558)) | (1 << (MySqlParser.UNKNOWN - 558)) | (1 << (MySqlParser.UNTIL - 558)) | (1 << (MySqlParser.UPGRADE - 558)) | (1 << (MySqlParser.USER - 558)) | (1 << (MySqlParser.USE_FRM - 558)) | (1 << (MySqlParser.USER_RESOURCES - 558)) | (1 << (MySqlParser.VALIDATION - 558)) | (1 << (MySqlParser.VALUE - 558)) | (1 << (MySqlParser.VARIABLES - 558)) | (1 << (MySqlParser.VIEW - 558)) | (1 << (MySqlParser.VISIBLE - 558)) | (1 << (MySqlParser.WAIT - 558)) | (1 << (MySqlParser.WARNINGS - 558)) | (1 << (MySqlParser.WITHOUT - 558)) | (1 << (MySqlParser.WORK - 558)) | (1 << (MySqlParser.WRAPPER - 558)) | (1 << (MySqlParser.X509 - 558)) | (1 << (MySqlParser.XA - 558)))) !== 0) || ((((_la - 590)) & ~0x1f) == 0 && ((1 << (_la - 590)) & ((1 << (MySqlParser.XML - 590)) | (1 << (MySqlParser.INTERNAL - 590)) | (1 << (MySqlParser.QUARTER - 590)) | (1 << (MySqlParser.MONTH - 590)) | (1 << (MySqlParser.DAY - 590)) | (1 << (MySqlParser.HOUR - 590)) | (1 << (MySqlParser.MINUTE - 590)) | (1 << (MySqlParser.WEEK - 590)) | (1 << (MySqlParser.SECOND - 590)) | (1 << (MySqlParser.MICROSECOND - 590)) | (1 << (MySqlParser.TABLES - 590)) | (1 << (MySqlParser.ROUTINE - 590)) | (1 << (MySqlParser.EXECUTE - 590)) | (1 << (MySqlParser.FILE - 590)) | (1 << (MySqlParser.PROCESS - 590)) | (1 << (MySqlParser.RELOAD - 590)) | (1 << (MySqlParser.SHUTDOWN - 590)) | (1 << (MySqlParser.SUPER - 590)) | (1 << (MySqlParser.PRIVILEGES - 590)) | (1 << (MySqlParser.AUDIT_ADMIN - 590)) | (1 << (MySqlParser.BACKUP_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 590)) | (1 << (MySqlParser.CLONE_ADMIN - 590)) | (1 << (MySqlParser.CONNECTION_ADMIN - 590)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 590)) | (1 << (MySqlParser.FIREWALL_ADMIN - 590)))) !== 0) || ((((_la - 622)) & ~0x1f) == 0 && ((1 << (_la - 622)) & ((1 << (MySqlParser.FIREWALL_USER - 622)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 622)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 622)) | (1 << (MySqlParser.NDB_STORED_USER - 622)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.REPLICATION_APPLIER - 622)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 622)) | (1 << (MySqlParser.ROLE_ADMIN - 622)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.SET_USER_ID - 622)) | (1 << (MySqlParser.SHOW_ROUTINE - 622)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 622)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 622)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 622)) | (1 << (MySqlParser.ARMSCII8 - 622)) | (1 << (MySqlParser.ASCII - 622)) | (1 << (MySqlParser.BIG5 - 622)) | (1 << (MySqlParser.CP1250 - 622)) | (1 << (MySqlParser.CP1251 - 622)) | (1 << (MySqlParser.CP1256 - 622)) | (1 << (MySqlParser.CP1257 - 622)) | (1 << (MySqlParser.CP850 - 622)) | (1 << (MySqlParser.CP852 - 622)) | (1 << (MySqlParser.CP866 - 622)) | (1 << (MySqlParser.CP932 - 622)) | (1 << (MySqlParser.DEC8 - 622)) | (1 << (MySqlParser.EUCJPMS - 622)) | (1 << (MySqlParser.EUCKR - 622)) | (1 << (MySqlParser.GB2312 - 622)))) !== 0) || ((((_la - 654)) & ~0x1f) == 0 && ((1 << (_la - 654)) & ((1 << (MySqlParser.GBK - 654)) | (1 << (MySqlParser.GEOSTD8 - 654)) | (1 << (MySqlParser.GREEK - 654)) | (1 << (MySqlParser.HEBREW - 654)) | (1 << (MySqlParser.HP8 - 654)) | (1 << (MySqlParser.KEYBCS2 - 654)) | (1 << (MySqlParser.KOI8R - 654)) | (1 << (MySqlParser.KOI8U - 654)) | (1 << (MySqlParser.LATIN1 - 654)) | (1 << (MySqlParser.LATIN2 - 654)) | (1 << (MySqlParser.LATIN5 - 654)) | (1 << (MySqlParser.LATIN7 - 654)) | (1 << (MySqlParser.MACCE - 654)) | (1 << (MySqlParser.MACROMAN - 654)) | (1 << (MySqlParser.SJIS - 654)) | (1 << (MySqlParser.SWE7 - 654)) | (1 << (MySqlParser.TIS620 - 654)) | (1 << (MySqlParser.UCS2 - 654)) | (1 << (MySqlParser.UJIS - 654)) | (1 << (MySqlParser.UTF16 - 654)) | (1 << (MySqlParser.UTF16LE - 654)) | (1 << (MySqlParser.UTF32 - 654)) | (1 << (MySqlParser.UTF8 - 654)) | (1 << (MySqlParser.UTF8MB3 - 654)) | (1 << (MySqlParser.UTF8MB4 - 654)) | (1 << (MySqlParser.ARCHIVE - 654)) | (1 << (MySqlParser.BLACKHOLE - 654)) | (1 << (MySqlParser.CSV - 654)) | (1 << (MySqlParser.FEDERATED - 654)) | (1 << (MySqlParser.INNODB - 654)) | (1 << (MySqlParser.MEMORY - 654)) | (1 << (MySqlParser.MRG_MYISAM - 654)))) !== 0) || ((((_la - 686)) & ~0x1f) == 0 && ((1 << (_la - 686)) & ((1 << (MySqlParser.MYISAM - 686)) | (1 << (MySqlParser.NDB - 686)) | (1 << (MySqlParser.NDBCLUSTER - 686)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 686)) | (1 << (MySqlParser.TOKUDB - 686)) | (1 << (MySqlParser.REPEATABLE - 686)) | (1 << (MySqlParser.COMMITTED - 686)) | (1 << (MySqlParser.UNCOMMITTED - 686)) | (1 << (MySqlParser.SERIALIZABLE - 686)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 686)) | (1 << (MySqlParser.LINESTRING - 686)) | (1 << (MySqlParser.MULTILINESTRING - 686)) | (1 << (MySqlParser.MULTIPOINT - 686)) | (1 << (MySqlParser.MULTIPOLYGON - 686)) | (1 << (MySqlParser.POINT - 686)) | (1 << (MySqlParser.POLYGON - 686)) | (1 << (MySqlParser.ABS - 686)) | (1 << (MySqlParser.ACOS - 686)) | (1 << (MySqlParser.ADDDATE - 686)) | (1 << (MySqlParser.ADDTIME - 686)) | (1 << (MySqlParser.AES_DECRYPT - 686)) | (1 << (MySqlParser.AES_ENCRYPT - 686)) | (1 << (MySqlParser.AREA - 686)) | (1 << (MySqlParser.ASBINARY - 686)) | (1 << (MySqlParser.ASIN - 686)) | (1 << (MySqlParser.ASTEXT - 686)) | (1 << (MySqlParser.ASWKB - 686)) | (1 << (MySqlParser.ASWKT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 686)))) !== 0) || ((((_la - 718)) & ~0x1f) == 0 && ((1 << (_la - 718)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 718)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 718)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 718)) | (1 << (MySqlParser.ATAN - 718)) | (1 << (MySqlParser.ATAN2 - 718)) | (1 << (MySqlParser.BENCHMARK - 718)) | (1 << (MySqlParser.BIN - 718)) | (1 << (MySqlParser.BIT_COUNT - 718)) | (1 << (MySqlParser.BIT_LENGTH - 718)) | (1 << (MySqlParser.BUFFER - 718)) | (1 << (MySqlParser.CATALOG_NAME - 718)) | (1 << (MySqlParser.CEIL - 718)) | (1 << (MySqlParser.CEILING - 718)) | (1 << (MySqlParser.CENTROID - 718)) | (1 << (MySqlParser.CHARACTER_LENGTH - 718)) | (1 << (MySqlParser.CHARSET - 718)) | (1 << (MySqlParser.CHAR_LENGTH - 718)) | (1 << (MySqlParser.COERCIBILITY - 718)) | (1 << (MySqlParser.COLLATION - 718)) | (1 << (MySqlParser.COMPRESS - 718)) | (1 << (MySqlParser.CONCAT - 718)) | (1 << (MySqlParser.CONCAT_WS - 718)) | (1 << (MySqlParser.CONNECTION_ID - 718)) | (1 << (MySqlParser.CONV - 718)) | (1 << (MySqlParser.CONVERT_TZ - 718)) | (1 << (MySqlParser.COS - 718)) | (1 << (MySqlParser.COT - 718)) | (1 << (MySqlParser.CRC32 - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 718)) | (1 << (MySqlParser.CREATE_DIGEST - 718)))) !== 0) || ((((_la - 750)) & ~0x1f) == 0 && ((1 << (_la - 750)) & ((1 << (MySqlParser.CROSSES - 750)) | (1 << (MySqlParser.DATEDIFF - 750)) | (1 << (MySqlParser.DATE_FORMAT - 750)) | (1 << (MySqlParser.DAYNAME - 750)) | (1 << (MySqlParser.DAYOFMONTH - 750)) | (1 << (MySqlParser.DAYOFWEEK - 750)) | (1 << (MySqlParser.DAYOFYEAR - 750)) | (1 << (MySqlParser.DECODE - 750)) | (1 << (MySqlParser.DEGREES - 750)) | (1 << (MySqlParser.DES_DECRYPT - 750)) | (1 << (MySqlParser.DES_ENCRYPT - 750)) | (1 << (MySqlParser.DIMENSION - 750)) | (1 << (MySqlParser.DISJOINT - 750)) | (1 << (MySqlParser.ELT - 750)) | (1 << (MySqlParser.ENCODE - 750)) | (1 << (MySqlParser.ENCRYPT - 750)) | (1 << (MySqlParser.ENDPOINT - 750)) | (1 << (MySqlParser.ENVELOPE - 750)) | (1 << (MySqlParser.EQUALS - 750)) | (1 << (MySqlParser.EXP - 750)) | (1 << (MySqlParser.EXPORT_SET - 750)) | (1 << (MySqlParser.EXTERIORRING - 750)) | (1 << (MySqlParser.EXTRACTVALUE - 750)) | (1 << (MySqlParser.FIELD - 750)) | (1 << (MySqlParser.FIND_IN_SET - 750)) | (1 << (MySqlParser.FLOOR - 750)) | (1 << (MySqlParser.FORMAT - 750)) | (1 << (MySqlParser.FOUND_ROWS - 750)) | (1 << (MySqlParser.FROM_BASE64 - 750)) | (1 << (MySqlParser.FROM_DAYS - 750)) | (1 << (MySqlParser.FROM_UNIXTIME - 750)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 750)))) !== 0) || ((((_la - 782)) & ~0x1f) == 0 && ((1 << (_la - 782)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYN - 782)) | (1 << (MySqlParser.GEOMETRYTYPE - 782)) | (1 << (MySqlParser.GEOMFROMTEXT - 782)) | (1 << (MySqlParser.GEOMFROMWKB - 782)) | (1 << (MySqlParser.GET_FORMAT - 782)) | (1 << (MySqlParser.GET_LOCK - 782)) | (1 << (MySqlParser.GLENGTH - 782)) | (1 << (MySqlParser.GREATEST - 782)) | (1 << (MySqlParser.GTID_SUBSET - 782)) | (1 << (MySqlParser.GTID_SUBTRACT - 782)) | (1 << (MySqlParser.HEX - 782)) | (1 << (MySqlParser.IFNULL - 782)) | (1 << (MySqlParser.INET6_ATON - 782)) | (1 << (MySqlParser.INET6_NTOA - 782)) | (1 << (MySqlParser.INET_ATON - 782)) | (1 << (MySqlParser.INET_NTOA - 782)) | (1 << (MySqlParser.INSTR - 782)) | (1 << (MySqlParser.INTERIORRINGN - 782)) | (1 << (MySqlParser.INTERSECTS - 782)) | (1 << (MySqlParser.ISCLOSED - 782)) | (1 << (MySqlParser.ISEMPTY - 782)) | (1 << (MySqlParser.ISNULL - 782)) | (1 << (MySqlParser.ISSIMPLE - 782)) | (1 << (MySqlParser.IS_FREE_LOCK - 782)) | (1 << (MySqlParser.IS_IPV4 - 782)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 782)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 782)))) !== 0) || ((((_la - 814)) & ~0x1f) == 0 && ((1 << (_la - 814)) & ((1 << (MySqlParser.IS_IPV6 - 814)) | (1 << (MySqlParser.IS_USED_LOCK - 814)) | (1 << (MySqlParser.LAST_INSERT_ID - 814)) | (1 << (MySqlParser.LCASE - 814)) | (1 << (MySqlParser.LEAST - 814)) | (1 << (MySqlParser.LENGTH - 814)) | (1 << (MySqlParser.LINEFROMTEXT - 814)) | (1 << (MySqlParser.LINEFROMWKB - 814)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 814)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 814)) | (1 << (MySqlParser.LN - 814)) | (1 << (MySqlParser.LOAD_FILE - 814)) | (1 << (MySqlParser.LOCATE - 814)) | (1 << (MySqlParser.LOG - 814)) | (1 << (MySqlParser.LOG10 - 814)) | (1 << (MySqlParser.LOG2 - 814)) | (1 << (MySqlParser.LOWER - 814)) | (1 << (MySqlParser.LPAD - 814)) | (1 << (MySqlParser.LTRIM - 814)) | (1 << (MySqlParser.MAKEDATE - 814)) | (1 << (MySqlParser.MAKETIME - 814)) | (1 << (MySqlParser.MAKE_SET - 814)) | (1 << (MySqlParser.MASTER_POS_WAIT - 814)) | (1 << (MySqlParser.MBRCONTAINS - 814)) | (1 << (MySqlParser.MBRDISJOINT - 814)) | (1 << (MySqlParser.MBREQUAL - 814)) | (1 << (MySqlParser.MBRINTERSECTS - 814)) | (1 << (MySqlParser.MBROVERLAPS - 814)) | (1 << (MySqlParser.MBRTOUCHES - 814)) | (1 << (MySqlParser.MBRWITHIN - 814)) | (1 << (MySqlParser.MD5 - 814)) | (1 << (MySqlParser.MLINEFROMTEXT - 814)))) !== 0) || ((((_la - 846)) & ~0x1f) == 0 && ((1 << (_la - 846)) & ((1 << (MySqlParser.MLINEFROMWKB - 846)) | (1 << (MySqlParser.MONTHNAME - 846)) | (1 << (MySqlParser.MPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MPOINTFROMWKB - 846)) | (1 << (MySqlParser.MPOLYFROMTEXT - 846)) | (1 << (MySqlParser.MPOLYFROMWKB - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 846)) | (1 << (MySqlParser.NAME_CONST - 846)) | (1 << (MySqlParser.NULLIF - 846)) | (1 << (MySqlParser.NUMGEOMETRIES - 846)) | (1 << (MySqlParser.NUMINTERIORRINGS - 846)) | (1 << (MySqlParser.NUMPOINTS - 846)) | (1 << (MySqlParser.OCT - 846)) | (1 << (MySqlParser.OCTET_LENGTH - 846)) | (1 << (MySqlParser.ORD - 846)) | (1 << (MySqlParser.OVERLAPS - 846)) | (1 << (MySqlParser.PERIOD_ADD - 846)) | (1 << (MySqlParser.PERIOD_DIFF - 846)) | (1 << (MySqlParser.PI - 846)) | (1 << (MySqlParser.POINTFROMTEXT - 846)) | (1 << (MySqlParser.POINTFROMWKB - 846)) | (1 << (MySqlParser.POINTN - 846)) | (1 << (MySqlParser.POLYFROMTEXT - 846)) | (1 << (MySqlParser.POLYFROMWKB - 846)) | (1 << (MySqlParser.POLYGONFROMTEXT - 846)) | (1 << (MySqlParser.POLYGONFROMWKB - 846)) | (1 << (MySqlParser.POW - 846)))) !== 0) || ((((_la - 878)) & ~0x1f) == 0 && ((1 << (_la - 878)) & ((1 << (MySqlParser.POWER - 878)) | (1 << (MySqlParser.QUOTE - 878)) | (1 << (MySqlParser.RADIANS - 878)) | (1 << (MySqlParser.RAND - 878)) | (1 << (MySqlParser.RANDOM_BYTES - 878)) | (1 << (MySqlParser.RELEASE_LOCK - 878)) | (1 << (MySqlParser.REVERSE - 878)) | (1 << (MySqlParser.ROUND - 878)) | (1 << (MySqlParser.ROW_COUNT - 878)) | (1 << (MySqlParser.RPAD - 878)) | (1 << (MySqlParser.RTRIM - 878)) | (1 << (MySqlParser.SEC_TO_TIME - 878)) | (1 << (MySqlParser.SESSION_USER - 878)) | (1 << (MySqlParser.SHA - 878)) | (1 << (MySqlParser.SHA1 - 878)) | (1 << (MySqlParser.SHA2 - 878)) | (1 << (MySqlParser.SCHEMA_NAME - 878)) | (1 << (MySqlParser.SIGN - 878)) | (1 << (MySqlParser.SIN - 878)) | (1 << (MySqlParser.SLEEP - 878)) | (1 << (MySqlParser.SOUNDEX - 878)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 878)) | (1 << (MySqlParser.SQRT - 878)) | (1 << (MySqlParser.SRID - 878)) | (1 << (MySqlParser.STARTPOINT - 878)) | (1 << (MySqlParser.STRCMP - 878)) | (1 << (MySqlParser.STR_TO_DATE - 878)) | (1 << (MySqlParser.ST_AREA - 878)) | (1 << (MySqlParser.ST_ASBINARY - 878)) | (1 << (MySqlParser.ST_ASTEXT - 878)) | (1 << (MySqlParser.ST_ASWKB - 878)) | (1 << (MySqlParser.ST_ASWKT - 878)))) !== 0) || ((((_la - 910)) & ~0x1f) == 0 && ((1 << (_la - 910)) & ((1 << (MySqlParser.ST_BUFFER - 910)) | (1 << (MySqlParser.ST_CENTROID - 910)) | (1 << (MySqlParser.ST_CONTAINS - 910)) | (1 << (MySqlParser.ST_CROSSES - 910)) | (1 << (MySqlParser.ST_DIFFERENCE - 910)) | (1 << (MySqlParser.ST_DIMENSION - 910)) | (1 << (MySqlParser.ST_DISJOINT - 910)) | (1 << (MySqlParser.ST_DISTANCE - 910)) | (1 << (MySqlParser.ST_ENDPOINT - 910)) | (1 << (MySqlParser.ST_ENVELOPE - 910)) | (1 << (MySqlParser.ST_EQUALS - 910)) | (1 << (MySqlParser.ST_EXTERIORRING - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYN - 910)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 910)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 910)) | (1 << (MySqlParser.ST_INTERIORRINGN - 910)) | (1 << (MySqlParser.ST_INTERSECTION - 910)) | (1 << (MySqlParser.ST_INTERSECTS - 910)) | (1 << (MySqlParser.ST_ISCLOSED - 910)) | (1 << (MySqlParser.ST_ISEMPTY - 910)) | (1 << (MySqlParser.ST_ISSIMPLE - 910)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 910)) | (1 << (MySqlParser.ST_LINEFROMWKB - 910)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 910)))) !== 0) || ((((_la - 942)) & ~0x1f) == 0 && ((1 << (_la - 942)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 942)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 942)) | (1 << (MySqlParser.ST_NUMPOINTS - 942)) | (1 << (MySqlParser.ST_OVERLAPS - 942)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 942)) | (1 << (MySqlParser.ST_POINTFROMWKB - 942)) | (1 << (MySqlParser.ST_POINTN - 942)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYFROMWKB - 942)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 942)) | (1 << (MySqlParser.ST_SRID - 942)) | (1 << (MySqlParser.ST_STARTPOINT - 942)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 942)) | (1 << (MySqlParser.ST_TOUCHES - 942)) | (1 << (MySqlParser.ST_UNION - 942)) | (1 << (MySqlParser.ST_WITHIN - 942)) | (1 << (MySqlParser.ST_X - 942)) | (1 << (MySqlParser.ST_Y - 942)) | (1 << (MySqlParser.SUBDATE - 942)) | (1 << (MySqlParser.SUBSTRING_INDEX - 942)) | (1 << (MySqlParser.SUBTIME - 942)) | (1 << (MySqlParser.SYSTEM_USER - 942)) | (1 << (MySqlParser.TAN - 942)) | (1 << (MySqlParser.TIMEDIFF - 942)) | (1 << (MySqlParser.TIMESTAMPADD - 942)) | (1 << (MySqlParser.TIMESTAMPDIFF - 942)) | (1 << (MySqlParser.TIME_FORMAT - 942)) | (1 << (MySqlParser.TIME_TO_SEC - 942)) | (1 << (MySqlParser.TOUCHES - 942)))) !== 0) || ((((_la - 974)) & ~0x1f) == 0 && ((1 << (_la - 974)) & ((1 << (MySqlParser.TO_BASE64 - 974)) | (1 << (MySqlParser.TO_DAYS - 974)) | (1 << (MySqlParser.TO_SECONDS - 974)) | (1 << (MySqlParser.UCASE - 974)) | (1 << (MySqlParser.UNCOMPRESS - 974)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 974)) | (1 << (MySqlParser.UNHEX - 974)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 974)) | (1 << (MySqlParser.UPDATEXML - 974)) | (1 << (MySqlParser.UPPER - 974)) | (1 << (MySqlParser.UUID - 974)) | (1 << (MySqlParser.UUID_SHORT - 974)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 974)) | (1 << (MySqlParser.VERSION - 974)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1 << (MySqlParser.WEEKDAY - 974)) | (1 << (MySqlParser.WEEKOFYEAR - 974)) | (1 << (MySqlParser.WEIGHT_STRING - 974)) | (1 << (MySqlParser.WITHIN - 974)) | (1 << (MySqlParser.YEARWEEK - 974)) | (1 << (MySqlParser.Y_FUNCTION - 974)) | (1 << (MySqlParser.X_FUNCTION - 974)))) !== 0) || ((((_la - 1034)) & ~0x1f) == 0 && ((1 << (_la - 1034)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (MySqlParser.STRING_LITERAL - 1034)) | (1 << (MySqlParser.ID - 1034)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1034)))) !== 0)) {
	                    this.state = 2335;
	                    localctx.name = this.uid();
	                }

	            }

	            this.state = 2340;
	            this.match(MySqlParser.UNIQUE);
	            this.state = 2342;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.INDEX || _la===MySqlParser.KEY) {
	                this.state = 2341;
	                localctx.indexFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.INDEX || _la===MySqlParser.KEY)) {
	                    localctx.indexFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 2345;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySqlParser.CURRENT - 32)) | (1 << (MySqlParser.DATABASE - 32)) | (1 << (MySqlParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySqlParser.LEFT || _la===MySqlParser.NUMBER || _la===MySqlParser.RIGHT || _la===MySqlParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.TIMESTAMP - 199)) | (1 << (MySqlParser.DATETIME - 199)) | (1 << (MySqlParser.YEAR - 199)) | (1 << (MySqlParser.TEXT - 199)) | (1 << (MySqlParser.ENUM - 199)) | (1 << (MySqlParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.JSON_VALID - 233)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySqlParser.AVG - 233)) | (1 << (MySqlParser.BIT_AND - 233)) | (1 << (MySqlParser.BIT_OR - 233)) | (1 << (MySqlParser.BIT_XOR - 233)) | (1 << (MySqlParser.COUNT - 233)) | (1 << (MySqlParser.GROUP_CONCAT - 233)) | (1 << (MySqlParser.MAX - 233)) | (1 << (MySqlParser.MIN - 233)) | (1 << (MySqlParser.STD - 233)) | (1 << (MySqlParser.STDDEV - 233)) | (1 << (MySqlParser.STDDEV_POP - 233)) | (1 << (MySqlParser.STDDEV_SAMP - 233)) | (1 << (MySqlParser.SUM - 233)) | (1 << (MySqlParser.VAR_POP - 233)) | (1 << (MySqlParser.VAR_SAMP - 233)) | (1 << (MySqlParser.VARIANCE - 233)) | (1 << (MySqlParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySqlParser.ACCOUNT - 270)) | (1 << (MySqlParser.ACTION - 270)) | (1 << (MySqlParser.AFTER - 270)) | (1 << (MySqlParser.AGGREGATE - 270)) | (1 << (MySqlParser.ALGORITHM - 270)) | (1 << (MySqlParser.ANY - 270)) | (1 << (MySqlParser.AT - 270)) | (1 << (MySqlParser.AUTHORS - 270)) | (1 << (MySqlParser.AUTOCOMMIT - 270)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySqlParser.AUTO_INCREMENT - 270)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 270)) | (1 << (MySqlParser.BEGIN - 270)) | (1 << (MySqlParser.BINLOG - 270)) | (1 << (MySqlParser.BIT - 270)) | (1 << (MySqlParser.BLOCK - 270)) | (1 << (MySqlParser.BOOL - 270)) | (1 << (MySqlParser.BOOLEAN - 270)) | (1 << (MySqlParser.BTREE - 270)) | (1 << (MySqlParser.CACHE - 270)) | (1 << (MySqlParser.CASCADED - 270)) | (1 << (MySqlParser.CHAIN - 270)) | (1 << (MySqlParser.CHANGED - 270)) | (1 << (MySqlParser.CHANNEL - 270)) | (1 << (MySqlParser.CHECKSUM - 270)) | (1 << (MySqlParser.PAGE_CHECKSUM - 270)) | (1 << (MySqlParser.CIPHER - 270)) | (1 << (MySqlParser.CLASS_ORIGIN - 270)) | (1 << (MySqlParser.CLIENT - 270)) | (1 << (MySqlParser.CLOSE - 270)) | (1 << (MySqlParser.COALESCE - 270)) | (1 << (MySqlParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySqlParser.COLUMNS - 302)) | (1 << (MySqlParser.COLUMN_FORMAT - 302)) | (1 << (MySqlParser.COLUMN_NAME - 302)) | (1 << (MySqlParser.COMMENT - 302)) | (1 << (MySqlParser.COMMIT - 302)) | (1 << (MySqlParser.COMPACT - 302)) | (1 << (MySqlParser.COMPLETION - 302)) | (1 << (MySqlParser.COMPRESSED - 302)) | (1 << (MySqlParser.COMPRESSION - 302)) | (1 << (MySqlParser.CONCURRENT - 302)) | (1 << (MySqlParser.CONNECTION - 302)) | (1 << (MySqlParser.CONSISTENT - 302)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySqlParser.CONSTRAINT_NAME - 302)) | (1 << (MySqlParser.CONTAINS - 302)) | (1 << (MySqlParser.CONTEXT - 302)) | (1 << (MySqlParser.CONTRIBUTORS - 302)) | (1 << (MySqlParser.COPY - 302)) | (1 << (MySqlParser.CPU - 302)) | (1 << (MySqlParser.CURSOR_NAME - 302)) | (1 << (MySqlParser.DATA - 302)) | (1 << (MySqlParser.DATAFILE - 302)) | (1 << (MySqlParser.DEALLOCATE - 302)) | (1 << (MySqlParser.DEFAULT_AUTH - 302)) | (1 << (MySqlParser.DEFINER - 302)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 302)) | (1 << (MySqlParser.DES_KEY_FILE - 302)) | (1 << (MySqlParser.DIRECTORY - 302)) | (1 << (MySqlParser.DISABLE - 302)) | (1 << (MySqlParser.DISCARD - 302)) | (1 << (MySqlParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySqlParser.DO - 334)) | (1 << (MySqlParser.DUMPFILE - 334)) | (1 << (MySqlParser.DUPLICATE - 334)) | (1 << (MySqlParser.DYNAMIC - 334)) | (1 << (MySqlParser.ENABLE - 334)) | (1 << (MySqlParser.ENCRYPTION - 334)) | (1 << (MySqlParser.END - 334)) | (1 << (MySqlParser.ENDS - 334)) | (1 << (MySqlParser.ENGINE - 334)) | (1 << (MySqlParser.ENGINES - 334)) | (1 << (MySqlParser.ERROR - 334)) | (1 << (MySqlParser.ERRORS - 334)) | (1 << (MySqlParser.ESCAPE - 334)) | (1 << (MySqlParser.EVEN - 334)) | (1 << (MySqlParser.EVENT - 334)) | (1 << (MySqlParser.EVENTS - 334)) | (1 << (MySqlParser.EVERY - 334)) | (1 << (MySqlParser.EXCHANGE - 334)) | (1 << (MySqlParser.EXCLUSIVE - 334)) | (1 << (MySqlParser.EXPIRE - 334)) | (1 << (MySqlParser.EXPORT - 334)) | (1 << (MySqlParser.EXTENDED - 334)) | (1 << (MySqlParser.EXTENT_SIZE - 334)) | (1 << (MySqlParser.FAST - 334)) | (1 << (MySqlParser.FAULTS - 334)) | (1 << (MySqlParser.FIELDS - 334)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySqlParser.FILTER - 334)) | (1 << (MySqlParser.FIRST - 334)) | (1 << (MySqlParser.FIXED - 334)) | (1 << (MySqlParser.FLUSH - 334)) | (1 << (MySqlParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySqlParser.FOUND - 366)) | (1 << (MySqlParser.FULL - 366)) | (1 << (MySqlParser.FUNCTION - 366)) | (1 << (MySqlParser.GENERAL - 366)) | (1 << (MySqlParser.GLOBAL - 366)) | (1 << (MySqlParser.GRANTS - 366)) | (1 << (MySqlParser.GROUP_REPLICATION - 366)) | (1 << (MySqlParser.HANDLER - 366)) | (1 << (MySqlParser.HASH - 366)) | (1 << (MySqlParser.HELP - 366)) | (1 << (MySqlParser.HOST - 366)) | (1 << (MySqlParser.HOSTS - 366)) | (1 << (MySqlParser.IDENTIFIED - 366)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySqlParser.IMPORT - 366)) | (1 << (MySqlParser.INDEXES - 366)) | (1 << (MySqlParser.INITIAL_SIZE - 366)) | (1 << (MySqlParser.INPLACE - 366)) | (1 << (MySqlParser.INSERT_METHOD - 366)) | (1 << (MySqlParser.INSTALL - 366)) | (1 << (MySqlParser.INSTANCE - 366)) | (1 << (MySqlParser.INVISIBLE - 366)) | (1 << (MySqlParser.INVOKER - 366)) | (1 << (MySqlParser.IO - 366)) | (1 << (MySqlParser.IO_THREAD - 366)) | (1 << (MySqlParser.IPC - 366)) | (1 << (MySqlParser.ISOLATION - 366)) | (1 << (MySqlParser.ISSUER - 366)) | (1 << (MySqlParser.JSON - 366)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySqlParser.LANGUAGE - 366)) | (1 << (MySqlParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.LEAVES - 398)) | (1 << (MySqlParser.LESS - 398)) | (1 << (MySqlParser.LEVEL - 398)) | (1 << (MySqlParser.LIST - 398)) | (1 << (MySqlParser.LOCAL - 398)) | (1 << (MySqlParser.LOGFILE - 398)) | (1 << (MySqlParser.LOGS - 398)) | (1 << (MySqlParser.MASTER - 398)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySqlParser.MASTER_DELAY - 398)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySqlParser.MASTER_HOST - 398)) | (1 << (MySqlParser.MASTER_LOG_FILE - 398)) | (1 << (MySqlParser.MASTER_LOG_POS - 398)) | (1 << (MySqlParser.MASTER_PASSWORD - 398)) | (1 << (MySqlParser.MASTER_PORT - 398)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySqlParser.MASTER_SSL - 398)) | (1 << (MySqlParser.MASTER_SSL_CA - 398)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_CERT - 398)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySqlParser.MASTER_SSL_CRL - 398)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_KEY - 398)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 398)) | (1 << (MySqlParser.MASTER_USER - 398)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySqlParser.MEDIUM - 430)) | (1 << (MySqlParser.MEMBER - 430)) | (1 << (MySqlParser.MERGE - 430)) | (1 << (MySqlParser.MESSAGE_TEXT - 430)) | (1 << (MySqlParser.MID - 430)) | (1 << (MySqlParser.MIGRATE - 430)) | (1 << (MySqlParser.MIN_ROWS - 430)) | (1 << (MySqlParser.MODE - 430)) | (1 << (MySqlParser.MODIFY - 430)) | (1 << (MySqlParser.MUTEX - 430)) | (1 << (MySqlParser.MYSQL - 430)) | (1 << (MySqlParser.MYSQL_ERRNO - 430)) | (1 << (MySqlParser.NAME - 430)) | (1 << (MySqlParser.NAMES - 430)) | (1 << (MySqlParser.NCHAR - 430)) | (1 << (MySqlParser.NEVER - 430)) | (1 << (MySqlParser.NEXT - 430)) | (1 << (MySqlParser.NO - 430)) | (1 << (MySqlParser.NODEGROUP - 430)) | (1 << (MySqlParser.NONE - 430)) | (1 << (MySqlParser.OFFLINE - 430)) | (1 << (MySqlParser.OFFSET - 430)) | (1 << (MySqlParser.OF - 430)) | (1 << (MySqlParser.OJ - 430)) | (1 << (MySqlParser.OLD_PASSWORD - 430)) | (1 << (MySqlParser.ONE - 430)) | (1 << (MySqlParser.ONLINE - 430)) | (1 << (MySqlParser.ONLY - 430)) | (1 << (MySqlParser.OPEN - 430)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySqlParser.OPTIONS - 462)) | (1 << (MySqlParser.OWNER - 462)) | (1 << (MySqlParser.PACK_KEYS - 462)) | (1 << (MySqlParser.PAGE - 462)) | (1 << (MySqlParser.PARSER - 462)) | (1 << (MySqlParser.PARTIAL - 462)) | (1 << (MySqlParser.PARTITIONING - 462)) | (1 << (MySqlParser.PARTITIONS - 462)) | (1 << (MySqlParser.PASSWORD - 462)) | (1 << (MySqlParser.PHASE - 462)) | (1 << (MySqlParser.PLUGIN - 462)) | (1 << (MySqlParser.PLUGIN_DIR - 462)) | (1 << (MySqlParser.PLUGINS - 462)) | (1 << (MySqlParser.PORT - 462)) | (1 << (MySqlParser.PRECEDES - 462)) | (1 << (MySqlParser.PREPARE - 462)) | (1 << (MySqlParser.PRESERVE - 462)) | (1 << (MySqlParser.PREV - 462)) | (1 << (MySqlParser.PROCESSLIST - 462)) | (1 << (MySqlParser.PROFILE - 462)) | (1 << (MySqlParser.PROFILES - 462)) | (1 << (MySqlParser.PROXY - 462)) | (1 << (MySqlParser.QUERY - 462)) | (1 << (MySqlParser.QUICK - 462)) | (1 << (MySqlParser.REBUILD - 462)) | (1 << (MySqlParser.RECOVER - 462)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySqlParser.REDUNDANT - 462)) | (1 << (MySqlParser.RELAY - 462)) | (1 << (MySqlParser.RELAY_LOG_FILE - 462)) | (1 << (MySqlParser.RELAY_LOG_POS - 462)) | (1 << (MySqlParser.RELAYLOG - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySqlParser.REMOVE - 494)) | (1 << (MySqlParser.REORGANIZE - 494)) | (1 << (MySqlParser.REPAIR - 494)) | (1 << (MySqlParser.REPLICATE_DO_DB - 494)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATION - 494)) | (1 << (MySqlParser.RESET - 494)) | (1 << (MySqlParser.RESUME - 494)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 494)) | (1 << (MySqlParser.RETURNS - 494)) | (1 << (MySqlParser.ROLE - 494)) | (1 << (MySqlParser.ROLLBACK - 494)) | (1 << (MySqlParser.ROLLUP - 494)) | (1 << (MySqlParser.ROTATE - 494)) | (1 << (MySqlParser.ROW - 494)) | (1 << (MySqlParser.ROWS - 494)) | (1 << (MySqlParser.ROW_FORMAT - 494)) | (1 << (MySqlParser.SAVEPOINT - 494)) | (1 << (MySqlParser.SCHEDULE - 494)) | (1 << (MySqlParser.SECURITY - 494)) | (1 << (MySqlParser.SERVER - 494)) | (1 << (MySqlParser.SESSION - 494)) | (1 << (MySqlParser.SHARE - 494)) | (1 << (MySqlParser.SHARED - 494)) | (1 << (MySqlParser.SIGNED - 494)) | (1 << (MySqlParser.SIMPLE - 494)) | (1 << (MySqlParser.SLAVE - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySqlParser.SLOW - 526)) | (1 << (MySqlParser.SNAPSHOT - 526)) | (1 << (MySqlParser.SOCKET - 526)) | (1 << (MySqlParser.SOME - 526)) | (1 << (MySqlParser.SONAME - 526)) | (1 << (MySqlParser.SOUNDS - 526)) | (1 << (MySqlParser.SOURCE - 526)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySqlParser.SQL_CACHE - 526)) | (1 << (MySqlParser.SQL_NO_CACHE - 526)) | (1 << (MySqlParser.SQL_THREAD - 526)) | (1 << (MySqlParser.START - 526)) | (1 << (MySqlParser.STARTS - 526)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 526)) | (1 << (MySqlParser.STATS_PERSISTENT - 526)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySqlParser.STATUS - 526)) | (1 << (MySqlParser.STOP - 526)) | (1 << (MySqlParser.STORAGE - 526)) | (1 << (MySqlParser.STRING - 526)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySqlParser.SUBJECT - 526)) | (1 << (MySqlParser.SUBPARTITION - 526)) | (1 << (MySqlParser.SUBPARTITIONS - 526)) | (1 << (MySqlParser.SUSPEND - 526)) | (1 << (MySqlParser.SWAPS - 526)) | (1 << (MySqlParser.SWITCHES - 526)) | (1 << (MySqlParser.TABLE_NAME - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySqlParser.TABLESPACE - 558)) | (1 << (MySqlParser.TEMPORARY - 558)) | (1 << (MySqlParser.TEMPTABLE - 558)) | (1 << (MySqlParser.THAN - 558)) | (1 << (MySqlParser.TRADITIONAL - 558)) | (1 << (MySqlParser.TRANSACTION - 558)) | (1 << (MySqlParser.TRANSACTIONAL - 558)) | (1 << (MySqlParser.TRIGGERS - 558)) | (1 << (MySqlParser.TRUNCATE - 558)) | (1 << (MySqlParser.UNDEFINED - 558)) | (1 << (MySqlParser.UNDOFILE - 558)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySqlParser.UNINSTALL - 558)) | (1 << (MySqlParser.UNKNOWN - 558)) | (1 << (MySqlParser.UNTIL - 558)) | (1 << (MySqlParser.UPGRADE - 558)) | (1 << (MySqlParser.USER - 558)) | (1 << (MySqlParser.USE_FRM - 558)) | (1 << (MySqlParser.USER_RESOURCES - 558)) | (1 << (MySqlParser.VALIDATION - 558)) | (1 << (MySqlParser.VALUE - 558)) | (1 << (MySqlParser.VARIABLES - 558)) | (1 << (MySqlParser.VIEW - 558)) | (1 << (MySqlParser.VISIBLE - 558)) | (1 << (MySqlParser.WAIT - 558)) | (1 << (MySqlParser.WARNINGS - 558)) | (1 << (MySqlParser.WITHOUT - 558)) | (1 << (MySqlParser.WORK - 558)) | (1 << (MySqlParser.WRAPPER - 558)) | (1 << (MySqlParser.X509 - 558)) | (1 << (MySqlParser.XA - 558)))) !== 0) || ((((_la - 590)) & ~0x1f) == 0 && ((1 << (_la - 590)) & ((1 << (MySqlParser.XML - 590)) | (1 << (MySqlParser.INTERNAL - 590)) | (1 << (MySqlParser.QUARTER - 590)) | (1 << (MySqlParser.MONTH - 590)) | (1 << (MySqlParser.DAY - 590)) | (1 << (MySqlParser.HOUR - 590)) | (1 << (MySqlParser.MINUTE - 590)) | (1 << (MySqlParser.WEEK - 590)) | (1 << (MySqlParser.SECOND - 590)) | (1 << (MySqlParser.MICROSECOND - 590)) | (1 << (MySqlParser.TABLES - 590)) | (1 << (MySqlParser.ROUTINE - 590)) | (1 << (MySqlParser.EXECUTE - 590)) | (1 << (MySqlParser.FILE - 590)) | (1 << (MySqlParser.PROCESS - 590)) | (1 << (MySqlParser.RELOAD - 590)) | (1 << (MySqlParser.SHUTDOWN - 590)) | (1 << (MySqlParser.SUPER - 590)) | (1 << (MySqlParser.PRIVILEGES - 590)) | (1 << (MySqlParser.AUDIT_ADMIN - 590)) | (1 << (MySqlParser.BACKUP_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 590)) | (1 << (MySqlParser.CLONE_ADMIN - 590)) | (1 << (MySqlParser.CONNECTION_ADMIN - 590)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 590)) | (1 << (MySqlParser.FIREWALL_ADMIN - 590)))) !== 0) || ((((_la - 622)) & ~0x1f) == 0 && ((1 << (_la - 622)) & ((1 << (MySqlParser.FIREWALL_USER - 622)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 622)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 622)) | (1 << (MySqlParser.NDB_STORED_USER - 622)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.REPLICATION_APPLIER - 622)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 622)) | (1 << (MySqlParser.ROLE_ADMIN - 622)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.SET_USER_ID - 622)) | (1 << (MySqlParser.SHOW_ROUTINE - 622)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 622)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 622)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 622)) | (1 << (MySqlParser.ARMSCII8 - 622)) | (1 << (MySqlParser.ASCII - 622)) | (1 << (MySqlParser.BIG5 - 622)) | (1 << (MySqlParser.CP1250 - 622)) | (1 << (MySqlParser.CP1251 - 622)) | (1 << (MySqlParser.CP1256 - 622)) | (1 << (MySqlParser.CP1257 - 622)) | (1 << (MySqlParser.CP850 - 622)) | (1 << (MySqlParser.CP852 - 622)) | (1 << (MySqlParser.CP866 - 622)) | (1 << (MySqlParser.CP932 - 622)) | (1 << (MySqlParser.DEC8 - 622)) | (1 << (MySqlParser.EUCJPMS - 622)) | (1 << (MySqlParser.EUCKR - 622)) | (1 << (MySqlParser.GB2312 - 622)))) !== 0) || ((((_la - 654)) & ~0x1f) == 0 && ((1 << (_la - 654)) & ((1 << (MySqlParser.GBK - 654)) | (1 << (MySqlParser.GEOSTD8 - 654)) | (1 << (MySqlParser.GREEK - 654)) | (1 << (MySqlParser.HEBREW - 654)) | (1 << (MySqlParser.HP8 - 654)) | (1 << (MySqlParser.KEYBCS2 - 654)) | (1 << (MySqlParser.KOI8R - 654)) | (1 << (MySqlParser.KOI8U - 654)) | (1 << (MySqlParser.LATIN1 - 654)) | (1 << (MySqlParser.LATIN2 - 654)) | (1 << (MySqlParser.LATIN5 - 654)) | (1 << (MySqlParser.LATIN7 - 654)) | (1 << (MySqlParser.MACCE - 654)) | (1 << (MySqlParser.MACROMAN - 654)) | (1 << (MySqlParser.SJIS - 654)) | (1 << (MySqlParser.SWE7 - 654)) | (1 << (MySqlParser.TIS620 - 654)) | (1 << (MySqlParser.UCS2 - 654)) | (1 << (MySqlParser.UJIS - 654)) | (1 << (MySqlParser.UTF16 - 654)) | (1 << (MySqlParser.UTF16LE - 654)) | (1 << (MySqlParser.UTF32 - 654)) | (1 << (MySqlParser.UTF8 - 654)) | (1 << (MySqlParser.UTF8MB3 - 654)) | (1 << (MySqlParser.UTF8MB4 - 654)) | (1 << (MySqlParser.ARCHIVE - 654)) | (1 << (MySqlParser.BLACKHOLE - 654)) | (1 << (MySqlParser.CSV - 654)) | (1 << (MySqlParser.FEDERATED - 654)) | (1 << (MySqlParser.INNODB - 654)) | (1 << (MySqlParser.MEMORY - 654)) | (1 << (MySqlParser.MRG_MYISAM - 654)))) !== 0) || ((((_la - 686)) & ~0x1f) == 0 && ((1 << (_la - 686)) & ((1 << (MySqlParser.MYISAM - 686)) | (1 << (MySqlParser.NDB - 686)) | (1 << (MySqlParser.NDBCLUSTER - 686)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 686)) | (1 << (MySqlParser.TOKUDB - 686)) | (1 << (MySqlParser.REPEATABLE - 686)) | (1 << (MySqlParser.COMMITTED - 686)) | (1 << (MySqlParser.UNCOMMITTED - 686)) | (1 << (MySqlParser.SERIALIZABLE - 686)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 686)) | (1 << (MySqlParser.LINESTRING - 686)) | (1 << (MySqlParser.MULTILINESTRING - 686)) | (1 << (MySqlParser.MULTIPOINT - 686)) | (1 << (MySqlParser.MULTIPOLYGON - 686)) | (1 << (MySqlParser.POINT - 686)) | (1 << (MySqlParser.POLYGON - 686)) | (1 << (MySqlParser.ABS - 686)) | (1 << (MySqlParser.ACOS - 686)) | (1 << (MySqlParser.ADDDATE - 686)) | (1 << (MySqlParser.ADDTIME - 686)) | (1 << (MySqlParser.AES_DECRYPT - 686)) | (1 << (MySqlParser.AES_ENCRYPT - 686)) | (1 << (MySqlParser.AREA - 686)) | (1 << (MySqlParser.ASBINARY - 686)) | (1 << (MySqlParser.ASIN - 686)) | (1 << (MySqlParser.ASTEXT - 686)) | (1 << (MySqlParser.ASWKB - 686)) | (1 << (MySqlParser.ASWKT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 686)))) !== 0) || ((((_la - 718)) & ~0x1f) == 0 && ((1 << (_la - 718)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 718)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 718)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 718)) | (1 << (MySqlParser.ATAN - 718)) | (1 << (MySqlParser.ATAN2 - 718)) | (1 << (MySqlParser.BENCHMARK - 718)) | (1 << (MySqlParser.BIN - 718)) | (1 << (MySqlParser.BIT_COUNT - 718)) | (1 << (MySqlParser.BIT_LENGTH - 718)) | (1 << (MySqlParser.BUFFER - 718)) | (1 << (MySqlParser.CATALOG_NAME - 718)) | (1 << (MySqlParser.CEIL - 718)) | (1 << (MySqlParser.CEILING - 718)) | (1 << (MySqlParser.CENTROID - 718)) | (1 << (MySqlParser.CHARACTER_LENGTH - 718)) | (1 << (MySqlParser.CHARSET - 718)) | (1 << (MySqlParser.CHAR_LENGTH - 718)) | (1 << (MySqlParser.COERCIBILITY - 718)) | (1 << (MySqlParser.COLLATION - 718)) | (1 << (MySqlParser.COMPRESS - 718)) | (1 << (MySqlParser.CONCAT - 718)) | (1 << (MySqlParser.CONCAT_WS - 718)) | (1 << (MySqlParser.CONNECTION_ID - 718)) | (1 << (MySqlParser.CONV - 718)) | (1 << (MySqlParser.CONVERT_TZ - 718)) | (1 << (MySqlParser.COS - 718)) | (1 << (MySqlParser.COT - 718)) | (1 << (MySqlParser.CRC32 - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 718)) | (1 << (MySqlParser.CREATE_DIGEST - 718)))) !== 0) || ((((_la - 750)) & ~0x1f) == 0 && ((1 << (_la - 750)) & ((1 << (MySqlParser.CROSSES - 750)) | (1 << (MySqlParser.DATEDIFF - 750)) | (1 << (MySqlParser.DATE_FORMAT - 750)) | (1 << (MySqlParser.DAYNAME - 750)) | (1 << (MySqlParser.DAYOFMONTH - 750)) | (1 << (MySqlParser.DAYOFWEEK - 750)) | (1 << (MySqlParser.DAYOFYEAR - 750)) | (1 << (MySqlParser.DECODE - 750)) | (1 << (MySqlParser.DEGREES - 750)) | (1 << (MySqlParser.DES_DECRYPT - 750)) | (1 << (MySqlParser.DES_ENCRYPT - 750)) | (1 << (MySqlParser.DIMENSION - 750)) | (1 << (MySqlParser.DISJOINT - 750)) | (1 << (MySqlParser.ELT - 750)) | (1 << (MySqlParser.ENCODE - 750)) | (1 << (MySqlParser.ENCRYPT - 750)) | (1 << (MySqlParser.ENDPOINT - 750)) | (1 << (MySqlParser.ENVELOPE - 750)) | (1 << (MySqlParser.EQUALS - 750)) | (1 << (MySqlParser.EXP - 750)) | (1 << (MySqlParser.EXPORT_SET - 750)) | (1 << (MySqlParser.EXTERIORRING - 750)) | (1 << (MySqlParser.EXTRACTVALUE - 750)) | (1 << (MySqlParser.FIELD - 750)) | (1 << (MySqlParser.FIND_IN_SET - 750)) | (1 << (MySqlParser.FLOOR - 750)) | (1 << (MySqlParser.FORMAT - 750)) | (1 << (MySqlParser.FOUND_ROWS - 750)) | (1 << (MySqlParser.FROM_BASE64 - 750)) | (1 << (MySqlParser.FROM_DAYS - 750)) | (1 << (MySqlParser.FROM_UNIXTIME - 750)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 750)))) !== 0) || ((((_la - 782)) & ~0x1f) == 0 && ((1 << (_la - 782)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYN - 782)) | (1 << (MySqlParser.GEOMETRYTYPE - 782)) | (1 << (MySqlParser.GEOMFROMTEXT - 782)) | (1 << (MySqlParser.GEOMFROMWKB - 782)) | (1 << (MySqlParser.GET_FORMAT - 782)) | (1 << (MySqlParser.GET_LOCK - 782)) | (1 << (MySqlParser.GLENGTH - 782)) | (1 << (MySqlParser.GREATEST - 782)) | (1 << (MySqlParser.GTID_SUBSET - 782)) | (1 << (MySqlParser.GTID_SUBTRACT - 782)) | (1 << (MySqlParser.HEX - 782)) | (1 << (MySqlParser.IFNULL - 782)) | (1 << (MySqlParser.INET6_ATON - 782)) | (1 << (MySqlParser.INET6_NTOA - 782)) | (1 << (MySqlParser.INET_ATON - 782)) | (1 << (MySqlParser.INET_NTOA - 782)) | (1 << (MySqlParser.INSTR - 782)) | (1 << (MySqlParser.INTERIORRINGN - 782)) | (1 << (MySqlParser.INTERSECTS - 782)) | (1 << (MySqlParser.ISCLOSED - 782)) | (1 << (MySqlParser.ISEMPTY - 782)) | (1 << (MySqlParser.ISNULL - 782)) | (1 << (MySqlParser.ISSIMPLE - 782)) | (1 << (MySqlParser.IS_FREE_LOCK - 782)) | (1 << (MySqlParser.IS_IPV4 - 782)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 782)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 782)))) !== 0) || ((((_la - 814)) & ~0x1f) == 0 && ((1 << (_la - 814)) & ((1 << (MySqlParser.IS_IPV6 - 814)) | (1 << (MySqlParser.IS_USED_LOCK - 814)) | (1 << (MySqlParser.LAST_INSERT_ID - 814)) | (1 << (MySqlParser.LCASE - 814)) | (1 << (MySqlParser.LEAST - 814)) | (1 << (MySqlParser.LENGTH - 814)) | (1 << (MySqlParser.LINEFROMTEXT - 814)) | (1 << (MySqlParser.LINEFROMWKB - 814)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 814)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 814)) | (1 << (MySqlParser.LN - 814)) | (1 << (MySqlParser.LOAD_FILE - 814)) | (1 << (MySqlParser.LOCATE - 814)) | (1 << (MySqlParser.LOG - 814)) | (1 << (MySqlParser.LOG10 - 814)) | (1 << (MySqlParser.LOG2 - 814)) | (1 << (MySqlParser.LOWER - 814)) | (1 << (MySqlParser.LPAD - 814)) | (1 << (MySqlParser.LTRIM - 814)) | (1 << (MySqlParser.MAKEDATE - 814)) | (1 << (MySqlParser.MAKETIME - 814)) | (1 << (MySqlParser.MAKE_SET - 814)) | (1 << (MySqlParser.MASTER_POS_WAIT - 814)) | (1 << (MySqlParser.MBRCONTAINS - 814)) | (1 << (MySqlParser.MBRDISJOINT - 814)) | (1 << (MySqlParser.MBREQUAL - 814)) | (1 << (MySqlParser.MBRINTERSECTS - 814)) | (1 << (MySqlParser.MBROVERLAPS - 814)) | (1 << (MySqlParser.MBRTOUCHES - 814)) | (1 << (MySqlParser.MBRWITHIN - 814)) | (1 << (MySqlParser.MD5 - 814)) | (1 << (MySqlParser.MLINEFROMTEXT - 814)))) !== 0) || ((((_la - 846)) & ~0x1f) == 0 && ((1 << (_la - 846)) & ((1 << (MySqlParser.MLINEFROMWKB - 846)) | (1 << (MySqlParser.MONTHNAME - 846)) | (1 << (MySqlParser.MPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MPOINTFROMWKB - 846)) | (1 << (MySqlParser.MPOLYFROMTEXT - 846)) | (1 << (MySqlParser.MPOLYFROMWKB - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 846)) | (1 << (MySqlParser.NAME_CONST - 846)) | (1 << (MySqlParser.NULLIF - 846)) | (1 << (MySqlParser.NUMGEOMETRIES - 846)) | (1 << (MySqlParser.NUMINTERIORRINGS - 846)) | (1 << (MySqlParser.NUMPOINTS - 846)) | (1 << (MySqlParser.OCT - 846)) | (1 << (MySqlParser.OCTET_LENGTH - 846)) | (1 << (MySqlParser.ORD - 846)) | (1 << (MySqlParser.OVERLAPS - 846)) | (1 << (MySqlParser.PERIOD_ADD - 846)) | (1 << (MySqlParser.PERIOD_DIFF - 846)) | (1 << (MySqlParser.PI - 846)) | (1 << (MySqlParser.POINTFROMTEXT - 846)) | (1 << (MySqlParser.POINTFROMWKB - 846)) | (1 << (MySqlParser.POINTN - 846)) | (1 << (MySqlParser.POLYFROMTEXT - 846)) | (1 << (MySqlParser.POLYFROMWKB - 846)) | (1 << (MySqlParser.POLYGONFROMTEXT - 846)) | (1 << (MySqlParser.POLYGONFROMWKB - 846)) | (1 << (MySqlParser.POW - 846)))) !== 0) || ((((_la - 878)) & ~0x1f) == 0 && ((1 << (_la - 878)) & ((1 << (MySqlParser.POWER - 878)) | (1 << (MySqlParser.QUOTE - 878)) | (1 << (MySqlParser.RADIANS - 878)) | (1 << (MySqlParser.RAND - 878)) | (1 << (MySqlParser.RANDOM_BYTES - 878)) | (1 << (MySqlParser.RELEASE_LOCK - 878)) | (1 << (MySqlParser.REVERSE - 878)) | (1 << (MySqlParser.ROUND - 878)) | (1 << (MySqlParser.ROW_COUNT - 878)) | (1 << (MySqlParser.RPAD - 878)) | (1 << (MySqlParser.RTRIM - 878)) | (1 << (MySqlParser.SEC_TO_TIME - 878)) | (1 << (MySqlParser.SESSION_USER - 878)) | (1 << (MySqlParser.SHA - 878)) | (1 << (MySqlParser.SHA1 - 878)) | (1 << (MySqlParser.SHA2 - 878)) | (1 << (MySqlParser.SCHEMA_NAME - 878)) | (1 << (MySqlParser.SIGN - 878)) | (1 << (MySqlParser.SIN - 878)) | (1 << (MySqlParser.SLEEP - 878)) | (1 << (MySqlParser.SOUNDEX - 878)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 878)) | (1 << (MySqlParser.SQRT - 878)) | (1 << (MySqlParser.SRID - 878)) | (1 << (MySqlParser.STARTPOINT - 878)) | (1 << (MySqlParser.STRCMP - 878)) | (1 << (MySqlParser.STR_TO_DATE - 878)) | (1 << (MySqlParser.ST_AREA - 878)) | (1 << (MySqlParser.ST_ASBINARY - 878)) | (1 << (MySqlParser.ST_ASTEXT - 878)) | (1 << (MySqlParser.ST_ASWKB - 878)) | (1 << (MySqlParser.ST_ASWKT - 878)))) !== 0) || ((((_la - 910)) & ~0x1f) == 0 && ((1 << (_la - 910)) & ((1 << (MySqlParser.ST_BUFFER - 910)) | (1 << (MySqlParser.ST_CENTROID - 910)) | (1 << (MySqlParser.ST_CONTAINS - 910)) | (1 << (MySqlParser.ST_CROSSES - 910)) | (1 << (MySqlParser.ST_DIFFERENCE - 910)) | (1 << (MySqlParser.ST_DIMENSION - 910)) | (1 << (MySqlParser.ST_DISJOINT - 910)) | (1 << (MySqlParser.ST_DISTANCE - 910)) | (1 << (MySqlParser.ST_ENDPOINT - 910)) | (1 << (MySqlParser.ST_ENVELOPE - 910)) | (1 << (MySqlParser.ST_EQUALS - 910)) | (1 << (MySqlParser.ST_EXTERIORRING - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYN - 910)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 910)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 910)) | (1 << (MySqlParser.ST_INTERIORRINGN - 910)) | (1 << (MySqlParser.ST_INTERSECTION - 910)) | (1 << (MySqlParser.ST_INTERSECTS - 910)) | (1 << (MySqlParser.ST_ISCLOSED - 910)) | (1 << (MySqlParser.ST_ISEMPTY - 910)) | (1 << (MySqlParser.ST_ISSIMPLE - 910)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 910)) | (1 << (MySqlParser.ST_LINEFROMWKB - 910)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 910)))) !== 0) || ((((_la - 942)) & ~0x1f) == 0 && ((1 << (_la - 942)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 942)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 942)) | (1 << (MySqlParser.ST_NUMPOINTS - 942)) | (1 << (MySqlParser.ST_OVERLAPS - 942)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 942)) | (1 << (MySqlParser.ST_POINTFROMWKB - 942)) | (1 << (MySqlParser.ST_POINTN - 942)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYFROMWKB - 942)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 942)) | (1 << (MySqlParser.ST_SRID - 942)) | (1 << (MySqlParser.ST_STARTPOINT - 942)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 942)) | (1 << (MySqlParser.ST_TOUCHES - 942)) | (1 << (MySqlParser.ST_UNION - 942)) | (1 << (MySqlParser.ST_WITHIN - 942)) | (1 << (MySqlParser.ST_X - 942)) | (1 << (MySqlParser.ST_Y - 942)) | (1 << (MySqlParser.SUBDATE - 942)) | (1 << (MySqlParser.SUBSTRING_INDEX - 942)) | (1 << (MySqlParser.SUBTIME - 942)) | (1 << (MySqlParser.SYSTEM_USER - 942)) | (1 << (MySqlParser.TAN - 942)) | (1 << (MySqlParser.TIMEDIFF - 942)) | (1 << (MySqlParser.TIMESTAMPADD - 942)) | (1 << (MySqlParser.TIMESTAMPDIFF - 942)) | (1 << (MySqlParser.TIME_FORMAT - 942)) | (1 << (MySqlParser.TIME_TO_SEC - 942)) | (1 << (MySqlParser.TOUCHES - 942)))) !== 0) || ((((_la - 974)) & ~0x1f) == 0 && ((1 << (_la - 974)) & ((1 << (MySqlParser.TO_BASE64 - 974)) | (1 << (MySqlParser.TO_DAYS - 974)) | (1 << (MySqlParser.TO_SECONDS - 974)) | (1 << (MySqlParser.UCASE - 974)) | (1 << (MySqlParser.UNCOMPRESS - 974)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 974)) | (1 << (MySqlParser.UNHEX - 974)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 974)) | (1 << (MySqlParser.UPDATEXML - 974)) | (1 << (MySqlParser.UPPER - 974)) | (1 << (MySqlParser.UUID - 974)) | (1 << (MySqlParser.UUID_SHORT - 974)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 974)) | (1 << (MySqlParser.VERSION - 974)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1 << (MySqlParser.WEEKDAY - 974)) | (1 << (MySqlParser.WEEKOFYEAR - 974)) | (1 << (MySqlParser.WEIGHT_STRING - 974)) | (1 << (MySqlParser.WITHIN - 974)) | (1 << (MySqlParser.YEARWEEK - 974)) | (1 << (MySqlParser.Y_FUNCTION - 974)) | (1 << (MySqlParser.X_FUNCTION - 974)))) !== 0) || ((((_la - 1034)) & ~0x1f) == 0 && ((1 << (_la - 1034)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (MySqlParser.STRING_LITERAL - 1034)) | (1 << (MySqlParser.ID - 1034)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1034)))) !== 0)) {
	                this.state = 2344;
	                localctx.indexName = this.uid();
	            }

	            this.state = 2348;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.USING) {
	                this.state = 2347;
	                this.indexType();
	            }

	            this.state = 2350;
	            this.indexColumnNames();
	            this.state = 2354;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.USING || _la===MySqlParser.WITH || _la===MySqlParser.COMMENT || _la===MySqlParser.INVISIBLE || _la===MySqlParser.KEY_BLOCK_SIZE || _la===MySqlParser.VISIBLE) {
	                this.state = 2351;
	                this.indexOption();
	                this.state = 2356;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 7:
	            localctx = new AlterByAddSpecialIndexContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2357;
	            this.match(MySqlParser.ADD);
	            this.state = 2358;
	            localctx.keyType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.FULLTEXT || _la===MySqlParser.SPATIAL)) {
	                localctx.keyType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2360;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.INDEX || _la===MySqlParser.KEY) {
	                this.state = 2359;
	                localctx.indexFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.INDEX || _la===MySqlParser.KEY)) {
	                    localctx.indexFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 2363;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySqlParser.CURRENT - 32)) | (1 << (MySqlParser.DATABASE - 32)) | (1 << (MySqlParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySqlParser.LEFT || _la===MySqlParser.NUMBER || _la===MySqlParser.RIGHT || _la===MySqlParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.TIMESTAMP - 199)) | (1 << (MySqlParser.DATETIME - 199)) | (1 << (MySqlParser.YEAR - 199)) | (1 << (MySqlParser.TEXT - 199)) | (1 << (MySqlParser.ENUM - 199)) | (1 << (MySqlParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.JSON_VALID - 233)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySqlParser.AVG - 233)) | (1 << (MySqlParser.BIT_AND - 233)) | (1 << (MySqlParser.BIT_OR - 233)) | (1 << (MySqlParser.BIT_XOR - 233)) | (1 << (MySqlParser.COUNT - 233)) | (1 << (MySqlParser.GROUP_CONCAT - 233)) | (1 << (MySqlParser.MAX - 233)) | (1 << (MySqlParser.MIN - 233)) | (1 << (MySqlParser.STD - 233)) | (1 << (MySqlParser.STDDEV - 233)) | (1 << (MySqlParser.STDDEV_POP - 233)) | (1 << (MySqlParser.STDDEV_SAMP - 233)) | (1 << (MySqlParser.SUM - 233)) | (1 << (MySqlParser.VAR_POP - 233)) | (1 << (MySqlParser.VAR_SAMP - 233)) | (1 << (MySqlParser.VARIANCE - 233)) | (1 << (MySqlParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySqlParser.ACCOUNT - 270)) | (1 << (MySqlParser.ACTION - 270)) | (1 << (MySqlParser.AFTER - 270)) | (1 << (MySqlParser.AGGREGATE - 270)) | (1 << (MySqlParser.ALGORITHM - 270)) | (1 << (MySqlParser.ANY - 270)) | (1 << (MySqlParser.AT - 270)) | (1 << (MySqlParser.AUTHORS - 270)) | (1 << (MySqlParser.AUTOCOMMIT - 270)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySqlParser.AUTO_INCREMENT - 270)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 270)) | (1 << (MySqlParser.BEGIN - 270)) | (1 << (MySqlParser.BINLOG - 270)) | (1 << (MySqlParser.BIT - 270)) | (1 << (MySqlParser.BLOCK - 270)) | (1 << (MySqlParser.BOOL - 270)) | (1 << (MySqlParser.BOOLEAN - 270)) | (1 << (MySqlParser.BTREE - 270)) | (1 << (MySqlParser.CACHE - 270)) | (1 << (MySqlParser.CASCADED - 270)) | (1 << (MySqlParser.CHAIN - 270)) | (1 << (MySqlParser.CHANGED - 270)) | (1 << (MySqlParser.CHANNEL - 270)) | (1 << (MySqlParser.CHECKSUM - 270)) | (1 << (MySqlParser.PAGE_CHECKSUM - 270)) | (1 << (MySqlParser.CIPHER - 270)) | (1 << (MySqlParser.CLASS_ORIGIN - 270)) | (1 << (MySqlParser.CLIENT - 270)) | (1 << (MySqlParser.CLOSE - 270)) | (1 << (MySqlParser.COALESCE - 270)) | (1 << (MySqlParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySqlParser.COLUMNS - 302)) | (1 << (MySqlParser.COLUMN_FORMAT - 302)) | (1 << (MySqlParser.COLUMN_NAME - 302)) | (1 << (MySqlParser.COMMENT - 302)) | (1 << (MySqlParser.COMMIT - 302)) | (1 << (MySqlParser.COMPACT - 302)) | (1 << (MySqlParser.COMPLETION - 302)) | (1 << (MySqlParser.COMPRESSED - 302)) | (1 << (MySqlParser.COMPRESSION - 302)) | (1 << (MySqlParser.CONCURRENT - 302)) | (1 << (MySqlParser.CONNECTION - 302)) | (1 << (MySqlParser.CONSISTENT - 302)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySqlParser.CONSTRAINT_NAME - 302)) | (1 << (MySqlParser.CONTAINS - 302)) | (1 << (MySqlParser.CONTEXT - 302)) | (1 << (MySqlParser.CONTRIBUTORS - 302)) | (1 << (MySqlParser.COPY - 302)) | (1 << (MySqlParser.CPU - 302)) | (1 << (MySqlParser.CURSOR_NAME - 302)) | (1 << (MySqlParser.DATA - 302)) | (1 << (MySqlParser.DATAFILE - 302)) | (1 << (MySqlParser.DEALLOCATE - 302)) | (1 << (MySqlParser.DEFAULT_AUTH - 302)) | (1 << (MySqlParser.DEFINER - 302)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 302)) | (1 << (MySqlParser.DES_KEY_FILE - 302)) | (1 << (MySqlParser.DIRECTORY - 302)) | (1 << (MySqlParser.DISABLE - 302)) | (1 << (MySqlParser.DISCARD - 302)) | (1 << (MySqlParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySqlParser.DO - 334)) | (1 << (MySqlParser.DUMPFILE - 334)) | (1 << (MySqlParser.DUPLICATE - 334)) | (1 << (MySqlParser.DYNAMIC - 334)) | (1 << (MySqlParser.ENABLE - 334)) | (1 << (MySqlParser.ENCRYPTION - 334)) | (1 << (MySqlParser.END - 334)) | (1 << (MySqlParser.ENDS - 334)) | (1 << (MySqlParser.ENGINE - 334)) | (1 << (MySqlParser.ENGINES - 334)) | (1 << (MySqlParser.ERROR - 334)) | (1 << (MySqlParser.ERRORS - 334)) | (1 << (MySqlParser.ESCAPE - 334)) | (1 << (MySqlParser.EVEN - 334)) | (1 << (MySqlParser.EVENT - 334)) | (1 << (MySqlParser.EVENTS - 334)) | (1 << (MySqlParser.EVERY - 334)) | (1 << (MySqlParser.EXCHANGE - 334)) | (1 << (MySqlParser.EXCLUSIVE - 334)) | (1 << (MySqlParser.EXPIRE - 334)) | (1 << (MySqlParser.EXPORT - 334)) | (1 << (MySqlParser.EXTENDED - 334)) | (1 << (MySqlParser.EXTENT_SIZE - 334)) | (1 << (MySqlParser.FAST - 334)) | (1 << (MySqlParser.FAULTS - 334)) | (1 << (MySqlParser.FIELDS - 334)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySqlParser.FILTER - 334)) | (1 << (MySqlParser.FIRST - 334)) | (1 << (MySqlParser.FIXED - 334)) | (1 << (MySqlParser.FLUSH - 334)) | (1 << (MySqlParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySqlParser.FOUND - 366)) | (1 << (MySqlParser.FULL - 366)) | (1 << (MySqlParser.FUNCTION - 366)) | (1 << (MySqlParser.GENERAL - 366)) | (1 << (MySqlParser.GLOBAL - 366)) | (1 << (MySqlParser.GRANTS - 366)) | (1 << (MySqlParser.GROUP_REPLICATION - 366)) | (1 << (MySqlParser.HANDLER - 366)) | (1 << (MySqlParser.HASH - 366)) | (1 << (MySqlParser.HELP - 366)) | (1 << (MySqlParser.HOST - 366)) | (1 << (MySqlParser.HOSTS - 366)) | (1 << (MySqlParser.IDENTIFIED - 366)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySqlParser.IMPORT - 366)) | (1 << (MySqlParser.INDEXES - 366)) | (1 << (MySqlParser.INITIAL_SIZE - 366)) | (1 << (MySqlParser.INPLACE - 366)) | (1 << (MySqlParser.INSERT_METHOD - 366)) | (1 << (MySqlParser.INSTALL - 366)) | (1 << (MySqlParser.INSTANCE - 366)) | (1 << (MySqlParser.INVISIBLE - 366)) | (1 << (MySqlParser.INVOKER - 366)) | (1 << (MySqlParser.IO - 366)) | (1 << (MySqlParser.IO_THREAD - 366)) | (1 << (MySqlParser.IPC - 366)) | (1 << (MySqlParser.ISOLATION - 366)) | (1 << (MySqlParser.ISSUER - 366)) | (1 << (MySqlParser.JSON - 366)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySqlParser.LANGUAGE - 366)) | (1 << (MySqlParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.LEAVES - 398)) | (1 << (MySqlParser.LESS - 398)) | (1 << (MySqlParser.LEVEL - 398)) | (1 << (MySqlParser.LIST - 398)) | (1 << (MySqlParser.LOCAL - 398)) | (1 << (MySqlParser.LOGFILE - 398)) | (1 << (MySqlParser.LOGS - 398)) | (1 << (MySqlParser.MASTER - 398)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySqlParser.MASTER_DELAY - 398)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySqlParser.MASTER_HOST - 398)) | (1 << (MySqlParser.MASTER_LOG_FILE - 398)) | (1 << (MySqlParser.MASTER_LOG_POS - 398)) | (1 << (MySqlParser.MASTER_PASSWORD - 398)) | (1 << (MySqlParser.MASTER_PORT - 398)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySqlParser.MASTER_SSL - 398)) | (1 << (MySqlParser.MASTER_SSL_CA - 398)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_CERT - 398)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySqlParser.MASTER_SSL_CRL - 398)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_KEY - 398)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 398)) | (1 << (MySqlParser.MASTER_USER - 398)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySqlParser.MEDIUM - 430)) | (1 << (MySqlParser.MEMBER - 430)) | (1 << (MySqlParser.MERGE - 430)) | (1 << (MySqlParser.MESSAGE_TEXT - 430)) | (1 << (MySqlParser.MID - 430)) | (1 << (MySqlParser.MIGRATE - 430)) | (1 << (MySqlParser.MIN_ROWS - 430)) | (1 << (MySqlParser.MODE - 430)) | (1 << (MySqlParser.MODIFY - 430)) | (1 << (MySqlParser.MUTEX - 430)) | (1 << (MySqlParser.MYSQL - 430)) | (1 << (MySqlParser.MYSQL_ERRNO - 430)) | (1 << (MySqlParser.NAME - 430)) | (1 << (MySqlParser.NAMES - 430)) | (1 << (MySqlParser.NCHAR - 430)) | (1 << (MySqlParser.NEVER - 430)) | (1 << (MySqlParser.NEXT - 430)) | (1 << (MySqlParser.NO - 430)) | (1 << (MySqlParser.NODEGROUP - 430)) | (1 << (MySqlParser.NONE - 430)) | (1 << (MySqlParser.OFFLINE - 430)) | (1 << (MySqlParser.OFFSET - 430)) | (1 << (MySqlParser.OF - 430)) | (1 << (MySqlParser.OJ - 430)) | (1 << (MySqlParser.OLD_PASSWORD - 430)) | (1 << (MySqlParser.ONE - 430)) | (1 << (MySqlParser.ONLINE - 430)) | (1 << (MySqlParser.ONLY - 430)) | (1 << (MySqlParser.OPEN - 430)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySqlParser.OPTIONS - 462)) | (1 << (MySqlParser.OWNER - 462)) | (1 << (MySqlParser.PACK_KEYS - 462)) | (1 << (MySqlParser.PAGE - 462)) | (1 << (MySqlParser.PARSER - 462)) | (1 << (MySqlParser.PARTIAL - 462)) | (1 << (MySqlParser.PARTITIONING - 462)) | (1 << (MySqlParser.PARTITIONS - 462)) | (1 << (MySqlParser.PASSWORD - 462)) | (1 << (MySqlParser.PHASE - 462)) | (1 << (MySqlParser.PLUGIN - 462)) | (1 << (MySqlParser.PLUGIN_DIR - 462)) | (1 << (MySqlParser.PLUGINS - 462)) | (1 << (MySqlParser.PORT - 462)) | (1 << (MySqlParser.PRECEDES - 462)) | (1 << (MySqlParser.PREPARE - 462)) | (1 << (MySqlParser.PRESERVE - 462)) | (1 << (MySqlParser.PREV - 462)) | (1 << (MySqlParser.PROCESSLIST - 462)) | (1 << (MySqlParser.PROFILE - 462)) | (1 << (MySqlParser.PROFILES - 462)) | (1 << (MySqlParser.PROXY - 462)) | (1 << (MySqlParser.QUERY - 462)) | (1 << (MySqlParser.QUICK - 462)) | (1 << (MySqlParser.REBUILD - 462)) | (1 << (MySqlParser.RECOVER - 462)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySqlParser.REDUNDANT - 462)) | (1 << (MySqlParser.RELAY - 462)) | (1 << (MySqlParser.RELAY_LOG_FILE - 462)) | (1 << (MySqlParser.RELAY_LOG_POS - 462)) | (1 << (MySqlParser.RELAYLOG - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySqlParser.REMOVE - 494)) | (1 << (MySqlParser.REORGANIZE - 494)) | (1 << (MySqlParser.REPAIR - 494)) | (1 << (MySqlParser.REPLICATE_DO_DB - 494)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATION - 494)) | (1 << (MySqlParser.RESET - 494)) | (1 << (MySqlParser.RESUME - 494)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 494)) | (1 << (MySqlParser.RETURNS - 494)) | (1 << (MySqlParser.ROLE - 494)) | (1 << (MySqlParser.ROLLBACK - 494)) | (1 << (MySqlParser.ROLLUP - 494)) | (1 << (MySqlParser.ROTATE - 494)) | (1 << (MySqlParser.ROW - 494)) | (1 << (MySqlParser.ROWS - 494)) | (1 << (MySqlParser.ROW_FORMAT - 494)) | (1 << (MySqlParser.SAVEPOINT - 494)) | (1 << (MySqlParser.SCHEDULE - 494)) | (1 << (MySqlParser.SECURITY - 494)) | (1 << (MySqlParser.SERVER - 494)) | (1 << (MySqlParser.SESSION - 494)) | (1 << (MySqlParser.SHARE - 494)) | (1 << (MySqlParser.SHARED - 494)) | (1 << (MySqlParser.SIGNED - 494)) | (1 << (MySqlParser.SIMPLE - 494)) | (1 << (MySqlParser.SLAVE - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySqlParser.SLOW - 526)) | (1 << (MySqlParser.SNAPSHOT - 526)) | (1 << (MySqlParser.SOCKET - 526)) | (1 << (MySqlParser.SOME - 526)) | (1 << (MySqlParser.SONAME - 526)) | (1 << (MySqlParser.SOUNDS - 526)) | (1 << (MySqlParser.SOURCE - 526)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySqlParser.SQL_CACHE - 526)) | (1 << (MySqlParser.SQL_NO_CACHE - 526)) | (1 << (MySqlParser.SQL_THREAD - 526)) | (1 << (MySqlParser.START - 526)) | (1 << (MySqlParser.STARTS - 526)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 526)) | (1 << (MySqlParser.STATS_PERSISTENT - 526)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySqlParser.STATUS - 526)) | (1 << (MySqlParser.STOP - 526)) | (1 << (MySqlParser.STORAGE - 526)) | (1 << (MySqlParser.STRING - 526)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySqlParser.SUBJECT - 526)) | (1 << (MySqlParser.SUBPARTITION - 526)) | (1 << (MySqlParser.SUBPARTITIONS - 526)) | (1 << (MySqlParser.SUSPEND - 526)) | (1 << (MySqlParser.SWAPS - 526)) | (1 << (MySqlParser.SWITCHES - 526)) | (1 << (MySqlParser.TABLE_NAME - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySqlParser.TABLESPACE - 558)) | (1 << (MySqlParser.TEMPORARY - 558)) | (1 << (MySqlParser.TEMPTABLE - 558)) | (1 << (MySqlParser.THAN - 558)) | (1 << (MySqlParser.TRADITIONAL - 558)) | (1 << (MySqlParser.TRANSACTION - 558)) | (1 << (MySqlParser.TRANSACTIONAL - 558)) | (1 << (MySqlParser.TRIGGERS - 558)) | (1 << (MySqlParser.TRUNCATE - 558)) | (1 << (MySqlParser.UNDEFINED - 558)) | (1 << (MySqlParser.UNDOFILE - 558)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySqlParser.UNINSTALL - 558)) | (1 << (MySqlParser.UNKNOWN - 558)) | (1 << (MySqlParser.UNTIL - 558)) | (1 << (MySqlParser.UPGRADE - 558)) | (1 << (MySqlParser.USER - 558)) | (1 << (MySqlParser.USE_FRM - 558)) | (1 << (MySqlParser.USER_RESOURCES - 558)) | (1 << (MySqlParser.VALIDATION - 558)) | (1 << (MySqlParser.VALUE - 558)) | (1 << (MySqlParser.VARIABLES - 558)) | (1 << (MySqlParser.VIEW - 558)) | (1 << (MySqlParser.VISIBLE - 558)) | (1 << (MySqlParser.WAIT - 558)) | (1 << (MySqlParser.WARNINGS - 558)) | (1 << (MySqlParser.WITHOUT - 558)) | (1 << (MySqlParser.WORK - 558)) | (1 << (MySqlParser.WRAPPER - 558)) | (1 << (MySqlParser.X509 - 558)) | (1 << (MySqlParser.XA - 558)))) !== 0) || ((((_la - 590)) & ~0x1f) == 0 && ((1 << (_la - 590)) & ((1 << (MySqlParser.XML - 590)) | (1 << (MySqlParser.INTERNAL - 590)) | (1 << (MySqlParser.QUARTER - 590)) | (1 << (MySqlParser.MONTH - 590)) | (1 << (MySqlParser.DAY - 590)) | (1 << (MySqlParser.HOUR - 590)) | (1 << (MySqlParser.MINUTE - 590)) | (1 << (MySqlParser.WEEK - 590)) | (1 << (MySqlParser.SECOND - 590)) | (1 << (MySqlParser.MICROSECOND - 590)) | (1 << (MySqlParser.TABLES - 590)) | (1 << (MySqlParser.ROUTINE - 590)) | (1 << (MySqlParser.EXECUTE - 590)) | (1 << (MySqlParser.FILE - 590)) | (1 << (MySqlParser.PROCESS - 590)) | (1 << (MySqlParser.RELOAD - 590)) | (1 << (MySqlParser.SHUTDOWN - 590)) | (1 << (MySqlParser.SUPER - 590)) | (1 << (MySqlParser.PRIVILEGES - 590)) | (1 << (MySqlParser.AUDIT_ADMIN - 590)) | (1 << (MySqlParser.BACKUP_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 590)) | (1 << (MySqlParser.CLONE_ADMIN - 590)) | (1 << (MySqlParser.CONNECTION_ADMIN - 590)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 590)) | (1 << (MySqlParser.FIREWALL_ADMIN - 590)))) !== 0) || ((((_la - 622)) & ~0x1f) == 0 && ((1 << (_la - 622)) & ((1 << (MySqlParser.FIREWALL_USER - 622)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 622)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 622)) | (1 << (MySqlParser.NDB_STORED_USER - 622)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.REPLICATION_APPLIER - 622)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 622)) | (1 << (MySqlParser.ROLE_ADMIN - 622)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.SET_USER_ID - 622)) | (1 << (MySqlParser.SHOW_ROUTINE - 622)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 622)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 622)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 622)) | (1 << (MySqlParser.ARMSCII8 - 622)) | (1 << (MySqlParser.ASCII - 622)) | (1 << (MySqlParser.BIG5 - 622)) | (1 << (MySqlParser.CP1250 - 622)) | (1 << (MySqlParser.CP1251 - 622)) | (1 << (MySqlParser.CP1256 - 622)) | (1 << (MySqlParser.CP1257 - 622)) | (1 << (MySqlParser.CP850 - 622)) | (1 << (MySqlParser.CP852 - 622)) | (1 << (MySqlParser.CP866 - 622)) | (1 << (MySqlParser.CP932 - 622)) | (1 << (MySqlParser.DEC8 - 622)) | (1 << (MySqlParser.EUCJPMS - 622)) | (1 << (MySqlParser.EUCKR - 622)) | (1 << (MySqlParser.GB2312 - 622)))) !== 0) || ((((_la - 654)) & ~0x1f) == 0 && ((1 << (_la - 654)) & ((1 << (MySqlParser.GBK - 654)) | (1 << (MySqlParser.GEOSTD8 - 654)) | (1 << (MySqlParser.GREEK - 654)) | (1 << (MySqlParser.HEBREW - 654)) | (1 << (MySqlParser.HP8 - 654)) | (1 << (MySqlParser.KEYBCS2 - 654)) | (1 << (MySqlParser.KOI8R - 654)) | (1 << (MySqlParser.KOI8U - 654)) | (1 << (MySqlParser.LATIN1 - 654)) | (1 << (MySqlParser.LATIN2 - 654)) | (1 << (MySqlParser.LATIN5 - 654)) | (1 << (MySqlParser.LATIN7 - 654)) | (1 << (MySqlParser.MACCE - 654)) | (1 << (MySqlParser.MACROMAN - 654)) | (1 << (MySqlParser.SJIS - 654)) | (1 << (MySqlParser.SWE7 - 654)) | (1 << (MySqlParser.TIS620 - 654)) | (1 << (MySqlParser.UCS2 - 654)) | (1 << (MySqlParser.UJIS - 654)) | (1 << (MySqlParser.UTF16 - 654)) | (1 << (MySqlParser.UTF16LE - 654)) | (1 << (MySqlParser.UTF32 - 654)) | (1 << (MySqlParser.UTF8 - 654)) | (1 << (MySqlParser.UTF8MB3 - 654)) | (1 << (MySqlParser.UTF8MB4 - 654)) | (1 << (MySqlParser.ARCHIVE - 654)) | (1 << (MySqlParser.BLACKHOLE - 654)) | (1 << (MySqlParser.CSV - 654)) | (1 << (MySqlParser.FEDERATED - 654)) | (1 << (MySqlParser.INNODB - 654)) | (1 << (MySqlParser.MEMORY - 654)) | (1 << (MySqlParser.MRG_MYISAM - 654)))) !== 0) || ((((_la - 686)) & ~0x1f) == 0 && ((1 << (_la - 686)) & ((1 << (MySqlParser.MYISAM - 686)) | (1 << (MySqlParser.NDB - 686)) | (1 << (MySqlParser.NDBCLUSTER - 686)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 686)) | (1 << (MySqlParser.TOKUDB - 686)) | (1 << (MySqlParser.REPEATABLE - 686)) | (1 << (MySqlParser.COMMITTED - 686)) | (1 << (MySqlParser.UNCOMMITTED - 686)) | (1 << (MySqlParser.SERIALIZABLE - 686)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 686)) | (1 << (MySqlParser.LINESTRING - 686)) | (1 << (MySqlParser.MULTILINESTRING - 686)) | (1 << (MySqlParser.MULTIPOINT - 686)) | (1 << (MySqlParser.MULTIPOLYGON - 686)) | (1 << (MySqlParser.POINT - 686)) | (1 << (MySqlParser.POLYGON - 686)) | (1 << (MySqlParser.ABS - 686)) | (1 << (MySqlParser.ACOS - 686)) | (1 << (MySqlParser.ADDDATE - 686)) | (1 << (MySqlParser.ADDTIME - 686)) | (1 << (MySqlParser.AES_DECRYPT - 686)) | (1 << (MySqlParser.AES_ENCRYPT - 686)) | (1 << (MySqlParser.AREA - 686)) | (1 << (MySqlParser.ASBINARY - 686)) | (1 << (MySqlParser.ASIN - 686)) | (1 << (MySqlParser.ASTEXT - 686)) | (1 << (MySqlParser.ASWKB - 686)) | (1 << (MySqlParser.ASWKT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 686)))) !== 0) || ((((_la - 718)) & ~0x1f) == 0 && ((1 << (_la - 718)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 718)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 718)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 718)) | (1 << (MySqlParser.ATAN - 718)) | (1 << (MySqlParser.ATAN2 - 718)) | (1 << (MySqlParser.BENCHMARK - 718)) | (1 << (MySqlParser.BIN - 718)) | (1 << (MySqlParser.BIT_COUNT - 718)) | (1 << (MySqlParser.BIT_LENGTH - 718)) | (1 << (MySqlParser.BUFFER - 718)) | (1 << (MySqlParser.CATALOG_NAME - 718)) | (1 << (MySqlParser.CEIL - 718)) | (1 << (MySqlParser.CEILING - 718)) | (1 << (MySqlParser.CENTROID - 718)) | (1 << (MySqlParser.CHARACTER_LENGTH - 718)) | (1 << (MySqlParser.CHARSET - 718)) | (1 << (MySqlParser.CHAR_LENGTH - 718)) | (1 << (MySqlParser.COERCIBILITY - 718)) | (1 << (MySqlParser.COLLATION - 718)) | (1 << (MySqlParser.COMPRESS - 718)) | (1 << (MySqlParser.CONCAT - 718)) | (1 << (MySqlParser.CONCAT_WS - 718)) | (1 << (MySqlParser.CONNECTION_ID - 718)) | (1 << (MySqlParser.CONV - 718)) | (1 << (MySqlParser.CONVERT_TZ - 718)) | (1 << (MySqlParser.COS - 718)) | (1 << (MySqlParser.COT - 718)) | (1 << (MySqlParser.CRC32 - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 718)) | (1 << (MySqlParser.CREATE_DIGEST - 718)))) !== 0) || ((((_la - 750)) & ~0x1f) == 0 && ((1 << (_la - 750)) & ((1 << (MySqlParser.CROSSES - 750)) | (1 << (MySqlParser.DATEDIFF - 750)) | (1 << (MySqlParser.DATE_FORMAT - 750)) | (1 << (MySqlParser.DAYNAME - 750)) | (1 << (MySqlParser.DAYOFMONTH - 750)) | (1 << (MySqlParser.DAYOFWEEK - 750)) | (1 << (MySqlParser.DAYOFYEAR - 750)) | (1 << (MySqlParser.DECODE - 750)) | (1 << (MySqlParser.DEGREES - 750)) | (1 << (MySqlParser.DES_DECRYPT - 750)) | (1 << (MySqlParser.DES_ENCRYPT - 750)) | (1 << (MySqlParser.DIMENSION - 750)) | (1 << (MySqlParser.DISJOINT - 750)) | (1 << (MySqlParser.ELT - 750)) | (1 << (MySqlParser.ENCODE - 750)) | (1 << (MySqlParser.ENCRYPT - 750)) | (1 << (MySqlParser.ENDPOINT - 750)) | (1 << (MySqlParser.ENVELOPE - 750)) | (1 << (MySqlParser.EQUALS - 750)) | (1 << (MySqlParser.EXP - 750)) | (1 << (MySqlParser.EXPORT_SET - 750)) | (1 << (MySqlParser.EXTERIORRING - 750)) | (1 << (MySqlParser.EXTRACTVALUE - 750)) | (1 << (MySqlParser.FIELD - 750)) | (1 << (MySqlParser.FIND_IN_SET - 750)) | (1 << (MySqlParser.FLOOR - 750)) | (1 << (MySqlParser.FORMAT - 750)) | (1 << (MySqlParser.FOUND_ROWS - 750)) | (1 << (MySqlParser.FROM_BASE64 - 750)) | (1 << (MySqlParser.FROM_DAYS - 750)) | (1 << (MySqlParser.FROM_UNIXTIME - 750)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 750)))) !== 0) || ((((_la - 782)) & ~0x1f) == 0 && ((1 << (_la - 782)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYN - 782)) | (1 << (MySqlParser.GEOMETRYTYPE - 782)) | (1 << (MySqlParser.GEOMFROMTEXT - 782)) | (1 << (MySqlParser.GEOMFROMWKB - 782)) | (1 << (MySqlParser.GET_FORMAT - 782)) | (1 << (MySqlParser.GET_LOCK - 782)) | (1 << (MySqlParser.GLENGTH - 782)) | (1 << (MySqlParser.GREATEST - 782)) | (1 << (MySqlParser.GTID_SUBSET - 782)) | (1 << (MySqlParser.GTID_SUBTRACT - 782)) | (1 << (MySqlParser.HEX - 782)) | (1 << (MySqlParser.IFNULL - 782)) | (1 << (MySqlParser.INET6_ATON - 782)) | (1 << (MySqlParser.INET6_NTOA - 782)) | (1 << (MySqlParser.INET_ATON - 782)) | (1 << (MySqlParser.INET_NTOA - 782)) | (1 << (MySqlParser.INSTR - 782)) | (1 << (MySqlParser.INTERIORRINGN - 782)) | (1 << (MySqlParser.INTERSECTS - 782)) | (1 << (MySqlParser.ISCLOSED - 782)) | (1 << (MySqlParser.ISEMPTY - 782)) | (1 << (MySqlParser.ISNULL - 782)) | (1 << (MySqlParser.ISSIMPLE - 782)) | (1 << (MySqlParser.IS_FREE_LOCK - 782)) | (1 << (MySqlParser.IS_IPV4 - 782)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 782)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 782)))) !== 0) || ((((_la - 814)) & ~0x1f) == 0 && ((1 << (_la - 814)) & ((1 << (MySqlParser.IS_IPV6 - 814)) | (1 << (MySqlParser.IS_USED_LOCK - 814)) | (1 << (MySqlParser.LAST_INSERT_ID - 814)) | (1 << (MySqlParser.LCASE - 814)) | (1 << (MySqlParser.LEAST - 814)) | (1 << (MySqlParser.LENGTH - 814)) | (1 << (MySqlParser.LINEFROMTEXT - 814)) | (1 << (MySqlParser.LINEFROMWKB - 814)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 814)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 814)) | (1 << (MySqlParser.LN - 814)) | (1 << (MySqlParser.LOAD_FILE - 814)) | (1 << (MySqlParser.LOCATE - 814)) | (1 << (MySqlParser.LOG - 814)) | (1 << (MySqlParser.LOG10 - 814)) | (1 << (MySqlParser.LOG2 - 814)) | (1 << (MySqlParser.LOWER - 814)) | (1 << (MySqlParser.LPAD - 814)) | (1 << (MySqlParser.LTRIM - 814)) | (1 << (MySqlParser.MAKEDATE - 814)) | (1 << (MySqlParser.MAKETIME - 814)) | (1 << (MySqlParser.MAKE_SET - 814)) | (1 << (MySqlParser.MASTER_POS_WAIT - 814)) | (1 << (MySqlParser.MBRCONTAINS - 814)) | (1 << (MySqlParser.MBRDISJOINT - 814)) | (1 << (MySqlParser.MBREQUAL - 814)) | (1 << (MySqlParser.MBRINTERSECTS - 814)) | (1 << (MySqlParser.MBROVERLAPS - 814)) | (1 << (MySqlParser.MBRTOUCHES - 814)) | (1 << (MySqlParser.MBRWITHIN - 814)) | (1 << (MySqlParser.MD5 - 814)) | (1 << (MySqlParser.MLINEFROMTEXT - 814)))) !== 0) || ((((_la - 846)) & ~0x1f) == 0 && ((1 << (_la - 846)) & ((1 << (MySqlParser.MLINEFROMWKB - 846)) | (1 << (MySqlParser.MONTHNAME - 846)) | (1 << (MySqlParser.MPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MPOINTFROMWKB - 846)) | (1 << (MySqlParser.MPOLYFROMTEXT - 846)) | (1 << (MySqlParser.MPOLYFROMWKB - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 846)) | (1 << (MySqlParser.NAME_CONST - 846)) | (1 << (MySqlParser.NULLIF - 846)) | (1 << (MySqlParser.NUMGEOMETRIES - 846)) | (1 << (MySqlParser.NUMINTERIORRINGS - 846)) | (1 << (MySqlParser.NUMPOINTS - 846)) | (1 << (MySqlParser.OCT - 846)) | (1 << (MySqlParser.OCTET_LENGTH - 846)) | (1 << (MySqlParser.ORD - 846)) | (1 << (MySqlParser.OVERLAPS - 846)) | (1 << (MySqlParser.PERIOD_ADD - 846)) | (1 << (MySqlParser.PERIOD_DIFF - 846)) | (1 << (MySqlParser.PI - 846)) | (1 << (MySqlParser.POINTFROMTEXT - 846)) | (1 << (MySqlParser.POINTFROMWKB - 846)) | (1 << (MySqlParser.POINTN - 846)) | (1 << (MySqlParser.POLYFROMTEXT - 846)) | (1 << (MySqlParser.POLYFROMWKB - 846)) | (1 << (MySqlParser.POLYGONFROMTEXT - 846)) | (1 << (MySqlParser.POLYGONFROMWKB - 846)) | (1 << (MySqlParser.POW - 846)))) !== 0) || ((((_la - 878)) & ~0x1f) == 0 && ((1 << (_la - 878)) & ((1 << (MySqlParser.POWER - 878)) | (1 << (MySqlParser.QUOTE - 878)) | (1 << (MySqlParser.RADIANS - 878)) | (1 << (MySqlParser.RAND - 878)) | (1 << (MySqlParser.RANDOM_BYTES - 878)) | (1 << (MySqlParser.RELEASE_LOCK - 878)) | (1 << (MySqlParser.REVERSE - 878)) | (1 << (MySqlParser.ROUND - 878)) | (1 << (MySqlParser.ROW_COUNT - 878)) | (1 << (MySqlParser.RPAD - 878)) | (1 << (MySqlParser.RTRIM - 878)) | (1 << (MySqlParser.SEC_TO_TIME - 878)) | (1 << (MySqlParser.SESSION_USER - 878)) | (1 << (MySqlParser.SHA - 878)) | (1 << (MySqlParser.SHA1 - 878)) | (1 << (MySqlParser.SHA2 - 878)) | (1 << (MySqlParser.SCHEMA_NAME - 878)) | (1 << (MySqlParser.SIGN - 878)) | (1 << (MySqlParser.SIN - 878)) | (1 << (MySqlParser.SLEEP - 878)) | (1 << (MySqlParser.SOUNDEX - 878)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 878)) | (1 << (MySqlParser.SQRT - 878)) | (1 << (MySqlParser.SRID - 878)) | (1 << (MySqlParser.STARTPOINT - 878)) | (1 << (MySqlParser.STRCMP - 878)) | (1 << (MySqlParser.STR_TO_DATE - 878)) | (1 << (MySqlParser.ST_AREA - 878)) | (1 << (MySqlParser.ST_ASBINARY - 878)) | (1 << (MySqlParser.ST_ASTEXT - 878)) | (1 << (MySqlParser.ST_ASWKB - 878)) | (1 << (MySqlParser.ST_ASWKT - 878)))) !== 0) || ((((_la - 910)) & ~0x1f) == 0 && ((1 << (_la - 910)) & ((1 << (MySqlParser.ST_BUFFER - 910)) | (1 << (MySqlParser.ST_CENTROID - 910)) | (1 << (MySqlParser.ST_CONTAINS - 910)) | (1 << (MySqlParser.ST_CROSSES - 910)) | (1 << (MySqlParser.ST_DIFFERENCE - 910)) | (1 << (MySqlParser.ST_DIMENSION - 910)) | (1 << (MySqlParser.ST_DISJOINT - 910)) | (1 << (MySqlParser.ST_DISTANCE - 910)) | (1 << (MySqlParser.ST_ENDPOINT - 910)) | (1 << (MySqlParser.ST_ENVELOPE - 910)) | (1 << (MySqlParser.ST_EQUALS - 910)) | (1 << (MySqlParser.ST_EXTERIORRING - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYN - 910)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 910)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 910)) | (1 << (MySqlParser.ST_INTERIORRINGN - 910)) | (1 << (MySqlParser.ST_INTERSECTION - 910)) | (1 << (MySqlParser.ST_INTERSECTS - 910)) | (1 << (MySqlParser.ST_ISCLOSED - 910)) | (1 << (MySqlParser.ST_ISEMPTY - 910)) | (1 << (MySqlParser.ST_ISSIMPLE - 910)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 910)) | (1 << (MySqlParser.ST_LINEFROMWKB - 910)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 910)))) !== 0) || ((((_la - 942)) & ~0x1f) == 0 && ((1 << (_la - 942)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 942)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 942)) | (1 << (MySqlParser.ST_NUMPOINTS - 942)) | (1 << (MySqlParser.ST_OVERLAPS - 942)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 942)) | (1 << (MySqlParser.ST_POINTFROMWKB - 942)) | (1 << (MySqlParser.ST_POINTN - 942)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYFROMWKB - 942)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 942)) | (1 << (MySqlParser.ST_SRID - 942)) | (1 << (MySqlParser.ST_STARTPOINT - 942)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 942)) | (1 << (MySqlParser.ST_TOUCHES - 942)) | (1 << (MySqlParser.ST_UNION - 942)) | (1 << (MySqlParser.ST_WITHIN - 942)) | (1 << (MySqlParser.ST_X - 942)) | (1 << (MySqlParser.ST_Y - 942)) | (1 << (MySqlParser.SUBDATE - 942)) | (1 << (MySqlParser.SUBSTRING_INDEX - 942)) | (1 << (MySqlParser.SUBTIME - 942)) | (1 << (MySqlParser.SYSTEM_USER - 942)) | (1 << (MySqlParser.TAN - 942)) | (1 << (MySqlParser.TIMEDIFF - 942)) | (1 << (MySqlParser.TIMESTAMPADD - 942)) | (1 << (MySqlParser.TIMESTAMPDIFF - 942)) | (1 << (MySqlParser.TIME_FORMAT - 942)) | (1 << (MySqlParser.TIME_TO_SEC - 942)) | (1 << (MySqlParser.TOUCHES - 942)))) !== 0) || ((((_la - 974)) & ~0x1f) == 0 && ((1 << (_la - 974)) & ((1 << (MySqlParser.TO_BASE64 - 974)) | (1 << (MySqlParser.TO_DAYS - 974)) | (1 << (MySqlParser.TO_SECONDS - 974)) | (1 << (MySqlParser.UCASE - 974)) | (1 << (MySqlParser.UNCOMPRESS - 974)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 974)) | (1 << (MySqlParser.UNHEX - 974)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 974)) | (1 << (MySqlParser.UPDATEXML - 974)) | (1 << (MySqlParser.UPPER - 974)) | (1 << (MySqlParser.UUID - 974)) | (1 << (MySqlParser.UUID_SHORT - 974)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 974)) | (1 << (MySqlParser.VERSION - 974)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1 << (MySqlParser.WEEKDAY - 974)) | (1 << (MySqlParser.WEEKOFYEAR - 974)) | (1 << (MySqlParser.WEIGHT_STRING - 974)) | (1 << (MySqlParser.WITHIN - 974)) | (1 << (MySqlParser.YEARWEEK - 974)) | (1 << (MySqlParser.Y_FUNCTION - 974)) | (1 << (MySqlParser.X_FUNCTION - 974)))) !== 0) || ((((_la - 1034)) & ~0x1f) == 0 && ((1 << (_la - 1034)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (MySqlParser.STRING_LITERAL - 1034)) | (1 << (MySqlParser.ID - 1034)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1034)))) !== 0)) {
	                this.state = 2362;
	                this.uid();
	            }

	            this.state = 2365;
	            this.indexColumnNames();
	            this.state = 2369;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.USING || _la===MySqlParser.WITH || _la===MySqlParser.COMMENT || _la===MySqlParser.INVISIBLE || _la===MySqlParser.KEY_BLOCK_SIZE || _la===MySqlParser.VISIBLE) {
	                this.state = 2366;
	                this.indexOption();
	                this.state = 2371;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 8:
	            localctx = new AlterByAddForeignKeyContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2372;
	            this.match(MySqlParser.ADD);
	            this.state = 2377;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.CONSTRAINT) {
	                this.state = 2373;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 2375;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySqlParser.CURRENT - 32)) | (1 << (MySqlParser.DATABASE - 32)) | (1 << (MySqlParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySqlParser.LEFT || _la===MySqlParser.NUMBER || _la===MySqlParser.RIGHT || _la===MySqlParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.TIMESTAMP - 199)) | (1 << (MySqlParser.DATETIME - 199)) | (1 << (MySqlParser.YEAR - 199)) | (1 << (MySqlParser.TEXT - 199)) | (1 << (MySqlParser.ENUM - 199)) | (1 << (MySqlParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.JSON_VALID - 233)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySqlParser.AVG - 233)) | (1 << (MySqlParser.BIT_AND - 233)) | (1 << (MySqlParser.BIT_OR - 233)) | (1 << (MySqlParser.BIT_XOR - 233)) | (1 << (MySqlParser.COUNT - 233)) | (1 << (MySqlParser.GROUP_CONCAT - 233)) | (1 << (MySqlParser.MAX - 233)) | (1 << (MySqlParser.MIN - 233)) | (1 << (MySqlParser.STD - 233)) | (1 << (MySqlParser.STDDEV - 233)) | (1 << (MySqlParser.STDDEV_POP - 233)) | (1 << (MySqlParser.STDDEV_SAMP - 233)) | (1 << (MySqlParser.SUM - 233)) | (1 << (MySqlParser.VAR_POP - 233)) | (1 << (MySqlParser.VAR_SAMP - 233)) | (1 << (MySqlParser.VARIANCE - 233)) | (1 << (MySqlParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySqlParser.ACCOUNT - 270)) | (1 << (MySqlParser.ACTION - 270)) | (1 << (MySqlParser.AFTER - 270)) | (1 << (MySqlParser.AGGREGATE - 270)) | (1 << (MySqlParser.ALGORITHM - 270)) | (1 << (MySqlParser.ANY - 270)) | (1 << (MySqlParser.AT - 270)) | (1 << (MySqlParser.AUTHORS - 270)) | (1 << (MySqlParser.AUTOCOMMIT - 270)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySqlParser.AUTO_INCREMENT - 270)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 270)) | (1 << (MySqlParser.BEGIN - 270)) | (1 << (MySqlParser.BINLOG - 270)) | (1 << (MySqlParser.BIT - 270)) | (1 << (MySqlParser.BLOCK - 270)) | (1 << (MySqlParser.BOOL - 270)) | (1 << (MySqlParser.BOOLEAN - 270)) | (1 << (MySqlParser.BTREE - 270)) | (1 << (MySqlParser.CACHE - 270)) | (1 << (MySqlParser.CASCADED - 270)) | (1 << (MySqlParser.CHAIN - 270)) | (1 << (MySqlParser.CHANGED - 270)) | (1 << (MySqlParser.CHANNEL - 270)) | (1 << (MySqlParser.CHECKSUM - 270)) | (1 << (MySqlParser.PAGE_CHECKSUM - 270)) | (1 << (MySqlParser.CIPHER - 270)) | (1 << (MySqlParser.CLASS_ORIGIN - 270)) | (1 << (MySqlParser.CLIENT - 270)) | (1 << (MySqlParser.CLOSE - 270)) | (1 << (MySqlParser.COALESCE - 270)) | (1 << (MySqlParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySqlParser.COLUMNS - 302)) | (1 << (MySqlParser.COLUMN_FORMAT - 302)) | (1 << (MySqlParser.COLUMN_NAME - 302)) | (1 << (MySqlParser.COMMENT - 302)) | (1 << (MySqlParser.COMMIT - 302)) | (1 << (MySqlParser.COMPACT - 302)) | (1 << (MySqlParser.COMPLETION - 302)) | (1 << (MySqlParser.COMPRESSED - 302)) | (1 << (MySqlParser.COMPRESSION - 302)) | (1 << (MySqlParser.CONCURRENT - 302)) | (1 << (MySqlParser.CONNECTION - 302)) | (1 << (MySqlParser.CONSISTENT - 302)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySqlParser.CONSTRAINT_NAME - 302)) | (1 << (MySqlParser.CONTAINS - 302)) | (1 << (MySqlParser.CONTEXT - 302)) | (1 << (MySqlParser.CONTRIBUTORS - 302)) | (1 << (MySqlParser.COPY - 302)) | (1 << (MySqlParser.CPU - 302)) | (1 << (MySqlParser.CURSOR_NAME - 302)) | (1 << (MySqlParser.DATA - 302)) | (1 << (MySqlParser.DATAFILE - 302)) | (1 << (MySqlParser.DEALLOCATE - 302)) | (1 << (MySqlParser.DEFAULT_AUTH - 302)) | (1 << (MySqlParser.DEFINER - 302)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 302)) | (1 << (MySqlParser.DES_KEY_FILE - 302)) | (1 << (MySqlParser.DIRECTORY - 302)) | (1 << (MySqlParser.DISABLE - 302)) | (1 << (MySqlParser.DISCARD - 302)) | (1 << (MySqlParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySqlParser.DO - 334)) | (1 << (MySqlParser.DUMPFILE - 334)) | (1 << (MySqlParser.DUPLICATE - 334)) | (1 << (MySqlParser.DYNAMIC - 334)) | (1 << (MySqlParser.ENABLE - 334)) | (1 << (MySqlParser.ENCRYPTION - 334)) | (1 << (MySqlParser.END - 334)) | (1 << (MySqlParser.ENDS - 334)) | (1 << (MySqlParser.ENGINE - 334)) | (1 << (MySqlParser.ENGINES - 334)) | (1 << (MySqlParser.ERROR - 334)) | (1 << (MySqlParser.ERRORS - 334)) | (1 << (MySqlParser.ESCAPE - 334)) | (1 << (MySqlParser.EVEN - 334)) | (1 << (MySqlParser.EVENT - 334)) | (1 << (MySqlParser.EVENTS - 334)) | (1 << (MySqlParser.EVERY - 334)) | (1 << (MySqlParser.EXCHANGE - 334)) | (1 << (MySqlParser.EXCLUSIVE - 334)) | (1 << (MySqlParser.EXPIRE - 334)) | (1 << (MySqlParser.EXPORT - 334)) | (1 << (MySqlParser.EXTENDED - 334)) | (1 << (MySqlParser.EXTENT_SIZE - 334)) | (1 << (MySqlParser.FAST - 334)) | (1 << (MySqlParser.FAULTS - 334)) | (1 << (MySqlParser.FIELDS - 334)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySqlParser.FILTER - 334)) | (1 << (MySqlParser.FIRST - 334)) | (1 << (MySqlParser.FIXED - 334)) | (1 << (MySqlParser.FLUSH - 334)) | (1 << (MySqlParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySqlParser.FOUND - 366)) | (1 << (MySqlParser.FULL - 366)) | (1 << (MySqlParser.FUNCTION - 366)) | (1 << (MySqlParser.GENERAL - 366)) | (1 << (MySqlParser.GLOBAL - 366)) | (1 << (MySqlParser.GRANTS - 366)) | (1 << (MySqlParser.GROUP_REPLICATION - 366)) | (1 << (MySqlParser.HANDLER - 366)) | (1 << (MySqlParser.HASH - 366)) | (1 << (MySqlParser.HELP - 366)) | (1 << (MySqlParser.HOST - 366)) | (1 << (MySqlParser.HOSTS - 366)) | (1 << (MySqlParser.IDENTIFIED - 366)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySqlParser.IMPORT - 366)) | (1 << (MySqlParser.INDEXES - 366)) | (1 << (MySqlParser.INITIAL_SIZE - 366)) | (1 << (MySqlParser.INPLACE - 366)) | (1 << (MySqlParser.INSERT_METHOD - 366)) | (1 << (MySqlParser.INSTALL - 366)) | (1 << (MySqlParser.INSTANCE - 366)) | (1 << (MySqlParser.INVISIBLE - 366)) | (1 << (MySqlParser.INVOKER - 366)) | (1 << (MySqlParser.IO - 366)) | (1 << (MySqlParser.IO_THREAD - 366)) | (1 << (MySqlParser.IPC - 366)) | (1 << (MySqlParser.ISOLATION - 366)) | (1 << (MySqlParser.ISSUER - 366)) | (1 << (MySqlParser.JSON - 366)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySqlParser.LANGUAGE - 366)) | (1 << (MySqlParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.LEAVES - 398)) | (1 << (MySqlParser.LESS - 398)) | (1 << (MySqlParser.LEVEL - 398)) | (1 << (MySqlParser.LIST - 398)) | (1 << (MySqlParser.LOCAL - 398)) | (1 << (MySqlParser.LOGFILE - 398)) | (1 << (MySqlParser.LOGS - 398)) | (1 << (MySqlParser.MASTER - 398)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySqlParser.MASTER_DELAY - 398)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySqlParser.MASTER_HOST - 398)) | (1 << (MySqlParser.MASTER_LOG_FILE - 398)) | (1 << (MySqlParser.MASTER_LOG_POS - 398)) | (1 << (MySqlParser.MASTER_PASSWORD - 398)) | (1 << (MySqlParser.MASTER_PORT - 398)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySqlParser.MASTER_SSL - 398)) | (1 << (MySqlParser.MASTER_SSL_CA - 398)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_CERT - 398)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySqlParser.MASTER_SSL_CRL - 398)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_KEY - 398)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 398)) | (1 << (MySqlParser.MASTER_USER - 398)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySqlParser.MEDIUM - 430)) | (1 << (MySqlParser.MEMBER - 430)) | (1 << (MySqlParser.MERGE - 430)) | (1 << (MySqlParser.MESSAGE_TEXT - 430)) | (1 << (MySqlParser.MID - 430)) | (1 << (MySqlParser.MIGRATE - 430)) | (1 << (MySqlParser.MIN_ROWS - 430)) | (1 << (MySqlParser.MODE - 430)) | (1 << (MySqlParser.MODIFY - 430)) | (1 << (MySqlParser.MUTEX - 430)) | (1 << (MySqlParser.MYSQL - 430)) | (1 << (MySqlParser.MYSQL_ERRNO - 430)) | (1 << (MySqlParser.NAME - 430)) | (1 << (MySqlParser.NAMES - 430)) | (1 << (MySqlParser.NCHAR - 430)) | (1 << (MySqlParser.NEVER - 430)) | (1 << (MySqlParser.NEXT - 430)) | (1 << (MySqlParser.NO - 430)) | (1 << (MySqlParser.NODEGROUP - 430)) | (1 << (MySqlParser.NONE - 430)) | (1 << (MySqlParser.OFFLINE - 430)) | (1 << (MySqlParser.OFFSET - 430)) | (1 << (MySqlParser.OF - 430)) | (1 << (MySqlParser.OJ - 430)) | (1 << (MySqlParser.OLD_PASSWORD - 430)) | (1 << (MySqlParser.ONE - 430)) | (1 << (MySqlParser.ONLINE - 430)) | (1 << (MySqlParser.ONLY - 430)) | (1 << (MySqlParser.OPEN - 430)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySqlParser.OPTIONS - 462)) | (1 << (MySqlParser.OWNER - 462)) | (1 << (MySqlParser.PACK_KEYS - 462)) | (1 << (MySqlParser.PAGE - 462)) | (1 << (MySqlParser.PARSER - 462)) | (1 << (MySqlParser.PARTIAL - 462)) | (1 << (MySqlParser.PARTITIONING - 462)) | (1 << (MySqlParser.PARTITIONS - 462)) | (1 << (MySqlParser.PASSWORD - 462)) | (1 << (MySqlParser.PHASE - 462)) | (1 << (MySqlParser.PLUGIN - 462)) | (1 << (MySqlParser.PLUGIN_DIR - 462)) | (1 << (MySqlParser.PLUGINS - 462)) | (1 << (MySqlParser.PORT - 462)) | (1 << (MySqlParser.PRECEDES - 462)) | (1 << (MySqlParser.PREPARE - 462)) | (1 << (MySqlParser.PRESERVE - 462)) | (1 << (MySqlParser.PREV - 462)) | (1 << (MySqlParser.PROCESSLIST - 462)) | (1 << (MySqlParser.PROFILE - 462)) | (1 << (MySqlParser.PROFILES - 462)) | (1 << (MySqlParser.PROXY - 462)) | (1 << (MySqlParser.QUERY - 462)) | (1 << (MySqlParser.QUICK - 462)) | (1 << (MySqlParser.REBUILD - 462)) | (1 << (MySqlParser.RECOVER - 462)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySqlParser.REDUNDANT - 462)) | (1 << (MySqlParser.RELAY - 462)) | (1 << (MySqlParser.RELAY_LOG_FILE - 462)) | (1 << (MySqlParser.RELAY_LOG_POS - 462)) | (1 << (MySqlParser.RELAYLOG - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySqlParser.REMOVE - 494)) | (1 << (MySqlParser.REORGANIZE - 494)) | (1 << (MySqlParser.REPAIR - 494)) | (1 << (MySqlParser.REPLICATE_DO_DB - 494)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATION - 494)) | (1 << (MySqlParser.RESET - 494)) | (1 << (MySqlParser.RESUME - 494)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 494)) | (1 << (MySqlParser.RETURNS - 494)) | (1 << (MySqlParser.ROLE - 494)) | (1 << (MySqlParser.ROLLBACK - 494)) | (1 << (MySqlParser.ROLLUP - 494)) | (1 << (MySqlParser.ROTATE - 494)) | (1 << (MySqlParser.ROW - 494)) | (1 << (MySqlParser.ROWS - 494)) | (1 << (MySqlParser.ROW_FORMAT - 494)) | (1 << (MySqlParser.SAVEPOINT - 494)) | (1 << (MySqlParser.SCHEDULE - 494)) | (1 << (MySqlParser.SECURITY - 494)) | (1 << (MySqlParser.SERVER - 494)) | (1 << (MySqlParser.SESSION - 494)) | (1 << (MySqlParser.SHARE - 494)) | (1 << (MySqlParser.SHARED - 494)) | (1 << (MySqlParser.SIGNED - 494)) | (1 << (MySqlParser.SIMPLE - 494)) | (1 << (MySqlParser.SLAVE - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySqlParser.SLOW - 526)) | (1 << (MySqlParser.SNAPSHOT - 526)) | (1 << (MySqlParser.SOCKET - 526)) | (1 << (MySqlParser.SOME - 526)) | (1 << (MySqlParser.SONAME - 526)) | (1 << (MySqlParser.SOUNDS - 526)) | (1 << (MySqlParser.SOURCE - 526)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySqlParser.SQL_CACHE - 526)) | (1 << (MySqlParser.SQL_NO_CACHE - 526)) | (1 << (MySqlParser.SQL_THREAD - 526)) | (1 << (MySqlParser.START - 526)) | (1 << (MySqlParser.STARTS - 526)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 526)) | (1 << (MySqlParser.STATS_PERSISTENT - 526)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySqlParser.STATUS - 526)) | (1 << (MySqlParser.STOP - 526)) | (1 << (MySqlParser.STORAGE - 526)) | (1 << (MySqlParser.STRING - 526)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySqlParser.SUBJECT - 526)) | (1 << (MySqlParser.SUBPARTITION - 526)) | (1 << (MySqlParser.SUBPARTITIONS - 526)) | (1 << (MySqlParser.SUSPEND - 526)) | (1 << (MySqlParser.SWAPS - 526)) | (1 << (MySqlParser.SWITCHES - 526)) | (1 << (MySqlParser.TABLE_NAME - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySqlParser.TABLESPACE - 558)) | (1 << (MySqlParser.TEMPORARY - 558)) | (1 << (MySqlParser.TEMPTABLE - 558)) | (1 << (MySqlParser.THAN - 558)) | (1 << (MySqlParser.TRADITIONAL - 558)) | (1 << (MySqlParser.TRANSACTION - 558)) | (1 << (MySqlParser.TRANSACTIONAL - 558)) | (1 << (MySqlParser.TRIGGERS - 558)) | (1 << (MySqlParser.TRUNCATE - 558)) | (1 << (MySqlParser.UNDEFINED - 558)) | (1 << (MySqlParser.UNDOFILE - 558)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySqlParser.UNINSTALL - 558)) | (1 << (MySqlParser.UNKNOWN - 558)) | (1 << (MySqlParser.UNTIL - 558)) | (1 << (MySqlParser.UPGRADE - 558)) | (1 << (MySqlParser.USER - 558)) | (1 << (MySqlParser.USE_FRM - 558)) | (1 << (MySqlParser.USER_RESOURCES - 558)) | (1 << (MySqlParser.VALIDATION - 558)) | (1 << (MySqlParser.VALUE - 558)) | (1 << (MySqlParser.VARIABLES - 558)) | (1 << (MySqlParser.VIEW - 558)) | (1 << (MySqlParser.VISIBLE - 558)) | (1 << (MySqlParser.WAIT - 558)) | (1 << (MySqlParser.WARNINGS - 558)) | (1 << (MySqlParser.WITHOUT - 558)) | (1 << (MySqlParser.WORK - 558)) | (1 << (MySqlParser.WRAPPER - 558)) | (1 << (MySqlParser.X509 - 558)) | (1 << (MySqlParser.XA - 558)))) !== 0) || ((((_la - 590)) & ~0x1f) == 0 && ((1 << (_la - 590)) & ((1 << (MySqlParser.XML - 590)) | (1 << (MySqlParser.INTERNAL - 590)) | (1 << (MySqlParser.QUARTER - 590)) | (1 << (MySqlParser.MONTH - 590)) | (1 << (MySqlParser.DAY - 590)) | (1 << (MySqlParser.HOUR - 590)) | (1 << (MySqlParser.MINUTE - 590)) | (1 << (MySqlParser.WEEK - 590)) | (1 << (MySqlParser.SECOND - 590)) | (1 << (MySqlParser.MICROSECOND - 590)) | (1 << (MySqlParser.TABLES - 590)) | (1 << (MySqlParser.ROUTINE - 590)) | (1 << (MySqlParser.EXECUTE - 590)) | (1 << (MySqlParser.FILE - 590)) | (1 << (MySqlParser.PROCESS - 590)) | (1 << (MySqlParser.RELOAD - 590)) | (1 << (MySqlParser.SHUTDOWN - 590)) | (1 << (MySqlParser.SUPER - 590)) | (1 << (MySqlParser.PRIVILEGES - 590)) | (1 << (MySqlParser.AUDIT_ADMIN - 590)) | (1 << (MySqlParser.BACKUP_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 590)) | (1 << (MySqlParser.CLONE_ADMIN - 590)) | (1 << (MySqlParser.CONNECTION_ADMIN - 590)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 590)) | (1 << (MySqlParser.FIREWALL_ADMIN - 590)))) !== 0) || ((((_la - 622)) & ~0x1f) == 0 && ((1 << (_la - 622)) & ((1 << (MySqlParser.FIREWALL_USER - 622)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 622)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 622)) | (1 << (MySqlParser.NDB_STORED_USER - 622)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.REPLICATION_APPLIER - 622)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 622)) | (1 << (MySqlParser.ROLE_ADMIN - 622)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.SET_USER_ID - 622)) | (1 << (MySqlParser.SHOW_ROUTINE - 622)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 622)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 622)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 622)) | (1 << (MySqlParser.ARMSCII8 - 622)) | (1 << (MySqlParser.ASCII - 622)) | (1 << (MySqlParser.BIG5 - 622)) | (1 << (MySqlParser.CP1250 - 622)) | (1 << (MySqlParser.CP1251 - 622)) | (1 << (MySqlParser.CP1256 - 622)) | (1 << (MySqlParser.CP1257 - 622)) | (1 << (MySqlParser.CP850 - 622)) | (1 << (MySqlParser.CP852 - 622)) | (1 << (MySqlParser.CP866 - 622)) | (1 << (MySqlParser.CP932 - 622)) | (1 << (MySqlParser.DEC8 - 622)) | (1 << (MySqlParser.EUCJPMS - 622)) | (1 << (MySqlParser.EUCKR - 622)) | (1 << (MySqlParser.GB2312 - 622)))) !== 0) || ((((_la - 654)) & ~0x1f) == 0 && ((1 << (_la - 654)) & ((1 << (MySqlParser.GBK - 654)) | (1 << (MySqlParser.GEOSTD8 - 654)) | (1 << (MySqlParser.GREEK - 654)) | (1 << (MySqlParser.HEBREW - 654)) | (1 << (MySqlParser.HP8 - 654)) | (1 << (MySqlParser.KEYBCS2 - 654)) | (1 << (MySqlParser.KOI8R - 654)) | (1 << (MySqlParser.KOI8U - 654)) | (1 << (MySqlParser.LATIN1 - 654)) | (1 << (MySqlParser.LATIN2 - 654)) | (1 << (MySqlParser.LATIN5 - 654)) | (1 << (MySqlParser.LATIN7 - 654)) | (1 << (MySqlParser.MACCE - 654)) | (1 << (MySqlParser.MACROMAN - 654)) | (1 << (MySqlParser.SJIS - 654)) | (1 << (MySqlParser.SWE7 - 654)) | (1 << (MySqlParser.TIS620 - 654)) | (1 << (MySqlParser.UCS2 - 654)) | (1 << (MySqlParser.UJIS - 654)) | (1 << (MySqlParser.UTF16 - 654)) | (1 << (MySqlParser.UTF16LE - 654)) | (1 << (MySqlParser.UTF32 - 654)) | (1 << (MySqlParser.UTF8 - 654)) | (1 << (MySqlParser.UTF8MB3 - 654)) | (1 << (MySqlParser.UTF8MB4 - 654)) | (1 << (MySqlParser.ARCHIVE - 654)) | (1 << (MySqlParser.BLACKHOLE - 654)) | (1 << (MySqlParser.CSV - 654)) | (1 << (MySqlParser.FEDERATED - 654)) | (1 << (MySqlParser.INNODB - 654)) | (1 << (MySqlParser.MEMORY - 654)) | (1 << (MySqlParser.MRG_MYISAM - 654)))) !== 0) || ((((_la - 686)) & ~0x1f) == 0 && ((1 << (_la - 686)) & ((1 << (MySqlParser.MYISAM - 686)) | (1 << (MySqlParser.NDB - 686)) | (1 << (MySqlParser.NDBCLUSTER - 686)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 686)) | (1 << (MySqlParser.TOKUDB - 686)) | (1 << (MySqlParser.REPEATABLE - 686)) | (1 << (MySqlParser.COMMITTED - 686)) | (1 << (MySqlParser.UNCOMMITTED - 686)) | (1 << (MySqlParser.SERIALIZABLE - 686)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 686)) | (1 << (MySqlParser.LINESTRING - 686)) | (1 << (MySqlParser.MULTILINESTRING - 686)) | (1 << (MySqlParser.MULTIPOINT - 686)) | (1 << (MySqlParser.MULTIPOLYGON - 686)) | (1 << (MySqlParser.POINT - 686)) | (1 << (MySqlParser.POLYGON - 686)) | (1 << (MySqlParser.ABS - 686)) | (1 << (MySqlParser.ACOS - 686)) | (1 << (MySqlParser.ADDDATE - 686)) | (1 << (MySqlParser.ADDTIME - 686)) | (1 << (MySqlParser.AES_DECRYPT - 686)) | (1 << (MySqlParser.AES_ENCRYPT - 686)) | (1 << (MySqlParser.AREA - 686)) | (1 << (MySqlParser.ASBINARY - 686)) | (1 << (MySqlParser.ASIN - 686)) | (1 << (MySqlParser.ASTEXT - 686)) | (1 << (MySqlParser.ASWKB - 686)) | (1 << (MySqlParser.ASWKT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 686)))) !== 0) || ((((_la - 718)) & ~0x1f) == 0 && ((1 << (_la - 718)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 718)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 718)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 718)) | (1 << (MySqlParser.ATAN - 718)) | (1 << (MySqlParser.ATAN2 - 718)) | (1 << (MySqlParser.BENCHMARK - 718)) | (1 << (MySqlParser.BIN - 718)) | (1 << (MySqlParser.BIT_COUNT - 718)) | (1 << (MySqlParser.BIT_LENGTH - 718)) | (1 << (MySqlParser.BUFFER - 718)) | (1 << (MySqlParser.CATALOG_NAME - 718)) | (1 << (MySqlParser.CEIL - 718)) | (1 << (MySqlParser.CEILING - 718)) | (1 << (MySqlParser.CENTROID - 718)) | (1 << (MySqlParser.CHARACTER_LENGTH - 718)) | (1 << (MySqlParser.CHARSET - 718)) | (1 << (MySqlParser.CHAR_LENGTH - 718)) | (1 << (MySqlParser.COERCIBILITY - 718)) | (1 << (MySqlParser.COLLATION - 718)) | (1 << (MySqlParser.COMPRESS - 718)) | (1 << (MySqlParser.CONCAT - 718)) | (1 << (MySqlParser.CONCAT_WS - 718)) | (1 << (MySqlParser.CONNECTION_ID - 718)) | (1 << (MySqlParser.CONV - 718)) | (1 << (MySqlParser.CONVERT_TZ - 718)) | (1 << (MySqlParser.COS - 718)) | (1 << (MySqlParser.COT - 718)) | (1 << (MySqlParser.CRC32 - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 718)) | (1 << (MySqlParser.CREATE_DIGEST - 718)))) !== 0) || ((((_la - 750)) & ~0x1f) == 0 && ((1 << (_la - 750)) & ((1 << (MySqlParser.CROSSES - 750)) | (1 << (MySqlParser.DATEDIFF - 750)) | (1 << (MySqlParser.DATE_FORMAT - 750)) | (1 << (MySqlParser.DAYNAME - 750)) | (1 << (MySqlParser.DAYOFMONTH - 750)) | (1 << (MySqlParser.DAYOFWEEK - 750)) | (1 << (MySqlParser.DAYOFYEAR - 750)) | (1 << (MySqlParser.DECODE - 750)) | (1 << (MySqlParser.DEGREES - 750)) | (1 << (MySqlParser.DES_DECRYPT - 750)) | (1 << (MySqlParser.DES_ENCRYPT - 750)) | (1 << (MySqlParser.DIMENSION - 750)) | (1 << (MySqlParser.DISJOINT - 750)) | (1 << (MySqlParser.ELT - 750)) | (1 << (MySqlParser.ENCODE - 750)) | (1 << (MySqlParser.ENCRYPT - 750)) | (1 << (MySqlParser.ENDPOINT - 750)) | (1 << (MySqlParser.ENVELOPE - 750)) | (1 << (MySqlParser.EQUALS - 750)) | (1 << (MySqlParser.EXP - 750)) | (1 << (MySqlParser.EXPORT_SET - 750)) | (1 << (MySqlParser.EXTERIORRING - 750)) | (1 << (MySqlParser.EXTRACTVALUE - 750)) | (1 << (MySqlParser.FIELD - 750)) | (1 << (MySqlParser.FIND_IN_SET - 750)) | (1 << (MySqlParser.FLOOR - 750)) | (1 << (MySqlParser.FORMAT - 750)) | (1 << (MySqlParser.FOUND_ROWS - 750)) | (1 << (MySqlParser.FROM_BASE64 - 750)) | (1 << (MySqlParser.FROM_DAYS - 750)) | (1 << (MySqlParser.FROM_UNIXTIME - 750)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 750)))) !== 0) || ((((_la - 782)) & ~0x1f) == 0 && ((1 << (_la - 782)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYN - 782)) | (1 << (MySqlParser.GEOMETRYTYPE - 782)) | (1 << (MySqlParser.GEOMFROMTEXT - 782)) | (1 << (MySqlParser.GEOMFROMWKB - 782)) | (1 << (MySqlParser.GET_FORMAT - 782)) | (1 << (MySqlParser.GET_LOCK - 782)) | (1 << (MySqlParser.GLENGTH - 782)) | (1 << (MySqlParser.GREATEST - 782)) | (1 << (MySqlParser.GTID_SUBSET - 782)) | (1 << (MySqlParser.GTID_SUBTRACT - 782)) | (1 << (MySqlParser.HEX - 782)) | (1 << (MySqlParser.IFNULL - 782)) | (1 << (MySqlParser.INET6_ATON - 782)) | (1 << (MySqlParser.INET6_NTOA - 782)) | (1 << (MySqlParser.INET_ATON - 782)) | (1 << (MySqlParser.INET_NTOA - 782)) | (1 << (MySqlParser.INSTR - 782)) | (1 << (MySqlParser.INTERIORRINGN - 782)) | (1 << (MySqlParser.INTERSECTS - 782)) | (1 << (MySqlParser.ISCLOSED - 782)) | (1 << (MySqlParser.ISEMPTY - 782)) | (1 << (MySqlParser.ISNULL - 782)) | (1 << (MySqlParser.ISSIMPLE - 782)) | (1 << (MySqlParser.IS_FREE_LOCK - 782)) | (1 << (MySqlParser.IS_IPV4 - 782)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 782)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 782)))) !== 0) || ((((_la - 814)) & ~0x1f) == 0 && ((1 << (_la - 814)) & ((1 << (MySqlParser.IS_IPV6 - 814)) | (1 << (MySqlParser.IS_USED_LOCK - 814)) | (1 << (MySqlParser.LAST_INSERT_ID - 814)) | (1 << (MySqlParser.LCASE - 814)) | (1 << (MySqlParser.LEAST - 814)) | (1 << (MySqlParser.LENGTH - 814)) | (1 << (MySqlParser.LINEFROMTEXT - 814)) | (1 << (MySqlParser.LINEFROMWKB - 814)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 814)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 814)) | (1 << (MySqlParser.LN - 814)) | (1 << (MySqlParser.LOAD_FILE - 814)) | (1 << (MySqlParser.LOCATE - 814)) | (1 << (MySqlParser.LOG - 814)) | (1 << (MySqlParser.LOG10 - 814)) | (1 << (MySqlParser.LOG2 - 814)) | (1 << (MySqlParser.LOWER - 814)) | (1 << (MySqlParser.LPAD - 814)) | (1 << (MySqlParser.LTRIM - 814)) | (1 << (MySqlParser.MAKEDATE - 814)) | (1 << (MySqlParser.MAKETIME - 814)) | (1 << (MySqlParser.MAKE_SET - 814)) | (1 << (MySqlParser.MASTER_POS_WAIT - 814)) | (1 << (MySqlParser.MBRCONTAINS - 814)) | (1 << (MySqlParser.MBRDISJOINT - 814)) | (1 << (MySqlParser.MBREQUAL - 814)) | (1 << (MySqlParser.MBRINTERSECTS - 814)) | (1 << (MySqlParser.MBROVERLAPS - 814)) | (1 << (MySqlParser.MBRTOUCHES - 814)) | (1 << (MySqlParser.MBRWITHIN - 814)) | (1 << (MySqlParser.MD5 - 814)) | (1 << (MySqlParser.MLINEFROMTEXT - 814)))) !== 0) || ((((_la - 846)) & ~0x1f) == 0 && ((1 << (_la - 846)) & ((1 << (MySqlParser.MLINEFROMWKB - 846)) | (1 << (MySqlParser.MONTHNAME - 846)) | (1 << (MySqlParser.MPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MPOINTFROMWKB - 846)) | (1 << (MySqlParser.MPOLYFROMTEXT - 846)) | (1 << (MySqlParser.MPOLYFROMWKB - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 846)) | (1 << (MySqlParser.NAME_CONST - 846)) | (1 << (MySqlParser.NULLIF - 846)) | (1 << (MySqlParser.NUMGEOMETRIES - 846)) | (1 << (MySqlParser.NUMINTERIORRINGS - 846)) | (1 << (MySqlParser.NUMPOINTS - 846)) | (1 << (MySqlParser.OCT - 846)) | (1 << (MySqlParser.OCTET_LENGTH - 846)) | (1 << (MySqlParser.ORD - 846)) | (1 << (MySqlParser.OVERLAPS - 846)) | (1 << (MySqlParser.PERIOD_ADD - 846)) | (1 << (MySqlParser.PERIOD_DIFF - 846)) | (1 << (MySqlParser.PI - 846)) | (1 << (MySqlParser.POINTFROMTEXT - 846)) | (1 << (MySqlParser.POINTFROMWKB - 846)) | (1 << (MySqlParser.POINTN - 846)) | (1 << (MySqlParser.POLYFROMTEXT - 846)) | (1 << (MySqlParser.POLYFROMWKB - 846)) | (1 << (MySqlParser.POLYGONFROMTEXT - 846)) | (1 << (MySqlParser.POLYGONFROMWKB - 846)) | (1 << (MySqlParser.POW - 846)))) !== 0) || ((((_la - 878)) & ~0x1f) == 0 && ((1 << (_la - 878)) & ((1 << (MySqlParser.POWER - 878)) | (1 << (MySqlParser.QUOTE - 878)) | (1 << (MySqlParser.RADIANS - 878)) | (1 << (MySqlParser.RAND - 878)) | (1 << (MySqlParser.RANDOM_BYTES - 878)) | (1 << (MySqlParser.RELEASE_LOCK - 878)) | (1 << (MySqlParser.REVERSE - 878)) | (1 << (MySqlParser.ROUND - 878)) | (1 << (MySqlParser.ROW_COUNT - 878)) | (1 << (MySqlParser.RPAD - 878)) | (1 << (MySqlParser.RTRIM - 878)) | (1 << (MySqlParser.SEC_TO_TIME - 878)) | (1 << (MySqlParser.SESSION_USER - 878)) | (1 << (MySqlParser.SHA - 878)) | (1 << (MySqlParser.SHA1 - 878)) | (1 << (MySqlParser.SHA2 - 878)) | (1 << (MySqlParser.SCHEMA_NAME - 878)) | (1 << (MySqlParser.SIGN - 878)) | (1 << (MySqlParser.SIN - 878)) | (1 << (MySqlParser.SLEEP - 878)) | (1 << (MySqlParser.SOUNDEX - 878)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 878)) | (1 << (MySqlParser.SQRT - 878)) | (1 << (MySqlParser.SRID - 878)) | (1 << (MySqlParser.STARTPOINT - 878)) | (1 << (MySqlParser.STRCMP - 878)) | (1 << (MySqlParser.STR_TO_DATE - 878)) | (1 << (MySqlParser.ST_AREA - 878)) | (1 << (MySqlParser.ST_ASBINARY - 878)) | (1 << (MySqlParser.ST_ASTEXT - 878)) | (1 << (MySqlParser.ST_ASWKB - 878)) | (1 << (MySqlParser.ST_ASWKT - 878)))) !== 0) || ((((_la - 910)) & ~0x1f) == 0 && ((1 << (_la - 910)) & ((1 << (MySqlParser.ST_BUFFER - 910)) | (1 << (MySqlParser.ST_CENTROID - 910)) | (1 << (MySqlParser.ST_CONTAINS - 910)) | (1 << (MySqlParser.ST_CROSSES - 910)) | (1 << (MySqlParser.ST_DIFFERENCE - 910)) | (1 << (MySqlParser.ST_DIMENSION - 910)) | (1 << (MySqlParser.ST_DISJOINT - 910)) | (1 << (MySqlParser.ST_DISTANCE - 910)) | (1 << (MySqlParser.ST_ENDPOINT - 910)) | (1 << (MySqlParser.ST_ENVELOPE - 910)) | (1 << (MySqlParser.ST_EQUALS - 910)) | (1 << (MySqlParser.ST_EXTERIORRING - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYN - 910)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 910)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 910)) | (1 << (MySqlParser.ST_INTERIORRINGN - 910)) | (1 << (MySqlParser.ST_INTERSECTION - 910)) | (1 << (MySqlParser.ST_INTERSECTS - 910)) | (1 << (MySqlParser.ST_ISCLOSED - 910)) | (1 << (MySqlParser.ST_ISEMPTY - 910)) | (1 << (MySqlParser.ST_ISSIMPLE - 910)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 910)) | (1 << (MySqlParser.ST_LINEFROMWKB - 910)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 910)))) !== 0) || ((((_la - 942)) & ~0x1f) == 0 && ((1 << (_la - 942)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 942)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 942)) | (1 << (MySqlParser.ST_NUMPOINTS - 942)) | (1 << (MySqlParser.ST_OVERLAPS - 942)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 942)) | (1 << (MySqlParser.ST_POINTFROMWKB - 942)) | (1 << (MySqlParser.ST_POINTN - 942)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYFROMWKB - 942)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 942)) | (1 << (MySqlParser.ST_SRID - 942)) | (1 << (MySqlParser.ST_STARTPOINT - 942)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 942)) | (1 << (MySqlParser.ST_TOUCHES - 942)) | (1 << (MySqlParser.ST_UNION - 942)) | (1 << (MySqlParser.ST_WITHIN - 942)) | (1 << (MySqlParser.ST_X - 942)) | (1 << (MySqlParser.ST_Y - 942)) | (1 << (MySqlParser.SUBDATE - 942)) | (1 << (MySqlParser.SUBSTRING_INDEX - 942)) | (1 << (MySqlParser.SUBTIME - 942)) | (1 << (MySqlParser.SYSTEM_USER - 942)) | (1 << (MySqlParser.TAN - 942)) | (1 << (MySqlParser.TIMEDIFF - 942)) | (1 << (MySqlParser.TIMESTAMPADD - 942)) | (1 << (MySqlParser.TIMESTAMPDIFF - 942)) | (1 << (MySqlParser.TIME_FORMAT - 942)) | (1 << (MySqlParser.TIME_TO_SEC - 942)) | (1 << (MySqlParser.TOUCHES - 942)))) !== 0) || ((((_la - 974)) & ~0x1f) == 0 && ((1 << (_la - 974)) & ((1 << (MySqlParser.TO_BASE64 - 974)) | (1 << (MySqlParser.TO_DAYS - 974)) | (1 << (MySqlParser.TO_SECONDS - 974)) | (1 << (MySqlParser.UCASE - 974)) | (1 << (MySqlParser.UNCOMPRESS - 974)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 974)) | (1 << (MySqlParser.UNHEX - 974)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 974)) | (1 << (MySqlParser.UPDATEXML - 974)) | (1 << (MySqlParser.UPPER - 974)) | (1 << (MySqlParser.UUID - 974)) | (1 << (MySqlParser.UUID_SHORT - 974)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 974)) | (1 << (MySqlParser.VERSION - 974)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1 << (MySqlParser.WEEKDAY - 974)) | (1 << (MySqlParser.WEEKOFYEAR - 974)) | (1 << (MySqlParser.WEIGHT_STRING - 974)) | (1 << (MySqlParser.WITHIN - 974)) | (1 << (MySqlParser.YEARWEEK - 974)) | (1 << (MySqlParser.Y_FUNCTION - 974)) | (1 << (MySqlParser.X_FUNCTION - 974)))) !== 0) || ((((_la - 1034)) & ~0x1f) == 0 && ((1 << (_la - 1034)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (MySqlParser.STRING_LITERAL - 1034)) | (1 << (MySqlParser.ID - 1034)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1034)))) !== 0)) {
	                    this.state = 2374;
	                    localctx.name = this.uid();
	                }

	            }

	            this.state = 2379;
	            this.match(MySqlParser.FOREIGN);
	            this.state = 2380;
	            this.match(MySqlParser.KEY);
	            this.state = 2382;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySqlParser.CURRENT - 32)) | (1 << (MySqlParser.DATABASE - 32)) | (1 << (MySqlParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySqlParser.LEFT || _la===MySqlParser.NUMBER || _la===MySqlParser.RIGHT || _la===MySqlParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.TIMESTAMP - 199)) | (1 << (MySqlParser.DATETIME - 199)) | (1 << (MySqlParser.YEAR - 199)) | (1 << (MySqlParser.TEXT - 199)) | (1 << (MySqlParser.ENUM - 199)) | (1 << (MySqlParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.JSON_VALID - 233)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySqlParser.AVG - 233)) | (1 << (MySqlParser.BIT_AND - 233)) | (1 << (MySqlParser.BIT_OR - 233)) | (1 << (MySqlParser.BIT_XOR - 233)) | (1 << (MySqlParser.COUNT - 233)) | (1 << (MySqlParser.GROUP_CONCAT - 233)) | (1 << (MySqlParser.MAX - 233)) | (1 << (MySqlParser.MIN - 233)) | (1 << (MySqlParser.STD - 233)) | (1 << (MySqlParser.STDDEV - 233)) | (1 << (MySqlParser.STDDEV_POP - 233)) | (1 << (MySqlParser.STDDEV_SAMP - 233)) | (1 << (MySqlParser.SUM - 233)) | (1 << (MySqlParser.VAR_POP - 233)) | (1 << (MySqlParser.VAR_SAMP - 233)) | (1 << (MySqlParser.VARIANCE - 233)) | (1 << (MySqlParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySqlParser.ACCOUNT - 270)) | (1 << (MySqlParser.ACTION - 270)) | (1 << (MySqlParser.AFTER - 270)) | (1 << (MySqlParser.AGGREGATE - 270)) | (1 << (MySqlParser.ALGORITHM - 270)) | (1 << (MySqlParser.ANY - 270)) | (1 << (MySqlParser.AT - 270)) | (1 << (MySqlParser.AUTHORS - 270)) | (1 << (MySqlParser.AUTOCOMMIT - 270)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySqlParser.AUTO_INCREMENT - 270)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 270)) | (1 << (MySqlParser.BEGIN - 270)) | (1 << (MySqlParser.BINLOG - 270)) | (1 << (MySqlParser.BIT - 270)) | (1 << (MySqlParser.BLOCK - 270)) | (1 << (MySqlParser.BOOL - 270)) | (1 << (MySqlParser.BOOLEAN - 270)) | (1 << (MySqlParser.BTREE - 270)) | (1 << (MySqlParser.CACHE - 270)) | (1 << (MySqlParser.CASCADED - 270)) | (1 << (MySqlParser.CHAIN - 270)) | (1 << (MySqlParser.CHANGED - 270)) | (1 << (MySqlParser.CHANNEL - 270)) | (1 << (MySqlParser.CHECKSUM - 270)) | (1 << (MySqlParser.PAGE_CHECKSUM - 270)) | (1 << (MySqlParser.CIPHER - 270)) | (1 << (MySqlParser.CLASS_ORIGIN - 270)) | (1 << (MySqlParser.CLIENT - 270)) | (1 << (MySqlParser.CLOSE - 270)) | (1 << (MySqlParser.COALESCE - 270)) | (1 << (MySqlParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySqlParser.COLUMNS - 302)) | (1 << (MySqlParser.COLUMN_FORMAT - 302)) | (1 << (MySqlParser.COLUMN_NAME - 302)) | (1 << (MySqlParser.COMMENT - 302)) | (1 << (MySqlParser.COMMIT - 302)) | (1 << (MySqlParser.COMPACT - 302)) | (1 << (MySqlParser.COMPLETION - 302)) | (1 << (MySqlParser.COMPRESSED - 302)) | (1 << (MySqlParser.COMPRESSION - 302)) | (1 << (MySqlParser.CONCURRENT - 302)) | (1 << (MySqlParser.CONNECTION - 302)) | (1 << (MySqlParser.CONSISTENT - 302)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySqlParser.CONSTRAINT_NAME - 302)) | (1 << (MySqlParser.CONTAINS - 302)) | (1 << (MySqlParser.CONTEXT - 302)) | (1 << (MySqlParser.CONTRIBUTORS - 302)) | (1 << (MySqlParser.COPY - 302)) | (1 << (MySqlParser.CPU - 302)) | (1 << (MySqlParser.CURSOR_NAME - 302)) | (1 << (MySqlParser.DATA - 302)) | (1 << (MySqlParser.DATAFILE - 302)) | (1 << (MySqlParser.DEALLOCATE - 302)) | (1 << (MySqlParser.DEFAULT_AUTH - 302)) | (1 << (MySqlParser.DEFINER - 302)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 302)) | (1 << (MySqlParser.DES_KEY_FILE - 302)) | (1 << (MySqlParser.DIRECTORY - 302)) | (1 << (MySqlParser.DISABLE - 302)) | (1 << (MySqlParser.DISCARD - 302)) | (1 << (MySqlParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySqlParser.DO - 334)) | (1 << (MySqlParser.DUMPFILE - 334)) | (1 << (MySqlParser.DUPLICATE - 334)) | (1 << (MySqlParser.DYNAMIC - 334)) | (1 << (MySqlParser.ENABLE - 334)) | (1 << (MySqlParser.ENCRYPTION - 334)) | (1 << (MySqlParser.END - 334)) | (1 << (MySqlParser.ENDS - 334)) | (1 << (MySqlParser.ENGINE - 334)) | (1 << (MySqlParser.ENGINES - 334)) | (1 << (MySqlParser.ERROR - 334)) | (1 << (MySqlParser.ERRORS - 334)) | (1 << (MySqlParser.ESCAPE - 334)) | (1 << (MySqlParser.EVEN - 334)) | (1 << (MySqlParser.EVENT - 334)) | (1 << (MySqlParser.EVENTS - 334)) | (1 << (MySqlParser.EVERY - 334)) | (1 << (MySqlParser.EXCHANGE - 334)) | (1 << (MySqlParser.EXCLUSIVE - 334)) | (1 << (MySqlParser.EXPIRE - 334)) | (1 << (MySqlParser.EXPORT - 334)) | (1 << (MySqlParser.EXTENDED - 334)) | (1 << (MySqlParser.EXTENT_SIZE - 334)) | (1 << (MySqlParser.FAST - 334)) | (1 << (MySqlParser.FAULTS - 334)) | (1 << (MySqlParser.FIELDS - 334)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySqlParser.FILTER - 334)) | (1 << (MySqlParser.FIRST - 334)) | (1 << (MySqlParser.FIXED - 334)) | (1 << (MySqlParser.FLUSH - 334)) | (1 << (MySqlParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySqlParser.FOUND - 366)) | (1 << (MySqlParser.FULL - 366)) | (1 << (MySqlParser.FUNCTION - 366)) | (1 << (MySqlParser.GENERAL - 366)) | (1 << (MySqlParser.GLOBAL - 366)) | (1 << (MySqlParser.GRANTS - 366)) | (1 << (MySqlParser.GROUP_REPLICATION - 366)) | (1 << (MySqlParser.HANDLER - 366)) | (1 << (MySqlParser.HASH - 366)) | (1 << (MySqlParser.HELP - 366)) | (1 << (MySqlParser.HOST - 366)) | (1 << (MySqlParser.HOSTS - 366)) | (1 << (MySqlParser.IDENTIFIED - 366)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySqlParser.IMPORT - 366)) | (1 << (MySqlParser.INDEXES - 366)) | (1 << (MySqlParser.INITIAL_SIZE - 366)) | (1 << (MySqlParser.INPLACE - 366)) | (1 << (MySqlParser.INSERT_METHOD - 366)) | (1 << (MySqlParser.INSTALL - 366)) | (1 << (MySqlParser.INSTANCE - 366)) | (1 << (MySqlParser.INVISIBLE - 366)) | (1 << (MySqlParser.INVOKER - 366)) | (1 << (MySqlParser.IO - 366)) | (1 << (MySqlParser.IO_THREAD - 366)) | (1 << (MySqlParser.IPC - 366)) | (1 << (MySqlParser.ISOLATION - 366)) | (1 << (MySqlParser.ISSUER - 366)) | (1 << (MySqlParser.JSON - 366)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySqlParser.LANGUAGE - 366)) | (1 << (MySqlParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.LEAVES - 398)) | (1 << (MySqlParser.LESS - 398)) | (1 << (MySqlParser.LEVEL - 398)) | (1 << (MySqlParser.LIST - 398)) | (1 << (MySqlParser.LOCAL - 398)) | (1 << (MySqlParser.LOGFILE - 398)) | (1 << (MySqlParser.LOGS - 398)) | (1 << (MySqlParser.MASTER - 398)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySqlParser.MASTER_DELAY - 398)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySqlParser.MASTER_HOST - 398)) | (1 << (MySqlParser.MASTER_LOG_FILE - 398)) | (1 << (MySqlParser.MASTER_LOG_POS - 398)) | (1 << (MySqlParser.MASTER_PASSWORD - 398)) | (1 << (MySqlParser.MASTER_PORT - 398)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySqlParser.MASTER_SSL - 398)) | (1 << (MySqlParser.MASTER_SSL_CA - 398)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_CERT - 398)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySqlParser.MASTER_SSL_CRL - 398)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_KEY - 398)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 398)) | (1 << (MySqlParser.MASTER_USER - 398)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySqlParser.MEDIUM - 430)) | (1 << (MySqlParser.MEMBER - 430)) | (1 << (MySqlParser.MERGE - 430)) | (1 << (MySqlParser.MESSAGE_TEXT - 430)) | (1 << (MySqlParser.MID - 430)) | (1 << (MySqlParser.MIGRATE - 430)) | (1 << (MySqlParser.MIN_ROWS - 430)) | (1 << (MySqlParser.MODE - 430)) | (1 << (MySqlParser.MODIFY - 430)) | (1 << (MySqlParser.MUTEX - 430)) | (1 << (MySqlParser.MYSQL - 430)) | (1 << (MySqlParser.MYSQL_ERRNO - 430)) | (1 << (MySqlParser.NAME - 430)) | (1 << (MySqlParser.NAMES - 430)) | (1 << (MySqlParser.NCHAR - 430)) | (1 << (MySqlParser.NEVER - 430)) | (1 << (MySqlParser.NEXT - 430)) | (1 << (MySqlParser.NO - 430)) | (1 << (MySqlParser.NODEGROUP - 430)) | (1 << (MySqlParser.NONE - 430)) | (1 << (MySqlParser.OFFLINE - 430)) | (1 << (MySqlParser.OFFSET - 430)) | (1 << (MySqlParser.OF - 430)) | (1 << (MySqlParser.OJ - 430)) | (1 << (MySqlParser.OLD_PASSWORD - 430)) | (1 << (MySqlParser.ONE - 430)) | (1 << (MySqlParser.ONLINE - 430)) | (1 << (MySqlParser.ONLY - 430)) | (1 << (MySqlParser.OPEN - 430)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySqlParser.OPTIONS - 462)) | (1 << (MySqlParser.OWNER - 462)) | (1 << (MySqlParser.PACK_KEYS - 462)) | (1 << (MySqlParser.PAGE - 462)) | (1 << (MySqlParser.PARSER - 462)) | (1 << (MySqlParser.PARTIAL - 462)) | (1 << (MySqlParser.PARTITIONING - 462)) | (1 << (MySqlParser.PARTITIONS - 462)) | (1 << (MySqlParser.PASSWORD - 462)) | (1 << (MySqlParser.PHASE - 462)) | (1 << (MySqlParser.PLUGIN - 462)) | (1 << (MySqlParser.PLUGIN_DIR - 462)) | (1 << (MySqlParser.PLUGINS - 462)) | (1 << (MySqlParser.PORT - 462)) | (1 << (MySqlParser.PRECEDES - 462)) | (1 << (MySqlParser.PREPARE - 462)) | (1 << (MySqlParser.PRESERVE - 462)) | (1 << (MySqlParser.PREV - 462)) | (1 << (MySqlParser.PROCESSLIST - 462)) | (1 << (MySqlParser.PROFILE - 462)) | (1 << (MySqlParser.PROFILES - 462)) | (1 << (MySqlParser.PROXY - 462)) | (1 << (MySqlParser.QUERY - 462)) | (1 << (MySqlParser.QUICK - 462)) | (1 << (MySqlParser.REBUILD - 462)) | (1 << (MySqlParser.RECOVER - 462)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySqlParser.REDUNDANT - 462)) | (1 << (MySqlParser.RELAY - 462)) | (1 << (MySqlParser.RELAY_LOG_FILE - 462)) | (1 << (MySqlParser.RELAY_LOG_POS - 462)) | (1 << (MySqlParser.RELAYLOG - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySqlParser.REMOVE - 494)) | (1 << (MySqlParser.REORGANIZE - 494)) | (1 << (MySqlParser.REPAIR - 494)) | (1 << (MySqlParser.REPLICATE_DO_DB - 494)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATION - 494)) | (1 << (MySqlParser.RESET - 494)) | (1 << (MySqlParser.RESUME - 494)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 494)) | (1 << (MySqlParser.RETURNS - 494)) | (1 << (MySqlParser.ROLE - 494)) | (1 << (MySqlParser.ROLLBACK - 494)) | (1 << (MySqlParser.ROLLUP - 494)) | (1 << (MySqlParser.ROTATE - 494)) | (1 << (MySqlParser.ROW - 494)) | (1 << (MySqlParser.ROWS - 494)) | (1 << (MySqlParser.ROW_FORMAT - 494)) | (1 << (MySqlParser.SAVEPOINT - 494)) | (1 << (MySqlParser.SCHEDULE - 494)) | (1 << (MySqlParser.SECURITY - 494)) | (1 << (MySqlParser.SERVER - 494)) | (1 << (MySqlParser.SESSION - 494)) | (1 << (MySqlParser.SHARE - 494)) | (1 << (MySqlParser.SHARED - 494)) | (1 << (MySqlParser.SIGNED - 494)) | (1 << (MySqlParser.SIMPLE - 494)) | (1 << (MySqlParser.SLAVE - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySqlParser.SLOW - 526)) | (1 << (MySqlParser.SNAPSHOT - 526)) | (1 << (MySqlParser.SOCKET - 526)) | (1 << (MySqlParser.SOME - 526)) | (1 << (MySqlParser.SONAME - 526)) | (1 << (MySqlParser.SOUNDS - 526)) | (1 << (MySqlParser.SOURCE - 526)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySqlParser.SQL_CACHE - 526)) | (1 << (MySqlParser.SQL_NO_CACHE - 526)) | (1 << (MySqlParser.SQL_THREAD - 526)) | (1 << (MySqlParser.START - 526)) | (1 << (MySqlParser.STARTS - 526)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 526)) | (1 << (MySqlParser.STATS_PERSISTENT - 526)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySqlParser.STATUS - 526)) | (1 << (MySqlParser.STOP - 526)) | (1 << (MySqlParser.STORAGE - 526)) | (1 << (MySqlParser.STRING - 526)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySqlParser.SUBJECT - 526)) | (1 << (MySqlParser.SUBPARTITION - 526)) | (1 << (MySqlParser.SUBPARTITIONS - 526)) | (1 << (MySqlParser.SUSPEND - 526)) | (1 << (MySqlParser.SWAPS - 526)) | (1 << (MySqlParser.SWITCHES - 526)) | (1 << (MySqlParser.TABLE_NAME - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySqlParser.TABLESPACE - 558)) | (1 << (MySqlParser.TEMPORARY - 558)) | (1 << (MySqlParser.TEMPTABLE - 558)) | (1 << (MySqlParser.THAN - 558)) | (1 << (MySqlParser.TRADITIONAL - 558)) | (1 << (MySqlParser.TRANSACTION - 558)) | (1 << (MySqlParser.TRANSACTIONAL - 558)) | (1 << (MySqlParser.TRIGGERS - 558)) | (1 << (MySqlParser.TRUNCATE - 558)) | (1 << (MySqlParser.UNDEFINED - 558)) | (1 << (MySqlParser.UNDOFILE - 558)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySqlParser.UNINSTALL - 558)) | (1 << (MySqlParser.UNKNOWN - 558)) | (1 << (MySqlParser.UNTIL - 558)) | (1 << (MySqlParser.UPGRADE - 558)) | (1 << (MySqlParser.USER - 558)) | (1 << (MySqlParser.USE_FRM - 558)) | (1 << (MySqlParser.USER_RESOURCES - 558)) | (1 << (MySqlParser.VALIDATION - 558)) | (1 << (MySqlParser.VALUE - 558)) | (1 << (MySqlParser.VARIABLES - 558)) | (1 << (MySqlParser.VIEW - 558)) | (1 << (MySqlParser.VISIBLE - 558)) | (1 << (MySqlParser.WAIT - 558)) | (1 << (MySqlParser.WARNINGS - 558)) | (1 << (MySqlParser.WITHOUT - 558)) | (1 << (MySqlParser.WORK - 558)) | (1 << (MySqlParser.WRAPPER - 558)) | (1 << (MySqlParser.X509 - 558)) | (1 << (MySqlParser.XA - 558)))) !== 0) || ((((_la - 590)) & ~0x1f) == 0 && ((1 << (_la - 590)) & ((1 << (MySqlParser.XML - 590)) | (1 << (MySqlParser.INTERNAL - 590)) | (1 << (MySqlParser.QUARTER - 590)) | (1 << (MySqlParser.MONTH - 590)) | (1 << (MySqlParser.DAY - 590)) | (1 << (MySqlParser.HOUR - 590)) | (1 << (MySqlParser.MINUTE - 590)) | (1 << (MySqlParser.WEEK - 590)) | (1 << (MySqlParser.SECOND - 590)) | (1 << (MySqlParser.MICROSECOND - 590)) | (1 << (MySqlParser.TABLES - 590)) | (1 << (MySqlParser.ROUTINE - 590)) | (1 << (MySqlParser.EXECUTE - 590)) | (1 << (MySqlParser.FILE - 590)) | (1 << (MySqlParser.PROCESS - 590)) | (1 << (MySqlParser.RELOAD - 590)) | (1 << (MySqlParser.SHUTDOWN - 590)) | (1 << (MySqlParser.SUPER - 590)) | (1 << (MySqlParser.PRIVILEGES - 590)) | (1 << (MySqlParser.AUDIT_ADMIN - 590)) | (1 << (MySqlParser.BACKUP_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 590)) | (1 << (MySqlParser.CLONE_ADMIN - 590)) | (1 << (MySqlParser.CONNECTION_ADMIN - 590)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 590)) | (1 << (MySqlParser.FIREWALL_ADMIN - 590)))) !== 0) || ((((_la - 622)) & ~0x1f) == 0 && ((1 << (_la - 622)) & ((1 << (MySqlParser.FIREWALL_USER - 622)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 622)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 622)) | (1 << (MySqlParser.NDB_STORED_USER - 622)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.REPLICATION_APPLIER - 622)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 622)) | (1 << (MySqlParser.ROLE_ADMIN - 622)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.SET_USER_ID - 622)) | (1 << (MySqlParser.SHOW_ROUTINE - 622)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 622)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 622)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 622)) | (1 << (MySqlParser.ARMSCII8 - 622)) | (1 << (MySqlParser.ASCII - 622)) | (1 << (MySqlParser.BIG5 - 622)) | (1 << (MySqlParser.CP1250 - 622)) | (1 << (MySqlParser.CP1251 - 622)) | (1 << (MySqlParser.CP1256 - 622)) | (1 << (MySqlParser.CP1257 - 622)) | (1 << (MySqlParser.CP850 - 622)) | (1 << (MySqlParser.CP852 - 622)) | (1 << (MySqlParser.CP866 - 622)) | (1 << (MySqlParser.CP932 - 622)) | (1 << (MySqlParser.DEC8 - 622)) | (1 << (MySqlParser.EUCJPMS - 622)) | (1 << (MySqlParser.EUCKR - 622)) | (1 << (MySqlParser.GB2312 - 622)))) !== 0) || ((((_la - 654)) & ~0x1f) == 0 && ((1 << (_la - 654)) & ((1 << (MySqlParser.GBK - 654)) | (1 << (MySqlParser.GEOSTD8 - 654)) | (1 << (MySqlParser.GREEK - 654)) | (1 << (MySqlParser.HEBREW - 654)) | (1 << (MySqlParser.HP8 - 654)) | (1 << (MySqlParser.KEYBCS2 - 654)) | (1 << (MySqlParser.KOI8R - 654)) | (1 << (MySqlParser.KOI8U - 654)) | (1 << (MySqlParser.LATIN1 - 654)) | (1 << (MySqlParser.LATIN2 - 654)) | (1 << (MySqlParser.LATIN5 - 654)) | (1 << (MySqlParser.LATIN7 - 654)) | (1 << (MySqlParser.MACCE - 654)) | (1 << (MySqlParser.MACROMAN - 654)) | (1 << (MySqlParser.SJIS - 654)) | (1 << (MySqlParser.SWE7 - 654)) | (1 << (MySqlParser.TIS620 - 654)) | (1 << (MySqlParser.UCS2 - 654)) | (1 << (MySqlParser.UJIS - 654)) | (1 << (MySqlParser.UTF16 - 654)) | (1 << (MySqlParser.UTF16LE - 654)) | (1 << (MySqlParser.UTF32 - 654)) | (1 << (MySqlParser.UTF8 - 654)) | (1 << (MySqlParser.UTF8MB3 - 654)) | (1 << (MySqlParser.UTF8MB4 - 654)) | (1 << (MySqlParser.ARCHIVE - 654)) | (1 << (MySqlParser.BLACKHOLE - 654)) | (1 << (MySqlParser.CSV - 654)) | (1 << (MySqlParser.FEDERATED - 654)) | (1 << (MySqlParser.INNODB - 654)) | (1 << (MySqlParser.MEMORY - 654)) | (1 << (MySqlParser.MRG_MYISAM - 654)))) !== 0) || ((((_la - 686)) & ~0x1f) == 0 && ((1 << (_la - 686)) & ((1 << (MySqlParser.MYISAM - 686)) | (1 << (MySqlParser.NDB - 686)) | (1 << (MySqlParser.NDBCLUSTER - 686)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 686)) | (1 << (MySqlParser.TOKUDB - 686)) | (1 << (MySqlParser.REPEATABLE - 686)) | (1 << (MySqlParser.COMMITTED - 686)) | (1 << (MySqlParser.UNCOMMITTED - 686)) | (1 << (MySqlParser.SERIALIZABLE - 686)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 686)) | (1 << (MySqlParser.LINESTRING - 686)) | (1 << (MySqlParser.MULTILINESTRING - 686)) | (1 << (MySqlParser.MULTIPOINT - 686)) | (1 << (MySqlParser.MULTIPOLYGON - 686)) | (1 << (MySqlParser.POINT - 686)) | (1 << (MySqlParser.POLYGON - 686)) | (1 << (MySqlParser.ABS - 686)) | (1 << (MySqlParser.ACOS - 686)) | (1 << (MySqlParser.ADDDATE - 686)) | (1 << (MySqlParser.ADDTIME - 686)) | (1 << (MySqlParser.AES_DECRYPT - 686)) | (1 << (MySqlParser.AES_ENCRYPT - 686)) | (1 << (MySqlParser.AREA - 686)) | (1 << (MySqlParser.ASBINARY - 686)) | (1 << (MySqlParser.ASIN - 686)) | (1 << (MySqlParser.ASTEXT - 686)) | (1 << (MySqlParser.ASWKB - 686)) | (1 << (MySqlParser.ASWKT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 686)))) !== 0) || ((((_la - 718)) & ~0x1f) == 0 && ((1 << (_la - 718)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 718)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 718)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 718)) | (1 << (MySqlParser.ATAN - 718)) | (1 << (MySqlParser.ATAN2 - 718)) | (1 << (MySqlParser.BENCHMARK - 718)) | (1 << (MySqlParser.BIN - 718)) | (1 << (MySqlParser.BIT_COUNT - 718)) | (1 << (MySqlParser.BIT_LENGTH - 718)) | (1 << (MySqlParser.BUFFER - 718)) | (1 << (MySqlParser.CATALOG_NAME - 718)) | (1 << (MySqlParser.CEIL - 718)) | (1 << (MySqlParser.CEILING - 718)) | (1 << (MySqlParser.CENTROID - 718)) | (1 << (MySqlParser.CHARACTER_LENGTH - 718)) | (1 << (MySqlParser.CHARSET - 718)) | (1 << (MySqlParser.CHAR_LENGTH - 718)) | (1 << (MySqlParser.COERCIBILITY - 718)) | (1 << (MySqlParser.COLLATION - 718)) | (1 << (MySqlParser.COMPRESS - 718)) | (1 << (MySqlParser.CONCAT - 718)) | (1 << (MySqlParser.CONCAT_WS - 718)) | (1 << (MySqlParser.CONNECTION_ID - 718)) | (1 << (MySqlParser.CONV - 718)) | (1 << (MySqlParser.CONVERT_TZ - 718)) | (1 << (MySqlParser.COS - 718)) | (1 << (MySqlParser.COT - 718)) | (1 << (MySqlParser.CRC32 - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 718)) | (1 << (MySqlParser.CREATE_DIGEST - 718)))) !== 0) || ((((_la - 750)) & ~0x1f) == 0 && ((1 << (_la - 750)) & ((1 << (MySqlParser.CROSSES - 750)) | (1 << (MySqlParser.DATEDIFF - 750)) | (1 << (MySqlParser.DATE_FORMAT - 750)) | (1 << (MySqlParser.DAYNAME - 750)) | (1 << (MySqlParser.DAYOFMONTH - 750)) | (1 << (MySqlParser.DAYOFWEEK - 750)) | (1 << (MySqlParser.DAYOFYEAR - 750)) | (1 << (MySqlParser.DECODE - 750)) | (1 << (MySqlParser.DEGREES - 750)) | (1 << (MySqlParser.DES_DECRYPT - 750)) | (1 << (MySqlParser.DES_ENCRYPT - 750)) | (1 << (MySqlParser.DIMENSION - 750)) | (1 << (MySqlParser.DISJOINT - 750)) | (1 << (MySqlParser.ELT - 750)) | (1 << (MySqlParser.ENCODE - 750)) | (1 << (MySqlParser.ENCRYPT - 750)) | (1 << (MySqlParser.ENDPOINT - 750)) | (1 << (MySqlParser.ENVELOPE - 750)) | (1 << (MySqlParser.EQUALS - 750)) | (1 << (MySqlParser.EXP - 750)) | (1 << (MySqlParser.EXPORT_SET - 750)) | (1 << (MySqlParser.EXTERIORRING - 750)) | (1 << (MySqlParser.EXTRACTVALUE - 750)) | (1 << (MySqlParser.FIELD - 750)) | (1 << (MySqlParser.FIND_IN_SET - 750)) | (1 << (MySqlParser.FLOOR - 750)) | (1 << (MySqlParser.FORMAT - 750)) | (1 << (MySqlParser.FOUND_ROWS - 750)) | (1 << (MySqlParser.FROM_BASE64 - 750)) | (1 << (MySqlParser.FROM_DAYS - 750)) | (1 << (MySqlParser.FROM_UNIXTIME - 750)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 750)))) !== 0) || ((((_la - 782)) & ~0x1f) == 0 && ((1 << (_la - 782)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYN - 782)) | (1 << (MySqlParser.GEOMETRYTYPE - 782)) | (1 << (MySqlParser.GEOMFROMTEXT - 782)) | (1 << (MySqlParser.GEOMFROMWKB - 782)) | (1 << (MySqlParser.GET_FORMAT - 782)) | (1 << (MySqlParser.GET_LOCK - 782)) | (1 << (MySqlParser.GLENGTH - 782)) | (1 << (MySqlParser.GREATEST - 782)) | (1 << (MySqlParser.GTID_SUBSET - 782)) | (1 << (MySqlParser.GTID_SUBTRACT - 782)) | (1 << (MySqlParser.HEX - 782)) | (1 << (MySqlParser.IFNULL - 782)) | (1 << (MySqlParser.INET6_ATON - 782)) | (1 << (MySqlParser.INET6_NTOA - 782)) | (1 << (MySqlParser.INET_ATON - 782)) | (1 << (MySqlParser.INET_NTOA - 782)) | (1 << (MySqlParser.INSTR - 782)) | (1 << (MySqlParser.INTERIORRINGN - 782)) | (1 << (MySqlParser.INTERSECTS - 782)) | (1 << (MySqlParser.ISCLOSED - 782)) | (1 << (MySqlParser.ISEMPTY - 782)) | (1 << (MySqlParser.ISNULL - 782)) | (1 << (MySqlParser.ISSIMPLE - 782)) | (1 << (MySqlParser.IS_FREE_LOCK - 782)) | (1 << (MySqlParser.IS_IPV4 - 782)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 782)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 782)))) !== 0) || ((((_la - 814)) & ~0x1f) == 0 && ((1 << (_la - 814)) & ((1 << (MySqlParser.IS_IPV6 - 814)) | (1 << (MySqlParser.IS_USED_LOCK - 814)) | (1 << (MySqlParser.LAST_INSERT_ID - 814)) | (1 << (MySqlParser.LCASE - 814)) | (1 << (MySqlParser.LEAST - 814)) | (1 << (MySqlParser.LENGTH - 814)) | (1 << (MySqlParser.LINEFROMTEXT - 814)) | (1 << (MySqlParser.LINEFROMWKB - 814)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 814)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 814)) | (1 << (MySqlParser.LN - 814)) | (1 << (MySqlParser.LOAD_FILE - 814)) | (1 << (MySqlParser.LOCATE - 814)) | (1 << (MySqlParser.LOG - 814)) | (1 << (MySqlParser.LOG10 - 814)) | (1 << (MySqlParser.LOG2 - 814)) | (1 << (MySqlParser.LOWER - 814)) | (1 << (MySqlParser.LPAD - 814)) | (1 << (MySqlParser.LTRIM - 814)) | (1 << (MySqlParser.MAKEDATE - 814)) | (1 << (MySqlParser.MAKETIME - 814)) | (1 << (MySqlParser.MAKE_SET - 814)) | (1 << (MySqlParser.MASTER_POS_WAIT - 814)) | (1 << (MySqlParser.MBRCONTAINS - 814)) | (1 << (MySqlParser.MBRDISJOINT - 814)) | (1 << (MySqlParser.MBREQUAL - 814)) | (1 << (MySqlParser.MBRINTERSECTS - 814)) | (1 << (MySqlParser.MBROVERLAPS - 814)) | (1 << (MySqlParser.MBRTOUCHES - 814)) | (1 << (MySqlParser.MBRWITHIN - 814)) | (1 << (MySqlParser.MD5 - 814)) | (1 << (MySqlParser.MLINEFROMTEXT - 814)))) !== 0) || ((((_la - 846)) & ~0x1f) == 0 && ((1 << (_la - 846)) & ((1 << (MySqlParser.MLINEFROMWKB - 846)) | (1 << (MySqlParser.MONTHNAME - 846)) | (1 << (MySqlParser.MPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MPOINTFROMWKB - 846)) | (1 << (MySqlParser.MPOLYFROMTEXT - 846)) | (1 << (MySqlParser.MPOLYFROMWKB - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 846)) | (1 << (MySqlParser.NAME_CONST - 846)) | (1 << (MySqlParser.NULLIF - 846)) | (1 << (MySqlParser.NUMGEOMETRIES - 846)) | (1 << (MySqlParser.NUMINTERIORRINGS - 846)) | (1 << (MySqlParser.NUMPOINTS - 846)) | (1 << (MySqlParser.OCT - 846)) | (1 << (MySqlParser.OCTET_LENGTH - 846)) | (1 << (MySqlParser.ORD - 846)) | (1 << (MySqlParser.OVERLAPS - 846)) | (1 << (MySqlParser.PERIOD_ADD - 846)) | (1 << (MySqlParser.PERIOD_DIFF - 846)) | (1 << (MySqlParser.PI - 846)) | (1 << (MySqlParser.POINTFROMTEXT - 846)) | (1 << (MySqlParser.POINTFROMWKB - 846)) | (1 << (MySqlParser.POINTN - 846)) | (1 << (MySqlParser.POLYFROMTEXT - 846)) | (1 << (MySqlParser.POLYFROMWKB - 846)) | (1 << (MySqlParser.POLYGONFROMTEXT - 846)) | (1 << (MySqlParser.POLYGONFROMWKB - 846)) | (1 << (MySqlParser.POW - 846)))) !== 0) || ((((_la - 878)) & ~0x1f) == 0 && ((1 << (_la - 878)) & ((1 << (MySqlParser.POWER - 878)) | (1 << (MySqlParser.QUOTE - 878)) | (1 << (MySqlParser.RADIANS - 878)) | (1 << (MySqlParser.RAND - 878)) | (1 << (MySqlParser.RANDOM_BYTES - 878)) | (1 << (MySqlParser.RELEASE_LOCK - 878)) | (1 << (MySqlParser.REVERSE - 878)) | (1 << (MySqlParser.ROUND - 878)) | (1 << (MySqlParser.ROW_COUNT - 878)) | (1 << (MySqlParser.RPAD - 878)) | (1 << (MySqlParser.RTRIM - 878)) | (1 << (MySqlParser.SEC_TO_TIME - 878)) | (1 << (MySqlParser.SESSION_USER - 878)) | (1 << (MySqlParser.SHA - 878)) | (1 << (MySqlParser.SHA1 - 878)) | (1 << (MySqlParser.SHA2 - 878)) | (1 << (MySqlParser.SCHEMA_NAME - 878)) | (1 << (MySqlParser.SIGN - 878)) | (1 << (MySqlParser.SIN - 878)) | (1 << (MySqlParser.SLEEP - 878)) | (1 << (MySqlParser.SOUNDEX - 878)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 878)) | (1 << (MySqlParser.SQRT - 878)) | (1 << (MySqlParser.SRID - 878)) | (1 << (MySqlParser.STARTPOINT - 878)) | (1 << (MySqlParser.STRCMP - 878)) | (1 << (MySqlParser.STR_TO_DATE - 878)) | (1 << (MySqlParser.ST_AREA - 878)) | (1 << (MySqlParser.ST_ASBINARY - 878)) | (1 << (MySqlParser.ST_ASTEXT - 878)) | (1 << (MySqlParser.ST_ASWKB - 878)) | (1 << (MySqlParser.ST_ASWKT - 878)))) !== 0) || ((((_la - 910)) & ~0x1f) == 0 && ((1 << (_la - 910)) & ((1 << (MySqlParser.ST_BUFFER - 910)) | (1 << (MySqlParser.ST_CENTROID - 910)) | (1 << (MySqlParser.ST_CONTAINS - 910)) | (1 << (MySqlParser.ST_CROSSES - 910)) | (1 << (MySqlParser.ST_DIFFERENCE - 910)) | (1 << (MySqlParser.ST_DIMENSION - 910)) | (1 << (MySqlParser.ST_DISJOINT - 910)) | (1 << (MySqlParser.ST_DISTANCE - 910)) | (1 << (MySqlParser.ST_ENDPOINT - 910)) | (1 << (MySqlParser.ST_ENVELOPE - 910)) | (1 << (MySqlParser.ST_EQUALS - 910)) | (1 << (MySqlParser.ST_EXTERIORRING - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYN - 910)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 910)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 910)) | (1 << (MySqlParser.ST_INTERIORRINGN - 910)) | (1 << (MySqlParser.ST_INTERSECTION - 910)) | (1 << (MySqlParser.ST_INTERSECTS - 910)) | (1 << (MySqlParser.ST_ISCLOSED - 910)) | (1 << (MySqlParser.ST_ISEMPTY - 910)) | (1 << (MySqlParser.ST_ISSIMPLE - 910)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 910)) | (1 << (MySqlParser.ST_LINEFROMWKB - 910)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 910)))) !== 0) || ((((_la - 942)) & ~0x1f) == 0 && ((1 << (_la - 942)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 942)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 942)) | (1 << (MySqlParser.ST_NUMPOINTS - 942)) | (1 << (MySqlParser.ST_OVERLAPS - 942)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 942)) | (1 << (MySqlParser.ST_POINTFROMWKB - 942)) | (1 << (MySqlParser.ST_POINTN - 942)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYFROMWKB - 942)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 942)) | (1 << (MySqlParser.ST_SRID - 942)) | (1 << (MySqlParser.ST_STARTPOINT - 942)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 942)) | (1 << (MySqlParser.ST_TOUCHES - 942)) | (1 << (MySqlParser.ST_UNION - 942)) | (1 << (MySqlParser.ST_WITHIN - 942)) | (1 << (MySqlParser.ST_X - 942)) | (1 << (MySqlParser.ST_Y - 942)) | (1 << (MySqlParser.SUBDATE - 942)) | (1 << (MySqlParser.SUBSTRING_INDEX - 942)) | (1 << (MySqlParser.SUBTIME - 942)) | (1 << (MySqlParser.SYSTEM_USER - 942)) | (1 << (MySqlParser.TAN - 942)) | (1 << (MySqlParser.TIMEDIFF - 942)) | (1 << (MySqlParser.TIMESTAMPADD - 942)) | (1 << (MySqlParser.TIMESTAMPDIFF - 942)) | (1 << (MySqlParser.TIME_FORMAT - 942)) | (1 << (MySqlParser.TIME_TO_SEC - 942)) | (1 << (MySqlParser.TOUCHES - 942)))) !== 0) || ((((_la - 974)) & ~0x1f) == 0 && ((1 << (_la - 974)) & ((1 << (MySqlParser.TO_BASE64 - 974)) | (1 << (MySqlParser.TO_DAYS - 974)) | (1 << (MySqlParser.TO_SECONDS - 974)) | (1 << (MySqlParser.UCASE - 974)) | (1 << (MySqlParser.UNCOMPRESS - 974)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 974)) | (1 << (MySqlParser.UNHEX - 974)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 974)) | (1 << (MySqlParser.UPDATEXML - 974)) | (1 << (MySqlParser.UPPER - 974)) | (1 << (MySqlParser.UUID - 974)) | (1 << (MySqlParser.UUID_SHORT - 974)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 974)) | (1 << (MySqlParser.VERSION - 974)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1 << (MySqlParser.WEEKDAY - 974)) | (1 << (MySqlParser.WEEKOFYEAR - 974)) | (1 << (MySqlParser.WEIGHT_STRING - 974)) | (1 << (MySqlParser.WITHIN - 974)) | (1 << (MySqlParser.YEARWEEK - 974)) | (1 << (MySqlParser.Y_FUNCTION - 974)) | (1 << (MySqlParser.X_FUNCTION - 974)))) !== 0) || ((((_la - 1034)) & ~0x1f) == 0 && ((1 << (_la - 1034)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (MySqlParser.STRING_LITERAL - 1034)) | (1 << (MySqlParser.ID - 1034)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1034)))) !== 0)) {
	                this.state = 2381;
	                localctx.indexName = this.uid();
	            }

	            this.state = 2384;
	            this.indexColumnNames();
	            this.state = 2385;
	            this.referenceDefinition();
	            break;

	        case 9:
	            localctx = new AlterByAddCheckTableConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2387;
	            this.match(MySqlParser.ADD);
	            this.state = 2392;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.CONSTRAINT) {
	                this.state = 2388;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 2390;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySqlParser.CURRENT - 32)) | (1 << (MySqlParser.DATABASE - 32)) | (1 << (MySqlParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySqlParser.LEFT || _la===MySqlParser.NUMBER || _la===MySqlParser.RIGHT || _la===MySqlParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.TIMESTAMP - 199)) | (1 << (MySqlParser.DATETIME - 199)) | (1 << (MySqlParser.YEAR - 199)) | (1 << (MySqlParser.TEXT - 199)) | (1 << (MySqlParser.ENUM - 199)) | (1 << (MySqlParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.JSON_VALID - 233)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySqlParser.AVG - 233)) | (1 << (MySqlParser.BIT_AND - 233)) | (1 << (MySqlParser.BIT_OR - 233)) | (1 << (MySqlParser.BIT_XOR - 233)) | (1 << (MySqlParser.COUNT - 233)) | (1 << (MySqlParser.GROUP_CONCAT - 233)) | (1 << (MySqlParser.MAX - 233)) | (1 << (MySqlParser.MIN - 233)) | (1 << (MySqlParser.STD - 233)) | (1 << (MySqlParser.STDDEV - 233)) | (1 << (MySqlParser.STDDEV_POP - 233)) | (1 << (MySqlParser.STDDEV_SAMP - 233)) | (1 << (MySqlParser.SUM - 233)) | (1 << (MySqlParser.VAR_POP - 233)) | (1 << (MySqlParser.VAR_SAMP - 233)) | (1 << (MySqlParser.VARIANCE - 233)) | (1 << (MySqlParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySqlParser.ACCOUNT - 270)) | (1 << (MySqlParser.ACTION - 270)) | (1 << (MySqlParser.AFTER - 270)) | (1 << (MySqlParser.AGGREGATE - 270)) | (1 << (MySqlParser.ALGORITHM - 270)) | (1 << (MySqlParser.ANY - 270)) | (1 << (MySqlParser.AT - 270)) | (1 << (MySqlParser.AUTHORS - 270)) | (1 << (MySqlParser.AUTOCOMMIT - 270)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySqlParser.AUTO_INCREMENT - 270)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 270)) | (1 << (MySqlParser.BEGIN - 270)) | (1 << (MySqlParser.BINLOG - 270)) | (1 << (MySqlParser.BIT - 270)) | (1 << (MySqlParser.BLOCK - 270)) | (1 << (MySqlParser.BOOL - 270)) | (1 << (MySqlParser.BOOLEAN - 270)) | (1 << (MySqlParser.BTREE - 270)) | (1 << (MySqlParser.CACHE - 270)) | (1 << (MySqlParser.CASCADED - 270)) | (1 << (MySqlParser.CHAIN - 270)) | (1 << (MySqlParser.CHANGED - 270)) | (1 << (MySqlParser.CHANNEL - 270)) | (1 << (MySqlParser.CHECKSUM - 270)) | (1 << (MySqlParser.PAGE_CHECKSUM - 270)) | (1 << (MySqlParser.CIPHER - 270)) | (1 << (MySqlParser.CLASS_ORIGIN - 270)) | (1 << (MySqlParser.CLIENT - 270)) | (1 << (MySqlParser.CLOSE - 270)) | (1 << (MySqlParser.COALESCE - 270)) | (1 << (MySqlParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySqlParser.COLUMNS - 302)) | (1 << (MySqlParser.COLUMN_FORMAT - 302)) | (1 << (MySqlParser.COLUMN_NAME - 302)) | (1 << (MySqlParser.COMMENT - 302)) | (1 << (MySqlParser.COMMIT - 302)) | (1 << (MySqlParser.COMPACT - 302)) | (1 << (MySqlParser.COMPLETION - 302)) | (1 << (MySqlParser.COMPRESSED - 302)) | (1 << (MySqlParser.COMPRESSION - 302)) | (1 << (MySqlParser.CONCURRENT - 302)) | (1 << (MySqlParser.CONNECTION - 302)) | (1 << (MySqlParser.CONSISTENT - 302)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySqlParser.CONSTRAINT_NAME - 302)) | (1 << (MySqlParser.CONTAINS - 302)) | (1 << (MySqlParser.CONTEXT - 302)) | (1 << (MySqlParser.CONTRIBUTORS - 302)) | (1 << (MySqlParser.COPY - 302)) | (1 << (MySqlParser.CPU - 302)) | (1 << (MySqlParser.CURSOR_NAME - 302)) | (1 << (MySqlParser.DATA - 302)) | (1 << (MySqlParser.DATAFILE - 302)) | (1 << (MySqlParser.DEALLOCATE - 302)) | (1 << (MySqlParser.DEFAULT_AUTH - 302)) | (1 << (MySqlParser.DEFINER - 302)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 302)) | (1 << (MySqlParser.DES_KEY_FILE - 302)) | (1 << (MySqlParser.DIRECTORY - 302)) | (1 << (MySqlParser.DISABLE - 302)) | (1 << (MySqlParser.DISCARD - 302)) | (1 << (MySqlParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySqlParser.DO - 334)) | (1 << (MySqlParser.DUMPFILE - 334)) | (1 << (MySqlParser.DUPLICATE - 334)) | (1 << (MySqlParser.DYNAMIC - 334)) | (1 << (MySqlParser.ENABLE - 334)) | (1 << (MySqlParser.ENCRYPTION - 334)) | (1 << (MySqlParser.END - 334)) | (1 << (MySqlParser.ENDS - 334)) | (1 << (MySqlParser.ENGINE - 334)) | (1 << (MySqlParser.ENGINES - 334)) | (1 << (MySqlParser.ERROR - 334)) | (1 << (MySqlParser.ERRORS - 334)) | (1 << (MySqlParser.ESCAPE - 334)) | (1 << (MySqlParser.EVEN - 334)) | (1 << (MySqlParser.EVENT - 334)) | (1 << (MySqlParser.EVENTS - 334)) | (1 << (MySqlParser.EVERY - 334)) | (1 << (MySqlParser.EXCHANGE - 334)) | (1 << (MySqlParser.EXCLUSIVE - 334)) | (1 << (MySqlParser.EXPIRE - 334)) | (1 << (MySqlParser.EXPORT - 334)) | (1 << (MySqlParser.EXTENDED - 334)) | (1 << (MySqlParser.EXTENT_SIZE - 334)) | (1 << (MySqlParser.FAST - 334)) | (1 << (MySqlParser.FAULTS - 334)) | (1 << (MySqlParser.FIELDS - 334)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySqlParser.FILTER - 334)) | (1 << (MySqlParser.FIRST - 334)) | (1 << (MySqlParser.FIXED - 334)) | (1 << (MySqlParser.FLUSH - 334)) | (1 << (MySqlParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySqlParser.FOUND - 366)) | (1 << (MySqlParser.FULL - 366)) | (1 << (MySqlParser.FUNCTION - 366)) | (1 << (MySqlParser.GENERAL - 366)) | (1 << (MySqlParser.GLOBAL - 366)) | (1 << (MySqlParser.GRANTS - 366)) | (1 << (MySqlParser.GROUP_REPLICATION - 366)) | (1 << (MySqlParser.HANDLER - 366)) | (1 << (MySqlParser.HASH - 366)) | (1 << (MySqlParser.HELP - 366)) | (1 << (MySqlParser.HOST - 366)) | (1 << (MySqlParser.HOSTS - 366)) | (1 << (MySqlParser.IDENTIFIED - 366)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySqlParser.IMPORT - 366)) | (1 << (MySqlParser.INDEXES - 366)) | (1 << (MySqlParser.INITIAL_SIZE - 366)) | (1 << (MySqlParser.INPLACE - 366)) | (1 << (MySqlParser.INSERT_METHOD - 366)) | (1 << (MySqlParser.INSTALL - 366)) | (1 << (MySqlParser.INSTANCE - 366)) | (1 << (MySqlParser.INVISIBLE - 366)) | (1 << (MySqlParser.INVOKER - 366)) | (1 << (MySqlParser.IO - 366)) | (1 << (MySqlParser.IO_THREAD - 366)) | (1 << (MySqlParser.IPC - 366)) | (1 << (MySqlParser.ISOLATION - 366)) | (1 << (MySqlParser.ISSUER - 366)) | (1 << (MySqlParser.JSON - 366)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySqlParser.LANGUAGE - 366)) | (1 << (MySqlParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.LEAVES - 398)) | (1 << (MySqlParser.LESS - 398)) | (1 << (MySqlParser.LEVEL - 398)) | (1 << (MySqlParser.LIST - 398)) | (1 << (MySqlParser.LOCAL - 398)) | (1 << (MySqlParser.LOGFILE - 398)) | (1 << (MySqlParser.LOGS - 398)) | (1 << (MySqlParser.MASTER - 398)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySqlParser.MASTER_DELAY - 398)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySqlParser.MASTER_HOST - 398)) | (1 << (MySqlParser.MASTER_LOG_FILE - 398)) | (1 << (MySqlParser.MASTER_LOG_POS - 398)) | (1 << (MySqlParser.MASTER_PASSWORD - 398)) | (1 << (MySqlParser.MASTER_PORT - 398)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySqlParser.MASTER_SSL - 398)) | (1 << (MySqlParser.MASTER_SSL_CA - 398)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_CERT - 398)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySqlParser.MASTER_SSL_CRL - 398)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_KEY - 398)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 398)) | (1 << (MySqlParser.MASTER_USER - 398)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySqlParser.MEDIUM - 430)) | (1 << (MySqlParser.MEMBER - 430)) | (1 << (MySqlParser.MERGE - 430)) | (1 << (MySqlParser.MESSAGE_TEXT - 430)) | (1 << (MySqlParser.MID - 430)) | (1 << (MySqlParser.MIGRATE - 430)) | (1 << (MySqlParser.MIN_ROWS - 430)) | (1 << (MySqlParser.MODE - 430)) | (1 << (MySqlParser.MODIFY - 430)) | (1 << (MySqlParser.MUTEX - 430)) | (1 << (MySqlParser.MYSQL - 430)) | (1 << (MySqlParser.MYSQL_ERRNO - 430)) | (1 << (MySqlParser.NAME - 430)) | (1 << (MySqlParser.NAMES - 430)) | (1 << (MySqlParser.NCHAR - 430)) | (1 << (MySqlParser.NEVER - 430)) | (1 << (MySqlParser.NEXT - 430)) | (1 << (MySqlParser.NO - 430)) | (1 << (MySqlParser.NODEGROUP - 430)) | (1 << (MySqlParser.NONE - 430)) | (1 << (MySqlParser.OFFLINE - 430)) | (1 << (MySqlParser.OFFSET - 430)) | (1 << (MySqlParser.OF - 430)) | (1 << (MySqlParser.OJ - 430)) | (1 << (MySqlParser.OLD_PASSWORD - 430)) | (1 << (MySqlParser.ONE - 430)) | (1 << (MySqlParser.ONLINE - 430)) | (1 << (MySqlParser.ONLY - 430)) | (1 << (MySqlParser.OPEN - 430)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySqlParser.OPTIONS - 462)) | (1 << (MySqlParser.OWNER - 462)) | (1 << (MySqlParser.PACK_KEYS - 462)) | (1 << (MySqlParser.PAGE - 462)) | (1 << (MySqlParser.PARSER - 462)) | (1 << (MySqlParser.PARTIAL - 462)) | (1 << (MySqlParser.PARTITIONING - 462)) | (1 << (MySqlParser.PARTITIONS - 462)) | (1 << (MySqlParser.PASSWORD - 462)) | (1 << (MySqlParser.PHASE - 462)) | (1 << (MySqlParser.PLUGIN - 462)) | (1 << (MySqlParser.PLUGIN_DIR - 462)) | (1 << (MySqlParser.PLUGINS - 462)) | (1 << (MySqlParser.PORT - 462)) | (1 << (MySqlParser.PRECEDES - 462)) | (1 << (MySqlParser.PREPARE - 462)) | (1 << (MySqlParser.PRESERVE - 462)) | (1 << (MySqlParser.PREV - 462)) | (1 << (MySqlParser.PROCESSLIST - 462)) | (1 << (MySqlParser.PROFILE - 462)) | (1 << (MySqlParser.PROFILES - 462)) | (1 << (MySqlParser.PROXY - 462)) | (1 << (MySqlParser.QUERY - 462)) | (1 << (MySqlParser.QUICK - 462)) | (1 << (MySqlParser.REBUILD - 462)) | (1 << (MySqlParser.RECOVER - 462)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySqlParser.REDUNDANT - 462)) | (1 << (MySqlParser.RELAY - 462)) | (1 << (MySqlParser.RELAY_LOG_FILE - 462)) | (1 << (MySqlParser.RELAY_LOG_POS - 462)) | (1 << (MySqlParser.RELAYLOG - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySqlParser.REMOVE - 494)) | (1 << (MySqlParser.REORGANIZE - 494)) | (1 << (MySqlParser.REPAIR - 494)) | (1 << (MySqlParser.REPLICATE_DO_DB - 494)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATION - 494)) | (1 << (MySqlParser.RESET - 494)) | (1 << (MySqlParser.RESUME - 494)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 494)) | (1 << (MySqlParser.RETURNS - 494)) | (1 << (MySqlParser.ROLE - 494)) | (1 << (MySqlParser.ROLLBACK - 494)) | (1 << (MySqlParser.ROLLUP - 494)) | (1 << (MySqlParser.ROTATE - 494)) | (1 << (MySqlParser.ROW - 494)) | (1 << (MySqlParser.ROWS - 494)) | (1 << (MySqlParser.ROW_FORMAT - 494)) | (1 << (MySqlParser.SAVEPOINT - 494)) | (1 << (MySqlParser.SCHEDULE - 494)) | (1 << (MySqlParser.SECURITY - 494)) | (1 << (MySqlParser.SERVER - 494)) | (1 << (MySqlParser.SESSION - 494)) | (1 << (MySqlParser.SHARE - 494)) | (1 << (MySqlParser.SHARED - 494)) | (1 << (MySqlParser.SIGNED - 494)) | (1 << (MySqlParser.SIMPLE - 494)) | (1 << (MySqlParser.SLAVE - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySqlParser.SLOW - 526)) | (1 << (MySqlParser.SNAPSHOT - 526)) | (1 << (MySqlParser.SOCKET - 526)) | (1 << (MySqlParser.SOME - 526)) | (1 << (MySqlParser.SONAME - 526)) | (1 << (MySqlParser.SOUNDS - 526)) | (1 << (MySqlParser.SOURCE - 526)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySqlParser.SQL_CACHE - 526)) | (1 << (MySqlParser.SQL_NO_CACHE - 526)) | (1 << (MySqlParser.SQL_THREAD - 526)) | (1 << (MySqlParser.START - 526)) | (1 << (MySqlParser.STARTS - 526)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 526)) | (1 << (MySqlParser.STATS_PERSISTENT - 526)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySqlParser.STATUS - 526)) | (1 << (MySqlParser.STOP - 526)) | (1 << (MySqlParser.STORAGE - 526)) | (1 << (MySqlParser.STRING - 526)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySqlParser.SUBJECT - 526)) | (1 << (MySqlParser.SUBPARTITION - 526)) | (1 << (MySqlParser.SUBPARTITIONS - 526)) | (1 << (MySqlParser.SUSPEND - 526)) | (1 << (MySqlParser.SWAPS - 526)) | (1 << (MySqlParser.SWITCHES - 526)) | (1 << (MySqlParser.TABLE_NAME - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySqlParser.TABLESPACE - 558)) | (1 << (MySqlParser.TEMPORARY - 558)) | (1 << (MySqlParser.TEMPTABLE - 558)) | (1 << (MySqlParser.THAN - 558)) | (1 << (MySqlParser.TRADITIONAL - 558)) | (1 << (MySqlParser.TRANSACTION - 558)) | (1 << (MySqlParser.TRANSACTIONAL - 558)) | (1 << (MySqlParser.TRIGGERS - 558)) | (1 << (MySqlParser.TRUNCATE - 558)) | (1 << (MySqlParser.UNDEFINED - 558)) | (1 << (MySqlParser.UNDOFILE - 558)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySqlParser.UNINSTALL - 558)) | (1 << (MySqlParser.UNKNOWN - 558)) | (1 << (MySqlParser.UNTIL - 558)) | (1 << (MySqlParser.UPGRADE - 558)) | (1 << (MySqlParser.USER - 558)) | (1 << (MySqlParser.USE_FRM - 558)) | (1 << (MySqlParser.USER_RESOURCES - 558)) | (1 << (MySqlParser.VALIDATION - 558)) | (1 << (MySqlParser.VALUE - 558)) | (1 << (MySqlParser.VARIABLES - 558)) | (1 << (MySqlParser.VIEW - 558)) | (1 << (MySqlParser.VISIBLE - 558)) | (1 << (MySqlParser.WAIT - 558)) | (1 << (MySqlParser.WARNINGS - 558)) | (1 << (MySqlParser.WITHOUT - 558)) | (1 << (MySqlParser.WORK - 558)) | (1 << (MySqlParser.WRAPPER - 558)) | (1 << (MySqlParser.X509 - 558)) | (1 << (MySqlParser.XA - 558)))) !== 0) || ((((_la - 590)) & ~0x1f) == 0 && ((1 << (_la - 590)) & ((1 << (MySqlParser.XML - 590)) | (1 << (MySqlParser.INTERNAL - 590)) | (1 << (MySqlParser.QUARTER - 590)) | (1 << (MySqlParser.MONTH - 590)) | (1 << (MySqlParser.DAY - 590)) | (1 << (MySqlParser.HOUR - 590)) | (1 << (MySqlParser.MINUTE - 590)) | (1 << (MySqlParser.WEEK - 590)) | (1 << (MySqlParser.SECOND - 590)) | (1 << (MySqlParser.MICROSECOND - 590)) | (1 << (MySqlParser.TABLES - 590)) | (1 << (MySqlParser.ROUTINE - 590)) | (1 << (MySqlParser.EXECUTE - 590)) | (1 << (MySqlParser.FILE - 590)) | (1 << (MySqlParser.PROCESS - 590)) | (1 << (MySqlParser.RELOAD - 590)) | (1 << (MySqlParser.SHUTDOWN - 590)) | (1 << (MySqlParser.SUPER - 590)) | (1 << (MySqlParser.PRIVILEGES - 590)) | (1 << (MySqlParser.AUDIT_ADMIN - 590)) | (1 << (MySqlParser.BACKUP_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 590)) | (1 << (MySqlParser.CLONE_ADMIN - 590)) | (1 << (MySqlParser.CONNECTION_ADMIN - 590)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 590)) | (1 << (MySqlParser.FIREWALL_ADMIN - 590)))) !== 0) || ((((_la - 622)) & ~0x1f) == 0 && ((1 << (_la - 622)) & ((1 << (MySqlParser.FIREWALL_USER - 622)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 622)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 622)) | (1 << (MySqlParser.NDB_STORED_USER - 622)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.REPLICATION_APPLIER - 622)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 622)) | (1 << (MySqlParser.ROLE_ADMIN - 622)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.SET_USER_ID - 622)) | (1 << (MySqlParser.SHOW_ROUTINE - 622)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 622)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 622)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 622)) | (1 << (MySqlParser.ARMSCII8 - 622)) | (1 << (MySqlParser.ASCII - 622)) | (1 << (MySqlParser.BIG5 - 622)) | (1 << (MySqlParser.CP1250 - 622)) | (1 << (MySqlParser.CP1251 - 622)) | (1 << (MySqlParser.CP1256 - 622)) | (1 << (MySqlParser.CP1257 - 622)) | (1 << (MySqlParser.CP850 - 622)) | (1 << (MySqlParser.CP852 - 622)) | (1 << (MySqlParser.CP866 - 622)) | (1 << (MySqlParser.CP932 - 622)) | (1 << (MySqlParser.DEC8 - 622)) | (1 << (MySqlParser.EUCJPMS - 622)) | (1 << (MySqlParser.EUCKR - 622)) | (1 << (MySqlParser.GB2312 - 622)))) !== 0) || ((((_la - 654)) & ~0x1f) == 0 && ((1 << (_la - 654)) & ((1 << (MySqlParser.GBK - 654)) | (1 << (MySqlParser.GEOSTD8 - 654)) | (1 << (MySqlParser.GREEK - 654)) | (1 << (MySqlParser.HEBREW - 654)) | (1 << (MySqlParser.HP8 - 654)) | (1 << (MySqlParser.KEYBCS2 - 654)) | (1 << (MySqlParser.KOI8R - 654)) | (1 << (MySqlParser.KOI8U - 654)) | (1 << (MySqlParser.LATIN1 - 654)) | (1 << (MySqlParser.LATIN2 - 654)) | (1 << (MySqlParser.LATIN5 - 654)) | (1 << (MySqlParser.LATIN7 - 654)) | (1 << (MySqlParser.MACCE - 654)) | (1 << (MySqlParser.MACROMAN - 654)) | (1 << (MySqlParser.SJIS - 654)) | (1 << (MySqlParser.SWE7 - 654)) | (1 << (MySqlParser.TIS620 - 654)) | (1 << (MySqlParser.UCS2 - 654)) | (1 << (MySqlParser.UJIS - 654)) | (1 << (MySqlParser.UTF16 - 654)) | (1 << (MySqlParser.UTF16LE - 654)) | (1 << (MySqlParser.UTF32 - 654)) | (1 << (MySqlParser.UTF8 - 654)) | (1 << (MySqlParser.UTF8MB3 - 654)) | (1 << (MySqlParser.UTF8MB4 - 654)) | (1 << (MySqlParser.ARCHIVE - 654)) | (1 << (MySqlParser.BLACKHOLE - 654)) | (1 << (MySqlParser.CSV - 654)) | (1 << (MySqlParser.FEDERATED - 654)) | (1 << (MySqlParser.INNODB - 654)) | (1 << (MySqlParser.MEMORY - 654)) | (1 << (MySqlParser.MRG_MYISAM - 654)))) !== 0) || ((((_la - 686)) & ~0x1f) == 0 && ((1 << (_la - 686)) & ((1 << (MySqlParser.MYISAM - 686)) | (1 << (MySqlParser.NDB - 686)) | (1 << (MySqlParser.NDBCLUSTER - 686)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 686)) | (1 << (MySqlParser.TOKUDB - 686)) | (1 << (MySqlParser.REPEATABLE - 686)) | (1 << (MySqlParser.COMMITTED - 686)) | (1 << (MySqlParser.UNCOMMITTED - 686)) | (1 << (MySqlParser.SERIALIZABLE - 686)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 686)) | (1 << (MySqlParser.LINESTRING - 686)) | (1 << (MySqlParser.MULTILINESTRING - 686)) | (1 << (MySqlParser.MULTIPOINT - 686)) | (1 << (MySqlParser.MULTIPOLYGON - 686)) | (1 << (MySqlParser.POINT - 686)) | (1 << (MySqlParser.POLYGON - 686)) | (1 << (MySqlParser.ABS - 686)) | (1 << (MySqlParser.ACOS - 686)) | (1 << (MySqlParser.ADDDATE - 686)) | (1 << (MySqlParser.ADDTIME - 686)) | (1 << (MySqlParser.AES_DECRYPT - 686)) | (1 << (MySqlParser.AES_ENCRYPT - 686)) | (1 << (MySqlParser.AREA - 686)) | (1 << (MySqlParser.ASBINARY - 686)) | (1 << (MySqlParser.ASIN - 686)) | (1 << (MySqlParser.ASTEXT - 686)) | (1 << (MySqlParser.ASWKB - 686)) | (1 << (MySqlParser.ASWKT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 686)))) !== 0) || ((((_la - 718)) & ~0x1f) == 0 && ((1 << (_la - 718)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 718)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 718)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 718)) | (1 << (MySqlParser.ATAN - 718)) | (1 << (MySqlParser.ATAN2 - 718)) | (1 << (MySqlParser.BENCHMARK - 718)) | (1 << (MySqlParser.BIN - 718)) | (1 << (MySqlParser.BIT_COUNT - 718)) | (1 << (MySqlParser.BIT_LENGTH - 718)) | (1 << (MySqlParser.BUFFER - 718)) | (1 << (MySqlParser.CATALOG_NAME - 718)) | (1 << (MySqlParser.CEIL - 718)) | (1 << (MySqlParser.CEILING - 718)) | (1 << (MySqlParser.CENTROID - 718)) | (1 << (MySqlParser.CHARACTER_LENGTH - 718)) | (1 << (MySqlParser.CHARSET - 718)) | (1 << (MySqlParser.CHAR_LENGTH - 718)) | (1 << (MySqlParser.COERCIBILITY - 718)) | (1 << (MySqlParser.COLLATION - 718)) | (1 << (MySqlParser.COMPRESS - 718)) | (1 << (MySqlParser.CONCAT - 718)) | (1 << (MySqlParser.CONCAT_WS - 718)) | (1 << (MySqlParser.CONNECTION_ID - 718)) | (1 << (MySqlParser.CONV - 718)) | (1 << (MySqlParser.CONVERT_TZ - 718)) | (1 << (MySqlParser.COS - 718)) | (1 << (MySqlParser.COT - 718)) | (1 << (MySqlParser.CRC32 - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 718)) | (1 << (MySqlParser.CREATE_DIGEST - 718)))) !== 0) || ((((_la - 750)) & ~0x1f) == 0 && ((1 << (_la - 750)) & ((1 << (MySqlParser.CROSSES - 750)) | (1 << (MySqlParser.DATEDIFF - 750)) | (1 << (MySqlParser.DATE_FORMAT - 750)) | (1 << (MySqlParser.DAYNAME - 750)) | (1 << (MySqlParser.DAYOFMONTH - 750)) | (1 << (MySqlParser.DAYOFWEEK - 750)) | (1 << (MySqlParser.DAYOFYEAR - 750)) | (1 << (MySqlParser.DECODE - 750)) | (1 << (MySqlParser.DEGREES - 750)) | (1 << (MySqlParser.DES_DECRYPT - 750)) | (1 << (MySqlParser.DES_ENCRYPT - 750)) | (1 << (MySqlParser.DIMENSION - 750)) | (1 << (MySqlParser.DISJOINT - 750)) | (1 << (MySqlParser.ELT - 750)) | (1 << (MySqlParser.ENCODE - 750)) | (1 << (MySqlParser.ENCRYPT - 750)) | (1 << (MySqlParser.ENDPOINT - 750)) | (1 << (MySqlParser.ENVELOPE - 750)) | (1 << (MySqlParser.EQUALS - 750)) | (1 << (MySqlParser.EXP - 750)) | (1 << (MySqlParser.EXPORT_SET - 750)) | (1 << (MySqlParser.EXTERIORRING - 750)) | (1 << (MySqlParser.EXTRACTVALUE - 750)) | (1 << (MySqlParser.FIELD - 750)) | (1 << (MySqlParser.FIND_IN_SET - 750)) | (1 << (MySqlParser.FLOOR - 750)) | (1 << (MySqlParser.FORMAT - 750)) | (1 << (MySqlParser.FOUND_ROWS - 750)) | (1 << (MySqlParser.FROM_BASE64 - 750)) | (1 << (MySqlParser.FROM_DAYS - 750)) | (1 << (MySqlParser.FROM_UNIXTIME - 750)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 750)))) !== 0) || ((((_la - 782)) & ~0x1f) == 0 && ((1 << (_la - 782)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYN - 782)) | (1 << (MySqlParser.GEOMETRYTYPE - 782)) | (1 << (MySqlParser.GEOMFROMTEXT - 782)) | (1 << (MySqlParser.GEOMFROMWKB - 782)) | (1 << (MySqlParser.GET_FORMAT - 782)) | (1 << (MySqlParser.GET_LOCK - 782)) | (1 << (MySqlParser.GLENGTH - 782)) | (1 << (MySqlParser.GREATEST - 782)) | (1 << (MySqlParser.GTID_SUBSET - 782)) | (1 << (MySqlParser.GTID_SUBTRACT - 782)) | (1 << (MySqlParser.HEX - 782)) | (1 << (MySqlParser.IFNULL - 782)) | (1 << (MySqlParser.INET6_ATON - 782)) | (1 << (MySqlParser.INET6_NTOA - 782)) | (1 << (MySqlParser.INET_ATON - 782)) | (1 << (MySqlParser.INET_NTOA - 782)) | (1 << (MySqlParser.INSTR - 782)) | (1 << (MySqlParser.INTERIORRINGN - 782)) | (1 << (MySqlParser.INTERSECTS - 782)) | (1 << (MySqlParser.ISCLOSED - 782)) | (1 << (MySqlParser.ISEMPTY - 782)) | (1 << (MySqlParser.ISNULL - 782)) | (1 << (MySqlParser.ISSIMPLE - 782)) | (1 << (MySqlParser.IS_FREE_LOCK - 782)) | (1 << (MySqlParser.IS_IPV4 - 782)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 782)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 782)))) !== 0) || ((((_la - 814)) & ~0x1f) == 0 && ((1 << (_la - 814)) & ((1 << (MySqlParser.IS_IPV6 - 814)) | (1 << (MySqlParser.IS_USED_LOCK - 814)) | (1 << (MySqlParser.LAST_INSERT_ID - 814)) | (1 << (MySqlParser.LCASE - 814)) | (1 << (MySqlParser.LEAST - 814)) | (1 << (MySqlParser.LENGTH - 814)) | (1 << (MySqlParser.LINEFROMTEXT - 814)) | (1 << (MySqlParser.LINEFROMWKB - 814)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 814)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 814)) | (1 << (MySqlParser.LN - 814)) | (1 << (MySqlParser.LOAD_FILE - 814)) | (1 << (MySqlParser.LOCATE - 814)) | (1 << (MySqlParser.LOG - 814)) | (1 << (MySqlParser.LOG10 - 814)) | (1 << (MySqlParser.LOG2 - 814)) | (1 << (MySqlParser.LOWER - 814)) | (1 << (MySqlParser.LPAD - 814)) | (1 << (MySqlParser.LTRIM - 814)) | (1 << (MySqlParser.MAKEDATE - 814)) | (1 << (MySqlParser.MAKETIME - 814)) | (1 << (MySqlParser.MAKE_SET - 814)) | (1 << (MySqlParser.MASTER_POS_WAIT - 814)) | (1 << (MySqlParser.MBRCONTAINS - 814)) | (1 << (MySqlParser.MBRDISJOINT - 814)) | (1 << (MySqlParser.MBREQUAL - 814)) | (1 << (MySqlParser.MBRINTERSECTS - 814)) | (1 << (MySqlParser.MBROVERLAPS - 814)) | (1 << (MySqlParser.MBRTOUCHES - 814)) | (1 << (MySqlParser.MBRWITHIN - 814)) | (1 << (MySqlParser.MD5 - 814)) | (1 << (MySqlParser.MLINEFROMTEXT - 814)))) !== 0) || ((((_la - 846)) & ~0x1f) == 0 && ((1 << (_la - 846)) & ((1 << (MySqlParser.MLINEFROMWKB - 846)) | (1 << (MySqlParser.MONTHNAME - 846)) | (1 << (MySqlParser.MPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MPOINTFROMWKB - 846)) | (1 << (MySqlParser.MPOLYFROMTEXT - 846)) | (1 << (MySqlParser.MPOLYFROMWKB - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 846)) | (1 << (MySqlParser.NAME_CONST - 846)) | (1 << (MySqlParser.NULLIF - 846)) | (1 << (MySqlParser.NUMGEOMETRIES - 846)) | (1 << (MySqlParser.NUMINTERIORRINGS - 846)) | (1 << (MySqlParser.NUMPOINTS - 846)) | (1 << (MySqlParser.OCT - 846)) | (1 << (MySqlParser.OCTET_LENGTH - 846)) | (1 << (MySqlParser.ORD - 846)) | (1 << (MySqlParser.OVERLAPS - 846)) | (1 << (MySqlParser.PERIOD_ADD - 846)) | (1 << (MySqlParser.PERIOD_DIFF - 846)) | (1 << (MySqlParser.PI - 846)) | (1 << (MySqlParser.POINTFROMTEXT - 846)) | (1 << (MySqlParser.POINTFROMWKB - 846)) | (1 << (MySqlParser.POINTN - 846)) | (1 << (MySqlParser.POLYFROMTEXT - 846)) | (1 << (MySqlParser.POLYFROMWKB - 846)) | (1 << (MySqlParser.POLYGONFROMTEXT - 846)) | (1 << (MySqlParser.POLYGONFROMWKB - 846)) | (1 << (MySqlParser.POW - 846)))) !== 0) || ((((_la - 878)) & ~0x1f) == 0 && ((1 << (_la - 878)) & ((1 << (MySqlParser.POWER - 878)) | (1 << (MySqlParser.QUOTE - 878)) | (1 << (MySqlParser.RADIANS - 878)) | (1 << (MySqlParser.RAND - 878)) | (1 << (MySqlParser.RANDOM_BYTES - 878)) | (1 << (MySqlParser.RELEASE_LOCK - 878)) | (1 << (MySqlParser.REVERSE - 878)) | (1 << (MySqlParser.ROUND - 878)) | (1 << (MySqlParser.ROW_COUNT - 878)) | (1 << (MySqlParser.RPAD - 878)) | (1 << (MySqlParser.RTRIM - 878)) | (1 << (MySqlParser.SEC_TO_TIME - 878)) | (1 << (MySqlParser.SESSION_USER - 878)) | (1 << (MySqlParser.SHA - 878)) | (1 << (MySqlParser.SHA1 - 878)) | (1 << (MySqlParser.SHA2 - 878)) | (1 << (MySqlParser.SCHEMA_NAME - 878)) | (1 << (MySqlParser.SIGN - 878)) | (1 << (MySqlParser.SIN - 878)) | (1 << (MySqlParser.SLEEP - 878)) | (1 << (MySqlParser.SOUNDEX - 878)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 878)) | (1 << (MySqlParser.SQRT - 878)) | (1 << (MySqlParser.SRID - 878)) | (1 << (MySqlParser.STARTPOINT - 878)) | (1 << (MySqlParser.STRCMP - 878)) | (1 << (MySqlParser.STR_TO_DATE - 878)) | (1 << (MySqlParser.ST_AREA - 878)) | (1 << (MySqlParser.ST_ASBINARY - 878)) | (1 << (MySqlParser.ST_ASTEXT - 878)) | (1 << (MySqlParser.ST_ASWKB - 878)) | (1 << (MySqlParser.ST_ASWKT - 878)))) !== 0) || ((((_la - 910)) & ~0x1f) == 0 && ((1 << (_la - 910)) & ((1 << (MySqlParser.ST_BUFFER - 910)) | (1 << (MySqlParser.ST_CENTROID - 910)) | (1 << (MySqlParser.ST_CONTAINS - 910)) | (1 << (MySqlParser.ST_CROSSES - 910)) | (1 << (MySqlParser.ST_DIFFERENCE - 910)) | (1 << (MySqlParser.ST_DIMENSION - 910)) | (1 << (MySqlParser.ST_DISJOINT - 910)) | (1 << (MySqlParser.ST_DISTANCE - 910)) | (1 << (MySqlParser.ST_ENDPOINT - 910)) | (1 << (MySqlParser.ST_ENVELOPE - 910)) | (1 << (MySqlParser.ST_EQUALS - 910)) | (1 << (MySqlParser.ST_EXTERIORRING - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYN - 910)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 910)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 910)) | (1 << (MySqlParser.ST_INTERIORRINGN - 910)) | (1 << (MySqlParser.ST_INTERSECTION - 910)) | (1 << (MySqlParser.ST_INTERSECTS - 910)) | (1 << (MySqlParser.ST_ISCLOSED - 910)) | (1 << (MySqlParser.ST_ISEMPTY - 910)) | (1 << (MySqlParser.ST_ISSIMPLE - 910)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 910)) | (1 << (MySqlParser.ST_LINEFROMWKB - 910)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 910)))) !== 0) || ((((_la - 942)) & ~0x1f) == 0 && ((1 << (_la - 942)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 942)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 942)) | (1 << (MySqlParser.ST_NUMPOINTS - 942)) | (1 << (MySqlParser.ST_OVERLAPS - 942)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 942)) | (1 << (MySqlParser.ST_POINTFROMWKB - 942)) | (1 << (MySqlParser.ST_POINTN - 942)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYFROMWKB - 942)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 942)) | (1 << (MySqlParser.ST_SRID - 942)) | (1 << (MySqlParser.ST_STARTPOINT - 942)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 942)) | (1 << (MySqlParser.ST_TOUCHES - 942)) | (1 << (MySqlParser.ST_UNION - 942)) | (1 << (MySqlParser.ST_WITHIN - 942)) | (1 << (MySqlParser.ST_X - 942)) | (1 << (MySqlParser.ST_Y - 942)) | (1 << (MySqlParser.SUBDATE - 942)) | (1 << (MySqlParser.SUBSTRING_INDEX - 942)) | (1 << (MySqlParser.SUBTIME - 942)) | (1 << (MySqlParser.SYSTEM_USER - 942)) | (1 << (MySqlParser.TAN - 942)) | (1 << (MySqlParser.TIMEDIFF - 942)) | (1 << (MySqlParser.TIMESTAMPADD - 942)) | (1 << (MySqlParser.TIMESTAMPDIFF - 942)) | (1 << (MySqlParser.TIME_FORMAT - 942)) | (1 << (MySqlParser.TIME_TO_SEC - 942)) | (1 << (MySqlParser.TOUCHES - 942)))) !== 0) || ((((_la - 974)) & ~0x1f) == 0 && ((1 << (_la - 974)) & ((1 << (MySqlParser.TO_BASE64 - 974)) | (1 << (MySqlParser.TO_DAYS - 974)) | (1 << (MySqlParser.TO_SECONDS - 974)) | (1 << (MySqlParser.UCASE - 974)) | (1 << (MySqlParser.UNCOMPRESS - 974)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 974)) | (1 << (MySqlParser.UNHEX - 974)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 974)) | (1 << (MySqlParser.UPDATEXML - 974)) | (1 << (MySqlParser.UPPER - 974)) | (1 << (MySqlParser.UUID - 974)) | (1 << (MySqlParser.UUID_SHORT - 974)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 974)) | (1 << (MySqlParser.VERSION - 974)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1 << (MySqlParser.WEEKDAY - 974)) | (1 << (MySqlParser.WEEKOFYEAR - 974)) | (1 << (MySqlParser.WEIGHT_STRING - 974)) | (1 << (MySqlParser.WITHIN - 974)) | (1 << (MySqlParser.YEARWEEK - 974)) | (1 << (MySqlParser.Y_FUNCTION - 974)) | (1 << (MySqlParser.X_FUNCTION - 974)))) !== 0) || ((((_la - 1034)) & ~0x1f) == 0 && ((1 << (_la - 1034)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (MySqlParser.STRING_LITERAL - 1034)) | (1 << (MySqlParser.ID - 1034)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1034)))) !== 0)) {
	                    this.state = 2389;
	                    localctx.name = this.uid();
	                }

	            }

	            this.state = 2394;
	            this.match(MySqlParser.CHECK);
	            this.state = 2395;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2396;
	            this.expression(0);
	            this.state = 2397;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 10:
	            localctx = new AlterBySetAlgorithmContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2399;
	            this.match(MySqlParser.ALGORITHM);
	            this.state = 2401;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2400;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2403;
	            localctx.algType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DEFAULT || _la===MySqlParser.COPY || _la===MySqlParser.INPLACE)) {
	                localctx.algType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 11:
	            localctx = new AlterByChangeDefaultContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2404;
	            this.match(MySqlParser.ALTER);
	            this.state = 2406;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.COLUMN) {
	                this.state = 2405;
	                this.match(MySqlParser.COLUMN);
	            }

	            this.state = 2408;
	            this.uid();
	            this.state = 2414;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.SET:
	                this.state = 2409;
	                this.match(MySqlParser.SET);
	                this.state = 2410;
	                this.match(MySqlParser.DEFAULT);
	                this.state = 2411;
	                this.defaultValue();
	                break;
	            case MySqlParser.DROP:
	                this.state = 2412;
	                this.match(MySqlParser.DROP);
	                this.state = 2413;
	                this.match(MySqlParser.DEFAULT);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 12:
	            localctx = new AlterByChangeColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2416;
	            this.match(MySqlParser.CHANGE);
	            this.state = 2418;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.COLUMN) {
	                this.state = 2417;
	                this.match(MySqlParser.COLUMN);
	            }

	            this.state = 2420;
	            localctx.oldColumn = this.uid();
	            this.state = 2421;
	            localctx.newColumn = this.uid();
	            this.state = 2422;
	            this.columnDefinition();
	            this.state = 2426;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case MySqlParser.FIRST:
	            	this.state = 2423;
	            	this.match(MySqlParser.FIRST);
	            	break;
	            case MySqlParser.AFTER:
	            	this.state = 2424;
	            	this.match(MySqlParser.AFTER);
	            	this.state = 2425;
	            	localctx.afterColumn = this.uid();
	            	break;
	            case MySqlParser.EOF:
	            case MySqlParser.ALTER:
	            case MySqlParser.ANALYZE:
	            case MySqlParser.CALL:
	            case MySqlParser.CHANGE:
	            case MySqlParser.CHECK:
	            case MySqlParser.CREATE:
	            case MySqlParser.DELETE:
	            case MySqlParser.DESC:
	            case MySqlParser.DESCRIBE:
	            case MySqlParser.DROP:
	            case MySqlParser.EXPLAIN:
	            case MySqlParser.GET:
	            case MySqlParser.GRANT:
	            case MySqlParser.INSERT:
	            case MySqlParser.KILL:
	            case MySqlParser.LOAD:
	            case MySqlParser.LOCK:
	            case MySqlParser.OPTIMIZE:
	            case MySqlParser.PARTITION:
	            case MySqlParser.PURGE:
	            case MySqlParser.RELEASE:
	            case MySqlParser.RENAME:
	            case MySqlParser.REPLACE:
	            case MySqlParser.RESIGNAL:
	            case MySqlParser.REVOKE:
	            case MySqlParser.SELECT:
	            case MySqlParser.SET:
	            case MySqlParser.SHOW:
	            case MySqlParser.SIGNAL:
	            case MySqlParser.UNLOCK:
	            case MySqlParser.UPDATE:
	            case MySqlParser.USE:
	            case MySqlParser.BEGIN:
	            case MySqlParser.BINLOG:
	            case MySqlParser.CACHE:
	            case MySqlParser.CHECKSUM:
	            case MySqlParser.COMMIT:
	            case MySqlParser.DEALLOCATE:
	            case MySqlParser.DO:
	            case MySqlParser.FLUSH:
	            case MySqlParser.HANDLER:
	            case MySqlParser.HELP:
	            case MySqlParser.INSTALL:
	            case MySqlParser.PREPARE:
	            case MySqlParser.REPAIR:
	            case MySqlParser.RESET:
	            case MySqlParser.ROLLBACK:
	            case MySqlParser.SAVEPOINT:
	            case MySqlParser.START:
	            case MySqlParser.STOP:
	            case MySqlParser.TRUNCATE:
	            case MySqlParser.UNINSTALL:
	            case MySqlParser.XA:
	            case MySqlParser.EXECUTE:
	            case MySqlParser.SHUTDOWN:
	            case MySqlParser.MINUSMINUS:
	            case MySqlParser.LR_BRACKET:
	            case MySqlParser.COMMA:
	            case MySqlParser.SEMI:
	            	break;
	            default:
	            	break;
	            }
	            break;

	        case 13:
	            localctx = new AlterByRenameColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2428;
	            this.match(MySqlParser.RENAME);
	            this.state = 2429;
	            this.match(MySqlParser.COLUMN);
	            this.state = 2430;
	            localctx.oldColumn = this.uid();
	            this.state = 2431;
	            this.match(MySqlParser.TO);
	            this.state = 2432;
	            localctx.newColumn = this.uid();
	            break;

	        case 14:
	            localctx = new AlterByLockContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 2434;
	            this.match(MySqlParser.LOCK);
	            this.state = 2436;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2435;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2438;
	            localctx.lockType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DEFAULT || _la===MySqlParser.EXCLUSIVE || _la===MySqlParser.NONE || _la===MySqlParser.SHARED)) {
	                localctx.lockType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 15:
	            localctx = new AlterByModifyColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 2439;
	            this.match(MySqlParser.MODIFY);
	            this.state = 2441;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.COLUMN) {
	                this.state = 2440;
	                this.match(MySqlParser.COLUMN);
	            }

	            this.state = 2443;
	            this.uid();
	            this.state = 2444;
	            this.columnDefinition();
	            this.state = 2448;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case MySqlParser.FIRST:
	            	this.state = 2445;
	            	this.match(MySqlParser.FIRST);
	            	break;
	            case MySqlParser.AFTER:
	            	this.state = 2446;
	            	this.match(MySqlParser.AFTER);
	            	this.state = 2447;
	            	this.uid();
	            	break;
	            case MySqlParser.EOF:
	            case MySqlParser.ALTER:
	            case MySqlParser.ANALYZE:
	            case MySqlParser.CALL:
	            case MySqlParser.CHANGE:
	            case MySqlParser.CHECK:
	            case MySqlParser.CREATE:
	            case MySqlParser.DELETE:
	            case MySqlParser.DESC:
	            case MySqlParser.DESCRIBE:
	            case MySqlParser.DROP:
	            case MySqlParser.EXPLAIN:
	            case MySqlParser.GET:
	            case MySqlParser.GRANT:
	            case MySqlParser.INSERT:
	            case MySqlParser.KILL:
	            case MySqlParser.LOAD:
	            case MySqlParser.LOCK:
	            case MySqlParser.OPTIMIZE:
	            case MySqlParser.PARTITION:
	            case MySqlParser.PURGE:
	            case MySqlParser.RELEASE:
	            case MySqlParser.RENAME:
	            case MySqlParser.REPLACE:
	            case MySqlParser.RESIGNAL:
	            case MySqlParser.REVOKE:
	            case MySqlParser.SELECT:
	            case MySqlParser.SET:
	            case MySqlParser.SHOW:
	            case MySqlParser.SIGNAL:
	            case MySqlParser.UNLOCK:
	            case MySqlParser.UPDATE:
	            case MySqlParser.USE:
	            case MySqlParser.BEGIN:
	            case MySqlParser.BINLOG:
	            case MySqlParser.CACHE:
	            case MySqlParser.CHECKSUM:
	            case MySqlParser.COMMIT:
	            case MySqlParser.DEALLOCATE:
	            case MySqlParser.DO:
	            case MySqlParser.FLUSH:
	            case MySqlParser.HANDLER:
	            case MySqlParser.HELP:
	            case MySqlParser.INSTALL:
	            case MySqlParser.PREPARE:
	            case MySqlParser.REPAIR:
	            case MySqlParser.RESET:
	            case MySqlParser.ROLLBACK:
	            case MySqlParser.SAVEPOINT:
	            case MySqlParser.START:
	            case MySqlParser.STOP:
	            case MySqlParser.TRUNCATE:
	            case MySqlParser.UNINSTALL:
	            case MySqlParser.XA:
	            case MySqlParser.EXECUTE:
	            case MySqlParser.SHUTDOWN:
	            case MySqlParser.MINUSMINUS:
	            case MySqlParser.LR_BRACKET:
	            case MySqlParser.COMMA:
	            case MySqlParser.SEMI:
	            	break;
	            default:
	            	break;
	            }
	            break;

	        case 16:
	            localctx = new AlterByDropColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 2450;
	            this.match(MySqlParser.DROP);
	            this.state = 2452;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.COLUMN) {
	                this.state = 2451;
	                this.match(MySqlParser.COLUMN);
	            }

	            this.state = 2454;
	            this.uid();
	            this.state = 2456;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.RESTRICT) {
	                this.state = 2455;
	                this.match(MySqlParser.RESTRICT);
	            }

	            break;

	        case 17:
	            localctx = new AlterByDropConstraintCheckContext(this, localctx);
	            this.enterOuterAlt(localctx, 17);
	            this.state = 2458;
	            this.match(MySqlParser.DROP);
	            this.state = 2459;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.CHECK || _la===MySqlParser.CONSTRAINT)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2460;
	            this.uid();
	            break;

	        case 18:
	            localctx = new AlterByDropPrimaryKeyContext(this, localctx);
	            this.enterOuterAlt(localctx, 18);
	            this.state = 2461;
	            this.match(MySqlParser.DROP);
	            this.state = 2462;
	            this.match(MySqlParser.PRIMARY);
	            this.state = 2463;
	            this.match(MySqlParser.KEY);
	            break;

	        case 19:
	            localctx = new AlterByRenameIndexContext(this, localctx);
	            this.enterOuterAlt(localctx, 19);
	            this.state = 2464;
	            this.match(MySqlParser.RENAME);
	            this.state = 2465;
	            localctx.indexFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.INDEX || _la===MySqlParser.KEY)) {
	                localctx.indexFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2466;
	            this.uid();
	            this.state = 2467;
	            this.match(MySqlParser.TO);
	            this.state = 2468;
	            this.uid();
	            break;

	        case 20:
	            localctx = new AlterByAlterIndexVisibilityContext(this, localctx);
	            this.enterOuterAlt(localctx, 20);
	            this.state = 2470;
	            this.match(MySqlParser.ALTER);
	            this.state = 2471;
	            this.match(MySqlParser.INDEX);
	            this.state = 2472;
	            this.uid();
	            this.state = 2473;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.INVISIBLE || _la===MySqlParser.VISIBLE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 21:
	            localctx = new AlterByDropIndexContext(this, localctx);
	            this.enterOuterAlt(localctx, 21);
	            this.state = 2475;
	            this.match(MySqlParser.DROP);
	            this.state = 2476;
	            localctx.indexFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.INDEX || _la===MySqlParser.KEY)) {
	                localctx.indexFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2477;
	            this.uid();
	            break;

	        case 22:
	            localctx = new AlterByDropForeignKeyContext(this, localctx);
	            this.enterOuterAlt(localctx, 22);
	            this.state = 2478;
	            this.match(MySqlParser.DROP);
	            this.state = 2479;
	            this.match(MySqlParser.FOREIGN);
	            this.state = 2480;
	            this.match(MySqlParser.KEY);
	            this.state = 2481;
	            this.uid();
	            break;

	        case 23:
	            localctx = new AlterByDisableKeysContext(this, localctx);
	            this.enterOuterAlt(localctx, 23);
	            this.state = 2482;
	            this.match(MySqlParser.DISABLE);
	            this.state = 2483;
	            this.match(MySqlParser.KEYS);
	            break;

	        case 24:
	            localctx = new AlterByEnableKeysContext(this, localctx);
	            this.enterOuterAlt(localctx, 24);
	            this.state = 2484;
	            this.match(MySqlParser.ENABLE);
	            this.state = 2485;
	            this.match(MySqlParser.KEYS);
	            break;

	        case 25:
	            localctx = new AlterByRenameContext(this, localctx);
	            this.enterOuterAlt(localctx, 25);
	            this.state = 2486;
	            this.match(MySqlParser.RENAME);
	            this.state = 2488;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.AS || _la===MySqlParser.TO) {
	                this.state = 2487;
	                localctx.renameFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.AS || _la===MySqlParser.TO)) {
	                    localctx.renameFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 2492;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,318,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 2490;
	                this.uid();
	                break;

	            case 2:
	                this.state = 2491;
	                this.fullId();
	                break;

	            }
	            break;

	        case 26:
	            localctx = new AlterByOrderContext(this, localctx);
	            this.enterOuterAlt(localctx, 26);
	            this.state = 2494;
	            this.match(MySqlParser.ORDER);
	            this.state = 2495;
	            this.match(MySqlParser.BY);
	            this.state = 2496;
	            this.uidList();
	            break;

	        case 27:
	            localctx = new AlterByConvertCharsetContext(this, localctx);
	            this.enterOuterAlt(localctx, 27);
	            this.state = 2497;
	            this.match(MySqlParser.CONVERT);
	            this.state = 2498;
	            this.match(MySqlParser.TO);
	            this.state = 2499;
	            this.match(MySqlParser.CHARACTER);
	            this.state = 2500;
	            this.match(MySqlParser.SET);
	            this.state = 2501;
	            this.charsetName();
	            this.state = 2504;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.COLLATE) {
	                this.state = 2502;
	                this.match(MySqlParser.COLLATE);
	                this.state = 2503;
	                this.collationName();
	            }

	            break;

	        case 28:
	            localctx = new AlterByDefaultCharsetContext(this, localctx);
	            this.enterOuterAlt(localctx, 28);
	            this.state = 2507;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.DEFAULT) {
	                this.state = 2506;
	                this.match(MySqlParser.DEFAULT);
	            }

	            this.state = 2509;
	            this.match(MySqlParser.CHARACTER);
	            this.state = 2510;
	            this.match(MySqlParser.SET);
	            this.state = 2511;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 2512;
	            this.charsetName();
	            this.state = 2516;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.COLLATE) {
	                this.state = 2513;
	                this.match(MySqlParser.COLLATE);
	                this.state = 2514;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	                this.state = 2515;
	                this.collationName();
	            }

	            break;

	        case 29:
	            localctx = new AlterByDiscardTablespaceContext(this, localctx);
	            this.enterOuterAlt(localctx, 29);
	            this.state = 2518;
	            this.match(MySqlParser.DISCARD);
	            this.state = 2519;
	            this.match(MySqlParser.TABLESPACE);
	            break;

	        case 30:
	            localctx = new AlterByImportTablespaceContext(this, localctx);
	            this.enterOuterAlt(localctx, 30);
	            this.state = 2520;
	            this.match(MySqlParser.IMPORT);
	            this.state = 2521;
	            this.match(MySqlParser.TABLESPACE);
	            break;

	        case 31:
	            localctx = new AlterByForceContext(this, localctx);
	            this.enterOuterAlt(localctx, 31);
	            this.state = 2522;
	            this.match(MySqlParser.FORCE);
	            break;

	        case 32:
	            localctx = new AlterByValidateContext(this, localctx);
	            this.enterOuterAlt(localctx, 32);
	            this.state = 2523;
	            localctx.validationFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.WITH || _la===MySqlParser.WITHOUT)) {
	                localctx.validationFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2524;
	            this.match(MySqlParser.VALIDATION);
	            break;

	        case 33:
	            localctx = new AlterByAddPartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 33);
	            this.state = 2525;
	            this.match(MySqlParser.ADD);
	            this.state = 2526;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2527;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2528;
	            this.partitionDefinition();
	            this.state = 2533;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 2529;
	                this.match(MySqlParser.COMMA);
	                this.state = 2530;
	                this.partitionDefinition();
	                this.state = 2535;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2536;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 34:
	            localctx = new AlterByDropPartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 34);
	            this.state = 2538;
	            this.match(MySqlParser.DROP);
	            this.state = 2539;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2540;
	            this.uidList();
	            break;

	        case 35:
	            localctx = new AlterByDiscardPartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 35);
	            this.state = 2541;
	            this.match(MySqlParser.DISCARD);
	            this.state = 2542;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2545;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.CURRENT:
	            case MySqlParser.DATABASE:
	            case MySqlParser.DIAGNOSTICS:
	            case MySqlParser.LEFT:
	            case MySqlParser.NUMBER:
	            case MySqlParser.RIGHT:
	            case MySqlParser.STACKED:
	            case MySqlParser.DATE:
	            case MySqlParser.TIME:
	            case MySqlParser.TIMESTAMP:
	            case MySqlParser.DATETIME:
	            case MySqlParser.YEAR:
	            case MySqlParser.TEXT:
	            case MySqlParser.ENUM:
	            case MySqlParser.SERIAL:
	            case MySqlParser.JSON_VALID:
	            case MySqlParser.JSON_SCHEMA_VALID:
	            case MySqlParser.AVG:
	            case MySqlParser.BIT_AND:
	            case MySqlParser.BIT_OR:
	            case MySqlParser.BIT_XOR:
	            case MySqlParser.COUNT:
	            case MySqlParser.GROUP_CONCAT:
	            case MySqlParser.MAX:
	            case MySqlParser.MIN:
	            case MySqlParser.STD:
	            case MySqlParser.STDDEV:
	            case MySqlParser.STDDEV_POP:
	            case MySqlParser.STDDEV_SAMP:
	            case MySqlParser.SUM:
	            case MySqlParser.VAR_POP:
	            case MySqlParser.VAR_SAMP:
	            case MySqlParser.VARIANCE:
	            case MySqlParser.POSITION:
	            case MySqlParser.ACCOUNT:
	            case MySqlParser.ACTION:
	            case MySqlParser.AFTER:
	            case MySqlParser.AGGREGATE:
	            case MySqlParser.ALGORITHM:
	            case MySqlParser.ANY:
	            case MySqlParser.AT:
	            case MySqlParser.AUTHORS:
	            case MySqlParser.AUTOCOMMIT:
	            case MySqlParser.AUTOEXTEND_SIZE:
	            case MySqlParser.AUTO_INCREMENT:
	            case MySqlParser.AVG_ROW_LENGTH:
	            case MySqlParser.BEGIN:
	            case MySqlParser.BINLOG:
	            case MySqlParser.BIT:
	            case MySqlParser.BLOCK:
	            case MySqlParser.BOOL:
	            case MySqlParser.BOOLEAN:
	            case MySqlParser.BTREE:
	            case MySqlParser.CACHE:
	            case MySqlParser.CASCADED:
	            case MySqlParser.CHAIN:
	            case MySqlParser.CHANGED:
	            case MySqlParser.CHANNEL:
	            case MySqlParser.CHECKSUM:
	            case MySqlParser.PAGE_CHECKSUM:
	            case MySqlParser.CIPHER:
	            case MySqlParser.CLASS_ORIGIN:
	            case MySqlParser.CLIENT:
	            case MySqlParser.CLOSE:
	            case MySqlParser.COALESCE:
	            case MySqlParser.CODE:
	            case MySqlParser.COLUMNS:
	            case MySqlParser.COLUMN_FORMAT:
	            case MySqlParser.COLUMN_NAME:
	            case MySqlParser.COMMENT:
	            case MySqlParser.COMMIT:
	            case MySqlParser.COMPACT:
	            case MySqlParser.COMPLETION:
	            case MySqlParser.COMPRESSED:
	            case MySqlParser.COMPRESSION:
	            case MySqlParser.CONCURRENT:
	            case MySqlParser.CONNECTION:
	            case MySqlParser.CONSISTENT:
	            case MySqlParser.CONSTRAINT_CATALOG:
	            case MySqlParser.CONSTRAINT_SCHEMA:
	            case MySqlParser.CONSTRAINT_NAME:
	            case MySqlParser.CONTAINS:
	            case MySqlParser.CONTEXT:
	            case MySqlParser.CONTRIBUTORS:
	            case MySqlParser.COPY:
	            case MySqlParser.CPU:
	            case MySqlParser.CURSOR_NAME:
	            case MySqlParser.DATA:
	            case MySqlParser.DATAFILE:
	            case MySqlParser.DEALLOCATE:
	            case MySqlParser.DEFAULT_AUTH:
	            case MySqlParser.DEFINER:
	            case MySqlParser.DELAY_KEY_WRITE:
	            case MySqlParser.DES_KEY_FILE:
	            case MySqlParser.DIRECTORY:
	            case MySqlParser.DISABLE:
	            case MySqlParser.DISCARD:
	            case MySqlParser.DISK:
	            case MySqlParser.DO:
	            case MySqlParser.DUMPFILE:
	            case MySqlParser.DUPLICATE:
	            case MySqlParser.DYNAMIC:
	            case MySqlParser.ENABLE:
	            case MySqlParser.ENCRYPTION:
	            case MySqlParser.END:
	            case MySqlParser.ENDS:
	            case MySqlParser.ENGINE:
	            case MySqlParser.ENGINES:
	            case MySqlParser.ERROR:
	            case MySqlParser.ERRORS:
	            case MySqlParser.ESCAPE:
	            case MySqlParser.EVEN:
	            case MySqlParser.EVENT:
	            case MySqlParser.EVENTS:
	            case MySqlParser.EVERY:
	            case MySqlParser.EXCHANGE:
	            case MySqlParser.EXCLUSIVE:
	            case MySqlParser.EXPIRE:
	            case MySqlParser.EXPORT:
	            case MySqlParser.EXTENDED:
	            case MySqlParser.EXTENT_SIZE:
	            case MySqlParser.FAST:
	            case MySqlParser.FAULTS:
	            case MySqlParser.FIELDS:
	            case MySqlParser.FILE_BLOCK_SIZE:
	            case MySqlParser.FILTER:
	            case MySqlParser.FIRST:
	            case MySqlParser.FIXED:
	            case MySqlParser.FLUSH:
	            case MySqlParser.FOLLOWS:
	            case MySqlParser.FOUND:
	            case MySqlParser.FULL:
	            case MySqlParser.FUNCTION:
	            case MySqlParser.GENERAL:
	            case MySqlParser.GLOBAL:
	            case MySqlParser.GRANTS:
	            case MySqlParser.GROUP_REPLICATION:
	            case MySqlParser.HANDLER:
	            case MySqlParser.HASH:
	            case MySqlParser.HELP:
	            case MySqlParser.HOST:
	            case MySqlParser.HOSTS:
	            case MySqlParser.IDENTIFIED:
	            case MySqlParser.IGNORE_SERVER_IDS:
	            case MySqlParser.IMPORT:
	            case MySqlParser.INDEXES:
	            case MySqlParser.INITIAL_SIZE:
	            case MySqlParser.INPLACE:
	            case MySqlParser.INSERT_METHOD:
	            case MySqlParser.INSTALL:
	            case MySqlParser.INSTANCE:
	            case MySqlParser.INVISIBLE:
	            case MySqlParser.INVOKER:
	            case MySqlParser.IO:
	            case MySqlParser.IO_THREAD:
	            case MySqlParser.IPC:
	            case MySqlParser.ISOLATION:
	            case MySqlParser.ISSUER:
	            case MySqlParser.JSON:
	            case MySqlParser.KEY_BLOCK_SIZE:
	            case MySqlParser.LANGUAGE:
	            case MySqlParser.LAST:
	            case MySqlParser.LEAVES:
	            case MySqlParser.LESS:
	            case MySqlParser.LEVEL:
	            case MySqlParser.LIST:
	            case MySqlParser.LOCAL:
	            case MySqlParser.LOGFILE:
	            case MySqlParser.LOGS:
	            case MySqlParser.MASTER:
	            case MySqlParser.MASTER_AUTO_POSITION:
	            case MySqlParser.MASTER_CONNECT_RETRY:
	            case MySqlParser.MASTER_DELAY:
	            case MySqlParser.MASTER_HEARTBEAT_PERIOD:
	            case MySqlParser.MASTER_HOST:
	            case MySqlParser.MASTER_LOG_FILE:
	            case MySqlParser.MASTER_LOG_POS:
	            case MySqlParser.MASTER_PASSWORD:
	            case MySqlParser.MASTER_PORT:
	            case MySqlParser.MASTER_RETRY_COUNT:
	            case MySqlParser.MASTER_SSL:
	            case MySqlParser.MASTER_SSL_CA:
	            case MySqlParser.MASTER_SSL_CAPATH:
	            case MySqlParser.MASTER_SSL_CERT:
	            case MySqlParser.MASTER_SSL_CIPHER:
	            case MySqlParser.MASTER_SSL_CRL:
	            case MySqlParser.MASTER_SSL_CRLPATH:
	            case MySqlParser.MASTER_SSL_KEY:
	            case MySqlParser.MASTER_TLS_VERSION:
	            case MySqlParser.MASTER_USER:
	            case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
	            case MySqlParser.MAX_QUERIES_PER_HOUR:
	            case MySqlParser.MAX_ROWS:
	            case MySqlParser.MAX_SIZE:
	            case MySqlParser.MAX_UPDATES_PER_HOUR:
	            case MySqlParser.MAX_USER_CONNECTIONS:
	            case MySqlParser.MEDIUM:
	            case MySqlParser.MEMBER:
	            case MySqlParser.MERGE:
	            case MySqlParser.MESSAGE_TEXT:
	            case MySqlParser.MID:
	            case MySqlParser.MIGRATE:
	            case MySqlParser.MIN_ROWS:
	            case MySqlParser.MODE:
	            case MySqlParser.MODIFY:
	            case MySqlParser.MUTEX:
	            case MySqlParser.MYSQL:
	            case MySqlParser.MYSQL_ERRNO:
	            case MySqlParser.NAME:
	            case MySqlParser.NAMES:
	            case MySqlParser.NCHAR:
	            case MySqlParser.NEVER:
	            case MySqlParser.NEXT:
	            case MySqlParser.NO:
	            case MySqlParser.NODEGROUP:
	            case MySqlParser.NONE:
	            case MySqlParser.OFFLINE:
	            case MySqlParser.OFFSET:
	            case MySqlParser.OF:
	            case MySqlParser.OJ:
	            case MySqlParser.OLD_PASSWORD:
	            case MySqlParser.ONE:
	            case MySqlParser.ONLINE:
	            case MySqlParser.ONLY:
	            case MySqlParser.OPEN:
	            case MySqlParser.OPTIMIZER_COSTS:
	            case MySqlParser.OPTIONS:
	            case MySqlParser.OWNER:
	            case MySqlParser.PACK_KEYS:
	            case MySqlParser.PAGE:
	            case MySqlParser.PARSER:
	            case MySqlParser.PARTIAL:
	            case MySqlParser.PARTITIONING:
	            case MySqlParser.PARTITIONS:
	            case MySqlParser.PASSWORD:
	            case MySqlParser.PHASE:
	            case MySqlParser.PLUGIN:
	            case MySqlParser.PLUGIN_DIR:
	            case MySqlParser.PLUGINS:
	            case MySqlParser.PORT:
	            case MySqlParser.PRECEDES:
	            case MySqlParser.PREPARE:
	            case MySqlParser.PRESERVE:
	            case MySqlParser.PREV:
	            case MySqlParser.PROCESSLIST:
	            case MySqlParser.PROFILE:
	            case MySqlParser.PROFILES:
	            case MySqlParser.PROXY:
	            case MySqlParser.QUERY:
	            case MySqlParser.QUICK:
	            case MySqlParser.REBUILD:
	            case MySqlParser.RECOVER:
	            case MySqlParser.REDO_BUFFER_SIZE:
	            case MySqlParser.REDUNDANT:
	            case MySqlParser.RELAY:
	            case MySqlParser.RELAY_LOG_FILE:
	            case MySqlParser.RELAY_LOG_POS:
	            case MySqlParser.RELAYLOG:
	            case MySqlParser.REMOVE:
	            case MySqlParser.REORGANIZE:
	            case MySqlParser.REPAIR:
	            case MySqlParser.REPLICATE_DO_DB:
	            case MySqlParser.REPLICATE_DO_TABLE:
	            case MySqlParser.REPLICATE_IGNORE_DB:
	            case MySqlParser.REPLICATE_IGNORE_TABLE:
	            case MySqlParser.REPLICATE_REWRITE_DB:
	            case MySqlParser.REPLICATE_WILD_DO_TABLE:
	            case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
	            case MySqlParser.REPLICATION:
	            case MySqlParser.RESET:
	            case MySqlParser.RESUME:
	            case MySqlParser.RETURNED_SQLSTATE:
	            case MySqlParser.RETURNS:
	            case MySqlParser.ROLE:
	            case MySqlParser.ROLLBACK:
	            case MySqlParser.ROLLUP:
	            case MySqlParser.ROTATE:
	            case MySqlParser.ROW:
	            case MySqlParser.ROWS:
	            case MySqlParser.ROW_FORMAT:
	            case MySqlParser.SAVEPOINT:
	            case MySqlParser.SCHEDULE:
	            case MySqlParser.SECURITY:
	            case MySqlParser.SERVER:
	            case MySqlParser.SESSION:
	            case MySqlParser.SHARE:
	            case MySqlParser.SHARED:
	            case MySqlParser.SIGNED:
	            case MySqlParser.SIMPLE:
	            case MySqlParser.SLAVE:
	            case MySqlParser.SLOW:
	            case MySqlParser.SNAPSHOT:
	            case MySqlParser.SOCKET:
	            case MySqlParser.SOME:
	            case MySqlParser.SONAME:
	            case MySqlParser.SOUNDS:
	            case MySqlParser.SOURCE:
	            case MySqlParser.SQL_AFTER_GTIDS:
	            case MySqlParser.SQL_AFTER_MTS_GAPS:
	            case MySqlParser.SQL_BEFORE_GTIDS:
	            case MySqlParser.SQL_BUFFER_RESULT:
	            case MySqlParser.SQL_CACHE:
	            case MySqlParser.SQL_NO_CACHE:
	            case MySqlParser.SQL_THREAD:
	            case MySqlParser.START:
	            case MySqlParser.STARTS:
	            case MySqlParser.STATS_AUTO_RECALC:
	            case MySqlParser.STATS_PERSISTENT:
	            case MySqlParser.STATS_SAMPLE_PAGES:
	            case MySqlParser.STATUS:
	            case MySqlParser.STOP:
	            case MySqlParser.STORAGE:
	            case MySqlParser.STRING:
	            case MySqlParser.SUBCLASS_ORIGIN:
	            case MySqlParser.SUBJECT:
	            case MySqlParser.SUBPARTITION:
	            case MySqlParser.SUBPARTITIONS:
	            case MySqlParser.SUSPEND:
	            case MySqlParser.SWAPS:
	            case MySqlParser.SWITCHES:
	            case MySqlParser.TABLE_NAME:
	            case MySqlParser.TABLESPACE:
	            case MySqlParser.TEMPORARY:
	            case MySqlParser.TEMPTABLE:
	            case MySqlParser.THAN:
	            case MySqlParser.TRADITIONAL:
	            case MySqlParser.TRANSACTION:
	            case MySqlParser.TRANSACTIONAL:
	            case MySqlParser.TRIGGERS:
	            case MySqlParser.TRUNCATE:
	            case MySqlParser.UNDEFINED:
	            case MySqlParser.UNDOFILE:
	            case MySqlParser.UNDO_BUFFER_SIZE:
	            case MySqlParser.UNINSTALL:
	            case MySqlParser.UNKNOWN:
	            case MySqlParser.UNTIL:
	            case MySqlParser.UPGRADE:
	            case MySqlParser.USER:
	            case MySqlParser.USE_FRM:
	            case MySqlParser.USER_RESOURCES:
	            case MySqlParser.VALIDATION:
	            case MySqlParser.VALUE:
	            case MySqlParser.VARIABLES:
	            case MySqlParser.VIEW:
	            case MySqlParser.VISIBLE:
	            case MySqlParser.WAIT:
	            case MySqlParser.WARNINGS:
	            case MySqlParser.WITHOUT:
	            case MySqlParser.WORK:
	            case MySqlParser.WRAPPER:
	            case MySqlParser.X509:
	            case MySqlParser.XA:
	            case MySqlParser.XML:
	            case MySqlParser.INTERNAL:
	            case MySqlParser.QUARTER:
	            case MySqlParser.MONTH:
	            case MySqlParser.DAY:
	            case MySqlParser.HOUR:
	            case MySqlParser.MINUTE:
	            case MySqlParser.WEEK:
	            case MySqlParser.SECOND:
	            case MySqlParser.MICROSECOND:
	            case MySqlParser.TABLES:
	            case MySqlParser.ROUTINE:
	            case MySqlParser.EXECUTE:
	            case MySqlParser.FILE:
	            case MySqlParser.PROCESS:
	            case MySqlParser.RELOAD:
	            case MySqlParser.SHUTDOWN:
	            case MySqlParser.SUPER:
	            case MySqlParser.PRIVILEGES:
	            case MySqlParser.AUDIT_ADMIN:
	            case MySqlParser.BACKUP_ADMIN:
	            case MySqlParser.BINLOG_ADMIN:
	            case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
	            case MySqlParser.CLONE_ADMIN:
	            case MySqlParser.CONNECTION_ADMIN:
	            case MySqlParser.ENCRYPTION_KEY_ADMIN:
	            case MySqlParser.FIREWALL_ADMIN:
	            case MySqlParser.FIREWALL_USER:
	            case MySqlParser.GROUP_REPLICATION_ADMIN:
	            case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
	            case MySqlParser.NDB_STORED_USER:
	            case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
	            case MySqlParser.REPLICATION_APPLIER:
	            case MySqlParser.REPLICATION_SLAVE_ADMIN:
	            case MySqlParser.RESOURCE_GROUP_ADMIN:
	            case MySqlParser.RESOURCE_GROUP_USER:
	            case MySqlParser.ROLE_ADMIN:
	            case MySqlParser.SESSION_VARIABLES_ADMIN:
	            case MySqlParser.SET_USER_ID:
	            case MySqlParser.SHOW_ROUTINE:
	            case MySqlParser.SYSTEM_VARIABLES_ADMIN:
	            case MySqlParser.TABLE_ENCRYPTION_ADMIN:
	            case MySqlParser.VERSION_TOKEN_ADMIN:
	            case MySqlParser.XA_RECOVER_ADMIN:
	            case MySqlParser.ARMSCII8:
	            case MySqlParser.ASCII:
	            case MySqlParser.BIG5:
	            case MySqlParser.CP1250:
	            case MySqlParser.CP1251:
	            case MySqlParser.CP1256:
	            case MySqlParser.CP1257:
	            case MySqlParser.CP850:
	            case MySqlParser.CP852:
	            case MySqlParser.CP866:
	            case MySqlParser.CP932:
	            case MySqlParser.DEC8:
	            case MySqlParser.EUCJPMS:
	            case MySqlParser.EUCKR:
	            case MySqlParser.GB2312:
	            case MySqlParser.GBK:
	            case MySqlParser.GEOSTD8:
	            case MySqlParser.GREEK:
	            case MySqlParser.HEBREW:
	            case MySqlParser.HP8:
	            case MySqlParser.KEYBCS2:
	            case MySqlParser.KOI8R:
	            case MySqlParser.KOI8U:
	            case MySqlParser.LATIN1:
	            case MySqlParser.LATIN2:
	            case MySqlParser.LATIN5:
	            case MySqlParser.LATIN7:
	            case MySqlParser.MACCE:
	            case MySqlParser.MACROMAN:
	            case MySqlParser.SJIS:
	            case MySqlParser.SWE7:
	            case MySqlParser.TIS620:
	            case MySqlParser.UCS2:
	            case MySqlParser.UJIS:
	            case MySqlParser.UTF16:
	            case MySqlParser.UTF16LE:
	            case MySqlParser.UTF32:
	            case MySqlParser.UTF8:
	            case MySqlParser.UTF8MB3:
	            case MySqlParser.UTF8MB4:
	            case MySqlParser.ARCHIVE:
	            case MySqlParser.BLACKHOLE:
	            case MySqlParser.CSV:
	            case MySqlParser.FEDERATED:
	            case MySqlParser.INNODB:
	            case MySqlParser.MEMORY:
	            case MySqlParser.MRG_MYISAM:
	            case MySqlParser.MYISAM:
	            case MySqlParser.NDB:
	            case MySqlParser.NDBCLUSTER:
	            case MySqlParser.PERFORMANCE_SCHEMA:
	            case MySqlParser.TOKUDB:
	            case MySqlParser.REPEATABLE:
	            case MySqlParser.COMMITTED:
	            case MySqlParser.UNCOMMITTED:
	            case MySqlParser.SERIALIZABLE:
	            case MySqlParser.GEOMETRYCOLLECTION:
	            case MySqlParser.LINESTRING:
	            case MySqlParser.MULTILINESTRING:
	            case MySqlParser.MULTIPOINT:
	            case MySqlParser.MULTIPOLYGON:
	            case MySqlParser.POINT:
	            case MySqlParser.POLYGON:
	            case MySqlParser.ABS:
	            case MySqlParser.ACOS:
	            case MySqlParser.ADDDATE:
	            case MySqlParser.ADDTIME:
	            case MySqlParser.AES_DECRYPT:
	            case MySqlParser.AES_ENCRYPT:
	            case MySqlParser.AREA:
	            case MySqlParser.ASBINARY:
	            case MySqlParser.ASIN:
	            case MySqlParser.ASTEXT:
	            case MySqlParser.ASWKB:
	            case MySqlParser.ASWKT:
	            case MySqlParser.ASYMMETRIC_DECRYPT:
	            case MySqlParser.ASYMMETRIC_DERIVE:
	            case MySqlParser.ASYMMETRIC_ENCRYPT:
	            case MySqlParser.ASYMMETRIC_SIGN:
	            case MySqlParser.ASYMMETRIC_VERIFY:
	            case MySqlParser.ATAN:
	            case MySqlParser.ATAN2:
	            case MySqlParser.BENCHMARK:
	            case MySqlParser.BIN:
	            case MySqlParser.BIT_COUNT:
	            case MySqlParser.BIT_LENGTH:
	            case MySqlParser.BUFFER:
	            case MySqlParser.CATALOG_NAME:
	            case MySqlParser.CEIL:
	            case MySqlParser.CEILING:
	            case MySqlParser.CENTROID:
	            case MySqlParser.CHARACTER_LENGTH:
	            case MySqlParser.CHARSET:
	            case MySqlParser.CHAR_LENGTH:
	            case MySqlParser.COERCIBILITY:
	            case MySqlParser.COLLATION:
	            case MySqlParser.COMPRESS:
	            case MySqlParser.CONCAT:
	            case MySqlParser.CONCAT_WS:
	            case MySqlParser.CONNECTION_ID:
	            case MySqlParser.CONV:
	            case MySqlParser.CONVERT_TZ:
	            case MySqlParser.COS:
	            case MySqlParser.COT:
	            case MySqlParser.CRC32:
	            case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
	            case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
	            case MySqlParser.CREATE_DH_PARAMETERS:
	            case MySqlParser.CREATE_DIGEST:
	            case MySqlParser.CROSSES:
	            case MySqlParser.DATEDIFF:
	            case MySqlParser.DATE_FORMAT:
	            case MySqlParser.DAYNAME:
	            case MySqlParser.DAYOFMONTH:
	            case MySqlParser.DAYOFWEEK:
	            case MySqlParser.DAYOFYEAR:
	            case MySqlParser.DECODE:
	            case MySqlParser.DEGREES:
	            case MySqlParser.DES_DECRYPT:
	            case MySqlParser.DES_ENCRYPT:
	            case MySqlParser.DIMENSION:
	            case MySqlParser.DISJOINT:
	            case MySqlParser.ELT:
	            case MySqlParser.ENCODE:
	            case MySqlParser.ENCRYPT:
	            case MySqlParser.ENDPOINT:
	            case MySqlParser.ENVELOPE:
	            case MySqlParser.EQUALS:
	            case MySqlParser.EXP:
	            case MySqlParser.EXPORT_SET:
	            case MySqlParser.EXTERIORRING:
	            case MySqlParser.EXTRACTVALUE:
	            case MySqlParser.FIELD:
	            case MySqlParser.FIND_IN_SET:
	            case MySqlParser.FLOOR:
	            case MySqlParser.FORMAT:
	            case MySqlParser.FOUND_ROWS:
	            case MySqlParser.FROM_BASE64:
	            case MySqlParser.FROM_DAYS:
	            case MySqlParser.FROM_UNIXTIME:
	            case MySqlParser.GEOMCOLLFROMTEXT:
	            case MySqlParser.GEOMCOLLFROMWKB:
	            case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
	            case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
	            case MySqlParser.GEOMETRYFROMTEXT:
	            case MySqlParser.GEOMETRYFROMWKB:
	            case MySqlParser.GEOMETRYN:
	            case MySqlParser.GEOMETRYTYPE:
	            case MySqlParser.GEOMFROMTEXT:
	            case MySqlParser.GEOMFROMWKB:
	            case MySqlParser.GET_FORMAT:
	            case MySqlParser.GET_LOCK:
	            case MySqlParser.GLENGTH:
	            case MySqlParser.GREATEST:
	            case MySqlParser.GTID_SUBSET:
	            case MySqlParser.GTID_SUBTRACT:
	            case MySqlParser.HEX:
	            case MySqlParser.IFNULL:
	            case MySqlParser.INET6_ATON:
	            case MySqlParser.INET6_NTOA:
	            case MySqlParser.INET_ATON:
	            case MySqlParser.INET_NTOA:
	            case MySqlParser.INSTR:
	            case MySqlParser.INTERIORRINGN:
	            case MySqlParser.INTERSECTS:
	            case MySqlParser.ISCLOSED:
	            case MySqlParser.ISEMPTY:
	            case MySqlParser.ISNULL:
	            case MySqlParser.ISSIMPLE:
	            case MySqlParser.IS_FREE_LOCK:
	            case MySqlParser.IS_IPV4:
	            case MySqlParser.IS_IPV4_COMPAT:
	            case MySqlParser.IS_IPV4_MAPPED:
	            case MySqlParser.IS_IPV6:
	            case MySqlParser.IS_USED_LOCK:
	            case MySqlParser.LAST_INSERT_ID:
	            case MySqlParser.LCASE:
	            case MySqlParser.LEAST:
	            case MySqlParser.LENGTH:
	            case MySqlParser.LINEFROMTEXT:
	            case MySqlParser.LINEFROMWKB:
	            case MySqlParser.LINESTRINGFROMTEXT:
	            case MySqlParser.LINESTRINGFROMWKB:
	            case MySqlParser.LN:
	            case MySqlParser.LOAD_FILE:
	            case MySqlParser.LOCATE:
	            case MySqlParser.LOG:
	            case MySqlParser.LOG10:
	            case MySqlParser.LOG2:
	            case MySqlParser.LOWER:
	            case MySqlParser.LPAD:
	            case MySqlParser.LTRIM:
	            case MySqlParser.MAKEDATE:
	            case MySqlParser.MAKETIME:
	            case MySqlParser.MAKE_SET:
	            case MySqlParser.MASTER_POS_WAIT:
	            case MySqlParser.MBRCONTAINS:
	            case MySqlParser.MBRDISJOINT:
	            case MySqlParser.MBREQUAL:
	            case MySqlParser.MBRINTERSECTS:
	            case MySqlParser.MBROVERLAPS:
	            case MySqlParser.MBRTOUCHES:
	            case MySqlParser.MBRWITHIN:
	            case MySqlParser.MD5:
	            case MySqlParser.MLINEFROMTEXT:
	            case MySqlParser.MLINEFROMWKB:
	            case MySqlParser.MONTHNAME:
	            case MySqlParser.MPOINTFROMTEXT:
	            case MySqlParser.MPOINTFROMWKB:
	            case MySqlParser.MPOLYFROMTEXT:
	            case MySqlParser.MPOLYFROMWKB:
	            case MySqlParser.MULTILINESTRINGFROMTEXT:
	            case MySqlParser.MULTILINESTRINGFROMWKB:
	            case MySqlParser.MULTIPOINTFROMTEXT:
	            case MySqlParser.MULTIPOINTFROMWKB:
	            case MySqlParser.MULTIPOLYGONFROMTEXT:
	            case MySqlParser.MULTIPOLYGONFROMWKB:
	            case MySqlParser.NAME_CONST:
	            case MySqlParser.NULLIF:
	            case MySqlParser.NUMGEOMETRIES:
	            case MySqlParser.NUMINTERIORRINGS:
	            case MySqlParser.NUMPOINTS:
	            case MySqlParser.OCT:
	            case MySqlParser.OCTET_LENGTH:
	            case MySqlParser.ORD:
	            case MySqlParser.OVERLAPS:
	            case MySqlParser.PERIOD_ADD:
	            case MySqlParser.PERIOD_DIFF:
	            case MySqlParser.PI:
	            case MySqlParser.POINTFROMTEXT:
	            case MySqlParser.POINTFROMWKB:
	            case MySqlParser.POINTN:
	            case MySqlParser.POLYFROMTEXT:
	            case MySqlParser.POLYFROMWKB:
	            case MySqlParser.POLYGONFROMTEXT:
	            case MySqlParser.POLYGONFROMWKB:
	            case MySqlParser.POW:
	            case MySqlParser.POWER:
	            case MySqlParser.QUOTE:
	            case MySqlParser.RADIANS:
	            case MySqlParser.RAND:
	            case MySqlParser.RANDOM_BYTES:
	            case MySqlParser.RELEASE_LOCK:
	            case MySqlParser.REVERSE:
	            case MySqlParser.ROUND:
	            case MySqlParser.ROW_COUNT:
	            case MySqlParser.RPAD:
	            case MySqlParser.RTRIM:
	            case MySqlParser.SEC_TO_TIME:
	            case MySqlParser.SESSION_USER:
	            case MySqlParser.SHA:
	            case MySqlParser.SHA1:
	            case MySqlParser.SHA2:
	            case MySqlParser.SCHEMA_NAME:
	            case MySqlParser.SIGN:
	            case MySqlParser.SIN:
	            case MySqlParser.SLEEP:
	            case MySqlParser.SOUNDEX:
	            case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
	            case MySqlParser.SQRT:
	            case MySqlParser.SRID:
	            case MySqlParser.STARTPOINT:
	            case MySqlParser.STRCMP:
	            case MySqlParser.STR_TO_DATE:
	            case MySqlParser.ST_AREA:
	            case MySqlParser.ST_ASBINARY:
	            case MySqlParser.ST_ASTEXT:
	            case MySqlParser.ST_ASWKB:
	            case MySqlParser.ST_ASWKT:
	            case MySqlParser.ST_BUFFER:
	            case MySqlParser.ST_CENTROID:
	            case MySqlParser.ST_CONTAINS:
	            case MySqlParser.ST_CROSSES:
	            case MySqlParser.ST_DIFFERENCE:
	            case MySqlParser.ST_DIMENSION:
	            case MySqlParser.ST_DISJOINT:
	            case MySqlParser.ST_DISTANCE:
	            case MySqlParser.ST_ENDPOINT:
	            case MySqlParser.ST_ENVELOPE:
	            case MySqlParser.ST_EQUALS:
	            case MySqlParser.ST_EXTERIORRING:
	            case MySqlParser.ST_GEOMCOLLFROMTEXT:
	            case MySqlParser.ST_GEOMCOLLFROMTXT:
	            case MySqlParser.ST_GEOMCOLLFROMWKB:
	            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
	            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
	            case MySqlParser.ST_GEOMETRYFROMTEXT:
	            case MySqlParser.ST_GEOMETRYFROMWKB:
	            case MySqlParser.ST_GEOMETRYN:
	            case MySqlParser.ST_GEOMETRYTYPE:
	            case MySqlParser.ST_GEOMFROMTEXT:
	            case MySqlParser.ST_GEOMFROMWKB:
	            case MySqlParser.ST_INTERIORRINGN:
	            case MySqlParser.ST_INTERSECTION:
	            case MySqlParser.ST_INTERSECTS:
	            case MySqlParser.ST_ISCLOSED:
	            case MySqlParser.ST_ISEMPTY:
	            case MySqlParser.ST_ISSIMPLE:
	            case MySqlParser.ST_LINEFROMTEXT:
	            case MySqlParser.ST_LINEFROMWKB:
	            case MySqlParser.ST_LINESTRINGFROMTEXT:
	            case MySqlParser.ST_LINESTRINGFROMWKB:
	            case MySqlParser.ST_NUMGEOMETRIES:
	            case MySqlParser.ST_NUMINTERIORRING:
	            case MySqlParser.ST_NUMINTERIORRINGS:
	            case MySqlParser.ST_NUMPOINTS:
	            case MySqlParser.ST_OVERLAPS:
	            case MySqlParser.ST_POINTFROMTEXT:
	            case MySqlParser.ST_POINTFROMWKB:
	            case MySqlParser.ST_POINTN:
	            case MySqlParser.ST_POLYFROMTEXT:
	            case MySqlParser.ST_POLYFROMWKB:
	            case MySqlParser.ST_POLYGONFROMTEXT:
	            case MySqlParser.ST_POLYGONFROMWKB:
	            case MySqlParser.ST_SRID:
	            case MySqlParser.ST_STARTPOINT:
	            case MySqlParser.ST_SYMDIFFERENCE:
	            case MySqlParser.ST_TOUCHES:
	            case MySqlParser.ST_UNION:
	            case MySqlParser.ST_WITHIN:
	            case MySqlParser.ST_X:
	            case MySqlParser.ST_Y:
	            case MySqlParser.SUBDATE:
	            case MySqlParser.SUBSTRING_INDEX:
	            case MySqlParser.SUBTIME:
	            case MySqlParser.SYSTEM_USER:
	            case MySqlParser.TAN:
	            case MySqlParser.TIMEDIFF:
	            case MySqlParser.TIMESTAMPADD:
	            case MySqlParser.TIMESTAMPDIFF:
	            case MySqlParser.TIME_FORMAT:
	            case MySqlParser.TIME_TO_SEC:
	            case MySqlParser.TOUCHES:
	            case MySqlParser.TO_BASE64:
	            case MySqlParser.TO_DAYS:
	            case MySqlParser.TO_SECONDS:
	            case MySqlParser.UCASE:
	            case MySqlParser.UNCOMPRESS:
	            case MySqlParser.UNCOMPRESSED_LENGTH:
	            case MySqlParser.UNHEX:
	            case MySqlParser.UNIX_TIMESTAMP:
	            case MySqlParser.UPDATEXML:
	            case MySqlParser.UPPER:
	            case MySqlParser.UUID:
	            case MySqlParser.UUID_SHORT:
	            case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
	            case MySqlParser.VERSION:
	            case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
	            case MySqlParser.WEEKDAY:
	            case MySqlParser.WEEKOFYEAR:
	            case MySqlParser.WEIGHT_STRING:
	            case MySqlParser.WITHIN:
	            case MySqlParser.YEARWEEK:
	            case MySqlParser.Y_FUNCTION:
	            case MySqlParser.X_FUNCTION:
	            case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
	            case MySqlParser.STRING_LITERAL:
	            case MySqlParser.ID:
	            case MySqlParser.REVERSE_QUOTE_ID:
	                this.state = 2543;
	                this.uidList();
	                break;
	            case MySqlParser.ALL:
	                this.state = 2544;
	                this.match(MySqlParser.ALL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2547;
	            this.match(MySqlParser.TABLESPACE);
	            break;

	        case 36:
	            localctx = new AlterByImportPartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 36);
	            this.state = 2548;
	            this.match(MySqlParser.IMPORT);
	            this.state = 2549;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2552;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.CURRENT:
	            case MySqlParser.DATABASE:
	            case MySqlParser.DIAGNOSTICS:
	            case MySqlParser.LEFT:
	            case MySqlParser.NUMBER:
	            case MySqlParser.RIGHT:
	            case MySqlParser.STACKED:
	            case MySqlParser.DATE:
	            case MySqlParser.TIME:
	            case MySqlParser.TIMESTAMP:
	            case MySqlParser.DATETIME:
	            case MySqlParser.YEAR:
	            case MySqlParser.TEXT:
	            case MySqlParser.ENUM:
	            case MySqlParser.SERIAL:
	            case MySqlParser.JSON_VALID:
	            case MySqlParser.JSON_SCHEMA_VALID:
	            case MySqlParser.AVG:
	            case MySqlParser.BIT_AND:
	            case MySqlParser.BIT_OR:
	            case MySqlParser.BIT_XOR:
	            case MySqlParser.COUNT:
	            case MySqlParser.GROUP_CONCAT:
	            case MySqlParser.MAX:
	            case MySqlParser.MIN:
	            case MySqlParser.STD:
	            case MySqlParser.STDDEV:
	            case MySqlParser.STDDEV_POP:
	            case MySqlParser.STDDEV_SAMP:
	            case MySqlParser.SUM:
	            case MySqlParser.VAR_POP:
	            case MySqlParser.VAR_SAMP:
	            case MySqlParser.VARIANCE:
	            case MySqlParser.POSITION:
	            case MySqlParser.ACCOUNT:
	            case MySqlParser.ACTION:
	            case MySqlParser.AFTER:
	            case MySqlParser.AGGREGATE:
	            case MySqlParser.ALGORITHM:
	            case MySqlParser.ANY:
	            case MySqlParser.AT:
	            case MySqlParser.AUTHORS:
	            case MySqlParser.AUTOCOMMIT:
	            case MySqlParser.AUTOEXTEND_SIZE:
	            case MySqlParser.AUTO_INCREMENT:
	            case MySqlParser.AVG_ROW_LENGTH:
	            case MySqlParser.BEGIN:
	            case MySqlParser.BINLOG:
	            case MySqlParser.BIT:
	            case MySqlParser.BLOCK:
	            case MySqlParser.BOOL:
	            case MySqlParser.BOOLEAN:
	            case MySqlParser.BTREE:
	            case MySqlParser.CACHE:
	            case MySqlParser.CASCADED:
	            case MySqlParser.CHAIN:
	            case MySqlParser.CHANGED:
	            case MySqlParser.CHANNEL:
	            case MySqlParser.CHECKSUM:
	            case MySqlParser.PAGE_CHECKSUM:
	            case MySqlParser.CIPHER:
	            case MySqlParser.CLASS_ORIGIN:
	            case MySqlParser.CLIENT:
	            case MySqlParser.CLOSE:
	            case MySqlParser.COALESCE:
	            case MySqlParser.CODE:
	            case MySqlParser.COLUMNS:
	            case MySqlParser.COLUMN_FORMAT:
	            case MySqlParser.COLUMN_NAME:
	            case MySqlParser.COMMENT:
	            case MySqlParser.COMMIT:
	            case MySqlParser.COMPACT:
	            case MySqlParser.COMPLETION:
	            case MySqlParser.COMPRESSED:
	            case MySqlParser.COMPRESSION:
	            case MySqlParser.CONCURRENT:
	            case MySqlParser.CONNECTION:
	            case MySqlParser.CONSISTENT:
	            case MySqlParser.CONSTRAINT_CATALOG:
	            case MySqlParser.CONSTRAINT_SCHEMA:
	            case MySqlParser.CONSTRAINT_NAME:
	            case MySqlParser.CONTAINS:
	            case MySqlParser.CONTEXT:
	            case MySqlParser.CONTRIBUTORS:
	            case MySqlParser.COPY:
	            case MySqlParser.CPU:
	            case MySqlParser.CURSOR_NAME:
	            case MySqlParser.DATA:
	            case MySqlParser.DATAFILE:
	            case MySqlParser.DEALLOCATE:
	            case MySqlParser.DEFAULT_AUTH:
	            case MySqlParser.DEFINER:
	            case MySqlParser.DELAY_KEY_WRITE:
	            case MySqlParser.DES_KEY_FILE:
	            case MySqlParser.DIRECTORY:
	            case MySqlParser.DISABLE:
	            case MySqlParser.DISCARD:
	            case MySqlParser.DISK:
	            case MySqlParser.DO:
	            case MySqlParser.DUMPFILE:
	            case MySqlParser.DUPLICATE:
	            case MySqlParser.DYNAMIC:
	            case MySqlParser.ENABLE:
	            case MySqlParser.ENCRYPTION:
	            case MySqlParser.END:
	            case MySqlParser.ENDS:
	            case MySqlParser.ENGINE:
	            case MySqlParser.ENGINES:
	            case MySqlParser.ERROR:
	            case MySqlParser.ERRORS:
	            case MySqlParser.ESCAPE:
	            case MySqlParser.EVEN:
	            case MySqlParser.EVENT:
	            case MySqlParser.EVENTS:
	            case MySqlParser.EVERY:
	            case MySqlParser.EXCHANGE:
	            case MySqlParser.EXCLUSIVE:
	            case MySqlParser.EXPIRE:
	            case MySqlParser.EXPORT:
	            case MySqlParser.EXTENDED:
	            case MySqlParser.EXTENT_SIZE:
	            case MySqlParser.FAST:
	            case MySqlParser.FAULTS:
	            case MySqlParser.FIELDS:
	            case MySqlParser.FILE_BLOCK_SIZE:
	            case MySqlParser.FILTER:
	            case MySqlParser.FIRST:
	            case MySqlParser.FIXED:
	            case MySqlParser.FLUSH:
	            case MySqlParser.FOLLOWS:
	            case MySqlParser.FOUND:
	            case MySqlParser.FULL:
	            case MySqlParser.FUNCTION:
	            case MySqlParser.GENERAL:
	            case MySqlParser.GLOBAL:
	            case MySqlParser.GRANTS:
	            case MySqlParser.GROUP_REPLICATION:
	            case MySqlParser.HANDLER:
	            case MySqlParser.HASH:
	            case MySqlParser.HELP:
	            case MySqlParser.HOST:
	            case MySqlParser.HOSTS:
	            case MySqlParser.IDENTIFIED:
	            case MySqlParser.IGNORE_SERVER_IDS:
	            case MySqlParser.IMPORT:
	            case MySqlParser.INDEXES:
	            case MySqlParser.INITIAL_SIZE:
	            case MySqlParser.INPLACE:
	            case MySqlParser.INSERT_METHOD:
	            case MySqlParser.INSTALL:
	            case MySqlParser.INSTANCE:
	            case MySqlParser.INVISIBLE:
	            case MySqlParser.INVOKER:
	            case MySqlParser.IO:
	            case MySqlParser.IO_THREAD:
	            case MySqlParser.IPC:
	            case MySqlParser.ISOLATION:
	            case MySqlParser.ISSUER:
	            case MySqlParser.JSON:
	            case MySqlParser.KEY_BLOCK_SIZE:
	            case MySqlParser.LANGUAGE:
	            case MySqlParser.LAST:
	            case MySqlParser.LEAVES:
	            case MySqlParser.LESS:
	            case MySqlParser.LEVEL:
	            case MySqlParser.LIST:
	            case MySqlParser.LOCAL:
	            case MySqlParser.LOGFILE:
	            case MySqlParser.LOGS:
	            case MySqlParser.MASTER:
	            case MySqlParser.MASTER_AUTO_POSITION:
	            case MySqlParser.MASTER_CONNECT_RETRY:
	            case MySqlParser.MASTER_DELAY:
	            case MySqlParser.MASTER_HEARTBEAT_PERIOD:
	            case MySqlParser.MASTER_HOST:
	            case MySqlParser.MASTER_LOG_FILE:
	            case MySqlParser.MASTER_LOG_POS:
	            case MySqlParser.MASTER_PASSWORD:
	            case MySqlParser.MASTER_PORT:
	            case MySqlParser.MASTER_RETRY_COUNT:
	            case MySqlParser.MASTER_SSL:
	            case MySqlParser.MASTER_SSL_CA:
	            case MySqlParser.MASTER_SSL_CAPATH:
	            case MySqlParser.MASTER_SSL_CERT:
	            case MySqlParser.MASTER_SSL_CIPHER:
	            case MySqlParser.MASTER_SSL_CRL:
	            case MySqlParser.MASTER_SSL_CRLPATH:
	            case MySqlParser.MASTER_SSL_KEY:
	            case MySqlParser.MASTER_TLS_VERSION:
	            case MySqlParser.MASTER_USER:
	            case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
	            case MySqlParser.MAX_QUERIES_PER_HOUR:
	            case MySqlParser.MAX_ROWS:
	            case MySqlParser.MAX_SIZE:
	            case MySqlParser.MAX_UPDATES_PER_HOUR:
	            case MySqlParser.MAX_USER_CONNECTIONS:
	            case MySqlParser.MEDIUM:
	            case MySqlParser.MEMBER:
	            case MySqlParser.MERGE:
	            case MySqlParser.MESSAGE_TEXT:
	            case MySqlParser.MID:
	            case MySqlParser.MIGRATE:
	            case MySqlParser.MIN_ROWS:
	            case MySqlParser.MODE:
	            case MySqlParser.MODIFY:
	            case MySqlParser.MUTEX:
	            case MySqlParser.MYSQL:
	            case MySqlParser.MYSQL_ERRNO:
	            case MySqlParser.NAME:
	            case MySqlParser.NAMES:
	            case MySqlParser.NCHAR:
	            case MySqlParser.NEVER:
	            case MySqlParser.NEXT:
	            case MySqlParser.NO:
	            case MySqlParser.NODEGROUP:
	            case MySqlParser.NONE:
	            case MySqlParser.OFFLINE:
	            case MySqlParser.OFFSET:
	            case MySqlParser.OF:
	            case MySqlParser.OJ:
	            case MySqlParser.OLD_PASSWORD:
	            case MySqlParser.ONE:
	            case MySqlParser.ONLINE:
	            case MySqlParser.ONLY:
	            case MySqlParser.OPEN:
	            case MySqlParser.OPTIMIZER_COSTS:
	            case MySqlParser.OPTIONS:
	            case MySqlParser.OWNER:
	            case MySqlParser.PACK_KEYS:
	            case MySqlParser.PAGE:
	            case MySqlParser.PARSER:
	            case MySqlParser.PARTIAL:
	            case MySqlParser.PARTITIONING:
	            case MySqlParser.PARTITIONS:
	            case MySqlParser.PASSWORD:
	            case MySqlParser.PHASE:
	            case MySqlParser.PLUGIN:
	            case MySqlParser.PLUGIN_DIR:
	            case MySqlParser.PLUGINS:
	            case MySqlParser.PORT:
	            case MySqlParser.PRECEDES:
	            case MySqlParser.PREPARE:
	            case MySqlParser.PRESERVE:
	            case MySqlParser.PREV:
	            case MySqlParser.PROCESSLIST:
	            case MySqlParser.PROFILE:
	            case MySqlParser.PROFILES:
	            case MySqlParser.PROXY:
	            case MySqlParser.QUERY:
	            case MySqlParser.QUICK:
	            case MySqlParser.REBUILD:
	            case MySqlParser.RECOVER:
	            case MySqlParser.REDO_BUFFER_SIZE:
	            case MySqlParser.REDUNDANT:
	            case MySqlParser.RELAY:
	            case MySqlParser.RELAY_LOG_FILE:
	            case MySqlParser.RELAY_LOG_POS:
	            case MySqlParser.RELAYLOG:
	            case MySqlParser.REMOVE:
	            case MySqlParser.REORGANIZE:
	            case MySqlParser.REPAIR:
	            case MySqlParser.REPLICATE_DO_DB:
	            case MySqlParser.REPLICATE_DO_TABLE:
	            case MySqlParser.REPLICATE_IGNORE_DB:
	            case MySqlParser.REPLICATE_IGNORE_TABLE:
	            case MySqlParser.REPLICATE_REWRITE_DB:
	            case MySqlParser.REPLICATE_WILD_DO_TABLE:
	            case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
	            case MySqlParser.REPLICATION:
	            case MySqlParser.RESET:
	            case MySqlParser.RESUME:
	            case MySqlParser.RETURNED_SQLSTATE:
	            case MySqlParser.RETURNS:
	            case MySqlParser.ROLE:
	            case MySqlParser.ROLLBACK:
	            case MySqlParser.ROLLUP:
	            case MySqlParser.ROTATE:
	            case MySqlParser.ROW:
	            case MySqlParser.ROWS:
	            case MySqlParser.ROW_FORMAT:
	            case MySqlParser.SAVEPOINT:
	            case MySqlParser.SCHEDULE:
	            case MySqlParser.SECURITY:
	            case MySqlParser.SERVER:
	            case MySqlParser.SESSION:
	            case MySqlParser.SHARE:
	            case MySqlParser.SHARED:
	            case MySqlParser.SIGNED:
	            case MySqlParser.SIMPLE:
	            case MySqlParser.SLAVE:
	            case MySqlParser.SLOW:
	            case MySqlParser.SNAPSHOT:
	            case MySqlParser.SOCKET:
	            case MySqlParser.SOME:
	            case MySqlParser.SONAME:
	            case MySqlParser.SOUNDS:
	            case MySqlParser.SOURCE:
	            case MySqlParser.SQL_AFTER_GTIDS:
	            case MySqlParser.SQL_AFTER_MTS_GAPS:
	            case MySqlParser.SQL_BEFORE_GTIDS:
	            case MySqlParser.SQL_BUFFER_RESULT:
	            case MySqlParser.SQL_CACHE:
	            case MySqlParser.SQL_NO_CACHE:
	            case MySqlParser.SQL_THREAD:
	            case MySqlParser.START:
	            case MySqlParser.STARTS:
	            case MySqlParser.STATS_AUTO_RECALC:
	            case MySqlParser.STATS_PERSISTENT:
	            case MySqlParser.STATS_SAMPLE_PAGES:
	            case MySqlParser.STATUS:
	            case MySqlParser.STOP:
	            case MySqlParser.STORAGE:
	            case MySqlParser.STRING:
	            case MySqlParser.SUBCLASS_ORIGIN:
	            case MySqlParser.SUBJECT:
	            case MySqlParser.SUBPARTITION:
	            case MySqlParser.SUBPARTITIONS:
	            case MySqlParser.SUSPEND:
	            case MySqlParser.SWAPS:
	            case MySqlParser.SWITCHES:
	            case MySqlParser.TABLE_NAME:
	            case MySqlParser.TABLESPACE:
	            case MySqlParser.TEMPORARY:
	            case MySqlParser.TEMPTABLE:
	            case MySqlParser.THAN:
	            case MySqlParser.TRADITIONAL:
	            case MySqlParser.TRANSACTION:
	            case MySqlParser.TRANSACTIONAL:
	            case MySqlParser.TRIGGERS:
	            case MySqlParser.TRUNCATE:
	            case MySqlParser.UNDEFINED:
	            case MySqlParser.UNDOFILE:
	            case MySqlParser.UNDO_BUFFER_SIZE:
	            case MySqlParser.UNINSTALL:
	            case MySqlParser.UNKNOWN:
	            case MySqlParser.UNTIL:
	            case MySqlParser.UPGRADE:
	            case MySqlParser.USER:
	            case MySqlParser.USE_FRM:
	            case MySqlParser.USER_RESOURCES:
	            case MySqlParser.VALIDATION:
	            case MySqlParser.VALUE:
	            case MySqlParser.VARIABLES:
	            case MySqlParser.VIEW:
	            case MySqlParser.VISIBLE:
	            case MySqlParser.WAIT:
	            case MySqlParser.WARNINGS:
	            case MySqlParser.WITHOUT:
	            case MySqlParser.WORK:
	            case MySqlParser.WRAPPER:
	            case MySqlParser.X509:
	            case MySqlParser.XA:
	            case MySqlParser.XML:
	            case MySqlParser.INTERNAL:
	            case MySqlParser.QUARTER:
	            case MySqlParser.MONTH:
	            case MySqlParser.DAY:
	            case MySqlParser.HOUR:
	            case MySqlParser.MINUTE:
	            case MySqlParser.WEEK:
	            case MySqlParser.SECOND:
	            case MySqlParser.MICROSECOND:
	            case MySqlParser.TABLES:
	            case MySqlParser.ROUTINE:
	            case MySqlParser.EXECUTE:
	            case MySqlParser.FILE:
	            case MySqlParser.PROCESS:
	            case MySqlParser.RELOAD:
	            case MySqlParser.SHUTDOWN:
	            case MySqlParser.SUPER:
	            case MySqlParser.PRIVILEGES:
	            case MySqlParser.AUDIT_ADMIN:
	            case MySqlParser.BACKUP_ADMIN:
	            case MySqlParser.BINLOG_ADMIN:
	            case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
	            case MySqlParser.CLONE_ADMIN:
	            case MySqlParser.CONNECTION_ADMIN:
	            case MySqlParser.ENCRYPTION_KEY_ADMIN:
	            case MySqlParser.FIREWALL_ADMIN:
	            case MySqlParser.FIREWALL_USER:
	            case MySqlParser.GROUP_REPLICATION_ADMIN:
	            case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
	            case MySqlParser.NDB_STORED_USER:
	            case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
	            case MySqlParser.REPLICATION_APPLIER:
	            case MySqlParser.REPLICATION_SLAVE_ADMIN:
	            case MySqlParser.RESOURCE_GROUP_ADMIN:
	            case MySqlParser.RESOURCE_GROUP_USER:
	            case MySqlParser.ROLE_ADMIN:
	            case MySqlParser.SESSION_VARIABLES_ADMIN:
	            case MySqlParser.SET_USER_ID:
	            case MySqlParser.SHOW_ROUTINE:
	            case MySqlParser.SYSTEM_VARIABLES_ADMIN:
	            case MySqlParser.TABLE_ENCRYPTION_ADMIN:
	            case MySqlParser.VERSION_TOKEN_ADMIN:
	            case MySqlParser.XA_RECOVER_ADMIN:
	            case MySqlParser.ARMSCII8:
	            case MySqlParser.ASCII:
	            case MySqlParser.BIG5:
	            case MySqlParser.CP1250:
	            case MySqlParser.CP1251:
	            case MySqlParser.CP1256:
	            case MySqlParser.CP1257:
	            case MySqlParser.CP850:
	            case MySqlParser.CP852:
	            case MySqlParser.CP866:
	            case MySqlParser.CP932:
	            case MySqlParser.DEC8:
	            case MySqlParser.EUCJPMS:
	            case MySqlParser.EUCKR:
	            case MySqlParser.GB2312:
	            case MySqlParser.GBK:
	            case MySqlParser.GEOSTD8:
	            case MySqlParser.GREEK:
	            case MySqlParser.HEBREW:
	            case MySqlParser.HP8:
	            case MySqlParser.KEYBCS2:
	            case MySqlParser.KOI8R:
	            case MySqlParser.KOI8U:
	            case MySqlParser.LATIN1:
	            case MySqlParser.LATIN2:
	            case MySqlParser.LATIN5:
	            case MySqlParser.LATIN7:
	            case MySqlParser.MACCE:
	            case MySqlParser.MACROMAN:
	            case MySqlParser.SJIS:
	            case MySqlParser.SWE7:
	            case MySqlParser.TIS620:
	            case MySqlParser.UCS2:
	            case MySqlParser.UJIS:
	            case MySqlParser.UTF16:
	            case MySqlParser.UTF16LE:
	            case MySqlParser.UTF32:
	            case MySqlParser.UTF8:
	            case MySqlParser.UTF8MB3:
	            case MySqlParser.UTF8MB4:
	            case MySqlParser.ARCHIVE:
	            case MySqlParser.BLACKHOLE:
	            case MySqlParser.CSV:
	            case MySqlParser.FEDERATED:
	            case MySqlParser.INNODB:
	            case MySqlParser.MEMORY:
	            case MySqlParser.MRG_MYISAM:
	            case MySqlParser.MYISAM:
	            case MySqlParser.NDB:
	            case MySqlParser.NDBCLUSTER:
	            case MySqlParser.PERFORMANCE_SCHEMA:
	            case MySqlParser.TOKUDB:
	            case MySqlParser.REPEATABLE:
	            case MySqlParser.COMMITTED:
	            case MySqlParser.UNCOMMITTED:
	            case MySqlParser.SERIALIZABLE:
	            case MySqlParser.GEOMETRYCOLLECTION:
	            case MySqlParser.LINESTRING:
	            case MySqlParser.MULTILINESTRING:
	            case MySqlParser.MULTIPOINT:
	            case MySqlParser.MULTIPOLYGON:
	            case MySqlParser.POINT:
	            case MySqlParser.POLYGON:
	            case MySqlParser.ABS:
	            case MySqlParser.ACOS:
	            case MySqlParser.ADDDATE:
	            case MySqlParser.ADDTIME:
	            case MySqlParser.AES_DECRYPT:
	            case MySqlParser.AES_ENCRYPT:
	            case MySqlParser.AREA:
	            case MySqlParser.ASBINARY:
	            case MySqlParser.ASIN:
	            case MySqlParser.ASTEXT:
	            case MySqlParser.ASWKB:
	            case MySqlParser.ASWKT:
	            case MySqlParser.ASYMMETRIC_DECRYPT:
	            case MySqlParser.ASYMMETRIC_DERIVE:
	            case MySqlParser.ASYMMETRIC_ENCRYPT:
	            case MySqlParser.ASYMMETRIC_SIGN:
	            case MySqlParser.ASYMMETRIC_VERIFY:
	            case MySqlParser.ATAN:
	            case MySqlParser.ATAN2:
	            case MySqlParser.BENCHMARK:
	            case MySqlParser.BIN:
	            case MySqlParser.BIT_COUNT:
	            case MySqlParser.BIT_LENGTH:
	            case MySqlParser.BUFFER:
	            case MySqlParser.CATALOG_NAME:
	            case MySqlParser.CEIL:
	            case MySqlParser.CEILING:
	            case MySqlParser.CENTROID:
	            case MySqlParser.CHARACTER_LENGTH:
	            case MySqlParser.CHARSET:
	            case MySqlParser.CHAR_LENGTH:
	            case MySqlParser.COERCIBILITY:
	            case MySqlParser.COLLATION:
	            case MySqlParser.COMPRESS:
	            case MySqlParser.CONCAT:
	            case MySqlParser.CONCAT_WS:
	            case MySqlParser.CONNECTION_ID:
	            case MySqlParser.CONV:
	            case MySqlParser.CONVERT_TZ:
	            case MySqlParser.COS:
	            case MySqlParser.COT:
	            case MySqlParser.CRC32:
	            case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
	            case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
	            case MySqlParser.CREATE_DH_PARAMETERS:
	            case MySqlParser.CREATE_DIGEST:
	            case MySqlParser.CROSSES:
	            case MySqlParser.DATEDIFF:
	            case MySqlParser.DATE_FORMAT:
	            case MySqlParser.DAYNAME:
	            case MySqlParser.DAYOFMONTH:
	            case MySqlParser.DAYOFWEEK:
	            case MySqlParser.DAYOFYEAR:
	            case MySqlParser.DECODE:
	            case MySqlParser.DEGREES:
	            case MySqlParser.DES_DECRYPT:
	            case MySqlParser.DES_ENCRYPT:
	            case MySqlParser.DIMENSION:
	            case MySqlParser.DISJOINT:
	            case MySqlParser.ELT:
	            case MySqlParser.ENCODE:
	            case MySqlParser.ENCRYPT:
	            case MySqlParser.ENDPOINT:
	            case MySqlParser.ENVELOPE:
	            case MySqlParser.EQUALS:
	            case MySqlParser.EXP:
	            case MySqlParser.EXPORT_SET:
	            case MySqlParser.EXTERIORRING:
	            case MySqlParser.EXTRACTVALUE:
	            case MySqlParser.FIELD:
	            case MySqlParser.FIND_IN_SET:
	            case MySqlParser.FLOOR:
	            case MySqlParser.FORMAT:
	            case MySqlParser.FOUND_ROWS:
	            case MySqlParser.FROM_BASE64:
	            case MySqlParser.FROM_DAYS:
	            case MySqlParser.FROM_UNIXTIME:
	            case MySqlParser.GEOMCOLLFROMTEXT:
	            case MySqlParser.GEOMCOLLFROMWKB:
	            case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
	            case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
	            case MySqlParser.GEOMETRYFROMTEXT:
	            case MySqlParser.GEOMETRYFROMWKB:
	            case MySqlParser.GEOMETRYN:
	            case MySqlParser.GEOMETRYTYPE:
	            case MySqlParser.GEOMFROMTEXT:
	            case MySqlParser.GEOMFROMWKB:
	            case MySqlParser.GET_FORMAT:
	            case MySqlParser.GET_LOCK:
	            case MySqlParser.GLENGTH:
	            case MySqlParser.GREATEST:
	            case MySqlParser.GTID_SUBSET:
	            case MySqlParser.GTID_SUBTRACT:
	            case MySqlParser.HEX:
	            case MySqlParser.IFNULL:
	            case MySqlParser.INET6_ATON:
	            case MySqlParser.INET6_NTOA:
	            case MySqlParser.INET_ATON:
	            case MySqlParser.INET_NTOA:
	            case MySqlParser.INSTR:
	            case MySqlParser.INTERIORRINGN:
	            case MySqlParser.INTERSECTS:
	            case MySqlParser.ISCLOSED:
	            case MySqlParser.ISEMPTY:
	            case MySqlParser.ISNULL:
	            case MySqlParser.ISSIMPLE:
	            case MySqlParser.IS_FREE_LOCK:
	            case MySqlParser.IS_IPV4:
	            case MySqlParser.IS_IPV4_COMPAT:
	            case MySqlParser.IS_IPV4_MAPPED:
	            case MySqlParser.IS_IPV6:
	            case MySqlParser.IS_USED_LOCK:
	            case MySqlParser.LAST_INSERT_ID:
	            case MySqlParser.LCASE:
	            case MySqlParser.LEAST:
	            case MySqlParser.LENGTH:
	            case MySqlParser.LINEFROMTEXT:
	            case MySqlParser.LINEFROMWKB:
	            case MySqlParser.LINESTRINGFROMTEXT:
	            case MySqlParser.LINESTRINGFROMWKB:
	            case MySqlParser.LN:
	            case MySqlParser.LOAD_FILE:
	            case MySqlParser.LOCATE:
	            case MySqlParser.LOG:
	            case MySqlParser.LOG10:
	            case MySqlParser.LOG2:
	            case MySqlParser.LOWER:
	            case MySqlParser.LPAD:
	            case MySqlParser.LTRIM:
	            case MySqlParser.MAKEDATE:
	            case MySqlParser.MAKETIME:
	            case MySqlParser.MAKE_SET:
	            case MySqlParser.MASTER_POS_WAIT:
	            case MySqlParser.MBRCONTAINS:
	            case MySqlParser.MBRDISJOINT:
	            case MySqlParser.MBREQUAL:
	            case MySqlParser.MBRINTERSECTS:
	            case MySqlParser.MBROVERLAPS:
	            case MySqlParser.MBRTOUCHES:
	            case MySqlParser.MBRWITHIN:
	            case MySqlParser.MD5:
	            case MySqlParser.MLINEFROMTEXT:
	            case MySqlParser.MLINEFROMWKB:
	            case MySqlParser.MONTHNAME:
	            case MySqlParser.MPOINTFROMTEXT:
	            case MySqlParser.MPOINTFROMWKB:
	            case MySqlParser.MPOLYFROMTEXT:
	            case MySqlParser.MPOLYFROMWKB:
	            case MySqlParser.MULTILINESTRINGFROMTEXT:
	            case MySqlParser.MULTILINESTRINGFROMWKB:
	            case MySqlParser.MULTIPOINTFROMTEXT:
	            case MySqlParser.MULTIPOINTFROMWKB:
	            case MySqlParser.MULTIPOLYGONFROMTEXT:
	            case MySqlParser.MULTIPOLYGONFROMWKB:
	            case MySqlParser.NAME_CONST:
	            case MySqlParser.NULLIF:
	            case MySqlParser.NUMGEOMETRIES:
	            case MySqlParser.NUMINTERIORRINGS:
	            case MySqlParser.NUMPOINTS:
	            case MySqlParser.OCT:
	            case MySqlParser.OCTET_LENGTH:
	            case MySqlParser.ORD:
	            case MySqlParser.OVERLAPS:
	            case MySqlParser.PERIOD_ADD:
	            case MySqlParser.PERIOD_DIFF:
	            case MySqlParser.PI:
	            case MySqlParser.POINTFROMTEXT:
	            case MySqlParser.POINTFROMWKB:
	            case MySqlParser.POINTN:
	            case MySqlParser.POLYFROMTEXT:
	            case MySqlParser.POLYFROMWKB:
	            case MySqlParser.POLYGONFROMTEXT:
	            case MySqlParser.POLYGONFROMWKB:
	            case MySqlParser.POW:
	            case MySqlParser.POWER:
	            case MySqlParser.QUOTE:
	            case MySqlParser.RADIANS:
	            case MySqlParser.RAND:
	            case MySqlParser.RANDOM_BYTES:
	            case MySqlParser.RELEASE_LOCK:
	            case MySqlParser.REVERSE:
	            case MySqlParser.ROUND:
	            case MySqlParser.ROW_COUNT:
	            case MySqlParser.RPAD:
	            case MySqlParser.RTRIM:
	            case MySqlParser.SEC_TO_TIME:
	            case MySqlParser.SESSION_USER:
	            case MySqlParser.SHA:
	            case MySqlParser.SHA1:
	            case MySqlParser.SHA2:
	            case MySqlParser.SCHEMA_NAME:
	            case MySqlParser.SIGN:
	            case MySqlParser.SIN:
	            case MySqlParser.SLEEP:
	            case MySqlParser.SOUNDEX:
	            case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
	            case MySqlParser.SQRT:
	            case MySqlParser.SRID:
	            case MySqlParser.STARTPOINT:
	            case MySqlParser.STRCMP:
	            case MySqlParser.STR_TO_DATE:
	            case MySqlParser.ST_AREA:
	            case MySqlParser.ST_ASBINARY:
	            case MySqlParser.ST_ASTEXT:
	            case MySqlParser.ST_ASWKB:
	            case MySqlParser.ST_ASWKT:
	            case MySqlParser.ST_BUFFER:
	            case MySqlParser.ST_CENTROID:
	            case MySqlParser.ST_CONTAINS:
	            case MySqlParser.ST_CROSSES:
	            case MySqlParser.ST_DIFFERENCE:
	            case MySqlParser.ST_DIMENSION:
	            case MySqlParser.ST_DISJOINT:
	            case MySqlParser.ST_DISTANCE:
	            case MySqlParser.ST_ENDPOINT:
	            case MySqlParser.ST_ENVELOPE:
	            case MySqlParser.ST_EQUALS:
	            case MySqlParser.ST_EXTERIORRING:
	            case MySqlParser.ST_GEOMCOLLFROMTEXT:
	            case MySqlParser.ST_GEOMCOLLFROMTXT:
	            case MySqlParser.ST_GEOMCOLLFROMWKB:
	            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
	            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
	            case MySqlParser.ST_GEOMETRYFROMTEXT:
	            case MySqlParser.ST_GEOMETRYFROMWKB:
	            case MySqlParser.ST_GEOMETRYN:
	            case MySqlParser.ST_GEOMETRYTYPE:
	            case MySqlParser.ST_GEOMFROMTEXT:
	            case MySqlParser.ST_GEOMFROMWKB:
	            case MySqlParser.ST_INTERIORRINGN:
	            case MySqlParser.ST_INTERSECTION:
	            case MySqlParser.ST_INTERSECTS:
	            case MySqlParser.ST_ISCLOSED:
	            case MySqlParser.ST_ISEMPTY:
	            case MySqlParser.ST_ISSIMPLE:
	            case MySqlParser.ST_LINEFROMTEXT:
	            case MySqlParser.ST_LINEFROMWKB:
	            case MySqlParser.ST_LINESTRINGFROMTEXT:
	            case MySqlParser.ST_LINESTRINGFROMWKB:
	            case MySqlParser.ST_NUMGEOMETRIES:
	            case MySqlParser.ST_NUMINTERIORRING:
	            case MySqlParser.ST_NUMINTERIORRINGS:
	            case MySqlParser.ST_NUMPOINTS:
	            case MySqlParser.ST_OVERLAPS:
	            case MySqlParser.ST_POINTFROMTEXT:
	            case MySqlParser.ST_POINTFROMWKB:
	            case MySqlParser.ST_POINTN:
	            case MySqlParser.ST_POLYFROMTEXT:
	            case MySqlParser.ST_POLYFROMWKB:
	            case MySqlParser.ST_POLYGONFROMTEXT:
	            case MySqlParser.ST_POLYGONFROMWKB:
	            case MySqlParser.ST_SRID:
	            case MySqlParser.ST_STARTPOINT:
	            case MySqlParser.ST_SYMDIFFERENCE:
	            case MySqlParser.ST_TOUCHES:
	            case MySqlParser.ST_UNION:
	            case MySqlParser.ST_WITHIN:
	            case MySqlParser.ST_X:
	            case MySqlParser.ST_Y:
	            case MySqlParser.SUBDATE:
	            case MySqlParser.SUBSTRING_INDEX:
	            case MySqlParser.SUBTIME:
	            case MySqlParser.SYSTEM_USER:
	            case MySqlParser.TAN:
	            case MySqlParser.TIMEDIFF:
	            case MySqlParser.TIMESTAMPADD:
	            case MySqlParser.TIMESTAMPDIFF:
	            case MySqlParser.TIME_FORMAT:
	            case MySqlParser.TIME_TO_SEC:
	            case MySqlParser.TOUCHES:
	            case MySqlParser.TO_BASE64:
	            case MySqlParser.TO_DAYS:
	            case MySqlParser.TO_SECONDS:
	            case MySqlParser.UCASE:
	            case MySqlParser.UNCOMPRESS:
	            case MySqlParser.UNCOMPRESSED_LENGTH:
	            case MySqlParser.UNHEX:
	            case MySqlParser.UNIX_TIMESTAMP:
	            case MySqlParser.UPDATEXML:
	            case MySqlParser.UPPER:
	            case MySqlParser.UUID:
	            case MySqlParser.UUID_SHORT:
	            case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
	            case MySqlParser.VERSION:
	            case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
	            case MySqlParser.WEEKDAY:
	            case MySqlParser.WEEKOFYEAR:
	            case MySqlParser.WEIGHT_STRING:
	            case MySqlParser.WITHIN:
	            case MySqlParser.YEARWEEK:
	            case MySqlParser.Y_FUNCTION:
	            case MySqlParser.X_FUNCTION:
	            case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
	            case MySqlParser.STRING_LITERAL:
	            case MySqlParser.ID:
	            case MySqlParser.REVERSE_QUOTE_ID:
	                this.state = 2550;
	                this.uidList();
	                break;
	            case MySqlParser.ALL:
	                this.state = 2551;
	                this.match(MySqlParser.ALL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2554;
	            this.match(MySqlParser.TABLESPACE);
	            break;

	        case 37:
	            localctx = new AlterByTruncatePartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 37);
	            this.state = 2555;
	            this.match(MySqlParser.TRUNCATE);
	            this.state = 2556;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2559;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.CURRENT:
	            case MySqlParser.DATABASE:
	            case MySqlParser.DIAGNOSTICS:
	            case MySqlParser.LEFT:
	            case MySqlParser.NUMBER:
	            case MySqlParser.RIGHT:
	            case MySqlParser.STACKED:
	            case MySqlParser.DATE:
	            case MySqlParser.TIME:
	            case MySqlParser.TIMESTAMP:
	            case MySqlParser.DATETIME:
	            case MySqlParser.YEAR:
	            case MySqlParser.TEXT:
	            case MySqlParser.ENUM:
	            case MySqlParser.SERIAL:
	            case MySqlParser.JSON_VALID:
	            case MySqlParser.JSON_SCHEMA_VALID:
	            case MySqlParser.AVG:
	            case MySqlParser.BIT_AND:
	            case MySqlParser.BIT_OR:
	            case MySqlParser.BIT_XOR:
	            case MySqlParser.COUNT:
	            case MySqlParser.GROUP_CONCAT:
	            case MySqlParser.MAX:
	            case MySqlParser.MIN:
	            case MySqlParser.STD:
	            case MySqlParser.STDDEV:
	            case MySqlParser.STDDEV_POP:
	            case MySqlParser.STDDEV_SAMP:
	            case MySqlParser.SUM:
	            case MySqlParser.VAR_POP:
	            case MySqlParser.VAR_SAMP:
	            case MySqlParser.VARIANCE:
	            case MySqlParser.POSITION:
	            case MySqlParser.ACCOUNT:
	            case MySqlParser.ACTION:
	            case MySqlParser.AFTER:
	            case MySqlParser.AGGREGATE:
	            case MySqlParser.ALGORITHM:
	            case MySqlParser.ANY:
	            case MySqlParser.AT:
	            case MySqlParser.AUTHORS:
	            case MySqlParser.AUTOCOMMIT:
	            case MySqlParser.AUTOEXTEND_SIZE:
	            case MySqlParser.AUTO_INCREMENT:
	            case MySqlParser.AVG_ROW_LENGTH:
	            case MySqlParser.BEGIN:
	            case MySqlParser.BINLOG:
	            case MySqlParser.BIT:
	            case MySqlParser.BLOCK:
	            case MySqlParser.BOOL:
	            case MySqlParser.BOOLEAN:
	            case MySqlParser.BTREE:
	            case MySqlParser.CACHE:
	            case MySqlParser.CASCADED:
	            case MySqlParser.CHAIN:
	            case MySqlParser.CHANGED:
	            case MySqlParser.CHANNEL:
	            case MySqlParser.CHECKSUM:
	            case MySqlParser.PAGE_CHECKSUM:
	            case MySqlParser.CIPHER:
	            case MySqlParser.CLASS_ORIGIN:
	            case MySqlParser.CLIENT:
	            case MySqlParser.CLOSE:
	            case MySqlParser.COALESCE:
	            case MySqlParser.CODE:
	            case MySqlParser.COLUMNS:
	            case MySqlParser.COLUMN_FORMAT:
	            case MySqlParser.COLUMN_NAME:
	            case MySqlParser.COMMENT:
	            case MySqlParser.COMMIT:
	            case MySqlParser.COMPACT:
	            case MySqlParser.COMPLETION:
	            case MySqlParser.COMPRESSED:
	            case MySqlParser.COMPRESSION:
	            case MySqlParser.CONCURRENT:
	            case MySqlParser.CONNECTION:
	            case MySqlParser.CONSISTENT:
	            case MySqlParser.CONSTRAINT_CATALOG:
	            case MySqlParser.CONSTRAINT_SCHEMA:
	            case MySqlParser.CONSTRAINT_NAME:
	            case MySqlParser.CONTAINS:
	            case MySqlParser.CONTEXT:
	            case MySqlParser.CONTRIBUTORS:
	            case MySqlParser.COPY:
	            case MySqlParser.CPU:
	            case MySqlParser.CURSOR_NAME:
	            case MySqlParser.DATA:
	            case MySqlParser.DATAFILE:
	            case MySqlParser.DEALLOCATE:
	            case MySqlParser.DEFAULT_AUTH:
	            case MySqlParser.DEFINER:
	            case MySqlParser.DELAY_KEY_WRITE:
	            case MySqlParser.DES_KEY_FILE:
	            case MySqlParser.DIRECTORY:
	            case MySqlParser.DISABLE:
	            case MySqlParser.DISCARD:
	            case MySqlParser.DISK:
	            case MySqlParser.DO:
	            case MySqlParser.DUMPFILE:
	            case MySqlParser.DUPLICATE:
	            case MySqlParser.DYNAMIC:
	            case MySqlParser.ENABLE:
	            case MySqlParser.ENCRYPTION:
	            case MySqlParser.END:
	            case MySqlParser.ENDS:
	            case MySqlParser.ENGINE:
	            case MySqlParser.ENGINES:
	            case MySqlParser.ERROR:
	            case MySqlParser.ERRORS:
	            case MySqlParser.ESCAPE:
	            case MySqlParser.EVEN:
	            case MySqlParser.EVENT:
	            case MySqlParser.EVENTS:
	            case MySqlParser.EVERY:
	            case MySqlParser.EXCHANGE:
	            case MySqlParser.EXCLUSIVE:
	            case MySqlParser.EXPIRE:
	            case MySqlParser.EXPORT:
	            case MySqlParser.EXTENDED:
	            case MySqlParser.EXTENT_SIZE:
	            case MySqlParser.FAST:
	            case MySqlParser.FAULTS:
	            case MySqlParser.FIELDS:
	            case MySqlParser.FILE_BLOCK_SIZE:
	            case MySqlParser.FILTER:
	            case MySqlParser.FIRST:
	            case MySqlParser.FIXED:
	            case MySqlParser.FLUSH:
	            case MySqlParser.FOLLOWS:
	            case MySqlParser.FOUND:
	            case MySqlParser.FULL:
	            case MySqlParser.FUNCTION:
	            case MySqlParser.GENERAL:
	            case MySqlParser.GLOBAL:
	            case MySqlParser.GRANTS:
	            case MySqlParser.GROUP_REPLICATION:
	            case MySqlParser.HANDLER:
	            case MySqlParser.HASH:
	            case MySqlParser.HELP:
	            case MySqlParser.HOST:
	            case MySqlParser.HOSTS:
	            case MySqlParser.IDENTIFIED:
	            case MySqlParser.IGNORE_SERVER_IDS:
	            case MySqlParser.IMPORT:
	            case MySqlParser.INDEXES:
	            case MySqlParser.INITIAL_SIZE:
	            case MySqlParser.INPLACE:
	            case MySqlParser.INSERT_METHOD:
	            case MySqlParser.INSTALL:
	            case MySqlParser.INSTANCE:
	            case MySqlParser.INVISIBLE:
	            case MySqlParser.INVOKER:
	            case MySqlParser.IO:
	            case MySqlParser.IO_THREAD:
	            case MySqlParser.IPC:
	            case MySqlParser.ISOLATION:
	            case MySqlParser.ISSUER:
	            case MySqlParser.JSON:
	            case MySqlParser.KEY_BLOCK_SIZE:
	            case MySqlParser.LANGUAGE:
	            case MySqlParser.LAST:
	            case MySqlParser.LEAVES:
	            case MySqlParser.LESS:
	            case MySqlParser.LEVEL:
	            case MySqlParser.LIST:
	            case MySqlParser.LOCAL:
	            case MySqlParser.LOGFILE:
	            case MySqlParser.LOGS:
	            case MySqlParser.MASTER:
	            case MySqlParser.MASTER_AUTO_POSITION:
	            case MySqlParser.MASTER_CONNECT_RETRY:
	            case MySqlParser.MASTER_DELAY:
	            case MySqlParser.MASTER_HEARTBEAT_PERIOD:
	            case MySqlParser.MASTER_HOST:
	            case MySqlParser.MASTER_LOG_FILE:
	            case MySqlParser.MASTER_LOG_POS:
	            case MySqlParser.MASTER_PASSWORD:
	            case MySqlParser.MASTER_PORT:
	            case MySqlParser.MASTER_RETRY_COUNT:
	            case MySqlParser.MASTER_SSL:
	            case MySqlParser.MASTER_SSL_CA:
	            case MySqlParser.MASTER_SSL_CAPATH:
	            case MySqlParser.MASTER_SSL_CERT:
	            case MySqlParser.MASTER_SSL_CIPHER:
	            case MySqlParser.MASTER_SSL_CRL:
	            case MySqlParser.MASTER_SSL_CRLPATH:
	            case MySqlParser.MASTER_SSL_KEY:
	            case MySqlParser.MASTER_TLS_VERSION:
	            case MySqlParser.MASTER_USER:
	            case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
	            case MySqlParser.MAX_QUERIES_PER_HOUR:
	            case MySqlParser.MAX_ROWS:
	            case MySqlParser.MAX_SIZE:
	            case MySqlParser.MAX_UPDATES_PER_HOUR:
	            case MySqlParser.MAX_USER_CONNECTIONS:
	            case MySqlParser.MEDIUM:
	            case MySqlParser.MEMBER:
	            case MySqlParser.MERGE:
	            case MySqlParser.MESSAGE_TEXT:
	            case MySqlParser.MID:
	            case MySqlParser.MIGRATE:
	            case MySqlParser.MIN_ROWS:
	            case MySqlParser.MODE:
	            case MySqlParser.MODIFY:
	            case MySqlParser.MUTEX:
	            case MySqlParser.MYSQL:
	            case MySqlParser.MYSQL_ERRNO:
	            case MySqlParser.NAME:
	            case MySqlParser.NAMES:
	            case MySqlParser.NCHAR:
	            case MySqlParser.NEVER:
	            case MySqlParser.NEXT:
	            case MySqlParser.NO:
	            case MySqlParser.NODEGROUP:
	            case MySqlParser.NONE:
	            case MySqlParser.OFFLINE:
	            case MySqlParser.OFFSET:
	            case MySqlParser.OF:
	            case MySqlParser.OJ:
	            case MySqlParser.OLD_PASSWORD:
	            case MySqlParser.ONE:
	            case MySqlParser.ONLINE:
	            case MySqlParser.ONLY:
	            case MySqlParser.OPEN:
	            case MySqlParser.OPTIMIZER_COSTS:
	            case MySqlParser.OPTIONS:
	            case MySqlParser.OWNER:
	            case MySqlParser.PACK_KEYS:
	            case MySqlParser.PAGE:
	            case MySqlParser.PARSER:
	            case MySqlParser.PARTIAL:
	            case MySqlParser.PARTITIONING:
	            case MySqlParser.PARTITIONS:
	            case MySqlParser.PASSWORD:
	            case MySqlParser.PHASE:
	            case MySqlParser.PLUGIN:
	            case MySqlParser.PLUGIN_DIR:
	            case MySqlParser.PLUGINS:
	            case MySqlParser.PORT:
	            case MySqlParser.PRECEDES:
	            case MySqlParser.PREPARE:
	            case MySqlParser.PRESERVE:
	            case MySqlParser.PREV:
	            case MySqlParser.PROCESSLIST:
	            case MySqlParser.PROFILE:
	            case MySqlParser.PROFILES:
	            case MySqlParser.PROXY:
	            case MySqlParser.QUERY:
	            case MySqlParser.QUICK:
	            case MySqlParser.REBUILD:
	            case MySqlParser.RECOVER:
	            case MySqlParser.REDO_BUFFER_SIZE:
	            case MySqlParser.REDUNDANT:
	            case MySqlParser.RELAY:
	            case MySqlParser.RELAY_LOG_FILE:
	            case MySqlParser.RELAY_LOG_POS:
	            case MySqlParser.RELAYLOG:
	            case MySqlParser.REMOVE:
	            case MySqlParser.REORGANIZE:
	            case MySqlParser.REPAIR:
	            case MySqlParser.REPLICATE_DO_DB:
	            case MySqlParser.REPLICATE_DO_TABLE:
	            case MySqlParser.REPLICATE_IGNORE_DB:
	            case MySqlParser.REPLICATE_IGNORE_TABLE:
	            case MySqlParser.REPLICATE_REWRITE_DB:
	            case MySqlParser.REPLICATE_WILD_DO_TABLE:
	            case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
	            case MySqlParser.REPLICATION:
	            case MySqlParser.RESET:
	            case MySqlParser.RESUME:
	            case MySqlParser.RETURNED_SQLSTATE:
	            case MySqlParser.RETURNS:
	            case MySqlParser.ROLE:
	            case MySqlParser.ROLLBACK:
	            case MySqlParser.ROLLUP:
	            case MySqlParser.ROTATE:
	            case MySqlParser.ROW:
	            case MySqlParser.ROWS:
	            case MySqlParser.ROW_FORMAT:
	            case MySqlParser.SAVEPOINT:
	            case MySqlParser.SCHEDULE:
	            case MySqlParser.SECURITY:
	            case MySqlParser.SERVER:
	            case MySqlParser.SESSION:
	            case MySqlParser.SHARE:
	            case MySqlParser.SHARED:
	            case MySqlParser.SIGNED:
	            case MySqlParser.SIMPLE:
	            case MySqlParser.SLAVE:
	            case MySqlParser.SLOW:
	            case MySqlParser.SNAPSHOT:
	            case MySqlParser.SOCKET:
	            case MySqlParser.SOME:
	            case MySqlParser.SONAME:
	            case MySqlParser.SOUNDS:
	            case MySqlParser.SOURCE:
	            case MySqlParser.SQL_AFTER_GTIDS:
	            case MySqlParser.SQL_AFTER_MTS_GAPS:
	            case MySqlParser.SQL_BEFORE_GTIDS:
	            case MySqlParser.SQL_BUFFER_RESULT:
	            case MySqlParser.SQL_CACHE:
	            case MySqlParser.SQL_NO_CACHE:
	            case MySqlParser.SQL_THREAD:
	            case MySqlParser.START:
	            case MySqlParser.STARTS:
	            case MySqlParser.STATS_AUTO_RECALC:
	            case MySqlParser.STATS_PERSISTENT:
	            case MySqlParser.STATS_SAMPLE_PAGES:
	            case MySqlParser.STATUS:
	            case MySqlParser.STOP:
	            case MySqlParser.STORAGE:
	            case MySqlParser.STRING:
	            case MySqlParser.SUBCLASS_ORIGIN:
	            case MySqlParser.SUBJECT:
	            case MySqlParser.SUBPARTITION:
	            case MySqlParser.SUBPARTITIONS:
	            case MySqlParser.SUSPEND:
	            case MySqlParser.SWAPS:
	            case MySqlParser.SWITCHES:
	            case MySqlParser.TABLE_NAME:
	            case MySqlParser.TABLESPACE:
	            case MySqlParser.TEMPORARY:
	            case MySqlParser.TEMPTABLE:
	            case MySqlParser.THAN:
	            case MySqlParser.TRADITIONAL:
	            case MySqlParser.TRANSACTION:
	            case MySqlParser.TRANSACTIONAL:
	            case MySqlParser.TRIGGERS:
	            case MySqlParser.TRUNCATE:
	            case MySqlParser.UNDEFINED:
	            case MySqlParser.UNDOFILE:
	            case MySqlParser.UNDO_BUFFER_SIZE:
	            case MySqlParser.UNINSTALL:
	            case MySqlParser.UNKNOWN:
	            case MySqlParser.UNTIL:
	            case MySqlParser.UPGRADE:
	            case MySqlParser.USER:
	            case MySqlParser.USE_FRM:
	            case MySqlParser.USER_RESOURCES:
	            case MySqlParser.VALIDATION:
	            case MySqlParser.VALUE:
	            case MySqlParser.VARIABLES:
	            case MySqlParser.VIEW:
	            case MySqlParser.VISIBLE:
	            case MySqlParser.WAIT:
	            case MySqlParser.WARNINGS:
	            case MySqlParser.WITHOUT:
	            case MySqlParser.WORK:
	            case MySqlParser.WRAPPER:
	            case MySqlParser.X509:
	            case MySqlParser.XA:
	            case MySqlParser.XML:
	            case MySqlParser.INTERNAL:
	            case MySqlParser.QUARTER:
	            case MySqlParser.MONTH:
	            case MySqlParser.DAY:
	            case MySqlParser.HOUR:
	            case MySqlParser.MINUTE:
	            case MySqlParser.WEEK:
	            case MySqlParser.SECOND:
	            case MySqlParser.MICROSECOND:
	            case MySqlParser.TABLES:
	            case MySqlParser.ROUTINE:
	            case MySqlParser.EXECUTE:
	            case MySqlParser.FILE:
	            case MySqlParser.PROCESS:
	            case MySqlParser.RELOAD:
	            case MySqlParser.SHUTDOWN:
	            case MySqlParser.SUPER:
	            case MySqlParser.PRIVILEGES:
	            case MySqlParser.AUDIT_ADMIN:
	            case MySqlParser.BACKUP_ADMIN:
	            case MySqlParser.BINLOG_ADMIN:
	            case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
	            case MySqlParser.CLONE_ADMIN:
	            case MySqlParser.CONNECTION_ADMIN:
	            case MySqlParser.ENCRYPTION_KEY_ADMIN:
	            case MySqlParser.FIREWALL_ADMIN:
	            case MySqlParser.FIREWALL_USER:
	            case MySqlParser.GROUP_REPLICATION_ADMIN:
	            case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
	            case MySqlParser.NDB_STORED_USER:
	            case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
	            case MySqlParser.REPLICATION_APPLIER:
	            case MySqlParser.REPLICATION_SLAVE_ADMIN:
	            case MySqlParser.RESOURCE_GROUP_ADMIN:
	            case MySqlParser.RESOURCE_GROUP_USER:
	            case MySqlParser.ROLE_ADMIN:
	            case MySqlParser.SESSION_VARIABLES_ADMIN:
	            case MySqlParser.SET_USER_ID:
	            case MySqlParser.SHOW_ROUTINE:
	            case MySqlParser.SYSTEM_VARIABLES_ADMIN:
	            case MySqlParser.TABLE_ENCRYPTION_ADMIN:
	            case MySqlParser.VERSION_TOKEN_ADMIN:
	            case MySqlParser.XA_RECOVER_ADMIN:
	            case MySqlParser.ARMSCII8:
	            case MySqlParser.ASCII:
	            case MySqlParser.BIG5:
	            case MySqlParser.CP1250:
	            case MySqlParser.CP1251:
	            case MySqlParser.CP1256:
	            case MySqlParser.CP1257:
	            case MySqlParser.CP850:
	            case MySqlParser.CP852:
	            case MySqlParser.CP866:
	            case MySqlParser.CP932:
	            case MySqlParser.DEC8:
	            case MySqlParser.EUCJPMS:
	            case MySqlParser.EUCKR:
	            case MySqlParser.GB2312:
	            case MySqlParser.GBK:
	            case MySqlParser.GEOSTD8:
	            case MySqlParser.GREEK:
	            case MySqlParser.HEBREW:
	            case MySqlParser.HP8:
	            case MySqlParser.KEYBCS2:
	            case MySqlParser.KOI8R:
	            case MySqlParser.KOI8U:
	            case MySqlParser.LATIN1:
	            case MySqlParser.LATIN2:
	            case MySqlParser.LATIN5:
	            case MySqlParser.LATIN7:
	            case MySqlParser.MACCE:
	            case MySqlParser.MACROMAN:
	            case MySqlParser.SJIS:
	            case MySqlParser.SWE7:
	            case MySqlParser.TIS620:
	            case MySqlParser.UCS2:
	            case MySqlParser.UJIS:
	            case MySqlParser.UTF16:
	            case MySqlParser.UTF16LE:
	            case MySqlParser.UTF32:
	            case MySqlParser.UTF8:
	            case MySqlParser.UTF8MB3:
	            case MySqlParser.UTF8MB4:
	            case MySqlParser.ARCHIVE:
	            case MySqlParser.BLACKHOLE:
	            case MySqlParser.CSV:
	            case MySqlParser.FEDERATED:
	            case MySqlParser.INNODB:
	            case MySqlParser.MEMORY:
	            case MySqlParser.MRG_MYISAM:
	            case MySqlParser.MYISAM:
	            case MySqlParser.NDB:
	            case MySqlParser.NDBCLUSTER:
	            case MySqlParser.PERFORMANCE_SCHEMA:
	            case MySqlParser.TOKUDB:
	            case MySqlParser.REPEATABLE:
	            case MySqlParser.COMMITTED:
	            case MySqlParser.UNCOMMITTED:
	            case MySqlParser.SERIALIZABLE:
	            case MySqlParser.GEOMETRYCOLLECTION:
	            case MySqlParser.LINESTRING:
	            case MySqlParser.MULTILINESTRING:
	            case MySqlParser.MULTIPOINT:
	            case MySqlParser.MULTIPOLYGON:
	            case MySqlParser.POINT:
	            case MySqlParser.POLYGON:
	            case MySqlParser.ABS:
	            case MySqlParser.ACOS:
	            case MySqlParser.ADDDATE:
	            case MySqlParser.ADDTIME:
	            case MySqlParser.AES_DECRYPT:
	            case MySqlParser.AES_ENCRYPT:
	            case MySqlParser.AREA:
	            case MySqlParser.ASBINARY:
	            case MySqlParser.ASIN:
	            case MySqlParser.ASTEXT:
	            case MySqlParser.ASWKB:
	            case MySqlParser.ASWKT:
	            case MySqlParser.ASYMMETRIC_DECRYPT:
	            case MySqlParser.ASYMMETRIC_DERIVE:
	            case MySqlParser.ASYMMETRIC_ENCRYPT:
	            case MySqlParser.ASYMMETRIC_SIGN:
	            case MySqlParser.ASYMMETRIC_VERIFY:
	            case MySqlParser.ATAN:
	            case MySqlParser.ATAN2:
	            case MySqlParser.BENCHMARK:
	            case MySqlParser.BIN:
	            case MySqlParser.BIT_COUNT:
	            case MySqlParser.BIT_LENGTH:
	            case MySqlParser.BUFFER:
	            case MySqlParser.CATALOG_NAME:
	            case MySqlParser.CEIL:
	            case MySqlParser.CEILING:
	            case MySqlParser.CENTROID:
	            case MySqlParser.CHARACTER_LENGTH:
	            case MySqlParser.CHARSET:
	            case MySqlParser.CHAR_LENGTH:
	            case MySqlParser.COERCIBILITY:
	            case MySqlParser.COLLATION:
	            case MySqlParser.COMPRESS:
	            case MySqlParser.CONCAT:
	            case MySqlParser.CONCAT_WS:
	            case MySqlParser.CONNECTION_ID:
	            case MySqlParser.CONV:
	            case MySqlParser.CONVERT_TZ:
	            case MySqlParser.COS:
	            case MySqlParser.COT:
	            case MySqlParser.CRC32:
	            case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
	            case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
	            case MySqlParser.CREATE_DH_PARAMETERS:
	            case MySqlParser.CREATE_DIGEST:
	            case MySqlParser.CROSSES:
	            case MySqlParser.DATEDIFF:
	            case MySqlParser.DATE_FORMAT:
	            case MySqlParser.DAYNAME:
	            case MySqlParser.DAYOFMONTH:
	            case MySqlParser.DAYOFWEEK:
	            case MySqlParser.DAYOFYEAR:
	            case MySqlParser.DECODE:
	            case MySqlParser.DEGREES:
	            case MySqlParser.DES_DECRYPT:
	            case MySqlParser.DES_ENCRYPT:
	            case MySqlParser.DIMENSION:
	            case MySqlParser.DISJOINT:
	            case MySqlParser.ELT:
	            case MySqlParser.ENCODE:
	            case MySqlParser.ENCRYPT:
	            case MySqlParser.ENDPOINT:
	            case MySqlParser.ENVELOPE:
	            case MySqlParser.EQUALS:
	            case MySqlParser.EXP:
	            case MySqlParser.EXPORT_SET:
	            case MySqlParser.EXTERIORRING:
	            case MySqlParser.EXTRACTVALUE:
	            case MySqlParser.FIELD:
	            case MySqlParser.FIND_IN_SET:
	            case MySqlParser.FLOOR:
	            case MySqlParser.FORMAT:
	            case MySqlParser.FOUND_ROWS:
	            case MySqlParser.FROM_BASE64:
	            case MySqlParser.FROM_DAYS:
	            case MySqlParser.FROM_UNIXTIME:
	            case MySqlParser.GEOMCOLLFROMTEXT:
	            case MySqlParser.GEOMCOLLFROMWKB:
	            case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
	            case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
	            case MySqlParser.GEOMETRYFROMTEXT:
	            case MySqlParser.GEOMETRYFROMWKB:
	            case MySqlParser.GEOMETRYN:
	            case MySqlParser.GEOMETRYTYPE:
	            case MySqlParser.GEOMFROMTEXT:
	            case MySqlParser.GEOMFROMWKB:
	            case MySqlParser.GET_FORMAT:
	            case MySqlParser.GET_LOCK:
	            case MySqlParser.GLENGTH:
	            case MySqlParser.GREATEST:
	            case MySqlParser.GTID_SUBSET:
	            case MySqlParser.GTID_SUBTRACT:
	            case MySqlParser.HEX:
	            case MySqlParser.IFNULL:
	            case MySqlParser.INET6_ATON:
	            case MySqlParser.INET6_NTOA:
	            case MySqlParser.INET_ATON:
	            case MySqlParser.INET_NTOA:
	            case MySqlParser.INSTR:
	            case MySqlParser.INTERIORRINGN:
	            case MySqlParser.INTERSECTS:
	            case MySqlParser.ISCLOSED:
	            case MySqlParser.ISEMPTY:
	            case MySqlParser.ISNULL:
	            case MySqlParser.ISSIMPLE:
	            case MySqlParser.IS_FREE_LOCK:
	            case MySqlParser.IS_IPV4:
	            case MySqlParser.IS_IPV4_COMPAT:
	            case MySqlParser.IS_IPV4_MAPPED:
	            case MySqlParser.IS_IPV6:
	            case MySqlParser.IS_USED_LOCK:
	            case MySqlParser.LAST_INSERT_ID:
	            case MySqlParser.LCASE:
	            case MySqlParser.LEAST:
	            case MySqlParser.LENGTH:
	            case MySqlParser.LINEFROMTEXT:
	            case MySqlParser.LINEFROMWKB:
	            case MySqlParser.LINESTRINGFROMTEXT:
	            case MySqlParser.LINESTRINGFROMWKB:
	            case MySqlParser.LN:
	            case MySqlParser.LOAD_FILE:
	            case MySqlParser.LOCATE:
	            case MySqlParser.LOG:
	            case MySqlParser.LOG10:
	            case MySqlParser.LOG2:
	            case MySqlParser.LOWER:
	            case MySqlParser.LPAD:
	            case MySqlParser.LTRIM:
	            case MySqlParser.MAKEDATE:
	            case MySqlParser.MAKETIME:
	            case MySqlParser.MAKE_SET:
	            case MySqlParser.MASTER_POS_WAIT:
	            case MySqlParser.MBRCONTAINS:
	            case MySqlParser.MBRDISJOINT:
	            case MySqlParser.MBREQUAL:
	            case MySqlParser.MBRINTERSECTS:
	            case MySqlParser.MBROVERLAPS:
	            case MySqlParser.MBRTOUCHES:
	            case MySqlParser.MBRWITHIN:
	            case MySqlParser.MD5:
	            case MySqlParser.MLINEFROMTEXT:
	            case MySqlParser.MLINEFROMWKB:
	            case MySqlParser.MONTHNAME:
	            case MySqlParser.MPOINTFROMTEXT:
	            case MySqlParser.MPOINTFROMWKB:
	            case MySqlParser.MPOLYFROMTEXT:
	            case MySqlParser.MPOLYFROMWKB:
	            case MySqlParser.MULTILINESTRINGFROMTEXT:
	            case MySqlParser.MULTILINESTRINGFROMWKB:
	            case MySqlParser.MULTIPOINTFROMTEXT:
	            case MySqlParser.MULTIPOINTFROMWKB:
	            case MySqlParser.MULTIPOLYGONFROMTEXT:
	            case MySqlParser.MULTIPOLYGONFROMWKB:
	            case MySqlParser.NAME_CONST:
	            case MySqlParser.NULLIF:
	            case MySqlParser.NUMGEOMETRIES:
	            case MySqlParser.NUMINTERIORRINGS:
	            case MySqlParser.NUMPOINTS:
	            case MySqlParser.OCT:
	            case MySqlParser.OCTET_LENGTH:
	            case MySqlParser.ORD:
	            case MySqlParser.OVERLAPS:
	            case MySqlParser.PERIOD_ADD:
	            case MySqlParser.PERIOD_DIFF:
	            case MySqlParser.PI:
	            case MySqlParser.POINTFROMTEXT:
	            case MySqlParser.POINTFROMWKB:
	            case MySqlParser.POINTN:
	            case MySqlParser.POLYFROMTEXT:
	            case MySqlParser.POLYFROMWKB:
	            case MySqlParser.POLYGONFROMTEXT:
	            case MySqlParser.POLYGONFROMWKB:
	            case MySqlParser.POW:
	            case MySqlParser.POWER:
	            case MySqlParser.QUOTE:
	            case MySqlParser.RADIANS:
	            case MySqlParser.RAND:
	            case MySqlParser.RANDOM_BYTES:
	            case MySqlParser.RELEASE_LOCK:
	            case MySqlParser.REVERSE:
	            case MySqlParser.ROUND:
	            case MySqlParser.ROW_COUNT:
	            case MySqlParser.RPAD:
	            case MySqlParser.RTRIM:
	            case MySqlParser.SEC_TO_TIME:
	            case MySqlParser.SESSION_USER:
	            case MySqlParser.SHA:
	            case MySqlParser.SHA1:
	            case MySqlParser.SHA2:
	            case MySqlParser.SCHEMA_NAME:
	            case MySqlParser.SIGN:
	            case MySqlParser.SIN:
	            case MySqlParser.SLEEP:
	            case MySqlParser.SOUNDEX:
	            case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
	            case MySqlParser.SQRT:
	            case MySqlParser.SRID:
	            case MySqlParser.STARTPOINT:
	            case MySqlParser.STRCMP:
	            case MySqlParser.STR_TO_DATE:
	            case MySqlParser.ST_AREA:
	            case MySqlParser.ST_ASBINARY:
	            case MySqlParser.ST_ASTEXT:
	            case MySqlParser.ST_ASWKB:
	            case MySqlParser.ST_ASWKT:
	            case MySqlParser.ST_BUFFER:
	            case MySqlParser.ST_CENTROID:
	            case MySqlParser.ST_CONTAINS:
	            case MySqlParser.ST_CROSSES:
	            case MySqlParser.ST_DIFFERENCE:
	            case MySqlParser.ST_DIMENSION:
	            case MySqlParser.ST_DISJOINT:
	            case MySqlParser.ST_DISTANCE:
	            case MySqlParser.ST_ENDPOINT:
	            case MySqlParser.ST_ENVELOPE:
	            case MySqlParser.ST_EQUALS:
	            case MySqlParser.ST_EXTERIORRING:
	            case MySqlParser.ST_GEOMCOLLFROMTEXT:
	            case MySqlParser.ST_GEOMCOLLFROMTXT:
	            case MySqlParser.ST_GEOMCOLLFROMWKB:
	            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
	            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
	            case MySqlParser.ST_GEOMETRYFROMTEXT:
	            case MySqlParser.ST_GEOMETRYFROMWKB:
	            case MySqlParser.ST_GEOMETRYN:
	            case MySqlParser.ST_GEOMETRYTYPE:
	            case MySqlParser.ST_GEOMFROMTEXT:
	            case MySqlParser.ST_GEOMFROMWKB:
	            case MySqlParser.ST_INTERIORRINGN:
	            case MySqlParser.ST_INTERSECTION:
	            case MySqlParser.ST_INTERSECTS:
	            case MySqlParser.ST_ISCLOSED:
	            case MySqlParser.ST_ISEMPTY:
	            case MySqlParser.ST_ISSIMPLE:
	            case MySqlParser.ST_LINEFROMTEXT:
	            case MySqlParser.ST_LINEFROMWKB:
	            case MySqlParser.ST_LINESTRINGFROMTEXT:
	            case MySqlParser.ST_LINESTRINGFROMWKB:
	            case MySqlParser.ST_NUMGEOMETRIES:
	            case MySqlParser.ST_NUMINTERIORRING:
	            case MySqlParser.ST_NUMINTERIORRINGS:
	            case MySqlParser.ST_NUMPOINTS:
	            case MySqlParser.ST_OVERLAPS:
	            case MySqlParser.ST_POINTFROMTEXT:
	            case MySqlParser.ST_POINTFROMWKB:
	            case MySqlParser.ST_POINTN:
	            case MySqlParser.ST_POLYFROMTEXT:
	            case MySqlParser.ST_POLYFROMWKB:
	            case MySqlParser.ST_POLYGONFROMTEXT:
	            case MySqlParser.ST_POLYGONFROMWKB:
	            case MySqlParser.ST_SRID:
	            case MySqlParser.ST_STARTPOINT:
	            case MySqlParser.ST_SYMDIFFERENCE:
	            case MySqlParser.ST_TOUCHES:
	            case MySqlParser.ST_UNION:
	            case MySqlParser.ST_WITHIN:
	            case MySqlParser.ST_X:
	            case MySqlParser.ST_Y:
	            case MySqlParser.SUBDATE:
	            case MySqlParser.SUBSTRING_INDEX:
	            case MySqlParser.SUBTIME:
	            case MySqlParser.SYSTEM_USER:
	            case MySqlParser.TAN:
	            case MySqlParser.TIMEDIFF:
	            case MySqlParser.TIMESTAMPADD:
	            case MySqlParser.TIMESTAMPDIFF:
	            case MySqlParser.TIME_FORMAT:
	            case MySqlParser.TIME_TO_SEC:
	            case MySqlParser.TOUCHES:
	            case MySqlParser.TO_BASE64:
	            case MySqlParser.TO_DAYS:
	            case MySqlParser.TO_SECONDS:
	            case MySqlParser.UCASE:
	            case MySqlParser.UNCOMPRESS:
	            case MySqlParser.UNCOMPRESSED_LENGTH:
	            case MySqlParser.UNHEX:
	            case MySqlParser.UNIX_TIMESTAMP:
	            case MySqlParser.UPDATEXML:
	            case MySqlParser.UPPER:
	            case MySqlParser.UUID:
	            case MySqlParser.UUID_SHORT:
	            case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
	            case MySqlParser.VERSION:
	            case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
	            case MySqlParser.WEEKDAY:
	            case MySqlParser.WEEKOFYEAR:
	            case MySqlParser.WEIGHT_STRING:
	            case MySqlParser.WITHIN:
	            case MySqlParser.YEARWEEK:
	            case MySqlParser.Y_FUNCTION:
	            case MySqlParser.X_FUNCTION:
	            case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
	            case MySqlParser.STRING_LITERAL:
	            case MySqlParser.ID:
	            case MySqlParser.REVERSE_QUOTE_ID:
	                this.state = 2557;
	                this.uidList();
	                break;
	            case MySqlParser.ALL:
	                this.state = 2558;
	                this.match(MySqlParser.ALL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 38:
	            localctx = new AlterByCoalescePartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 38);
	            this.state = 2561;
	            this.match(MySqlParser.COALESCE);
	            this.state = 2562;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2563;
	            this.decimalLiteral();
	            break;

	        case 39:
	            localctx = new AlterByReorganizePartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 39);
	            this.state = 2564;
	            this.match(MySqlParser.REORGANIZE);
	            this.state = 2565;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2566;
	            this.uidList();
	            this.state = 2567;
	            this.match(MySqlParser.INTO);
	            this.state = 2568;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2569;
	            this.partitionDefinition();
	            this.state = 2574;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 2570;
	                this.match(MySqlParser.COMMA);
	                this.state = 2571;
	                this.partitionDefinition();
	                this.state = 2576;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2577;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 40:
	            localctx = new AlterByExchangePartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 40);
	            this.state = 2579;
	            this.match(MySqlParser.EXCHANGE);
	            this.state = 2580;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2581;
	            this.uid();
	            this.state = 2582;
	            this.match(MySqlParser.WITH);
	            this.state = 2583;
	            this.match(MySqlParser.TABLE);
	            this.state = 2584;
	            this.tableName();
	            this.state = 2587;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.WITH || _la===MySqlParser.WITHOUT) {
	                this.state = 2585;
	                localctx.validationFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.WITH || _la===MySqlParser.WITHOUT)) {
	                    localctx.validationFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 2586;
	                this.match(MySqlParser.VALIDATION);
	            }

	            break;

	        case 41:
	            localctx = new AlterByAnalyzePartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 41);
	            this.state = 2589;
	            this.match(MySqlParser.ANALYZE);
	            this.state = 2590;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2593;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.CURRENT:
	            case MySqlParser.DATABASE:
	            case MySqlParser.DIAGNOSTICS:
	            case MySqlParser.LEFT:
	            case MySqlParser.NUMBER:
	            case MySqlParser.RIGHT:
	            case MySqlParser.STACKED:
	            case MySqlParser.DATE:
	            case MySqlParser.TIME:
	            case MySqlParser.TIMESTAMP:
	            case MySqlParser.DATETIME:
	            case MySqlParser.YEAR:
	            case MySqlParser.TEXT:
	            case MySqlParser.ENUM:
	            case MySqlParser.SERIAL:
	            case MySqlParser.JSON_VALID:
	            case MySqlParser.JSON_SCHEMA_VALID:
	            case MySqlParser.AVG:
	            case MySqlParser.BIT_AND:
	            case MySqlParser.BIT_OR:
	            case MySqlParser.BIT_XOR:
	            case MySqlParser.COUNT:
	            case MySqlParser.GROUP_CONCAT:
	            case MySqlParser.MAX:
	            case MySqlParser.MIN:
	            case MySqlParser.STD:
	            case MySqlParser.STDDEV:
	            case MySqlParser.STDDEV_POP:
	            case MySqlParser.STDDEV_SAMP:
	            case MySqlParser.SUM:
	            case MySqlParser.VAR_POP:
	            case MySqlParser.VAR_SAMP:
	            case MySqlParser.VARIANCE:
	            case MySqlParser.POSITION:
	            case MySqlParser.ACCOUNT:
	            case MySqlParser.ACTION:
	            case MySqlParser.AFTER:
	            case MySqlParser.AGGREGATE:
	            case MySqlParser.ALGORITHM:
	            case MySqlParser.ANY:
	            case MySqlParser.AT:
	            case MySqlParser.AUTHORS:
	            case MySqlParser.AUTOCOMMIT:
	            case MySqlParser.AUTOEXTEND_SIZE:
	            case MySqlParser.AUTO_INCREMENT:
	            case MySqlParser.AVG_ROW_LENGTH:
	            case MySqlParser.BEGIN:
	            case MySqlParser.BINLOG:
	            case MySqlParser.BIT:
	            case MySqlParser.BLOCK:
	            case MySqlParser.BOOL:
	            case MySqlParser.BOOLEAN:
	            case MySqlParser.BTREE:
	            case MySqlParser.CACHE:
	            case MySqlParser.CASCADED:
	            case MySqlParser.CHAIN:
	            case MySqlParser.CHANGED:
	            case MySqlParser.CHANNEL:
	            case MySqlParser.CHECKSUM:
	            case MySqlParser.PAGE_CHECKSUM:
	            case MySqlParser.CIPHER:
	            case MySqlParser.CLASS_ORIGIN:
	            case MySqlParser.CLIENT:
	            case MySqlParser.CLOSE:
	            case MySqlParser.COALESCE:
	            case MySqlParser.CODE:
	            case MySqlParser.COLUMNS:
	            case MySqlParser.COLUMN_FORMAT:
	            case MySqlParser.COLUMN_NAME:
	            case MySqlParser.COMMENT:
	            case MySqlParser.COMMIT:
	            case MySqlParser.COMPACT:
	            case MySqlParser.COMPLETION:
	            case MySqlParser.COMPRESSED:
	            case MySqlParser.COMPRESSION:
	            case MySqlParser.CONCURRENT:
	            case MySqlParser.CONNECTION:
	            case MySqlParser.CONSISTENT:
	            case MySqlParser.CONSTRAINT_CATALOG:
	            case MySqlParser.CONSTRAINT_SCHEMA:
	            case MySqlParser.CONSTRAINT_NAME:
	            case MySqlParser.CONTAINS:
	            case MySqlParser.CONTEXT:
	            case MySqlParser.CONTRIBUTORS:
	            case MySqlParser.COPY:
	            case MySqlParser.CPU:
	            case MySqlParser.CURSOR_NAME:
	            case MySqlParser.DATA:
	            case MySqlParser.DATAFILE:
	            case MySqlParser.DEALLOCATE:
	            case MySqlParser.DEFAULT_AUTH:
	            case MySqlParser.DEFINER:
	            case MySqlParser.DELAY_KEY_WRITE:
	            case MySqlParser.DES_KEY_FILE:
	            case MySqlParser.DIRECTORY:
	            case MySqlParser.DISABLE:
	            case MySqlParser.DISCARD:
	            case MySqlParser.DISK:
	            case MySqlParser.DO:
	            case MySqlParser.DUMPFILE:
	            case MySqlParser.DUPLICATE:
	            case MySqlParser.DYNAMIC:
	            case MySqlParser.ENABLE:
	            case MySqlParser.ENCRYPTION:
	            case MySqlParser.END:
	            case MySqlParser.ENDS:
	            case MySqlParser.ENGINE:
	            case MySqlParser.ENGINES:
	            case MySqlParser.ERROR:
	            case MySqlParser.ERRORS:
	            case MySqlParser.ESCAPE:
	            case MySqlParser.EVEN:
	            case MySqlParser.EVENT:
	            case MySqlParser.EVENTS:
	            case MySqlParser.EVERY:
	            case MySqlParser.EXCHANGE:
	            case MySqlParser.EXCLUSIVE:
	            case MySqlParser.EXPIRE:
	            case MySqlParser.EXPORT:
	            case MySqlParser.EXTENDED:
	            case MySqlParser.EXTENT_SIZE:
	            case MySqlParser.FAST:
	            case MySqlParser.FAULTS:
	            case MySqlParser.FIELDS:
	            case MySqlParser.FILE_BLOCK_SIZE:
	            case MySqlParser.FILTER:
	            case MySqlParser.FIRST:
	            case MySqlParser.FIXED:
	            case MySqlParser.FLUSH:
	            case MySqlParser.FOLLOWS:
	            case MySqlParser.FOUND:
	            case MySqlParser.FULL:
	            case MySqlParser.FUNCTION:
	            case MySqlParser.GENERAL:
	            case MySqlParser.GLOBAL:
	            case MySqlParser.GRANTS:
	            case MySqlParser.GROUP_REPLICATION:
	            case MySqlParser.HANDLER:
	            case MySqlParser.HASH:
	            case MySqlParser.HELP:
	            case MySqlParser.HOST:
	            case MySqlParser.HOSTS:
	            case MySqlParser.IDENTIFIED:
	            case MySqlParser.IGNORE_SERVER_IDS:
	            case MySqlParser.IMPORT:
	            case MySqlParser.INDEXES:
	            case MySqlParser.INITIAL_SIZE:
	            case MySqlParser.INPLACE:
	            case MySqlParser.INSERT_METHOD:
	            case MySqlParser.INSTALL:
	            case MySqlParser.INSTANCE:
	            case MySqlParser.INVISIBLE:
	            case MySqlParser.INVOKER:
	            case MySqlParser.IO:
	            case MySqlParser.IO_THREAD:
	            case MySqlParser.IPC:
	            case MySqlParser.ISOLATION:
	            case MySqlParser.ISSUER:
	            case MySqlParser.JSON:
	            case MySqlParser.KEY_BLOCK_SIZE:
	            case MySqlParser.LANGUAGE:
	            case MySqlParser.LAST:
	            case MySqlParser.LEAVES:
	            case MySqlParser.LESS:
	            case MySqlParser.LEVEL:
	            case MySqlParser.LIST:
	            case MySqlParser.LOCAL:
	            case MySqlParser.LOGFILE:
	            case MySqlParser.LOGS:
	            case MySqlParser.MASTER:
	            case MySqlParser.MASTER_AUTO_POSITION:
	            case MySqlParser.MASTER_CONNECT_RETRY:
	            case MySqlParser.MASTER_DELAY:
	            case MySqlParser.MASTER_HEARTBEAT_PERIOD:
	            case MySqlParser.MASTER_HOST:
	            case MySqlParser.MASTER_LOG_FILE:
	            case MySqlParser.MASTER_LOG_POS:
	            case MySqlParser.MASTER_PASSWORD:
	            case MySqlParser.MASTER_PORT:
	            case MySqlParser.MASTER_RETRY_COUNT:
	            case MySqlParser.MASTER_SSL:
	            case MySqlParser.MASTER_SSL_CA:
	            case MySqlParser.MASTER_SSL_CAPATH:
	            case MySqlParser.MASTER_SSL_CERT:
	            case MySqlParser.MASTER_SSL_CIPHER:
	            case MySqlParser.MASTER_SSL_CRL:
	            case MySqlParser.MASTER_SSL_CRLPATH:
	            case MySqlParser.MASTER_SSL_KEY:
	            case MySqlParser.MASTER_TLS_VERSION:
	            case MySqlParser.MASTER_USER:
	            case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
	            case MySqlParser.MAX_QUERIES_PER_HOUR:
	            case MySqlParser.MAX_ROWS:
	            case MySqlParser.MAX_SIZE:
	            case MySqlParser.MAX_UPDATES_PER_HOUR:
	            case MySqlParser.MAX_USER_CONNECTIONS:
	            case MySqlParser.MEDIUM:
	            case MySqlParser.MEMBER:
	            case MySqlParser.MERGE:
	            case MySqlParser.MESSAGE_TEXT:
	            case MySqlParser.MID:
	            case MySqlParser.MIGRATE:
	            case MySqlParser.MIN_ROWS:
	            case MySqlParser.MODE:
	            case MySqlParser.MODIFY:
	            case MySqlParser.MUTEX:
	            case MySqlParser.MYSQL:
	            case MySqlParser.MYSQL_ERRNO:
	            case MySqlParser.NAME:
	            case MySqlParser.NAMES:
	            case MySqlParser.NCHAR:
	            case MySqlParser.NEVER:
	            case MySqlParser.NEXT:
	            case MySqlParser.NO:
	            case MySqlParser.NODEGROUP:
	            case MySqlParser.NONE:
	            case MySqlParser.OFFLINE:
	            case MySqlParser.OFFSET:
	            case MySqlParser.OF:
	            case MySqlParser.OJ:
	            case MySqlParser.OLD_PASSWORD:
	            case MySqlParser.ONE:
	            case MySqlParser.ONLINE:
	            case MySqlParser.ONLY:
	            case MySqlParser.OPEN:
	            case MySqlParser.OPTIMIZER_COSTS:
	            case MySqlParser.OPTIONS:
	            case MySqlParser.OWNER:
	            case MySqlParser.PACK_KEYS:
	            case MySqlParser.PAGE:
	            case MySqlParser.PARSER:
	            case MySqlParser.PARTIAL:
	            case MySqlParser.PARTITIONING:
	            case MySqlParser.PARTITIONS:
	            case MySqlParser.PASSWORD:
	            case MySqlParser.PHASE:
	            case MySqlParser.PLUGIN:
	            case MySqlParser.PLUGIN_DIR:
	            case MySqlParser.PLUGINS:
	            case MySqlParser.PORT:
	            case MySqlParser.PRECEDES:
	            case MySqlParser.PREPARE:
	            case MySqlParser.PRESERVE:
	            case MySqlParser.PREV:
	            case MySqlParser.PROCESSLIST:
	            case MySqlParser.PROFILE:
	            case MySqlParser.PROFILES:
	            case MySqlParser.PROXY:
	            case MySqlParser.QUERY:
	            case MySqlParser.QUICK:
	            case MySqlParser.REBUILD:
	            case MySqlParser.RECOVER:
	            case MySqlParser.REDO_BUFFER_SIZE:
	            case MySqlParser.REDUNDANT:
	            case MySqlParser.RELAY:
	            case MySqlParser.RELAY_LOG_FILE:
	            case MySqlParser.RELAY_LOG_POS:
	            case MySqlParser.RELAYLOG:
	            case MySqlParser.REMOVE:
	            case MySqlParser.REORGANIZE:
	            case MySqlParser.REPAIR:
	            case MySqlParser.REPLICATE_DO_DB:
	            case MySqlParser.REPLICATE_DO_TABLE:
	            case MySqlParser.REPLICATE_IGNORE_DB:
	            case MySqlParser.REPLICATE_IGNORE_TABLE:
	            case MySqlParser.REPLICATE_REWRITE_DB:
	            case MySqlParser.REPLICATE_WILD_DO_TABLE:
	            case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
	            case MySqlParser.REPLICATION:
	            case MySqlParser.RESET:
	            case MySqlParser.RESUME:
	            case MySqlParser.RETURNED_SQLSTATE:
	            case MySqlParser.RETURNS:
	            case MySqlParser.ROLE:
	            case MySqlParser.ROLLBACK:
	            case MySqlParser.ROLLUP:
	            case MySqlParser.ROTATE:
	            case MySqlParser.ROW:
	            case MySqlParser.ROWS:
	            case MySqlParser.ROW_FORMAT:
	            case MySqlParser.SAVEPOINT:
	            case MySqlParser.SCHEDULE:
	            case MySqlParser.SECURITY:
	            case MySqlParser.SERVER:
	            case MySqlParser.SESSION:
	            case MySqlParser.SHARE:
	            case MySqlParser.SHARED:
	            case MySqlParser.SIGNED:
	            case MySqlParser.SIMPLE:
	            case MySqlParser.SLAVE:
	            case MySqlParser.SLOW:
	            case MySqlParser.SNAPSHOT:
	            case MySqlParser.SOCKET:
	            case MySqlParser.SOME:
	            case MySqlParser.SONAME:
	            case MySqlParser.SOUNDS:
	            case MySqlParser.SOURCE:
	            case MySqlParser.SQL_AFTER_GTIDS:
	            case MySqlParser.SQL_AFTER_MTS_GAPS:
	            case MySqlParser.SQL_BEFORE_GTIDS:
	            case MySqlParser.SQL_BUFFER_RESULT:
	            case MySqlParser.SQL_CACHE:
	            case MySqlParser.SQL_NO_CACHE:
	            case MySqlParser.SQL_THREAD:
	            case MySqlParser.START:
	            case MySqlParser.STARTS:
	            case MySqlParser.STATS_AUTO_RECALC:
	            case MySqlParser.STATS_PERSISTENT:
	            case MySqlParser.STATS_SAMPLE_PAGES:
	            case MySqlParser.STATUS:
	            case MySqlParser.STOP:
	            case MySqlParser.STORAGE:
	            case MySqlParser.STRING:
	            case MySqlParser.SUBCLASS_ORIGIN:
	            case MySqlParser.SUBJECT:
	            case MySqlParser.SUBPARTITION:
	            case MySqlParser.SUBPARTITIONS:
	            case MySqlParser.SUSPEND:
	            case MySqlParser.SWAPS:
	            case MySqlParser.SWITCHES:
	            case MySqlParser.TABLE_NAME:
	            case MySqlParser.TABLESPACE:
	            case MySqlParser.TEMPORARY:
	            case MySqlParser.TEMPTABLE:
	            case MySqlParser.THAN:
	            case MySqlParser.TRADITIONAL:
	            case MySqlParser.TRANSACTION:
	            case MySqlParser.TRANSACTIONAL:
	            case MySqlParser.TRIGGERS:
	            case MySqlParser.TRUNCATE:
	            case MySqlParser.UNDEFINED:
	            case MySqlParser.UNDOFILE:
	            case MySqlParser.UNDO_BUFFER_SIZE:
	            case MySqlParser.UNINSTALL:
	            case MySqlParser.UNKNOWN:
	            case MySqlParser.UNTIL:
	            case MySqlParser.UPGRADE:
	            case MySqlParser.USER:
	            case MySqlParser.USE_FRM:
	            case MySqlParser.USER_RESOURCES:
	            case MySqlParser.VALIDATION:
	            case MySqlParser.VALUE:
	            case MySqlParser.VARIABLES:
	            case MySqlParser.VIEW:
	            case MySqlParser.VISIBLE:
	            case MySqlParser.WAIT:
	            case MySqlParser.WARNINGS:
	            case MySqlParser.WITHOUT:
	            case MySqlParser.WORK:
	            case MySqlParser.WRAPPER:
	            case MySqlParser.X509:
	            case MySqlParser.XA:
	            case MySqlParser.XML:
	            case MySqlParser.INTERNAL:
	            case MySqlParser.QUARTER:
	            case MySqlParser.MONTH:
	            case MySqlParser.DAY:
	            case MySqlParser.HOUR:
	            case MySqlParser.MINUTE:
	            case MySqlParser.WEEK:
	            case MySqlParser.SECOND:
	            case MySqlParser.MICROSECOND:
	            case MySqlParser.TABLES:
	            case MySqlParser.ROUTINE:
	            case MySqlParser.EXECUTE:
	            case MySqlParser.FILE:
	            case MySqlParser.PROCESS:
	            case MySqlParser.RELOAD:
	            case MySqlParser.SHUTDOWN:
	            case MySqlParser.SUPER:
	            case MySqlParser.PRIVILEGES:
	            case MySqlParser.AUDIT_ADMIN:
	            case MySqlParser.BACKUP_ADMIN:
	            case MySqlParser.BINLOG_ADMIN:
	            case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
	            case MySqlParser.CLONE_ADMIN:
	            case MySqlParser.CONNECTION_ADMIN:
	            case MySqlParser.ENCRYPTION_KEY_ADMIN:
	            case MySqlParser.FIREWALL_ADMIN:
	            case MySqlParser.FIREWALL_USER:
	            case MySqlParser.GROUP_REPLICATION_ADMIN:
	            case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
	            case MySqlParser.NDB_STORED_USER:
	            case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
	            case MySqlParser.REPLICATION_APPLIER:
	            case MySqlParser.REPLICATION_SLAVE_ADMIN:
	            case MySqlParser.RESOURCE_GROUP_ADMIN:
	            case MySqlParser.RESOURCE_GROUP_USER:
	            case MySqlParser.ROLE_ADMIN:
	            case MySqlParser.SESSION_VARIABLES_ADMIN:
	            case MySqlParser.SET_USER_ID:
	            case MySqlParser.SHOW_ROUTINE:
	            case MySqlParser.SYSTEM_VARIABLES_ADMIN:
	            case MySqlParser.TABLE_ENCRYPTION_ADMIN:
	            case MySqlParser.VERSION_TOKEN_ADMIN:
	            case MySqlParser.XA_RECOVER_ADMIN:
	            case MySqlParser.ARMSCII8:
	            case MySqlParser.ASCII:
	            case MySqlParser.BIG5:
	            case MySqlParser.CP1250:
	            case MySqlParser.CP1251:
	            case MySqlParser.CP1256:
	            case MySqlParser.CP1257:
	            case MySqlParser.CP850:
	            case MySqlParser.CP852:
	            case MySqlParser.CP866:
	            case MySqlParser.CP932:
	            case MySqlParser.DEC8:
	            case MySqlParser.EUCJPMS:
	            case MySqlParser.EUCKR:
	            case MySqlParser.GB2312:
	            case MySqlParser.GBK:
	            case MySqlParser.GEOSTD8:
	            case MySqlParser.GREEK:
	            case MySqlParser.HEBREW:
	            case MySqlParser.HP8:
	            case MySqlParser.KEYBCS2:
	            case MySqlParser.KOI8R:
	            case MySqlParser.KOI8U:
	            case MySqlParser.LATIN1:
	            case MySqlParser.LATIN2:
	            case MySqlParser.LATIN5:
	            case MySqlParser.LATIN7:
	            case MySqlParser.MACCE:
	            case MySqlParser.MACROMAN:
	            case MySqlParser.SJIS:
	            case MySqlParser.SWE7:
	            case MySqlParser.TIS620:
	            case MySqlParser.UCS2:
	            case MySqlParser.UJIS:
	            case MySqlParser.UTF16:
	            case MySqlParser.UTF16LE:
	            case MySqlParser.UTF32:
	            case MySqlParser.UTF8:
	            case MySqlParser.UTF8MB3:
	            case MySqlParser.UTF8MB4:
	            case MySqlParser.ARCHIVE:
	            case MySqlParser.BLACKHOLE:
	            case MySqlParser.CSV:
	            case MySqlParser.FEDERATED:
	            case MySqlParser.INNODB:
	            case MySqlParser.MEMORY:
	            case MySqlParser.MRG_MYISAM:
	            case MySqlParser.MYISAM:
	            case MySqlParser.NDB:
	            case MySqlParser.NDBCLUSTER:
	            case MySqlParser.PERFORMANCE_SCHEMA:
	            case MySqlParser.TOKUDB:
	            case MySqlParser.REPEATABLE:
	            case MySqlParser.COMMITTED:
	            case MySqlParser.UNCOMMITTED:
	            case MySqlParser.SERIALIZABLE:
	            case MySqlParser.GEOMETRYCOLLECTION:
	            case MySqlParser.LINESTRING:
	            case MySqlParser.MULTILINESTRING:
	            case MySqlParser.MULTIPOINT:
	            case MySqlParser.MULTIPOLYGON:
	            case MySqlParser.POINT:
	            case MySqlParser.POLYGON:
	            case MySqlParser.ABS:
	            case MySqlParser.ACOS:
	            case MySqlParser.ADDDATE:
	            case MySqlParser.ADDTIME:
	            case MySqlParser.AES_DECRYPT:
	            case MySqlParser.AES_ENCRYPT:
	            case MySqlParser.AREA:
	            case MySqlParser.ASBINARY:
	            case MySqlParser.ASIN:
	            case MySqlParser.ASTEXT:
	            case MySqlParser.ASWKB:
	            case MySqlParser.ASWKT:
	            case MySqlParser.ASYMMETRIC_DECRYPT:
	            case MySqlParser.ASYMMETRIC_DERIVE:
	            case MySqlParser.ASYMMETRIC_ENCRYPT:
	            case MySqlParser.ASYMMETRIC_SIGN:
	            case MySqlParser.ASYMMETRIC_VERIFY:
	            case MySqlParser.ATAN:
	            case MySqlParser.ATAN2:
	            case MySqlParser.BENCHMARK:
	            case MySqlParser.BIN:
	            case MySqlParser.BIT_COUNT:
	            case MySqlParser.BIT_LENGTH:
	            case MySqlParser.BUFFER:
	            case MySqlParser.CATALOG_NAME:
	            case MySqlParser.CEIL:
	            case MySqlParser.CEILING:
	            case MySqlParser.CENTROID:
	            case MySqlParser.CHARACTER_LENGTH:
	            case MySqlParser.CHARSET:
	            case MySqlParser.CHAR_LENGTH:
	            case MySqlParser.COERCIBILITY:
	            case MySqlParser.COLLATION:
	            case MySqlParser.COMPRESS:
	            case MySqlParser.CONCAT:
	            case MySqlParser.CONCAT_WS:
	            case MySqlParser.CONNECTION_ID:
	            case MySqlParser.CONV:
	            case MySqlParser.CONVERT_TZ:
	            case MySqlParser.COS:
	            case MySqlParser.COT:
	            case MySqlParser.CRC32:
	            case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
	            case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
	            case MySqlParser.CREATE_DH_PARAMETERS:
	            case MySqlParser.CREATE_DIGEST:
	            case MySqlParser.CROSSES:
	            case MySqlParser.DATEDIFF:
	            case MySqlParser.DATE_FORMAT:
	            case MySqlParser.DAYNAME:
	            case MySqlParser.DAYOFMONTH:
	            case MySqlParser.DAYOFWEEK:
	            case MySqlParser.DAYOFYEAR:
	            case MySqlParser.DECODE:
	            case MySqlParser.DEGREES:
	            case MySqlParser.DES_DECRYPT:
	            case MySqlParser.DES_ENCRYPT:
	            case MySqlParser.DIMENSION:
	            case MySqlParser.DISJOINT:
	            case MySqlParser.ELT:
	            case MySqlParser.ENCODE:
	            case MySqlParser.ENCRYPT:
	            case MySqlParser.ENDPOINT:
	            case MySqlParser.ENVELOPE:
	            case MySqlParser.EQUALS:
	            case MySqlParser.EXP:
	            case MySqlParser.EXPORT_SET:
	            case MySqlParser.EXTERIORRING:
	            case MySqlParser.EXTRACTVALUE:
	            case MySqlParser.FIELD:
	            case MySqlParser.FIND_IN_SET:
	            case MySqlParser.FLOOR:
	            case MySqlParser.FORMAT:
	            case MySqlParser.FOUND_ROWS:
	            case MySqlParser.FROM_BASE64:
	            case MySqlParser.FROM_DAYS:
	            case MySqlParser.FROM_UNIXTIME:
	            case MySqlParser.GEOMCOLLFROMTEXT:
	            case MySqlParser.GEOMCOLLFROMWKB:
	            case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
	            case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
	            case MySqlParser.GEOMETRYFROMTEXT:
	            case MySqlParser.GEOMETRYFROMWKB:
	            case MySqlParser.GEOMETRYN:
	            case MySqlParser.GEOMETRYTYPE:
	            case MySqlParser.GEOMFROMTEXT:
	            case MySqlParser.GEOMFROMWKB:
	            case MySqlParser.GET_FORMAT:
	            case MySqlParser.GET_LOCK:
	            case MySqlParser.GLENGTH:
	            case MySqlParser.GREATEST:
	            case MySqlParser.GTID_SUBSET:
	            case MySqlParser.GTID_SUBTRACT:
	            case MySqlParser.HEX:
	            case MySqlParser.IFNULL:
	            case MySqlParser.INET6_ATON:
	            case MySqlParser.INET6_NTOA:
	            case MySqlParser.INET_ATON:
	            case MySqlParser.INET_NTOA:
	            case MySqlParser.INSTR:
	            case MySqlParser.INTERIORRINGN:
	            case MySqlParser.INTERSECTS:
	            case MySqlParser.ISCLOSED:
	            case MySqlParser.ISEMPTY:
	            case MySqlParser.ISNULL:
	            case MySqlParser.ISSIMPLE:
	            case MySqlParser.IS_FREE_LOCK:
	            case MySqlParser.IS_IPV4:
	            case MySqlParser.IS_IPV4_COMPAT:
	            case MySqlParser.IS_IPV4_MAPPED:
	            case MySqlParser.IS_IPV6:
	            case MySqlParser.IS_USED_LOCK:
	            case MySqlParser.LAST_INSERT_ID:
	            case MySqlParser.LCASE:
	            case MySqlParser.LEAST:
	            case MySqlParser.LENGTH:
	            case MySqlParser.LINEFROMTEXT:
	            case MySqlParser.LINEFROMWKB:
	            case MySqlParser.LINESTRINGFROMTEXT:
	            case MySqlParser.LINESTRINGFROMWKB:
	            case MySqlParser.LN:
	            case MySqlParser.LOAD_FILE:
	            case MySqlParser.LOCATE:
	            case MySqlParser.LOG:
	            case MySqlParser.LOG10:
	            case MySqlParser.LOG2:
	            case MySqlParser.LOWER:
	            case MySqlParser.LPAD:
	            case MySqlParser.LTRIM:
	            case MySqlParser.MAKEDATE:
	            case MySqlParser.MAKETIME:
	            case MySqlParser.MAKE_SET:
	            case MySqlParser.MASTER_POS_WAIT:
	            case MySqlParser.MBRCONTAINS:
	            case MySqlParser.MBRDISJOINT:
	            case MySqlParser.MBREQUAL:
	            case MySqlParser.MBRINTERSECTS:
	            case MySqlParser.MBROVERLAPS:
	            case MySqlParser.MBRTOUCHES:
	            case MySqlParser.MBRWITHIN:
	            case MySqlParser.MD5:
	            case MySqlParser.MLINEFROMTEXT:
	            case MySqlParser.MLINEFROMWKB:
	            case MySqlParser.MONTHNAME:
	            case MySqlParser.MPOINTFROMTEXT:
	            case MySqlParser.MPOINTFROMWKB:
	            case MySqlParser.MPOLYFROMTEXT:
	            case MySqlParser.MPOLYFROMWKB:
	            case MySqlParser.MULTILINESTRINGFROMTEXT:
	            case MySqlParser.MULTILINESTRINGFROMWKB:
	            case MySqlParser.MULTIPOINTFROMTEXT:
	            case MySqlParser.MULTIPOINTFROMWKB:
	            case MySqlParser.MULTIPOLYGONFROMTEXT:
	            case MySqlParser.MULTIPOLYGONFROMWKB:
	            case MySqlParser.NAME_CONST:
	            case MySqlParser.NULLIF:
	            case MySqlParser.NUMGEOMETRIES:
	            case MySqlParser.NUMINTERIORRINGS:
	            case MySqlParser.NUMPOINTS:
	            case MySqlParser.OCT:
	            case MySqlParser.OCTET_LENGTH:
	            case MySqlParser.ORD:
	            case MySqlParser.OVERLAPS:
	            case MySqlParser.PERIOD_ADD:
	            case MySqlParser.PERIOD_DIFF:
	            case MySqlParser.PI:
	            case MySqlParser.POINTFROMTEXT:
	            case MySqlParser.POINTFROMWKB:
	            case MySqlParser.POINTN:
	            case MySqlParser.POLYFROMTEXT:
	            case MySqlParser.POLYFROMWKB:
	            case MySqlParser.POLYGONFROMTEXT:
	            case MySqlParser.POLYGONFROMWKB:
	            case MySqlParser.POW:
	            case MySqlParser.POWER:
	            case MySqlParser.QUOTE:
	            case MySqlParser.RADIANS:
	            case MySqlParser.RAND:
	            case MySqlParser.RANDOM_BYTES:
	            case MySqlParser.RELEASE_LOCK:
	            case MySqlParser.REVERSE:
	            case MySqlParser.ROUND:
	            case MySqlParser.ROW_COUNT:
	            case MySqlParser.RPAD:
	            case MySqlParser.RTRIM:
	            case MySqlParser.SEC_TO_TIME:
	            case MySqlParser.SESSION_USER:
	            case MySqlParser.SHA:
	            case MySqlParser.SHA1:
	            case MySqlParser.SHA2:
	            case MySqlParser.SCHEMA_NAME:
	            case MySqlParser.SIGN:
	            case MySqlParser.SIN:
	            case MySqlParser.SLEEP:
	            case MySqlParser.SOUNDEX:
	            case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
	            case MySqlParser.SQRT:
	            case MySqlParser.SRID:
	            case MySqlParser.STARTPOINT:
	            case MySqlParser.STRCMP:
	            case MySqlParser.STR_TO_DATE:
	            case MySqlParser.ST_AREA:
	            case MySqlParser.ST_ASBINARY:
	            case MySqlParser.ST_ASTEXT:
	            case MySqlParser.ST_ASWKB:
	            case MySqlParser.ST_ASWKT:
	            case MySqlParser.ST_BUFFER:
	            case MySqlParser.ST_CENTROID:
	            case MySqlParser.ST_CONTAINS:
	            case MySqlParser.ST_CROSSES:
	            case MySqlParser.ST_DIFFERENCE:
	            case MySqlParser.ST_DIMENSION:
	            case MySqlParser.ST_DISJOINT:
	            case MySqlParser.ST_DISTANCE:
	            case MySqlParser.ST_ENDPOINT:
	            case MySqlParser.ST_ENVELOPE:
	            case MySqlParser.ST_EQUALS:
	            case MySqlParser.ST_EXTERIORRING:
	            case MySqlParser.ST_GEOMCOLLFROMTEXT:
	            case MySqlParser.ST_GEOMCOLLFROMTXT:
	            case MySqlParser.ST_GEOMCOLLFROMWKB:
	            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
	            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
	            case MySqlParser.ST_GEOMETRYFROMTEXT:
	            case MySqlParser.ST_GEOMETRYFROMWKB:
	            case MySqlParser.ST_GEOMETRYN:
	            case MySqlParser.ST_GEOMETRYTYPE:
	            case MySqlParser.ST_GEOMFROMTEXT:
	            case MySqlParser.ST_GEOMFROMWKB:
	            case MySqlParser.ST_INTERIORRINGN:
	            case MySqlParser.ST_INTERSECTION:
	            case MySqlParser.ST_INTERSECTS:
	            case MySqlParser.ST_ISCLOSED:
	            case MySqlParser.ST_ISEMPTY:
	            case MySqlParser.ST_ISSIMPLE:
	            case MySqlParser.ST_LINEFROMTEXT:
	            case MySqlParser.ST_LINEFROMWKB:
	            case MySqlParser.ST_LINESTRINGFROMTEXT:
	            case MySqlParser.ST_LINESTRINGFROMWKB:
	            case MySqlParser.ST_NUMGEOMETRIES:
	            case MySqlParser.ST_NUMINTERIORRING:
	            case MySqlParser.ST_NUMINTERIORRINGS:
	            case MySqlParser.ST_NUMPOINTS:
	            case MySqlParser.ST_OVERLAPS:
	            case MySqlParser.ST_POINTFROMTEXT:
	            case MySqlParser.ST_POINTFROMWKB:
	            case MySqlParser.ST_POINTN:
	            case MySqlParser.ST_POLYFROMTEXT:
	            case MySqlParser.ST_POLYFROMWKB:
	            case MySqlParser.ST_POLYGONFROMTEXT:
	            case MySqlParser.ST_POLYGONFROMWKB:
	            case MySqlParser.ST_SRID:
	            case MySqlParser.ST_STARTPOINT:
	            case MySqlParser.ST_SYMDIFFERENCE:
	            case MySqlParser.ST_TOUCHES:
	            case MySqlParser.ST_UNION:
	            case MySqlParser.ST_WITHIN:
	            case MySqlParser.ST_X:
	            case MySqlParser.ST_Y:
	            case MySqlParser.SUBDATE:
	            case MySqlParser.SUBSTRING_INDEX:
	            case MySqlParser.SUBTIME:
	            case MySqlParser.SYSTEM_USER:
	            case MySqlParser.TAN:
	            case MySqlParser.TIMEDIFF:
	            case MySqlParser.TIMESTAMPADD:
	            case MySqlParser.TIMESTAMPDIFF:
	            case MySqlParser.TIME_FORMAT:
	            case MySqlParser.TIME_TO_SEC:
	            case MySqlParser.TOUCHES:
	            case MySqlParser.TO_BASE64:
	            case MySqlParser.TO_DAYS:
	            case MySqlParser.TO_SECONDS:
	            case MySqlParser.UCASE:
	            case MySqlParser.UNCOMPRESS:
	            case MySqlParser.UNCOMPRESSED_LENGTH:
	            case MySqlParser.UNHEX:
	            case MySqlParser.UNIX_TIMESTAMP:
	            case MySqlParser.UPDATEXML:
	            case MySqlParser.UPPER:
	            case MySqlParser.UUID:
	            case MySqlParser.UUID_SHORT:
	            case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
	            case MySqlParser.VERSION:
	            case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
	            case MySqlParser.WEEKDAY:
	            case MySqlParser.WEEKOFYEAR:
	            case MySqlParser.WEIGHT_STRING:
	            case MySqlParser.WITHIN:
	            case MySqlParser.YEARWEEK:
	            case MySqlParser.Y_FUNCTION:
	            case MySqlParser.X_FUNCTION:
	            case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
	            case MySqlParser.STRING_LITERAL:
	            case MySqlParser.ID:
	            case MySqlParser.REVERSE_QUOTE_ID:
	                this.state = 2591;
	                this.uidList();
	                break;
	            case MySqlParser.ALL:
	                this.state = 2592;
	                this.match(MySqlParser.ALL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 42:
	            localctx = new AlterByCheckPartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 42);
	            this.state = 2595;
	            this.match(MySqlParser.CHECK);
	            this.state = 2596;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2599;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.CURRENT:
	            case MySqlParser.DATABASE:
	            case MySqlParser.DIAGNOSTICS:
	            case MySqlParser.LEFT:
	            case MySqlParser.NUMBER:
	            case MySqlParser.RIGHT:
	            case MySqlParser.STACKED:
	            case MySqlParser.DATE:
	            case MySqlParser.TIME:
	            case MySqlParser.TIMESTAMP:
	            case MySqlParser.DATETIME:
	            case MySqlParser.YEAR:
	            case MySqlParser.TEXT:
	            case MySqlParser.ENUM:
	            case MySqlParser.SERIAL:
	            case MySqlParser.JSON_VALID:
	            case MySqlParser.JSON_SCHEMA_VALID:
	            case MySqlParser.AVG:
	            case MySqlParser.BIT_AND:
	            case MySqlParser.BIT_OR:
	            case MySqlParser.BIT_XOR:
	            case MySqlParser.COUNT:
	            case MySqlParser.GROUP_CONCAT:
	            case MySqlParser.MAX:
	            case MySqlParser.MIN:
	            case MySqlParser.STD:
	            case MySqlParser.STDDEV:
	            case MySqlParser.STDDEV_POP:
	            case MySqlParser.STDDEV_SAMP:
	            case MySqlParser.SUM:
	            case MySqlParser.VAR_POP:
	            case MySqlParser.VAR_SAMP:
	            case MySqlParser.VARIANCE:
	            case MySqlParser.POSITION:
	            case MySqlParser.ACCOUNT:
	            case MySqlParser.ACTION:
	            case MySqlParser.AFTER:
	            case MySqlParser.AGGREGATE:
	            case MySqlParser.ALGORITHM:
	            case MySqlParser.ANY:
	            case MySqlParser.AT:
	            case MySqlParser.AUTHORS:
	            case MySqlParser.AUTOCOMMIT:
	            case MySqlParser.AUTOEXTEND_SIZE:
	            case MySqlParser.AUTO_INCREMENT:
	            case MySqlParser.AVG_ROW_LENGTH:
	            case MySqlParser.BEGIN:
	            case MySqlParser.BINLOG:
	            case MySqlParser.BIT:
	            case MySqlParser.BLOCK:
	            case MySqlParser.BOOL:
	            case MySqlParser.BOOLEAN:
	            case MySqlParser.BTREE:
	            case MySqlParser.CACHE:
	            case MySqlParser.CASCADED:
	            case MySqlParser.CHAIN:
	            case MySqlParser.CHANGED:
	            case MySqlParser.CHANNEL:
	            case MySqlParser.CHECKSUM:
	            case MySqlParser.PAGE_CHECKSUM:
	            case MySqlParser.CIPHER:
	            case MySqlParser.CLASS_ORIGIN:
	            case MySqlParser.CLIENT:
	            case MySqlParser.CLOSE:
	            case MySqlParser.COALESCE:
	            case MySqlParser.CODE:
	            case MySqlParser.COLUMNS:
	            case MySqlParser.COLUMN_FORMAT:
	            case MySqlParser.COLUMN_NAME:
	            case MySqlParser.COMMENT:
	            case MySqlParser.COMMIT:
	            case MySqlParser.COMPACT:
	            case MySqlParser.COMPLETION:
	            case MySqlParser.COMPRESSED:
	            case MySqlParser.COMPRESSION:
	            case MySqlParser.CONCURRENT:
	            case MySqlParser.CONNECTION:
	            case MySqlParser.CONSISTENT:
	            case MySqlParser.CONSTRAINT_CATALOG:
	            case MySqlParser.CONSTRAINT_SCHEMA:
	            case MySqlParser.CONSTRAINT_NAME:
	            case MySqlParser.CONTAINS:
	            case MySqlParser.CONTEXT:
	            case MySqlParser.CONTRIBUTORS:
	            case MySqlParser.COPY:
	            case MySqlParser.CPU:
	            case MySqlParser.CURSOR_NAME:
	            case MySqlParser.DATA:
	            case MySqlParser.DATAFILE:
	            case MySqlParser.DEALLOCATE:
	            case MySqlParser.DEFAULT_AUTH:
	            case MySqlParser.DEFINER:
	            case MySqlParser.DELAY_KEY_WRITE:
	            case MySqlParser.DES_KEY_FILE:
	            case MySqlParser.DIRECTORY:
	            case MySqlParser.DISABLE:
	            case MySqlParser.DISCARD:
	            case MySqlParser.DISK:
	            case MySqlParser.DO:
	            case MySqlParser.DUMPFILE:
	            case MySqlParser.DUPLICATE:
	            case MySqlParser.DYNAMIC:
	            case MySqlParser.ENABLE:
	            case MySqlParser.ENCRYPTION:
	            case MySqlParser.END:
	            case MySqlParser.ENDS:
	            case MySqlParser.ENGINE:
	            case MySqlParser.ENGINES:
	            case MySqlParser.ERROR:
	            case MySqlParser.ERRORS:
	            case MySqlParser.ESCAPE:
	            case MySqlParser.EVEN:
	            case MySqlParser.EVENT:
	            case MySqlParser.EVENTS:
	            case MySqlParser.EVERY:
	            case MySqlParser.EXCHANGE:
	            case MySqlParser.EXCLUSIVE:
	            case MySqlParser.EXPIRE:
	            case MySqlParser.EXPORT:
	            case MySqlParser.EXTENDED:
	            case MySqlParser.EXTENT_SIZE:
	            case MySqlParser.FAST:
	            case MySqlParser.FAULTS:
	            case MySqlParser.FIELDS:
	            case MySqlParser.FILE_BLOCK_SIZE:
	            case MySqlParser.FILTER:
	            case MySqlParser.FIRST:
	            case MySqlParser.FIXED:
	            case MySqlParser.FLUSH:
	            case MySqlParser.FOLLOWS:
	            case MySqlParser.FOUND:
	            case MySqlParser.FULL:
	            case MySqlParser.FUNCTION:
	            case MySqlParser.GENERAL:
	            case MySqlParser.GLOBAL:
	            case MySqlParser.GRANTS:
	            case MySqlParser.GROUP_REPLICATION:
	            case MySqlParser.HANDLER:
	            case MySqlParser.HASH:
	            case MySqlParser.HELP:
	            case MySqlParser.HOST:
	            case MySqlParser.HOSTS:
	            case MySqlParser.IDENTIFIED:
	            case MySqlParser.IGNORE_SERVER_IDS:
	            case MySqlParser.IMPORT:
	            case MySqlParser.INDEXES:
	            case MySqlParser.INITIAL_SIZE:
	            case MySqlParser.INPLACE:
	            case MySqlParser.INSERT_METHOD:
	            case MySqlParser.INSTALL:
	            case MySqlParser.INSTANCE:
	            case MySqlParser.INVISIBLE:
	            case MySqlParser.INVOKER:
	            case MySqlParser.IO:
	            case MySqlParser.IO_THREAD:
	            case MySqlParser.IPC:
	            case MySqlParser.ISOLATION:
	            case MySqlParser.ISSUER:
	            case MySqlParser.JSON:
	            case MySqlParser.KEY_BLOCK_SIZE:
	            case MySqlParser.LANGUAGE:
	            case MySqlParser.LAST:
	            case MySqlParser.LEAVES:
	            case MySqlParser.LESS:
	            case MySqlParser.LEVEL:
	            case MySqlParser.LIST:
	            case MySqlParser.LOCAL:
	            case MySqlParser.LOGFILE:
	            case MySqlParser.LOGS:
	            case MySqlParser.MASTER:
	            case MySqlParser.MASTER_AUTO_POSITION:
	            case MySqlParser.MASTER_CONNECT_RETRY:
	            case MySqlParser.MASTER_DELAY:
	            case MySqlParser.MASTER_HEARTBEAT_PERIOD:
	            case MySqlParser.MASTER_HOST:
	            case MySqlParser.MASTER_LOG_FILE:
	            case MySqlParser.MASTER_LOG_POS:
	            case MySqlParser.MASTER_PASSWORD:
	            case MySqlParser.MASTER_PORT:
	            case MySqlParser.MASTER_RETRY_COUNT:
	            case MySqlParser.MASTER_SSL:
	            case MySqlParser.MASTER_SSL_CA:
	            case MySqlParser.MASTER_SSL_CAPATH:
	            case MySqlParser.MASTER_SSL_CERT:
	            case MySqlParser.MASTER_SSL_CIPHER:
	            case MySqlParser.MASTER_SSL_CRL:
	            case MySqlParser.MASTER_SSL_CRLPATH:
	            case MySqlParser.MASTER_SSL_KEY:
	            case MySqlParser.MASTER_TLS_VERSION:
	            case MySqlParser.MASTER_USER:
	            case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
	            case MySqlParser.MAX_QUERIES_PER_HOUR:
	            case MySqlParser.MAX_ROWS:
	            case MySqlParser.MAX_SIZE:
	            case MySqlParser.MAX_UPDATES_PER_HOUR:
	            case MySqlParser.MAX_USER_CONNECTIONS:
	            case MySqlParser.MEDIUM:
	            case MySqlParser.MEMBER:
	            case MySqlParser.MERGE:
	            case MySqlParser.MESSAGE_TEXT:
	            case MySqlParser.MID:
	            case MySqlParser.MIGRATE:
	            case MySqlParser.MIN_ROWS:
	            case MySqlParser.MODE:
	            case MySqlParser.MODIFY:
	            case MySqlParser.MUTEX:
	            case MySqlParser.MYSQL:
	            case MySqlParser.MYSQL_ERRNO:
	            case MySqlParser.NAME:
	            case MySqlParser.NAMES:
	            case MySqlParser.NCHAR:
	            case MySqlParser.NEVER:
	            case MySqlParser.NEXT:
	            case MySqlParser.NO:
	            case MySqlParser.NODEGROUP:
	            case MySqlParser.NONE:
	            case MySqlParser.OFFLINE:
	            case MySqlParser.OFFSET:
	            case MySqlParser.OF:
	            case MySqlParser.OJ:
	            case MySqlParser.OLD_PASSWORD:
	            case MySqlParser.ONE:
	            case MySqlParser.ONLINE:
	            case MySqlParser.ONLY:
	            case MySqlParser.OPEN:
	            case MySqlParser.OPTIMIZER_COSTS:
	            case MySqlParser.OPTIONS:
	            case MySqlParser.OWNER:
	            case MySqlParser.PACK_KEYS:
	            case MySqlParser.PAGE:
	            case MySqlParser.PARSER:
	            case MySqlParser.PARTIAL:
	            case MySqlParser.PARTITIONING:
	            case MySqlParser.PARTITIONS:
	            case MySqlParser.PASSWORD:
	            case MySqlParser.PHASE:
	            case MySqlParser.PLUGIN:
	            case MySqlParser.PLUGIN_DIR:
	            case MySqlParser.PLUGINS:
	            case MySqlParser.PORT:
	            case MySqlParser.PRECEDES:
	            case MySqlParser.PREPARE:
	            case MySqlParser.PRESERVE:
	            case MySqlParser.PREV:
	            case MySqlParser.PROCESSLIST:
	            case MySqlParser.PROFILE:
	            case MySqlParser.PROFILES:
	            case MySqlParser.PROXY:
	            case MySqlParser.QUERY:
	            case MySqlParser.QUICK:
	            case MySqlParser.REBUILD:
	            case MySqlParser.RECOVER:
	            case MySqlParser.REDO_BUFFER_SIZE:
	            case MySqlParser.REDUNDANT:
	            case MySqlParser.RELAY:
	            case MySqlParser.RELAY_LOG_FILE:
	            case MySqlParser.RELAY_LOG_POS:
	            case MySqlParser.RELAYLOG:
	            case MySqlParser.REMOVE:
	            case MySqlParser.REORGANIZE:
	            case MySqlParser.REPAIR:
	            case MySqlParser.REPLICATE_DO_DB:
	            case MySqlParser.REPLICATE_DO_TABLE:
	            case MySqlParser.REPLICATE_IGNORE_DB:
	            case MySqlParser.REPLICATE_IGNORE_TABLE:
	            case MySqlParser.REPLICATE_REWRITE_DB:
	            case MySqlParser.REPLICATE_WILD_DO_TABLE:
	            case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
	            case MySqlParser.REPLICATION:
	            case MySqlParser.RESET:
	            case MySqlParser.RESUME:
	            case MySqlParser.RETURNED_SQLSTATE:
	            case MySqlParser.RETURNS:
	            case MySqlParser.ROLE:
	            case MySqlParser.ROLLBACK:
	            case MySqlParser.ROLLUP:
	            case MySqlParser.ROTATE:
	            case MySqlParser.ROW:
	            case MySqlParser.ROWS:
	            case MySqlParser.ROW_FORMAT:
	            case MySqlParser.SAVEPOINT:
	            case MySqlParser.SCHEDULE:
	            case MySqlParser.SECURITY:
	            case MySqlParser.SERVER:
	            case MySqlParser.SESSION:
	            case MySqlParser.SHARE:
	            case MySqlParser.SHARED:
	            case MySqlParser.SIGNED:
	            case MySqlParser.SIMPLE:
	            case MySqlParser.SLAVE:
	            case MySqlParser.SLOW:
	            case MySqlParser.SNAPSHOT:
	            case MySqlParser.SOCKET:
	            case MySqlParser.SOME:
	            case MySqlParser.SONAME:
	            case MySqlParser.SOUNDS:
	            case MySqlParser.SOURCE:
	            case MySqlParser.SQL_AFTER_GTIDS:
	            case MySqlParser.SQL_AFTER_MTS_GAPS:
	            case MySqlParser.SQL_BEFORE_GTIDS:
	            case MySqlParser.SQL_BUFFER_RESULT:
	            case MySqlParser.SQL_CACHE:
	            case MySqlParser.SQL_NO_CACHE:
	            case MySqlParser.SQL_THREAD:
	            case MySqlParser.START:
	            case MySqlParser.STARTS:
	            case MySqlParser.STATS_AUTO_RECALC:
	            case MySqlParser.STATS_PERSISTENT:
	            case MySqlParser.STATS_SAMPLE_PAGES:
	            case MySqlParser.STATUS:
	            case MySqlParser.STOP:
	            case MySqlParser.STORAGE:
	            case MySqlParser.STRING:
	            case MySqlParser.SUBCLASS_ORIGIN:
	            case MySqlParser.SUBJECT:
	            case MySqlParser.SUBPARTITION:
	            case MySqlParser.SUBPARTITIONS:
	            case MySqlParser.SUSPEND:
	            case MySqlParser.SWAPS:
	            case MySqlParser.SWITCHES:
	            case MySqlParser.TABLE_NAME:
	            case MySqlParser.TABLESPACE:
	            case MySqlParser.TEMPORARY:
	            case MySqlParser.TEMPTABLE:
	            case MySqlParser.THAN:
	            case MySqlParser.TRADITIONAL:
	            case MySqlParser.TRANSACTION:
	            case MySqlParser.TRANSACTIONAL:
	            case MySqlParser.TRIGGERS:
	            case MySqlParser.TRUNCATE:
	            case MySqlParser.UNDEFINED:
	            case MySqlParser.UNDOFILE:
	            case MySqlParser.UNDO_BUFFER_SIZE:
	            case MySqlParser.UNINSTALL:
	            case MySqlParser.UNKNOWN:
	            case MySqlParser.UNTIL:
	            case MySqlParser.UPGRADE:
	            case MySqlParser.USER:
	            case MySqlParser.USE_FRM:
	            case MySqlParser.USER_RESOURCES:
	            case MySqlParser.VALIDATION:
	            case MySqlParser.VALUE:
	            case MySqlParser.VARIABLES:
	            case MySqlParser.VIEW:
	            case MySqlParser.VISIBLE:
	            case MySqlParser.WAIT:
	            case MySqlParser.WARNINGS:
	            case MySqlParser.WITHOUT:
	            case MySqlParser.WORK:
	            case MySqlParser.WRAPPER:
	            case MySqlParser.X509:
	            case MySqlParser.XA:
	            case MySqlParser.XML:
	            case MySqlParser.INTERNAL:
	            case MySqlParser.QUARTER:
	            case MySqlParser.MONTH:
	            case MySqlParser.DAY:
	            case MySqlParser.HOUR:
	            case MySqlParser.MINUTE:
	            case MySqlParser.WEEK:
	            case MySqlParser.SECOND:
	            case MySqlParser.MICROSECOND:
	            case MySqlParser.TABLES:
	            case MySqlParser.ROUTINE:
	            case MySqlParser.EXECUTE:
	            case MySqlParser.FILE:
	            case MySqlParser.PROCESS:
	            case MySqlParser.RELOAD:
	            case MySqlParser.SHUTDOWN:
	            case MySqlParser.SUPER:
	            case MySqlParser.PRIVILEGES:
	            case MySqlParser.AUDIT_ADMIN:
	            case MySqlParser.BACKUP_ADMIN:
	            case MySqlParser.BINLOG_ADMIN:
	            case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
	            case MySqlParser.CLONE_ADMIN:
	            case MySqlParser.CONNECTION_ADMIN:
	            case MySqlParser.ENCRYPTION_KEY_ADMIN:
	            case MySqlParser.FIREWALL_ADMIN:
	            case MySqlParser.FIREWALL_USER:
	            case MySqlParser.GROUP_REPLICATION_ADMIN:
	            case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
	            case MySqlParser.NDB_STORED_USER:
	            case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
	            case MySqlParser.REPLICATION_APPLIER:
	            case MySqlParser.REPLICATION_SLAVE_ADMIN:
	            case MySqlParser.RESOURCE_GROUP_ADMIN:
	            case MySqlParser.RESOURCE_GROUP_USER:
	            case MySqlParser.ROLE_ADMIN:
	            case MySqlParser.SESSION_VARIABLES_ADMIN:
	            case MySqlParser.SET_USER_ID:
	            case MySqlParser.SHOW_ROUTINE:
	            case MySqlParser.SYSTEM_VARIABLES_ADMIN:
	            case MySqlParser.TABLE_ENCRYPTION_ADMIN:
	            case MySqlParser.VERSION_TOKEN_ADMIN:
	            case MySqlParser.XA_RECOVER_ADMIN:
	            case MySqlParser.ARMSCII8:
	            case MySqlParser.ASCII:
	            case MySqlParser.BIG5:
	            case MySqlParser.CP1250:
	            case MySqlParser.CP1251:
	            case MySqlParser.CP1256:
	            case MySqlParser.CP1257:
	            case MySqlParser.CP850:
	            case MySqlParser.CP852:
	            case MySqlParser.CP866:
	            case MySqlParser.CP932:
	            case MySqlParser.DEC8:
	            case MySqlParser.EUCJPMS:
	            case MySqlParser.EUCKR:
	            case MySqlParser.GB2312:
	            case MySqlParser.GBK:
	            case MySqlParser.GEOSTD8:
	            case MySqlParser.GREEK:
	            case MySqlParser.HEBREW:
	            case MySqlParser.HP8:
	            case MySqlParser.KEYBCS2:
	            case MySqlParser.KOI8R:
	            case MySqlParser.KOI8U:
	            case MySqlParser.LATIN1:
	            case MySqlParser.LATIN2:
	            case MySqlParser.LATIN5:
	            case MySqlParser.LATIN7:
	            case MySqlParser.MACCE:
	            case MySqlParser.MACROMAN:
	            case MySqlParser.SJIS:
	            case MySqlParser.SWE7:
	            case MySqlParser.TIS620:
	            case MySqlParser.UCS2:
	            case MySqlParser.UJIS:
	            case MySqlParser.UTF16:
	            case MySqlParser.UTF16LE:
	            case MySqlParser.UTF32:
	            case MySqlParser.UTF8:
	            case MySqlParser.UTF8MB3:
	            case MySqlParser.UTF8MB4:
	            case MySqlParser.ARCHIVE:
	            case MySqlParser.BLACKHOLE:
	            case MySqlParser.CSV:
	            case MySqlParser.FEDERATED:
	            case MySqlParser.INNODB:
	            case MySqlParser.MEMORY:
	            case MySqlParser.MRG_MYISAM:
	            case MySqlParser.MYISAM:
	            case MySqlParser.NDB:
	            case MySqlParser.NDBCLUSTER:
	            case MySqlParser.PERFORMANCE_SCHEMA:
	            case MySqlParser.TOKUDB:
	            case MySqlParser.REPEATABLE:
	            case MySqlParser.COMMITTED:
	            case MySqlParser.UNCOMMITTED:
	            case MySqlParser.SERIALIZABLE:
	            case MySqlParser.GEOMETRYCOLLECTION:
	            case MySqlParser.LINESTRING:
	            case MySqlParser.MULTILINESTRING:
	            case MySqlParser.MULTIPOINT:
	            case MySqlParser.MULTIPOLYGON:
	            case MySqlParser.POINT:
	            case MySqlParser.POLYGON:
	            case MySqlParser.ABS:
	            case MySqlParser.ACOS:
	            case MySqlParser.ADDDATE:
	            case MySqlParser.ADDTIME:
	            case MySqlParser.AES_DECRYPT:
	            case MySqlParser.AES_ENCRYPT:
	            case MySqlParser.AREA:
	            case MySqlParser.ASBINARY:
	            case MySqlParser.ASIN:
	            case MySqlParser.ASTEXT:
	            case MySqlParser.ASWKB:
	            case MySqlParser.ASWKT:
	            case MySqlParser.ASYMMETRIC_DECRYPT:
	            case MySqlParser.ASYMMETRIC_DERIVE:
	            case MySqlParser.ASYMMETRIC_ENCRYPT:
	            case MySqlParser.ASYMMETRIC_SIGN:
	            case MySqlParser.ASYMMETRIC_VERIFY:
	            case MySqlParser.ATAN:
	            case MySqlParser.ATAN2:
	            case MySqlParser.BENCHMARK:
	            case MySqlParser.BIN:
	            case MySqlParser.BIT_COUNT:
	            case MySqlParser.BIT_LENGTH:
	            case MySqlParser.BUFFER:
	            case MySqlParser.CATALOG_NAME:
	            case MySqlParser.CEIL:
	            case MySqlParser.CEILING:
	            case MySqlParser.CENTROID:
	            case MySqlParser.CHARACTER_LENGTH:
	            case MySqlParser.CHARSET:
	            case MySqlParser.CHAR_LENGTH:
	            case MySqlParser.COERCIBILITY:
	            case MySqlParser.COLLATION:
	            case MySqlParser.COMPRESS:
	            case MySqlParser.CONCAT:
	            case MySqlParser.CONCAT_WS:
	            case MySqlParser.CONNECTION_ID:
	            case MySqlParser.CONV:
	            case MySqlParser.CONVERT_TZ:
	            case MySqlParser.COS:
	            case MySqlParser.COT:
	            case MySqlParser.CRC32:
	            case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
	            case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
	            case MySqlParser.CREATE_DH_PARAMETERS:
	            case MySqlParser.CREATE_DIGEST:
	            case MySqlParser.CROSSES:
	            case MySqlParser.DATEDIFF:
	            case MySqlParser.DATE_FORMAT:
	            case MySqlParser.DAYNAME:
	            case MySqlParser.DAYOFMONTH:
	            case MySqlParser.DAYOFWEEK:
	            case MySqlParser.DAYOFYEAR:
	            case MySqlParser.DECODE:
	            case MySqlParser.DEGREES:
	            case MySqlParser.DES_DECRYPT:
	            case MySqlParser.DES_ENCRYPT:
	            case MySqlParser.DIMENSION:
	            case MySqlParser.DISJOINT:
	            case MySqlParser.ELT:
	            case MySqlParser.ENCODE:
	            case MySqlParser.ENCRYPT:
	            case MySqlParser.ENDPOINT:
	            case MySqlParser.ENVELOPE:
	            case MySqlParser.EQUALS:
	            case MySqlParser.EXP:
	            case MySqlParser.EXPORT_SET:
	            case MySqlParser.EXTERIORRING:
	            case MySqlParser.EXTRACTVALUE:
	            case MySqlParser.FIELD:
	            case MySqlParser.FIND_IN_SET:
	            case MySqlParser.FLOOR:
	            case MySqlParser.FORMAT:
	            case MySqlParser.FOUND_ROWS:
	            case MySqlParser.FROM_BASE64:
	            case MySqlParser.FROM_DAYS:
	            case MySqlParser.FROM_UNIXTIME:
	            case MySqlParser.GEOMCOLLFROMTEXT:
	            case MySqlParser.GEOMCOLLFROMWKB:
	            case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
	            case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
	            case MySqlParser.GEOMETRYFROMTEXT:
	            case MySqlParser.GEOMETRYFROMWKB:
	            case MySqlParser.GEOMETRYN:
	            case MySqlParser.GEOMETRYTYPE:
	            case MySqlParser.GEOMFROMTEXT:
	            case MySqlParser.GEOMFROMWKB:
	            case MySqlParser.GET_FORMAT:
	            case MySqlParser.GET_LOCK:
	            case MySqlParser.GLENGTH:
	            case MySqlParser.GREATEST:
	            case MySqlParser.GTID_SUBSET:
	            case MySqlParser.GTID_SUBTRACT:
	            case MySqlParser.HEX:
	            case MySqlParser.IFNULL:
	            case MySqlParser.INET6_ATON:
	            case MySqlParser.INET6_NTOA:
	            case MySqlParser.INET_ATON:
	            case MySqlParser.INET_NTOA:
	            case MySqlParser.INSTR:
	            case MySqlParser.INTERIORRINGN:
	            case MySqlParser.INTERSECTS:
	            case MySqlParser.ISCLOSED:
	            case MySqlParser.ISEMPTY:
	            case MySqlParser.ISNULL:
	            case MySqlParser.ISSIMPLE:
	            case MySqlParser.IS_FREE_LOCK:
	            case MySqlParser.IS_IPV4:
	            case MySqlParser.IS_IPV4_COMPAT:
	            case MySqlParser.IS_IPV4_MAPPED:
	            case MySqlParser.IS_IPV6:
	            case MySqlParser.IS_USED_LOCK:
	            case MySqlParser.LAST_INSERT_ID:
	            case MySqlParser.LCASE:
	            case MySqlParser.LEAST:
	            case MySqlParser.LENGTH:
	            case MySqlParser.LINEFROMTEXT:
	            case MySqlParser.LINEFROMWKB:
	            case MySqlParser.LINESTRINGFROMTEXT:
	            case MySqlParser.LINESTRINGFROMWKB:
	            case MySqlParser.LN:
	            case MySqlParser.LOAD_FILE:
	            case MySqlParser.LOCATE:
	            case MySqlParser.LOG:
	            case MySqlParser.LOG10:
	            case MySqlParser.LOG2:
	            case MySqlParser.LOWER:
	            case MySqlParser.LPAD:
	            case MySqlParser.LTRIM:
	            case MySqlParser.MAKEDATE:
	            case MySqlParser.MAKETIME:
	            case MySqlParser.MAKE_SET:
	            case MySqlParser.MASTER_POS_WAIT:
	            case MySqlParser.MBRCONTAINS:
	            case MySqlParser.MBRDISJOINT:
	            case MySqlParser.MBREQUAL:
	            case MySqlParser.MBRINTERSECTS:
	            case MySqlParser.MBROVERLAPS:
	            case MySqlParser.MBRTOUCHES:
	            case MySqlParser.MBRWITHIN:
	            case MySqlParser.MD5:
	            case MySqlParser.MLINEFROMTEXT:
	            case MySqlParser.MLINEFROMWKB:
	            case MySqlParser.MONTHNAME:
	            case MySqlParser.MPOINTFROMTEXT:
	            case MySqlParser.MPOINTFROMWKB:
	            case MySqlParser.MPOLYFROMTEXT:
	            case MySqlParser.MPOLYFROMWKB:
	            case MySqlParser.MULTILINESTRINGFROMTEXT:
	            case MySqlParser.MULTILINESTRINGFROMWKB:
	            case MySqlParser.MULTIPOINTFROMTEXT:
	            case MySqlParser.MULTIPOINTFROMWKB:
	            case MySqlParser.MULTIPOLYGONFROMTEXT:
	            case MySqlParser.MULTIPOLYGONFROMWKB:
	            case MySqlParser.NAME_CONST:
	            case MySqlParser.NULLIF:
	            case MySqlParser.NUMGEOMETRIES:
	            case MySqlParser.NUMINTERIORRINGS:
	            case MySqlParser.NUMPOINTS:
	            case MySqlParser.OCT:
	            case MySqlParser.OCTET_LENGTH:
	            case MySqlParser.ORD:
	            case MySqlParser.OVERLAPS:
	            case MySqlParser.PERIOD_ADD:
	            case MySqlParser.PERIOD_DIFF:
	            case MySqlParser.PI:
	            case MySqlParser.POINTFROMTEXT:
	            case MySqlParser.POINTFROMWKB:
	            case MySqlParser.POINTN:
	            case MySqlParser.POLYFROMTEXT:
	            case MySqlParser.POLYFROMWKB:
	            case MySqlParser.POLYGONFROMTEXT:
	            case MySqlParser.POLYGONFROMWKB:
	            case MySqlParser.POW:
	            case MySqlParser.POWER:
	            case MySqlParser.QUOTE:
	            case MySqlParser.RADIANS:
	            case MySqlParser.RAND:
	            case MySqlParser.RANDOM_BYTES:
	            case MySqlParser.RELEASE_LOCK:
	            case MySqlParser.REVERSE:
	            case MySqlParser.ROUND:
	            case MySqlParser.ROW_COUNT:
	            case MySqlParser.RPAD:
	            case MySqlParser.RTRIM:
	            case MySqlParser.SEC_TO_TIME:
	            case MySqlParser.SESSION_USER:
	            case MySqlParser.SHA:
	            case MySqlParser.SHA1:
	            case MySqlParser.SHA2:
	            case MySqlParser.SCHEMA_NAME:
	            case MySqlParser.SIGN:
	            case MySqlParser.SIN:
	            case MySqlParser.SLEEP:
	            case MySqlParser.SOUNDEX:
	            case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
	            case MySqlParser.SQRT:
	            case MySqlParser.SRID:
	            case MySqlParser.STARTPOINT:
	            case MySqlParser.STRCMP:
	            case MySqlParser.STR_TO_DATE:
	            case MySqlParser.ST_AREA:
	            case MySqlParser.ST_ASBINARY:
	            case MySqlParser.ST_ASTEXT:
	            case MySqlParser.ST_ASWKB:
	            case MySqlParser.ST_ASWKT:
	            case MySqlParser.ST_BUFFER:
	            case MySqlParser.ST_CENTROID:
	            case MySqlParser.ST_CONTAINS:
	            case MySqlParser.ST_CROSSES:
	            case MySqlParser.ST_DIFFERENCE:
	            case MySqlParser.ST_DIMENSION:
	            case MySqlParser.ST_DISJOINT:
	            case MySqlParser.ST_DISTANCE:
	            case MySqlParser.ST_ENDPOINT:
	            case MySqlParser.ST_ENVELOPE:
	            case MySqlParser.ST_EQUALS:
	            case MySqlParser.ST_EXTERIORRING:
	            case MySqlParser.ST_GEOMCOLLFROMTEXT:
	            case MySqlParser.ST_GEOMCOLLFROMTXT:
	            case MySqlParser.ST_GEOMCOLLFROMWKB:
	            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
	            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
	            case MySqlParser.ST_GEOMETRYFROMTEXT:
	            case MySqlParser.ST_GEOMETRYFROMWKB:
	            case MySqlParser.ST_GEOMETRYN:
	            case MySqlParser.ST_GEOMETRYTYPE:
	            case MySqlParser.ST_GEOMFROMTEXT:
	            case MySqlParser.ST_GEOMFROMWKB:
	            case MySqlParser.ST_INTERIORRINGN:
	            case MySqlParser.ST_INTERSECTION:
	            case MySqlParser.ST_INTERSECTS:
	            case MySqlParser.ST_ISCLOSED:
	            case MySqlParser.ST_ISEMPTY:
	            case MySqlParser.ST_ISSIMPLE:
	            case MySqlParser.ST_LINEFROMTEXT:
	            case MySqlParser.ST_LINEFROMWKB:
	            case MySqlParser.ST_LINESTRINGFROMTEXT:
	            case MySqlParser.ST_LINESTRINGFROMWKB:
	            case MySqlParser.ST_NUMGEOMETRIES:
	            case MySqlParser.ST_NUMINTERIORRING:
	            case MySqlParser.ST_NUMINTERIORRINGS:
	            case MySqlParser.ST_NUMPOINTS:
	            case MySqlParser.ST_OVERLAPS:
	            case MySqlParser.ST_POINTFROMTEXT:
	            case MySqlParser.ST_POINTFROMWKB:
	            case MySqlParser.ST_POINTN:
	            case MySqlParser.ST_POLYFROMTEXT:
	            case MySqlParser.ST_POLYFROMWKB:
	            case MySqlParser.ST_POLYGONFROMTEXT:
	            case MySqlParser.ST_POLYGONFROMWKB:
	            case MySqlParser.ST_SRID:
	            case MySqlParser.ST_STARTPOINT:
	            case MySqlParser.ST_SYMDIFFERENCE:
	            case MySqlParser.ST_TOUCHES:
	            case MySqlParser.ST_UNION:
	            case MySqlParser.ST_WITHIN:
	            case MySqlParser.ST_X:
	            case MySqlParser.ST_Y:
	            case MySqlParser.SUBDATE:
	            case MySqlParser.SUBSTRING_INDEX:
	            case MySqlParser.SUBTIME:
	            case MySqlParser.SYSTEM_USER:
	            case MySqlParser.TAN:
	            case MySqlParser.TIMEDIFF:
	            case MySqlParser.TIMESTAMPADD:
	            case MySqlParser.TIMESTAMPDIFF:
	            case MySqlParser.TIME_FORMAT:
	            case MySqlParser.TIME_TO_SEC:
	            case MySqlParser.TOUCHES:
	            case MySqlParser.TO_BASE64:
	            case MySqlParser.TO_DAYS:
	            case MySqlParser.TO_SECONDS:
	            case MySqlParser.UCASE:
	            case MySqlParser.UNCOMPRESS:
	            case MySqlParser.UNCOMPRESSED_LENGTH:
	            case MySqlParser.UNHEX:
	            case MySqlParser.UNIX_TIMESTAMP:
	            case MySqlParser.UPDATEXML:
	            case MySqlParser.UPPER:
	            case MySqlParser.UUID:
	            case MySqlParser.UUID_SHORT:
	            case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
	            case MySqlParser.VERSION:
	            case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
	            case MySqlParser.WEEKDAY:
	            case MySqlParser.WEEKOFYEAR:
	            case MySqlParser.WEIGHT_STRING:
	            case MySqlParser.WITHIN:
	            case MySqlParser.YEARWEEK:
	            case MySqlParser.Y_FUNCTION:
	            case MySqlParser.X_FUNCTION:
	            case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
	            case MySqlParser.STRING_LITERAL:
	            case MySqlParser.ID:
	            case MySqlParser.REVERSE_QUOTE_ID:
	                this.state = 2597;
	                this.uidList();
	                break;
	            case MySqlParser.ALL:
	                this.state = 2598;
	                this.match(MySqlParser.ALL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 43:
	            localctx = new AlterByOptimizePartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 43);
	            this.state = 2601;
	            this.match(MySqlParser.OPTIMIZE);
	            this.state = 2602;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2605;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.CURRENT:
	            case MySqlParser.DATABASE:
	            case MySqlParser.DIAGNOSTICS:
	            case MySqlParser.LEFT:
	            case MySqlParser.NUMBER:
	            case MySqlParser.RIGHT:
	            case MySqlParser.STACKED:
	            case MySqlParser.DATE:
	            case MySqlParser.TIME:
	            case MySqlParser.TIMESTAMP:
	            case MySqlParser.DATETIME:
	            case MySqlParser.YEAR:
	            case MySqlParser.TEXT:
	            case MySqlParser.ENUM:
	            case MySqlParser.SERIAL:
	            case MySqlParser.JSON_VALID:
	            case MySqlParser.JSON_SCHEMA_VALID:
	            case MySqlParser.AVG:
	            case MySqlParser.BIT_AND:
	            case MySqlParser.BIT_OR:
	            case MySqlParser.BIT_XOR:
	            case MySqlParser.COUNT:
	            case MySqlParser.GROUP_CONCAT:
	            case MySqlParser.MAX:
	            case MySqlParser.MIN:
	            case MySqlParser.STD:
	            case MySqlParser.STDDEV:
	            case MySqlParser.STDDEV_POP:
	            case MySqlParser.STDDEV_SAMP:
	            case MySqlParser.SUM:
	            case MySqlParser.VAR_POP:
	            case MySqlParser.VAR_SAMP:
	            case MySqlParser.VARIANCE:
	            case MySqlParser.POSITION:
	            case MySqlParser.ACCOUNT:
	            case MySqlParser.ACTION:
	            case MySqlParser.AFTER:
	            case MySqlParser.AGGREGATE:
	            case MySqlParser.ALGORITHM:
	            case MySqlParser.ANY:
	            case MySqlParser.AT:
	            case MySqlParser.AUTHORS:
	            case MySqlParser.AUTOCOMMIT:
	            case MySqlParser.AUTOEXTEND_SIZE:
	            case MySqlParser.AUTO_INCREMENT:
	            case MySqlParser.AVG_ROW_LENGTH:
	            case MySqlParser.BEGIN:
	            case MySqlParser.BINLOG:
	            case MySqlParser.BIT:
	            case MySqlParser.BLOCK:
	            case MySqlParser.BOOL:
	            case MySqlParser.BOOLEAN:
	            case MySqlParser.BTREE:
	            case MySqlParser.CACHE:
	            case MySqlParser.CASCADED:
	            case MySqlParser.CHAIN:
	            case MySqlParser.CHANGED:
	            case MySqlParser.CHANNEL:
	            case MySqlParser.CHECKSUM:
	            case MySqlParser.PAGE_CHECKSUM:
	            case MySqlParser.CIPHER:
	            case MySqlParser.CLASS_ORIGIN:
	            case MySqlParser.CLIENT:
	            case MySqlParser.CLOSE:
	            case MySqlParser.COALESCE:
	            case MySqlParser.CODE:
	            case MySqlParser.COLUMNS:
	            case MySqlParser.COLUMN_FORMAT:
	            case MySqlParser.COLUMN_NAME:
	            case MySqlParser.COMMENT:
	            case MySqlParser.COMMIT:
	            case MySqlParser.COMPACT:
	            case MySqlParser.COMPLETION:
	            case MySqlParser.COMPRESSED:
	            case MySqlParser.COMPRESSION:
	            case MySqlParser.CONCURRENT:
	            case MySqlParser.CONNECTION:
	            case MySqlParser.CONSISTENT:
	            case MySqlParser.CONSTRAINT_CATALOG:
	            case MySqlParser.CONSTRAINT_SCHEMA:
	            case MySqlParser.CONSTRAINT_NAME:
	            case MySqlParser.CONTAINS:
	            case MySqlParser.CONTEXT:
	            case MySqlParser.CONTRIBUTORS:
	            case MySqlParser.COPY:
	            case MySqlParser.CPU:
	            case MySqlParser.CURSOR_NAME:
	            case MySqlParser.DATA:
	            case MySqlParser.DATAFILE:
	            case MySqlParser.DEALLOCATE:
	            case MySqlParser.DEFAULT_AUTH:
	            case MySqlParser.DEFINER:
	            case MySqlParser.DELAY_KEY_WRITE:
	            case MySqlParser.DES_KEY_FILE:
	            case MySqlParser.DIRECTORY:
	            case MySqlParser.DISABLE:
	            case MySqlParser.DISCARD:
	            case MySqlParser.DISK:
	            case MySqlParser.DO:
	            case MySqlParser.DUMPFILE:
	            case MySqlParser.DUPLICATE:
	            case MySqlParser.DYNAMIC:
	            case MySqlParser.ENABLE:
	            case MySqlParser.ENCRYPTION:
	            case MySqlParser.END:
	            case MySqlParser.ENDS:
	            case MySqlParser.ENGINE:
	            case MySqlParser.ENGINES:
	            case MySqlParser.ERROR:
	            case MySqlParser.ERRORS:
	            case MySqlParser.ESCAPE:
	            case MySqlParser.EVEN:
	            case MySqlParser.EVENT:
	            case MySqlParser.EVENTS:
	            case MySqlParser.EVERY:
	            case MySqlParser.EXCHANGE:
	            case MySqlParser.EXCLUSIVE:
	            case MySqlParser.EXPIRE:
	            case MySqlParser.EXPORT:
	            case MySqlParser.EXTENDED:
	            case MySqlParser.EXTENT_SIZE:
	            case MySqlParser.FAST:
	            case MySqlParser.FAULTS:
	            case MySqlParser.FIELDS:
	            case MySqlParser.FILE_BLOCK_SIZE:
	            case MySqlParser.FILTER:
	            case MySqlParser.FIRST:
	            case MySqlParser.FIXED:
	            case MySqlParser.FLUSH:
	            case MySqlParser.FOLLOWS:
	            case MySqlParser.FOUND:
	            case MySqlParser.FULL:
	            case MySqlParser.FUNCTION:
	            case MySqlParser.GENERAL:
	            case MySqlParser.GLOBAL:
	            case MySqlParser.GRANTS:
	            case MySqlParser.GROUP_REPLICATION:
	            case MySqlParser.HANDLER:
	            case MySqlParser.HASH:
	            case MySqlParser.HELP:
	            case MySqlParser.HOST:
	            case MySqlParser.HOSTS:
	            case MySqlParser.IDENTIFIED:
	            case MySqlParser.IGNORE_SERVER_IDS:
	            case MySqlParser.IMPORT:
	            case MySqlParser.INDEXES:
	            case MySqlParser.INITIAL_SIZE:
	            case MySqlParser.INPLACE:
	            case MySqlParser.INSERT_METHOD:
	            case MySqlParser.INSTALL:
	            case MySqlParser.INSTANCE:
	            case MySqlParser.INVISIBLE:
	            case MySqlParser.INVOKER:
	            case MySqlParser.IO:
	            case MySqlParser.IO_THREAD:
	            case MySqlParser.IPC:
	            case MySqlParser.ISOLATION:
	            case MySqlParser.ISSUER:
	            case MySqlParser.JSON:
	            case MySqlParser.KEY_BLOCK_SIZE:
	            case MySqlParser.LANGUAGE:
	            case MySqlParser.LAST:
	            case MySqlParser.LEAVES:
	            case MySqlParser.LESS:
	            case MySqlParser.LEVEL:
	            case MySqlParser.LIST:
	            case MySqlParser.LOCAL:
	            case MySqlParser.LOGFILE:
	            case MySqlParser.LOGS:
	            case MySqlParser.MASTER:
	            case MySqlParser.MASTER_AUTO_POSITION:
	            case MySqlParser.MASTER_CONNECT_RETRY:
	            case MySqlParser.MASTER_DELAY:
	            case MySqlParser.MASTER_HEARTBEAT_PERIOD:
	            case MySqlParser.MASTER_HOST:
	            case MySqlParser.MASTER_LOG_FILE:
	            case MySqlParser.MASTER_LOG_POS:
	            case MySqlParser.MASTER_PASSWORD:
	            case MySqlParser.MASTER_PORT:
	            case MySqlParser.MASTER_RETRY_COUNT:
	            case MySqlParser.MASTER_SSL:
	            case MySqlParser.MASTER_SSL_CA:
	            case MySqlParser.MASTER_SSL_CAPATH:
	            case MySqlParser.MASTER_SSL_CERT:
	            case MySqlParser.MASTER_SSL_CIPHER:
	            case MySqlParser.MASTER_SSL_CRL:
	            case MySqlParser.MASTER_SSL_CRLPATH:
	            case MySqlParser.MASTER_SSL_KEY:
	            case MySqlParser.MASTER_TLS_VERSION:
	            case MySqlParser.MASTER_USER:
	            case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
	            case MySqlParser.MAX_QUERIES_PER_HOUR:
	            case MySqlParser.MAX_ROWS:
	            case MySqlParser.MAX_SIZE:
	            case MySqlParser.MAX_UPDATES_PER_HOUR:
	            case MySqlParser.MAX_USER_CONNECTIONS:
	            case MySqlParser.MEDIUM:
	            case MySqlParser.MEMBER:
	            case MySqlParser.MERGE:
	            case MySqlParser.MESSAGE_TEXT:
	            case MySqlParser.MID:
	            case MySqlParser.MIGRATE:
	            case MySqlParser.MIN_ROWS:
	            case MySqlParser.MODE:
	            case MySqlParser.MODIFY:
	            case MySqlParser.MUTEX:
	            case MySqlParser.MYSQL:
	            case MySqlParser.MYSQL_ERRNO:
	            case MySqlParser.NAME:
	            case MySqlParser.NAMES:
	            case MySqlParser.NCHAR:
	            case MySqlParser.NEVER:
	            case MySqlParser.NEXT:
	            case MySqlParser.NO:
	            case MySqlParser.NODEGROUP:
	            case MySqlParser.NONE:
	            case MySqlParser.OFFLINE:
	            case MySqlParser.OFFSET:
	            case MySqlParser.OF:
	            case MySqlParser.OJ:
	            case MySqlParser.OLD_PASSWORD:
	            case MySqlParser.ONE:
	            case MySqlParser.ONLINE:
	            case MySqlParser.ONLY:
	            case MySqlParser.OPEN:
	            case MySqlParser.OPTIMIZER_COSTS:
	            case MySqlParser.OPTIONS:
	            case MySqlParser.OWNER:
	            case MySqlParser.PACK_KEYS:
	            case MySqlParser.PAGE:
	            case MySqlParser.PARSER:
	            case MySqlParser.PARTIAL:
	            case MySqlParser.PARTITIONING:
	            case MySqlParser.PARTITIONS:
	            case MySqlParser.PASSWORD:
	            case MySqlParser.PHASE:
	            case MySqlParser.PLUGIN:
	            case MySqlParser.PLUGIN_DIR:
	            case MySqlParser.PLUGINS:
	            case MySqlParser.PORT:
	            case MySqlParser.PRECEDES:
	            case MySqlParser.PREPARE:
	            case MySqlParser.PRESERVE:
	            case MySqlParser.PREV:
	            case MySqlParser.PROCESSLIST:
	            case MySqlParser.PROFILE:
	            case MySqlParser.PROFILES:
	            case MySqlParser.PROXY:
	            case MySqlParser.QUERY:
	            case MySqlParser.QUICK:
	            case MySqlParser.REBUILD:
	            case MySqlParser.RECOVER:
	            case MySqlParser.REDO_BUFFER_SIZE:
	            case MySqlParser.REDUNDANT:
	            case MySqlParser.RELAY:
	            case MySqlParser.RELAY_LOG_FILE:
	            case MySqlParser.RELAY_LOG_POS:
	            case MySqlParser.RELAYLOG:
	            case MySqlParser.REMOVE:
	            case MySqlParser.REORGANIZE:
	            case MySqlParser.REPAIR:
	            case MySqlParser.REPLICATE_DO_DB:
	            case MySqlParser.REPLICATE_DO_TABLE:
	            case MySqlParser.REPLICATE_IGNORE_DB:
	            case MySqlParser.REPLICATE_IGNORE_TABLE:
	            case MySqlParser.REPLICATE_REWRITE_DB:
	            case MySqlParser.REPLICATE_WILD_DO_TABLE:
	            case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
	            case MySqlParser.REPLICATION:
	            case MySqlParser.RESET:
	            case MySqlParser.RESUME:
	            case MySqlParser.RETURNED_SQLSTATE:
	            case MySqlParser.RETURNS:
	            case MySqlParser.ROLE:
	            case MySqlParser.ROLLBACK:
	            case MySqlParser.ROLLUP:
	            case MySqlParser.ROTATE:
	            case MySqlParser.ROW:
	            case MySqlParser.ROWS:
	            case MySqlParser.ROW_FORMAT:
	            case MySqlParser.SAVEPOINT:
	            case MySqlParser.SCHEDULE:
	            case MySqlParser.SECURITY:
	            case MySqlParser.SERVER:
	            case MySqlParser.SESSION:
	            case MySqlParser.SHARE:
	            case MySqlParser.SHARED:
	            case MySqlParser.SIGNED:
	            case MySqlParser.SIMPLE:
	            case MySqlParser.SLAVE:
	            case MySqlParser.SLOW:
	            case MySqlParser.SNAPSHOT:
	            case MySqlParser.SOCKET:
	            case MySqlParser.SOME:
	            case MySqlParser.SONAME:
	            case MySqlParser.SOUNDS:
	            case MySqlParser.SOURCE:
	            case MySqlParser.SQL_AFTER_GTIDS:
	            case MySqlParser.SQL_AFTER_MTS_GAPS:
	            case MySqlParser.SQL_BEFORE_GTIDS:
	            case MySqlParser.SQL_BUFFER_RESULT:
	            case MySqlParser.SQL_CACHE:
	            case MySqlParser.SQL_NO_CACHE:
	            case MySqlParser.SQL_THREAD:
	            case MySqlParser.START:
	            case MySqlParser.STARTS:
	            case MySqlParser.STATS_AUTO_RECALC:
	            case MySqlParser.STATS_PERSISTENT:
	            case MySqlParser.STATS_SAMPLE_PAGES:
	            case MySqlParser.STATUS:
	            case MySqlParser.STOP:
	            case MySqlParser.STORAGE:
	            case MySqlParser.STRING:
	            case MySqlParser.SUBCLASS_ORIGIN:
	            case MySqlParser.SUBJECT:
	            case MySqlParser.SUBPARTITION:
	            case MySqlParser.SUBPARTITIONS:
	            case MySqlParser.SUSPEND:
	            case MySqlParser.SWAPS:
	            case MySqlParser.SWITCHES:
	            case MySqlParser.TABLE_NAME:
	            case MySqlParser.TABLESPACE:
	            case MySqlParser.TEMPORARY:
	            case MySqlParser.TEMPTABLE:
	            case MySqlParser.THAN:
	            case MySqlParser.TRADITIONAL:
	            case MySqlParser.TRANSACTION:
	            case MySqlParser.TRANSACTIONAL:
	            case MySqlParser.TRIGGERS:
	            case MySqlParser.TRUNCATE:
	            case MySqlParser.UNDEFINED:
	            case MySqlParser.UNDOFILE:
	            case MySqlParser.UNDO_BUFFER_SIZE:
	            case MySqlParser.UNINSTALL:
	            case MySqlParser.UNKNOWN:
	            case MySqlParser.UNTIL:
	            case MySqlParser.UPGRADE:
	            case MySqlParser.USER:
	            case MySqlParser.USE_FRM:
	            case MySqlParser.USER_RESOURCES:
	            case MySqlParser.VALIDATION:
	            case MySqlParser.VALUE:
	            case MySqlParser.VARIABLES:
	            case MySqlParser.VIEW:
	            case MySqlParser.VISIBLE:
	            case MySqlParser.WAIT:
	            case MySqlParser.WARNINGS:
	            case MySqlParser.WITHOUT:
	            case MySqlParser.WORK:
	            case MySqlParser.WRAPPER:
	            case MySqlParser.X509:
	            case MySqlParser.XA:
	            case MySqlParser.XML:
	            case MySqlParser.INTERNAL:
	            case MySqlParser.QUARTER:
	            case MySqlParser.MONTH:
	            case MySqlParser.DAY:
	            case MySqlParser.HOUR:
	            case MySqlParser.MINUTE:
	            case MySqlParser.WEEK:
	            case MySqlParser.SECOND:
	            case MySqlParser.MICROSECOND:
	            case MySqlParser.TABLES:
	            case MySqlParser.ROUTINE:
	            case MySqlParser.EXECUTE:
	            case MySqlParser.FILE:
	            case MySqlParser.PROCESS:
	            case MySqlParser.RELOAD:
	            case MySqlParser.SHUTDOWN:
	            case MySqlParser.SUPER:
	            case MySqlParser.PRIVILEGES:
	            case MySqlParser.AUDIT_ADMIN:
	            case MySqlParser.BACKUP_ADMIN:
	            case MySqlParser.BINLOG_ADMIN:
	            case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
	            case MySqlParser.CLONE_ADMIN:
	            case MySqlParser.CONNECTION_ADMIN:
	            case MySqlParser.ENCRYPTION_KEY_ADMIN:
	            case MySqlParser.FIREWALL_ADMIN:
	            case MySqlParser.FIREWALL_USER:
	            case MySqlParser.GROUP_REPLICATION_ADMIN:
	            case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
	            case MySqlParser.NDB_STORED_USER:
	            case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
	            case MySqlParser.REPLICATION_APPLIER:
	            case MySqlParser.REPLICATION_SLAVE_ADMIN:
	            case MySqlParser.RESOURCE_GROUP_ADMIN:
	            case MySqlParser.RESOURCE_GROUP_USER:
	            case MySqlParser.ROLE_ADMIN:
	            case MySqlParser.SESSION_VARIABLES_ADMIN:
	            case MySqlParser.SET_USER_ID:
	            case MySqlParser.SHOW_ROUTINE:
	            case MySqlParser.SYSTEM_VARIABLES_ADMIN:
	            case MySqlParser.TABLE_ENCRYPTION_ADMIN:
	            case MySqlParser.VERSION_TOKEN_ADMIN:
	            case MySqlParser.XA_RECOVER_ADMIN:
	            case MySqlParser.ARMSCII8:
	            case MySqlParser.ASCII:
	            case MySqlParser.BIG5:
	            case MySqlParser.CP1250:
	            case MySqlParser.CP1251:
	            case MySqlParser.CP1256:
	            case MySqlParser.CP1257:
	            case MySqlParser.CP850:
	            case MySqlParser.CP852:
	            case MySqlParser.CP866:
	            case MySqlParser.CP932:
	            case MySqlParser.DEC8:
	            case MySqlParser.EUCJPMS:
	            case MySqlParser.EUCKR:
	            case MySqlParser.GB2312:
	            case MySqlParser.GBK:
	            case MySqlParser.GEOSTD8:
	            case MySqlParser.GREEK:
	            case MySqlParser.HEBREW:
	            case MySqlParser.HP8:
	            case MySqlParser.KEYBCS2:
	            case MySqlParser.KOI8R:
	            case MySqlParser.KOI8U:
	            case MySqlParser.LATIN1:
	            case MySqlParser.LATIN2:
	            case MySqlParser.LATIN5:
	            case MySqlParser.LATIN7:
	            case MySqlParser.MACCE:
	            case MySqlParser.MACROMAN:
	            case MySqlParser.SJIS:
	            case MySqlParser.SWE7:
	            case MySqlParser.TIS620:
	            case MySqlParser.UCS2:
	            case MySqlParser.UJIS:
	            case MySqlParser.UTF16:
	            case MySqlParser.UTF16LE:
	            case MySqlParser.UTF32:
	            case MySqlParser.UTF8:
	            case MySqlParser.UTF8MB3:
	            case MySqlParser.UTF8MB4:
	            case MySqlParser.ARCHIVE:
	            case MySqlParser.BLACKHOLE:
	            case MySqlParser.CSV:
	            case MySqlParser.FEDERATED:
	            case MySqlParser.INNODB:
	            case MySqlParser.MEMORY:
	            case MySqlParser.MRG_MYISAM:
	            case MySqlParser.MYISAM:
	            case MySqlParser.NDB:
	            case MySqlParser.NDBCLUSTER:
	            case MySqlParser.PERFORMANCE_SCHEMA:
	            case MySqlParser.TOKUDB:
	            case MySqlParser.REPEATABLE:
	            case MySqlParser.COMMITTED:
	            case MySqlParser.UNCOMMITTED:
	            case MySqlParser.SERIALIZABLE:
	            case MySqlParser.GEOMETRYCOLLECTION:
	            case MySqlParser.LINESTRING:
	            case MySqlParser.MULTILINESTRING:
	            case MySqlParser.MULTIPOINT:
	            case MySqlParser.MULTIPOLYGON:
	            case MySqlParser.POINT:
	            case MySqlParser.POLYGON:
	            case MySqlParser.ABS:
	            case MySqlParser.ACOS:
	            case MySqlParser.ADDDATE:
	            case MySqlParser.ADDTIME:
	            case MySqlParser.AES_DECRYPT:
	            case MySqlParser.AES_ENCRYPT:
	            case MySqlParser.AREA:
	            case MySqlParser.ASBINARY:
	            case MySqlParser.ASIN:
	            case MySqlParser.ASTEXT:
	            case MySqlParser.ASWKB:
	            case MySqlParser.ASWKT:
	            case MySqlParser.ASYMMETRIC_DECRYPT:
	            case MySqlParser.ASYMMETRIC_DERIVE:
	            case MySqlParser.ASYMMETRIC_ENCRYPT:
	            case MySqlParser.ASYMMETRIC_SIGN:
	            case MySqlParser.ASYMMETRIC_VERIFY:
	            case MySqlParser.ATAN:
	            case MySqlParser.ATAN2:
	            case MySqlParser.BENCHMARK:
	            case MySqlParser.BIN:
	            case MySqlParser.BIT_COUNT:
	            case MySqlParser.BIT_LENGTH:
	            case MySqlParser.BUFFER:
	            case MySqlParser.CATALOG_NAME:
	            case MySqlParser.CEIL:
	            case MySqlParser.CEILING:
	            case MySqlParser.CENTROID:
	            case MySqlParser.CHARACTER_LENGTH:
	            case MySqlParser.CHARSET:
	            case MySqlParser.CHAR_LENGTH:
	            case MySqlParser.COERCIBILITY:
	            case MySqlParser.COLLATION:
	            case MySqlParser.COMPRESS:
	            case MySqlParser.CONCAT:
	            case MySqlParser.CONCAT_WS:
	            case MySqlParser.CONNECTION_ID:
	            case MySqlParser.CONV:
	            case MySqlParser.CONVERT_TZ:
	            case MySqlParser.COS:
	            case MySqlParser.COT:
	            case MySqlParser.CRC32:
	            case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
	            case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
	            case MySqlParser.CREATE_DH_PARAMETERS:
	            case MySqlParser.CREATE_DIGEST:
	            case MySqlParser.CROSSES:
	            case MySqlParser.DATEDIFF:
	            case MySqlParser.DATE_FORMAT:
	            case MySqlParser.DAYNAME:
	            case MySqlParser.DAYOFMONTH:
	            case MySqlParser.DAYOFWEEK:
	            case MySqlParser.DAYOFYEAR:
	            case MySqlParser.DECODE:
	            case MySqlParser.DEGREES:
	            case MySqlParser.DES_DECRYPT:
	            case MySqlParser.DES_ENCRYPT:
	            case MySqlParser.DIMENSION:
	            case MySqlParser.DISJOINT:
	            case MySqlParser.ELT:
	            case MySqlParser.ENCODE:
	            case MySqlParser.ENCRYPT:
	            case MySqlParser.ENDPOINT:
	            case MySqlParser.ENVELOPE:
	            case MySqlParser.EQUALS:
	            case MySqlParser.EXP:
	            case MySqlParser.EXPORT_SET:
	            case MySqlParser.EXTERIORRING:
	            case MySqlParser.EXTRACTVALUE:
	            case MySqlParser.FIELD:
	            case MySqlParser.FIND_IN_SET:
	            case MySqlParser.FLOOR:
	            case MySqlParser.FORMAT:
	            case MySqlParser.FOUND_ROWS:
	            case MySqlParser.FROM_BASE64:
	            case MySqlParser.FROM_DAYS:
	            case MySqlParser.FROM_UNIXTIME:
	            case MySqlParser.GEOMCOLLFROMTEXT:
	            case MySqlParser.GEOMCOLLFROMWKB:
	            case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
	            case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
	            case MySqlParser.GEOMETRYFROMTEXT:
	            case MySqlParser.GEOMETRYFROMWKB:
	            case MySqlParser.GEOMETRYN:
	            case MySqlParser.GEOMETRYTYPE:
	            case MySqlParser.GEOMFROMTEXT:
	            case MySqlParser.GEOMFROMWKB:
	            case MySqlParser.GET_FORMAT:
	            case MySqlParser.GET_LOCK:
	            case MySqlParser.GLENGTH:
	            case MySqlParser.GREATEST:
	            case MySqlParser.GTID_SUBSET:
	            case MySqlParser.GTID_SUBTRACT:
	            case MySqlParser.HEX:
	            case MySqlParser.IFNULL:
	            case MySqlParser.INET6_ATON:
	            case MySqlParser.INET6_NTOA:
	            case MySqlParser.INET_ATON:
	            case MySqlParser.INET_NTOA:
	            case MySqlParser.INSTR:
	            case MySqlParser.INTERIORRINGN:
	            case MySqlParser.INTERSECTS:
	            case MySqlParser.ISCLOSED:
	            case MySqlParser.ISEMPTY:
	            case MySqlParser.ISNULL:
	            case MySqlParser.ISSIMPLE:
	            case MySqlParser.IS_FREE_LOCK:
	            case MySqlParser.IS_IPV4:
	            case MySqlParser.IS_IPV4_COMPAT:
	            case MySqlParser.IS_IPV4_MAPPED:
	            case MySqlParser.IS_IPV6:
	            case MySqlParser.IS_USED_LOCK:
	            case MySqlParser.LAST_INSERT_ID:
	            case MySqlParser.LCASE:
	            case MySqlParser.LEAST:
	            case MySqlParser.LENGTH:
	            case MySqlParser.LINEFROMTEXT:
	            case MySqlParser.LINEFROMWKB:
	            case MySqlParser.LINESTRINGFROMTEXT:
	            case MySqlParser.LINESTRINGFROMWKB:
	            case MySqlParser.LN:
	            case MySqlParser.LOAD_FILE:
	            case MySqlParser.LOCATE:
	            case MySqlParser.LOG:
	            case MySqlParser.LOG10:
	            case MySqlParser.LOG2:
	            case MySqlParser.LOWER:
	            case MySqlParser.LPAD:
	            case MySqlParser.LTRIM:
	            case MySqlParser.MAKEDATE:
	            case MySqlParser.MAKETIME:
	            case MySqlParser.MAKE_SET:
	            case MySqlParser.MASTER_POS_WAIT:
	            case MySqlParser.MBRCONTAINS:
	            case MySqlParser.MBRDISJOINT:
	            case MySqlParser.MBREQUAL:
	            case MySqlParser.MBRINTERSECTS:
	            case MySqlParser.MBROVERLAPS:
	            case MySqlParser.MBRTOUCHES:
	            case MySqlParser.MBRWITHIN:
	            case MySqlParser.MD5:
	            case MySqlParser.MLINEFROMTEXT:
	            case MySqlParser.MLINEFROMWKB:
	            case MySqlParser.MONTHNAME:
	            case MySqlParser.MPOINTFROMTEXT:
	            case MySqlParser.MPOINTFROMWKB:
	            case MySqlParser.MPOLYFROMTEXT:
	            case MySqlParser.MPOLYFROMWKB:
	            case MySqlParser.MULTILINESTRINGFROMTEXT:
	            case MySqlParser.MULTILINESTRINGFROMWKB:
	            case MySqlParser.MULTIPOINTFROMTEXT:
	            case MySqlParser.MULTIPOINTFROMWKB:
	            case MySqlParser.MULTIPOLYGONFROMTEXT:
	            case MySqlParser.MULTIPOLYGONFROMWKB:
	            case MySqlParser.NAME_CONST:
	            case MySqlParser.NULLIF:
	            case MySqlParser.NUMGEOMETRIES:
	            case MySqlParser.NUMINTERIORRINGS:
	            case MySqlParser.NUMPOINTS:
	            case MySqlParser.OCT:
	            case MySqlParser.OCTET_LENGTH:
	            case MySqlParser.ORD:
	            case MySqlParser.OVERLAPS:
	            case MySqlParser.PERIOD_ADD:
	            case MySqlParser.PERIOD_DIFF:
	            case MySqlParser.PI:
	            case MySqlParser.POINTFROMTEXT:
	            case MySqlParser.POINTFROMWKB:
	            case MySqlParser.POINTN:
	            case MySqlParser.POLYFROMTEXT:
	            case MySqlParser.POLYFROMWKB:
	            case MySqlParser.POLYGONFROMTEXT:
	            case MySqlParser.POLYGONFROMWKB:
	            case MySqlParser.POW:
	            case MySqlParser.POWER:
	            case MySqlParser.QUOTE:
	            case MySqlParser.RADIANS:
	            case MySqlParser.RAND:
	            case MySqlParser.RANDOM_BYTES:
	            case MySqlParser.RELEASE_LOCK:
	            case MySqlParser.REVERSE:
	            case MySqlParser.ROUND:
	            case MySqlParser.ROW_COUNT:
	            case MySqlParser.RPAD:
	            case MySqlParser.RTRIM:
	            case MySqlParser.SEC_TO_TIME:
	            case MySqlParser.SESSION_USER:
	            case MySqlParser.SHA:
	            case MySqlParser.SHA1:
	            case MySqlParser.SHA2:
	            case MySqlParser.SCHEMA_NAME:
	            case MySqlParser.SIGN:
	            case MySqlParser.SIN:
	            case MySqlParser.SLEEP:
	            case MySqlParser.SOUNDEX:
	            case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
	            case MySqlParser.SQRT:
	            case MySqlParser.SRID:
	            case MySqlParser.STARTPOINT:
	            case MySqlParser.STRCMP:
	            case MySqlParser.STR_TO_DATE:
	            case MySqlParser.ST_AREA:
	            case MySqlParser.ST_ASBINARY:
	            case MySqlParser.ST_ASTEXT:
	            case MySqlParser.ST_ASWKB:
	            case MySqlParser.ST_ASWKT:
	            case MySqlParser.ST_BUFFER:
	            case MySqlParser.ST_CENTROID:
	            case MySqlParser.ST_CONTAINS:
	            case MySqlParser.ST_CROSSES:
	            case MySqlParser.ST_DIFFERENCE:
	            case MySqlParser.ST_DIMENSION:
	            case MySqlParser.ST_DISJOINT:
	            case MySqlParser.ST_DISTANCE:
	            case MySqlParser.ST_ENDPOINT:
	            case MySqlParser.ST_ENVELOPE:
	            case MySqlParser.ST_EQUALS:
	            case MySqlParser.ST_EXTERIORRING:
	            case MySqlParser.ST_GEOMCOLLFROMTEXT:
	            case MySqlParser.ST_GEOMCOLLFROMTXT:
	            case MySqlParser.ST_GEOMCOLLFROMWKB:
	            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
	            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
	            case MySqlParser.ST_GEOMETRYFROMTEXT:
	            case MySqlParser.ST_GEOMETRYFROMWKB:
	            case MySqlParser.ST_GEOMETRYN:
	            case MySqlParser.ST_GEOMETRYTYPE:
	            case MySqlParser.ST_GEOMFROMTEXT:
	            case MySqlParser.ST_GEOMFROMWKB:
	            case MySqlParser.ST_INTERIORRINGN:
	            case MySqlParser.ST_INTERSECTION:
	            case MySqlParser.ST_INTERSECTS:
	            case MySqlParser.ST_ISCLOSED:
	            case MySqlParser.ST_ISEMPTY:
	            case MySqlParser.ST_ISSIMPLE:
	            case MySqlParser.ST_LINEFROMTEXT:
	            case MySqlParser.ST_LINEFROMWKB:
	            case MySqlParser.ST_LINESTRINGFROMTEXT:
	            case MySqlParser.ST_LINESTRINGFROMWKB:
	            case MySqlParser.ST_NUMGEOMETRIES:
	            case MySqlParser.ST_NUMINTERIORRING:
	            case MySqlParser.ST_NUMINTERIORRINGS:
	            case MySqlParser.ST_NUMPOINTS:
	            case MySqlParser.ST_OVERLAPS:
	            case MySqlParser.ST_POINTFROMTEXT:
	            case MySqlParser.ST_POINTFROMWKB:
	            case MySqlParser.ST_POINTN:
	            case MySqlParser.ST_POLYFROMTEXT:
	            case MySqlParser.ST_POLYFROMWKB:
	            case MySqlParser.ST_POLYGONFROMTEXT:
	            case MySqlParser.ST_POLYGONFROMWKB:
	            case MySqlParser.ST_SRID:
	            case MySqlParser.ST_STARTPOINT:
	            case MySqlParser.ST_SYMDIFFERENCE:
	            case MySqlParser.ST_TOUCHES:
	            case MySqlParser.ST_UNION:
	            case MySqlParser.ST_WITHIN:
	            case MySqlParser.ST_X:
	            case MySqlParser.ST_Y:
	            case MySqlParser.SUBDATE:
	            case MySqlParser.SUBSTRING_INDEX:
	            case MySqlParser.SUBTIME:
	            case MySqlParser.SYSTEM_USER:
	            case MySqlParser.TAN:
	            case MySqlParser.TIMEDIFF:
	            case MySqlParser.TIMESTAMPADD:
	            case MySqlParser.TIMESTAMPDIFF:
	            case MySqlParser.TIME_FORMAT:
	            case MySqlParser.TIME_TO_SEC:
	            case MySqlParser.TOUCHES:
	            case MySqlParser.TO_BASE64:
	            case MySqlParser.TO_DAYS:
	            case MySqlParser.TO_SECONDS:
	            case MySqlParser.UCASE:
	            case MySqlParser.UNCOMPRESS:
	            case MySqlParser.UNCOMPRESSED_LENGTH:
	            case MySqlParser.UNHEX:
	            case MySqlParser.UNIX_TIMESTAMP:
	            case MySqlParser.UPDATEXML:
	            case MySqlParser.UPPER:
	            case MySqlParser.UUID:
	            case MySqlParser.UUID_SHORT:
	            case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
	            case MySqlParser.VERSION:
	            case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
	            case MySqlParser.WEEKDAY:
	            case MySqlParser.WEEKOFYEAR:
	            case MySqlParser.WEIGHT_STRING:
	            case MySqlParser.WITHIN:
	            case MySqlParser.YEARWEEK:
	            case MySqlParser.Y_FUNCTION:
	            case MySqlParser.X_FUNCTION:
	            case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
	            case MySqlParser.STRING_LITERAL:
	            case MySqlParser.ID:
	            case MySqlParser.REVERSE_QUOTE_ID:
	                this.state = 2603;
	                this.uidList();
	                break;
	            case MySqlParser.ALL:
	                this.state = 2604;
	                this.match(MySqlParser.ALL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 44:
	            localctx = new AlterByRebuildPartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 44);
	            this.state = 2607;
	            this.match(MySqlParser.REBUILD);
	            this.state = 2608;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2611;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.CURRENT:
	            case MySqlParser.DATABASE:
	            case MySqlParser.DIAGNOSTICS:
	            case MySqlParser.LEFT:
	            case MySqlParser.NUMBER:
	            case MySqlParser.RIGHT:
	            case MySqlParser.STACKED:
	            case MySqlParser.DATE:
	            case MySqlParser.TIME:
	            case MySqlParser.TIMESTAMP:
	            case MySqlParser.DATETIME:
	            case MySqlParser.YEAR:
	            case MySqlParser.TEXT:
	            case MySqlParser.ENUM:
	            case MySqlParser.SERIAL:
	            case MySqlParser.JSON_VALID:
	            case MySqlParser.JSON_SCHEMA_VALID:
	            case MySqlParser.AVG:
	            case MySqlParser.BIT_AND:
	            case MySqlParser.BIT_OR:
	            case MySqlParser.BIT_XOR:
	            case MySqlParser.COUNT:
	            case MySqlParser.GROUP_CONCAT:
	            case MySqlParser.MAX:
	            case MySqlParser.MIN:
	            case MySqlParser.STD:
	            case MySqlParser.STDDEV:
	            case MySqlParser.STDDEV_POP:
	            case MySqlParser.STDDEV_SAMP:
	            case MySqlParser.SUM:
	            case MySqlParser.VAR_POP:
	            case MySqlParser.VAR_SAMP:
	            case MySqlParser.VARIANCE:
	            case MySqlParser.POSITION:
	            case MySqlParser.ACCOUNT:
	            case MySqlParser.ACTION:
	            case MySqlParser.AFTER:
	            case MySqlParser.AGGREGATE:
	            case MySqlParser.ALGORITHM:
	            case MySqlParser.ANY:
	            case MySqlParser.AT:
	            case MySqlParser.AUTHORS:
	            case MySqlParser.AUTOCOMMIT:
	            case MySqlParser.AUTOEXTEND_SIZE:
	            case MySqlParser.AUTO_INCREMENT:
	            case MySqlParser.AVG_ROW_LENGTH:
	            case MySqlParser.BEGIN:
	            case MySqlParser.BINLOG:
	            case MySqlParser.BIT:
	            case MySqlParser.BLOCK:
	            case MySqlParser.BOOL:
	            case MySqlParser.BOOLEAN:
	            case MySqlParser.BTREE:
	            case MySqlParser.CACHE:
	            case MySqlParser.CASCADED:
	            case MySqlParser.CHAIN:
	            case MySqlParser.CHANGED:
	            case MySqlParser.CHANNEL:
	            case MySqlParser.CHECKSUM:
	            case MySqlParser.PAGE_CHECKSUM:
	            case MySqlParser.CIPHER:
	            case MySqlParser.CLASS_ORIGIN:
	            case MySqlParser.CLIENT:
	            case MySqlParser.CLOSE:
	            case MySqlParser.COALESCE:
	            case MySqlParser.CODE:
	            case MySqlParser.COLUMNS:
	            case MySqlParser.COLUMN_FORMAT:
	            case MySqlParser.COLUMN_NAME:
	            case MySqlParser.COMMENT:
	            case MySqlParser.COMMIT:
	            case MySqlParser.COMPACT:
	            case MySqlParser.COMPLETION:
	            case MySqlParser.COMPRESSED:
	            case MySqlParser.COMPRESSION:
	            case MySqlParser.CONCURRENT:
	            case MySqlParser.CONNECTION:
	            case MySqlParser.CONSISTENT:
	            case MySqlParser.CONSTRAINT_CATALOG:
	            case MySqlParser.CONSTRAINT_SCHEMA:
	            case MySqlParser.CONSTRAINT_NAME:
	            case MySqlParser.CONTAINS:
	            case MySqlParser.CONTEXT:
	            case MySqlParser.CONTRIBUTORS:
	            case MySqlParser.COPY:
	            case MySqlParser.CPU:
	            case MySqlParser.CURSOR_NAME:
	            case MySqlParser.DATA:
	            case MySqlParser.DATAFILE:
	            case MySqlParser.DEALLOCATE:
	            case MySqlParser.DEFAULT_AUTH:
	            case MySqlParser.DEFINER:
	            case MySqlParser.DELAY_KEY_WRITE:
	            case MySqlParser.DES_KEY_FILE:
	            case MySqlParser.DIRECTORY:
	            case MySqlParser.DISABLE:
	            case MySqlParser.DISCARD:
	            case MySqlParser.DISK:
	            case MySqlParser.DO:
	            case MySqlParser.DUMPFILE:
	            case MySqlParser.DUPLICATE:
	            case MySqlParser.DYNAMIC:
	            case MySqlParser.ENABLE:
	            case MySqlParser.ENCRYPTION:
	            case MySqlParser.END:
	            case MySqlParser.ENDS:
	            case MySqlParser.ENGINE:
	            case MySqlParser.ENGINES:
	            case MySqlParser.ERROR:
	            case MySqlParser.ERRORS:
	            case MySqlParser.ESCAPE:
	            case MySqlParser.EVEN:
	            case MySqlParser.EVENT:
	            case MySqlParser.EVENTS:
	            case MySqlParser.EVERY:
	            case MySqlParser.EXCHANGE:
	            case MySqlParser.EXCLUSIVE:
	            case MySqlParser.EXPIRE:
	            case MySqlParser.EXPORT:
	            case MySqlParser.EXTENDED:
	            case MySqlParser.EXTENT_SIZE:
	            case MySqlParser.FAST:
	            case MySqlParser.FAULTS:
	            case MySqlParser.FIELDS:
	            case MySqlParser.FILE_BLOCK_SIZE:
	            case MySqlParser.FILTER:
	            case MySqlParser.FIRST:
	            case MySqlParser.FIXED:
	            case MySqlParser.FLUSH:
	            case MySqlParser.FOLLOWS:
	            case MySqlParser.FOUND:
	            case MySqlParser.FULL:
	            case MySqlParser.FUNCTION:
	            case MySqlParser.GENERAL:
	            case MySqlParser.GLOBAL:
	            case MySqlParser.GRANTS:
	            case MySqlParser.GROUP_REPLICATION:
	            case MySqlParser.HANDLER:
	            case MySqlParser.HASH:
	            case MySqlParser.HELP:
	            case MySqlParser.HOST:
	            case MySqlParser.HOSTS:
	            case MySqlParser.IDENTIFIED:
	            case MySqlParser.IGNORE_SERVER_IDS:
	            case MySqlParser.IMPORT:
	            case MySqlParser.INDEXES:
	            case MySqlParser.INITIAL_SIZE:
	            case MySqlParser.INPLACE:
	            case MySqlParser.INSERT_METHOD:
	            case MySqlParser.INSTALL:
	            case MySqlParser.INSTANCE:
	            case MySqlParser.INVISIBLE:
	            case MySqlParser.INVOKER:
	            case MySqlParser.IO:
	            case MySqlParser.IO_THREAD:
	            case MySqlParser.IPC:
	            case MySqlParser.ISOLATION:
	            case MySqlParser.ISSUER:
	            case MySqlParser.JSON:
	            case MySqlParser.KEY_BLOCK_SIZE:
	            case MySqlParser.LANGUAGE:
	            case MySqlParser.LAST:
	            case MySqlParser.LEAVES:
	            case MySqlParser.LESS:
	            case MySqlParser.LEVEL:
	            case MySqlParser.LIST:
	            case MySqlParser.LOCAL:
	            case MySqlParser.LOGFILE:
	            case MySqlParser.LOGS:
	            case MySqlParser.MASTER:
	            case MySqlParser.MASTER_AUTO_POSITION:
	            case MySqlParser.MASTER_CONNECT_RETRY:
	            case MySqlParser.MASTER_DELAY:
	            case MySqlParser.MASTER_HEARTBEAT_PERIOD:
	            case MySqlParser.MASTER_HOST:
	            case MySqlParser.MASTER_LOG_FILE:
	            case MySqlParser.MASTER_LOG_POS:
	            case MySqlParser.MASTER_PASSWORD:
	            case MySqlParser.MASTER_PORT:
	            case MySqlParser.MASTER_RETRY_COUNT:
	            case MySqlParser.MASTER_SSL:
	            case MySqlParser.MASTER_SSL_CA:
	            case MySqlParser.MASTER_SSL_CAPATH:
	            case MySqlParser.MASTER_SSL_CERT:
	            case MySqlParser.MASTER_SSL_CIPHER:
	            case MySqlParser.MASTER_SSL_CRL:
	            case MySqlParser.MASTER_SSL_CRLPATH:
	            case MySqlParser.MASTER_SSL_KEY:
	            case MySqlParser.MASTER_TLS_VERSION:
	            case MySqlParser.MASTER_USER:
	            case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
	            case MySqlParser.MAX_QUERIES_PER_HOUR:
	            case MySqlParser.MAX_ROWS:
	            case MySqlParser.MAX_SIZE:
	            case MySqlParser.MAX_UPDATES_PER_HOUR:
	            case MySqlParser.MAX_USER_CONNECTIONS:
	            case MySqlParser.MEDIUM:
	            case MySqlParser.MEMBER:
	            case MySqlParser.MERGE:
	            case MySqlParser.MESSAGE_TEXT:
	            case MySqlParser.MID:
	            case MySqlParser.MIGRATE:
	            case MySqlParser.MIN_ROWS:
	            case MySqlParser.MODE:
	            case MySqlParser.MODIFY:
	            case MySqlParser.MUTEX:
	            case MySqlParser.MYSQL:
	            case MySqlParser.MYSQL_ERRNO:
	            case MySqlParser.NAME:
	            case MySqlParser.NAMES:
	            case MySqlParser.NCHAR:
	            case MySqlParser.NEVER:
	            case MySqlParser.NEXT:
	            case MySqlParser.NO:
	            case MySqlParser.NODEGROUP:
	            case MySqlParser.NONE:
	            case MySqlParser.OFFLINE:
	            case MySqlParser.OFFSET:
	            case MySqlParser.OF:
	            case MySqlParser.OJ:
	            case MySqlParser.OLD_PASSWORD:
	            case MySqlParser.ONE:
	            case MySqlParser.ONLINE:
	            case MySqlParser.ONLY:
	            case MySqlParser.OPEN:
	            case MySqlParser.OPTIMIZER_COSTS:
	            case MySqlParser.OPTIONS:
	            case MySqlParser.OWNER:
	            case MySqlParser.PACK_KEYS:
	            case MySqlParser.PAGE:
	            case MySqlParser.PARSER:
	            case MySqlParser.PARTIAL:
	            case MySqlParser.PARTITIONING:
	            case MySqlParser.PARTITIONS:
	            case MySqlParser.PASSWORD:
	            case MySqlParser.PHASE:
	            case MySqlParser.PLUGIN:
	            case MySqlParser.PLUGIN_DIR:
	            case MySqlParser.PLUGINS:
	            case MySqlParser.PORT:
	            case MySqlParser.PRECEDES:
	            case MySqlParser.PREPARE:
	            case MySqlParser.PRESERVE:
	            case MySqlParser.PREV:
	            case MySqlParser.PROCESSLIST:
	            case MySqlParser.PROFILE:
	            case MySqlParser.PROFILES:
	            case MySqlParser.PROXY:
	            case MySqlParser.QUERY:
	            case MySqlParser.QUICK:
	            case MySqlParser.REBUILD:
	            case MySqlParser.RECOVER:
	            case MySqlParser.REDO_BUFFER_SIZE:
	            case MySqlParser.REDUNDANT:
	            case MySqlParser.RELAY:
	            case MySqlParser.RELAY_LOG_FILE:
	            case MySqlParser.RELAY_LOG_POS:
	            case MySqlParser.RELAYLOG:
	            case MySqlParser.REMOVE:
	            case MySqlParser.REORGANIZE:
	            case MySqlParser.REPAIR:
	            case MySqlParser.REPLICATE_DO_DB:
	            case MySqlParser.REPLICATE_DO_TABLE:
	            case MySqlParser.REPLICATE_IGNORE_DB:
	            case MySqlParser.REPLICATE_IGNORE_TABLE:
	            case MySqlParser.REPLICATE_REWRITE_DB:
	            case MySqlParser.REPLICATE_WILD_DO_TABLE:
	            case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
	            case MySqlParser.REPLICATION:
	            case MySqlParser.RESET:
	            case MySqlParser.RESUME:
	            case MySqlParser.RETURNED_SQLSTATE:
	            case MySqlParser.RETURNS:
	            case MySqlParser.ROLE:
	            case MySqlParser.ROLLBACK:
	            case MySqlParser.ROLLUP:
	            case MySqlParser.ROTATE:
	            case MySqlParser.ROW:
	            case MySqlParser.ROWS:
	            case MySqlParser.ROW_FORMAT:
	            case MySqlParser.SAVEPOINT:
	            case MySqlParser.SCHEDULE:
	            case MySqlParser.SECURITY:
	            case MySqlParser.SERVER:
	            case MySqlParser.SESSION:
	            case MySqlParser.SHARE:
	            case MySqlParser.SHARED:
	            case MySqlParser.SIGNED:
	            case MySqlParser.SIMPLE:
	            case MySqlParser.SLAVE:
	            case MySqlParser.SLOW:
	            case MySqlParser.SNAPSHOT:
	            case MySqlParser.SOCKET:
	            case MySqlParser.SOME:
	            case MySqlParser.SONAME:
	            case MySqlParser.SOUNDS:
	            case MySqlParser.SOURCE:
	            case MySqlParser.SQL_AFTER_GTIDS:
	            case MySqlParser.SQL_AFTER_MTS_GAPS:
	            case MySqlParser.SQL_BEFORE_GTIDS:
	            case MySqlParser.SQL_BUFFER_RESULT:
	            case MySqlParser.SQL_CACHE:
	            case MySqlParser.SQL_NO_CACHE:
	            case MySqlParser.SQL_THREAD:
	            case MySqlParser.START:
	            case MySqlParser.STARTS:
	            case MySqlParser.STATS_AUTO_RECALC:
	            case MySqlParser.STATS_PERSISTENT:
	            case MySqlParser.STATS_SAMPLE_PAGES:
	            case MySqlParser.STATUS:
	            case MySqlParser.STOP:
	            case MySqlParser.STORAGE:
	            case MySqlParser.STRING:
	            case MySqlParser.SUBCLASS_ORIGIN:
	            case MySqlParser.SUBJECT:
	            case MySqlParser.SUBPARTITION:
	            case MySqlParser.SUBPARTITIONS:
	            case MySqlParser.SUSPEND:
	            case MySqlParser.SWAPS:
	            case MySqlParser.SWITCHES:
	            case MySqlParser.TABLE_NAME:
	            case MySqlParser.TABLESPACE:
	            case MySqlParser.TEMPORARY:
	            case MySqlParser.TEMPTABLE:
	            case MySqlParser.THAN:
	            case MySqlParser.TRADITIONAL:
	            case MySqlParser.TRANSACTION:
	            case MySqlParser.TRANSACTIONAL:
	            case MySqlParser.TRIGGERS:
	            case MySqlParser.TRUNCATE:
	            case MySqlParser.UNDEFINED:
	            case MySqlParser.UNDOFILE:
	            case MySqlParser.UNDO_BUFFER_SIZE:
	            case MySqlParser.UNINSTALL:
	            case MySqlParser.UNKNOWN:
	            case MySqlParser.UNTIL:
	            case MySqlParser.UPGRADE:
	            case MySqlParser.USER:
	            case MySqlParser.USE_FRM:
	            case MySqlParser.USER_RESOURCES:
	            case MySqlParser.VALIDATION:
	            case MySqlParser.VALUE:
	            case MySqlParser.VARIABLES:
	            case MySqlParser.VIEW:
	            case MySqlParser.VISIBLE:
	            case MySqlParser.WAIT:
	            case MySqlParser.WARNINGS:
	            case MySqlParser.WITHOUT:
	            case MySqlParser.WORK:
	            case MySqlParser.WRAPPER:
	            case MySqlParser.X509:
	            case MySqlParser.XA:
	            case MySqlParser.XML:
	            case MySqlParser.INTERNAL:
	            case MySqlParser.QUARTER:
	            case MySqlParser.MONTH:
	            case MySqlParser.DAY:
	            case MySqlParser.HOUR:
	            case MySqlParser.MINUTE:
	            case MySqlParser.WEEK:
	            case MySqlParser.SECOND:
	            case MySqlParser.MICROSECOND:
	            case MySqlParser.TABLES:
	            case MySqlParser.ROUTINE:
	            case MySqlParser.EXECUTE:
	            case MySqlParser.FILE:
	            case MySqlParser.PROCESS:
	            case MySqlParser.RELOAD:
	            case MySqlParser.SHUTDOWN:
	            case MySqlParser.SUPER:
	            case MySqlParser.PRIVILEGES:
	            case MySqlParser.AUDIT_ADMIN:
	            case MySqlParser.BACKUP_ADMIN:
	            case MySqlParser.BINLOG_ADMIN:
	            case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
	            case MySqlParser.CLONE_ADMIN:
	            case MySqlParser.CONNECTION_ADMIN:
	            case MySqlParser.ENCRYPTION_KEY_ADMIN:
	            case MySqlParser.FIREWALL_ADMIN:
	            case MySqlParser.FIREWALL_USER:
	            case MySqlParser.GROUP_REPLICATION_ADMIN:
	            case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
	            case MySqlParser.NDB_STORED_USER:
	            case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
	            case MySqlParser.REPLICATION_APPLIER:
	            case MySqlParser.REPLICATION_SLAVE_ADMIN:
	            case MySqlParser.RESOURCE_GROUP_ADMIN:
	            case MySqlParser.RESOURCE_GROUP_USER:
	            case MySqlParser.ROLE_ADMIN:
	            case MySqlParser.SESSION_VARIABLES_ADMIN:
	            case MySqlParser.SET_USER_ID:
	            case MySqlParser.SHOW_ROUTINE:
	            case MySqlParser.SYSTEM_VARIABLES_ADMIN:
	            case MySqlParser.TABLE_ENCRYPTION_ADMIN:
	            case MySqlParser.VERSION_TOKEN_ADMIN:
	            case MySqlParser.XA_RECOVER_ADMIN:
	            case MySqlParser.ARMSCII8:
	            case MySqlParser.ASCII:
	            case MySqlParser.BIG5:
	            case MySqlParser.CP1250:
	            case MySqlParser.CP1251:
	            case MySqlParser.CP1256:
	            case MySqlParser.CP1257:
	            case MySqlParser.CP850:
	            case MySqlParser.CP852:
	            case MySqlParser.CP866:
	            case MySqlParser.CP932:
	            case MySqlParser.DEC8:
	            case MySqlParser.EUCJPMS:
	            case MySqlParser.EUCKR:
	            case MySqlParser.GB2312:
	            case MySqlParser.GBK:
	            case MySqlParser.GEOSTD8:
	            case MySqlParser.GREEK:
	            case MySqlParser.HEBREW:
	            case MySqlParser.HP8:
	            case MySqlParser.KEYBCS2:
	            case MySqlParser.KOI8R:
	            case MySqlParser.KOI8U:
	            case MySqlParser.LATIN1:
	            case MySqlParser.LATIN2:
	            case MySqlParser.LATIN5:
	            case MySqlParser.LATIN7:
	            case MySqlParser.MACCE:
	            case MySqlParser.MACROMAN:
	            case MySqlParser.SJIS:
	            case MySqlParser.SWE7:
	            case MySqlParser.TIS620:
	            case MySqlParser.UCS2:
	            case MySqlParser.UJIS:
	            case MySqlParser.UTF16:
	            case MySqlParser.UTF16LE:
	            case MySqlParser.UTF32:
	            case MySqlParser.UTF8:
	            case MySqlParser.UTF8MB3:
	            case MySqlParser.UTF8MB4:
	            case MySqlParser.ARCHIVE:
	            case MySqlParser.BLACKHOLE:
	            case MySqlParser.CSV:
	            case MySqlParser.FEDERATED:
	            case MySqlParser.INNODB:
	            case MySqlParser.MEMORY:
	            case MySqlParser.MRG_MYISAM:
	            case MySqlParser.MYISAM:
	            case MySqlParser.NDB:
	            case MySqlParser.NDBCLUSTER:
	            case MySqlParser.PERFORMANCE_SCHEMA:
	            case MySqlParser.TOKUDB:
	            case MySqlParser.REPEATABLE:
	            case MySqlParser.COMMITTED:
	            case MySqlParser.UNCOMMITTED:
	            case MySqlParser.SERIALIZABLE:
	            case MySqlParser.GEOMETRYCOLLECTION:
	            case MySqlParser.LINESTRING:
	            case MySqlParser.MULTILINESTRING:
	            case MySqlParser.MULTIPOINT:
	            case MySqlParser.MULTIPOLYGON:
	            case MySqlParser.POINT:
	            case MySqlParser.POLYGON:
	            case MySqlParser.ABS:
	            case MySqlParser.ACOS:
	            case MySqlParser.ADDDATE:
	            case MySqlParser.ADDTIME:
	            case MySqlParser.AES_DECRYPT:
	            case MySqlParser.AES_ENCRYPT:
	            case MySqlParser.AREA:
	            case MySqlParser.ASBINARY:
	            case MySqlParser.ASIN:
	            case MySqlParser.ASTEXT:
	            case MySqlParser.ASWKB:
	            case MySqlParser.ASWKT:
	            case MySqlParser.ASYMMETRIC_DECRYPT:
	            case MySqlParser.ASYMMETRIC_DERIVE:
	            case MySqlParser.ASYMMETRIC_ENCRYPT:
	            case MySqlParser.ASYMMETRIC_SIGN:
	            case MySqlParser.ASYMMETRIC_VERIFY:
	            case MySqlParser.ATAN:
	            case MySqlParser.ATAN2:
	            case MySqlParser.BENCHMARK:
	            case MySqlParser.BIN:
	            case MySqlParser.BIT_COUNT:
	            case MySqlParser.BIT_LENGTH:
	            case MySqlParser.BUFFER:
	            case MySqlParser.CATALOG_NAME:
	            case MySqlParser.CEIL:
	            case MySqlParser.CEILING:
	            case MySqlParser.CENTROID:
	            case MySqlParser.CHARACTER_LENGTH:
	            case MySqlParser.CHARSET:
	            case MySqlParser.CHAR_LENGTH:
	            case MySqlParser.COERCIBILITY:
	            case MySqlParser.COLLATION:
	            case MySqlParser.COMPRESS:
	            case MySqlParser.CONCAT:
	            case MySqlParser.CONCAT_WS:
	            case MySqlParser.CONNECTION_ID:
	            case MySqlParser.CONV:
	            case MySqlParser.CONVERT_TZ:
	            case MySqlParser.COS:
	            case MySqlParser.COT:
	            case MySqlParser.CRC32:
	            case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
	            case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
	            case MySqlParser.CREATE_DH_PARAMETERS:
	            case MySqlParser.CREATE_DIGEST:
	            case MySqlParser.CROSSES:
	            case MySqlParser.DATEDIFF:
	            case MySqlParser.DATE_FORMAT:
	            case MySqlParser.DAYNAME:
	            case MySqlParser.DAYOFMONTH:
	            case MySqlParser.DAYOFWEEK:
	            case MySqlParser.DAYOFYEAR:
	            case MySqlParser.DECODE:
	            case MySqlParser.DEGREES:
	            case MySqlParser.DES_DECRYPT:
	            case MySqlParser.DES_ENCRYPT:
	            case MySqlParser.DIMENSION:
	            case MySqlParser.DISJOINT:
	            case MySqlParser.ELT:
	            case MySqlParser.ENCODE:
	            case MySqlParser.ENCRYPT:
	            case MySqlParser.ENDPOINT:
	            case MySqlParser.ENVELOPE:
	            case MySqlParser.EQUALS:
	            case MySqlParser.EXP:
	            case MySqlParser.EXPORT_SET:
	            case MySqlParser.EXTERIORRING:
	            case MySqlParser.EXTRACTVALUE:
	            case MySqlParser.FIELD:
	            case MySqlParser.FIND_IN_SET:
	            case MySqlParser.FLOOR:
	            case MySqlParser.FORMAT:
	            case MySqlParser.FOUND_ROWS:
	            case MySqlParser.FROM_BASE64:
	            case MySqlParser.FROM_DAYS:
	            case MySqlParser.FROM_UNIXTIME:
	            case MySqlParser.GEOMCOLLFROMTEXT:
	            case MySqlParser.GEOMCOLLFROMWKB:
	            case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
	            case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
	            case MySqlParser.GEOMETRYFROMTEXT:
	            case MySqlParser.GEOMETRYFROMWKB:
	            case MySqlParser.GEOMETRYN:
	            case MySqlParser.GEOMETRYTYPE:
	            case MySqlParser.GEOMFROMTEXT:
	            case MySqlParser.GEOMFROMWKB:
	            case MySqlParser.GET_FORMAT:
	            case MySqlParser.GET_LOCK:
	            case MySqlParser.GLENGTH:
	            case MySqlParser.GREATEST:
	            case MySqlParser.GTID_SUBSET:
	            case MySqlParser.GTID_SUBTRACT:
	            case MySqlParser.HEX:
	            case MySqlParser.IFNULL:
	            case MySqlParser.INET6_ATON:
	            case MySqlParser.INET6_NTOA:
	            case MySqlParser.INET_ATON:
	            case MySqlParser.INET_NTOA:
	            case MySqlParser.INSTR:
	            case MySqlParser.INTERIORRINGN:
	            case MySqlParser.INTERSECTS:
	            case MySqlParser.ISCLOSED:
	            case MySqlParser.ISEMPTY:
	            case MySqlParser.ISNULL:
	            case MySqlParser.ISSIMPLE:
	            case MySqlParser.IS_FREE_LOCK:
	            case MySqlParser.IS_IPV4:
	            case MySqlParser.IS_IPV4_COMPAT:
	            case MySqlParser.IS_IPV4_MAPPED:
	            case MySqlParser.IS_IPV6:
	            case MySqlParser.IS_USED_LOCK:
	            case MySqlParser.LAST_INSERT_ID:
	            case MySqlParser.LCASE:
	            case MySqlParser.LEAST:
	            case MySqlParser.LENGTH:
	            case MySqlParser.LINEFROMTEXT:
	            case MySqlParser.LINEFROMWKB:
	            case MySqlParser.LINESTRINGFROMTEXT:
	            case MySqlParser.LINESTRINGFROMWKB:
	            case MySqlParser.LN:
	            case MySqlParser.LOAD_FILE:
	            case MySqlParser.LOCATE:
	            case MySqlParser.LOG:
	            case MySqlParser.LOG10:
	            case MySqlParser.LOG2:
	            case MySqlParser.LOWER:
	            case MySqlParser.LPAD:
	            case MySqlParser.LTRIM:
	            case MySqlParser.MAKEDATE:
	            case MySqlParser.MAKETIME:
	            case MySqlParser.MAKE_SET:
	            case MySqlParser.MASTER_POS_WAIT:
	            case MySqlParser.MBRCONTAINS:
	            case MySqlParser.MBRDISJOINT:
	            case MySqlParser.MBREQUAL:
	            case MySqlParser.MBRINTERSECTS:
	            case MySqlParser.MBROVERLAPS:
	            case MySqlParser.MBRTOUCHES:
	            case MySqlParser.MBRWITHIN:
	            case MySqlParser.MD5:
	            case MySqlParser.MLINEFROMTEXT:
	            case MySqlParser.MLINEFROMWKB:
	            case MySqlParser.MONTHNAME:
	            case MySqlParser.MPOINTFROMTEXT:
	            case MySqlParser.MPOINTFROMWKB:
	            case MySqlParser.MPOLYFROMTEXT:
	            case MySqlParser.MPOLYFROMWKB:
	            case MySqlParser.MULTILINESTRINGFROMTEXT:
	            case MySqlParser.MULTILINESTRINGFROMWKB:
	            case MySqlParser.MULTIPOINTFROMTEXT:
	            case MySqlParser.MULTIPOINTFROMWKB:
	            case MySqlParser.MULTIPOLYGONFROMTEXT:
	            case MySqlParser.MULTIPOLYGONFROMWKB:
	            case MySqlParser.NAME_CONST:
	            case MySqlParser.NULLIF:
	            case MySqlParser.NUMGEOMETRIES:
	            case MySqlParser.NUMINTERIORRINGS:
	            case MySqlParser.NUMPOINTS:
	            case MySqlParser.OCT:
	            case MySqlParser.OCTET_LENGTH:
	            case MySqlParser.ORD:
	            case MySqlParser.OVERLAPS:
	            case MySqlParser.PERIOD_ADD:
	            case MySqlParser.PERIOD_DIFF:
	            case MySqlParser.PI:
	            case MySqlParser.POINTFROMTEXT:
	            case MySqlParser.POINTFROMWKB:
	            case MySqlParser.POINTN:
	            case MySqlParser.POLYFROMTEXT:
	            case MySqlParser.POLYFROMWKB:
	            case MySqlParser.POLYGONFROMTEXT:
	            case MySqlParser.POLYGONFROMWKB:
	            case MySqlParser.POW:
	            case MySqlParser.POWER:
	            case MySqlParser.QUOTE:
	            case MySqlParser.RADIANS:
	            case MySqlParser.RAND:
	            case MySqlParser.RANDOM_BYTES:
	            case MySqlParser.RELEASE_LOCK:
	            case MySqlParser.REVERSE:
	            case MySqlParser.ROUND:
	            case MySqlParser.ROW_COUNT:
	            case MySqlParser.RPAD:
	            case MySqlParser.RTRIM:
	            case MySqlParser.SEC_TO_TIME:
	            case MySqlParser.SESSION_USER:
	            case MySqlParser.SHA:
	            case MySqlParser.SHA1:
	            case MySqlParser.SHA2:
	            case MySqlParser.SCHEMA_NAME:
	            case MySqlParser.SIGN:
	            case MySqlParser.SIN:
	            case MySqlParser.SLEEP:
	            case MySqlParser.SOUNDEX:
	            case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
	            case MySqlParser.SQRT:
	            case MySqlParser.SRID:
	            case MySqlParser.STARTPOINT:
	            case MySqlParser.STRCMP:
	            case MySqlParser.STR_TO_DATE:
	            case MySqlParser.ST_AREA:
	            case MySqlParser.ST_ASBINARY:
	            case MySqlParser.ST_ASTEXT:
	            case MySqlParser.ST_ASWKB:
	            case MySqlParser.ST_ASWKT:
	            case MySqlParser.ST_BUFFER:
	            case MySqlParser.ST_CENTROID:
	            case MySqlParser.ST_CONTAINS:
	            case MySqlParser.ST_CROSSES:
	            case MySqlParser.ST_DIFFERENCE:
	            case MySqlParser.ST_DIMENSION:
	            case MySqlParser.ST_DISJOINT:
	            case MySqlParser.ST_DISTANCE:
	            case MySqlParser.ST_ENDPOINT:
	            case MySqlParser.ST_ENVELOPE:
	            case MySqlParser.ST_EQUALS:
	            case MySqlParser.ST_EXTERIORRING:
	            case MySqlParser.ST_GEOMCOLLFROMTEXT:
	            case MySqlParser.ST_GEOMCOLLFROMTXT:
	            case MySqlParser.ST_GEOMCOLLFROMWKB:
	            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
	            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
	            case MySqlParser.ST_GEOMETRYFROMTEXT:
	            case MySqlParser.ST_GEOMETRYFROMWKB:
	            case MySqlParser.ST_GEOMETRYN:
	            case MySqlParser.ST_GEOMETRYTYPE:
	            case MySqlParser.ST_GEOMFROMTEXT:
	            case MySqlParser.ST_GEOMFROMWKB:
	            case MySqlParser.ST_INTERIORRINGN:
	            case MySqlParser.ST_INTERSECTION:
	            case MySqlParser.ST_INTERSECTS:
	            case MySqlParser.ST_ISCLOSED:
	            case MySqlParser.ST_ISEMPTY:
	            case MySqlParser.ST_ISSIMPLE:
	            case MySqlParser.ST_LINEFROMTEXT:
	            case MySqlParser.ST_LINEFROMWKB:
	            case MySqlParser.ST_LINESTRINGFROMTEXT:
	            case MySqlParser.ST_LINESTRINGFROMWKB:
	            case MySqlParser.ST_NUMGEOMETRIES:
	            case MySqlParser.ST_NUMINTERIORRING:
	            case MySqlParser.ST_NUMINTERIORRINGS:
	            case MySqlParser.ST_NUMPOINTS:
	            case MySqlParser.ST_OVERLAPS:
	            case MySqlParser.ST_POINTFROMTEXT:
	            case MySqlParser.ST_POINTFROMWKB:
	            case MySqlParser.ST_POINTN:
	            case MySqlParser.ST_POLYFROMTEXT:
	            case MySqlParser.ST_POLYFROMWKB:
	            case MySqlParser.ST_POLYGONFROMTEXT:
	            case MySqlParser.ST_POLYGONFROMWKB:
	            case MySqlParser.ST_SRID:
	            case MySqlParser.ST_STARTPOINT:
	            case MySqlParser.ST_SYMDIFFERENCE:
	            case MySqlParser.ST_TOUCHES:
	            case MySqlParser.ST_UNION:
	            case MySqlParser.ST_WITHIN:
	            case MySqlParser.ST_X:
	            case MySqlParser.ST_Y:
	            case MySqlParser.SUBDATE:
	            case MySqlParser.SUBSTRING_INDEX:
	            case MySqlParser.SUBTIME:
	            case MySqlParser.SYSTEM_USER:
	            case MySqlParser.TAN:
	            case MySqlParser.TIMEDIFF:
	            case MySqlParser.TIMESTAMPADD:
	            case MySqlParser.TIMESTAMPDIFF:
	            case MySqlParser.TIME_FORMAT:
	            case MySqlParser.TIME_TO_SEC:
	            case MySqlParser.TOUCHES:
	            case MySqlParser.TO_BASE64:
	            case MySqlParser.TO_DAYS:
	            case MySqlParser.TO_SECONDS:
	            case MySqlParser.UCASE:
	            case MySqlParser.UNCOMPRESS:
	            case MySqlParser.UNCOMPRESSED_LENGTH:
	            case MySqlParser.UNHEX:
	            case MySqlParser.UNIX_TIMESTAMP:
	            case MySqlParser.UPDATEXML:
	            case MySqlParser.UPPER:
	            case MySqlParser.UUID:
	            case MySqlParser.UUID_SHORT:
	            case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
	            case MySqlParser.VERSION:
	            case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
	            case MySqlParser.WEEKDAY:
	            case MySqlParser.WEEKOFYEAR:
	            case MySqlParser.WEIGHT_STRING:
	            case MySqlParser.WITHIN:
	            case MySqlParser.YEARWEEK:
	            case MySqlParser.Y_FUNCTION:
	            case MySqlParser.X_FUNCTION:
	            case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
	            case MySqlParser.STRING_LITERAL:
	            case MySqlParser.ID:
	            case MySqlParser.REVERSE_QUOTE_ID:
	                this.state = 2609;
	                this.uidList();
	                break;
	            case MySqlParser.ALL:
	                this.state = 2610;
	                this.match(MySqlParser.ALL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 45:
	            localctx = new AlterByRepairPartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 45);
	            this.state = 2613;
	            this.match(MySqlParser.REPAIR);
	            this.state = 2614;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2617;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.CURRENT:
	            case MySqlParser.DATABASE:
	            case MySqlParser.DIAGNOSTICS:
	            case MySqlParser.LEFT:
	            case MySqlParser.NUMBER:
	            case MySqlParser.RIGHT:
	            case MySqlParser.STACKED:
	            case MySqlParser.DATE:
	            case MySqlParser.TIME:
	            case MySqlParser.TIMESTAMP:
	            case MySqlParser.DATETIME:
	            case MySqlParser.YEAR:
	            case MySqlParser.TEXT:
	            case MySqlParser.ENUM:
	            case MySqlParser.SERIAL:
	            case MySqlParser.JSON_VALID:
	            case MySqlParser.JSON_SCHEMA_VALID:
	            case MySqlParser.AVG:
	            case MySqlParser.BIT_AND:
	            case MySqlParser.BIT_OR:
	            case MySqlParser.BIT_XOR:
	            case MySqlParser.COUNT:
	            case MySqlParser.GROUP_CONCAT:
	            case MySqlParser.MAX:
	            case MySqlParser.MIN:
	            case MySqlParser.STD:
	            case MySqlParser.STDDEV:
	            case MySqlParser.STDDEV_POP:
	            case MySqlParser.STDDEV_SAMP:
	            case MySqlParser.SUM:
	            case MySqlParser.VAR_POP:
	            case MySqlParser.VAR_SAMP:
	            case MySqlParser.VARIANCE:
	            case MySqlParser.POSITION:
	            case MySqlParser.ACCOUNT:
	            case MySqlParser.ACTION:
	            case MySqlParser.AFTER:
	            case MySqlParser.AGGREGATE:
	            case MySqlParser.ALGORITHM:
	            case MySqlParser.ANY:
	            case MySqlParser.AT:
	            case MySqlParser.AUTHORS:
	            case MySqlParser.AUTOCOMMIT:
	            case MySqlParser.AUTOEXTEND_SIZE:
	            case MySqlParser.AUTO_INCREMENT:
	            case MySqlParser.AVG_ROW_LENGTH:
	            case MySqlParser.BEGIN:
	            case MySqlParser.BINLOG:
	            case MySqlParser.BIT:
	            case MySqlParser.BLOCK:
	            case MySqlParser.BOOL:
	            case MySqlParser.BOOLEAN:
	            case MySqlParser.BTREE:
	            case MySqlParser.CACHE:
	            case MySqlParser.CASCADED:
	            case MySqlParser.CHAIN:
	            case MySqlParser.CHANGED:
	            case MySqlParser.CHANNEL:
	            case MySqlParser.CHECKSUM:
	            case MySqlParser.PAGE_CHECKSUM:
	            case MySqlParser.CIPHER:
	            case MySqlParser.CLASS_ORIGIN:
	            case MySqlParser.CLIENT:
	            case MySqlParser.CLOSE:
	            case MySqlParser.COALESCE:
	            case MySqlParser.CODE:
	            case MySqlParser.COLUMNS:
	            case MySqlParser.COLUMN_FORMAT:
	            case MySqlParser.COLUMN_NAME:
	            case MySqlParser.COMMENT:
	            case MySqlParser.COMMIT:
	            case MySqlParser.COMPACT:
	            case MySqlParser.COMPLETION:
	            case MySqlParser.COMPRESSED:
	            case MySqlParser.COMPRESSION:
	            case MySqlParser.CONCURRENT:
	            case MySqlParser.CONNECTION:
	            case MySqlParser.CONSISTENT:
	            case MySqlParser.CONSTRAINT_CATALOG:
	            case MySqlParser.CONSTRAINT_SCHEMA:
	            case MySqlParser.CONSTRAINT_NAME:
	            case MySqlParser.CONTAINS:
	            case MySqlParser.CONTEXT:
	            case MySqlParser.CONTRIBUTORS:
	            case MySqlParser.COPY:
	            case MySqlParser.CPU:
	            case MySqlParser.CURSOR_NAME:
	            case MySqlParser.DATA:
	            case MySqlParser.DATAFILE:
	            case MySqlParser.DEALLOCATE:
	            case MySqlParser.DEFAULT_AUTH:
	            case MySqlParser.DEFINER:
	            case MySqlParser.DELAY_KEY_WRITE:
	            case MySqlParser.DES_KEY_FILE:
	            case MySqlParser.DIRECTORY:
	            case MySqlParser.DISABLE:
	            case MySqlParser.DISCARD:
	            case MySqlParser.DISK:
	            case MySqlParser.DO:
	            case MySqlParser.DUMPFILE:
	            case MySqlParser.DUPLICATE:
	            case MySqlParser.DYNAMIC:
	            case MySqlParser.ENABLE:
	            case MySqlParser.ENCRYPTION:
	            case MySqlParser.END:
	            case MySqlParser.ENDS:
	            case MySqlParser.ENGINE:
	            case MySqlParser.ENGINES:
	            case MySqlParser.ERROR:
	            case MySqlParser.ERRORS:
	            case MySqlParser.ESCAPE:
	            case MySqlParser.EVEN:
	            case MySqlParser.EVENT:
	            case MySqlParser.EVENTS:
	            case MySqlParser.EVERY:
	            case MySqlParser.EXCHANGE:
	            case MySqlParser.EXCLUSIVE:
	            case MySqlParser.EXPIRE:
	            case MySqlParser.EXPORT:
	            case MySqlParser.EXTENDED:
	            case MySqlParser.EXTENT_SIZE:
	            case MySqlParser.FAST:
	            case MySqlParser.FAULTS:
	            case MySqlParser.FIELDS:
	            case MySqlParser.FILE_BLOCK_SIZE:
	            case MySqlParser.FILTER:
	            case MySqlParser.FIRST:
	            case MySqlParser.FIXED:
	            case MySqlParser.FLUSH:
	            case MySqlParser.FOLLOWS:
	            case MySqlParser.FOUND:
	            case MySqlParser.FULL:
	            case MySqlParser.FUNCTION:
	            case MySqlParser.GENERAL:
	            case MySqlParser.GLOBAL:
	            case MySqlParser.GRANTS:
	            case MySqlParser.GROUP_REPLICATION:
	            case MySqlParser.HANDLER:
	            case MySqlParser.HASH:
	            case MySqlParser.HELP:
	            case MySqlParser.HOST:
	            case MySqlParser.HOSTS:
	            case MySqlParser.IDENTIFIED:
	            case MySqlParser.IGNORE_SERVER_IDS:
	            case MySqlParser.IMPORT:
	            case MySqlParser.INDEXES:
	            case MySqlParser.INITIAL_SIZE:
	            case MySqlParser.INPLACE:
	            case MySqlParser.INSERT_METHOD:
	            case MySqlParser.INSTALL:
	            case MySqlParser.INSTANCE:
	            case MySqlParser.INVISIBLE:
	            case MySqlParser.INVOKER:
	            case MySqlParser.IO:
	            case MySqlParser.IO_THREAD:
	            case MySqlParser.IPC:
	            case MySqlParser.ISOLATION:
	            case MySqlParser.ISSUER:
	            case MySqlParser.JSON:
	            case MySqlParser.KEY_BLOCK_SIZE:
	            case MySqlParser.LANGUAGE:
	            case MySqlParser.LAST:
	            case MySqlParser.LEAVES:
	            case MySqlParser.LESS:
	            case MySqlParser.LEVEL:
	            case MySqlParser.LIST:
	            case MySqlParser.LOCAL:
	            case MySqlParser.LOGFILE:
	            case MySqlParser.LOGS:
	            case MySqlParser.MASTER:
	            case MySqlParser.MASTER_AUTO_POSITION:
	            case MySqlParser.MASTER_CONNECT_RETRY:
	            case MySqlParser.MASTER_DELAY:
	            case MySqlParser.MASTER_HEARTBEAT_PERIOD:
	            case MySqlParser.MASTER_HOST:
	            case MySqlParser.MASTER_LOG_FILE:
	            case MySqlParser.MASTER_LOG_POS:
	            case MySqlParser.MASTER_PASSWORD:
	            case MySqlParser.MASTER_PORT:
	            case MySqlParser.MASTER_RETRY_COUNT:
	            case MySqlParser.MASTER_SSL:
	            case MySqlParser.MASTER_SSL_CA:
	            case MySqlParser.MASTER_SSL_CAPATH:
	            case MySqlParser.MASTER_SSL_CERT:
	            case MySqlParser.MASTER_SSL_CIPHER:
	            case MySqlParser.MASTER_SSL_CRL:
	            case MySqlParser.MASTER_SSL_CRLPATH:
	            case MySqlParser.MASTER_SSL_KEY:
	            case MySqlParser.MASTER_TLS_VERSION:
	            case MySqlParser.MASTER_USER:
	            case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
	            case MySqlParser.MAX_QUERIES_PER_HOUR:
	            case MySqlParser.MAX_ROWS:
	            case MySqlParser.MAX_SIZE:
	            case MySqlParser.MAX_UPDATES_PER_HOUR:
	            case MySqlParser.MAX_USER_CONNECTIONS:
	            case MySqlParser.MEDIUM:
	            case MySqlParser.MEMBER:
	            case MySqlParser.MERGE:
	            case MySqlParser.MESSAGE_TEXT:
	            case MySqlParser.MID:
	            case MySqlParser.MIGRATE:
	            case MySqlParser.MIN_ROWS:
	            case MySqlParser.MODE:
	            case MySqlParser.MODIFY:
	            case MySqlParser.MUTEX:
	            case MySqlParser.MYSQL:
	            case MySqlParser.MYSQL_ERRNO:
	            case MySqlParser.NAME:
	            case MySqlParser.NAMES:
	            case MySqlParser.NCHAR:
	            case MySqlParser.NEVER:
	            case MySqlParser.NEXT:
	            case MySqlParser.NO:
	            case MySqlParser.NODEGROUP:
	            case MySqlParser.NONE:
	            case MySqlParser.OFFLINE:
	            case MySqlParser.OFFSET:
	            case MySqlParser.OF:
	            case MySqlParser.OJ:
	            case MySqlParser.OLD_PASSWORD:
	            case MySqlParser.ONE:
	            case MySqlParser.ONLINE:
	            case MySqlParser.ONLY:
	            case MySqlParser.OPEN:
	            case MySqlParser.OPTIMIZER_COSTS:
	            case MySqlParser.OPTIONS:
	            case MySqlParser.OWNER:
	            case MySqlParser.PACK_KEYS:
	            case MySqlParser.PAGE:
	            case MySqlParser.PARSER:
	            case MySqlParser.PARTIAL:
	            case MySqlParser.PARTITIONING:
	            case MySqlParser.PARTITIONS:
	            case MySqlParser.PASSWORD:
	            case MySqlParser.PHASE:
	            case MySqlParser.PLUGIN:
	            case MySqlParser.PLUGIN_DIR:
	            case MySqlParser.PLUGINS:
	            case MySqlParser.PORT:
	            case MySqlParser.PRECEDES:
	            case MySqlParser.PREPARE:
	            case MySqlParser.PRESERVE:
	            case MySqlParser.PREV:
	            case MySqlParser.PROCESSLIST:
	            case MySqlParser.PROFILE:
	            case MySqlParser.PROFILES:
	            case MySqlParser.PROXY:
	            case MySqlParser.QUERY:
	            case MySqlParser.QUICK:
	            case MySqlParser.REBUILD:
	            case MySqlParser.RECOVER:
	            case MySqlParser.REDO_BUFFER_SIZE:
	            case MySqlParser.REDUNDANT:
	            case MySqlParser.RELAY:
	            case MySqlParser.RELAY_LOG_FILE:
	            case MySqlParser.RELAY_LOG_POS:
	            case MySqlParser.RELAYLOG:
	            case MySqlParser.REMOVE:
	            case MySqlParser.REORGANIZE:
	            case MySqlParser.REPAIR:
	            case MySqlParser.REPLICATE_DO_DB:
	            case MySqlParser.REPLICATE_DO_TABLE:
	            case MySqlParser.REPLICATE_IGNORE_DB:
	            case MySqlParser.REPLICATE_IGNORE_TABLE:
	            case MySqlParser.REPLICATE_REWRITE_DB:
	            case MySqlParser.REPLICATE_WILD_DO_TABLE:
	            case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
	            case MySqlParser.REPLICATION:
	            case MySqlParser.RESET:
	            case MySqlParser.RESUME:
	            case MySqlParser.RETURNED_SQLSTATE:
	            case MySqlParser.RETURNS:
	            case MySqlParser.ROLE:
	            case MySqlParser.ROLLBACK:
	            case MySqlParser.ROLLUP:
	            case MySqlParser.ROTATE:
	            case MySqlParser.ROW:
	            case MySqlParser.ROWS:
	            case MySqlParser.ROW_FORMAT:
	            case MySqlParser.SAVEPOINT:
	            case MySqlParser.SCHEDULE:
	            case MySqlParser.SECURITY:
	            case MySqlParser.SERVER:
	            case MySqlParser.SESSION:
	            case MySqlParser.SHARE:
	            case MySqlParser.SHARED:
	            case MySqlParser.SIGNED:
	            case MySqlParser.SIMPLE:
	            case MySqlParser.SLAVE:
	            case MySqlParser.SLOW:
	            case MySqlParser.SNAPSHOT:
	            case MySqlParser.SOCKET:
	            case MySqlParser.SOME:
	            case MySqlParser.SONAME:
	            case MySqlParser.SOUNDS:
	            case MySqlParser.SOURCE:
	            case MySqlParser.SQL_AFTER_GTIDS:
	            case MySqlParser.SQL_AFTER_MTS_GAPS:
	            case MySqlParser.SQL_BEFORE_GTIDS:
	            case MySqlParser.SQL_BUFFER_RESULT:
	            case MySqlParser.SQL_CACHE:
	            case MySqlParser.SQL_NO_CACHE:
	            case MySqlParser.SQL_THREAD:
	            case MySqlParser.START:
	            case MySqlParser.STARTS:
	            case MySqlParser.STATS_AUTO_RECALC:
	            case MySqlParser.STATS_PERSISTENT:
	            case MySqlParser.STATS_SAMPLE_PAGES:
	            case MySqlParser.STATUS:
	            case MySqlParser.STOP:
	            case MySqlParser.STORAGE:
	            case MySqlParser.STRING:
	            case MySqlParser.SUBCLASS_ORIGIN:
	            case MySqlParser.SUBJECT:
	            case MySqlParser.SUBPARTITION:
	            case MySqlParser.SUBPARTITIONS:
	            case MySqlParser.SUSPEND:
	            case MySqlParser.SWAPS:
	            case MySqlParser.SWITCHES:
	            case MySqlParser.TABLE_NAME:
	            case MySqlParser.TABLESPACE:
	            case MySqlParser.TEMPORARY:
	            case MySqlParser.TEMPTABLE:
	            case MySqlParser.THAN:
	            case MySqlParser.TRADITIONAL:
	            case MySqlParser.TRANSACTION:
	            case MySqlParser.TRANSACTIONAL:
	            case MySqlParser.TRIGGERS:
	            case MySqlParser.TRUNCATE:
	            case MySqlParser.UNDEFINED:
	            case MySqlParser.UNDOFILE:
	            case MySqlParser.UNDO_BUFFER_SIZE:
	            case MySqlParser.UNINSTALL:
	            case MySqlParser.UNKNOWN:
	            case MySqlParser.UNTIL:
	            case MySqlParser.UPGRADE:
	            case MySqlParser.USER:
	            case MySqlParser.USE_FRM:
	            case MySqlParser.USER_RESOURCES:
	            case MySqlParser.VALIDATION:
	            case MySqlParser.VALUE:
	            case MySqlParser.VARIABLES:
	            case MySqlParser.VIEW:
	            case MySqlParser.VISIBLE:
	            case MySqlParser.WAIT:
	            case MySqlParser.WARNINGS:
	            case MySqlParser.WITHOUT:
	            case MySqlParser.WORK:
	            case MySqlParser.WRAPPER:
	            case MySqlParser.X509:
	            case MySqlParser.XA:
	            case MySqlParser.XML:
	            case MySqlParser.INTERNAL:
	            case MySqlParser.QUARTER:
	            case MySqlParser.MONTH:
	            case MySqlParser.DAY:
	            case MySqlParser.HOUR:
	            case MySqlParser.MINUTE:
	            case MySqlParser.WEEK:
	            case MySqlParser.SECOND:
	            case MySqlParser.MICROSECOND:
	            case MySqlParser.TABLES:
	            case MySqlParser.ROUTINE:
	            case MySqlParser.EXECUTE:
	            case MySqlParser.FILE:
	            case MySqlParser.PROCESS:
	            case MySqlParser.RELOAD:
	            case MySqlParser.SHUTDOWN:
	            case MySqlParser.SUPER:
	            case MySqlParser.PRIVILEGES:
	            case MySqlParser.AUDIT_ADMIN:
	            case MySqlParser.BACKUP_ADMIN:
	            case MySqlParser.BINLOG_ADMIN:
	            case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
	            case MySqlParser.CLONE_ADMIN:
	            case MySqlParser.CONNECTION_ADMIN:
	            case MySqlParser.ENCRYPTION_KEY_ADMIN:
	            case MySqlParser.FIREWALL_ADMIN:
	            case MySqlParser.FIREWALL_USER:
	            case MySqlParser.GROUP_REPLICATION_ADMIN:
	            case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
	            case MySqlParser.NDB_STORED_USER:
	            case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
	            case MySqlParser.REPLICATION_APPLIER:
	            case MySqlParser.REPLICATION_SLAVE_ADMIN:
	            case MySqlParser.RESOURCE_GROUP_ADMIN:
	            case MySqlParser.RESOURCE_GROUP_USER:
	            case MySqlParser.ROLE_ADMIN:
	            case MySqlParser.SESSION_VARIABLES_ADMIN:
	            case MySqlParser.SET_USER_ID:
	            case MySqlParser.SHOW_ROUTINE:
	            case MySqlParser.SYSTEM_VARIABLES_ADMIN:
	            case MySqlParser.TABLE_ENCRYPTION_ADMIN:
	            case MySqlParser.VERSION_TOKEN_ADMIN:
	            case MySqlParser.XA_RECOVER_ADMIN:
	            case MySqlParser.ARMSCII8:
	            case MySqlParser.ASCII:
	            case MySqlParser.BIG5:
	            case MySqlParser.CP1250:
	            case MySqlParser.CP1251:
	            case MySqlParser.CP1256:
	            case MySqlParser.CP1257:
	            case MySqlParser.CP850:
	            case MySqlParser.CP852:
	            case MySqlParser.CP866:
	            case MySqlParser.CP932:
	            case MySqlParser.DEC8:
	            case MySqlParser.EUCJPMS:
	            case MySqlParser.EUCKR:
	            case MySqlParser.GB2312:
	            case MySqlParser.GBK:
	            case MySqlParser.GEOSTD8:
	            case MySqlParser.GREEK:
	            case MySqlParser.HEBREW:
	            case MySqlParser.HP8:
	            case MySqlParser.KEYBCS2:
	            case MySqlParser.KOI8R:
	            case MySqlParser.KOI8U:
	            case MySqlParser.LATIN1:
	            case MySqlParser.LATIN2:
	            case MySqlParser.LATIN5:
	            case MySqlParser.LATIN7:
	            case MySqlParser.MACCE:
	            case MySqlParser.MACROMAN:
	            case MySqlParser.SJIS:
	            case MySqlParser.SWE7:
	            case MySqlParser.TIS620:
	            case MySqlParser.UCS2:
	            case MySqlParser.UJIS:
	            case MySqlParser.UTF16:
	            case MySqlParser.UTF16LE:
	            case MySqlParser.UTF32:
	            case MySqlParser.UTF8:
	            case MySqlParser.UTF8MB3:
	            case MySqlParser.UTF8MB4:
	            case MySqlParser.ARCHIVE:
	            case MySqlParser.BLACKHOLE:
	            case MySqlParser.CSV:
	            case MySqlParser.FEDERATED:
	            case MySqlParser.INNODB:
	            case MySqlParser.MEMORY:
	            case MySqlParser.MRG_MYISAM:
	            case MySqlParser.MYISAM:
	            case MySqlParser.NDB:
	            case MySqlParser.NDBCLUSTER:
	            case MySqlParser.PERFORMANCE_SCHEMA:
	            case MySqlParser.TOKUDB:
	            case MySqlParser.REPEATABLE:
	            case MySqlParser.COMMITTED:
	            case MySqlParser.UNCOMMITTED:
	            case MySqlParser.SERIALIZABLE:
	            case MySqlParser.GEOMETRYCOLLECTION:
	            case MySqlParser.LINESTRING:
	            case MySqlParser.MULTILINESTRING:
	            case MySqlParser.MULTIPOINT:
	            case MySqlParser.MULTIPOLYGON:
	            case MySqlParser.POINT:
	            case MySqlParser.POLYGON:
	            case MySqlParser.ABS:
	            case MySqlParser.ACOS:
	            case MySqlParser.ADDDATE:
	            case MySqlParser.ADDTIME:
	            case MySqlParser.AES_DECRYPT:
	            case MySqlParser.AES_ENCRYPT:
	            case MySqlParser.AREA:
	            case MySqlParser.ASBINARY:
	            case MySqlParser.ASIN:
	            case MySqlParser.ASTEXT:
	            case MySqlParser.ASWKB:
	            case MySqlParser.ASWKT:
	            case MySqlParser.ASYMMETRIC_DECRYPT:
	            case MySqlParser.ASYMMETRIC_DERIVE:
	            case MySqlParser.ASYMMETRIC_ENCRYPT:
	            case MySqlParser.ASYMMETRIC_SIGN:
	            case MySqlParser.ASYMMETRIC_VERIFY:
	            case MySqlParser.ATAN:
	            case MySqlParser.ATAN2:
	            case MySqlParser.BENCHMARK:
	            case MySqlParser.BIN:
	            case MySqlParser.BIT_COUNT:
	            case MySqlParser.BIT_LENGTH:
	            case MySqlParser.BUFFER:
	            case MySqlParser.CATALOG_NAME:
	            case MySqlParser.CEIL:
	            case MySqlParser.CEILING:
	            case MySqlParser.CENTROID:
	            case MySqlParser.CHARACTER_LENGTH:
	            case MySqlParser.CHARSET:
	            case MySqlParser.CHAR_LENGTH:
	            case MySqlParser.COERCIBILITY:
	            case MySqlParser.COLLATION:
	            case MySqlParser.COMPRESS:
	            case MySqlParser.CONCAT:
	            case MySqlParser.CONCAT_WS:
	            case MySqlParser.CONNECTION_ID:
	            case MySqlParser.CONV:
	            case MySqlParser.CONVERT_TZ:
	            case MySqlParser.COS:
	            case MySqlParser.COT:
	            case MySqlParser.CRC32:
	            case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
	            case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
	            case MySqlParser.CREATE_DH_PARAMETERS:
	            case MySqlParser.CREATE_DIGEST:
	            case MySqlParser.CROSSES:
	            case MySqlParser.DATEDIFF:
	            case MySqlParser.DATE_FORMAT:
	            case MySqlParser.DAYNAME:
	            case MySqlParser.DAYOFMONTH:
	            case MySqlParser.DAYOFWEEK:
	            case MySqlParser.DAYOFYEAR:
	            case MySqlParser.DECODE:
	            case MySqlParser.DEGREES:
	            case MySqlParser.DES_DECRYPT:
	            case MySqlParser.DES_ENCRYPT:
	            case MySqlParser.DIMENSION:
	            case MySqlParser.DISJOINT:
	            case MySqlParser.ELT:
	            case MySqlParser.ENCODE:
	            case MySqlParser.ENCRYPT:
	            case MySqlParser.ENDPOINT:
	            case MySqlParser.ENVELOPE:
	            case MySqlParser.EQUALS:
	            case MySqlParser.EXP:
	            case MySqlParser.EXPORT_SET:
	            case MySqlParser.EXTERIORRING:
	            case MySqlParser.EXTRACTVALUE:
	            case MySqlParser.FIELD:
	            case MySqlParser.FIND_IN_SET:
	            case MySqlParser.FLOOR:
	            case MySqlParser.FORMAT:
	            case MySqlParser.FOUND_ROWS:
	            case MySqlParser.FROM_BASE64:
	            case MySqlParser.FROM_DAYS:
	            case MySqlParser.FROM_UNIXTIME:
	            case MySqlParser.GEOMCOLLFROMTEXT:
	            case MySqlParser.GEOMCOLLFROMWKB:
	            case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
	            case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
	            case MySqlParser.GEOMETRYFROMTEXT:
	            case MySqlParser.GEOMETRYFROMWKB:
	            case MySqlParser.GEOMETRYN:
	            case MySqlParser.GEOMETRYTYPE:
	            case MySqlParser.GEOMFROMTEXT:
	            case MySqlParser.GEOMFROMWKB:
	            case MySqlParser.GET_FORMAT:
	            case MySqlParser.GET_LOCK:
	            case MySqlParser.GLENGTH:
	            case MySqlParser.GREATEST:
	            case MySqlParser.GTID_SUBSET:
	            case MySqlParser.GTID_SUBTRACT:
	            case MySqlParser.HEX:
	            case MySqlParser.IFNULL:
	            case MySqlParser.INET6_ATON:
	            case MySqlParser.INET6_NTOA:
	            case MySqlParser.INET_ATON:
	            case MySqlParser.INET_NTOA:
	            case MySqlParser.INSTR:
	            case MySqlParser.INTERIORRINGN:
	            case MySqlParser.INTERSECTS:
	            case MySqlParser.ISCLOSED:
	            case MySqlParser.ISEMPTY:
	            case MySqlParser.ISNULL:
	            case MySqlParser.ISSIMPLE:
	            case MySqlParser.IS_FREE_LOCK:
	            case MySqlParser.IS_IPV4:
	            case MySqlParser.IS_IPV4_COMPAT:
	            case MySqlParser.IS_IPV4_MAPPED:
	            case MySqlParser.IS_IPV6:
	            case MySqlParser.IS_USED_LOCK:
	            case MySqlParser.LAST_INSERT_ID:
	            case MySqlParser.LCASE:
	            case MySqlParser.LEAST:
	            case MySqlParser.LENGTH:
	            case MySqlParser.LINEFROMTEXT:
	            case MySqlParser.LINEFROMWKB:
	            case MySqlParser.LINESTRINGFROMTEXT:
	            case MySqlParser.LINESTRINGFROMWKB:
	            case MySqlParser.LN:
	            case MySqlParser.LOAD_FILE:
	            case MySqlParser.LOCATE:
	            case MySqlParser.LOG:
	            case MySqlParser.LOG10:
	            case MySqlParser.LOG2:
	            case MySqlParser.LOWER:
	            case MySqlParser.LPAD:
	            case MySqlParser.LTRIM:
	            case MySqlParser.MAKEDATE:
	            case MySqlParser.MAKETIME:
	            case MySqlParser.MAKE_SET:
	            case MySqlParser.MASTER_POS_WAIT:
	            case MySqlParser.MBRCONTAINS:
	            case MySqlParser.MBRDISJOINT:
	            case MySqlParser.MBREQUAL:
	            case MySqlParser.MBRINTERSECTS:
	            case MySqlParser.MBROVERLAPS:
	            case MySqlParser.MBRTOUCHES:
	            case MySqlParser.MBRWITHIN:
	            case MySqlParser.MD5:
	            case MySqlParser.MLINEFROMTEXT:
	            case MySqlParser.MLINEFROMWKB:
	            case MySqlParser.MONTHNAME:
	            case MySqlParser.MPOINTFROMTEXT:
	            case MySqlParser.MPOINTFROMWKB:
	            case MySqlParser.MPOLYFROMTEXT:
	            case MySqlParser.MPOLYFROMWKB:
	            case MySqlParser.MULTILINESTRINGFROMTEXT:
	            case MySqlParser.MULTILINESTRINGFROMWKB:
	            case MySqlParser.MULTIPOINTFROMTEXT:
	            case MySqlParser.MULTIPOINTFROMWKB:
	            case MySqlParser.MULTIPOLYGONFROMTEXT:
	            case MySqlParser.MULTIPOLYGONFROMWKB:
	            case MySqlParser.NAME_CONST:
	            case MySqlParser.NULLIF:
	            case MySqlParser.NUMGEOMETRIES:
	            case MySqlParser.NUMINTERIORRINGS:
	            case MySqlParser.NUMPOINTS:
	            case MySqlParser.OCT:
	            case MySqlParser.OCTET_LENGTH:
	            case MySqlParser.ORD:
	            case MySqlParser.OVERLAPS:
	            case MySqlParser.PERIOD_ADD:
	            case MySqlParser.PERIOD_DIFF:
	            case MySqlParser.PI:
	            case MySqlParser.POINTFROMTEXT:
	            case MySqlParser.POINTFROMWKB:
	            case MySqlParser.POINTN:
	            case MySqlParser.POLYFROMTEXT:
	            case MySqlParser.POLYFROMWKB:
	            case MySqlParser.POLYGONFROMTEXT:
	            case MySqlParser.POLYGONFROMWKB:
	            case MySqlParser.POW:
	            case MySqlParser.POWER:
	            case MySqlParser.QUOTE:
	            case MySqlParser.RADIANS:
	            case MySqlParser.RAND:
	            case MySqlParser.RANDOM_BYTES:
	            case MySqlParser.RELEASE_LOCK:
	            case MySqlParser.REVERSE:
	            case MySqlParser.ROUND:
	            case MySqlParser.ROW_COUNT:
	            case MySqlParser.RPAD:
	            case MySqlParser.RTRIM:
	            case MySqlParser.SEC_TO_TIME:
	            case MySqlParser.SESSION_USER:
	            case MySqlParser.SHA:
	            case MySqlParser.SHA1:
	            case MySqlParser.SHA2:
	            case MySqlParser.SCHEMA_NAME:
	            case MySqlParser.SIGN:
	            case MySqlParser.SIN:
	            case MySqlParser.SLEEP:
	            case MySqlParser.SOUNDEX:
	            case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
	            case MySqlParser.SQRT:
	            case MySqlParser.SRID:
	            case MySqlParser.STARTPOINT:
	            case MySqlParser.STRCMP:
	            case MySqlParser.STR_TO_DATE:
	            case MySqlParser.ST_AREA:
	            case MySqlParser.ST_ASBINARY:
	            case MySqlParser.ST_ASTEXT:
	            case MySqlParser.ST_ASWKB:
	            case MySqlParser.ST_ASWKT:
	            case MySqlParser.ST_BUFFER:
	            case MySqlParser.ST_CENTROID:
	            case MySqlParser.ST_CONTAINS:
	            case MySqlParser.ST_CROSSES:
	            case MySqlParser.ST_DIFFERENCE:
	            case MySqlParser.ST_DIMENSION:
	            case MySqlParser.ST_DISJOINT:
	            case MySqlParser.ST_DISTANCE:
	            case MySqlParser.ST_ENDPOINT:
	            case MySqlParser.ST_ENVELOPE:
	            case MySqlParser.ST_EQUALS:
	            case MySqlParser.ST_EXTERIORRING:
	            case MySqlParser.ST_GEOMCOLLFROMTEXT:
	            case MySqlParser.ST_GEOMCOLLFROMTXT:
	            case MySqlParser.ST_GEOMCOLLFROMWKB:
	            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
	            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
	            case MySqlParser.ST_GEOMETRYFROMTEXT:
	            case MySqlParser.ST_GEOMETRYFROMWKB:
	            case MySqlParser.ST_GEOMETRYN:
	            case MySqlParser.ST_GEOMETRYTYPE:
	            case MySqlParser.ST_GEOMFROMTEXT:
	            case MySqlParser.ST_GEOMFROMWKB:
	            case MySqlParser.ST_INTERIORRINGN:
	            case MySqlParser.ST_INTERSECTION:
	            case MySqlParser.ST_INTERSECTS:
	            case MySqlParser.ST_ISCLOSED:
	            case MySqlParser.ST_ISEMPTY:
	            case MySqlParser.ST_ISSIMPLE:
	            case MySqlParser.ST_LINEFROMTEXT:
	            case MySqlParser.ST_LINEFROMWKB:
	            case MySqlParser.ST_LINESTRINGFROMTEXT:
	            case MySqlParser.ST_LINESTRINGFROMWKB:
	            case MySqlParser.ST_NUMGEOMETRIES:
	            case MySqlParser.ST_NUMINTERIORRING:
	            case MySqlParser.ST_NUMINTERIORRINGS:
	            case MySqlParser.ST_NUMPOINTS:
	            case MySqlParser.ST_OVERLAPS:
	            case MySqlParser.ST_POINTFROMTEXT:
	            case MySqlParser.ST_POINTFROMWKB:
	            case MySqlParser.ST_POINTN:
	            case MySqlParser.ST_POLYFROMTEXT:
	            case MySqlParser.ST_POLYFROMWKB:
	            case MySqlParser.ST_POLYGONFROMTEXT:
	            case MySqlParser.ST_POLYGONFROMWKB:
	            case MySqlParser.ST_SRID:
	            case MySqlParser.ST_STARTPOINT:
	            case MySqlParser.ST_SYMDIFFERENCE:
	            case MySqlParser.ST_TOUCHES:
	            case MySqlParser.ST_UNION:
	            case MySqlParser.ST_WITHIN:
	            case MySqlParser.ST_X:
	            case MySqlParser.ST_Y:
	            case MySqlParser.SUBDATE:
	            case MySqlParser.SUBSTRING_INDEX:
	            case MySqlParser.SUBTIME:
	            case MySqlParser.SYSTEM_USER:
	            case MySqlParser.TAN:
	            case MySqlParser.TIMEDIFF:
	            case MySqlParser.TIMESTAMPADD:
	            case MySqlParser.TIMESTAMPDIFF:
	            case MySqlParser.TIME_FORMAT:
	            case MySqlParser.TIME_TO_SEC:
	            case MySqlParser.TOUCHES:
	            case MySqlParser.TO_BASE64:
	            case MySqlParser.TO_DAYS:
	            case MySqlParser.TO_SECONDS:
	            case MySqlParser.UCASE:
	            case MySqlParser.UNCOMPRESS:
	            case MySqlParser.UNCOMPRESSED_LENGTH:
	            case MySqlParser.UNHEX:
	            case MySqlParser.UNIX_TIMESTAMP:
	            case MySqlParser.UPDATEXML:
	            case MySqlParser.UPPER:
	            case MySqlParser.UUID:
	            case MySqlParser.UUID_SHORT:
	            case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
	            case MySqlParser.VERSION:
	            case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
	            case MySqlParser.WEEKDAY:
	            case MySqlParser.WEEKOFYEAR:
	            case MySqlParser.WEIGHT_STRING:
	            case MySqlParser.WITHIN:
	            case MySqlParser.YEARWEEK:
	            case MySqlParser.Y_FUNCTION:
	            case MySqlParser.X_FUNCTION:
	            case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
	            case MySqlParser.STRING_LITERAL:
	            case MySqlParser.ID:
	            case MySqlParser.REVERSE_QUOTE_ID:
	                this.state = 2615;
	                this.uidList();
	                break;
	            case MySqlParser.ALL:
	                this.state = 2616;
	                this.match(MySqlParser.ALL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 46:
	            localctx = new AlterByRemovePartitioningContext(this, localctx);
	            this.enterOuterAlt(localctx, 46);
	            this.state = 2619;
	            this.match(MySqlParser.REMOVE);
	            this.state = 2620;
	            this.match(MySqlParser.PARTITIONING);
	            break;

	        case 47:
	            localctx = new AlterByUpgradePartitioningContext(this, localctx);
	            this.enterOuterAlt(localctx, 47);
	            this.state = 2621;
	            this.match(MySqlParser.UPGRADE);
	            this.state = 2622;
	            this.match(MySqlParser.PARTITIONING);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropDatabase() {
	    let localctx = new DropDatabaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, MySqlParser.RULE_dropDatabase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2625;
	        this.match(MySqlParser.DROP);
	        this.state = 2626;
	        localctx.dbFormat = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.DATABASE || _la===MySqlParser.SCHEMA)) {
	            localctx.dbFormat = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2628;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.IF) {
	            this.state = 2627;
	            this.ifExists();
	        }

	        this.state = 2630;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropEvent() {
	    let localctx = new DropEventContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, MySqlParser.RULE_dropEvent);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2632;
	        this.match(MySqlParser.DROP);
	        this.state = 2633;
	        this.match(MySqlParser.EVENT);
	        this.state = 2635;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.IF) {
	            this.state = 2634;
	            this.ifExists();
	        }

	        this.state = 2637;
	        this.fullId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropIndex() {
	    let localctx = new DropIndexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, MySqlParser.RULE_dropIndex);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2639;
	        this.match(MySqlParser.DROP);
	        this.state = 2640;
	        this.match(MySqlParser.INDEX);
	        this.state = 2642;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,336,this._ctx);
	        if(la_===1) {
	            this.state = 2641;
	            localctx.intimeAction = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.OFFLINE || _la===MySqlParser.ONLINE)) {
	                localctx.intimeAction = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 2644;
	        this.uid();
	        this.state = 2645;
	        this.match(MySqlParser.ON);
	        this.state = 2646;
	        this.tableName();
	        this.state = 2659;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,340,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2657;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case MySqlParser.ALGORITHM:
	                    this.state = 2647;
	                    this.match(MySqlParser.ALGORITHM);
	                    this.state = 2649;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===MySqlParser.EQUAL_SYMBOL) {
	                        this.state = 2648;
	                        this.match(MySqlParser.EQUAL_SYMBOL);
	                    }

	                    this.state = 2651;
	                    localctx.algType = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===MySqlParser.DEFAULT || _la===MySqlParser.COPY || _la===MySqlParser.INPLACE)) {
	                        localctx.algType = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    break;
	                case MySqlParser.LOCK:
	                    this.state = 2652;
	                    this.match(MySqlParser.LOCK);
	                    this.state = 2654;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===MySqlParser.EQUAL_SYMBOL) {
	                        this.state = 2653;
	                        this.match(MySqlParser.EQUAL_SYMBOL);
	                    }

	                    this.state = 2656;
	                    localctx.lockType = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===MySqlParser.DEFAULT || _la===MySqlParser.EXCLUSIVE || _la===MySqlParser.NONE || _la===MySqlParser.SHARED)) {
	                        localctx.lockType = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 2661;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,340,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropLogfileGroup() {
	    let localctx = new DropLogfileGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, MySqlParser.RULE_dropLogfileGroup);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2662;
	        this.match(MySqlParser.DROP);
	        this.state = 2663;
	        this.match(MySqlParser.LOGFILE);
	        this.state = 2664;
	        this.match(MySqlParser.GROUP);
	        this.state = 2665;
	        this.uid();
	        this.state = 2666;
	        this.match(MySqlParser.ENGINE);
	        this.state = 2667;
	        this.match(MySqlParser.EQUAL_SYMBOL);
	        this.state = 2668;
	        this.engineName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropProcedure() {
	    let localctx = new DropProcedureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, MySqlParser.RULE_dropProcedure);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2670;
	        this.match(MySqlParser.DROP);
	        this.state = 2671;
	        this.match(MySqlParser.PROCEDURE);
	        this.state = 2673;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.IF) {
	            this.state = 2672;
	            this.ifExists();
	        }

	        this.state = 2675;
	        this.fullId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropFunction() {
	    let localctx = new DropFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, MySqlParser.RULE_dropFunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2677;
	        this.match(MySqlParser.DROP);
	        this.state = 2678;
	        this.match(MySqlParser.FUNCTION);
	        this.state = 2680;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.IF) {
	            this.state = 2679;
	            this.ifExists();
	        }

	        this.state = 2682;
	        this.fullId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropServer() {
	    let localctx = new DropServerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, MySqlParser.RULE_dropServer);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2684;
	        this.match(MySqlParser.DROP);
	        this.state = 2685;
	        this.match(MySqlParser.SERVER);
	        this.state = 2687;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.IF) {
	            this.state = 2686;
	            this.ifExists();
	        }

	        this.state = 2689;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropTable() {
	    let localctx = new DropTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, MySqlParser.RULE_dropTable);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2691;
	        this.match(MySqlParser.DROP);
	        this.state = 2693;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.TEMPORARY) {
	            this.state = 2692;
	            this.match(MySqlParser.TEMPORARY);
	        }

	        this.state = 2695;
	        this.match(MySqlParser.TABLE);
	        this.state = 2697;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.IF) {
	            this.state = 2696;
	            this.ifExists();
	        }

	        this.state = 2699;
	        this.tables();
	        this.state = 2701;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.CASCADE || _la===MySqlParser.RESTRICT) {
	            this.state = 2700;
	            localctx.dropType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.CASCADE || _la===MySqlParser.RESTRICT)) {
	                localctx.dropType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropTablespace() {
	    let localctx = new DropTablespaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, MySqlParser.RULE_dropTablespace);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2703;
	        this.match(MySqlParser.DROP);
	        this.state = 2704;
	        this.match(MySqlParser.TABLESPACE);
	        this.state = 2705;
	        this.uid();
	        this.state = 2711;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.ENGINE) {
	            this.state = 2706;
	            this.match(MySqlParser.ENGINE);
	            this.state = 2708;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.EQUAL_SYMBOL) {
	                this.state = 2707;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2710;
	            this.engineName();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropTrigger() {
	    let localctx = new DropTriggerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, MySqlParser.RULE_dropTrigger);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2713;
	        this.match(MySqlParser.DROP);
	        this.state = 2714;
	        this.match(MySqlParser.TRIGGER);
	        this.state = 2716;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.IF) {
	            this.state = 2715;
	            this.ifExists();
	        }

	        this.state = 2718;
	        this.fullId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropView() {
	    let localctx = new DropViewContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, MySqlParser.RULE_dropView);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2720;
	        this.match(MySqlParser.DROP);
	        this.state = 2721;
	        this.match(MySqlParser.VIEW);
	        this.state = 2723;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.IF) {
	            this.state = 2722;
	            this.ifExists();
	        }

	        this.state = 2725;
	        this.fullId();
	        this.state = 2730;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 2726;
	            this.match(MySqlParser.COMMA);
	            this.state = 2727;
	            this.fullId();
	            this.state = 2732;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2734;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.CASCADE || _la===MySqlParser.RESTRICT) {
	            this.state = 2733;
	            localctx.dropType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.CASCADE || _la===MySqlParser.RESTRICT)) {
	                localctx.dropType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	renameTable() {
	    let localctx = new RenameTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, MySqlParser.RULE_renameTable);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2736;
	        this.match(MySqlParser.RENAME);
	        this.state = 2737;
	        this.match(MySqlParser.TABLE);
	        this.state = 2738;
	        this.renameTableClause();
	        this.state = 2743;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 2739;
	            this.match(MySqlParser.COMMA);
	            this.state = 2740;
	            this.renameTableClause();
	            this.state = 2745;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	renameTableClause() {
	    let localctx = new RenameTableClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, MySqlParser.RULE_renameTableClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2746;
	        this.tableName();
	        this.state = 2747;
	        this.match(MySqlParser.TO);
	        this.state = 2748;
	        this.tableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	truncateTable() {
	    let localctx = new TruncateTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, MySqlParser.RULE_truncateTable);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2750;
	        this.match(MySqlParser.TRUNCATE);
	        this.state = 2752;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.TABLE) {
	            this.state = 2751;
	            this.match(MySqlParser.TABLE);
	        }

	        this.state = 2754;
	        this.tableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callStatement() {
	    let localctx = new CallStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, MySqlParser.RULE_callStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2756;
	        this.match(MySqlParser.CALL);
	        this.state = 2757;
	        this.fullId();
	        this.state = 2764;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,356,this._ctx);
	        if(la_===1) {
	            this.state = 2758;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2761;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,355,this._ctx);
	            if(la_===1) {
	                this.state = 2759;
	                this.constants();

	            } else if(la_===2) {
	                this.state = 2760;
	                this.expressions();

	            }
	            this.state = 2763;
	            this.match(MySqlParser.RR_BRACKET);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteStatement() {
	    let localctx = new DeleteStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, MySqlParser.RULE_deleteStatement);
	    try {
	        this.state = 2768;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,357,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2766;
	            this.singleDeleteStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2767;
	            this.multipleDeleteStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	doStatement() {
	    let localctx = new DoStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, MySqlParser.RULE_doStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2770;
	        this.match(MySqlParser.DO);
	        this.state = 2771;
	        this.expressions();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	handlerStatement() {
	    let localctx = new HandlerStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, MySqlParser.RULE_handlerStatement);
	    try {
	        this.state = 2777;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,358,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2773;
	            this.handlerOpenStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2774;
	            this.handlerReadIndexStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2775;
	            this.handlerReadStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2776;
	            this.handlerCloseStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertStatement() {
	    let localctx = new InsertStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, MySqlParser.RULE_insertStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2779;
	        this.match(MySqlParser.INSERT);
	        this.state = 2781;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.DELAYED || _la===MySqlParser.HIGH_PRIORITY || _la===MySqlParser.LOW_PRIORITY) {
	            this.state = 2780;
	            localctx.priority = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DELAYED || _la===MySqlParser.HIGH_PRIORITY || _la===MySqlParser.LOW_PRIORITY)) {
	                localctx.priority = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 2784;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.IGNORE) {
	            this.state = 2783;
	            this.match(MySqlParser.IGNORE);
	        }

	        this.state = 2787;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.INTO) {
	            this.state = 2786;
	            this.match(MySqlParser.INTO);
	        }

	        this.state = 2789;
	        this.tableName();
	        this.state = 2796;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.PARTITION) {
	            this.state = 2790;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2791;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2793;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySqlParser.CURRENT - 32)) | (1 << (MySqlParser.DATABASE - 32)) | (1 << (MySqlParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySqlParser.LEFT || _la===MySqlParser.NUMBER || _la===MySqlParser.RIGHT || _la===MySqlParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.TIMESTAMP - 199)) | (1 << (MySqlParser.DATETIME - 199)) | (1 << (MySqlParser.YEAR - 199)) | (1 << (MySqlParser.TEXT - 199)) | (1 << (MySqlParser.ENUM - 199)) | (1 << (MySqlParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.JSON_VALID - 233)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySqlParser.AVG - 233)) | (1 << (MySqlParser.BIT_AND - 233)) | (1 << (MySqlParser.BIT_OR - 233)) | (1 << (MySqlParser.BIT_XOR - 233)) | (1 << (MySqlParser.COUNT - 233)) | (1 << (MySqlParser.GROUP_CONCAT - 233)) | (1 << (MySqlParser.MAX - 233)) | (1 << (MySqlParser.MIN - 233)) | (1 << (MySqlParser.STD - 233)) | (1 << (MySqlParser.STDDEV - 233)) | (1 << (MySqlParser.STDDEV_POP - 233)) | (1 << (MySqlParser.STDDEV_SAMP - 233)) | (1 << (MySqlParser.SUM - 233)) | (1 << (MySqlParser.VAR_POP - 233)) | (1 << (MySqlParser.VAR_SAMP - 233)) | (1 << (MySqlParser.VARIANCE - 233)) | (1 << (MySqlParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySqlParser.ACCOUNT - 270)) | (1 << (MySqlParser.ACTION - 270)) | (1 << (MySqlParser.AFTER - 270)) | (1 << (MySqlParser.AGGREGATE - 270)) | (1 << (MySqlParser.ALGORITHM - 270)) | (1 << (MySqlParser.ANY - 270)) | (1 << (MySqlParser.AT - 270)) | (1 << (MySqlParser.AUTHORS - 270)) | (1 << (MySqlParser.AUTOCOMMIT - 270)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySqlParser.AUTO_INCREMENT - 270)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 270)) | (1 << (MySqlParser.BEGIN - 270)) | (1 << (MySqlParser.BINLOG - 270)) | (1 << (MySqlParser.BIT - 270)) | (1 << (MySqlParser.BLOCK - 270)) | (1 << (MySqlParser.BOOL - 270)) | (1 << (MySqlParser.BOOLEAN - 270)) | (1 << (MySqlParser.BTREE - 270)) | (1 << (MySqlParser.CACHE - 270)) | (1 << (MySqlParser.CASCADED - 270)) | (1 << (MySqlParser.CHAIN - 270)) | (1 << (MySqlParser.CHANGED - 270)) | (1 << (MySqlParser.CHANNEL - 270)) | (1 << (MySqlParser.CHECKSUM - 270)) | (1 << (MySqlParser.PAGE_CHECKSUM - 270)) | (1 << (MySqlParser.CIPHER - 270)) | (1 << (MySqlParser.CLASS_ORIGIN - 270)) | (1 << (MySqlParser.CLIENT - 270)) | (1 << (MySqlParser.CLOSE - 270)) | (1 << (MySqlParser.COALESCE - 270)) | (1 << (MySqlParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySqlParser.COLUMNS - 302)) | (1 << (MySqlParser.COLUMN_FORMAT - 302)) | (1 << (MySqlParser.COLUMN_NAME - 302)) | (1 << (MySqlParser.COMMENT - 302)) | (1 << (MySqlParser.COMMIT - 302)) | (1 << (MySqlParser.COMPACT - 302)) | (1 << (MySqlParser.COMPLETION - 302)) | (1 << (MySqlParser.COMPRESSED - 302)) | (1 << (MySqlParser.COMPRESSION - 302)) | (1 << (MySqlParser.CONCURRENT - 302)) | (1 << (MySqlParser.CONNECTION - 302)) | (1 << (MySqlParser.CONSISTENT - 302)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySqlParser.CONSTRAINT_NAME - 302)) | (1 << (MySqlParser.CONTAINS - 302)) | (1 << (MySqlParser.CONTEXT - 302)) | (1 << (MySqlParser.CONTRIBUTORS - 302)) | (1 << (MySqlParser.COPY - 302)) | (1 << (MySqlParser.CPU - 302)) | (1 << (MySqlParser.CURSOR_NAME - 302)) | (1 << (MySqlParser.DATA - 302)) | (1 << (MySqlParser.DATAFILE - 302)) | (1 << (MySqlParser.DEALLOCATE - 302)) | (1 << (MySqlParser.DEFAULT_AUTH - 302)) | (1 << (MySqlParser.DEFINER - 302)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 302)) | (1 << (MySqlParser.DES_KEY_FILE - 302)) | (1 << (MySqlParser.DIRECTORY - 302)) | (1 << (MySqlParser.DISABLE - 302)) | (1 << (MySqlParser.DISCARD - 302)) | (1 << (MySqlParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySqlParser.DO - 334)) | (1 << (MySqlParser.DUMPFILE - 334)) | (1 << (MySqlParser.DUPLICATE - 334)) | (1 << (MySqlParser.DYNAMIC - 334)) | (1 << (MySqlParser.ENABLE - 334)) | (1 << (MySqlParser.ENCRYPTION - 334)) | (1 << (MySqlParser.END - 334)) | (1 << (MySqlParser.ENDS - 334)) | (1 << (MySqlParser.ENGINE - 334)) | (1 << (MySqlParser.ENGINES - 334)) | (1 << (MySqlParser.ERROR - 334)) | (1 << (MySqlParser.ERRORS - 334)) | (1 << (MySqlParser.ESCAPE - 334)) | (1 << (MySqlParser.EVEN - 334)) | (1 << (MySqlParser.EVENT - 334)) | (1 << (MySqlParser.EVENTS - 334)) | (1 << (MySqlParser.EVERY - 334)) | (1 << (MySqlParser.EXCHANGE - 334)) | (1 << (MySqlParser.EXCLUSIVE - 334)) | (1 << (MySqlParser.EXPIRE - 334)) | (1 << (MySqlParser.EXPORT - 334)) | (1 << (MySqlParser.EXTENDED - 334)) | (1 << (MySqlParser.EXTENT_SIZE - 334)) | (1 << (MySqlParser.FAST - 334)) | (1 << (MySqlParser.FAULTS - 334)) | (1 << (MySqlParser.FIELDS - 334)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySqlParser.FILTER - 334)) | (1 << (MySqlParser.FIRST - 334)) | (1 << (MySqlParser.FIXED - 334)) | (1 << (MySqlParser.FLUSH - 334)) | (1 << (MySqlParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySqlParser.FOUND - 366)) | (1 << (MySqlParser.FULL - 366)) | (1 << (MySqlParser.FUNCTION - 366)) | (1 << (MySqlParser.GENERAL - 366)) | (1 << (MySqlParser.GLOBAL - 366)) | (1 << (MySqlParser.GRANTS - 366)) | (1 << (MySqlParser.GROUP_REPLICATION - 366)) | (1 << (MySqlParser.HANDLER - 366)) | (1 << (MySqlParser.HASH - 366)) | (1 << (MySqlParser.HELP - 366)) | (1 << (MySqlParser.HOST - 366)) | (1 << (MySqlParser.HOSTS - 366)) | (1 << (MySqlParser.IDENTIFIED - 366)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySqlParser.IMPORT - 366)) | (1 << (MySqlParser.INDEXES - 366)) | (1 << (MySqlParser.INITIAL_SIZE - 366)) | (1 << (MySqlParser.INPLACE - 366)) | (1 << (MySqlParser.INSERT_METHOD - 366)) | (1 << (MySqlParser.INSTALL - 366)) | (1 << (MySqlParser.INSTANCE - 366)) | (1 << (MySqlParser.INVISIBLE - 366)) | (1 << (MySqlParser.INVOKER - 366)) | (1 << (MySqlParser.IO - 366)) | (1 << (MySqlParser.IO_THREAD - 366)) | (1 << (MySqlParser.IPC - 366)) | (1 << (MySqlParser.ISOLATION - 366)) | (1 << (MySqlParser.ISSUER - 366)) | (1 << (MySqlParser.JSON - 366)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySqlParser.LANGUAGE - 366)) | (1 << (MySqlParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.LEAVES - 398)) | (1 << (MySqlParser.LESS - 398)) | (1 << (MySqlParser.LEVEL - 398)) | (1 << (MySqlParser.LIST - 398)) | (1 << (MySqlParser.LOCAL - 398)) | (1 << (MySqlParser.LOGFILE - 398)) | (1 << (MySqlParser.LOGS - 398)) | (1 << (MySqlParser.MASTER - 398)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySqlParser.MASTER_DELAY - 398)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySqlParser.MASTER_HOST - 398)) | (1 << (MySqlParser.MASTER_LOG_FILE - 398)) | (1 << (MySqlParser.MASTER_LOG_POS - 398)) | (1 << (MySqlParser.MASTER_PASSWORD - 398)) | (1 << (MySqlParser.MASTER_PORT - 398)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySqlParser.MASTER_SSL - 398)) | (1 << (MySqlParser.MASTER_SSL_CA - 398)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_CERT - 398)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySqlParser.MASTER_SSL_CRL - 398)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_KEY - 398)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 398)) | (1 << (MySqlParser.MASTER_USER - 398)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySqlParser.MEDIUM - 430)) | (1 << (MySqlParser.MEMBER - 430)) | (1 << (MySqlParser.MERGE - 430)) | (1 << (MySqlParser.MESSAGE_TEXT - 430)) | (1 << (MySqlParser.MID - 430)) | (1 << (MySqlParser.MIGRATE - 430)) | (1 << (MySqlParser.MIN_ROWS - 430)) | (1 << (MySqlParser.MODE - 430)) | (1 << (MySqlParser.MODIFY - 430)) | (1 << (MySqlParser.MUTEX - 430)) | (1 << (MySqlParser.MYSQL - 430)) | (1 << (MySqlParser.MYSQL_ERRNO - 430)) | (1 << (MySqlParser.NAME - 430)) | (1 << (MySqlParser.NAMES - 430)) | (1 << (MySqlParser.NCHAR - 430)) | (1 << (MySqlParser.NEVER - 430)) | (1 << (MySqlParser.NEXT - 430)) | (1 << (MySqlParser.NO - 430)) | (1 << (MySqlParser.NODEGROUP - 430)) | (1 << (MySqlParser.NONE - 430)) | (1 << (MySqlParser.OFFLINE - 430)) | (1 << (MySqlParser.OFFSET - 430)) | (1 << (MySqlParser.OF - 430)) | (1 << (MySqlParser.OJ - 430)) | (1 << (MySqlParser.OLD_PASSWORD - 430)) | (1 << (MySqlParser.ONE - 430)) | (1 << (MySqlParser.ONLINE - 430)) | (1 << (MySqlParser.ONLY - 430)) | (1 << (MySqlParser.OPEN - 430)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySqlParser.OPTIONS - 462)) | (1 << (MySqlParser.OWNER - 462)) | (1 << (MySqlParser.PACK_KEYS - 462)) | (1 << (MySqlParser.PAGE - 462)) | (1 << (MySqlParser.PARSER - 462)) | (1 << (MySqlParser.PARTIAL - 462)) | (1 << (MySqlParser.PARTITIONING - 462)) | (1 << (MySqlParser.PARTITIONS - 462)) | (1 << (MySqlParser.PASSWORD - 462)) | (1 << (MySqlParser.PHASE - 462)) | (1 << (MySqlParser.PLUGIN - 462)) | (1 << (MySqlParser.PLUGIN_DIR - 462)) | (1 << (MySqlParser.PLUGINS - 462)) | (1 << (MySqlParser.PORT - 462)) | (1 << (MySqlParser.PRECEDES - 462)) | (1 << (MySqlParser.PREPARE - 462)) | (1 << (MySqlParser.PRESERVE - 462)) | (1 << (MySqlParser.PREV - 462)) | (1 << (MySqlParser.PROCESSLIST - 462)) | (1 << (MySqlParser.PROFILE - 462)) | (1 << (MySqlParser.PROFILES - 462)) | (1 << (MySqlParser.PROXY - 462)) | (1 << (MySqlParser.QUERY - 462)) | (1 << (MySqlParser.QUICK - 462)) | (1 << (MySqlParser.REBUILD - 462)) | (1 << (MySqlParser.RECOVER - 462)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySqlParser.REDUNDANT - 462)) | (1 << (MySqlParser.RELAY - 462)) | (1 << (MySqlParser.RELAY_LOG_FILE - 462)) | (1 << (MySqlParser.RELAY_LOG_POS - 462)) | (1 << (MySqlParser.RELAYLOG - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySqlParser.REMOVE - 494)) | (1 << (MySqlParser.REORGANIZE - 494)) | (1 << (MySqlParser.REPAIR - 494)) | (1 << (MySqlParser.REPLICATE_DO_DB - 494)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATION - 494)) | (1 << (MySqlParser.RESET - 494)) | (1 << (MySqlParser.RESUME - 494)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 494)) | (1 << (MySqlParser.RETURNS - 494)) | (1 << (MySqlParser.ROLE - 494)) | (1 << (MySqlParser.ROLLBACK - 494)) | (1 << (MySqlParser.ROLLUP - 494)) | (1 << (MySqlParser.ROTATE - 494)) | (1 << (MySqlParser.ROW - 494)) | (1 << (MySqlParser.ROWS - 494)) | (1 << (MySqlParser.ROW_FORMAT - 494)) | (1 << (MySqlParser.SAVEPOINT - 494)) | (1 << (MySqlParser.SCHEDULE - 494)) | (1 << (MySqlParser.SECURITY - 494)) | (1 << (MySqlParser.SERVER - 494)) | (1 << (MySqlParser.SESSION - 494)) | (1 << (MySqlParser.SHARE - 494)) | (1 << (MySqlParser.SHARED - 494)) | (1 << (MySqlParser.SIGNED - 494)) | (1 << (MySqlParser.SIMPLE - 494)) | (1 << (MySqlParser.SLAVE - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySqlParser.SLOW - 526)) | (1 << (MySqlParser.SNAPSHOT - 526)) | (1 << (MySqlParser.SOCKET - 526)) | (1 << (MySqlParser.SOME - 526)) | (1 << (MySqlParser.SONAME - 526)) | (1 << (MySqlParser.SOUNDS - 526)) | (1 << (MySqlParser.SOURCE - 526)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySqlParser.SQL_CACHE - 526)) | (1 << (MySqlParser.SQL_NO_CACHE - 526)) | (1 << (MySqlParser.SQL_THREAD - 526)) | (1 << (MySqlParser.START - 526)) | (1 << (MySqlParser.STARTS - 526)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 526)) | (1 << (MySqlParser.STATS_PERSISTENT - 526)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySqlParser.STATUS - 526)) | (1 << (MySqlParser.STOP - 526)) | (1 << (MySqlParser.STORAGE - 526)) | (1 << (MySqlParser.STRING - 526)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySqlParser.SUBJECT - 526)) | (1 << (MySqlParser.SUBPARTITION - 526)) | (1 << (MySqlParser.SUBPARTITIONS - 526)) | (1 << (MySqlParser.SUSPEND - 526)) | (1 << (MySqlParser.SWAPS - 526)) | (1 << (MySqlParser.SWITCHES - 526)) | (1 << (MySqlParser.TABLE_NAME - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySqlParser.TABLESPACE - 558)) | (1 << (MySqlParser.TEMPORARY - 558)) | (1 << (MySqlParser.TEMPTABLE - 558)) | (1 << (MySqlParser.THAN - 558)) | (1 << (MySqlParser.TRADITIONAL - 558)) | (1 << (MySqlParser.TRANSACTION - 558)) | (1 << (MySqlParser.TRANSACTIONAL - 558)) | (1 << (MySqlParser.TRIGGERS - 558)) | (1 << (MySqlParser.TRUNCATE - 558)) | (1 << (MySqlParser.UNDEFINED - 558)) | (1 << (MySqlParser.UNDOFILE - 558)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySqlParser.UNINSTALL - 558)) | (1 << (MySqlParser.UNKNOWN - 558)) | (1 << (MySqlParser.UNTIL - 558)) | (1 << (MySqlParser.UPGRADE - 558)) | (1 << (MySqlParser.USER - 558)) | (1 << (MySqlParser.USE_FRM - 558)) | (1 << (MySqlParser.USER_RESOURCES - 558)) | (1 << (MySqlParser.VALIDATION - 558)) | (1 << (MySqlParser.VALUE - 558)) | (1 << (MySqlParser.VARIABLES - 558)) | (1 << (MySqlParser.VIEW - 558)) | (1 << (MySqlParser.VISIBLE - 558)) | (1 << (MySqlParser.WAIT - 558)) | (1 << (MySqlParser.WARNINGS - 558)) | (1 << (MySqlParser.WITHOUT - 558)) | (1 << (MySqlParser.WORK - 558)) | (1 << (MySqlParser.WRAPPER - 558)) | (1 << (MySqlParser.X509 - 558)) | (1 << (MySqlParser.XA - 558)))) !== 0) || ((((_la - 590)) & ~0x1f) == 0 && ((1 << (_la - 590)) & ((1 << (MySqlParser.XML - 590)) | (1 << (MySqlParser.INTERNAL - 590)) | (1 << (MySqlParser.QUARTER - 590)) | (1 << (MySqlParser.MONTH - 590)) | (1 << (MySqlParser.DAY - 590)) | (1 << (MySqlParser.HOUR - 590)) | (1 << (MySqlParser.MINUTE - 590)) | (1 << (MySqlParser.WEEK - 590)) | (1 << (MySqlParser.SECOND - 590)) | (1 << (MySqlParser.MICROSECOND - 590)) | (1 << (MySqlParser.TABLES - 590)) | (1 << (MySqlParser.ROUTINE - 590)) | (1 << (MySqlParser.EXECUTE - 590)) | (1 << (MySqlParser.FILE - 590)) | (1 << (MySqlParser.PROCESS - 590)) | (1 << (MySqlParser.RELOAD - 590)) | (1 << (MySqlParser.SHUTDOWN - 590)) | (1 << (MySqlParser.SUPER - 590)) | (1 << (MySqlParser.PRIVILEGES - 590)) | (1 << (MySqlParser.AUDIT_ADMIN - 590)) | (1 << (MySqlParser.BACKUP_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 590)) | (1 << (MySqlParser.CLONE_ADMIN - 590)) | (1 << (MySqlParser.CONNECTION_ADMIN - 590)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 590)) | (1 << (MySqlParser.FIREWALL_ADMIN - 590)))) !== 0) || ((((_la - 622)) & ~0x1f) == 0 && ((1 << (_la - 622)) & ((1 << (MySqlParser.FIREWALL_USER - 622)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 622)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 622)) | (1 << (MySqlParser.NDB_STORED_USER - 622)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.REPLICATION_APPLIER - 622)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 622)) | (1 << (MySqlParser.ROLE_ADMIN - 622)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.SET_USER_ID - 622)) | (1 << (MySqlParser.SHOW_ROUTINE - 622)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 622)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 622)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 622)) | (1 << (MySqlParser.ARMSCII8 - 622)) | (1 << (MySqlParser.ASCII - 622)) | (1 << (MySqlParser.BIG5 - 622)) | (1 << (MySqlParser.CP1250 - 622)) | (1 << (MySqlParser.CP1251 - 622)) | (1 << (MySqlParser.CP1256 - 622)) | (1 << (MySqlParser.CP1257 - 622)) | (1 << (MySqlParser.CP850 - 622)) | (1 << (MySqlParser.CP852 - 622)) | (1 << (MySqlParser.CP866 - 622)) | (1 << (MySqlParser.CP932 - 622)) | (1 << (MySqlParser.DEC8 - 622)) | (1 << (MySqlParser.EUCJPMS - 622)) | (1 << (MySqlParser.EUCKR - 622)) | (1 << (MySqlParser.GB2312 - 622)))) !== 0) || ((((_la - 654)) & ~0x1f) == 0 && ((1 << (_la - 654)) & ((1 << (MySqlParser.GBK - 654)) | (1 << (MySqlParser.GEOSTD8 - 654)) | (1 << (MySqlParser.GREEK - 654)) | (1 << (MySqlParser.HEBREW - 654)) | (1 << (MySqlParser.HP8 - 654)) | (1 << (MySqlParser.KEYBCS2 - 654)) | (1 << (MySqlParser.KOI8R - 654)) | (1 << (MySqlParser.KOI8U - 654)) | (1 << (MySqlParser.LATIN1 - 654)) | (1 << (MySqlParser.LATIN2 - 654)) | (1 << (MySqlParser.LATIN5 - 654)) | (1 << (MySqlParser.LATIN7 - 654)) | (1 << (MySqlParser.MACCE - 654)) | (1 << (MySqlParser.MACROMAN - 654)) | (1 << (MySqlParser.SJIS - 654)) | (1 << (MySqlParser.SWE7 - 654)) | (1 << (MySqlParser.TIS620 - 654)) | (1 << (MySqlParser.UCS2 - 654)) | (1 << (MySqlParser.UJIS - 654)) | (1 << (MySqlParser.UTF16 - 654)) | (1 << (MySqlParser.UTF16LE - 654)) | (1 << (MySqlParser.UTF32 - 654)) | (1 << (MySqlParser.UTF8 - 654)) | (1 << (MySqlParser.UTF8MB3 - 654)) | (1 << (MySqlParser.UTF8MB4 - 654)) | (1 << (MySqlParser.ARCHIVE - 654)) | (1 << (MySqlParser.BLACKHOLE - 654)) | (1 << (MySqlParser.CSV - 654)) | (1 << (MySqlParser.FEDERATED - 654)) | (1 << (MySqlParser.INNODB - 654)) | (1 << (MySqlParser.MEMORY - 654)) | (1 << (MySqlParser.MRG_MYISAM - 654)))) !== 0) || ((((_la - 686)) & ~0x1f) == 0 && ((1 << (_la - 686)) & ((1 << (MySqlParser.MYISAM - 686)) | (1 << (MySqlParser.NDB - 686)) | (1 << (MySqlParser.NDBCLUSTER - 686)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 686)) | (1 << (MySqlParser.TOKUDB - 686)) | (1 << (MySqlParser.REPEATABLE - 686)) | (1 << (MySqlParser.COMMITTED - 686)) | (1 << (MySqlParser.UNCOMMITTED - 686)) | (1 << (MySqlParser.SERIALIZABLE - 686)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 686)) | (1 << (MySqlParser.LINESTRING - 686)) | (1 << (MySqlParser.MULTILINESTRING - 686)) | (1 << (MySqlParser.MULTIPOINT - 686)) | (1 << (MySqlParser.MULTIPOLYGON - 686)) | (1 << (MySqlParser.POINT - 686)) | (1 << (MySqlParser.POLYGON - 686)) | (1 << (MySqlParser.ABS - 686)) | (1 << (MySqlParser.ACOS - 686)) | (1 << (MySqlParser.ADDDATE - 686)) | (1 << (MySqlParser.ADDTIME - 686)) | (1 << (MySqlParser.AES_DECRYPT - 686)) | (1 << (MySqlParser.AES_ENCRYPT - 686)) | (1 << (MySqlParser.AREA - 686)) | (1 << (MySqlParser.ASBINARY - 686)) | (1 << (MySqlParser.ASIN - 686)) | (1 << (MySqlParser.ASTEXT - 686)) | (1 << (MySqlParser.ASWKB - 686)) | (1 << (MySqlParser.ASWKT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 686)))) !== 0) || ((((_la - 718)) & ~0x1f) == 0 && ((1 << (_la - 718)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 718)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 718)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 718)) | (1 << (MySqlParser.ATAN - 718)) | (1 << (MySqlParser.ATAN2 - 718)) | (1 << (MySqlParser.BENCHMARK - 718)) | (1 << (MySqlParser.BIN - 718)) | (1 << (MySqlParser.BIT_COUNT - 718)) | (1 << (MySqlParser.BIT_LENGTH - 718)) | (1 << (MySqlParser.BUFFER - 718)) | (1 << (MySqlParser.CATALOG_NAME - 718)) | (1 << (MySqlParser.CEIL - 718)) | (1 << (MySqlParser.CEILING - 718)) | (1 << (MySqlParser.CENTROID - 718)) | (1 << (MySqlParser.CHARACTER_LENGTH - 718)) | (1 << (MySqlParser.CHARSET - 718)) | (1 << (MySqlParser.CHAR_LENGTH - 718)) | (1 << (MySqlParser.COERCIBILITY - 718)) | (1 << (MySqlParser.COLLATION - 718)) | (1 << (MySqlParser.COMPRESS - 718)) | (1 << (MySqlParser.CONCAT - 718)) | (1 << (MySqlParser.CONCAT_WS - 718)) | (1 << (MySqlParser.CONNECTION_ID - 718)) | (1 << (MySqlParser.CONV - 718)) | (1 << (MySqlParser.CONVERT_TZ - 718)) | (1 << (MySqlParser.COS - 718)) | (1 << (MySqlParser.COT - 718)) | (1 << (MySqlParser.CRC32 - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 718)) | (1 << (MySqlParser.CREATE_DIGEST - 718)))) !== 0) || ((((_la - 750)) & ~0x1f) == 0 && ((1 << (_la - 750)) & ((1 << (MySqlParser.CROSSES - 750)) | (1 << (MySqlParser.DATEDIFF - 750)) | (1 << (MySqlParser.DATE_FORMAT - 750)) | (1 << (MySqlParser.DAYNAME - 750)) | (1 << (MySqlParser.DAYOFMONTH - 750)) | (1 << (MySqlParser.DAYOFWEEK - 750)) | (1 << (MySqlParser.DAYOFYEAR - 750)) | (1 << (MySqlParser.DECODE - 750)) | (1 << (MySqlParser.DEGREES - 750)) | (1 << (MySqlParser.DES_DECRYPT - 750)) | (1 << (MySqlParser.DES_ENCRYPT - 750)) | (1 << (MySqlParser.DIMENSION - 750)) | (1 << (MySqlParser.DISJOINT - 750)) | (1 << (MySqlParser.ELT - 750)) | (1 << (MySqlParser.ENCODE - 750)) | (1 << (MySqlParser.ENCRYPT - 750)) | (1 << (MySqlParser.ENDPOINT - 750)) | (1 << (MySqlParser.ENVELOPE - 750)) | (1 << (MySqlParser.EQUALS - 750)) | (1 << (MySqlParser.EXP - 750)) | (1 << (MySqlParser.EXPORT_SET - 750)) | (1 << (MySqlParser.EXTERIORRING - 750)) | (1 << (MySqlParser.EXTRACTVALUE - 750)) | (1 << (MySqlParser.FIELD - 750)) | (1 << (MySqlParser.FIND_IN_SET - 750)) | (1 << (MySqlParser.FLOOR - 750)) | (1 << (MySqlParser.FORMAT - 750)) | (1 << (MySqlParser.FOUND_ROWS - 750)) | (1 << (MySqlParser.FROM_BASE64 - 750)) | (1 << (MySqlParser.FROM_DAYS - 750)) | (1 << (MySqlParser.FROM_UNIXTIME - 750)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 750)))) !== 0) || ((((_la - 782)) & ~0x1f) == 0 && ((1 << (_la - 782)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYN - 782)) | (1 << (MySqlParser.GEOMETRYTYPE - 782)) | (1 << (MySqlParser.GEOMFROMTEXT - 782)) | (1 << (MySqlParser.GEOMFROMWKB - 782)) | (1 << (MySqlParser.GET_FORMAT - 782)) | (1 << (MySqlParser.GET_LOCK - 782)) | (1 << (MySqlParser.GLENGTH - 782)) | (1 << (MySqlParser.GREATEST - 782)) | (1 << (MySqlParser.GTID_SUBSET - 782)) | (1 << (MySqlParser.GTID_SUBTRACT - 782)) | (1 << (MySqlParser.HEX - 782)) | (1 << (MySqlParser.IFNULL - 782)) | (1 << (MySqlParser.INET6_ATON - 782)) | (1 << (MySqlParser.INET6_NTOA - 782)) | (1 << (MySqlParser.INET_ATON - 782)) | (1 << (MySqlParser.INET_NTOA - 782)) | (1 << (MySqlParser.INSTR - 782)) | (1 << (MySqlParser.INTERIORRINGN - 782)) | (1 << (MySqlParser.INTERSECTS - 782)) | (1 << (MySqlParser.ISCLOSED - 782)) | (1 << (MySqlParser.ISEMPTY - 782)) | (1 << (MySqlParser.ISNULL - 782)) | (1 << (MySqlParser.ISSIMPLE - 782)) | (1 << (MySqlParser.IS_FREE_LOCK - 782)) | (1 << (MySqlParser.IS_IPV4 - 782)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 782)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 782)))) !== 0) || ((((_la - 814)) & ~0x1f) == 0 && ((1 << (_la - 814)) & ((1 << (MySqlParser.IS_IPV6 - 814)) | (1 << (MySqlParser.IS_USED_LOCK - 814)) | (1 << (MySqlParser.LAST_INSERT_ID - 814)) | (1 << (MySqlParser.LCASE - 814)) | (1 << (MySqlParser.LEAST - 814)) | (1 << (MySqlParser.LENGTH - 814)) | (1 << (MySqlParser.LINEFROMTEXT - 814)) | (1 << (MySqlParser.LINEFROMWKB - 814)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 814)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 814)) | (1 << (MySqlParser.LN - 814)) | (1 << (MySqlParser.LOAD_FILE - 814)) | (1 << (MySqlParser.LOCATE - 814)) | (1 << (MySqlParser.LOG - 814)) | (1 << (MySqlParser.LOG10 - 814)) | (1 << (MySqlParser.LOG2 - 814)) | (1 << (MySqlParser.LOWER - 814)) | (1 << (MySqlParser.LPAD - 814)) | (1 << (MySqlParser.LTRIM - 814)) | (1 << (MySqlParser.MAKEDATE - 814)) | (1 << (MySqlParser.MAKETIME - 814)) | (1 << (MySqlParser.MAKE_SET - 814)) | (1 << (MySqlParser.MASTER_POS_WAIT - 814)) | (1 << (MySqlParser.MBRCONTAINS - 814)) | (1 << (MySqlParser.MBRDISJOINT - 814)) | (1 << (MySqlParser.MBREQUAL - 814)) | (1 << (MySqlParser.MBRINTERSECTS - 814)) | (1 << (MySqlParser.MBROVERLAPS - 814)) | (1 << (MySqlParser.MBRTOUCHES - 814)) | (1 << (MySqlParser.MBRWITHIN - 814)) | (1 << (MySqlParser.MD5 - 814)) | (1 << (MySqlParser.MLINEFROMTEXT - 814)))) !== 0) || ((((_la - 846)) & ~0x1f) == 0 && ((1 << (_la - 846)) & ((1 << (MySqlParser.MLINEFROMWKB - 846)) | (1 << (MySqlParser.MONTHNAME - 846)) | (1 << (MySqlParser.MPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MPOINTFROMWKB - 846)) | (1 << (MySqlParser.MPOLYFROMTEXT - 846)) | (1 << (MySqlParser.MPOLYFROMWKB - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 846)) | (1 << (MySqlParser.NAME_CONST - 846)) | (1 << (MySqlParser.NULLIF - 846)) | (1 << (MySqlParser.NUMGEOMETRIES - 846)) | (1 << (MySqlParser.NUMINTERIORRINGS - 846)) | (1 << (MySqlParser.NUMPOINTS - 846)) | (1 << (MySqlParser.OCT - 846)) | (1 << (MySqlParser.OCTET_LENGTH - 846)) | (1 << (MySqlParser.ORD - 846)) | (1 << (MySqlParser.OVERLAPS - 846)) | (1 << (MySqlParser.PERIOD_ADD - 846)) | (1 << (MySqlParser.PERIOD_DIFF - 846)) | (1 << (MySqlParser.PI - 846)) | (1 << (MySqlParser.POINTFROMTEXT - 846)) | (1 << (MySqlParser.POINTFROMWKB - 846)) | (1 << (MySqlParser.POINTN - 846)) | (1 << (MySqlParser.POLYFROMTEXT - 846)) | (1 << (MySqlParser.POLYFROMWKB - 846)) | (1 << (MySqlParser.POLYGONFROMTEXT - 846)) | (1 << (MySqlParser.POLYGONFROMWKB - 846)) | (1 << (MySqlParser.POW - 846)))) !== 0) || ((((_la - 878)) & ~0x1f) == 0 && ((1 << (_la - 878)) & ((1 << (MySqlParser.POWER - 878)) | (1 << (MySqlParser.QUOTE - 878)) | (1 << (MySqlParser.RADIANS - 878)) | (1 << (MySqlParser.RAND - 878)) | (1 << (MySqlParser.RANDOM_BYTES - 878)) | (1 << (MySqlParser.RELEASE_LOCK - 878)) | (1 << (MySqlParser.REVERSE - 878)) | (1 << (MySqlParser.ROUND - 878)) | (1 << (MySqlParser.ROW_COUNT - 878)) | (1 << (MySqlParser.RPAD - 878)) | (1 << (MySqlParser.RTRIM - 878)) | (1 << (MySqlParser.SEC_TO_TIME - 878)) | (1 << (MySqlParser.SESSION_USER - 878)) | (1 << (MySqlParser.SHA - 878)) | (1 << (MySqlParser.SHA1 - 878)) | (1 << (MySqlParser.SHA2 - 878)) | (1 << (MySqlParser.SCHEMA_NAME - 878)) | (1 << (MySqlParser.SIGN - 878)) | (1 << (MySqlParser.SIN - 878)) | (1 << (MySqlParser.SLEEP - 878)) | (1 << (MySqlParser.SOUNDEX - 878)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 878)) | (1 << (MySqlParser.SQRT - 878)) | (1 << (MySqlParser.SRID - 878)) | (1 << (MySqlParser.STARTPOINT - 878)) | (1 << (MySqlParser.STRCMP - 878)) | (1 << (MySqlParser.STR_TO_DATE - 878)) | (1 << (MySqlParser.ST_AREA - 878)) | (1 << (MySqlParser.ST_ASBINARY - 878)) | (1 << (MySqlParser.ST_ASTEXT - 878)) | (1 << (MySqlParser.ST_ASWKB - 878)) | (1 << (MySqlParser.ST_ASWKT - 878)))) !== 0) || ((((_la - 910)) & ~0x1f) == 0 && ((1 << (_la - 910)) & ((1 << (MySqlParser.ST_BUFFER - 910)) | (1 << (MySqlParser.ST_CENTROID - 910)) | (1 << (MySqlParser.ST_CONTAINS - 910)) | (1 << (MySqlParser.ST_CROSSES - 910)) | (1 << (MySqlParser.ST_DIFFERENCE - 910)) | (1 << (MySqlParser.ST_DIMENSION - 910)) | (1 << (MySqlParser.ST_DISJOINT - 910)) | (1 << (MySqlParser.ST_DISTANCE - 910)) | (1 << (MySqlParser.ST_ENDPOINT - 910)) | (1 << (MySqlParser.ST_ENVELOPE - 910)) | (1 << (MySqlParser.ST_EQUALS - 910)) | (1 << (MySqlParser.ST_EXTERIORRING - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYN - 910)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 910)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 910)) | (1 << (MySqlParser.ST_INTERIORRINGN - 910)) | (1 << (MySqlParser.ST_INTERSECTION - 910)) | (1 << (MySqlParser.ST_INTERSECTS - 910)) | (1 << (MySqlParser.ST_ISCLOSED - 910)) | (1 << (MySqlParser.ST_ISEMPTY - 910)) | (1 << (MySqlParser.ST_ISSIMPLE - 910)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 910)) | (1 << (MySqlParser.ST_LINEFROMWKB - 910)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 910)))) !== 0) || ((((_la - 942)) & ~0x1f) == 0 && ((1 << (_la - 942)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 942)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 942)) | (1 << (MySqlParser.ST_NUMPOINTS - 942)) | (1 << (MySqlParser.ST_OVERLAPS - 942)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 942)) | (1 << (MySqlParser.ST_POINTFROMWKB - 942)) | (1 << (MySqlParser.ST_POINTN - 942)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYFROMWKB - 942)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 942)) | (1 << (MySqlParser.ST_SRID - 942)) | (1 << (MySqlParser.ST_STARTPOINT - 942)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 942)) | (1 << (MySqlParser.ST_TOUCHES - 942)) | (1 << (MySqlParser.ST_UNION - 942)) | (1 << (MySqlParser.ST_WITHIN - 942)) | (1 << (MySqlParser.ST_X - 942)) | (1 << (MySqlParser.ST_Y - 942)) | (1 << (MySqlParser.SUBDATE - 942)) | (1 << (MySqlParser.SUBSTRING_INDEX - 942)) | (1 << (MySqlParser.SUBTIME - 942)) | (1 << (MySqlParser.SYSTEM_USER - 942)) | (1 << (MySqlParser.TAN - 942)) | (1 << (MySqlParser.TIMEDIFF - 942)) | (1 << (MySqlParser.TIMESTAMPADD - 942)) | (1 << (MySqlParser.TIMESTAMPDIFF - 942)) | (1 << (MySqlParser.TIME_FORMAT - 942)) | (1 << (MySqlParser.TIME_TO_SEC - 942)) | (1 << (MySqlParser.TOUCHES - 942)))) !== 0) || ((((_la - 974)) & ~0x1f) == 0 && ((1 << (_la - 974)) & ((1 << (MySqlParser.TO_BASE64 - 974)) | (1 << (MySqlParser.TO_DAYS - 974)) | (1 << (MySqlParser.TO_SECONDS - 974)) | (1 << (MySqlParser.UCASE - 974)) | (1 << (MySqlParser.UNCOMPRESS - 974)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 974)) | (1 << (MySqlParser.UNHEX - 974)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 974)) | (1 << (MySqlParser.UPDATEXML - 974)) | (1 << (MySqlParser.UPPER - 974)) | (1 << (MySqlParser.UUID - 974)) | (1 << (MySqlParser.UUID_SHORT - 974)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 974)) | (1 << (MySqlParser.VERSION - 974)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1 << (MySqlParser.WEEKDAY - 974)) | (1 << (MySqlParser.WEEKOFYEAR - 974)) | (1 << (MySqlParser.WEIGHT_STRING - 974)) | (1 << (MySqlParser.WITHIN - 974)) | (1 << (MySqlParser.YEARWEEK - 974)) | (1 << (MySqlParser.Y_FUNCTION - 974)) | (1 << (MySqlParser.X_FUNCTION - 974)))) !== 0) || ((((_la - 1034)) & ~0x1f) == 0 && ((1 << (_la - 1034)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (MySqlParser.STRING_LITERAL - 1034)) | (1 << (MySqlParser.ID - 1034)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1034)))) !== 0)) {
	                this.state = 2792;
	                localctx.partitions = this.uidList();
	            }

	            this.state = 2795;
	            this.match(MySqlParser.RR_BRACKET);
	        }

	        this.state = 2814;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.SELECT:
	        case MySqlParser.VALUES:
	        case MySqlParser.VALUE:
	        case MySqlParser.LR_BRACKET:
	            this.state = 2802;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,364,this._ctx);
	            if(la_===1) {
	                this.state = 2798;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 2799;
	                localctx.columns = this.uidList();
	                this.state = 2800;
	                this.match(MySqlParser.RR_BRACKET);

	            }
	            this.state = 2804;
	            this.insertStatementValue();
	            break;
	        case MySqlParser.SET:
	            this.state = 2805;
	            this.match(MySqlParser.SET);
	            this.state = 2806;
	            localctx.setFirst = this.updatedElement();
	            this.state = 2811;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 2807;
	                this.match(MySqlParser.COMMA);
	                this.state = 2808;
	                localctx._updatedElement = this.updatedElement();
	                localctx.setElements.push(localctx._updatedElement);
	                this.state = 2813;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2828;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.ON) {
	            this.state = 2816;
	            this.match(MySqlParser.ON);
	            this.state = 2817;
	            this.match(MySqlParser.DUPLICATE);
	            this.state = 2818;
	            this.match(MySqlParser.KEY);
	            this.state = 2819;
	            this.match(MySqlParser.UPDATE);
	            this.state = 2820;
	            localctx.duplicatedFirst = this.updatedElement();
	            this.state = 2825;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 2821;
	                this.match(MySqlParser.COMMA);
	                this.state = 2822;
	                localctx._updatedElement = this.updatedElement();
	                localctx.duplicatedElements.push(localctx._updatedElement);
	                this.state = 2827;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loadDataStatement() {
	    let localctx = new LoadDataStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, MySqlParser.RULE_loadDataStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2830;
	        this.match(MySqlParser.LOAD);
	        this.state = 2831;
	        this.match(MySqlParser.DATA);
	        this.state = 2833;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.LOW_PRIORITY || _la===MySqlParser.CONCURRENT) {
	            this.state = 2832;
	            localctx.priority = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.LOW_PRIORITY || _la===MySqlParser.CONCURRENT)) {
	                localctx.priority = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 2836;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.LOCAL) {
	            this.state = 2835;
	            this.match(MySqlParser.LOCAL);
	        }

	        this.state = 2838;
	        this.match(MySqlParser.INFILE);
	        this.state = 2839;
	        localctx.filename = this.match(MySqlParser.STRING_LITERAL);
	        this.state = 2841;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.IGNORE || _la===MySqlParser.REPLACE) {
	            this.state = 2840;
	            localctx.violation = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.IGNORE || _la===MySqlParser.REPLACE)) {
	                localctx.violation = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 2843;
	        this.match(MySqlParser.INTO);
	        this.state = 2844;
	        this.match(MySqlParser.TABLE);
	        this.state = 2845;
	        this.tableName();
	        this.state = 2851;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.PARTITION) {
	            this.state = 2846;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2847;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2848;
	            this.uidList();
	            this.state = 2849;
	            this.match(MySqlParser.RR_BRACKET);
	        }

	        this.state = 2856;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.CHARACTER) {
	            this.state = 2853;
	            this.match(MySqlParser.CHARACTER);
	            this.state = 2854;
	            this.match(MySqlParser.SET);
	            this.state = 2855;
	            localctx.charset = this.charsetName();
	        }

	        this.state = 2864;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.COLUMNS || _la===MySqlParser.FIELDS) {
	            this.state = 2858;
	            localctx.fieldsFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.COLUMNS || _la===MySqlParser.FIELDS)) {
	                localctx.fieldsFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2860; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 2859;
	                this.selectFieldsInto();
	                this.state = 2862; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===MySqlParser.ENCLOSED || _la===MySqlParser.ESCAPED || _la===MySqlParser.OPTIONALLY || _la===MySqlParser.TERMINATED);
	        }

	        this.state = 2872;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.LINES) {
	            this.state = 2866;
	            this.match(MySqlParser.LINES);
	            this.state = 2868; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 2867;
	                this.selectLinesInto();
	                this.state = 2870; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===MySqlParser.STARTING || _la===MySqlParser.TERMINATED);
	        }

	        this.state = 2878;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.IGNORE) {
	            this.state = 2874;
	            this.match(MySqlParser.IGNORE);
	            this.state = 2875;
	            this.decimalLiteral();
	            this.state = 2876;
	            localctx.linesFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.LINES || _la===MySqlParser.ROWS)) {
	                localctx.linesFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 2891;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,380,this._ctx);
	        if(la_===1) {
	            this.state = 2880;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2881;
	            this.assignmentField();
	            this.state = 2886;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 2882;
	                this.match(MySqlParser.COMMA);
	                this.state = 2883;
	                this.assignmentField();
	                this.state = 2888;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2889;
	            this.match(MySqlParser.RR_BRACKET);

	        }
	        this.state = 2902;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,382,this._ctx);
	        if(la_===1) {
	            this.state = 2893;
	            this.match(MySqlParser.SET);
	            this.state = 2894;
	            this.updatedElement();
	            this.state = 2899;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 2895;
	                this.match(MySqlParser.COMMA);
	                this.state = 2896;
	                this.updatedElement();
	                this.state = 2901;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loadXmlStatement() {
	    let localctx = new LoadXmlStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, MySqlParser.RULE_loadXmlStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2904;
	        this.match(MySqlParser.LOAD);
	        this.state = 2905;
	        this.match(MySqlParser.XML);
	        this.state = 2907;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.LOW_PRIORITY || _la===MySqlParser.CONCURRENT) {
	            this.state = 2906;
	            localctx.priority = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.LOW_PRIORITY || _la===MySqlParser.CONCURRENT)) {
	                localctx.priority = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 2910;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.LOCAL) {
	            this.state = 2909;
	            this.match(MySqlParser.LOCAL);
	        }

	        this.state = 2912;
	        this.match(MySqlParser.INFILE);
	        this.state = 2913;
	        localctx.filename = this.match(MySqlParser.STRING_LITERAL);
	        this.state = 2915;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.IGNORE || _la===MySqlParser.REPLACE) {
	            this.state = 2914;
	            localctx.violation = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.IGNORE || _la===MySqlParser.REPLACE)) {
	                localctx.violation = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 2917;
	        this.match(MySqlParser.INTO);
	        this.state = 2918;
	        this.match(MySqlParser.TABLE);
	        this.state = 2919;
	        this.tableName();
	        this.state = 2923;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.CHARACTER) {
	            this.state = 2920;
	            this.match(MySqlParser.CHARACTER);
	            this.state = 2921;
	            this.match(MySqlParser.SET);
	            this.state = 2922;
	            localctx.charset = this.charsetName();
	        }

	        this.state = 2931;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.ROWS) {
	            this.state = 2925;
	            this.match(MySqlParser.ROWS);
	            this.state = 2926;
	            this.match(MySqlParser.IDENTIFIED);
	            this.state = 2927;
	            this.match(MySqlParser.BY);
	            this.state = 2928;
	            this.match(MySqlParser.LESS_SYMBOL);
	            this.state = 2929;
	            localctx.tag = this.match(MySqlParser.STRING_LITERAL);
	            this.state = 2930;
	            this.match(MySqlParser.GREATER_SYMBOL);
	        }

	        this.state = 2937;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.IGNORE) {
	            this.state = 2933;
	            this.match(MySqlParser.IGNORE);
	            this.state = 2934;
	            this.decimalLiteral();
	            this.state = 2935;
	            localctx.linesFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.LINES || _la===MySqlParser.ROWS)) {
	                localctx.linesFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 2950;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,390,this._ctx);
	        if(la_===1) {
	            this.state = 2939;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2940;
	            this.assignmentField();
	            this.state = 2945;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 2941;
	                this.match(MySqlParser.COMMA);
	                this.state = 2942;
	                this.assignmentField();
	                this.state = 2947;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2948;
	            this.match(MySqlParser.RR_BRACKET);

	        }
	        this.state = 2961;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,392,this._ctx);
	        if(la_===1) {
	            this.state = 2952;
	            this.match(MySqlParser.SET);
	            this.state = 2953;
	            this.updatedElement();
	            this.state = 2958;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 2954;
	                this.match(MySqlParser.COMMA);
	                this.state = 2955;
	                this.updatedElement();
	                this.state = 2960;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replaceStatement() {
	    let localctx = new ReplaceStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, MySqlParser.RULE_replaceStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2963;
	        this.match(MySqlParser.REPLACE);
	        this.state = 2965;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.DELAYED || _la===MySqlParser.LOW_PRIORITY) {
	            this.state = 2964;
	            localctx.priority = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DELAYED || _la===MySqlParser.LOW_PRIORITY)) {
	                localctx.priority = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 2968;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.INTO) {
	            this.state = 2967;
	            this.match(MySqlParser.INTO);
	        }

	        this.state = 2970;
	        this.tableName();
	        this.state = 2976;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.PARTITION) {
	            this.state = 2971;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2972;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2973;
	            localctx.partitions = this.uidList();
	            this.state = 2974;
	            this.match(MySqlParser.RR_BRACKET);
	        }

	        this.state = 2994;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.SELECT:
	        case MySqlParser.VALUES:
	        case MySqlParser.VALUE:
	        case MySqlParser.LR_BRACKET:
	            this.state = 2982;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,396,this._ctx);
	            if(la_===1) {
	                this.state = 2978;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 2979;
	                localctx.columns = this.uidList();
	                this.state = 2980;
	                this.match(MySqlParser.RR_BRACKET);

	            }
	            this.state = 2984;
	            this.insertStatementValue();
	            break;
	        case MySqlParser.SET:
	            this.state = 2985;
	            this.match(MySqlParser.SET);
	            this.state = 2986;
	            localctx.setFirst = this.updatedElement();
	            this.state = 2991;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 2987;
	                this.match(MySqlParser.COMMA);
	                this.state = 2988;
	                localctx._updatedElement = this.updatedElement();
	                localctx.setElements.push(localctx._updatedElement);
	                this.state = 2993;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectStatement() {
	    let localctx = new SelectStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, MySqlParser.RULE_selectStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 3051;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,414,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SimpleSelectContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2996;
	            this.querySpecification();
	            this.state = 2998;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,399,this._ctx);
	            if(la_===1) {
	                this.state = 2997;
	                this.lockClause();

	            }
	            break;

	        case 2:
	            localctx = new ParenthesisSelectContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3000;
	            this.queryExpression();
	            this.state = 3002;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,400,this._ctx);
	            if(la_===1) {
	                this.state = 3001;
	                this.lockClause();

	            }
	            break;

	        case 3: {
	            localctx = new UnionSelectContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3004;
	            this.querySpecificationNointo();
	            this.state = 3006; 
	            this._errHandler.sync(this);
	            let _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 3005;
	            		this.unionStatement();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 3008; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,401, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 3018;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.UNION) {
	                this.state = 3010;
	                this.match(MySqlParser.UNION);
	                this.state = 3012;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===MySqlParser.ALL || _la===MySqlParser.DISTINCT) {
	                    this.state = 3011;
	                    localctx.unionType = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===MySqlParser.ALL || _la===MySqlParser.DISTINCT)) {
	                        localctx.unionType = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                }

	                this.state = 3016;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case MySqlParser.SELECT:
	                    this.state = 3014;
	                    this.querySpecification();
	                    break;
	                case MySqlParser.LR_BRACKET:
	                    this.state = 3015;
	                    this.queryExpression();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	            }

	            this.state = 3021;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.ORDER) {
	                this.state = 3020;
	                this.orderByClause();
	            }

	            this.state = 3024;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.LIMIT) {
	                this.state = 3023;
	                this.limitClause();
	            }

	            this.state = 3027;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,407,this._ctx);
	            if(la_===1) {
	                this.state = 3026;
	                this.lockClause();

	            }
	            break;
              }
	        case 4: {
	            localctx = new UnionParenthesisSelectContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3029;
	            this.queryExpressionNointo();
	            this.state = 3031; 
	            this._errHandler.sync(this);
	            let _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 3030;
	            		this.unionParenthesis();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 3033; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,408, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 3040;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.UNION) {
	                this.state = 3035;
	                this.match(MySqlParser.UNION);
	                this.state = 3037;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===MySqlParser.ALL || _la===MySqlParser.DISTINCT) {
	                    this.state = 3036;
	                    localctx.unionType = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===MySqlParser.ALL || _la===MySqlParser.DISTINCT)) {
	                        localctx.unionType = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                }

	                this.state = 3039;
	                this.queryExpression();
	            }

	            this.state = 3043;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.ORDER) {
	                this.state = 3042;
	                this.orderByClause();
	            }

	            this.state = 3046;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.LIMIT) {
	                this.state = 3045;
	                this.limitClause();
	            }

	            this.state = 3049;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,413,this._ctx);
	            if(la_===1) {
	                this.state = 3048;
	                this.lockClause();

	            }
	            break; }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	updateStatement() {
	    let localctx = new UpdateStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, MySqlParser.RULE_updateStatement);
	    try {
	        this.state = 3055;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,415,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3053;
	            this.singleUpdateStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3054;
	            this.multipleUpdateStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertStatementValue() {
	    let localctx = new InsertStatementValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, MySqlParser.RULE_insertStatementValue);
	    var _la = 0; // Token type
	    try {
	        this.state = 3075;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.SELECT:
	        case MySqlParser.LR_BRACKET:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3057;
	            this.selectStatement();
	            break;
	        case MySqlParser.VALUES:
	        case MySqlParser.VALUE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3058;
	            localctx.insertFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.VALUES || _la===MySqlParser.VALUE)) {
	                localctx.insertFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3059;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3061;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,416,this._ctx);
	            if(la_===1) {
	                this.state = 3060;
	                this.expressionsWithDefaults();

	            }
	            this.state = 3063;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 3072;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 3064;
	                this.match(MySqlParser.COMMA);
	                this.state = 3065;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 3067;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,417,this._ctx);
	                if(la_===1) {
	                    this.state = 3066;
	                    this.expressionsWithDefaults();

	                }
	                this.state = 3069;
	                this.match(MySqlParser.RR_BRACKET);
	                this.state = 3074;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	updatedElement() {
	    let localctx = new UpdatedElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, MySqlParser.RULE_updatedElement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3077;
	        this.fullColumnName();
	        this.state = 3078;
	        this.match(MySqlParser.EQUAL_SYMBOL);
	        this.state = 3081;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,420,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 3079;
	            this.expression(0);
	            break;

	        case 2:
	            this.state = 3080;
	            this.match(MySqlParser.DEFAULT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentField() {
	    let localctx = new AssignmentFieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, MySqlParser.RULE_assignmentField);
	    try {
	        this.state = 3085;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.CURRENT:
	        case MySqlParser.DATABASE:
	        case MySqlParser.DIAGNOSTICS:
	        case MySqlParser.LEFT:
	        case MySqlParser.NUMBER:
	        case MySqlParser.RIGHT:
	        case MySqlParser.STACKED:
	        case MySqlParser.DATE:
	        case MySqlParser.TIME:
	        case MySqlParser.TIMESTAMP:
	        case MySqlParser.DATETIME:
	        case MySqlParser.YEAR:
	        case MySqlParser.TEXT:
	        case MySqlParser.ENUM:
	        case MySqlParser.SERIAL:
	        case MySqlParser.JSON_VALID:
	        case MySqlParser.JSON_SCHEMA_VALID:
	        case MySqlParser.AVG:
	        case MySqlParser.BIT_AND:
	        case MySqlParser.BIT_OR:
	        case MySqlParser.BIT_XOR:
	        case MySqlParser.COUNT:
	        case MySqlParser.GROUP_CONCAT:
	        case MySqlParser.MAX:
	        case MySqlParser.MIN:
	        case MySqlParser.STD:
	        case MySqlParser.STDDEV:
	        case MySqlParser.STDDEV_POP:
	        case MySqlParser.STDDEV_SAMP:
	        case MySqlParser.SUM:
	        case MySqlParser.VAR_POP:
	        case MySqlParser.VAR_SAMP:
	        case MySqlParser.VARIANCE:
	        case MySqlParser.POSITION:
	        case MySqlParser.ACCOUNT:
	        case MySqlParser.ACTION:
	        case MySqlParser.AFTER:
	        case MySqlParser.AGGREGATE:
	        case MySqlParser.ALGORITHM:
	        case MySqlParser.ANY:
	        case MySqlParser.AT:
	        case MySqlParser.AUTHORS:
	        case MySqlParser.AUTOCOMMIT:
	        case MySqlParser.AUTOEXTEND_SIZE:
	        case MySqlParser.AUTO_INCREMENT:
	        case MySqlParser.AVG_ROW_LENGTH:
	        case MySqlParser.BEGIN:
	        case MySqlParser.BINLOG:
	        case MySqlParser.BIT:
	        case MySqlParser.BLOCK:
	        case MySqlParser.BOOL:
	        case MySqlParser.BOOLEAN:
	        case MySqlParser.BTREE:
	        case MySqlParser.CACHE:
	        case MySqlParser.CASCADED:
	        case MySqlParser.CHAIN:
	        case MySqlParser.CHANGED:
	        case MySqlParser.CHANNEL:
	        case MySqlParser.CHECKSUM:
	        case MySqlParser.PAGE_CHECKSUM:
	        case MySqlParser.CIPHER:
	        case MySqlParser.CLASS_ORIGIN:
	        case MySqlParser.CLIENT:
	        case MySqlParser.CLOSE:
	        case MySqlParser.COALESCE:
	        case MySqlParser.CODE:
	        case MySqlParser.COLUMNS:
	        case MySqlParser.COLUMN_FORMAT:
	        case MySqlParser.COLUMN_NAME:
	        case MySqlParser.COMMENT:
	        case MySqlParser.COMMIT:
	        case MySqlParser.COMPACT:
	        case MySqlParser.COMPLETION:
	        case MySqlParser.COMPRESSED:
	        case MySqlParser.COMPRESSION:
	        case MySqlParser.CONCURRENT:
	        case MySqlParser.CONNECTION:
	        case MySqlParser.CONSISTENT:
	        case MySqlParser.CONSTRAINT_CATALOG:
	        case MySqlParser.CONSTRAINT_SCHEMA:
	        case MySqlParser.CONSTRAINT_NAME:
	        case MySqlParser.CONTAINS:
	        case MySqlParser.CONTEXT:
	        case MySqlParser.CONTRIBUTORS:
	        case MySqlParser.COPY:
	        case MySqlParser.CPU:
	        case MySqlParser.CURSOR_NAME:
	        case MySqlParser.DATA:
	        case MySqlParser.DATAFILE:
	        case MySqlParser.DEALLOCATE:
	        case MySqlParser.DEFAULT_AUTH:
	        case MySqlParser.DEFINER:
	        case MySqlParser.DELAY_KEY_WRITE:
	        case MySqlParser.DES_KEY_FILE:
	        case MySqlParser.DIRECTORY:
	        case MySqlParser.DISABLE:
	        case MySqlParser.DISCARD:
	        case MySqlParser.DISK:
	        case MySqlParser.DO:
	        case MySqlParser.DUMPFILE:
	        case MySqlParser.DUPLICATE:
	        case MySqlParser.DYNAMIC:
	        case MySqlParser.ENABLE:
	        case MySqlParser.ENCRYPTION:
	        case MySqlParser.END:
	        case MySqlParser.ENDS:
	        case MySqlParser.ENGINE:
	        case MySqlParser.ENGINES:
	        case MySqlParser.ERROR:
	        case MySqlParser.ERRORS:
	        case MySqlParser.ESCAPE:
	        case MySqlParser.EVEN:
	        case MySqlParser.EVENT:
	        case MySqlParser.EVENTS:
	        case MySqlParser.EVERY:
	        case MySqlParser.EXCHANGE:
	        case MySqlParser.EXCLUSIVE:
	        case MySqlParser.EXPIRE:
	        case MySqlParser.EXPORT:
	        case MySqlParser.EXTENDED:
	        case MySqlParser.EXTENT_SIZE:
	        case MySqlParser.FAST:
	        case MySqlParser.FAULTS:
	        case MySqlParser.FIELDS:
	        case MySqlParser.FILE_BLOCK_SIZE:
	        case MySqlParser.FILTER:
	        case MySqlParser.FIRST:
	        case MySqlParser.FIXED:
	        case MySqlParser.FLUSH:
	        case MySqlParser.FOLLOWS:
	        case MySqlParser.FOUND:
	        case MySqlParser.FULL:
	        case MySqlParser.FUNCTION:
	        case MySqlParser.GENERAL:
	        case MySqlParser.GLOBAL:
	        case MySqlParser.GRANTS:
	        case MySqlParser.GROUP_REPLICATION:
	        case MySqlParser.HANDLER:
	        case MySqlParser.HASH:
	        case MySqlParser.HELP:
	        case MySqlParser.HOST:
	        case MySqlParser.HOSTS:
	        case MySqlParser.IDENTIFIED:
	        case MySqlParser.IGNORE_SERVER_IDS:
	        case MySqlParser.IMPORT:
	        case MySqlParser.INDEXES:
	        case MySqlParser.INITIAL_SIZE:
	        case MySqlParser.INPLACE:
	        case MySqlParser.INSERT_METHOD:
	        case MySqlParser.INSTALL:
	        case MySqlParser.INSTANCE:
	        case MySqlParser.INVISIBLE:
	        case MySqlParser.INVOKER:
	        case MySqlParser.IO:
	        case MySqlParser.IO_THREAD:
	        case MySqlParser.IPC:
	        case MySqlParser.ISOLATION:
	        case MySqlParser.ISSUER:
	        case MySqlParser.JSON:
	        case MySqlParser.KEY_BLOCK_SIZE:
	        case MySqlParser.LANGUAGE:
	        case MySqlParser.LAST:
	        case MySqlParser.LEAVES:
	        case MySqlParser.LESS:
	        case MySqlParser.LEVEL:
	        case MySqlParser.LIST:
	        case MySqlParser.LOCAL:
	        case MySqlParser.LOGFILE:
	        case MySqlParser.LOGS:
	        case MySqlParser.MASTER:
	        case MySqlParser.MASTER_AUTO_POSITION:
	        case MySqlParser.MASTER_CONNECT_RETRY:
	        case MySqlParser.MASTER_DELAY:
	        case MySqlParser.MASTER_HEARTBEAT_PERIOD:
	        case MySqlParser.MASTER_HOST:
	        case MySqlParser.MASTER_LOG_FILE:
	        case MySqlParser.MASTER_LOG_POS:
	        case MySqlParser.MASTER_PASSWORD:
	        case MySqlParser.MASTER_PORT:
	        case MySqlParser.MASTER_RETRY_COUNT:
	        case MySqlParser.MASTER_SSL:
	        case MySqlParser.MASTER_SSL_CA:
	        case MySqlParser.MASTER_SSL_CAPATH:
	        case MySqlParser.MASTER_SSL_CERT:
	        case MySqlParser.MASTER_SSL_CIPHER:
	        case MySqlParser.MASTER_SSL_CRL:
	        case MySqlParser.MASTER_SSL_CRLPATH:
	        case MySqlParser.MASTER_SSL_KEY:
	        case MySqlParser.MASTER_TLS_VERSION:
	        case MySqlParser.MASTER_USER:
	        case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
	        case MySqlParser.MAX_QUERIES_PER_HOUR:
	        case MySqlParser.MAX_ROWS:
	        case MySqlParser.MAX_SIZE:
	        case MySqlParser.MAX_UPDATES_PER_HOUR:
	        case MySqlParser.MAX_USER_CONNECTIONS:
	        case MySqlParser.MEDIUM:
	        case MySqlParser.MEMBER:
	        case MySqlParser.MERGE:
	        case MySqlParser.MESSAGE_TEXT:
	        case MySqlParser.MID:
	        case MySqlParser.MIGRATE:
	        case MySqlParser.MIN_ROWS:
	        case MySqlParser.MODE:
	        case MySqlParser.MODIFY:
	        case MySqlParser.MUTEX:
	        case MySqlParser.MYSQL:
	        case MySqlParser.MYSQL_ERRNO:
	        case MySqlParser.NAME:
	        case MySqlParser.NAMES:
	        case MySqlParser.NCHAR:
	        case MySqlParser.NEVER:
	        case MySqlParser.NEXT:
	        case MySqlParser.NO:
	        case MySqlParser.NODEGROUP:
	        case MySqlParser.NONE:
	        case MySqlParser.OFFLINE:
	        case MySqlParser.OFFSET:
	        case MySqlParser.OF:
	        case MySqlParser.OJ:
	        case MySqlParser.OLD_PASSWORD:
	        case MySqlParser.ONE:
	        case MySqlParser.ONLINE:
	        case MySqlParser.ONLY:
	        case MySqlParser.OPEN:
	        case MySqlParser.OPTIMIZER_COSTS:
	        case MySqlParser.OPTIONS:
	        case MySqlParser.OWNER:
	        case MySqlParser.PACK_KEYS:
	        case MySqlParser.PAGE:
	        case MySqlParser.PARSER:
	        case MySqlParser.PARTIAL:
	        case MySqlParser.PARTITIONING:
	        case MySqlParser.PARTITIONS:
	        case MySqlParser.PASSWORD:
	        case MySqlParser.PHASE:
	        case MySqlParser.PLUGIN:
	        case MySqlParser.PLUGIN_DIR:
	        case MySqlParser.PLUGINS:
	        case MySqlParser.PORT:
	        case MySqlParser.PRECEDES:
	        case MySqlParser.PREPARE:
	        case MySqlParser.PRESERVE:
	        case MySqlParser.PREV:
	        case MySqlParser.PROCESSLIST:
	        case MySqlParser.PROFILE:
	        case MySqlParser.PROFILES:
	        case MySqlParser.PROXY:
	        case MySqlParser.QUERY:
	        case MySqlParser.QUICK:
	        case MySqlParser.REBUILD:
	        case MySqlParser.RECOVER:
	        case MySqlParser.REDO_BUFFER_SIZE:
	        case MySqlParser.REDUNDANT:
	        case MySqlParser.RELAY:
	        case MySqlParser.RELAY_LOG_FILE:
	        case MySqlParser.RELAY_LOG_POS:
	        case MySqlParser.RELAYLOG:
	        case MySqlParser.REMOVE:
	        case MySqlParser.REORGANIZE:
	        case MySqlParser.REPAIR:
	        case MySqlParser.REPLICATE_DO_DB:
	        case MySqlParser.REPLICATE_DO_TABLE:
	        case MySqlParser.REPLICATE_IGNORE_DB:
	        case MySqlParser.REPLICATE_IGNORE_TABLE:
	        case MySqlParser.REPLICATE_REWRITE_DB:
	        case MySqlParser.REPLICATE_WILD_DO_TABLE:
	        case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
	        case MySqlParser.REPLICATION:
	        case MySqlParser.RESET:
	        case MySqlParser.RESUME:
	        case MySqlParser.RETURNED_SQLSTATE:
	        case MySqlParser.RETURNS:
	        case MySqlParser.ROLE:
	        case MySqlParser.ROLLBACK:
	        case MySqlParser.ROLLUP:
	        case MySqlParser.ROTATE:
	        case MySqlParser.ROW:
	        case MySqlParser.ROWS:
	        case MySqlParser.ROW_FORMAT:
	        case MySqlParser.SAVEPOINT:
	        case MySqlParser.SCHEDULE:
	        case MySqlParser.SECURITY:
	        case MySqlParser.SERVER:
	        case MySqlParser.SESSION:
	        case MySqlParser.SHARE:
	        case MySqlParser.SHARED:
	        case MySqlParser.SIGNED:
	        case MySqlParser.SIMPLE:
	        case MySqlParser.SLAVE:
	        case MySqlParser.SLOW:
	        case MySqlParser.SNAPSHOT:
	        case MySqlParser.SOCKET:
	        case MySqlParser.SOME:
	        case MySqlParser.SONAME:
	        case MySqlParser.SOUNDS:
	        case MySqlParser.SOURCE:
	        case MySqlParser.SQL_AFTER_GTIDS:
	        case MySqlParser.SQL_AFTER_MTS_GAPS:
	        case MySqlParser.SQL_BEFORE_GTIDS:
	        case MySqlParser.SQL_BUFFER_RESULT:
	        case MySqlParser.SQL_CACHE:
	        case MySqlParser.SQL_NO_CACHE:
	        case MySqlParser.SQL_THREAD:
	        case MySqlParser.START:
	        case MySqlParser.STARTS:
	        case MySqlParser.STATS_AUTO_RECALC:
	        case MySqlParser.STATS_PERSISTENT:
	        case MySqlParser.STATS_SAMPLE_PAGES:
	        case MySqlParser.STATUS:
	        case MySqlParser.STOP:
	        case MySqlParser.STORAGE:
	        case MySqlParser.STRING:
	        case MySqlParser.SUBCLASS_ORIGIN:
	        case MySqlParser.SUBJECT:
	        case MySqlParser.SUBPARTITION:
	        case MySqlParser.SUBPARTITIONS:
	        case MySqlParser.SUSPEND:
	        case MySqlParser.SWAPS:
	        case MySqlParser.SWITCHES:
	        case MySqlParser.TABLE_NAME:
	        case MySqlParser.TABLESPACE:
	        case MySqlParser.TEMPORARY:
	        case MySqlParser.TEMPTABLE:
	        case MySqlParser.THAN:
	        case MySqlParser.TRADITIONAL:
	        case MySqlParser.TRANSACTION:
	        case MySqlParser.TRANSACTIONAL:
	        case MySqlParser.TRIGGERS:
	        case MySqlParser.TRUNCATE:
	        case MySqlParser.UNDEFINED:
	        case MySqlParser.UNDOFILE:
	        case MySqlParser.UNDO_BUFFER_SIZE:
	        case MySqlParser.UNINSTALL:
	        case MySqlParser.UNKNOWN:
	        case MySqlParser.UNTIL:
	        case MySqlParser.UPGRADE:
	        case MySqlParser.USER:
	        case MySqlParser.USE_FRM:
	        case MySqlParser.USER_RESOURCES:
	        case MySqlParser.VALIDATION:
	        case MySqlParser.VALUE:
	        case MySqlParser.VARIABLES:
	        case MySqlParser.VIEW:
	        case MySqlParser.VISIBLE:
	        case MySqlParser.WAIT:
	        case MySqlParser.WARNINGS:
	        case MySqlParser.WITHOUT:
	        case MySqlParser.WORK:
	        case MySqlParser.WRAPPER:
	        case MySqlParser.X509:
	        case MySqlParser.XA:
	        case MySqlParser.XML:
	        case MySqlParser.INTERNAL:
	        case MySqlParser.QUARTER:
	        case MySqlParser.MONTH:
	        case MySqlParser.DAY:
	        case MySqlParser.HOUR:
	        case MySqlParser.MINUTE:
	        case MySqlParser.WEEK:
	        case MySqlParser.SECOND:
	        case MySqlParser.MICROSECOND:
	        case MySqlParser.TABLES:
	        case MySqlParser.ROUTINE:
	        case MySqlParser.EXECUTE:
	        case MySqlParser.FILE:
	        case MySqlParser.PROCESS:
	        case MySqlParser.RELOAD:
	        case MySqlParser.SHUTDOWN:
	        case MySqlParser.SUPER:
	        case MySqlParser.PRIVILEGES:
	        case MySqlParser.AUDIT_ADMIN:
	        case MySqlParser.BACKUP_ADMIN:
	        case MySqlParser.BINLOG_ADMIN:
	        case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
	        case MySqlParser.CLONE_ADMIN:
	        case MySqlParser.CONNECTION_ADMIN:
	        case MySqlParser.ENCRYPTION_KEY_ADMIN:
	        case MySqlParser.FIREWALL_ADMIN:
	        case MySqlParser.FIREWALL_USER:
	        case MySqlParser.GROUP_REPLICATION_ADMIN:
	        case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
	        case MySqlParser.NDB_STORED_USER:
	        case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
	        case MySqlParser.REPLICATION_APPLIER:
	        case MySqlParser.REPLICATION_SLAVE_ADMIN:
	        case MySqlParser.RESOURCE_GROUP_ADMIN:
	        case MySqlParser.RESOURCE_GROUP_USER:
	        case MySqlParser.ROLE_ADMIN:
	        case MySqlParser.SESSION_VARIABLES_ADMIN:
	        case MySqlParser.SET_USER_ID:
	        case MySqlParser.SHOW_ROUTINE:
	        case MySqlParser.SYSTEM_VARIABLES_ADMIN:
	        case MySqlParser.TABLE_ENCRYPTION_ADMIN:
	        case MySqlParser.VERSION_TOKEN_ADMIN:
	        case MySqlParser.XA_RECOVER_ADMIN:
	        case MySqlParser.ARMSCII8:
	        case MySqlParser.ASCII:
	        case MySqlParser.BIG5:
	        case MySqlParser.CP1250:
	        case MySqlParser.CP1251:
	        case MySqlParser.CP1256:
	        case MySqlParser.CP1257:
	        case MySqlParser.CP850:
	        case MySqlParser.CP852:
	        case MySqlParser.CP866:
	        case MySqlParser.CP932:
	        case MySqlParser.DEC8:
	        case MySqlParser.EUCJPMS:
	        case MySqlParser.EUCKR:
	        case MySqlParser.GB2312:
	        case MySqlParser.GBK:
	        case MySqlParser.GEOSTD8:
	        case MySqlParser.GREEK:
	        case MySqlParser.HEBREW:
	        case MySqlParser.HP8:
	        case MySqlParser.KEYBCS2:
	        case MySqlParser.KOI8R:
	        case MySqlParser.KOI8U:
	        case MySqlParser.LATIN1:
	        case MySqlParser.LATIN2:
	        case MySqlParser.LATIN5:
	        case MySqlParser.LATIN7:
	        case MySqlParser.MACCE:
	        case MySqlParser.MACROMAN:
	        case MySqlParser.SJIS:
	        case MySqlParser.SWE7:
	        case MySqlParser.TIS620:
	        case MySqlParser.UCS2:
	        case MySqlParser.UJIS:
	        case MySqlParser.UTF16:
	        case MySqlParser.UTF16LE:
	        case MySqlParser.UTF32:
	        case MySqlParser.UTF8:
	        case MySqlParser.UTF8MB3:
	        case MySqlParser.UTF8MB4:
	        case MySqlParser.ARCHIVE:
	        case MySqlParser.BLACKHOLE:
	        case MySqlParser.CSV:
	        case MySqlParser.FEDERATED:
	        case MySqlParser.INNODB:
	        case MySqlParser.MEMORY:
	        case MySqlParser.MRG_MYISAM:
	        case MySqlParser.MYISAM:
	        case MySqlParser.NDB:
	        case MySqlParser.NDBCLUSTER:
	        case MySqlParser.PERFORMANCE_SCHEMA:
	        case MySqlParser.TOKUDB:
	        case MySqlParser.REPEATABLE:
	        case MySqlParser.COMMITTED:
	        case MySqlParser.UNCOMMITTED:
	        case MySqlParser.SERIALIZABLE:
	        case MySqlParser.GEOMETRYCOLLECTION:
	        case MySqlParser.LINESTRING:
	        case MySqlParser.MULTILINESTRING:
	        case MySqlParser.MULTIPOINT:
	        case MySqlParser.MULTIPOLYGON:
	        case MySqlParser.POINT:
	        case MySqlParser.POLYGON:
	        case MySqlParser.ABS:
	        case MySqlParser.ACOS:
	        case MySqlParser.ADDDATE:
	        case MySqlParser.ADDTIME:
	        case MySqlParser.AES_DECRYPT:
	        case MySqlParser.AES_ENCRYPT:
	        case MySqlParser.AREA:
	        case MySqlParser.ASBINARY:
	        case MySqlParser.ASIN:
	        case MySqlParser.ASTEXT:
	        case MySqlParser.ASWKB:
	        case MySqlParser.ASWKT:
	        case MySqlParser.ASYMMETRIC_DECRYPT:
	        case MySqlParser.ASYMMETRIC_DERIVE:
	        case MySqlParser.ASYMMETRIC_ENCRYPT:
	        case MySqlParser.ASYMMETRIC_SIGN:
	        case MySqlParser.ASYMMETRIC_VERIFY:
	        case MySqlParser.ATAN:
	        case MySqlParser.ATAN2:
	        case MySqlParser.BENCHMARK:
	        case MySqlParser.BIN:
	        case MySqlParser.BIT_COUNT:
	        case MySqlParser.BIT_LENGTH:
	        case MySqlParser.BUFFER:
	        case MySqlParser.CATALOG_NAME:
	        case MySqlParser.CEIL:
	        case MySqlParser.CEILING:
	        case MySqlParser.CENTROID:
	        case MySqlParser.CHARACTER_LENGTH:
	        case MySqlParser.CHARSET:
	        case MySqlParser.CHAR_LENGTH:
	        case MySqlParser.COERCIBILITY:
	        case MySqlParser.COLLATION:
	        case MySqlParser.COMPRESS:
	        case MySqlParser.CONCAT:
	        case MySqlParser.CONCAT_WS:
	        case MySqlParser.CONNECTION_ID:
	        case MySqlParser.CONV:
	        case MySqlParser.CONVERT_TZ:
	        case MySqlParser.COS:
	        case MySqlParser.COT:
	        case MySqlParser.CRC32:
	        case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
	        case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
	        case MySqlParser.CREATE_DH_PARAMETERS:
	        case MySqlParser.CREATE_DIGEST:
	        case MySqlParser.CROSSES:
	        case MySqlParser.DATEDIFF:
	        case MySqlParser.DATE_FORMAT:
	        case MySqlParser.DAYNAME:
	        case MySqlParser.DAYOFMONTH:
	        case MySqlParser.DAYOFWEEK:
	        case MySqlParser.DAYOFYEAR:
	        case MySqlParser.DECODE:
	        case MySqlParser.DEGREES:
	        case MySqlParser.DES_DECRYPT:
	        case MySqlParser.DES_ENCRYPT:
	        case MySqlParser.DIMENSION:
	        case MySqlParser.DISJOINT:
	        case MySqlParser.ELT:
	        case MySqlParser.ENCODE:
	        case MySqlParser.ENCRYPT:
	        case MySqlParser.ENDPOINT:
	        case MySqlParser.ENVELOPE:
	        case MySqlParser.EQUALS:
	        case MySqlParser.EXP:
	        case MySqlParser.EXPORT_SET:
	        case MySqlParser.EXTERIORRING:
	        case MySqlParser.EXTRACTVALUE:
	        case MySqlParser.FIELD:
	        case MySqlParser.FIND_IN_SET:
	        case MySqlParser.FLOOR:
	        case MySqlParser.FORMAT:
	        case MySqlParser.FOUND_ROWS:
	        case MySqlParser.FROM_BASE64:
	        case MySqlParser.FROM_DAYS:
	        case MySqlParser.FROM_UNIXTIME:
	        case MySqlParser.GEOMCOLLFROMTEXT:
	        case MySqlParser.GEOMCOLLFROMWKB:
	        case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
	        case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
	        case MySqlParser.GEOMETRYFROMTEXT:
	        case MySqlParser.GEOMETRYFROMWKB:
	        case MySqlParser.GEOMETRYN:
	        case MySqlParser.GEOMETRYTYPE:
	        case MySqlParser.GEOMFROMTEXT:
	        case MySqlParser.GEOMFROMWKB:
	        case MySqlParser.GET_FORMAT:
	        case MySqlParser.GET_LOCK:
	        case MySqlParser.GLENGTH:
	        case MySqlParser.GREATEST:
	        case MySqlParser.GTID_SUBSET:
	        case MySqlParser.GTID_SUBTRACT:
	        case MySqlParser.HEX:
	        case MySqlParser.IFNULL:
	        case MySqlParser.INET6_ATON:
	        case MySqlParser.INET6_NTOA:
	        case MySqlParser.INET_ATON:
	        case MySqlParser.INET_NTOA:
	        case MySqlParser.INSTR:
	        case MySqlParser.INTERIORRINGN:
	        case MySqlParser.INTERSECTS:
	        case MySqlParser.ISCLOSED:
	        case MySqlParser.ISEMPTY:
	        case MySqlParser.ISNULL:
	        case MySqlParser.ISSIMPLE:
	        case MySqlParser.IS_FREE_LOCK:
	        case MySqlParser.IS_IPV4:
	        case MySqlParser.IS_IPV4_COMPAT:
	        case MySqlParser.IS_IPV4_MAPPED:
	        case MySqlParser.IS_IPV6:
	        case MySqlParser.IS_USED_LOCK:
	        case MySqlParser.LAST_INSERT_ID:
	        case MySqlParser.LCASE:
	        case MySqlParser.LEAST:
	        case MySqlParser.LENGTH:
	        case MySqlParser.LINEFROMTEXT:
	        case MySqlParser.LINEFROMWKB:
	        case MySqlParser.LINESTRINGFROMTEXT:
	        case MySqlParser.LINESTRINGFROMWKB:
	        case MySqlParser.LN:
	        case MySqlParser.LOAD_FILE:
	        case MySqlParser.LOCATE:
	        case MySqlParser.LOG:
	        case MySqlParser.LOG10:
	        case MySqlParser.LOG2:
	        case MySqlParser.LOWER:
	        case MySqlParser.LPAD:
	        case MySqlParser.LTRIM:
	        case MySqlParser.MAKEDATE:
	        case MySqlParser.MAKETIME:
	        case MySqlParser.MAKE_SET:
	        case MySqlParser.MASTER_POS_WAIT:
	        case MySqlParser.MBRCONTAINS:
	        case MySqlParser.MBRDISJOINT:
	        case MySqlParser.MBREQUAL:
	        case MySqlParser.MBRINTERSECTS:
	        case MySqlParser.MBROVERLAPS:
	        case MySqlParser.MBRTOUCHES:
	        case MySqlParser.MBRWITHIN:
	        case MySqlParser.MD5:
	        case MySqlParser.MLINEFROMTEXT:
	        case MySqlParser.MLINEFROMWKB:
	        case MySqlParser.MONTHNAME:
	        case MySqlParser.MPOINTFROMTEXT:
	        case MySqlParser.MPOINTFROMWKB:
	        case MySqlParser.MPOLYFROMTEXT:
	        case MySqlParser.MPOLYFROMWKB:
	        case MySqlParser.MULTILINESTRINGFROMTEXT:
	        case MySqlParser.MULTILINESTRINGFROMWKB:
	        case MySqlParser.MULTIPOINTFROMTEXT:
	        case MySqlParser.MULTIPOINTFROMWKB:
	        case MySqlParser.MULTIPOLYGONFROMTEXT:
	        case MySqlParser.MULTIPOLYGONFROMWKB:
	        case MySqlParser.NAME_CONST:
	        case MySqlParser.NULLIF:
	        case MySqlParser.NUMGEOMETRIES:
	        case MySqlParser.NUMINTERIORRINGS:
	        case MySqlParser.NUMPOINTS:
	        case MySqlParser.OCT:
	        case MySqlParser.OCTET_LENGTH:
	        case MySqlParser.ORD:
	        case MySqlParser.OVERLAPS:
	        case MySqlParser.PERIOD_ADD:
	        case MySqlParser.PERIOD_DIFF:
	        case MySqlParser.PI:
	        case MySqlParser.POINTFROMTEXT:
	        case MySqlParser.POINTFROMWKB:
	        case MySqlParser.POINTN:
	        case MySqlParser.POLYFROMTEXT:
	        case MySqlParser.POLYFROMWKB:
	        case MySqlParser.POLYGONFROMTEXT:
	        case MySqlParser.POLYGONFROMWKB:
	        case MySqlParser.POW:
	        case MySqlParser.POWER:
	        case MySqlParser.QUOTE:
	        case MySqlParser.RADIANS:
	        case MySqlParser.RAND:
	        case MySqlParser.RANDOM_BYTES:
	        case MySqlParser.RELEASE_LOCK:
	        case MySqlParser.REVERSE:
	        case MySqlParser.ROUND:
	        case MySqlParser.ROW_COUNT:
	        case MySqlParser.RPAD:
	        case MySqlParser.RTRIM:
	        case MySqlParser.SEC_TO_TIME:
	        case MySqlParser.SESSION_USER:
	        case MySqlParser.SHA:
	        case MySqlParser.SHA1:
	        case MySqlParser.SHA2:
	        case MySqlParser.SCHEMA_NAME:
	        case MySqlParser.SIGN:
	        case MySqlParser.SIN:
	        case MySqlParser.SLEEP:
	        case MySqlParser.SOUNDEX:
	        case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
	        case MySqlParser.SQRT:
	        case MySqlParser.SRID:
	        case MySqlParser.STARTPOINT:
	        case MySqlParser.STRCMP:
	        case MySqlParser.STR_TO_DATE:
	        case MySqlParser.ST_AREA:
	        case MySqlParser.ST_ASBINARY:
	        case MySqlParser.ST_ASTEXT:
	        case MySqlParser.ST_ASWKB:
	        case MySqlParser.ST_ASWKT:
	        case MySqlParser.ST_BUFFER:
	        case MySqlParser.ST_CENTROID:
	        case MySqlParser.ST_CONTAINS:
	        case MySqlParser.ST_CROSSES:
	        case MySqlParser.ST_DIFFERENCE:
	        case MySqlParser.ST_DIMENSION:
	        case MySqlParser.ST_DISJOINT:
	        case MySqlParser.ST_DISTANCE:
	        case MySqlParser.ST_ENDPOINT:
	        case MySqlParser.ST_ENVELOPE:
	        case MySqlParser.ST_EQUALS:
	        case MySqlParser.ST_EXTERIORRING:
	        case MySqlParser.ST_GEOMCOLLFROMTEXT:
	        case MySqlParser.ST_GEOMCOLLFROMTXT:
	        case MySqlParser.ST_GEOMCOLLFROMWKB:
	        case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
	        case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
	        case MySqlParser.ST_GEOMETRYFROMTEXT:
	        case MySqlParser.ST_GEOMETRYFROMWKB:
	        case MySqlParser.ST_GEOMETRYN:
	        case MySqlParser.ST_GEOMETRYTYPE:
	        case MySqlParser.ST_GEOMFROMTEXT:
	        case MySqlParser.ST_GEOMFROMWKB:
	        case MySqlParser.ST_INTERIORRINGN:
	        case MySqlParser.ST_INTERSECTION:
	        case MySqlParser.ST_INTERSECTS:
	        case MySqlParser.ST_ISCLOSED:
	        case MySqlParser.ST_ISEMPTY:
	        case MySqlParser.ST_ISSIMPLE:
	        case MySqlParser.ST_LINEFROMTEXT:
	        case MySqlParser.ST_LINEFROMWKB:
	        case MySqlParser.ST_LINESTRINGFROMTEXT:
	        case MySqlParser.ST_LINESTRINGFROMWKB:
	        case MySqlParser.ST_NUMGEOMETRIES:
	        case MySqlParser.ST_NUMINTERIORRING:
	        case MySqlParser.ST_NUMINTERIORRINGS:
	        case MySqlParser.ST_NUMPOINTS:
	        case MySqlParser.ST_OVERLAPS:
	        case MySqlParser.ST_POINTFROMTEXT:
	        case MySqlParser.ST_POINTFROMWKB:
	        case MySqlParser.ST_POINTN:
	        case MySqlParser.ST_POLYFROMTEXT:
	        case MySqlParser.ST_POLYFROMWKB:
	        case MySqlParser.ST_POLYGONFROMTEXT:
	        case MySqlParser.ST_POLYGONFROMWKB:
	        case MySqlParser.ST_SRID:
	        case MySqlParser.ST_STARTPOINT:
	        case MySqlParser.ST_SYMDIFFERENCE:
	        case MySqlParser.ST_TOUCHES:
	        case MySqlParser.ST_UNION:
	        case MySqlParser.ST_WITHIN:
	        case MySqlParser.ST_X:
	        case MySqlParser.ST_Y:
	        case MySqlParser.SUBDATE:
	        case MySqlParser.SUBSTRING_INDEX:
	        case MySqlParser.SUBTIME:
	        case MySqlParser.SYSTEM_USER:
	        case MySqlParser.TAN:
	        case MySqlParser.TIMEDIFF:
	        case MySqlParser.TIMESTAMPADD:
	        case MySqlParser.TIMESTAMPDIFF:
	        case MySqlParser.TIME_FORMAT:
	        case MySqlParser.TIME_TO_SEC:
	        case MySqlParser.TOUCHES:
	        case MySqlParser.TO_BASE64:
	        case MySqlParser.TO_DAYS:
	        case MySqlParser.TO_SECONDS:
	        case MySqlParser.UCASE:
	        case MySqlParser.UNCOMPRESS:
	        case MySqlParser.UNCOMPRESSED_LENGTH:
	        case MySqlParser.UNHEX:
	        case MySqlParser.UNIX_TIMESTAMP:
	        case MySqlParser.UPDATEXML:
	        case MySqlParser.UPPER:
	        case MySqlParser.UUID:
	        case MySqlParser.UUID_SHORT:
	        case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
	        case MySqlParser.VERSION:
	        case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
	        case MySqlParser.WEEKDAY:
	        case MySqlParser.WEEKOFYEAR:
	        case MySqlParser.WEIGHT_STRING:
	        case MySqlParser.WITHIN:
	        case MySqlParser.YEARWEEK:
	        case MySqlParser.Y_FUNCTION:
	        case MySqlParser.X_FUNCTION:
	        case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
	        case MySqlParser.STRING_LITERAL:
	        case MySqlParser.ID:
	        case MySqlParser.REVERSE_QUOTE_ID:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3083;
	            this.uid();
	            break;
	        case MySqlParser.LOCAL_ID:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3084;
	            this.match(MySqlParser.LOCAL_ID);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lockClause() {
	    let localctx = new LockClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, MySqlParser.RULE_lockClause);
	    try {
	        this.state = 3093;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.FOR:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3087;
	            this.match(MySqlParser.FOR);
	            this.state = 3088;
	            this.match(MySqlParser.UPDATE);
	            break;
	        case MySqlParser.LOCK:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3089;
	            this.match(MySqlParser.LOCK);
	            this.state = 3090;
	            this.match(MySqlParser.IN);
	            this.state = 3091;
	            this.match(MySqlParser.SHARE);
	            this.state = 3092;
	            this.match(MySqlParser.MODE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleDeleteStatement() {
	    let localctx = new SingleDeleteStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, MySqlParser.RULE_singleDeleteStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3095;
	        this.match(MySqlParser.DELETE);
	        this.state = 3097;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.LOW_PRIORITY) {
	            this.state = 3096;
	            localctx.priority = this.match(MySqlParser.LOW_PRIORITY);
	        }

	        this.state = 3100;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.QUICK) {
	            this.state = 3099;
	            this.match(MySqlParser.QUICK);
	        }

	        this.state = 3103;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.IGNORE) {
	            this.state = 3102;
	            this.match(MySqlParser.IGNORE);
	        }

	        this.state = 3105;
	        this.match(MySqlParser.FROM);
	        this.state = 3106;
	        this.tableName();
	        this.state = 3112;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.PARTITION) {
	            this.state = 3107;
	            this.match(MySqlParser.PARTITION);
	            this.state = 3108;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3109;
	            this.uidList();
	            this.state = 3110;
	            this.match(MySqlParser.RR_BRACKET);
	        }

	        this.state = 3116;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.WHERE) {
	            this.state = 3114;
	            this.match(MySqlParser.WHERE);
	            this.state = 3115;
	            this.expression(0);
	        }

	        this.state = 3119;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.ORDER) {
	            this.state = 3118;
	            this.orderByClause();
	        }

	        this.state = 3123;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.LIMIT) {
	            this.state = 3121;
	            this.match(MySqlParser.LIMIT);
	            this.state = 3122;
	            this.limitClauseAtom();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multipleDeleteStatement() {
	    let localctx = new MultipleDeleteStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, MySqlParser.RULE_multipleDeleteStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3125;
	        this.match(MySqlParser.DELETE);
	        this.state = 3127;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.LOW_PRIORITY) {
	            this.state = 3126;
	            localctx.priority = this.match(MySqlParser.LOW_PRIORITY);
	        }

	        this.state = 3130;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,431,this._ctx);
	        if(la_===1) {
	            this.state = 3129;
	            this.match(MySqlParser.QUICK);

	        }
	        this.state = 3133;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.IGNORE) {
	            this.state = 3132;
	            this.match(MySqlParser.IGNORE);
	        }

	        this.state = 3174;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.CURRENT:
	        case MySqlParser.DATABASE:
	        case MySqlParser.DIAGNOSTICS:
	        case MySqlParser.LEFT:
	        case MySqlParser.NUMBER:
	        case MySqlParser.RIGHT:
	        case MySqlParser.STACKED:
	        case MySqlParser.DATE:
	        case MySqlParser.TIME:
	        case MySqlParser.TIMESTAMP:
	        case MySqlParser.DATETIME:
	        case MySqlParser.YEAR:
	        case MySqlParser.TEXT:
	        case MySqlParser.ENUM:
	        case MySqlParser.SERIAL:
	        case MySqlParser.JSON_VALID:
	        case MySqlParser.JSON_SCHEMA_VALID:
	        case MySqlParser.AVG:
	        case MySqlParser.BIT_AND:
	        case MySqlParser.BIT_OR:
	        case MySqlParser.BIT_XOR:
	        case MySqlParser.COUNT:
	        case MySqlParser.GROUP_CONCAT:
	        case MySqlParser.MAX:
	        case MySqlParser.MIN:
	        case MySqlParser.STD:
	        case MySqlParser.STDDEV:
	        case MySqlParser.STDDEV_POP:
	        case MySqlParser.STDDEV_SAMP:
	        case MySqlParser.SUM:
	        case MySqlParser.VAR_POP:
	        case MySqlParser.VAR_SAMP:
	        case MySqlParser.VARIANCE:
	        case MySqlParser.POSITION:
	        case MySqlParser.ACCOUNT:
	        case MySqlParser.ACTION:
	        case MySqlParser.AFTER:
	        case MySqlParser.AGGREGATE:
	        case MySqlParser.ALGORITHM:
	        case MySqlParser.ANY:
	        case MySqlParser.AT:
	        case MySqlParser.AUTHORS:
	        case MySqlParser.AUTOCOMMIT:
	        case MySqlParser.AUTOEXTEND_SIZE:
	        case MySqlParser.AUTO_INCREMENT:
	        case MySqlParser.AVG_ROW_LENGTH:
	        case MySqlParser.BEGIN:
	        case MySqlParser.BINLOG:
	        case MySqlParser.BIT:
	        case MySqlParser.BLOCK:
	        case MySqlParser.BOOL:
	        case MySqlParser.BOOLEAN:
	        case MySqlParser.BTREE:
	        case MySqlParser.CACHE:
	        case MySqlParser.CASCADED:
	        case MySqlParser.CHAIN:
	        case MySqlParser.CHANGED:
	        case MySqlParser.CHANNEL:
	        case MySqlParser.CHECKSUM:
	        case MySqlParser.PAGE_CHECKSUM:
	        case MySqlParser.CIPHER:
	        case MySqlParser.CLASS_ORIGIN:
	        case MySqlParser.CLIENT:
	        case MySqlParser.CLOSE:
	        case MySqlParser.COALESCE:
	        case MySqlParser.CODE:
	        case MySqlParser.COLUMNS:
	        case MySqlParser.COLUMN_FORMAT:
	        case MySqlParser.COLUMN_NAME:
	        case MySqlParser.COMMENT:
	        case MySqlParser.COMMIT:
	        case MySqlParser.COMPACT:
	        case MySqlParser.COMPLETION:
	        case MySqlParser.COMPRESSED:
	        case MySqlParser.COMPRESSION:
	        case MySqlParser.CONCURRENT:
	        case MySqlParser.CONNECTION:
	        case MySqlParser.CONSISTENT:
	        case MySqlParser.CONSTRAINT_CATALOG:
	        case MySqlParser.CONSTRAINT_SCHEMA:
	        case MySqlParser.CONSTRAINT_NAME:
	        case MySqlParser.CONTAINS:
	        case MySqlParser.CONTEXT:
	        case MySqlParser.CONTRIBUTORS:
	        case MySqlParser.COPY:
	        case MySqlParser.CPU:
	        case MySqlParser.CURSOR_NAME:
	        case MySqlParser.DATA:
	        case MySqlParser.DATAFILE:
	        case MySqlParser.DEALLOCATE:
	        case MySqlParser.DEFAULT_AUTH:
	        case MySqlParser.DEFINER:
	        case MySqlParser.DELAY_KEY_WRITE:
	        case MySqlParser.DES_KEY_FILE:
	        case MySqlParser.DIRECTORY:
	        case MySqlParser.DISABLE:
	        case MySqlParser.DISCARD:
	        case MySqlParser.DISK:
	        case MySqlParser.DO:
	        case MySqlParser.DUMPFILE:
	        case MySqlParser.DUPLICATE:
	        case MySqlParser.DYNAMIC:
	        case MySqlParser.ENABLE:
	        case MySqlParser.ENCRYPTION:
	        case MySqlParser.END:
	        case MySqlParser.ENDS:
	        case MySqlParser.ENGINE:
	        case MySqlParser.ENGINES:
	        case MySqlParser.ERROR:
	        case MySqlParser.ERRORS:
	        case MySqlParser.ESCAPE:
	        case MySqlParser.EVEN:
	        case MySqlParser.EVENT:
	        case MySqlParser.EVENTS:
	        case MySqlParser.EVERY:
	        case MySqlParser.EXCHANGE:
	        case MySqlParser.EXCLUSIVE:
	        case MySqlParser.EXPIRE:
	        case MySqlParser.EXPORT:
	        case MySqlParser.EXTENDED:
	        case MySqlParser.EXTENT_SIZE:
	        case MySqlParser.FAST:
	        case MySqlParser.FAULTS:
	        case MySqlParser.FIELDS:
	        case MySqlParser.FILE_BLOCK_SIZE:
	        case MySqlParser.FILTER:
	        case MySqlParser.FIRST:
	        case MySqlParser.FIXED:
	        case MySqlParser.FLUSH:
	        case MySqlParser.FOLLOWS:
	        case MySqlParser.FOUND:
	        case MySqlParser.FULL:
	        case MySqlParser.FUNCTION:
	        case MySqlParser.GENERAL:
	        case MySqlParser.GLOBAL:
	        case MySqlParser.GRANTS:
	        case MySqlParser.GROUP_REPLICATION:
	        case MySqlParser.HANDLER:
	        case MySqlParser.HASH:
	        case MySqlParser.HELP:
	        case MySqlParser.HOST:
	        case MySqlParser.HOSTS:
	        case MySqlParser.IDENTIFIED:
	        case MySqlParser.IGNORE_SERVER_IDS:
	        case MySqlParser.IMPORT:
	        case MySqlParser.INDEXES:
	        case MySqlParser.INITIAL_SIZE:
	        case MySqlParser.INPLACE:
	        case MySqlParser.INSERT_METHOD:
	        case MySqlParser.INSTALL:
	        case MySqlParser.INSTANCE:
	        case MySqlParser.INVISIBLE:
	        case MySqlParser.INVOKER:
	        case MySqlParser.IO:
	        case MySqlParser.IO_THREAD:
	        case MySqlParser.IPC:
	        case MySqlParser.ISOLATION:
	        case MySqlParser.ISSUER:
	        case MySqlParser.JSON:
	        case MySqlParser.KEY_BLOCK_SIZE:
	        case MySqlParser.LANGUAGE:
	        case MySqlParser.LAST:
	        case MySqlParser.LEAVES:
	        case MySqlParser.LESS:
	        case MySqlParser.LEVEL:
	        case MySqlParser.LIST:
	        case MySqlParser.LOCAL:
	        case MySqlParser.LOGFILE:
	        case MySqlParser.LOGS:
	        case MySqlParser.MASTER:
	        case MySqlParser.MASTER_AUTO_POSITION:
	        case MySqlParser.MASTER_CONNECT_RETRY:
	        case MySqlParser.MASTER_DELAY:
	        case MySqlParser.MASTER_HEARTBEAT_PERIOD:
	        case MySqlParser.MASTER_HOST:
	        case MySqlParser.MASTER_LOG_FILE:
	        case MySqlParser.MASTER_LOG_POS:
	        case MySqlParser.MASTER_PASSWORD:
	        case MySqlParser.MASTER_PORT:
	        case MySqlParser.MASTER_RETRY_COUNT:
	        case MySqlParser.MASTER_SSL:
	        case MySqlParser.MASTER_SSL_CA:
	        case MySqlParser.MASTER_SSL_CAPATH:
	        case MySqlParser.MASTER_SSL_CERT:
	        case MySqlParser.MASTER_SSL_CIPHER:
	        case MySqlParser.MASTER_SSL_CRL:
	        case MySqlParser.MASTER_SSL_CRLPATH:
	        case MySqlParser.MASTER_SSL_KEY:
	        case MySqlParser.MASTER_TLS_VERSION:
	        case MySqlParser.MASTER_USER:
	        case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
	        case MySqlParser.MAX_QUERIES_PER_HOUR:
	        case MySqlParser.MAX_ROWS:
	        case MySqlParser.MAX_SIZE:
	        case MySqlParser.MAX_UPDATES_PER_HOUR:
	        case MySqlParser.MAX_USER_CONNECTIONS:
	        case MySqlParser.MEDIUM:
	        case MySqlParser.MEMBER:
	        case MySqlParser.MERGE:
	        case MySqlParser.MESSAGE_TEXT:
	        case MySqlParser.MID:
	        case MySqlParser.MIGRATE:
	        case MySqlParser.MIN_ROWS:
	        case MySqlParser.MODE:
	        case MySqlParser.MODIFY:
	        case MySqlParser.MUTEX:
	        case MySqlParser.MYSQL:
	        case MySqlParser.MYSQL_ERRNO:
	        case MySqlParser.NAME:
	        case MySqlParser.NAMES:
	        case MySqlParser.NCHAR:
	        case MySqlParser.NEVER:
	        case MySqlParser.NEXT:
	        case MySqlParser.NO:
	        case MySqlParser.NODEGROUP:
	        case MySqlParser.NONE:
	        case MySqlParser.OFFLINE:
	        case MySqlParser.OFFSET:
	        case MySqlParser.OF:
	        case MySqlParser.OJ:
	        case MySqlParser.OLD_PASSWORD:
	        case MySqlParser.ONE:
	        case MySqlParser.ONLINE:
	        case MySqlParser.ONLY:
	        case MySqlParser.OPEN:
	        case MySqlParser.OPTIMIZER_COSTS:
	        case MySqlParser.OPTIONS:
	        case MySqlParser.OWNER:
	        case MySqlParser.PACK_KEYS:
	        case MySqlParser.PAGE:
	        case MySqlParser.PARSER:
	        case MySqlParser.PARTIAL:
	        case MySqlParser.PARTITIONING:
	        case MySqlParser.PARTITIONS:
	        case MySqlParser.PASSWORD:
	        case MySqlParser.PHASE:
	        case MySqlParser.PLUGIN:
	        case MySqlParser.PLUGIN_DIR:
	        case MySqlParser.PLUGINS:
	        case MySqlParser.PORT:
	        case MySqlParser.PRECEDES:
	        case MySqlParser.PREPARE:
	        case MySqlParser.PRESERVE:
	        case MySqlParser.PREV:
	        case MySqlParser.PROCESSLIST:
	        case MySqlParser.PROFILE:
	        case MySqlParser.PROFILES:
	        case MySqlParser.PROXY:
	        case MySqlParser.QUERY:
	        case MySqlParser.QUICK:
	        case MySqlParser.REBUILD:
	        case MySqlParser.RECOVER:
	        case MySqlParser.REDO_BUFFER_SIZE:
	        case MySqlParser.REDUNDANT:
	        case MySqlParser.RELAY:
	        case MySqlParser.RELAY_LOG_FILE:
	        case MySqlParser.RELAY_LOG_POS:
	        case MySqlParser.RELAYLOG:
	        case MySqlParser.REMOVE:
	        case MySqlParser.REORGANIZE:
	        case MySqlParser.REPAIR:
	        case MySqlParser.REPLICATE_DO_DB:
	        case MySqlParser.REPLICATE_DO_TABLE:
	        case MySqlParser.REPLICATE_IGNORE_DB:
	        case MySqlParser.REPLICATE_IGNORE_TABLE:
	        case MySqlParser.REPLICATE_REWRITE_DB:
	        case MySqlParser.REPLICATE_WILD_DO_TABLE:
	        case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
	        case MySqlParser.REPLICATION:
	        case MySqlParser.RESET:
	        case MySqlParser.RESUME:
	        case MySqlParser.RETURNED_SQLSTATE:
	        case MySqlParser.RETURNS:
	        case MySqlParser.ROLE:
	        case MySqlParser.ROLLBACK:
	        case MySqlParser.ROLLUP:
	        case MySqlParser.ROTATE:
	        case MySqlParser.ROW:
	        case MySqlParser.ROWS:
	        case MySqlParser.ROW_FORMAT:
	        case MySqlParser.SAVEPOINT:
	        case MySqlParser.SCHEDULE:
	        case MySqlParser.SECURITY:
	        case MySqlParser.SERVER:
	        case MySqlParser.SESSION:
	        case MySqlParser.SHARE:
	        case MySqlParser.SHARED:
	        case MySqlParser.SIGNED:
	        case MySqlParser.SIMPLE:
	        case MySqlParser.SLAVE:
	        case MySqlParser.SLOW:
	        case MySqlParser.SNAPSHOT:
	        case MySqlParser.SOCKET:
	        case MySqlParser.SOME:
	        case MySqlParser.SONAME:
	        case MySqlParser.SOUNDS:
	        case MySqlParser.SOURCE:
	        case MySqlParser.SQL_AFTER_GTIDS:
	        case MySqlParser.SQL_AFTER_MTS_GAPS:
	        case MySqlParser.SQL_BEFORE_GTIDS:
	        case MySqlParser.SQL_BUFFER_RESULT:
	        case MySqlParser.SQL_CACHE:
	        case MySqlParser.SQL_NO_CACHE:
	        case MySqlParser.SQL_THREAD:
	        case MySqlParser.START:
	        case MySqlParser.STARTS:
	        case MySqlParser.STATS_AUTO_RECALC:
	        case MySqlParser.STATS_PERSISTENT:
	        case MySqlParser.STATS_SAMPLE_PAGES:
	        case MySqlParser.STATUS:
	        case MySqlParser.STOP:
	        case MySqlParser.STORAGE:
	        case MySqlParser.STRING:
	        case MySqlParser.SUBCLASS_ORIGIN:
	        case MySqlParser.SUBJECT:
	        case MySqlParser.SUBPARTITION:
	        case MySqlParser.SUBPARTITIONS:
	        case MySqlParser.SUSPEND:
	        case MySqlParser.SWAPS:
	        case MySqlParser.SWITCHES:
	        case MySqlParser.TABLE_NAME:
	        case MySqlParser.TABLESPACE:
	        case MySqlParser.TEMPORARY:
	        case MySqlParser.TEMPTABLE:
	        case MySqlParser.THAN:
	        case MySqlParser.TRADITIONAL:
	        case MySqlParser.TRANSACTION:
	        case MySqlParser.TRANSACTIONAL:
	        case MySqlParser.TRIGGERS:
	        case MySqlParser.TRUNCATE:
	        case MySqlParser.UNDEFINED:
	        case MySqlParser.UNDOFILE:
	        case MySqlParser.UNDO_BUFFER_SIZE:
	        case MySqlParser.UNINSTALL:
	        case MySqlParser.UNKNOWN:
	        case MySqlParser.UNTIL:
	        case MySqlParser.UPGRADE:
	        case MySqlParser.USER:
	        case MySqlParser.USE_FRM:
	        case MySqlParser.USER_RESOURCES:
	        case MySqlParser.VALIDATION:
	        case MySqlParser.VALUE:
	        case MySqlParser.VARIABLES:
	        case MySqlParser.VIEW:
	        case MySqlParser.VISIBLE:
	        case MySqlParser.WAIT:
	        case MySqlParser.WARNINGS:
	        case MySqlParser.WITHOUT:
	        case MySqlParser.WORK:
	        case MySqlParser.WRAPPER:
	        case MySqlParser.X509:
	        case MySqlParser.XA:
	        case MySqlParser.XML:
	        case MySqlParser.INTERNAL:
	        case MySqlParser.QUARTER:
	        case MySqlParser.MONTH:
	        case MySqlParser.DAY:
	        case MySqlParser.HOUR:
	        case MySqlParser.MINUTE:
	        case MySqlParser.WEEK:
	        case MySqlParser.SECOND:
	        case MySqlParser.MICROSECOND:
	        case MySqlParser.TABLES:
	        case MySqlParser.ROUTINE:
	        case MySqlParser.EXECUTE:
	        case MySqlParser.FILE:
	        case MySqlParser.PROCESS:
	        case MySqlParser.RELOAD:
	        case MySqlParser.SHUTDOWN:
	        case MySqlParser.SUPER:
	        case MySqlParser.PRIVILEGES:
	        case MySqlParser.AUDIT_ADMIN:
	        case MySqlParser.BACKUP_ADMIN:
	        case MySqlParser.BINLOG_ADMIN:
	        case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
	        case MySqlParser.CLONE_ADMIN:
	        case MySqlParser.CONNECTION_ADMIN:
	        case MySqlParser.ENCRYPTION_KEY_ADMIN:
	        case MySqlParser.FIREWALL_ADMIN:
	        case MySqlParser.FIREWALL_USER:
	        case MySqlParser.GROUP_REPLICATION_ADMIN:
	        case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
	        case MySqlParser.NDB_STORED_USER:
	        case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
	        case MySqlParser.REPLICATION_APPLIER:
	        case MySqlParser.REPLICATION_SLAVE_ADMIN:
	        case MySqlParser.RESOURCE_GROUP_ADMIN:
	        case MySqlParser.RESOURCE_GROUP_USER:
	        case MySqlParser.ROLE_ADMIN:
	        case MySqlParser.SESSION_VARIABLES_ADMIN:
	        case MySqlParser.SET_USER_ID:
	        case MySqlParser.SHOW_ROUTINE:
	        case MySqlParser.SYSTEM_VARIABLES_ADMIN:
	        case MySqlParser.TABLE_ENCRYPTION_ADMIN:
	        case MySqlParser.VERSION_TOKEN_ADMIN:
	        case MySqlParser.XA_RECOVER_ADMIN:
	        case MySqlParser.ARMSCII8:
	        case MySqlParser.ASCII:
	        case MySqlParser.BIG5:
	        case MySqlParser.CP1250:
	        case MySqlParser.CP1251:
	        case MySqlParser.CP1256:
	        case MySqlParser.CP1257:
	        case MySqlParser.CP850:
	        case MySqlParser.CP852:
	        case MySqlParser.CP866:
	        case MySqlParser.CP932:
	        case MySqlParser.DEC8:
	        case MySqlParser.EUCJPMS:
	        case MySqlParser.EUCKR:
	        case MySqlParser.GB2312:
	        case MySqlParser.GBK:
	        case MySqlParser.GEOSTD8:
	        case MySqlParser.GREEK:
	        case MySqlParser.HEBREW:
	        case MySqlParser.HP8:
	        case MySqlParser.KEYBCS2:
	        case MySqlParser.KOI8R:
	        case MySqlParser.KOI8U:
	        case MySqlParser.LATIN1:
	        case MySqlParser.LATIN2:
	        case MySqlParser.LATIN5:
	        case MySqlParser.LATIN7:
	        case MySqlParser.MACCE:
	        case MySqlParser.MACROMAN:
	        case MySqlParser.SJIS:
	        case MySqlParser.SWE7:
	        case MySqlParser.TIS620:
	        case MySqlParser.UCS2:
	        case MySqlParser.UJIS:
	        case MySqlParser.UTF16:
	        case MySqlParser.UTF16LE:
	        case MySqlParser.UTF32:
	        case MySqlParser.UTF8:
	        case MySqlParser.UTF8MB3:
	        case MySqlParser.UTF8MB4:
	        case MySqlParser.ARCHIVE:
	        case MySqlParser.BLACKHOLE:
	        case MySqlParser.CSV:
	        case MySqlParser.FEDERATED:
	        case MySqlParser.INNODB:
	        case MySqlParser.MEMORY:
	        case MySqlParser.MRG_MYISAM:
	        case MySqlParser.MYISAM:
	        case MySqlParser.NDB:
	        case MySqlParser.NDBCLUSTER:
	        case MySqlParser.PERFORMANCE_SCHEMA:
	        case MySqlParser.TOKUDB:
	        case MySqlParser.REPEATABLE:
	        case MySqlParser.COMMITTED:
	        case MySqlParser.UNCOMMITTED:
	        case MySqlParser.SERIALIZABLE:
	        case MySqlParser.GEOMETRYCOLLECTION:
	        case MySqlParser.LINESTRING:
	        case MySqlParser.MULTILINESTRING:
	        case MySqlParser.MULTIPOINT:
	        case MySqlParser.MULTIPOLYGON:
	        case MySqlParser.POINT:
	        case MySqlParser.POLYGON:
	        case MySqlParser.ABS:
	        case MySqlParser.ACOS:
	        case MySqlParser.ADDDATE:
	        case MySqlParser.ADDTIME:
	        case MySqlParser.AES_DECRYPT:
	        case MySqlParser.AES_ENCRYPT:
	        case MySqlParser.AREA:
	        case MySqlParser.ASBINARY:
	        case MySqlParser.ASIN:
	        case MySqlParser.ASTEXT:
	        case MySqlParser.ASWKB:
	        case MySqlParser.ASWKT:
	        case MySqlParser.ASYMMETRIC_DECRYPT:
	        case MySqlParser.ASYMMETRIC_DERIVE:
	        case MySqlParser.ASYMMETRIC_ENCRYPT:
	        case MySqlParser.ASYMMETRIC_SIGN:
	        case MySqlParser.ASYMMETRIC_VERIFY:
	        case MySqlParser.ATAN:
	        case MySqlParser.ATAN2:
	        case MySqlParser.BENCHMARK:
	        case MySqlParser.BIN:
	        case MySqlParser.BIT_COUNT:
	        case MySqlParser.BIT_LENGTH:
	        case MySqlParser.BUFFER:
	        case MySqlParser.CATALOG_NAME:
	        case MySqlParser.CEIL:
	        case MySqlParser.CEILING:
	        case MySqlParser.CENTROID:
	        case MySqlParser.CHARACTER_LENGTH:
	        case MySqlParser.CHARSET:
	        case MySqlParser.CHAR_LENGTH:
	        case MySqlParser.COERCIBILITY:
	        case MySqlParser.COLLATION:
	        case MySqlParser.COMPRESS:
	        case MySqlParser.CONCAT:
	        case MySqlParser.CONCAT_WS:
	        case MySqlParser.CONNECTION_ID:
	        case MySqlParser.CONV:
	        case MySqlParser.CONVERT_TZ:
	        case MySqlParser.COS:
	        case MySqlParser.COT:
	        case MySqlParser.CRC32:
	        case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
	        case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
	        case MySqlParser.CREATE_DH_PARAMETERS:
	        case MySqlParser.CREATE_DIGEST:
	        case MySqlParser.CROSSES:
	        case MySqlParser.DATEDIFF:
	        case MySqlParser.DATE_FORMAT:
	        case MySqlParser.DAYNAME:
	        case MySqlParser.DAYOFMONTH:
	        case MySqlParser.DAYOFWEEK:
	        case MySqlParser.DAYOFYEAR:
	        case MySqlParser.DECODE:
	        case MySqlParser.DEGREES:
	        case MySqlParser.DES_DECRYPT:
	        case MySqlParser.DES_ENCRYPT:
	        case MySqlParser.DIMENSION:
	        case MySqlParser.DISJOINT:
	        case MySqlParser.ELT:
	        case MySqlParser.ENCODE:
	        case MySqlParser.ENCRYPT:
	        case MySqlParser.ENDPOINT:
	        case MySqlParser.ENVELOPE:
	        case MySqlParser.EQUALS:
	        case MySqlParser.EXP:
	        case MySqlParser.EXPORT_SET:
	        case MySqlParser.EXTERIORRING:
	        case MySqlParser.EXTRACTVALUE:
	        case MySqlParser.FIELD:
	        case MySqlParser.FIND_IN_SET:
	        case MySqlParser.FLOOR:
	        case MySqlParser.FORMAT:
	        case MySqlParser.FOUND_ROWS:
	        case MySqlParser.FROM_BASE64:
	        case MySqlParser.FROM_DAYS:
	        case MySqlParser.FROM_UNIXTIME:
	        case MySqlParser.GEOMCOLLFROMTEXT:
	        case MySqlParser.GEOMCOLLFROMWKB:
	        case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
	        case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
	        case MySqlParser.GEOMETRYFROMTEXT:
	        case MySqlParser.GEOMETRYFROMWKB:
	        case MySqlParser.GEOMETRYN:
	        case MySqlParser.GEOMETRYTYPE:
	        case MySqlParser.GEOMFROMTEXT:
	        case MySqlParser.GEOMFROMWKB:
	        case MySqlParser.GET_FORMAT:
	        case MySqlParser.GET_LOCK:
	        case MySqlParser.GLENGTH:
	        case MySqlParser.GREATEST:
	        case MySqlParser.GTID_SUBSET:
	        case MySqlParser.GTID_SUBTRACT:
	        case MySqlParser.HEX:
	        case MySqlParser.IFNULL:
	        case MySqlParser.INET6_ATON:
	        case MySqlParser.INET6_NTOA:
	        case MySqlParser.INET_ATON:
	        case MySqlParser.INET_NTOA:
	        case MySqlParser.INSTR:
	        case MySqlParser.INTERIORRINGN:
	        case MySqlParser.INTERSECTS:
	        case MySqlParser.ISCLOSED:
	        case MySqlParser.ISEMPTY:
	        case MySqlParser.ISNULL:
	        case MySqlParser.ISSIMPLE:
	        case MySqlParser.IS_FREE_LOCK:
	        case MySqlParser.IS_IPV4:
	        case MySqlParser.IS_IPV4_COMPAT:
	        case MySqlParser.IS_IPV4_MAPPED:
	        case MySqlParser.IS_IPV6:
	        case MySqlParser.IS_USED_LOCK:
	        case MySqlParser.LAST_INSERT_ID:
	        case MySqlParser.LCASE:
	        case MySqlParser.LEAST:
	        case MySqlParser.LENGTH:
	        case MySqlParser.LINEFROMTEXT:
	        case MySqlParser.LINEFROMWKB:
	        case MySqlParser.LINESTRINGFROMTEXT:
	        case MySqlParser.LINESTRINGFROMWKB:
	        case MySqlParser.LN:
	        case MySqlParser.LOAD_FILE:
	        case MySqlParser.LOCATE:
	        case MySqlParser.LOG:
	        case MySqlParser.LOG10:
	        case MySqlParser.LOG2:
	        case MySqlParser.LOWER:
	        case MySqlParser.LPAD:
	        case MySqlParser.LTRIM:
	        case MySqlParser.MAKEDATE:
	        case MySqlParser.MAKETIME:
	        case MySqlParser.MAKE_SET:
	        case MySqlParser.MASTER_POS_WAIT:
	        case MySqlParser.MBRCONTAINS:
	        case MySqlParser.MBRDISJOINT:
	        case MySqlParser.MBREQUAL:
	        case MySqlParser.MBRINTERSECTS:
	        case MySqlParser.MBROVERLAPS:
	        case MySqlParser.MBRTOUCHES:
	        case MySqlParser.MBRWITHIN:
	        case MySqlParser.MD5:
	        case MySqlParser.MLINEFROMTEXT:
	        case MySqlParser.MLINEFROMWKB:
	        case MySqlParser.MONTHNAME:
	        case MySqlParser.MPOINTFROMTEXT:
	        case MySqlParser.MPOINTFROMWKB:
	        case MySqlParser.MPOLYFROMTEXT:
	        case MySqlParser.MPOLYFROMWKB:
	        case MySqlParser.MULTILINESTRINGFROMTEXT:
	        case MySqlParser.MULTILINESTRINGFROMWKB:
	        case MySqlParser.MULTIPOINTFROMTEXT:
	        case MySqlParser.MULTIPOINTFROMWKB:
	        case MySqlParser.MULTIPOLYGONFROMTEXT:
	        case MySqlParser.MULTIPOLYGONFROMWKB:
	        case MySqlParser.NAME_CONST:
	        case MySqlParser.NULLIF:
	        case MySqlParser.NUMGEOMETRIES:
	        case MySqlParser.NUMINTERIORRINGS:
	        case MySqlParser.NUMPOINTS:
	        case MySqlParser.OCT:
	        case MySqlParser.OCTET_LENGTH:
	        case MySqlParser.ORD:
	        case MySqlParser.OVERLAPS:
	        case MySqlParser.PERIOD_ADD:
	        case MySqlParser.PERIOD_DIFF:
	        case MySqlParser.PI:
	        case MySqlParser.POINTFROMTEXT:
	        case MySqlParser.POINTFROMWKB:
	        case MySqlParser.POINTN:
	        case MySqlParser.POLYFROMTEXT:
	        case MySqlParser.POLYFROMWKB:
	        case MySqlParser.POLYGONFROMTEXT:
	        case MySqlParser.POLYGONFROMWKB:
	        case MySqlParser.POW:
	        case MySqlParser.POWER:
	        case MySqlParser.QUOTE:
	        case MySqlParser.RADIANS:
	        case MySqlParser.RAND:
	        case MySqlParser.RANDOM_BYTES:
	        case MySqlParser.RELEASE_LOCK:
	        case MySqlParser.REVERSE:
	        case MySqlParser.ROUND:
	        case MySqlParser.ROW_COUNT:
	        case MySqlParser.RPAD:
	        case MySqlParser.RTRIM:
	        case MySqlParser.SEC_TO_TIME:
	        case MySqlParser.SESSION_USER:
	        case MySqlParser.SHA:
	        case MySqlParser.SHA1:
	        case MySqlParser.SHA2:
	        case MySqlParser.SCHEMA_NAME:
	        case MySqlParser.SIGN:
	        case MySqlParser.SIN:
	        case MySqlParser.SLEEP:
	        case MySqlParser.SOUNDEX:
	        case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
	        case MySqlParser.SQRT:
	        case MySqlParser.SRID:
	        case MySqlParser.STARTPOINT:
	        case MySqlParser.STRCMP:
	        case MySqlParser.STR_TO_DATE:
	        case MySqlParser.ST_AREA:
	        case MySqlParser.ST_ASBINARY:
	        case MySqlParser.ST_ASTEXT:
	        case MySqlParser.ST_ASWKB:
	        case MySqlParser.ST_ASWKT:
	        case MySqlParser.ST_BUFFER:
	        case MySqlParser.ST_CENTROID:
	        case MySqlParser.ST_CONTAINS:
	        case MySqlParser.ST_CROSSES:
	        case MySqlParser.ST_DIFFERENCE:
	        case MySqlParser.ST_DIMENSION:
	        case MySqlParser.ST_DISJOINT:
	        case MySqlParser.ST_DISTANCE:
	        case MySqlParser.ST_ENDPOINT:
	        case MySqlParser.ST_ENVELOPE:
	        case MySqlParser.ST_EQUALS:
	        case MySqlParser.ST_EXTERIORRING:
	        case MySqlParser.ST_GEOMCOLLFROMTEXT:
	        case MySqlParser.ST_GEOMCOLLFROMTXT:
	        case MySqlParser.ST_GEOMCOLLFROMWKB:
	        case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
	        case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
	        case MySqlParser.ST_GEOMETRYFROMTEXT:
	        case MySqlParser.ST_GEOMETRYFROMWKB:
	        case MySqlParser.ST_GEOMETRYN:
	        case MySqlParser.ST_GEOMETRYTYPE:
	        case MySqlParser.ST_GEOMFROMTEXT:
	        case MySqlParser.ST_GEOMFROMWKB:
	        case MySqlParser.ST_INTERIORRINGN:
	        case MySqlParser.ST_INTERSECTION:
	        case MySqlParser.ST_INTERSECTS:
	        case MySqlParser.ST_ISCLOSED:
	        case MySqlParser.ST_ISEMPTY:
	        case MySqlParser.ST_ISSIMPLE:
	        case MySqlParser.ST_LINEFROMTEXT:
	        case MySqlParser.ST_LINEFROMWKB:
	        case MySqlParser.ST_LINESTRINGFROMTEXT:
	        case MySqlParser.ST_LINESTRINGFROMWKB:
	        case MySqlParser.ST_NUMGEOMETRIES:
	        case MySqlParser.ST_NUMINTERIORRING:
	        case MySqlParser.ST_NUMINTERIORRINGS:
	        case MySqlParser.ST_NUMPOINTS:
	        case MySqlParser.ST_OVERLAPS:
	        case MySqlParser.ST_POINTFROMTEXT:
	        case MySqlParser.ST_POINTFROMWKB:
	        case MySqlParser.ST_POINTN:
	        case MySqlParser.ST_POLYFROMTEXT:
	        case MySqlParser.ST_POLYFROMWKB:
	        case MySqlParser.ST_POLYGONFROMTEXT:
	        case MySqlParser.ST_POLYGONFROMWKB:
	        case MySqlParser.ST_SRID:
	        case MySqlParser.ST_STARTPOINT:
	        case MySqlParser.ST_SYMDIFFERENCE:
	        case MySqlParser.ST_TOUCHES:
	        case MySqlParser.ST_UNION:
	        case MySqlParser.ST_WITHIN:
	        case MySqlParser.ST_X:
	        case MySqlParser.ST_Y:
	        case MySqlParser.SUBDATE:
	        case MySqlParser.SUBSTRING_INDEX:
	        case MySqlParser.SUBTIME:
	        case MySqlParser.SYSTEM_USER:
	        case MySqlParser.TAN:
	        case MySqlParser.TIMEDIFF:
	        case MySqlParser.TIMESTAMPADD:
	        case MySqlParser.TIMESTAMPDIFF:
	        case MySqlParser.TIME_FORMAT:
	        case MySqlParser.TIME_TO_SEC:
	        case MySqlParser.TOUCHES:
	        case MySqlParser.TO_BASE64:
	        case MySqlParser.TO_DAYS:
	        case MySqlParser.TO_SECONDS:
	        case MySqlParser.UCASE:
	        case MySqlParser.UNCOMPRESS:
	        case MySqlParser.UNCOMPRESSED_LENGTH:
	        case MySqlParser.UNHEX:
	        case MySqlParser.UNIX_TIMESTAMP:
	        case MySqlParser.UPDATEXML:
	        case MySqlParser.UPPER:
	        case MySqlParser.UUID:
	        case MySqlParser.UUID_SHORT:
	        case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
	        case MySqlParser.VERSION:
	        case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
	        case MySqlParser.WEEKDAY:
	        case MySqlParser.WEEKOFYEAR:
	        case MySqlParser.WEIGHT_STRING:
	        case MySqlParser.WITHIN:
	        case MySqlParser.YEARWEEK:
	        case MySqlParser.Y_FUNCTION:
	        case MySqlParser.X_FUNCTION:
	        case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
	        case MySqlParser.STRING_LITERAL:
	        case MySqlParser.ID:
	        case MySqlParser.REVERSE_QUOTE_ID:
	            this.state = 3135;
	            this.tableName();
	            this.state = 3138;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.DOT) {
	                this.state = 3136;
	                this.match(MySqlParser.DOT);
	                this.state = 3137;
	                this.match(MySqlParser.STAR);
	            }

	            this.state = 3148;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 3140;
	                this.match(MySqlParser.COMMA);
	                this.state = 3141;
	                this.tableName();
	                this.state = 3144;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===MySqlParser.DOT) {
	                    this.state = 3142;
	                    this.match(MySqlParser.DOT);
	                    this.state = 3143;
	                    this.match(MySqlParser.STAR);
	                }

	                this.state = 3150;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3151;
	            this.match(MySqlParser.FROM);
	            this.state = 3152;
	            this.tableSources();
	            break;
	        case MySqlParser.FROM:
	            this.state = 3154;
	            this.match(MySqlParser.FROM);
	            this.state = 3155;
	            this.tableName();
	            this.state = 3158;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.DOT) {
	                this.state = 3156;
	                this.match(MySqlParser.DOT);
	                this.state = 3157;
	                this.match(MySqlParser.STAR);
	            }

	            this.state = 3168;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 3160;
	                this.match(MySqlParser.COMMA);
	                this.state = 3161;
	                this.tableName();
	                this.state = 3164;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===MySqlParser.DOT) {
	                    this.state = 3162;
	                    this.match(MySqlParser.DOT);
	                    this.state = 3163;
	                    this.match(MySqlParser.STAR);
	                }

	                this.state = 3170;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3171;
	            this.match(MySqlParser.USING);
	            this.state = 3172;
	            this.tableSources();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 3178;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.WHERE) {
	            this.state = 3176;
	            this.match(MySqlParser.WHERE);
	            this.state = 3177;
	            this.expression(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	handlerOpenStatement() {
	    let localctx = new HandlerOpenStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, MySqlParser.RULE_handlerOpenStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3180;
	        this.match(MySqlParser.HANDLER);
	        this.state = 3181;
	        this.tableName();
	        this.state = 3182;
	        this.match(MySqlParser.OPEN);
	        this.state = 3187;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,442,this._ctx);
	        if(la_===1) {
	            this.state = 3184;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.AS) {
	                this.state = 3183;
	                this.match(MySqlParser.AS);
	            }

	            this.state = 3186;
	            this.uid();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	handlerReadIndexStatement() {
	    let localctx = new HandlerReadIndexStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, MySqlParser.RULE_handlerReadIndexStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3189;
	        this.match(MySqlParser.HANDLER);
	        this.state = 3190;
	        this.tableName();
	        this.state = 3191;
	        this.match(MySqlParser.READ);
	        this.state = 3192;
	        localctx.index = this.uid();
	        this.state = 3199;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.EQUAL_SYMBOL:
	        case MySqlParser.GREATER_SYMBOL:
	        case MySqlParser.LESS_SYMBOL:
	        case MySqlParser.EXCLAMATION_SYMBOL:
	            this.state = 3193;
	            this.comparisonOperator();
	            this.state = 3194;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3195;
	            this.constants();
	            this.state = 3196;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        case MySqlParser.FIRST:
	        case MySqlParser.LAST:
	        case MySqlParser.NEXT:
	        case MySqlParser.PREV:
	            this.state = 3198;
	            localctx.moveOrder = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.FIRST || _la===MySqlParser.LAST || _la===MySqlParser.NEXT || _la===MySqlParser.PREV)) {
	                localctx.moveOrder = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 3203;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.WHERE) {
	            this.state = 3201;
	            this.match(MySqlParser.WHERE);
	            this.state = 3202;
	            this.expression(0);
	        }

	        this.state = 3207;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.LIMIT) {
	            this.state = 3205;
	            this.match(MySqlParser.LIMIT);
	            this.state = 3206;
	            this.limitClauseAtom();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	handlerReadStatement() {
	    let localctx = new HandlerReadStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, MySqlParser.RULE_handlerReadStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3209;
	        this.match(MySqlParser.HANDLER);
	        this.state = 3210;
	        this.tableName();
	        this.state = 3211;
	        this.match(MySqlParser.READ);
	        this.state = 3212;
	        localctx.moveOrder = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.FIRST || _la===MySqlParser.NEXT)) {
	            localctx.moveOrder = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3215;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.WHERE) {
	            this.state = 3213;
	            this.match(MySqlParser.WHERE);
	            this.state = 3214;
	            this.expression(0);
	        }

	        this.state = 3219;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.LIMIT) {
	            this.state = 3217;
	            this.match(MySqlParser.LIMIT);
	            this.state = 3218;
	            this.limitClauseAtom();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	handlerCloseStatement() {
	    let localctx = new HandlerCloseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, MySqlParser.RULE_handlerCloseStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3221;
	        this.match(MySqlParser.HANDLER);
	        this.state = 3222;
	        this.tableName();
	        this.state = 3223;
	        this.match(MySqlParser.CLOSE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleUpdateStatement() {
	    let localctx = new SingleUpdateStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, MySqlParser.RULE_singleUpdateStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3225;
	        this.match(MySqlParser.UPDATE);
	        this.state = 3227;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.LOW_PRIORITY) {
	            this.state = 3226;
	            localctx.priority = this.match(MySqlParser.LOW_PRIORITY);
	        }

	        this.state = 3230;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.IGNORE) {
	            this.state = 3229;
	            this.match(MySqlParser.IGNORE);
	        }

	        this.state = 3232;
	        this.tableName();
	        this.state = 3237;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.AS || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySqlParser.CURRENT - 32)) | (1 << (MySqlParser.DATABASE - 32)) | (1 << (MySqlParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySqlParser.LEFT || _la===MySqlParser.NUMBER || _la===MySqlParser.RIGHT || _la===MySqlParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.TIMESTAMP - 199)) | (1 << (MySqlParser.DATETIME - 199)) | (1 << (MySqlParser.YEAR - 199)) | (1 << (MySqlParser.TEXT - 199)) | (1 << (MySqlParser.ENUM - 199)) | (1 << (MySqlParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.JSON_VALID - 233)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySqlParser.AVG - 233)) | (1 << (MySqlParser.BIT_AND - 233)) | (1 << (MySqlParser.BIT_OR - 233)) | (1 << (MySqlParser.BIT_XOR - 233)) | (1 << (MySqlParser.COUNT - 233)) | (1 << (MySqlParser.GROUP_CONCAT - 233)) | (1 << (MySqlParser.MAX - 233)) | (1 << (MySqlParser.MIN - 233)) | (1 << (MySqlParser.STD - 233)) | (1 << (MySqlParser.STDDEV - 233)) | (1 << (MySqlParser.STDDEV_POP - 233)) | (1 << (MySqlParser.STDDEV_SAMP - 233)) | (1 << (MySqlParser.SUM - 233)) | (1 << (MySqlParser.VAR_POP - 233)) | (1 << (MySqlParser.VAR_SAMP - 233)) | (1 << (MySqlParser.VARIANCE - 233)) | (1 << (MySqlParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySqlParser.ACCOUNT - 270)) | (1 << (MySqlParser.ACTION - 270)) | (1 << (MySqlParser.AFTER - 270)) | (1 << (MySqlParser.AGGREGATE - 270)) | (1 << (MySqlParser.ALGORITHM - 270)) | (1 << (MySqlParser.ANY - 270)) | (1 << (MySqlParser.AT - 270)) | (1 << (MySqlParser.AUTHORS - 270)) | (1 << (MySqlParser.AUTOCOMMIT - 270)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySqlParser.AUTO_INCREMENT - 270)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 270)) | (1 << (MySqlParser.BEGIN - 270)) | (1 << (MySqlParser.BINLOG - 270)) | (1 << (MySqlParser.BIT - 270)) | (1 << (MySqlParser.BLOCK - 270)) | (1 << (MySqlParser.BOOL - 270)) | (1 << (MySqlParser.BOOLEAN - 270)) | (1 << (MySqlParser.BTREE - 270)) | (1 << (MySqlParser.CACHE - 270)) | (1 << (MySqlParser.CASCADED - 270)) | (1 << (MySqlParser.CHAIN - 270)) | (1 << (MySqlParser.CHANGED - 270)) | (1 << (MySqlParser.CHANNEL - 270)) | (1 << (MySqlParser.CHECKSUM - 270)) | (1 << (MySqlParser.PAGE_CHECKSUM - 270)) | (1 << (MySqlParser.CIPHER - 270)) | (1 << (MySqlParser.CLASS_ORIGIN - 270)) | (1 << (MySqlParser.CLIENT - 270)) | (1 << (MySqlParser.CLOSE - 270)) | (1 << (MySqlParser.COALESCE - 270)) | (1 << (MySqlParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySqlParser.COLUMNS - 302)) | (1 << (MySqlParser.COLUMN_FORMAT - 302)) | (1 << (MySqlParser.COLUMN_NAME - 302)) | (1 << (MySqlParser.COMMENT - 302)) | (1 << (MySqlParser.COMMIT - 302)) | (1 << (MySqlParser.COMPACT - 302)) | (1 << (MySqlParser.COMPLETION - 302)) | (1 << (MySqlParser.COMPRESSED - 302)) | (1 << (MySqlParser.COMPRESSION - 302)) | (1 << (MySqlParser.CONCURRENT - 302)) | (1 << (MySqlParser.CONNECTION - 302)) | (1 << (MySqlParser.CONSISTENT - 302)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySqlParser.CONSTRAINT_NAME - 302)) | (1 << (MySqlParser.CONTAINS - 302)) | (1 << (MySqlParser.CONTEXT - 302)) | (1 << (MySqlParser.CONTRIBUTORS - 302)) | (1 << (MySqlParser.COPY - 302)) | (1 << (MySqlParser.CPU - 302)) | (1 << (MySqlParser.CURSOR_NAME - 302)) | (1 << (MySqlParser.DATA - 302)) | (1 << (MySqlParser.DATAFILE - 302)) | (1 << (MySqlParser.DEALLOCATE - 302)) | (1 << (MySqlParser.DEFAULT_AUTH - 302)) | (1 << (MySqlParser.DEFINER - 302)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 302)) | (1 << (MySqlParser.DES_KEY_FILE - 302)) | (1 << (MySqlParser.DIRECTORY - 302)) | (1 << (MySqlParser.DISABLE - 302)) | (1 << (MySqlParser.DISCARD - 302)) | (1 << (MySqlParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySqlParser.DO - 334)) | (1 << (MySqlParser.DUMPFILE - 334)) | (1 << (MySqlParser.DUPLICATE - 334)) | (1 << (MySqlParser.DYNAMIC - 334)) | (1 << (MySqlParser.ENABLE - 334)) | (1 << (MySqlParser.ENCRYPTION - 334)) | (1 << (MySqlParser.END - 334)) | (1 << (MySqlParser.ENDS - 334)) | (1 << (MySqlParser.ENGINE - 334)) | (1 << (MySqlParser.ENGINES - 334)) | (1 << (MySqlParser.ERROR - 334)) | (1 << (MySqlParser.ERRORS - 334)) | (1 << (MySqlParser.ESCAPE - 334)) | (1 << (MySqlParser.EVEN - 334)) | (1 << (MySqlParser.EVENT - 334)) | (1 << (MySqlParser.EVENTS - 334)) | (1 << (MySqlParser.EVERY - 334)) | (1 << (MySqlParser.EXCHANGE - 334)) | (1 << (MySqlParser.EXCLUSIVE - 334)) | (1 << (MySqlParser.EXPIRE - 334)) | (1 << (MySqlParser.EXPORT - 334)) | (1 << (MySqlParser.EXTENDED - 334)) | (1 << (MySqlParser.EXTENT_SIZE - 334)) | (1 << (MySqlParser.FAST - 334)) | (1 << (MySqlParser.FAULTS - 334)) | (1 << (MySqlParser.FIELDS - 334)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySqlParser.FILTER - 334)) | (1 << (MySqlParser.FIRST - 334)) | (1 << (MySqlParser.FIXED - 334)) | (1 << (MySqlParser.FLUSH - 334)) | (1 << (MySqlParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySqlParser.FOUND - 366)) | (1 << (MySqlParser.FULL - 366)) | (1 << (MySqlParser.FUNCTION - 366)) | (1 << (MySqlParser.GENERAL - 366)) | (1 << (MySqlParser.GLOBAL - 366)) | (1 << (MySqlParser.GRANTS - 366)) | (1 << (MySqlParser.GROUP_REPLICATION - 366)) | (1 << (MySqlParser.HANDLER - 366)) | (1 << (MySqlParser.HASH - 366)) | (1 << (MySqlParser.HELP - 366)) | (1 << (MySqlParser.HOST - 366)) | (1 << (MySqlParser.HOSTS - 366)) | (1 << (MySqlParser.IDENTIFIED - 366)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySqlParser.IMPORT - 366)) | (1 << (MySqlParser.INDEXES - 366)) | (1 << (MySqlParser.INITIAL_SIZE - 366)) | (1 << (MySqlParser.INPLACE - 366)) | (1 << (MySqlParser.INSERT_METHOD - 366)) | (1 << (MySqlParser.INSTALL - 366)) | (1 << (MySqlParser.INSTANCE - 366)) | (1 << (MySqlParser.INVISIBLE - 366)) | (1 << (MySqlParser.INVOKER - 366)) | (1 << (MySqlParser.IO - 366)) | (1 << (MySqlParser.IO_THREAD - 366)) | (1 << (MySqlParser.IPC - 366)) | (1 << (MySqlParser.ISOLATION - 366)) | (1 << (MySqlParser.ISSUER - 366)) | (1 << (MySqlParser.JSON - 366)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySqlParser.LANGUAGE - 366)) | (1 << (MySqlParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.LEAVES - 398)) | (1 << (MySqlParser.LESS - 398)) | (1 << (MySqlParser.LEVEL - 398)) | (1 << (MySqlParser.LIST - 398)) | (1 << (MySqlParser.LOCAL - 398)) | (1 << (MySqlParser.LOGFILE - 398)) | (1 << (MySqlParser.LOGS - 398)) | (1 << (MySqlParser.MASTER - 398)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySqlParser.MASTER_DELAY - 398)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySqlParser.MASTER_HOST - 398)) | (1 << (MySqlParser.MASTER_LOG_FILE - 398)) | (1 << (MySqlParser.MASTER_LOG_POS - 398)) | (1 << (MySqlParser.MASTER_PASSWORD - 398)) | (1 << (MySqlParser.MASTER_PORT - 398)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySqlParser.MASTER_SSL - 398)) | (1 << (MySqlParser.MASTER_SSL_CA - 398)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_CERT - 398)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySqlParser.MASTER_SSL_CRL - 398)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_KEY - 398)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 398)) | (1 << (MySqlParser.MASTER_USER - 398)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySqlParser.MEDIUM - 430)) | (1 << (MySqlParser.MEMBER - 430)) | (1 << (MySqlParser.MERGE - 430)) | (1 << (MySqlParser.MESSAGE_TEXT - 430)) | (1 << (MySqlParser.MID - 430)) | (1 << (MySqlParser.MIGRATE - 430)) | (1 << (MySqlParser.MIN_ROWS - 430)) | (1 << (MySqlParser.MODE - 430)) | (1 << (MySqlParser.MODIFY - 430)) | (1 << (MySqlParser.MUTEX - 430)) | (1 << (MySqlParser.MYSQL - 430)) | (1 << (MySqlParser.MYSQL_ERRNO - 430)) | (1 << (MySqlParser.NAME - 430)) | (1 << (MySqlParser.NAMES - 430)) | (1 << (MySqlParser.NCHAR - 430)) | (1 << (MySqlParser.NEVER - 430)) | (1 << (MySqlParser.NEXT - 430)) | (1 << (MySqlParser.NO - 430)) | (1 << (MySqlParser.NODEGROUP - 430)) | (1 << (MySqlParser.NONE - 430)) | (1 << (MySqlParser.OFFLINE - 430)) | (1 << (MySqlParser.OFFSET - 430)) | (1 << (MySqlParser.OF - 430)) | (1 << (MySqlParser.OJ - 430)) | (1 << (MySqlParser.OLD_PASSWORD - 430)) | (1 << (MySqlParser.ONE - 430)) | (1 << (MySqlParser.ONLINE - 430)) | (1 << (MySqlParser.ONLY - 430)) | (1 << (MySqlParser.OPEN - 430)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySqlParser.OPTIONS - 462)) | (1 << (MySqlParser.OWNER - 462)) | (1 << (MySqlParser.PACK_KEYS - 462)) | (1 << (MySqlParser.PAGE - 462)) | (1 << (MySqlParser.PARSER - 462)) | (1 << (MySqlParser.PARTIAL - 462)) | (1 << (MySqlParser.PARTITIONING - 462)) | (1 << (MySqlParser.PARTITIONS - 462)) | (1 << (MySqlParser.PASSWORD - 462)) | (1 << (MySqlParser.PHASE - 462)) | (1 << (MySqlParser.PLUGIN - 462)) | (1 << (MySqlParser.PLUGIN_DIR - 462)) | (1 << (MySqlParser.PLUGINS - 462)) | (1 << (MySqlParser.PORT - 462)) | (1 << (MySqlParser.PRECEDES - 462)) | (1 << (MySqlParser.PREPARE - 462)) | (1 << (MySqlParser.PRESERVE - 462)) | (1 << (MySqlParser.PREV - 462)) | (1 << (MySqlParser.PROCESSLIST - 462)) | (1 << (MySqlParser.PROFILE - 462)) | (1 << (MySqlParser.PROFILES - 462)) | (1 << (MySqlParser.PROXY - 462)) | (1 << (MySqlParser.QUERY - 462)) | (1 << (MySqlParser.QUICK - 462)) | (1 << (MySqlParser.REBUILD - 462)) | (1 << (MySqlParser.RECOVER - 462)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySqlParser.REDUNDANT - 462)) | (1 << (MySqlParser.RELAY - 462)) | (1 << (MySqlParser.RELAY_LOG_FILE - 462)) | (1 << (MySqlParser.RELAY_LOG_POS - 462)) | (1 << (MySqlParser.RELAYLOG - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySqlParser.REMOVE - 494)) | (1 << (MySqlParser.REORGANIZE - 494)) | (1 << (MySqlParser.REPAIR - 494)) | (1 << (MySqlParser.REPLICATE_DO_DB - 494)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATION - 494)) | (1 << (MySqlParser.RESET - 494)) | (1 << (MySqlParser.RESUME - 494)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 494)) | (1 << (MySqlParser.RETURNS - 494)) | (1 << (MySqlParser.ROLE - 494)) | (1 << (MySqlParser.ROLLBACK - 494)) | (1 << (MySqlParser.ROLLUP - 494)) | (1 << (MySqlParser.ROTATE - 494)) | (1 << (MySqlParser.ROW - 494)) | (1 << (MySqlParser.ROWS - 494)) | (1 << (MySqlParser.ROW_FORMAT - 494)) | (1 << (MySqlParser.SAVEPOINT - 494)) | (1 << (MySqlParser.SCHEDULE - 494)) | (1 << (MySqlParser.SECURITY - 494)) | (1 << (MySqlParser.SERVER - 494)) | (1 << (MySqlParser.SESSION - 494)) | (1 << (MySqlParser.SHARE - 494)) | (1 << (MySqlParser.SHARED - 494)) | (1 << (MySqlParser.SIGNED - 494)) | (1 << (MySqlParser.SIMPLE - 494)) | (1 << (MySqlParser.SLAVE - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySqlParser.SLOW - 526)) | (1 << (MySqlParser.SNAPSHOT - 526)) | (1 << (MySqlParser.SOCKET - 526)) | (1 << (MySqlParser.SOME - 526)) | (1 << (MySqlParser.SONAME - 526)) | (1 << (MySqlParser.SOUNDS - 526)) | (1 << (MySqlParser.SOURCE - 526)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySqlParser.SQL_CACHE - 526)) | (1 << (MySqlParser.SQL_NO_CACHE - 526)) | (1 << (MySqlParser.SQL_THREAD - 526)) | (1 << (MySqlParser.START - 526)) | (1 << (MySqlParser.STARTS - 526)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 526)) | (1 << (MySqlParser.STATS_PERSISTENT - 526)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySqlParser.STATUS - 526)) | (1 << (MySqlParser.STOP - 526)) | (1 << (MySqlParser.STORAGE - 526)) | (1 << (MySqlParser.STRING - 526)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySqlParser.SUBJECT - 526)) | (1 << (MySqlParser.SUBPARTITION - 526)) | (1 << (MySqlParser.SUBPARTITIONS - 526)) | (1 << (MySqlParser.SUSPEND - 526)) | (1 << (MySqlParser.SWAPS - 526)) | (1 << (MySqlParser.SWITCHES - 526)) | (1 << (MySqlParser.TABLE_NAME - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySqlParser.TABLESPACE - 558)) | (1 << (MySqlParser.TEMPORARY - 558)) | (1 << (MySqlParser.TEMPTABLE - 558)) | (1 << (MySqlParser.THAN - 558)) | (1 << (MySqlParser.TRADITIONAL - 558)) | (1 << (MySqlParser.TRANSACTION - 558)) | (1 << (MySqlParser.TRANSACTIONAL - 558)) | (1 << (MySqlParser.TRIGGERS - 558)) | (1 << (MySqlParser.TRUNCATE - 558)) | (1 << (MySqlParser.UNDEFINED - 558)) | (1 << (MySqlParser.UNDOFILE - 558)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySqlParser.UNINSTALL - 558)) | (1 << (MySqlParser.UNKNOWN - 558)) | (1 << (MySqlParser.UNTIL - 558)) | (1 << (MySqlParser.UPGRADE - 558)) | (1 << (MySqlParser.USER - 558)) | (1 << (MySqlParser.USE_FRM - 558)) | (1 << (MySqlParser.USER_RESOURCES - 558)) | (1 << (MySqlParser.VALIDATION - 558)) | (1 << (MySqlParser.VALUE - 558)) | (1 << (MySqlParser.VARIABLES - 558)) | (1 << (MySqlParser.VIEW - 558)) | (1 << (MySqlParser.VISIBLE - 558)) | (1 << (MySqlParser.WAIT - 558)) | (1 << (MySqlParser.WARNINGS - 558)) | (1 << (MySqlParser.WITHOUT - 558)) | (1 << (MySqlParser.WORK - 558)) | (1 << (MySqlParser.WRAPPER - 558)) | (1 << (MySqlParser.X509 - 558)) | (1 << (MySqlParser.XA - 558)))) !== 0) || ((((_la - 590)) & ~0x1f) == 0 && ((1 << (_la - 590)) & ((1 << (MySqlParser.XML - 590)) | (1 << (MySqlParser.INTERNAL - 590)) | (1 << (MySqlParser.QUARTER - 590)) | (1 << (MySqlParser.MONTH - 590)) | (1 << (MySqlParser.DAY - 590)) | (1 << (MySqlParser.HOUR - 590)) | (1 << (MySqlParser.MINUTE - 590)) | (1 << (MySqlParser.WEEK - 590)) | (1 << (MySqlParser.SECOND - 590)) | (1 << (MySqlParser.MICROSECOND - 590)) | (1 << (MySqlParser.TABLES - 590)) | (1 << (MySqlParser.ROUTINE - 590)) | (1 << (MySqlParser.EXECUTE - 590)) | (1 << (MySqlParser.FILE - 590)) | (1 << (MySqlParser.PROCESS - 590)) | (1 << (MySqlParser.RELOAD - 590)) | (1 << (MySqlParser.SHUTDOWN - 590)) | (1 << (MySqlParser.SUPER - 590)) | (1 << (MySqlParser.PRIVILEGES - 590)) | (1 << (MySqlParser.AUDIT_ADMIN - 590)) | (1 << (MySqlParser.BACKUP_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 590)) | (1 << (MySqlParser.CLONE_ADMIN - 590)) | (1 << (MySqlParser.CONNECTION_ADMIN - 590)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 590)) | (1 << (MySqlParser.FIREWALL_ADMIN - 590)))) !== 0) || ((((_la - 622)) & ~0x1f) == 0 && ((1 << (_la - 622)) & ((1 << (MySqlParser.FIREWALL_USER - 622)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 622)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 622)) | (1 << (MySqlParser.NDB_STORED_USER - 622)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.REPLICATION_APPLIER - 622)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 622)) | (1 << (MySqlParser.ROLE_ADMIN - 622)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.SET_USER_ID - 622)) | (1 << (MySqlParser.SHOW_ROUTINE - 622)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 622)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 622)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 622)) | (1 << (MySqlParser.ARMSCII8 - 622)) | (1 << (MySqlParser.ASCII - 622)) | (1 << (MySqlParser.BIG5 - 622)) | (1 << (MySqlParser.CP1250 - 622)) | (1 << (MySqlParser.CP1251 - 622)) | (1 << (MySqlParser.CP1256 - 622)) | (1 << (MySqlParser.CP1257 - 622)) | (1 << (MySqlParser.CP850 - 622)) | (1 << (MySqlParser.CP852 - 622)) | (1 << (MySqlParser.CP866 - 622)) | (1 << (MySqlParser.CP932 - 622)) | (1 << (MySqlParser.DEC8 - 622)) | (1 << (MySqlParser.EUCJPMS - 622)) | (1 << (MySqlParser.EUCKR - 622)) | (1 << (MySqlParser.GB2312 - 622)))) !== 0) || ((((_la - 654)) & ~0x1f) == 0 && ((1 << (_la - 654)) & ((1 << (MySqlParser.GBK - 654)) | (1 << (MySqlParser.GEOSTD8 - 654)) | (1 << (MySqlParser.GREEK - 654)) | (1 << (MySqlParser.HEBREW - 654)) | (1 << (MySqlParser.HP8 - 654)) | (1 << (MySqlParser.KEYBCS2 - 654)) | (1 << (MySqlParser.KOI8R - 654)) | (1 << (MySqlParser.KOI8U - 654)) | (1 << (MySqlParser.LATIN1 - 654)) | (1 << (MySqlParser.LATIN2 - 654)) | (1 << (MySqlParser.LATIN5 - 654)) | (1 << (MySqlParser.LATIN7 - 654)) | (1 << (MySqlParser.MACCE - 654)) | (1 << (MySqlParser.MACROMAN - 654)) | (1 << (MySqlParser.SJIS - 654)) | (1 << (MySqlParser.SWE7 - 654)) | (1 << (MySqlParser.TIS620 - 654)) | (1 << (MySqlParser.UCS2 - 654)) | (1 << (MySqlParser.UJIS - 654)) | (1 << (MySqlParser.UTF16 - 654)) | (1 << (MySqlParser.UTF16LE - 654)) | (1 << (MySqlParser.UTF32 - 654)) | (1 << (MySqlParser.UTF8 - 654)) | (1 << (MySqlParser.UTF8MB3 - 654)) | (1 << (MySqlParser.UTF8MB4 - 654)) | (1 << (MySqlParser.ARCHIVE - 654)) | (1 << (MySqlParser.BLACKHOLE - 654)) | (1 << (MySqlParser.CSV - 654)) | (1 << (MySqlParser.FEDERATED - 654)) | (1 << (MySqlParser.INNODB - 654)) | (1 << (MySqlParser.MEMORY - 654)) | (1 << (MySqlParser.MRG_MYISAM - 654)))) !== 0) || ((((_la - 686)) & ~0x1f) == 0 && ((1 << (_la - 686)) & ((1 << (MySqlParser.MYISAM - 686)) | (1 << (MySqlParser.NDB - 686)) | (1 << (MySqlParser.NDBCLUSTER - 686)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 686)) | (1 << (MySqlParser.TOKUDB - 686)) | (1 << (MySqlParser.REPEATABLE - 686)) | (1 << (MySqlParser.COMMITTED - 686)) | (1 << (MySqlParser.UNCOMMITTED - 686)) | (1 << (MySqlParser.SERIALIZABLE - 686)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 686)) | (1 << (MySqlParser.LINESTRING - 686)) | (1 << (MySqlParser.MULTILINESTRING - 686)) | (1 << (MySqlParser.MULTIPOINT - 686)) | (1 << (MySqlParser.MULTIPOLYGON - 686)) | (1 << (MySqlParser.POINT - 686)) | (1 << (MySqlParser.POLYGON - 686)) | (1 << (MySqlParser.ABS - 686)) | (1 << (MySqlParser.ACOS - 686)) | (1 << (MySqlParser.ADDDATE - 686)) | (1 << (MySqlParser.ADDTIME - 686)) | (1 << (MySqlParser.AES_DECRYPT - 686)) | (1 << (MySqlParser.AES_ENCRYPT - 686)) | (1 << (MySqlParser.AREA - 686)) | (1 << (MySqlParser.ASBINARY - 686)) | (1 << (MySqlParser.ASIN - 686)) | (1 << (MySqlParser.ASTEXT - 686)) | (1 << (MySqlParser.ASWKB - 686)) | (1 << (MySqlParser.ASWKT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 686)))) !== 0) || ((((_la - 718)) & ~0x1f) == 0 && ((1 << (_la - 718)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 718)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 718)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 718)) | (1 << (MySqlParser.ATAN - 718)) | (1 << (MySqlParser.ATAN2 - 718)) | (1 << (MySqlParser.BENCHMARK - 718)) | (1 << (MySqlParser.BIN - 718)) | (1 << (MySqlParser.BIT_COUNT - 718)) | (1 << (MySqlParser.BIT_LENGTH - 718)) | (1 << (MySqlParser.BUFFER - 718)) | (1 << (MySqlParser.CATALOG_NAME - 718)) | (1 << (MySqlParser.CEIL - 718)) | (1 << (MySqlParser.CEILING - 718)) | (1 << (MySqlParser.CENTROID - 718)) | (1 << (MySqlParser.CHARACTER_LENGTH - 718)) | (1 << (MySqlParser.CHARSET - 718)) | (1 << (MySqlParser.CHAR_LENGTH - 718)) | (1 << (MySqlParser.COERCIBILITY - 718)) | (1 << (MySqlParser.COLLATION - 718)) | (1 << (MySqlParser.COMPRESS - 718)) | (1 << (MySqlParser.CONCAT - 718)) | (1 << (MySqlParser.CONCAT_WS - 718)) | (1 << (MySqlParser.CONNECTION_ID - 718)) | (1 << (MySqlParser.CONV - 718)) | (1 << (MySqlParser.CONVERT_TZ - 718)) | (1 << (MySqlParser.COS - 718)) | (1 << (MySqlParser.COT - 718)) | (1 << (MySqlParser.CRC32 - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 718)) | (1 << (MySqlParser.CREATE_DIGEST - 718)))) !== 0) || ((((_la - 750)) & ~0x1f) == 0 && ((1 << (_la - 750)) & ((1 << (MySqlParser.CROSSES - 750)) | (1 << (MySqlParser.DATEDIFF - 750)) | (1 << (MySqlParser.DATE_FORMAT - 750)) | (1 << (MySqlParser.DAYNAME - 750)) | (1 << (MySqlParser.DAYOFMONTH - 750)) | (1 << (MySqlParser.DAYOFWEEK - 750)) | (1 << (MySqlParser.DAYOFYEAR - 750)) | (1 << (MySqlParser.DECODE - 750)) | (1 << (MySqlParser.DEGREES - 750)) | (1 << (MySqlParser.DES_DECRYPT - 750)) | (1 << (MySqlParser.DES_ENCRYPT - 750)) | (1 << (MySqlParser.DIMENSION - 750)) | (1 << (MySqlParser.DISJOINT - 750)) | (1 << (MySqlParser.ELT - 750)) | (1 << (MySqlParser.ENCODE - 750)) | (1 << (MySqlParser.ENCRYPT - 750)) | (1 << (MySqlParser.ENDPOINT - 750)) | (1 << (MySqlParser.ENVELOPE - 750)) | (1 << (MySqlParser.EQUALS - 750)) | (1 << (MySqlParser.EXP - 750)) | (1 << (MySqlParser.EXPORT_SET - 750)) | (1 << (MySqlParser.EXTERIORRING - 750)) | (1 << (MySqlParser.EXTRACTVALUE - 750)) | (1 << (MySqlParser.FIELD - 750)) | (1 << (MySqlParser.FIND_IN_SET - 750)) | (1 << (MySqlParser.FLOOR - 750)) | (1 << (MySqlParser.FORMAT - 750)) | (1 << (MySqlParser.FOUND_ROWS - 750)) | (1 << (MySqlParser.FROM_BASE64 - 750)) | (1 << (MySqlParser.FROM_DAYS - 750)) | (1 << (MySqlParser.FROM_UNIXTIME - 750)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 750)))) !== 0) || ((((_la - 782)) & ~0x1f) == 0 && ((1 << (_la - 782)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYN - 782)) | (1 << (MySqlParser.GEOMETRYTYPE - 782)) | (1 << (MySqlParser.GEOMFROMTEXT - 782)) | (1 << (MySqlParser.GEOMFROMWKB - 782)) | (1 << (MySqlParser.GET_FORMAT - 782)) | (1 << (MySqlParser.GET_LOCK - 782)) | (1 << (MySqlParser.GLENGTH - 782)) | (1 << (MySqlParser.GREATEST - 782)) | (1 << (MySqlParser.GTID_SUBSET - 782)) | (1 << (MySqlParser.GTID_SUBTRACT - 782)) | (1 << (MySqlParser.HEX - 782)) | (1 << (MySqlParser.IFNULL - 782)) | (1 << (MySqlParser.INET6_ATON - 782)) | (1 << (MySqlParser.INET6_NTOA - 782)) | (1 << (MySqlParser.INET_ATON - 782)) | (1 << (MySqlParser.INET_NTOA - 782)) | (1 << (MySqlParser.INSTR - 782)) | (1 << (MySqlParser.INTERIORRINGN - 782)) | (1 << (MySqlParser.INTERSECTS - 782)) | (1 << (MySqlParser.ISCLOSED - 782)) | (1 << (MySqlParser.ISEMPTY - 782)) | (1 << (MySqlParser.ISNULL - 782)) | (1 << (MySqlParser.ISSIMPLE - 782)) | (1 << (MySqlParser.IS_FREE_LOCK - 782)) | (1 << (MySqlParser.IS_IPV4 - 782)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 782)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 782)))) !== 0) || ((((_la - 814)) & ~0x1f) == 0 && ((1 << (_la - 814)) & ((1 << (MySqlParser.IS_IPV6 - 814)) | (1 << (MySqlParser.IS_USED_LOCK - 814)) | (1 << (MySqlParser.LAST_INSERT_ID - 814)) | (1 << (MySqlParser.LCASE - 814)) | (1 << (MySqlParser.LEAST - 814)) | (1 << (MySqlParser.LENGTH - 814)) | (1 << (MySqlParser.LINEFROMTEXT - 814)) | (1 << (MySqlParser.LINEFROMWKB - 814)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 814)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 814)) | (1 << (MySqlParser.LN - 814)) | (1 << (MySqlParser.LOAD_FILE - 814)) | (1 << (MySqlParser.LOCATE - 814)) | (1 << (MySqlParser.LOG - 814)) | (1 << (MySqlParser.LOG10 - 814)) | (1 << (MySqlParser.LOG2 - 814)) | (1 << (MySqlParser.LOWER - 814)) | (1 << (MySqlParser.LPAD - 814)) | (1 << (MySqlParser.LTRIM - 814)) | (1 << (MySqlParser.MAKEDATE - 814)) | (1 << (MySqlParser.MAKETIME - 814)) | (1 << (MySqlParser.MAKE_SET - 814)) | (1 << (MySqlParser.MASTER_POS_WAIT - 814)) | (1 << (MySqlParser.MBRCONTAINS - 814)) | (1 << (MySqlParser.MBRDISJOINT - 814)) | (1 << (MySqlParser.MBREQUAL - 814)) | (1 << (MySqlParser.MBRINTERSECTS - 814)) | (1 << (MySqlParser.MBROVERLAPS - 814)) | (1 << (MySqlParser.MBRTOUCHES - 814)) | (1 << (MySqlParser.MBRWITHIN - 814)) | (1 << (MySqlParser.MD5 - 814)) | (1 << (MySqlParser.MLINEFROMTEXT - 814)))) !== 0) || ((((_la - 846)) & ~0x1f) == 0 && ((1 << (_la - 846)) & ((1 << (MySqlParser.MLINEFROMWKB - 846)) | (1 << (MySqlParser.MONTHNAME - 846)) | (1 << (MySqlParser.MPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MPOINTFROMWKB - 846)) | (1 << (MySqlParser.MPOLYFROMTEXT - 846)) | (1 << (MySqlParser.MPOLYFROMWKB - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 846)) | (1 << (MySqlParser.NAME_CONST - 846)) | (1 << (MySqlParser.NULLIF - 846)) | (1 << (MySqlParser.NUMGEOMETRIES - 846)) | (1 << (MySqlParser.NUMINTERIORRINGS - 846)) | (1 << (MySqlParser.NUMPOINTS - 846)) | (1 << (MySqlParser.OCT - 846)) | (1 << (MySqlParser.OCTET_LENGTH - 846)) | (1 << (MySqlParser.ORD - 846)) | (1 << (MySqlParser.OVERLAPS - 846)) | (1 << (MySqlParser.PERIOD_ADD - 846)) | (1 << (MySqlParser.PERIOD_DIFF - 846)) | (1 << (MySqlParser.PI - 846)) | (1 << (MySqlParser.POINTFROMTEXT - 846)) | (1 << (MySqlParser.POINTFROMWKB - 846)) | (1 << (MySqlParser.POINTN - 846)) | (1 << (MySqlParser.POLYFROMTEXT - 846)) | (1 << (MySqlParser.POLYFROMWKB - 846)) | (1 << (MySqlParser.POLYGONFROMTEXT - 846)) | (1 << (MySqlParser.POLYGONFROMWKB - 846)) | (1 << (MySqlParser.POW - 846)))) !== 0) || ((((_la - 878)) & ~0x1f) == 0 && ((1 << (_la - 878)) & ((1 << (MySqlParser.POWER - 878)) | (1 << (MySqlParser.QUOTE - 878)) | (1 << (MySqlParser.RADIANS - 878)) | (1 << (MySqlParser.RAND - 878)) | (1 << (MySqlParser.RANDOM_BYTES - 878)) | (1 << (MySqlParser.RELEASE_LOCK - 878)) | (1 << (MySqlParser.REVERSE - 878)) | (1 << (MySqlParser.ROUND - 878)) | (1 << (MySqlParser.ROW_COUNT - 878)) | (1 << (MySqlParser.RPAD - 878)) | (1 << (MySqlParser.RTRIM - 878)) | (1 << (MySqlParser.SEC_TO_TIME - 878)) | (1 << (MySqlParser.SESSION_USER - 878)) | (1 << (MySqlParser.SHA - 878)) | (1 << (MySqlParser.SHA1 - 878)) | (1 << (MySqlParser.SHA2 - 878)) | (1 << (MySqlParser.SCHEMA_NAME - 878)) | (1 << (MySqlParser.SIGN - 878)) | (1 << (MySqlParser.SIN - 878)) | (1 << (MySqlParser.SLEEP - 878)) | (1 << (MySqlParser.SOUNDEX - 878)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 878)) | (1 << (MySqlParser.SQRT - 878)) | (1 << (MySqlParser.SRID - 878)) | (1 << (MySqlParser.STARTPOINT - 878)) | (1 << (MySqlParser.STRCMP - 878)) | (1 << (MySqlParser.STR_TO_DATE - 878)) | (1 << (MySqlParser.ST_AREA - 878)) | (1 << (MySqlParser.ST_ASBINARY - 878)) | (1 << (MySqlParser.ST_ASTEXT - 878)) | (1 << (MySqlParser.ST_ASWKB - 878)) | (1 << (MySqlParser.ST_ASWKT - 878)))) !== 0) || ((((_la - 910)) & ~0x1f) == 0 && ((1 << (_la - 910)) & ((1 << (MySqlParser.ST_BUFFER - 910)) | (1 << (MySqlParser.ST_CENTROID - 910)) | (1 << (MySqlParser.ST_CONTAINS - 910)) | (1 << (MySqlParser.ST_CROSSES - 910)) | (1 << (MySqlParser.ST_DIFFERENCE - 910)) | (1 << (MySqlParser.ST_DIMENSION - 910)) | (1 << (MySqlParser.ST_DISJOINT - 910)) | (1 << (MySqlParser.ST_DISTANCE - 910)) | (1 << (MySqlParser.ST_ENDPOINT - 910)) | (1 << (MySqlParser.ST_ENVELOPE - 910)) | (1 << (MySqlParser.ST_EQUALS - 910)) | (1 << (MySqlParser.ST_EXTERIORRING - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYN - 910)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 910)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 910)) | (1 << (MySqlParser.ST_INTERIORRINGN - 910)) | (1 << (MySqlParser.ST_INTERSECTION - 910)) | (1 << (MySqlParser.ST_INTERSECTS - 910)) | (1 << (MySqlParser.ST_ISCLOSED - 910)) | (1 << (MySqlParser.ST_ISEMPTY - 910)) | (1 << (MySqlParser.ST_ISSIMPLE - 910)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 910)) | (1 << (MySqlParser.ST_LINEFROMWKB - 910)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 910)))) !== 0) || ((((_la - 942)) & ~0x1f) == 0 && ((1 << (_la - 942)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 942)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 942)) | (1 << (MySqlParser.ST_NUMPOINTS - 942)) | (1 << (MySqlParser.ST_OVERLAPS - 942)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 942)) | (1 << (MySqlParser.ST_POINTFROMWKB - 942)) | (1 << (MySqlParser.ST_POINTN - 942)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYFROMWKB - 942)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 942)) | (1 << (MySqlParser.ST_SRID - 942)) | (1 << (MySqlParser.ST_STARTPOINT - 942)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 942)) | (1 << (MySqlParser.ST_TOUCHES - 942)) | (1 << (MySqlParser.ST_UNION - 942)) | (1 << (MySqlParser.ST_WITHIN - 942)) | (1 << (MySqlParser.ST_X - 942)) | (1 << (MySqlParser.ST_Y - 942)) | (1 << (MySqlParser.SUBDATE - 942)) | (1 << (MySqlParser.SUBSTRING_INDEX - 942)) | (1 << (MySqlParser.SUBTIME - 942)) | (1 << (MySqlParser.SYSTEM_USER - 942)) | (1 << (MySqlParser.TAN - 942)) | (1 << (MySqlParser.TIMEDIFF - 942)) | (1 << (MySqlParser.TIMESTAMPADD - 942)) | (1 << (MySqlParser.TIMESTAMPDIFF - 942)) | (1 << (MySqlParser.TIME_FORMAT - 942)) | (1 << (MySqlParser.TIME_TO_SEC - 942)) | (1 << (MySqlParser.TOUCHES - 942)))) !== 0) || ((((_la - 974)) & ~0x1f) == 0 && ((1 << (_la - 974)) & ((1 << (MySqlParser.TO_BASE64 - 974)) | (1 << (MySqlParser.TO_DAYS - 974)) | (1 << (MySqlParser.TO_SECONDS - 974)) | (1 << (MySqlParser.UCASE - 974)) | (1 << (MySqlParser.UNCOMPRESS - 974)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 974)) | (1 << (MySqlParser.UNHEX - 974)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 974)) | (1 << (MySqlParser.UPDATEXML - 974)) | (1 << (MySqlParser.UPPER - 974)) | (1 << (MySqlParser.UUID - 974)) | (1 << (MySqlParser.UUID_SHORT - 974)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 974)) | (1 << (MySqlParser.VERSION - 974)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1 << (MySqlParser.WEEKDAY - 974)) | (1 << (MySqlParser.WEEKOFYEAR - 974)) | (1 << (MySqlParser.WEIGHT_STRING - 974)) | (1 << (MySqlParser.WITHIN - 974)) | (1 << (MySqlParser.YEARWEEK - 974)) | (1 << (MySqlParser.Y_FUNCTION - 974)) | (1 << (MySqlParser.X_FUNCTION - 974)))) !== 0) || ((((_la - 1034)) & ~0x1f) == 0 && ((1 << (_la - 1034)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (MySqlParser.STRING_LITERAL - 1034)) | (1 << (MySqlParser.ID - 1034)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1034)))) !== 0)) {
	            this.state = 3234;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.AS) {
	                this.state = 3233;
	                this.match(MySqlParser.AS);
	            }

	            this.state = 3236;
	            this.uid();
	        }

	        this.state = 3239;
	        this.match(MySqlParser.SET);
	        this.state = 3240;
	        this.updatedElement();
	        this.state = 3245;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 3241;
	            this.match(MySqlParser.COMMA);
	            this.state = 3242;
	            this.updatedElement();
	            this.state = 3247;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3250;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.WHERE) {
	            this.state = 3248;
	            this.match(MySqlParser.WHERE);
	            this.state = 3249;
	            this.expression(0);
	        }

	        this.state = 3253;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.ORDER) {
	            this.state = 3252;
	            this.orderByClause();
	        }

	        this.state = 3256;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.LIMIT) {
	            this.state = 3255;
	            this.limitClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multipleUpdateStatement() {
	    let localctx = new MultipleUpdateStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, MySqlParser.RULE_multipleUpdateStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3258;
	        this.match(MySqlParser.UPDATE);
	        this.state = 3260;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.LOW_PRIORITY) {
	            this.state = 3259;
	            localctx.priority = this.match(MySqlParser.LOW_PRIORITY);
	        }

	        this.state = 3263;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.IGNORE) {
	            this.state = 3262;
	            this.match(MySqlParser.IGNORE);
	        }

	        this.state = 3265;
	        this.tableSources();
	        this.state = 3266;
	        this.match(MySqlParser.SET);
	        this.state = 3267;
	        this.updatedElement();
	        this.state = 3272;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 3268;
	            this.match(MySqlParser.COMMA);
	            this.state = 3269;
	            this.updatedElement();
	            this.state = 3274;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3277;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.WHERE) {
	            this.state = 3275;
	            this.match(MySqlParser.WHERE);
	            this.state = 3276;
	            this.expression(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderByClause() {
	    let localctx = new OrderByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, MySqlParser.RULE_orderByClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3279;
	        this.match(MySqlParser.ORDER);
	        this.state = 3280;
	        this.match(MySqlParser.BY);
	        this.state = 3281;
	        this.orderByExpression();
	        this.state = 3286;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 3282;
	            this.match(MySqlParser.COMMA);
	            this.state = 3283;
	            this.orderByExpression();
	            this.state = 3288;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderByExpression() {
	    let localctx = new OrderByExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, MySqlParser.RULE_orderByExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3289;
	        this.expression(0);
	        this.state = 3291;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,461,this._ctx);
	        if(la_===1) {
	            this.state = 3290;
	            localctx.order = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.ASC || _la===MySqlParser.DESC)) {
	                localctx.order = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableSources() {
	    let localctx = new TableSourcesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, MySqlParser.RULE_tableSources);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3293;
	        this.tableSource();
	        this.state = 3298;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 3294;
	            this.match(MySqlParser.COMMA);
	            this.state = 3295;
	            this.tableSource();
	            this.state = 3300;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableSource() {
	    let localctx = new TableSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, MySqlParser.RULE_tableSource);
	    var _la = 0; // Token type
	    try {
	        this.state = 3318;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,465,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new TableSourceBaseContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3301;
	            this.tableSourceItem();
	            this.state = 3305;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,463,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3302;
	                    this.joinPart(); 
	                }
	                this.state = 3307;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,463,this._ctx);
	            }

	            break;

	        case 2:
	            localctx = new TableSourceNestedContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3308;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3309;
	            this.tableSourceItem();
	            this.state = 3313;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.CROSS || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (MySqlParser.INNER - 74)) | (1 << (MySqlParser.JOIN - 74)) | (1 << (MySqlParser.LEFT - 74)) | (1 << (MySqlParser.NATURAL - 74)))) !== 0) || _la===MySqlParser.RIGHT || _la===MySqlParser.STRAIGHT_JOIN) {
	                this.state = 3310;
	                this.joinPart();
	                this.state = 3315;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3316;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableSourceItem() {
	    let localctx = new TableSourceItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, MySqlParser.RULE_tableSourceItem);
	    var _la = 0; // Token type
	    try {
	        this.state = 3360;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,473,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new AtomTableItemContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3320;
	            this.tableName();
	            this.state = 3326;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.PARTITION) {
	                this.state = 3321;
	                this.match(MySqlParser.PARTITION);
	                this.state = 3322;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 3323;
	                this.uidList();
	                this.state = 3324;
	                this.match(MySqlParser.RR_BRACKET);
	            }

	            this.state = 3332;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,468,this._ctx);
	            if(la_===1) {
	                this.state = 3329;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===MySqlParser.AS) {
	                    this.state = 3328;
	                    this.match(MySqlParser.AS);
	                }

	                this.state = 3331;
	                localctx.alias = this.uid();

	            }
	            this.state = 3342;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,470,this._ctx);
	            if(la_===1) {
	                this.state = 3334;
	                this.indexHint();
	                this.state = 3339;
	                this._errHandler.sync(this);
	                let _alt = this._interp.adaptivePredict(this._input,469,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 3335;
	                        this.match(MySqlParser.COMMA);
	                        this.state = 3336;
	                        this.indexHint(); 
	                    }
	                    this.state = 3341;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,469,this._ctx);
	                }


	            }
	            break;

	        case 2:
	            localctx = new SubqueryTableItemContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3349;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,471,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 3344;
	                this.selectStatement();
	                break;

	            case 2:
	                this.state = 3345;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 3346;
	                localctx.parenthesisSubquery = this.selectStatement();
	                this.state = 3347;
	                this.match(MySqlParser.RR_BRACKET);
	                break;

	            }
	            this.state = 3352;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.AS) {
	                this.state = 3351;
	                this.match(MySqlParser.AS);
	            }

	            this.state = 3354;
	            localctx.alias = this.uid();
	            break;

	        case 3:
	            localctx = new TableSourcesItemContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3356;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3357;
	            this.tableSources();
	            this.state = 3358;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexHint() {
	    let localctx = new IndexHintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, MySqlParser.RULE_indexHint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3362;
	        localctx.indexHintAction = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.FORCE || _la===MySqlParser.IGNORE || _la===MySqlParser.USE)) {
	            localctx.indexHintAction = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3363;
	        localctx.keyFormat = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.INDEX || _la===MySqlParser.KEY)) {
	            localctx.keyFormat = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3366;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.FOR) {
	            this.state = 3364;
	            this.match(MySqlParser.FOR);
	            this.state = 3365;
	            this.indexHintType();
	        }

	        this.state = 3368;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 3369;
	        this.uidList();
	        this.state = 3370;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexHintType() {
	    let localctx = new IndexHintTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, MySqlParser.RULE_indexHintType);
	    try {
	        this.state = 3377;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.JOIN:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3372;
	            this.match(MySqlParser.JOIN);
	            break;
	        case MySqlParser.ORDER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3373;
	            this.match(MySqlParser.ORDER);
	            this.state = 3374;
	            this.match(MySqlParser.BY);
	            break;
	        case MySqlParser.GROUP:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3375;
	            this.match(MySqlParser.GROUP);
	            this.state = 3376;
	            this.match(MySqlParser.BY);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	joinPart() {
	    let localctx = new JoinPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, MySqlParser.RULE_joinPart);
	    var _la = 0; // Token type
	    try {
	        this.state = 3423;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.CROSS:
	        case MySqlParser.INNER:
	        case MySqlParser.JOIN:
	            localctx = new InnerJoinContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3380;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.CROSS || _la===MySqlParser.INNER) {
	                this.state = 3379;
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.CROSS || _la===MySqlParser.INNER)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 3382;
	            this.match(MySqlParser.JOIN);
	            this.state = 3383;
	            this.tableSourceItem();
	            this.state = 3391;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,477,this._ctx);
	            if(la_===1) {
	                this.state = 3384;
	                this.match(MySqlParser.ON);
	                this.state = 3385;
	                this.expression(0);

	            } else if(la_===2) {
	                this.state = 3386;
	                this.match(MySqlParser.USING);
	                this.state = 3387;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 3388;
	                this.uidList();
	                this.state = 3389;
	                this.match(MySqlParser.RR_BRACKET);

	            }
	            break;
	        case MySqlParser.STRAIGHT_JOIN:
	            localctx = new StraightJoinContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3393;
	            this.match(MySqlParser.STRAIGHT_JOIN);
	            this.state = 3394;
	            this.tableSourceItem();
	            this.state = 3397;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,478,this._ctx);
	            if(la_===1) {
	                this.state = 3395;
	                this.match(MySqlParser.ON);
	                this.state = 3396;
	                this.expression(0);

	            }
	            break;
	        case MySqlParser.LEFT:
	        case MySqlParser.RIGHT:
	            localctx = new OuterJoinContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3399;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.LEFT || _la===MySqlParser.RIGHT)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3401;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.OUTER) {
	                this.state = 3400;
	                this.match(MySqlParser.OUTER);
	            }

	            this.state = 3403;
	            this.match(MySqlParser.JOIN);
	            this.state = 3404;
	            this.tableSourceItem();
	            this.state = 3412;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.ON:
	                this.state = 3405;
	                this.match(MySqlParser.ON);
	                this.state = 3406;
	                this.expression(0);
	                break;
	            case MySqlParser.USING:
	                this.state = 3407;
	                this.match(MySqlParser.USING);
	                this.state = 3408;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 3409;
	                this.uidList();
	                this.state = 3410;
	                this.match(MySqlParser.RR_BRACKET);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case MySqlParser.NATURAL:
	            localctx = new NaturalJoinContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3414;
	            this.match(MySqlParser.NATURAL);
	            this.state = 3419;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.LEFT || _la===MySqlParser.RIGHT) {
	                this.state = 3415;
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.LEFT || _la===MySqlParser.RIGHT)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 3417;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===MySqlParser.OUTER) {
	                    this.state = 3416;
	                    this.match(MySqlParser.OUTER);
	                }

	            }

	            this.state = 3421;
	            this.match(MySqlParser.JOIN);
	            this.state = 3422;
	            this.tableSourceItem();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryExpression() {
	    let localctx = new QueryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, MySqlParser.RULE_queryExpression);
	    try {
	        this.state = 3433;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,484,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3425;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3426;
	            this.querySpecification();
	            this.state = 3427;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3429;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3430;
	            this.queryExpression();
	            this.state = 3431;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryExpressionNointo() {
	    let localctx = new QueryExpressionNointoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, MySqlParser.RULE_queryExpressionNointo);
	    try {
	        this.state = 3443;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,485,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3435;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3436;
	            this.querySpecificationNointo();
	            this.state = 3437;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3439;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3440;
	            this.queryExpressionNointo();
	            this.state = 3441;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	querySpecification() {
	    let localctx = new QuerySpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, MySqlParser.RULE_querySpecification);
	    var _la = 0; // Token type
	    try {
	        this.state = 3485;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,496,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3445;
	            this.match(MySqlParser.SELECT);
	            this.state = 3449;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,486,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3446;
	                    this.selectSpec(); 
	                }
	                this.state = 3451;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,486,this._ctx);
	            }

	            this.state = 3452;
	            this.selectElements();
	            this.state = 3454;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.INTO) {
	                this.state = 3453;
	                this.selectIntoExpression();
	            }

	            this.state = 3457;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.FROM) {
	                this.state = 3456;
	                this.fromClause();
	            }

	            this.state = 3460;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,489,this._ctx);
	            if(la_===1) {
	                this.state = 3459;
	                this.orderByClause();

	            }
	            this.state = 3463;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,490,this._ctx);
	            if(la_===1) {
	                this.state = 3462;
	                this.limitClause();

	            }
	            break;

	        case 2: {
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3465;
	            this.match(MySqlParser.SELECT);
	            this.state = 3469;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,491,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3466;
	                    this.selectSpec(); 
	                }
	                this.state = 3471;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,491,this._ctx);
	            }

	            this.state = 3472;
	            this.selectElements();
	            this.state = 3474;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.FROM) {
	                this.state = 3473;
	                this.fromClause();
	            }

	            this.state = 3477;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,493,this._ctx);
	            if(la_===1) {
	                this.state = 3476;
	                this.orderByClause();

	            }
	            this.state = 3480;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,494,this._ctx);
	            if(la_===1) {
	                this.state = 3479;
	                this.limitClause();

	            }
	            this.state = 3483;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.INTO) {
	                this.state = 3482;
	                this.selectIntoExpression();
	            }

	            break; }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	querySpecificationNointo() {
	    let localctx = new QuerySpecificationNointoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, MySqlParser.RULE_querySpecificationNointo);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3487;
	        this.match(MySqlParser.SELECT);
	        this.state = 3491;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,497,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3488;
	                this.selectSpec(); 
	            }
	            this.state = 3493;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,497,this._ctx);
	        }

	        this.state = 3494;
	        this.selectElements();
	        this.state = 3496;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.FROM) {
	            this.state = 3495;
	            this.fromClause();
	        }

	        this.state = 3499;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,499,this._ctx);
	        if(la_===1) {
	            this.state = 3498;
	            this.orderByClause();

	        }
	        this.state = 3502;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,500,this._ctx);
	        if(la_===1) {
	            this.state = 3501;
	            this.limitClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unionParenthesis() {
	    let localctx = new UnionParenthesisContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, MySqlParser.RULE_unionParenthesis);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3504;
	        this.match(MySqlParser.UNION);
	        this.state = 3506;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.ALL || _la===MySqlParser.DISTINCT) {
	            this.state = 3505;
	            localctx.unionType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.ALL || _la===MySqlParser.DISTINCT)) {
	                localctx.unionType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 3508;
	        this.queryExpressionNointo();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unionStatement() {
	    let localctx = new UnionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, MySqlParser.RULE_unionStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3510;
	        this.match(MySqlParser.UNION);
	        this.state = 3512;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.ALL || _la===MySqlParser.DISTINCT) {
	            this.state = 3511;
	            localctx.unionType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.ALL || _la===MySqlParser.DISTINCT)) {
	                localctx.unionType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 3516;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.SELECT:
	            this.state = 3514;
	            this.querySpecificationNointo();
	            break;
	        case MySqlParser.LR_BRACKET:
	            this.state = 3515;
	            this.queryExpressionNointo();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectSpec() {
	    let localctx = new SelectSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, MySqlParser.RULE_selectSpec);
	    var _la = 0; // Token type
	    try {
	        this.state = 3526;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.ALL:
	        case MySqlParser.DISTINCT:
	        case MySqlParser.DISTINCTROW:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3518;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.ALL || _la===MySqlParser.DISTINCT || _la===MySqlParser.DISTINCTROW)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case MySqlParser.HIGH_PRIORITY:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3519;
	            this.match(MySqlParser.HIGH_PRIORITY);
	            break;
	        case MySqlParser.STRAIGHT_JOIN:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3520;
	            this.match(MySqlParser.STRAIGHT_JOIN);
	            break;
	        case MySqlParser.SQL_SMALL_RESULT:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3521;
	            this.match(MySqlParser.SQL_SMALL_RESULT);
	            break;
	        case MySqlParser.SQL_BIG_RESULT:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3522;
	            this.match(MySqlParser.SQL_BIG_RESULT);
	            break;
	        case MySqlParser.SQL_BUFFER_RESULT:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3523;
	            this.match(MySqlParser.SQL_BUFFER_RESULT);
	            break;
	        case MySqlParser.SQL_CACHE:
	        case MySqlParser.SQL_NO_CACHE:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3524;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.SQL_CACHE || _la===MySqlParser.SQL_NO_CACHE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case MySqlParser.SQL_CALC_FOUND_ROWS:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3525;
	            this.match(MySqlParser.SQL_CALC_FOUND_ROWS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectElements() {
	    let localctx = new SelectElementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, MySqlParser.RULE_selectElements);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3530;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,505,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 3528;
	            localctx.star = this.match(MySqlParser.STAR);
	            break;

	        case 2:
	            this.state = 3529;
	            this.selectElement();
	            break;

	        }
	        this.state = 3536;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 3532;
	            this.match(MySqlParser.COMMA);
	            this.state = 3533;
	            this.selectElement();
	            this.state = 3538;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectElement() {
	    let localctx = new SelectElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, MySqlParser.RULE_selectElement);
	    var _la = 0; // Token type
	    try {
	        this.state = 3568;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,514,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SelectStarElementContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3539;
	            this.fullId();
	            this.state = 3540;
	            this.match(MySqlParser.DOT);
	            this.state = 3541;
	            this.match(MySqlParser.STAR);
	            break;

	        case 2:
	            localctx = new SelectColumnElementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3543;
	            this.fullColumnName();
	            this.state = 3548;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,508,this._ctx);
	            if(la_===1) {
	                this.state = 3545;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===MySqlParser.AS) {
	                    this.state = 3544;
	                    this.match(MySqlParser.AS);
	                }

	                this.state = 3547;
	                this.uid();

	            }
	            break;

	        case 3:
	            localctx = new SelectFunctionElementContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3550;
	            this.functionCall();
	            this.state = 3555;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,510,this._ctx);
	            if(la_===1) {
	                this.state = 3552;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===MySqlParser.AS) {
	                    this.state = 3551;
	                    this.match(MySqlParser.AS);
	                }

	                this.state = 3554;
	                this.uid();

	            }
	            break;

	        case 4:
	            localctx = new SelectExpressionElementContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3559;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,511,this._ctx);
	            if(la_===1) {
	                this.state = 3557;
	                this.match(MySqlParser.LOCAL_ID);
	                this.state = 3558;
	                this.match(MySqlParser.VAR_ASSIGN);

	            }
	            this.state = 3561;
	            this.expression(0);
	            this.state = 3566;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,513,this._ctx);
	            if(la_===1) {
	                this.state = 3563;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===MySqlParser.AS) {
	                    this.state = 3562;
	                    this.match(MySqlParser.AS);
	                }

	                this.state = 3565;
	                this.uid();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectIntoExpression() {
	    let localctx = new SelectIntoExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, MySqlParser.RULE_selectIntoExpression);
	    var _la = 0; // Token type
	    try {
	        this.state = 3606;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,521,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SelectIntoVariablesContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3570;
	            this.match(MySqlParser.INTO);
	            this.state = 3571;
	            this.assignmentField();
	            this.state = 3576;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 3572;
	                this.match(MySqlParser.COMMA);
	                this.state = 3573;
	                this.assignmentField();
	                this.state = 3578;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            localctx = new SelectIntoDumpFileContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3579;
	            this.match(MySqlParser.INTO);
	            this.state = 3580;
	            this.match(MySqlParser.DUMPFILE);
	            this.state = 3581;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        case 3:
	            localctx = new SelectIntoTextFileContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3582;
	            this.match(MySqlParser.INTO);
	            this.state = 3583;
	            this.match(MySqlParser.OUTFILE);
	            this.state = 3584;
	            localctx.filename = this.match(MySqlParser.STRING_LITERAL);
	            this.state = 3588;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.CHARACTER) {
	                this.state = 3585;
	                this.match(MySqlParser.CHARACTER);
	                this.state = 3586;
	                this.match(MySqlParser.SET);
	                this.state = 3587;
	                localctx.charset = this.charsetName();
	            }

	            this.state = 3596;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,518,this._ctx);
	            if(la_===1) {
	                this.state = 3590;
	                localctx.fieldsFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.COLUMNS || _la===MySqlParser.FIELDS)) {
	                    localctx.fieldsFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 3592; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 3591;
	                    this.selectFieldsInto();
	                    this.state = 3594; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(_la===MySqlParser.ENCLOSED || _la===MySqlParser.ESCAPED || _la===MySqlParser.OPTIONALLY || _la===MySqlParser.TERMINATED);

	            }
	            this.state = 3604;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.LINES) {
	                this.state = 3598;
	                this.match(MySqlParser.LINES);
	                this.state = 3600; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 3599;
	                    this.selectLinesInto();
	                    this.state = 3602; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(_la===MySqlParser.STARTING || _la===MySqlParser.TERMINATED);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectFieldsInto() {
	    let localctx = new SelectFieldsIntoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, MySqlParser.RULE_selectFieldsInto);
	    var _la = 0; // Token type
	    try {
	        this.state = 3620;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.TERMINATED:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3608;
	            this.match(MySqlParser.TERMINATED);
	            this.state = 3609;
	            this.match(MySqlParser.BY);
	            this.state = 3610;
	            localctx.terminationField = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.ENCLOSED:
	        case MySqlParser.OPTIONALLY:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3612;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.OPTIONALLY) {
	                this.state = 3611;
	                this.match(MySqlParser.OPTIONALLY);
	            }

	            this.state = 3614;
	            this.match(MySqlParser.ENCLOSED);
	            this.state = 3615;
	            this.match(MySqlParser.BY);
	            this.state = 3616;
	            localctx.enclosion = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.ESCAPED:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3617;
	            this.match(MySqlParser.ESCAPED);
	            this.state = 3618;
	            this.match(MySqlParser.BY);
	            this.state = 3619;
	            localctx.escaping = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectLinesInto() {
	    let localctx = new SelectLinesIntoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, MySqlParser.RULE_selectLinesInto);
	    try {
	        this.state = 3628;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.STARTING:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3622;
	            this.match(MySqlParser.STARTING);
	            this.state = 3623;
	            this.match(MySqlParser.BY);
	            this.state = 3624;
	            localctx.starting = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.TERMINATED:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3625;
	            this.match(MySqlParser.TERMINATED);
	            this.state = 3626;
	            this.match(MySqlParser.BY);
	            this.state = 3627;
	            localctx.terminationLine = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromClause() {
	    let localctx = new FromClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, MySqlParser.RULE_fromClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3630;
	        this.match(MySqlParser.FROM);
	        this.state = 3631;
	        this.tableSources();
	        this.state = 3634;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.WHERE) {
	            this.state = 3632;
	            this.match(MySqlParser.WHERE);
	            this.state = 3633;
	            localctx.whereExpr = this.expression(0);
	        }

	        this.state = 3650;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.GROUP) {
	            this.state = 3636;
	            this.match(MySqlParser.GROUP);
	            this.state = 3637;
	            this.match(MySqlParser.BY);
	            this.state = 3638;
	            this.groupByItem();
	            this.state = 3643;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 3639;
	                this.match(MySqlParser.COMMA);
	                this.state = 3640;
	                this.groupByItem();
	                this.state = 3645;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3648;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,527,this._ctx);
	            if(la_===1) {
	                this.state = 3646;
	                this.match(MySqlParser.WITH);
	                this.state = 3647;
	                this.match(MySqlParser.ROLLUP);

	            }
	        }

	        this.state = 3654;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.HAVING) {
	            this.state = 3652;
	            this.match(MySqlParser.HAVING);
	            this.state = 3653;
	            localctx.havingExpr = this.expression(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupByItem() {
	    let localctx = new GroupByItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, MySqlParser.RULE_groupByItem);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3656;
	        this.expression(0);
	        this.state = 3658;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,530,this._ctx);
	        if(la_===1) {
	            this.state = 3657;
	            localctx.order = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.ASC || _la===MySqlParser.DESC)) {
	                localctx.order = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitClause() {
	    let localctx = new LimitClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, MySqlParser.RULE_limitClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3660;
	        this.match(MySqlParser.LIMIT);
	        this.state = 3671;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,532,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 3664;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,531,this._ctx);
	            if(la_===1) {
	                this.state = 3661;
	                localctx.offset = this.limitClauseAtom();
	                this.state = 3662;
	                this.match(MySqlParser.COMMA);

	            }
	            this.state = 3666;
	            localctx.limit = this.limitClauseAtom();
	            break;

	        case 2:
	            this.state = 3667;
	            localctx.limit = this.limitClauseAtom();
	            this.state = 3668;
	            this.match(MySqlParser.OFFSET);
	            this.state = 3669;
	            localctx.offset = this.limitClauseAtom();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitClauseAtom() {
	    let localctx = new LimitClauseAtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, MySqlParser.RULE_limitClauseAtom);
	    try {
	        this.state = 3676;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.ZERO_DECIMAL:
	        case MySqlParser.ONE_DECIMAL:
	        case MySqlParser.TWO_DECIMAL:
	        case MySqlParser.DECIMAL_LITERAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3673;
	            this.decimalLiteral();
	            break;
	        case MySqlParser.LOCAL_ID:
	        case MySqlParser.GLOBAL_ID:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3674;
	            this.mysqlVariable();
	            break;
	        case MySqlParser.CURRENT:
	        case MySqlParser.DATABASE:
	        case MySqlParser.DIAGNOSTICS:
	        case MySqlParser.LEFT:
	        case MySqlParser.NUMBER:
	        case MySqlParser.RIGHT:
	        case MySqlParser.STACKED:
	        case MySqlParser.DATE:
	        case MySqlParser.TIME:
	        case MySqlParser.TIMESTAMP:
	        case MySqlParser.DATETIME:
	        case MySqlParser.YEAR:
	        case MySqlParser.TEXT:
	        case MySqlParser.ENUM:
	        case MySqlParser.SERIAL:
	        case MySqlParser.JSON_VALID:
	        case MySqlParser.JSON_SCHEMA_VALID:
	        case MySqlParser.AVG:
	        case MySqlParser.BIT_AND:
	        case MySqlParser.BIT_OR:
	        case MySqlParser.BIT_XOR:
	        case MySqlParser.COUNT:
	        case MySqlParser.GROUP_CONCAT:
	        case MySqlParser.MAX:
	        case MySqlParser.MIN:
	        case MySqlParser.STD:
	        case MySqlParser.STDDEV:
	        case MySqlParser.STDDEV_POP:
	        case MySqlParser.STDDEV_SAMP:
	        case MySqlParser.SUM:
	        case MySqlParser.VAR_POP:
	        case MySqlParser.VAR_SAMP:
	        case MySqlParser.VARIANCE:
	        case MySqlParser.POSITION:
	        case MySqlParser.ACCOUNT:
	        case MySqlParser.ACTION:
	        case MySqlParser.AFTER:
	        case MySqlParser.AGGREGATE:
	        case MySqlParser.ALGORITHM:
	        case MySqlParser.ANY:
	        case MySqlParser.AT:
	        case MySqlParser.AUTHORS:
	        case MySqlParser.AUTOCOMMIT:
	        case MySqlParser.AUTOEXTEND_SIZE:
	        case MySqlParser.AUTO_INCREMENT:
	        case MySqlParser.AVG_ROW_LENGTH:
	        case MySqlParser.BEGIN:
	        case MySqlParser.BINLOG:
	        case MySqlParser.BIT:
	        case MySqlParser.BLOCK:
	        case MySqlParser.BOOL:
	        case MySqlParser.BOOLEAN:
	        case MySqlParser.BTREE:
	        case MySqlParser.CACHE:
	        case MySqlParser.CASCADED:
	        case MySqlParser.CHAIN:
	        case MySqlParser.CHANGED:
	        case MySqlParser.CHANNEL:
	        case MySqlParser.CHECKSUM:
	        case MySqlParser.PAGE_CHECKSUM:
	        case MySqlParser.CIPHER:
	        case MySqlParser.CLASS_ORIGIN:
	        case MySqlParser.CLIENT:
	        case MySqlParser.CLOSE:
	        case MySqlParser.COALESCE:
	        case MySqlParser.CODE:
	        case MySqlParser.COLUMNS:
	        case MySqlParser.COLUMN_FORMAT:
	        case MySqlParser.COLUMN_NAME:
	        case MySqlParser.COMMENT:
	        case MySqlParser.COMMIT:
	        case MySqlParser.COMPACT:
	        case MySqlParser.COMPLETION:
	        case MySqlParser.COMPRESSED:
	        case MySqlParser.COMPRESSION:
	        case MySqlParser.CONCURRENT:
	        case MySqlParser.CONNECTION:
	        case MySqlParser.CONSISTENT:
	        case MySqlParser.CONSTRAINT_CATALOG:
	        case MySqlParser.CONSTRAINT_SCHEMA:
	        case MySqlParser.CONSTRAINT_NAME:
	        case MySqlParser.CONTAINS:
	        case MySqlParser.CONTEXT:
	        case MySqlParser.CONTRIBUTORS:
	        case MySqlParser.COPY:
	        case MySqlParser.CPU:
	        case MySqlParser.CURSOR_NAME:
	        case MySqlParser.DATA:
	        case MySqlParser.DATAFILE:
	        case MySqlParser.DEALLOCATE:
	        case MySqlParser.DEFAULT_AUTH:
	        case MySqlParser.DEFINER:
	        case MySqlParser.DELAY_KEY_WRITE:
	        case MySqlParser.DES_KEY_FILE:
	        case MySqlParser.DIRECTORY:
	        case MySqlParser.DISABLE:
	        case MySqlParser.DISCARD:
	        case MySqlParser.DISK:
	        case MySqlParser.DO:
	        case MySqlParser.DUMPFILE:
	        case MySqlParser.DUPLICATE:
	        case MySqlParser.DYNAMIC:
	        case MySqlParser.ENABLE:
	        case MySqlParser.ENCRYPTION:
	        case MySqlParser.END:
	        case MySqlParser.ENDS:
	        case MySqlParser.ENGINE:
	        case MySqlParser.ENGINES:
	        case MySqlParser.ERROR:
	        case MySqlParser.ERRORS:
	        case MySqlParser.ESCAPE:
	        case MySqlParser.EVEN:
	        case MySqlParser.EVENT:
	        case MySqlParser.EVENTS:
	        case MySqlParser.EVERY:
	        case MySqlParser.EXCHANGE:
	        case MySqlParser.EXCLUSIVE:
	        case MySqlParser.EXPIRE:
	        case MySqlParser.EXPORT:
	        case MySqlParser.EXTENDED:
	        case MySqlParser.EXTENT_SIZE:
	        case MySqlParser.FAST:
	        case MySqlParser.FAULTS:
	        case MySqlParser.FIELDS:
	        case MySqlParser.FILE_BLOCK_SIZE:
	        case MySqlParser.FILTER:
	        case MySqlParser.FIRST:
	        case MySqlParser.FIXED:
	        case MySqlParser.FLUSH:
	        case MySqlParser.FOLLOWS:
	        case MySqlParser.FOUND:
	        case MySqlParser.FULL:
	        case MySqlParser.FUNCTION:
	        case MySqlParser.GENERAL:
	        case MySqlParser.GLOBAL:
	        case MySqlParser.GRANTS:
	        case MySqlParser.GROUP_REPLICATION:
	        case MySqlParser.HANDLER:
	        case MySqlParser.HASH:
	        case MySqlParser.HELP:
	        case MySqlParser.HOST:
	        case MySqlParser.HOSTS:
	        case MySqlParser.IDENTIFIED:
	        case MySqlParser.IGNORE_SERVER_IDS:
	        case MySqlParser.IMPORT:
	        case MySqlParser.INDEXES:
	        case MySqlParser.INITIAL_SIZE:
	        case MySqlParser.INPLACE:
	        case MySqlParser.INSERT_METHOD:
	        case MySqlParser.INSTALL:
	        case MySqlParser.INSTANCE:
	        case MySqlParser.INVISIBLE:
	        case MySqlParser.INVOKER:
	        case MySqlParser.IO:
	        case MySqlParser.IO_THREAD:
	        case MySqlParser.IPC:
	        case MySqlParser.ISOLATION:
	        case MySqlParser.ISSUER:
	        case MySqlParser.JSON:
	        case MySqlParser.KEY_BLOCK_SIZE:
	        case MySqlParser.LANGUAGE:
	        case MySqlParser.LAST:
	        case MySqlParser.LEAVES:
	        case MySqlParser.LESS:
	        case MySqlParser.LEVEL:
	        case MySqlParser.LIST:
	        case MySqlParser.LOCAL:
	        case MySqlParser.LOGFILE:
	        case MySqlParser.LOGS:
	        case MySqlParser.MASTER:
	        case MySqlParser.MASTER_AUTO_POSITION:
	        case MySqlParser.MASTER_CONNECT_RETRY:
	        case MySqlParser.MASTER_DELAY:
	        case MySqlParser.MASTER_HEARTBEAT_PERIOD:
	        case MySqlParser.MASTER_HOST:
	        case MySqlParser.MASTER_LOG_FILE:
	        case MySqlParser.MASTER_LOG_POS:
	        case MySqlParser.MASTER_PASSWORD:
	        case MySqlParser.MASTER_PORT:
	        case MySqlParser.MASTER_RETRY_COUNT:
	        case MySqlParser.MASTER_SSL:
	        case MySqlParser.MASTER_SSL_CA:
	        case MySqlParser.MASTER_SSL_CAPATH:
	        case MySqlParser.MASTER_SSL_CERT:
	        case MySqlParser.MASTER_SSL_CIPHER:
	        case MySqlParser.MASTER_SSL_CRL:
	        case MySqlParser.MASTER_SSL_CRLPATH:
	        case MySqlParser.MASTER_SSL_KEY:
	        case MySqlParser.MASTER_TLS_VERSION:
	        case MySqlParser.MASTER_USER:
	        case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
	        case MySqlParser.MAX_QUERIES_PER_HOUR:
	        case MySqlParser.MAX_ROWS:
	        case MySqlParser.MAX_SIZE:
	        case MySqlParser.MAX_UPDATES_PER_HOUR:
	        case MySqlParser.MAX_USER_CONNECTIONS:
	        case MySqlParser.MEDIUM:
	        case MySqlParser.MEMBER:
	        case MySqlParser.MERGE:
	        case MySqlParser.MESSAGE_TEXT:
	        case MySqlParser.MID:
	        case MySqlParser.MIGRATE:
	        case MySqlParser.MIN_ROWS:
	        case MySqlParser.MODE:
	        case MySqlParser.MODIFY:
	        case MySqlParser.MUTEX:
	        case MySqlParser.MYSQL:
	        case MySqlParser.MYSQL_ERRNO:
	        case MySqlParser.NAME:
	        case MySqlParser.NAMES:
	        case MySqlParser.NCHAR:
	        case MySqlParser.NEVER:
	        case MySqlParser.NEXT:
	        case MySqlParser.NO:
	        case MySqlParser.NODEGROUP:
	        case MySqlParser.NONE:
	        case MySqlParser.OFFLINE:
	        case MySqlParser.OFFSET:
	        case MySqlParser.OF:
	        case MySqlParser.OJ:
	        case MySqlParser.OLD_PASSWORD:
	        case MySqlParser.ONE:
	        case MySqlParser.ONLINE:
	        case MySqlParser.ONLY:
	        case MySqlParser.OPEN:
	        case MySqlParser.OPTIMIZER_COSTS:
	        case MySqlParser.OPTIONS:
	        case MySqlParser.OWNER:
	        case MySqlParser.PACK_KEYS:
	        case MySqlParser.PAGE:
	        case MySqlParser.PARSER:
	        case MySqlParser.PARTIAL:
	        case MySqlParser.PARTITIONING:
	        case MySqlParser.PARTITIONS:
	        case MySqlParser.PASSWORD:
	        case MySqlParser.PHASE:
	        case MySqlParser.PLUGIN:
	        case MySqlParser.PLUGIN_DIR:
	        case MySqlParser.PLUGINS:
	        case MySqlParser.PORT:
	        case MySqlParser.PRECEDES:
	        case MySqlParser.PREPARE:
	        case MySqlParser.PRESERVE:
	        case MySqlParser.PREV:
	        case MySqlParser.PROCESSLIST:
	        case MySqlParser.PROFILE:
	        case MySqlParser.PROFILES:
	        case MySqlParser.PROXY:
	        case MySqlParser.QUERY:
	        case MySqlParser.QUICK:
	        case MySqlParser.REBUILD:
	        case MySqlParser.RECOVER:
	        case MySqlParser.REDO_BUFFER_SIZE:
	        case MySqlParser.REDUNDANT:
	        case MySqlParser.RELAY:
	        case MySqlParser.RELAY_LOG_FILE:
	        case MySqlParser.RELAY_LOG_POS:
	        case MySqlParser.RELAYLOG:
	        case MySqlParser.REMOVE:
	        case MySqlParser.REORGANIZE:
	        case MySqlParser.REPAIR:
	        case MySqlParser.REPLICATE_DO_DB:
	        case MySqlParser.REPLICATE_DO_TABLE:
	        case MySqlParser.REPLICATE_IGNORE_DB:
	        case MySqlParser.REPLICATE_IGNORE_TABLE:
	        case MySqlParser.REPLICATE_REWRITE_DB:
	        case MySqlParser.REPLICATE_WILD_DO_TABLE:
	        case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
	        case MySqlParser.REPLICATION:
	        case MySqlParser.RESET:
	        case MySqlParser.RESUME:
	        case MySqlParser.RETURNED_SQLSTATE:
	        case MySqlParser.RETURNS:
	        case MySqlParser.ROLE:
	        case MySqlParser.ROLLBACK:
	        case MySqlParser.ROLLUP:
	        case MySqlParser.ROTATE:
	        case MySqlParser.ROW:
	        case MySqlParser.ROWS:
	        case MySqlParser.ROW_FORMAT:
	        case MySqlParser.SAVEPOINT:
	        case MySqlParser.SCHEDULE:
	        case MySqlParser.SECURITY:
	        case MySqlParser.SERVER:
	        case MySqlParser.SESSION:
	        case MySqlParser.SHARE:
	        case MySqlParser.SHARED:
	        case MySqlParser.SIGNED:
	        case MySqlParser.SIMPLE:
	        case MySqlParser.SLAVE:
	        case MySqlParser.SLOW:
	        case MySqlParser.SNAPSHOT:
	        case MySqlParser.SOCKET:
	        case MySqlParser.SOME:
	        case MySqlParser.SONAME:
	        case MySqlParser.SOUNDS:
	        case MySqlParser.SOURCE:
	        case MySqlParser.SQL_AFTER_GTIDS:
	        case MySqlParser.SQL_AFTER_MTS_GAPS:
	        case MySqlParser.SQL_BEFORE_GTIDS:
	        case MySqlParser.SQL_BUFFER_RESULT:
	        case MySqlParser.SQL_CACHE:
	        case MySqlParser.SQL_NO_CACHE:
	        case MySqlParser.SQL_THREAD:
	        case MySqlParser.START:
	        case MySqlParser.STARTS:
	        case MySqlParser.STATS_AUTO_RECALC:
	        case MySqlParser.STATS_PERSISTENT:
	        case MySqlParser.STATS_SAMPLE_PAGES:
	        case MySqlParser.STATUS:
	        case MySqlParser.STOP:
	        case MySqlParser.STORAGE:
	        case MySqlParser.STRING:
	        case MySqlParser.SUBCLASS_ORIGIN:
	        case MySqlParser.SUBJECT:
	        case MySqlParser.SUBPARTITION:
	        case MySqlParser.SUBPARTITIONS:
	        case MySqlParser.SUSPEND:
	        case MySqlParser.SWAPS:
	        case MySqlParser.SWITCHES:
	        case MySqlParser.TABLE_NAME:
	        case MySqlParser.TABLESPACE:
	        case MySqlParser.TEMPORARY:
	        case MySqlParser.TEMPTABLE:
	        case MySqlParser.THAN:
	        case MySqlParser.TRADITIONAL:
	        case MySqlParser.TRANSACTION:
	        case MySqlParser.TRANSACTIONAL:
	        case MySqlParser.TRIGGERS:
	        case MySqlParser.TRUNCATE:
	        case MySqlParser.UNDEFINED:
	        case MySqlParser.UNDOFILE:
	        case MySqlParser.UNDO_BUFFER_SIZE:
	        case MySqlParser.UNINSTALL:
	        case MySqlParser.UNKNOWN:
	        case MySqlParser.UNTIL:
	        case MySqlParser.UPGRADE:
	        case MySqlParser.USER:
	        case MySqlParser.USE_FRM:
	        case MySqlParser.USER_RESOURCES:
	        case MySqlParser.VALIDATION:
	        case MySqlParser.VALUE:
	        case MySqlParser.VARIABLES:
	        case MySqlParser.VIEW:
	        case MySqlParser.VISIBLE:
	        case MySqlParser.WAIT:
	        case MySqlParser.WARNINGS:
	        case MySqlParser.WITHOUT:
	        case MySqlParser.WORK:
	        case MySqlParser.WRAPPER:
	        case MySqlParser.X509:
	        case MySqlParser.XA:
	        case MySqlParser.XML:
	        case MySqlParser.INTERNAL:
	        case MySqlParser.QUARTER:
	        case MySqlParser.MONTH:
	        case MySqlParser.DAY:
	        case MySqlParser.HOUR:
	        case MySqlParser.MINUTE:
	        case MySqlParser.WEEK:
	        case MySqlParser.SECOND:
	        case MySqlParser.MICROSECOND:
	        case MySqlParser.TABLES:
	        case MySqlParser.ROUTINE:
	        case MySqlParser.EXECUTE:
	        case MySqlParser.FILE:
	        case MySqlParser.PROCESS:
	        case MySqlParser.RELOAD:
	        case MySqlParser.SHUTDOWN:
	        case MySqlParser.SUPER:
	        case MySqlParser.PRIVILEGES:
	        case MySqlParser.AUDIT_ADMIN:
	        case MySqlParser.BACKUP_ADMIN:
	        case MySqlParser.BINLOG_ADMIN:
	        case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
	        case MySqlParser.CLONE_ADMIN:
	        case MySqlParser.CONNECTION_ADMIN:
	        case MySqlParser.ENCRYPTION_KEY_ADMIN:
	        case MySqlParser.FIREWALL_ADMIN:
	        case MySqlParser.FIREWALL_USER:
	        case MySqlParser.GROUP_REPLICATION_ADMIN:
	        case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
	        case MySqlParser.NDB_STORED_USER:
	        case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
	        case MySqlParser.REPLICATION_APPLIER:
	        case MySqlParser.REPLICATION_SLAVE_ADMIN:
	        case MySqlParser.RESOURCE_GROUP_ADMIN:
	        case MySqlParser.RESOURCE_GROUP_USER:
	        case MySqlParser.ROLE_ADMIN:
	        case MySqlParser.SESSION_VARIABLES_ADMIN:
	        case MySqlParser.SET_USER_ID:
	        case MySqlParser.SHOW_ROUTINE:
	        case MySqlParser.SYSTEM_VARIABLES_ADMIN:
	        case MySqlParser.TABLE_ENCRYPTION_ADMIN:
	        case MySqlParser.VERSION_TOKEN_ADMIN:
	        case MySqlParser.XA_RECOVER_ADMIN:
	        case MySqlParser.ARMSCII8:
	        case MySqlParser.ASCII:
	        case MySqlParser.BIG5:
	        case MySqlParser.CP1250:
	        case MySqlParser.CP1251:
	        case MySqlParser.CP1256:
	        case MySqlParser.CP1257:
	        case MySqlParser.CP850:
	        case MySqlParser.CP852:
	        case MySqlParser.CP866:
	        case MySqlParser.CP932:
	        case MySqlParser.DEC8:
	        case MySqlParser.EUCJPMS:
	        case MySqlParser.EUCKR:
	        case MySqlParser.GB2312:
	        case MySqlParser.GBK:
	        case MySqlParser.GEOSTD8:
	        case MySqlParser.GREEK:
	        case MySqlParser.HEBREW:
	        case MySqlParser.HP8:
	        case MySqlParser.KEYBCS2:
	        case MySqlParser.KOI8R:
	        case MySqlParser.KOI8U:
	        case MySqlParser.LATIN1:
	        case MySqlParser.LATIN2:
	        case MySqlParser.LATIN5:
	        case MySqlParser.LATIN7:
	        case MySqlParser.MACCE:
	        case MySqlParser.MACROMAN:
	        case MySqlParser.SJIS:
	        case MySqlParser.SWE7:
	        case MySqlParser.TIS620:
	        case MySqlParser.UCS2:
	        case MySqlParser.UJIS:
	        case MySqlParser.UTF16:
	        case MySqlParser.UTF16LE:
	        case MySqlParser.UTF32:
	        case MySqlParser.UTF8:
	        case MySqlParser.UTF8MB3:
	        case MySqlParser.UTF8MB4:
	        case MySqlParser.ARCHIVE:
	        case MySqlParser.BLACKHOLE:
	        case MySqlParser.CSV:
	        case MySqlParser.FEDERATED:
	        case MySqlParser.INNODB:
	        case MySqlParser.MEMORY:
	        case MySqlParser.MRG_MYISAM:
	        case MySqlParser.MYISAM:
	        case MySqlParser.NDB:
	        case MySqlParser.NDBCLUSTER:
	        case MySqlParser.PERFORMANCE_SCHEMA:
	        case MySqlParser.TOKUDB:
	        case MySqlParser.REPEATABLE:
	        case MySqlParser.COMMITTED:
	        case MySqlParser.UNCOMMITTED:
	        case MySqlParser.SERIALIZABLE:
	        case MySqlParser.GEOMETRYCOLLECTION:
	        case MySqlParser.LINESTRING:
	        case MySqlParser.MULTILINESTRING:
	        case MySqlParser.MULTIPOINT:
	        case MySqlParser.MULTIPOLYGON:
	        case MySqlParser.POINT:
	        case MySqlParser.POLYGON:
	        case MySqlParser.ABS:
	        case MySqlParser.ACOS:
	        case MySqlParser.ADDDATE:
	        case MySqlParser.ADDTIME:
	        case MySqlParser.AES_DECRYPT:
	        case MySqlParser.AES_ENCRYPT:
	        case MySqlParser.AREA:
	        case MySqlParser.ASBINARY:
	        case MySqlParser.ASIN:
	        case MySqlParser.ASTEXT:
	        case MySqlParser.ASWKB:
	        case MySqlParser.ASWKT:
	        case MySqlParser.ASYMMETRIC_DECRYPT:
	        case MySqlParser.ASYMMETRIC_DERIVE:
	        case MySqlParser.ASYMMETRIC_ENCRYPT:
	        case MySqlParser.ASYMMETRIC_SIGN:
	        case MySqlParser.ASYMMETRIC_VERIFY:
	        case MySqlParser.ATAN:
	        case MySqlParser.ATAN2:
	        case MySqlParser.BENCHMARK:
	        case MySqlParser.BIN:
	        case MySqlParser.BIT_COUNT:
	        case MySqlParser.BIT_LENGTH:
	        case MySqlParser.BUFFER:
	        case MySqlParser.CATALOG_NAME:
	        case MySqlParser.CEIL:
	        case MySqlParser.CEILING:
	        case MySqlParser.CENTROID:
	        case MySqlParser.CHARACTER_LENGTH:
	        case MySqlParser.CHARSET:
	        case MySqlParser.CHAR_LENGTH:
	        case MySqlParser.COERCIBILITY:
	        case MySqlParser.COLLATION:
	        case MySqlParser.COMPRESS:
	        case MySqlParser.CONCAT:
	        case MySqlParser.CONCAT_WS:
	        case MySqlParser.CONNECTION_ID:
	        case MySqlParser.CONV:
	        case MySqlParser.CONVERT_TZ:
	        case MySqlParser.COS:
	        case MySqlParser.COT:
	        case MySqlParser.CRC32:
	        case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
	        case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
	        case MySqlParser.CREATE_DH_PARAMETERS:
	        case MySqlParser.CREATE_DIGEST:
	        case MySqlParser.CROSSES:
	        case MySqlParser.DATEDIFF:
	        case MySqlParser.DATE_FORMAT:
	        case MySqlParser.DAYNAME:
	        case MySqlParser.DAYOFMONTH:
	        case MySqlParser.DAYOFWEEK:
	        case MySqlParser.DAYOFYEAR:
	        case MySqlParser.DECODE:
	        case MySqlParser.DEGREES:
	        case MySqlParser.DES_DECRYPT:
	        case MySqlParser.DES_ENCRYPT:
	        case MySqlParser.DIMENSION:
	        case MySqlParser.DISJOINT:
	        case MySqlParser.ELT:
	        case MySqlParser.ENCODE:
	        case MySqlParser.ENCRYPT:
	        case MySqlParser.ENDPOINT:
	        case MySqlParser.ENVELOPE:
	        case MySqlParser.EQUALS:
	        case MySqlParser.EXP:
	        case MySqlParser.EXPORT_SET:
	        case MySqlParser.EXTERIORRING:
	        case MySqlParser.EXTRACTVALUE:
	        case MySqlParser.FIELD:
	        case MySqlParser.FIND_IN_SET:
	        case MySqlParser.FLOOR:
	        case MySqlParser.FORMAT:
	        case MySqlParser.FOUND_ROWS:
	        case MySqlParser.FROM_BASE64:
	        case MySqlParser.FROM_DAYS:
	        case MySqlParser.FROM_UNIXTIME:
	        case MySqlParser.GEOMCOLLFROMTEXT:
	        case MySqlParser.GEOMCOLLFROMWKB:
	        case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
	        case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
	        case MySqlParser.GEOMETRYFROMTEXT:
	        case MySqlParser.GEOMETRYFROMWKB:
	        case MySqlParser.GEOMETRYN:
	        case MySqlParser.GEOMETRYTYPE:
	        case MySqlParser.GEOMFROMTEXT:
	        case MySqlParser.GEOMFROMWKB:
	        case MySqlParser.GET_FORMAT:
	        case MySqlParser.GET_LOCK:
	        case MySqlParser.GLENGTH:
	        case MySqlParser.GREATEST:
	        case MySqlParser.GTID_SUBSET:
	        case MySqlParser.GTID_SUBTRACT:
	        case MySqlParser.HEX:
	        case MySqlParser.IFNULL:
	        case MySqlParser.INET6_ATON:
	        case MySqlParser.INET6_NTOA:
	        case MySqlParser.INET_ATON:
	        case MySqlParser.INET_NTOA:
	        case MySqlParser.INSTR:
	        case MySqlParser.INTERIORRINGN:
	        case MySqlParser.INTERSECTS:
	        case MySqlParser.ISCLOSED:
	        case MySqlParser.ISEMPTY:
	        case MySqlParser.ISNULL:
	        case MySqlParser.ISSIMPLE:
	        case MySqlParser.IS_FREE_LOCK:
	        case MySqlParser.IS_IPV4:
	        case MySqlParser.IS_IPV4_COMPAT:
	        case MySqlParser.IS_IPV4_MAPPED:
	        case MySqlParser.IS_IPV6:
	        case MySqlParser.IS_USED_LOCK:
	        case MySqlParser.LAST_INSERT_ID:
	        case MySqlParser.LCASE:
	        case MySqlParser.LEAST:
	        case MySqlParser.LENGTH:
	        case MySqlParser.LINEFROMTEXT:
	        case MySqlParser.LINEFROMWKB:
	        case MySqlParser.LINESTRINGFROMTEXT:
	        case MySqlParser.LINESTRINGFROMWKB:
	        case MySqlParser.LN:
	        case MySqlParser.LOAD_FILE:
	        case MySqlParser.LOCATE:
	        case MySqlParser.LOG:
	        case MySqlParser.LOG10:
	        case MySqlParser.LOG2:
	        case MySqlParser.LOWER:
	        case MySqlParser.LPAD:
	        case MySqlParser.LTRIM:
	        case MySqlParser.MAKEDATE:
	        case MySqlParser.MAKETIME:
	        case MySqlParser.MAKE_SET:
	        case MySqlParser.MASTER_POS_WAIT:
	        case MySqlParser.MBRCONTAINS:
	        case MySqlParser.MBRDISJOINT:
	        case MySqlParser.MBREQUAL:
	        case MySqlParser.MBRINTERSECTS:
	        case MySqlParser.MBROVERLAPS:
	        case MySqlParser.MBRTOUCHES:
	        case MySqlParser.MBRWITHIN:
	        case MySqlParser.MD5:
	        case MySqlParser.MLINEFROMTEXT:
	        case MySqlParser.MLINEFROMWKB:
	        case MySqlParser.MONTHNAME:
	        case MySqlParser.MPOINTFROMTEXT:
	        case MySqlParser.MPOINTFROMWKB:
	        case MySqlParser.MPOLYFROMTEXT:
	        case MySqlParser.MPOLYFROMWKB:
	        case MySqlParser.MULTILINESTRINGFROMTEXT:
	        case MySqlParser.MULTILINESTRINGFROMWKB:
	        case MySqlParser.MULTIPOINTFROMTEXT:
	        case MySqlParser.MULTIPOINTFROMWKB:
	        case MySqlParser.MULTIPOLYGONFROMTEXT:
	        case MySqlParser.MULTIPOLYGONFROMWKB:
	        case MySqlParser.NAME_CONST:
	        case MySqlParser.NULLIF:
	        case MySqlParser.NUMGEOMETRIES:
	        case MySqlParser.NUMINTERIORRINGS:
	        case MySqlParser.NUMPOINTS:
	        case MySqlParser.OCT:
	        case MySqlParser.OCTET_LENGTH:
	        case MySqlParser.ORD:
	        case MySqlParser.OVERLAPS:
	        case MySqlParser.PERIOD_ADD:
	        case MySqlParser.PERIOD_DIFF:
	        case MySqlParser.PI:
	        case MySqlParser.POINTFROMTEXT:
	        case MySqlParser.POINTFROMWKB:
	        case MySqlParser.POINTN:
	        case MySqlParser.POLYFROMTEXT:
	        case MySqlParser.POLYFROMWKB:
	        case MySqlParser.POLYGONFROMTEXT:
	        case MySqlParser.POLYGONFROMWKB:
	        case MySqlParser.POW:
	        case MySqlParser.POWER:
	        case MySqlParser.QUOTE:
	        case MySqlParser.RADIANS:
	        case MySqlParser.RAND:
	        case MySqlParser.RANDOM_BYTES:
	        case MySqlParser.RELEASE_LOCK:
	        case MySqlParser.REVERSE:
	        case MySqlParser.ROUND:
	        case MySqlParser.ROW_COUNT:
	        case MySqlParser.RPAD:
	        case MySqlParser.RTRIM:
	        case MySqlParser.SEC_TO_TIME:
	        case MySqlParser.SESSION_USER:
	        case MySqlParser.SHA:
	        case MySqlParser.SHA1:
	        case MySqlParser.SHA2:
	        case MySqlParser.SCHEMA_NAME:
	        case MySqlParser.SIGN:
	        case MySqlParser.SIN:
	        case MySqlParser.SLEEP:
	        case MySqlParser.SOUNDEX:
	        case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
	        case MySqlParser.SQRT:
	        case MySqlParser.SRID:
	        case MySqlParser.STARTPOINT:
	        case MySqlParser.STRCMP:
	        case MySqlParser.STR_TO_DATE:
	        case MySqlParser.ST_AREA:
	        case MySqlParser.ST_ASBINARY:
	        case MySqlParser.ST_ASTEXT:
	        case MySqlParser.ST_ASWKB:
	        case MySqlParser.ST_ASWKT:
	        case MySqlParser.ST_BUFFER:
	        case MySqlParser.ST_CENTROID:
	        case MySqlParser.ST_CONTAINS:
	        case MySqlParser.ST_CROSSES:
	        case MySqlParser.ST_DIFFERENCE:
	        case MySqlParser.ST_DIMENSION:
	        case MySqlParser.ST_DISJOINT:
	        case MySqlParser.ST_DISTANCE:
	        case MySqlParser.ST_ENDPOINT:
	        case MySqlParser.ST_ENVELOPE:
	        case MySqlParser.ST_EQUALS:
	        case MySqlParser.ST_EXTERIORRING:
	        case MySqlParser.ST_GEOMCOLLFROMTEXT:
	        case MySqlParser.ST_GEOMCOLLFROMTXT:
	        case MySqlParser.ST_GEOMCOLLFROMWKB:
	        case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
	        case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
	        case MySqlParser.ST_GEOMETRYFROMTEXT:
	        case MySqlParser.ST_GEOMETRYFROMWKB:
	        case MySqlParser.ST_GEOMETRYN:
	        case MySqlParser.ST_GEOMETRYTYPE:
	        case MySqlParser.ST_GEOMFROMTEXT:
	        case MySqlParser.ST_GEOMFROMWKB:
	        case MySqlParser.ST_INTERIORRINGN:
	        case MySqlParser.ST_INTERSECTION:
	        case MySqlParser.ST_INTERSECTS:
	        case MySqlParser.ST_ISCLOSED:
	        case MySqlParser.ST_ISEMPTY:
	        case MySqlParser.ST_ISSIMPLE:
	        case MySqlParser.ST_LINEFROMTEXT:
	        case MySqlParser.ST_LINEFROMWKB:
	        case MySqlParser.ST_LINESTRINGFROMTEXT:
	        case MySqlParser.ST_LINESTRINGFROMWKB:
	        case MySqlParser.ST_NUMGEOMETRIES:
	        case MySqlParser.ST_NUMINTERIORRING:
	        case MySqlParser.ST_NUMINTERIORRINGS:
	        case MySqlParser.ST_NUMPOINTS:
	        case MySqlParser.ST_OVERLAPS:
	        case MySqlParser.ST_POINTFROMTEXT:
	        case MySqlParser.ST_POINTFROMWKB:
	        case MySqlParser.ST_POINTN:
	        case MySqlParser.ST_POLYFROMTEXT:
	        case MySqlParser.ST_POLYFROMWKB:
	        case MySqlParser.ST_POLYGONFROMTEXT:
	        case MySqlParser.ST_POLYGONFROMWKB:
	        case MySqlParser.ST_SRID:
	        case MySqlParser.ST_STARTPOINT:
	        case MySqlParser.ST_SYMDIFFERENCE:
	        case MySqlParser.ST_TOUCHES:
	        case MySqlParser.ST_UNION:
	        case MySqlParser.ST_WITHIN:
	        case MySqlParser.ST_X:
	        case MySqlParser.ST_Y:
	        case MySqlParser.SUBDATE:
	        case MySqlParser.SUBSTRING_INDEX:
	        case MySqlParser.SUBTIME:
	        case MySqlParser.SYSTEM_USER:
	        case MySqlParser.TAN:
	        case MySqlParser.TIMEDIFF:
	        case MySqlParser.TIMESTAMPADD:
	        case MySqlParser.TIMESTAMPDIFF:
	        case MySqlParser.TIME_FORMAT:
	        case MySqlParser.TIME_TO_SEC:
	        case MySqlParser.TOUCHES:
	        case MySqlParser.TO_BASE64:
	        case MySqlParser.TO_DAYS:
	        case MySqlParser.TO_SECONDS:
	        case MySqlParser.UCASE:
	        case MySqlParser.UNCOMPRESS:
	        case MySqlParser.UNCOMPRESSED_LENGTH:
	        case MySqlParser.UNHEX:
	        case MySqlParser.UNIX_TIMESTAMP:
	        case MySqlParser.UPDATEXML:
	        case MySqlParser.UPPER:
	        case MySqlParser.UUID:
	        case MySqlParser.UUID_SHORT:
	        case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
	        case MySqlParser.VERSION:
	        case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
	        case MySqlParser.WEEKDAY:
	        case MySqlParser.WEEKOFYEAR:
	        case MySqlParser.WEIGHT_STRING:
	        case MySqlParser.WITHIN:
	        case MySqlParser.YEARWEEK:
	        case MySqlParser.Y_FUNCTION:
	        case MySqlParser.X_FUNCTION:
	        case MySqlParser.STRING_LITERAL:
	        case MySqlParser.ID:
	        case MySqlParser.REVERSE_QUOTE_ID:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3675;
	            this.simpleId();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	startTransaction() {
	    let localctx = new StartTransactionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, MySqlParser.RULE_startTransaction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3678;
	        this.match(MySqlParser.START);
	        this.state = 3679;
	        this.match(MySqlParser.TRANSACTION);
	        this.state = 3688;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.READ || _la===MySqlParser.WITH) {
	            this.state = 3680;
	            this.transactionMode();
	            this.state = 3685;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 3681;
	                this.match(MySqlParser.COMMA);
	                this.state = 3682;
	                this.transactionMode();
	                this.state = 3687;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	beginWork() {
	    let localctx = new BeginWorkContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, MySqlParser.RULE_beginWork);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3690;
	        this.match(MySqlParser.BEGIN);
	        this.state = 3692;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.WORK) {
	            this.state = 3691;
	            this.match(MySqlParser.WORK);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commitWork() {
	    let localctx = new CommitWorkContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, MySqlParser.RULE_commitWork);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3694;
	        this.match(MySqlParser.COMMIT);
	        this.state = 3696;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.WORK) {
	            this.state = 3695;
	            this.match(MySqlParser.WORK);
	        }

	        this.state = 3703;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.AND) {
	            this.state = 3698;
	            this.match(MySqlParser.AND);
	            this.state = 3700;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.NO) {
	                this.state = 3699;
	                localctx.nochain = this.match(MySqlParser.NO);
	            }

	            this.state = 3702;
	            this.match(MySqlParser.CHAIN);
	        }

	        this.state = 3709;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,541,this._ctx);
	        if(la_===1) {
	            this.state = 3706;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.NO) {
	                this.state = 3705;
	                localctx.norelease = this.match(MySqlParser.NO);
	            }

	            this.state = 3708;
	            this.match(MySqlParser.RELEASE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rollbackWork() {
	    let localctx = new RollbackWorkContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, MySqlParser.RULE_rollbackWork);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3711;
	        this.match(MySqlParser.ROLLBACK);
	        this.state = 3713;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.WORK) {
	            this.state = 3712;
	            this.match(MySqlParser.WORK);
	        }

	        this.state = 3720;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.AND) {
	            this.state = 3715;
	            this.match(MySqlParser.AND);
	            this.state = 3717;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.NO) {
	                this.state = 3716;
	                localctx.nochain = this.match(MySqlParser.NO);
	            }

	            this.state = 3719;
	            this.match(MySqlParser.CHAIN);
	        }

	        this.state = 3726;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,546,this._ctx);
	        if(la_===1) {
	            this.state = 3723;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.NO) {
	                this.state = 3722;
	                localctx.norelease = this.match(MySqlParser.NO);
	            }

	            this.state = 3725;
	            this.match(MySqlParser.RELEASE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	savepointStatement() {
	    let localctx = new SavepointStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, MySqlParser.RULE_savepointStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3728;
	        this.match(MySqlParser.SAVEPOINT);
	        this.state = 3729;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rollbackStatement() {
	    let localctx = new RollbackStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, MySqlParser.RULE_rollbackStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3731;
	        this.match(MySqlParser.ROLLBACK);
	        this.state = 3733;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.WORK) {
	            this.state = 3732;
	            this.match(MySqlParser.WORK);
	        }

	        this.state = 3735;
	        this.match(MySqlParser.TO);
	        this.state = 3737;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,548,this._ctx);
	        if(la_===1) {
	            this.state = 3736;
	            this.match(MySqlParser.SAVEPOINT);

	        }
	        this.state = 3739;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	releaseStatement() {
	    let localctx = new ReleaseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, MySqlParser.RULE_releaseStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3741;
	        this.match(MySqlParser.RELEASE);
	        this.state = 3742;
	        this.match(MySqlParser.SAVEPOINT);
	        this.state = 3743;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lockTables() {
	    let localctx = new LockTablesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, MySqlParser.RULE_lockTables);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3745;
	        this.match(MySqlParser.LOCK);
	        this.state = 3746;
	        this.match(MySqlParser.TABLES);
	        this.state = 3747;
	        this.lockTableElement();
	        this.state = 3752;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 3748;
	            this.match(MySqlParser.COMMA);
	            this.state = 3749;
	            this.lockTableElement();
	            this.state = 3754;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unlockTables() {
	    let localctx = new UnlockTablesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, MySqlParser.RULE_unlockTables);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3755;
	        this.match(MySqlParser.UNLOCK);
	        this.state = 3756;
	        this.match(MySqlParser.TABLES);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setAutocommitStatement() {
	    let localctx = new SetAutocommitStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, MySqlParser.RULE_setAutocommitStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3758;
	        this.match(MySqlParser.SET);
	        this.state = 3759;
	        this.match(MySqlParser.AUTOCOMMIT);
	        this.state = 3760;
	        this.match(MySqlParser.EQUAL_SYMBOL);
	        this.state = 3761;
	        localctx.autocommitValue = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.ZERO_DECIMAL || _la===MySqlParser.ONE_DECIMAL)) {
	            localctx.autocommitValue = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setTransactionStatement() {
	    let localctx = new SetTransactionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, MySqlParser.RULE_setTransactionStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3763;
	        this.match(MySqlParser.SET);
	        this.state = 3765;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.GLOBAL || _la===MySqlParser.SESSION) {
	            this.state = 3764;
	            localctx.transactionContext = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.GLOBAL || _la===MySqlParser.SESSION)) {
	                localctx.transactionContext = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 3767;
	        this.match(MySqlParser.TRANSACTION);
	        this.state = 3768;
	        this.transactionOption();
	        this.state = 3773;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 3769;
	            this.match(MySqlParser.COMMA);
	            this.state = 3770;
	            this.transactionOption();
	            this.state = 3775;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionMode() {
	    let localctx = new TransactionModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, MySqlParser.RULE_transactionMode);
	    try {
	        this.state = 3783;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,552,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3776;
	            this.match(MySqlParser.WITH);
	            this.state = 3777;
	            this.match(MySqlParser.CONSISTENT);
	            this.state = 3778;
	            this.match(MySqlParser.SNAPSHOT);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3779;
	            this.match(MySqlParser.READ);
	            this.state = 3780;
	            this.match(MySqlParser.WRITE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3781;
	            this.match(MySqlParser.READ);
	            this.state = 3782;
	            this.match(MySqlParser.ONLY);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lockTableElement() {
	    let localctx = new LockTableElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, MySqlParser.RULE_lockTableElement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3785;
	        this.tableName();
	        this.state = 3790;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.AS || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySqlParser.CURRENT - 32)) | (1 << (MySqlParser.DATABASE - 32)) | (1 << (MySqlParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySqlParser.LEFT || _la===MySqlParser.NUMBER || _la===MySqlParser.RIGHT || _la===MySqlParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.TIMESTAMP - 199)) | (1 << (MySqlParser.DATETIME - 199)) | (1 << (MySqlParser.YEAR - 199)) | (1 << (MySqlParser.TEXT - 199)) | (1 << (MySqlParser.ENUM - 199)) | (1 << (MySqlParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.JSON_VALID - 233)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySqlParser.AVG - 233)) | (1 << (MySqlParser.BIT_AND - 233)) | (1 << (MySqlParser.BIT_OR - 233)) | (1 << (MySqlParser.BIT_XOR - 233)) | (1 << (MySqlParser.COUNT - 233)) | (1 << (MySqlParser.GROUP_CONCAT - 233)) | (1 << (MySqlParser.MAX - 233)) | (1 << (MySqlParser.MIN - 233)) | (1 << (MySqlParser.STD - 233)) | (1 << (MySqlParser.STDDEV - 233)) | (1 << (MySqlParser.STDDEV_POP - 233)) | (1 << (MySqlParser.STDDEV_SAMP - 233)) | (1 << (MySqlParser.SUM - 233)) | (1 << (MySqlParser.VAR_POP - 233)) | (1 << (MySqlParser.VAR_SAMP - 233)) | (1 << (MySqlParser.VARIANCE - 233)) | (1 << (MySqlParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySqlParser.ACCOUNT - 270)) | (1 << (MySqlParser.ACTION - 270)) | (1 << (MySqlParser.AFTER - 270)) | (1 << (MySqlParser.AGGREGATE - 270)) | (1 << (MySqlParser.ALGORITHM - 270)) | (1 << (MySqlParser.ANY - 270)) | (1 << (MySqlParser.AT - 270)) | (1 << (MySqlParser.AUTHORS - 270)) | (1 << (MySqlParser.AUTOCOMMIT - 270)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySqlParser.AUTO_INCREMENT - 270)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 270)) | (1 << (MySqlParser.BEGIN - 270)) | (1 << (MySqlParser.BINLOG - 270)) | (1 << (MySqlParser.BIT - 270)) | (1 << (MySqlParser.BLOCK - 270)) | (1 << (MySqlParser.BOOL - 270)) | (1 << (MySqlParser.BOOLEAN - 270)) | (1 << (MySqlParser.BTREE - 270)) | (1 << (MySqlParser.CACHE - 270)) | (1 << (MySqlParser.CASCADED - 270)) | (1 << (MySqlParser.CHAIN - 270)) | (1 << (MySqlParser.CHANGED - 270)) | (1 << (MySqlParser.CHANNEL - 270)) | (1 << (MySqlParser.CHECKSUM - 270)) | (1 << (MySqlParser.PAGE_CHECKSUM - 270)) | (1 << (MySqlParser.CIPHER - 270)) | (1 << (MySqlParser.CLASS_ORIGIN - 270)) | (1 << (MySqlParser.CLIENT - 270)) | (1 << (MySqlParser.CLOSE - 270)) | (1 << (MySqlParser.COALESCE - 270)) | (1 << (MySqlParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySqlParser.COLUMNS - 302)) | (1 << (MySqlParser.COLUMN_FORMAT - 302)) | (1 << (MySqlParser.COLUMN_NAME - 302)) | (1 << (MySqlParser.COMMENT - 302)) | (1 << (MySqlParser.COMMIT - 302)) | (1 << (MySqlParser.COMPACT - 302)) | (1 << (MySqlParser.COMPLETION - 302)) | (1 << (MySqlParser.COMPRESSED - 302)) | (1 << (MySqlParser.COMPRESSION - 302)) | (1 << (MySqlParser.CONCURRENT - 302)) | (1 << (MySqlParser.CONNECTION - 302)) | (1 << (MySqlParser.CONSISTENT - 302)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySqlParser.CONSTRAINT_NAME - 302)) | (1 << (MySqlParser.CONTAINS - 302)) | (1 << (MySqlParser.CONTEXT - 302)) | (1 << (MySqlParser.CONTRIBUTORS - 302)) | (1 << (MySqlParser.COPY - 302)) | (1 << (MySqlParser.CPU - 302)) | (1 << (MySqlParser.CURSOR_NAME - 302)) | (1 << (MySqlParser.DATA - 302)) | (1 << (MySqlParser.DATAFILE - 302)) | (1 << (MySqlParser.DEALLOCATE - 302)) | (1 << (MySqlParser.DEFAULT_AUTH - 302)) | (1 << (MySqlParser.DEFINER - 302)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 302)) | (1 << (MySqlParser.DES_KEY_FILE - 302)) | (1 << (MySqlParser.DIRECTORY - 302)) | (1 << (MySqlParser.DISABLE - 302)) | (1 << (MySqlParser.DISCARD - 302)) | (1 << (MySqlParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySqlParser.DO - 334)) | (1 << (MySqlParser.DUMPFILE - 334)) | (1 << (MySqlParser.DUPLICATE - 334)) | (1 << (MySqlParser.DYNAMIC - 334)) | (1 << (MySqlParser.ENABLE - 334)) | (1 << (MySqlParser.ENCRYPTION - 334)) | (1 << (MySqlParser.END - 334)) | (1 << (MySqlParser.ENDS - 334)) | (1 << (MySqlParser.ENGINE - 334)) | (1 << (MySqlParser.ENGINES - 334)) | (1 << (MySqlParser.ERROR - 334)) | (1 << (MySqlParser.ERRORS - 334)) | (1 << (MySqlParser.ESCAPE - 334)) | (1 << (MySqlParser.EVEN - 334)) | (1 << (MySqlParser.EVENT - 334)) | (1 << (MySqlParser.EVENTS - 334)) | (1 << (MySqlParser.EVERY - 334)) | (1 << (MySqlParser.EXCHANGE - 334)) | (1 << (MySqlParser.EXCLUSIVE - 334)) | (1 << (MySqlParser.EXPIRE - 334)) | (1 << (MySqlParser.EXPORT - 334)) | (1 << (MySqlParser.EXTENDED - 334)) | (1 << (MySqlParser.EXTENT_SIZE - 334)) | (1 << (MySqlParser.FAST - 334)) | (1 << (MySqlParser.FAULTS - 334)) | (1 << (MySqlParser.FIELDS - 334)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySqlParser.FILTER - 334)) | (1 << (MySqlParser.FIRST - 334)) | (1 << (MySqlParser.FIXED - 334)) | (1 << (MySqlParser.FLUSH - 334)) | (1 << (MySqlParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySqlParser.FOUND - 366)) | (1 << (MySqlParser.FULL - 366)) | (1 << (MySqlParser.FUNCTION - 366)) | (1 << (MySqlParser.GENERAL - 366)) | (1 << (MySqlParser.GLOBAL - 366)) | (1 << (MySqlParser.GRANTS - 366)) | (1 << (MySqlParser.GROUP_REPLICATION - 366)) | (1 << (MySqlParser.HANDLER - 366)) | (1 << (MySqlParser.HASH - 366)) | (1 << (MySqlParser.HELP - 366)) | (1 << (MySqlParser.HOST - 366)) | (1 << (MySqlParser.HOSTS - 366)) | (1 << (MySqlParser.IDENTIFIED - 366)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySqlParser.IMPORT - 366)) | (1 << (MySqlParser.INDEXES - 366)) | (1 << (MySqlParser.INITIAL_SIZE - 366)) | (1 << (MySqlParser.INPLACE - 366)) | (1 << (MySqlParser.INSERT_METHOD - 366)) | (1 << (MySqlParser.INSTALL - 366)) | (1 << (MySqlParser.INSTANCE - 366)) | (1 << (MySqlParser.INVISIBLE - 366)) | (1 << (MySqlParser.INVOKER - 366)) | (1 << (MySqlParser.IO - 366)) | (1 << (MySqlParser.IO_THREAD - 366)) | (1 << (MySqlParser.IPC - 366)) | (1 << (MySqlParser.ISOLATION - 366)) | (1 << (MySqlParser.ISSUER - 366)) | (1 << (MySqlParser.JSON - 366)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySqlParser.LANGUAGE - 366)) | (1 << (MySqlParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.LEAVES - 398)) | (1 << (MySqlParser.LESS - 398)) | (1 << (MySqlParser.LEVEL - 398)) | (1 << (MySqlParser.LIST - 398)) | (1 << (MySqlParser.LOCAL - 398)) | (1 << (MySqlParser.LOGFILE - 398)) | (1 << (MySqlParser.LOGS - 398)) | (1 << (MySqlParser.MASTER - 398)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySqlParser.MASTER_DELAY - 398)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySqlParser.MASTER_HOST - 398)) | (1 << (MySqlParser.MASTER_LOG_FILE - 398)) | (1 << (MySqlParser.MASTER_LOG_POS - 398)) | (1 << (MySqlParser.MASTER_PASSWORD - 398)) | (1 << (MySqlParser.MASTER_PORT - 398)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySqlParser.MASTER_SSL - 398)) | (1 << (MySqlParser.MASTER_SSL_CA - 398)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_CERT - 398)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySqlParser.MASTER_SSL_CRL - 398)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_KEY - 398)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 398)) | (1 << (MySqlParser.MASTER_USER - 398)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySqlParser.MEDIUM - 430)) | (1 << (MySqlParser.MEMBER - 430)) | (1 << (MySqlParser.MERGE - 430)) | (1 << (MySqlParser.MESSAGE_TEXT - 430)) | (1 << (MySqlParser.MID - 430)) | (1 << (MySqlParser.MIGRATE - 430)) | (1 << (MySqlParser.MIN_ROWS - 430)) | (1 << (MySqlParser.MODE - 430)) | (1 << (MySqlParser.MODIFY - 430)) | (1 << (MySqlParser.MUTEX - 430)) | (1 << (MySqlParser.MYSQL - 430)) | (1 << (MySqlParser.MYSQL_ERRNO - 430)) | (1 << (MySqlParser.NAME - 430)) | (1 << (MySqlParser.NAMES - 430)) | (1 << (MySqlParser.NCHAR - 430)) | (1 << (MySqlParser.NEVER - 430)) | (1 << (MySqlParser.NEXT - 430)) | (1 << (MySqlParser.NO - 430)) | (1 << (MySqlParser.NODEGROUP - 430)) | (1 << (MySqlParser.NONE - 430)) | (1 << (MySqlParser.OFFLINE - 430)) | (1 << (MySqlParser.OFFSET - 430)) | (1 << (MySqlParser.OF - 430)) | (1 << (MySqlParser.OJ - 430)) | (1 << (MySqlParser.OLD_PASSWORD - 430)) | (1 << (MySqlParser.ONE - 430)) | (1 << (MySqlParser.ONLINE - 430)) | (1 << (MySqlParser.ONLY - 430)) | (1 << (MySqlParser.OPEN - 430)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySqlParser.OPTIONS - 462)) | (1 << (MySqlParser.OWNER - 462)) | (1 << (MySqlParser.PACK_KEYS - 462)) | (1 << (MySqlParser.PAGE - 462)) | (1 << (MySqlParser.PARSER - 462)) | (1 << (MySqlParser.PARTIAL - 462)) | (1 << (MySqlParser.PARTITIONING - 462)) | (1 << (MySqlParser.PARTITIONS - 462)) | (1 << (MySqlParser.PASSWORD - 462)) | (1 << (MySqlParser.PHASE - 462)) | (1 << (MySqlParser.PLUGIN - 462)) | (1 << (MySqlParser.PLUGIN_DIR - 462)) | (1 << (MySqlParser.PLUGINS - 462)) | (1 << (MySqlParser.PORT - 462)) | (1 << (MySqlParser.PRECEDES - 462)) | (1 << (MySqlParser.PREPARE - 462)) | (1 << (MySqlParser.PRESERVE - 462)) | (1 << (MySqlParser.PREV - 462)) | (1 << (MySqlParser.PROCESSLIST - 462)) | (1 << (MySqlParser.PROFILE - 462)) | (1 << (MySqlParser.PROFILES - 462)) | (1 << (MySqlParser.PROXY - 462)) | (1 << (MySqlParser.QUERY - 462)) | (1 << (MySqlParser.QUICK - 462)) | (1 << (MySqlParser.REBUILD - 462)) | (1 << (MySqlParser.RECOVER - 462)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySqlParser.REDUNDANT - 462)) | (1 << (MySqlParser.RELAY - 462)) | (1 << (MySqlParser.RELAY_LOG_FILE - 462)) | (1 << (MySqlParser.RELAY_LOG_POS - 462)) | (1 << (MySqlParser.RELAYLOG - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySqlParser.REMOVE - 494)) | (1 << (MySqlParser.REORGANIZE - 494)) | (1 << (MySqlParser.REPAIR - 494)) | (1 << (MySqlParser.REPLICATE_DO_DB - 494)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATION - 494)) | (1 << (MySqlParser.RESET - 494)) | (1 << (MySqlParser.RESUME - 494)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 494)) | (1 << (MySqlParser.RETURNS - 494)) | (1 << (MySqlParser.ROLE - 494)) | (1 << (MySqlParser.ROLLBACK - 494)) | (1 << (MySqlParser.ROLLUP - 494)) | (1 << (MySqlParser.ROTATE - 494)) | (1 << (MySqlParser.ROW - 494)) | (1 << (MySqlParser.ROWS - 494)) | (1 << (MySqlParser.ROW_FORMAT - 494)) | (1 << (MySqlParser.SAVEPOINT - 494)) | (1 << (MySqlParser.SCHEDULE - 494)) | (1 << (MySqlParser.SECURITY - 494)) | (1 << (MySqlParser.SERVER - 494)) | (1 << (MySqlParser.SESSION - 494)) | (1 << (MySqlParser.SHARE - 494)) | (1 << (MySqlParser.SHARED - 494)) | (1 << (MySqlParser.SIGNED - 494)) | (1 << (MySqlParser.SIMPLE - 494)) | (1 << (MySqlParser.SLAVE - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySqlParser.SLOW - 526)) | (1 << (MySqlParser.SNAPSHOT - 526)) | (1 << (MySqlParser.SOCKET - 526)) | (1 << (MySqlParser.SOME - 526)) | (1 << (MySqlParser.SONAME - 526)) | (1 << (MySqlParser.SOUNDS - 526)) | (1 << (MySqlParser.SOURCE - 526)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySqlParser.SQL_CACHE - 526)) | (1 << (MySqlParser.SQL_NO_CACHE - 526)) | (1 << (MySqlParser.SQL_THREAD - 526)) | (1 << (MySqlParser.START - 526)) | (1 << (MySqlParser.STARTS - 526)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 526)) | (1 << (MySqlParser.STATS_PERSISTENT - 526)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySqlParser.STATUS - 526)) | (1 << (MySqlParser.STOP - 526)) | (1 << (MySqlParser.STORAGE - 526)) | (1 << (MySqlParser.STRING - 526)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySqlParser.SUBJECT - 526)) | (1 << (MySqlParser.SUBPARTITION - 526)) | (1 << (MySqlParser.SUBPARTITIONS - 526)) | (1 << (MySqlParser.SUSPEND - 526)) | (1 << (MySqlParser.SWAPS - 526)) | (1 << (MySqlParser.SWITCHES - 526)) | (1 << (MySqlParser.TABLE_NAME - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySqlParser.TABLESPACE - 558)) | (1 << (MySqlParser.TEMPORARY - 558)) | (1 << (MySqlParser.TEMPTABLE - 558)) | (1 << (MySqlParser.THAN - 558)) | (1 << (MySqlParser.TRADITIONAL - 558)) | (1 << (MySqlParser.TRANSACTION - 558)) | (1 << (MySqlParser.TRANSACTIONAL - 558)) | (1 << (MySqlParser.TRIGGERS - 558)) | (1 << (MySqlParser.TRUNCATE - 558)) | (1 << (MySqlParser.UNDEFINED - 558)) | (1 << (MySqlParser.UNDOFILE - 558)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySqlParser.UNINSTALL - 558)) | (1 << (MySqlParser.UNKNOWN - 558)) | (1 << (MySqlParser.UNTIL - 558)) | (1 << (MySqlParser.UPGRADE - 558)) | (1 << (MySqlParser.USER - 558)) | (1 << (MySqlParser.USE_FRM - 558)) | (1 << (MySqlParser.USER_RESOURCES - 558)) | (1 << (MySqlParser.VALIDATION - 558)) | (1 << (MySqlParser.VALUE - 558)) | (1 << (MySqlParser.VARIABLES - 558)) | (1 << (MySqlParser.VIEW - 558)) | (1 << (MySqlParser.VISIBLE - 558)) | (1 << (MySqlParser.WAIT - 558)) | (1 << (MySqlParser.WARNINGS - 558)) | (1 << (MySqlParser.WITHOUT - 558)) | (1 << (MySqlParser.WORK - 558)) | (1 << (MySqlParser.WRAPPER - 558)) | (1 << (MySqlParser.X509 - 558)) | (1 << (MySqlParser.XA - 558)))) !== 0) || ((((_la - 590)) & ~0x1f) == 0 && ((1 << (_la - 590)) & ((1 << (MySqlParser.XML - 590)) | (1 << (MySqlParser.INTERNAL - 590)) | (1 << (MySqlParser.QUARTER - 590)) | (1 << (MySqlParser.MONTH - 590)) | (1 << (MySqlParser.DAY - 590)) | (1 << (MySqlParser.HOUR - 590)) | (1 << (MySqlParser.MINUTE - 590)) | (1 << (MySqlParser.WEEK - 590)) | (1 << (MySqlParser.SECOND - 590)) | (1 << (MySqlParser.MICROSECOND - 590)) | (1 << (MySqlParser.TABLES - 590)) | (1 << (MySqlParser.ROUTINE - 590)) | (1 << (MySqlParser.EXECUTE - 590)) | (1 << (MySqlParser.FILE - 590)) | (1 << (MySqlParser.PROCESS - 590)) | (1 << (MySqlParser.RELOAD - 590)) | (1 << (MySqlParser.SHUTDOWN - 590)) | (1 << (MySqlParser.SUPER - 590)) | (1 << (MySqlParser.PRIVILEGES - 590)) | (1 << (MySqlParser.AUDIT_ADMIN - 590)) | (1 << (MySqlParser.BACKUP_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 590)) | (1 << (MySqlParser.CLONE_ADMIN - 590)) | (1 << (MySqlParser.CONNECTION_ADMIN - 590)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 590)) | (1 << (MySqlParser.FIREWALL_ADMIN - 590)))) !== 0) || ((((_la - 622)) & ~0x1f) == 0 && ((1 << (_la - 622)) & ((1 << (MySqlParser.FIREWALL_USER - 622)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 622)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 622)) | (1 << (MySqlParser.NDB_STORED_USER - 622)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.REPLICATION_APPLIER - 622)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 622)) | (1 << (MySqlParser.ROLE_ADMIN - 622)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.SET_USER_ID - 622)) | (1 << (MySqlParser.SHOW_ROUTINE - 622)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 622)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 622)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 622)) | (1 << (MySqlParser.ARMSCII8 - 622)) | (1 << (MySqlParser.ASCII - 622)) | (1 << (MySqlParser.BIG5 - 622)) | (1 << (MySqlParser.CP1250 - 622)) | (1 << (MySqlParser.CP1251 - 622)) | (1 << (MySqlParser.CP1256 - 622)) | (1 << (MySqlParser.CP1257 - 622)) | (1 << (MySqlParser.CP850 - 622)) | (1 << (MySqlParser.CP852 - 622)) | (1 << (MySqlParser.CP866 - 622)) | (1 << (MySqlParser.CP932 - 622)) | (1 << (MySqlParser.DEC8 - 622)) | (1 << (MySqlParser.EUCJPMS - 622)) | (1 << (MySqlParser.EUCKR - 622)) | (1 << (MySqlParser.GB2312 - 622)))) !== 0) || ((((_la - 654)) & ~0x1f) == 0 && ((1 << (_la - 654)) & ((1 << (MySqlParser.GBK - 654)) | (1 << (MySqlParser.GEOSTD8 - 654)) | (1 << (MySqlParser.GREEK - 654)) | (1 << (MySqlParser.HEBREW - 654)) | (1 << (MySqlParser.HP8 - 654)) | (1 << (MySqlParser.KEYBCS2 - 654)) | (1 << (MySqlParser.KOI8R - 654)) | (1 << (MySqlParser.KOI8U - 654)) | (1 << (MySqlParser.LATIN1 - 654)) | (1 << (MySqlParser.LATIN2 - 654)) | (1 << (MySqlParser.LATIN5 - 654)) | (1 << (MySqlParser.LATIN7 - 654)) | (1 << (MySqlParser.MACCE - 654)) | (1 << (MySqlParser.MACROMAN - 654)) | (1 << (MySqlParser.SJIS - 654)) | (1 << (MySqlParser.SWE7 - 654)) | (1 << (MySqlParser.TIS620 - 654)) | (1 << (MySqlParser.UCS2 - 654)) | (1 << (MySqlParser.UJIS - 654)) | (1 << (MySqlParser.UTF16 - 654)) | (1 << (MySqlParser.UTF16LE - 654)) | (1 << (MySqlParser.UTF32 - 654)) | (1 << (MySqlParser.UTF8 - 654)) | (1 << (MySqlParser.UTF8MB3 - 654)) | (1 << (MySqlParser.UTF8MB4 - 654)) | (1 << (MySqlParser.ARCHIVE - 654)) | (1 << (MySqlParser.BLACKHOLE - 654)) | (1 << (MySqlParser.CSV - 654)) | (1 << (MySqlParser.FEDERATED - 654)) | (1 << (MySqlParser.INNODB - 654)) | (1 << (MySqlParser.MEMORY - 654)) | (1 << (MySqlParser.MRG_MYISAM - 654)))) !== 0) || ((((_la - 686)) & ~0x1f) == 0 && ((1 << (_la - 686)) & ((1 << (MySqlParser.MYISAM - 686)) | (1 << (MySqlParser.NDB - 686)) | (1 << (MySqlParser.NDBCLUSTER - 686)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 686)) | (1 << (MySqlParser.TOKUDB - 686)) | (1 << (MySqlParser.REPEATABLE - 686)) | (1 << (MySqlParser.COMMITTED - 686)) | (1 << (MySqlParser.UNCOMMITTED - 686)) | (1 << (MySqlParser.SERIALIZABLE - 686)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 686)) | (1 << (MySqlParser.LINESTRING - 686)) | (1 << (MySqlParser.MULTILINESTRING - 686)) | (1 << (MySqlParser.MULTIPOINT - 686)) | (1 << (MySqlParser.MULTIPOLYGON - 686)) | (1 << (MySqlParser.POINT - 686)) | (1 << (MySqlParser.POLYGON - 686)) | (1 << (MySqlParser.ABS - 686)) | (1 << (MySqlParser.ACOS - 686)) | (1 << (MySqlParser.ADDDATE - 686)) | (1 << (MySqlParser.ADDTIME - 686)) | (1 << (MySqlParser.AES_DECRYPT - 686)) | (1 << (MySqlParser.AES_ENCRYPT - 686)) | (1 << (MySqlParser.AREA - 686)) | (1 << (MySqlParser.ASBINARY - 686)) | (1 << (MySqlParser.ASIN - 686)) | (1 << (MySqlParser.ASTEXT - 686)) | (1 << (MySqlParser.ASWKB - 686)) | (1 << (MySqlParser.ASWKT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 686)))) !== 0) || ((((_la - 718)) & ~0x1f) == 0 && ((1 << (_la - 718)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 718)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 718)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 718)) | (1 << (MySqlParser.ATAN - 718)) | (1 << (MySqlParser.ATAN2 - 718)) | (1 << (MySqlParser.BENCHMARK - 718)) | (1 << (MySqlParser.BIN - 718)) | (1 << (MySqlParser.BIT_COUNT - 718)) | (1 << (MySqlParser.BIT_LENGTH - 718)) | (1 << (MySqlParser.BUFFER - 718)) | (1 << (MySqlParser.CATALOG_NAME - 718)) | (1 << (MySqlParser.CEIL - 718)) | (1 << (MySqlParser.CEILING - 718)) | (1 << (MySqlParser.CENTROID - 718)) | (1 << (MySqlParser.CHARACTER_LENGTH - 718)) | (1 << (MySqlParser.CHARSET - 718)) | (1 << (MySqlParser.CHAR_LENGTH - 718)) | (1 << (MySqlParser.COERCIBILITY - 718)) | (1 << (MySqlParser.COLLATION - 718)) | (1 << (MySqlParser.COMPRESS - 718)) | (1 << (MySqlParser.CONCAT - 718)) | (1 << (MySqlParser.CONCAT_WS - 718)) | (1 << (MySqlParser.CONNECTION_ID - 718)) | (1 << (MySqlParser.CONV - 718)) | (1 << (MySqlParser.CONVERT_TZ - 718)) | (1 << (MySqlParser.COS - 718)) | (1 << (MySqlParser.COT - 718)) | (1 << (MySqlParser.CRC32 - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 718)) | (1 << (MySqlParser.CREATE_DIGEST - 718)))) !== 0) || ((((_la - 750)) & ~0x1f) == 0 && ((1 << (_la - 750)) & ((1 << (MySqlParser.CROSSES - 750)) | (1 << (MySqlParser.DATEDIFF - 750)) | (1 << (MySqlParser.DATE_FORMAT - 750)) | (1 << (MySqlParser.DAYNAME - 750)) | (1 << (MySqlParser.DAYOFMONTH - 750)) | (1 << (MySqlParser.DAYOFWEEK - 750)) | (1 << (MySqlParser.DAYOFYEAR - 750)) | (1 << (MySqlParser.DECODE - 750)) | (1 << (MySqlParser.DEGREES - 750)) | (1 << (MySqlParser.DES_DECRYPT - 750)) | (1 << (MySqlParser.DES_ENCRYPT - 750)) | (1 << (MySqlParser.DIMENSION - 750)) | (1 << (MySqlParser.DISJOINT - 750)) | (1 << (MySqlParser.ELT - 750)) | (1 << (MySqlParser.ENCODE - 750)) | (1 << (MySqlParser.ENCRYPT - 750)) | (1 << (MySqlParser.ENDPOINT - 750)) | (1 << (MySqlParser.ENVELOPE - 750)) | (1 << (MySqlParser.EQUALS - 750)) | (1 << (MySqlParser.EXP - 750)) | (1 << (MySqlParser.EXPORT_SET - 750)) | (1 << (MySqlParser.EXTERIORRING - 750)) | (1 << (MySqlParser.EXTRACTVALUE - 750)) | (1 << (MySqlParser.FIELD - 750)) | (1 << (MySqlParser.FIND_IN_SET - 750)) | (1 << (MySqlParser.FLOOR - 750)) | (1 << (MySqlParser.FORMAT - 750)) | (1 << (MySqlParser.FOUND_ROWS - 750)) | (1 << (MySqlParser.FROM_BASE64 - 750)) | (1 << (MySqlParser.FROM_DAYS - 750)) | (1 << (MySqlParser.FROM_UNIXTIME - 750)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 750)))) !== 0) || ((((_la - 782)) & ~0x1f) == 0 && ((1 << (_la - 782)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYN - 782)) | (1 << (MySqlParser.GEOMETRYTYPE - 782)) | (1 << (MySqlParser.GEOMFROMTEXT - 782)) | (1 << (MySqlParser.GEOMFROMWKB - 782)) | (1 << (MySqlParser.GET_FORMAT - 782)) | (1 << (MySqlParser.GET_LOCK - 782)) | (1 << (MySqlParser.GLENGTH - 782)) | (1 << (MySqlParser.GREATEST - 782)) | (1 << (MySqlParser.GTID_SUBSET - 782)) | (1 << (MySqlParser.GTID_SUBTRACT - 782)) | (1 << (MySqlParser.HEX - 782)) | (1 << (MySqlParser.IFNULL - 782)) | (1 << (MySqlParser.INET6_ATON - 782)) | (1 << (MySqlParser.INET6_NTOA - 782)) | (1 << (MySqlParser.INET_ATON - 782)) | (1 << (MySqlParser.INET_NTOA - 782)) | (1 << (MySqlParser.INSTR - 782)) | (1 << (MySqlParser.INTERIORRINGN - 782)) | (1 << (MySqlParser.INTERSECTS - 782)) | (1 << (MySqlParser.ISCLOSED - 782)) | (1 << (MySqlParser.ISEMPTY - 782)) | (1 << (MySqlParser.ISNULL - 782)) | (1 << (MySqlParser.ISSIMPLE - 782)) | (1 << (MySqlParser.IS_FREE_LOCK - 782)) | (1 << (MySqlParser.IS_IPV4 - 782)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 782)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 782)))) !== 0) || ((((_la - 814)) & ~0x1f) == 0 && ((1 << (_la - 814)) & ((1 << (MySqlParser.IS_IPV6 - 814)) | (1 << (MySqlParser.IS_USED_LOCK - 814)) | (1 << (MySqlParser.LAST_INSERT_ID - 814)) | (1 << (MySqlParser.LCASE - 814)) | (1 << (MySqlParser.LEAST - 814)) | (1 << (MySqlParser.LENGTH - 814)) | (1 << (MySqlParser.LINEFROMTEXT - 814)) | (1 << (MySqlParser.LINEFROMWKB - 814)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 814)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 814)) | (1 << (MySqlParser.LN - 814)) | (1 << (MySqlParser.LOAD_FILE - 814)) | (1 << (MySqlParser.LOCATE - 814)) | (1 << (MySqlParser.LOG - 814)) | (1 << (MySqlParser.LOG10 - 814)) | (1 << (MySqlParser.LOG2 - 814)) | (1 << (MySqlParser.LOWER - 814)) | (1 << (MySqlParser.LPAD - 814)) | (1 << (MySqlParser.LTRIM - 814)) | (1 << (MySqlParser.MAKEDATE - 814)) | (1 << (MySqlParser.MAKETIME - 814)) | (1 << (MySqlParser.MAKE_SET - 814)) | (1 << (MySqlParser.MASTER_POS_WAIT - 814)) | (1 << (MySqlParser.MBRCONTAINS - 814)) | (1 << (MySqlParser.MBRDISJOINT - 814)) | (1 << (MySqlParser.MBREQUAL - 814)) | (1 << (MySqlParser.MBRINTERSECTS - 814)) | (1 << (MySqlParser.MBROVERLAPS - 814)) | (1 << (MySqlParser.MBRTOUCHES - 814)) | (1 << (MySqlParser.MBRWITHIN - 814)) | (1 << (MySqlParser.MD5 - 814)) | (1 << (MySqlParser.MLINEFROMTEXT - 814)))) !== 0) || ((((_la - 846)) & ~0x1f) == 0 && ((1 << (_la - 846)) & ((1 << (MySqlParser.MLINEFROMWKB - 846)) | (1 << (MySqlParser.MONTHNAME - 846)) | (1 << (MySqlParser.MPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MPOINTFROMWKB - 846)) | (1 << (MySqlParser.MPOLYFROMTEXT - 846)) | (1 << (MySqlParser.MPOLYFROMWKB - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 846)) | (1 << (MySqlParser.NAME_CONST - 846)) | (1 << (MySqlParser.NULLIF - 846)) | (1 << (MySqlParser.NUMGEOMETRIES - 846)) | (1 << (MySqlParser.NUMINTERIORRINGS - 846)) | (1 << (MySqlParser.NUMPOINTS - 846)) | (1 << (MySqlParser.OCT - 846)) | (1 << (MySqlParser.OCTET_LENGTH - 846)) | (1 << (MySqlParser.ORD - 846)) | (1 << (MySqlParser.OVERLAPS - 846)) | (1 << (MySqlParser.PERIOD_ADD - 846)) | (1 << (MySqlParser.PERIOD_DIFF - 846)) | (1 << (MySqlParser.PI - 846)) | (1 << (MySqlParser.POINTFROMTEXT - 846)) | (1 << (MySqlParser.POINTFROMWKB - 846)) | (1 << (MySqlParser.POINTN - 846)) | (1 << (MySqlParser.POLYFROMTEXT - 846)) | (1 << (MySqlParser.POLYFROMWKB - 846)) | (1 << (MySqlParser.POLYGONFROMTEXT - 846)) | (1 << (MySqlParser.POLYGONFROMWKB - 846)) | (1 << (MySqlParser.POW - 846)))) !== 0) || ((((_la - 878)) & ~0x1f) == 0 && ((1 << (_la - 878)) & ((1 << (MySqlParser.POWER - 878)) | (1 << (MySqlParser.QUOTE - 878)) | (1 << (MySqlParser.RADIANS - 878)) | (1 << (MySqlParser.RAND - 878)) | (1 << (MySqlParser.RANDOM_BYTES - 878)) | (1 << (MySqlParser.RELEASE_LOCK - 878)) | (1 << (MySqlParser.REVERSE - 878)) | (1 << (MySqlParser.ROUND - 878)) | (1 << (MySqlParser.ROW_COUNT - 878)) | (1 << (MySqlParser.RPAD - 878)) | (1 << (MySqlParser.RTRIM - 878)) | (1 << (MySqlParser.SEC_TO_TIME - 878)) | (1 << (MySqlParser.SESSION_USER - 878)) | (1 << (MySqlParser.SHA - 878)) | (1 << (MySqlParser.SHA1 - 878)) | (1 << (MySqlParser.SHA2 - 878)) | (1 << (MySqlParser.SCHEMA_NAME - 878)) | (1 << (MySqlParser.SIGN - 878)) | (1 << (MySqlParser.SIN - 878)) | (1 << (MySqlParser.SLEEP - 878)) | (1 << (MySqlParser.SOUNDEX - 878)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 878)) | (1 << (MySqlParser.SQRT - 878)) | (1 << (MySqlParser.SRID - 878)) | (1 << (MySqlParser.STARTPOINT - 878)) | (1 << (MySqlParser.STRCMP - 878)) | (1 << (MySqlParser.STR_TO_DATE - 878)) | (1 << (MySqlParser.ST_AREA - 878)) | (1 << (MySqlParser.ST_ASBINARY - 878)) | (1 << (MySqlParser.ST_ASTEXT - 878)) | (1 << (MySqlParser.ST_ASWKB - 878)) | (1 << (MySqlParser.ST_ASWKT - 878)))) !== 0) || ((((_la - 910)) & ~0x1f) == 0 && ((1 << (_la - 910)) & ((1 << (MySqlParser.ST_BUFFER - 910)) | (1 << (MySqlParser.ST_CENTROID - 910)) | (1 << (MySqlParser.ST_CONTAINS - 910)) | (1 << (MySqlParser.ST_CROSSES - 910)) | (1 << (MySqlParser.ST_DIFFERENCE - 910)) | (1 << (MySqlParser.ST_DIMENSION - 910)) | (1 << (MySqlParser.ST_DISJOINT - 910)) | (1 << (MySqlParser.ST_DISTANCE - 910)) | (1 << (MySqlParser.ST_ENDPOINT - 910)) | (1 << (MySqlParser.ST_ENVELOPE - 910)) | (1 << (MySqlParser.ST_EQUALS - 910)) | (1 << (MySqlParser.ST_EXTERIORRING - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYN - 910)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 910)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 910)) | (1 << (MySqlParser.ST_INTERIORRINGN - 910)) | (1 << (MySqlParser.ST_INTERSECTION - 910)) | (1 << (MySqlParser.ST_INTERSECTS - 910)) | (1 << (MySqlParser.ST_ISCLOSED - 910)) | (1 << (MySqlParser.ST_ISEMPTY - 910)) | (1 << (MySqlParser.ST_ISSIMPLE - 910)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 910)) | (1 << (MySqlParser.ST_LINEFROMWKB - 910)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 910)))) !== 0) || ((((_la - 942)) & ~0x1f) == 0 && ((1 << (_la - 942)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 942)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 942)) | (1 << (MySqlParser.ST_NUMPOINTS - 942)) | (1 << (MySqlParser.ST_OVERLAPS - 942)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 942)) | (1 << (MySqlParser.ST_POINTFROMWKB - 942)) | (1 << (MySqlParser.ST_POINTN - 942)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYFROMWKB - 942)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 942)) | (1 << (MySqlParser.ST_SRID - 942)) | (1 << (MySqlParser.ST_STARTPOINT - 942)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 942)) | (1 << (MySqlParser.ST_TOUCHES - 942)) | (1 << (MySqlParser.ST_UNION - 942)) | (1 << (MySqlParser.ST_WITHIN - 942)) | (1 << (MySqlParser.ST_X - 942)) | (1 << (MySqlParser.ST_Y - 942)) | (1 << (MySqlParser.SUBDATE - 942)) | (1 << (MySqlParser.SUBSTRING_INDEX - 942)) | (1 << (MySqlParser.SUBTIME - 942)) | (1 << (MySqlParser.SYSTEM_USER - 942)) | (1 << (MySqlParser.TAN - 942)) | (1 << (MySqlParser.TIMEDIFF - 942)) | (1 << (MySqlParser.TIMESTAMPADD - 942)) | (1 << (MySqlParser.TIMESTAMPDIFF - 942)) | (1 << (MySqlParser.TIME_FORMAT - 942)) | (1 << (MySqlParser.TIME_TO_SEC - 942)) | (1 << (MySqlParser.TOUCHES - 942)))) !== 0) || ((((_la - 974)) & ~0x1f) == 0 && ((1 << (_la - 974)) & ((1 << (MySqlParser.TO_BASE64 - 974)) | (1 << (MySqlParser.TO_DAYS - 974)) | (1 << (MySqlParser.TO_SECONDS - 974)) | (1 << (MySqlParser.UCASE - 974)) | (1 << (MySqlParser.UNCOMPRESS - 974)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 974)) | (1 << (MySqlParser.UNHEX - 974)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 974)) | (1 << (MySqlParser.UPDATEXML - 974)) | (1 << (MySqlParser.UPPER - 974)) | (1 << (MySqlParser.UUID - 974)) | (1 << (MySqlParser.UUID_SHORT - 974)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 974)) | (1 << (MySqlParser.VERSION - 974)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1 << (MySqlParser.WEEKDAY - 974)) | (1 << (MySqlParser.WEEKOFYEAR - 974)) | (1 << (MySqlParser.WEIGHT_STRING - 974)) | (1 << (MySqlParser.WITHIN - 974)) | (1 << (MySqlParser.YEARWEEK - 974)) | (1 << (MySqlParser.Y_FUNCTION - 974)) | (1 << (MySqlParser.X_FUNCTION - 974)))) !== 0) || ((((_la - 1034)) & ~0x1f) == 0 && ((1 << (_la - 1034)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (MySqlParser.STRING_LITERAL - 1034)) | (1 << (MySqlParser.ID - 1034)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1034)))) !== 0)) {
	            this.state = 3787;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.AS) {
	                this.state = 3786;
	                this.match(MySqlParser.AS);
	            }

	            this.state = 3789;
	            this.uid();
	        }

	        this.state = 3792;
	        this.lockAction();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lockAction() {
	    let localctx = new LockActionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, MySqlParser.RULE_lockAction);
	    var _la = 0; // Token type
	    try {
	        this.state = 3802;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.READ:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3794;
	            this.match(MySqlParser.READ);
	            this.state = 3796;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.LOCAL) {
	                this.state = 3795;
	                this.match(MySqlParser.LOCAL);
	            }

	            break;
	        case MySqlParser.LOW_PRIORITY:
	        case MySqlParser.WRITE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3799;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.LOW_PRIORITY) {
	                this.state = 3798;
	                this.match(MySqlParser.LOW_PRIORITY);
	            }

	            this.state = 3801;
	            this.match(MySqlParser.WRITE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionOption() {
	    let localctx = new TransactionOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, MySqlParser.RULE_transactionOption);
	    try {
	        this.state = 3811;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,558,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3804;
	            this.match(MySqlParser.ISOLATION);
	            this.state = 3805;
	            this.match(MySqlParser.LEVEL);
	            this.state = 3806;
	            this.transactionLevel();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3807;
	            this.match(MySqlParser.READ);
	            this.state = 3808;
	            this.match(MySqlParser.WRITE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3809;
	            this.match(MySqlParser.READ);
	            this.state = 3810;
	            this.match(MySqlParser.ONLY);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionLevel() {
	    let localctx = new TransactionLevelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, MySqlParser.RULE_transactionLevel);
	    try {
	        this.state = 3820;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,559,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3813;
	            this.match(MySqlParser.REPEATABLE);
	            this.state = 3814;
	            this.match(MySqlParser.READ);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3815;
	            this.match(MySqlParser.READ);
	            this.state = 3816;
	            this.match(MySqlParser.COMMITTED);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3817;
	            this.match(MySqlParser.READ);
	            this.state = 3818;
	            this.match(MySqlParser.UNCOMMITTED);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3819;
	            this.match(MySqlParser.SERIALIZABLE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	changeMaster() {
	    let localctx = new ChangeMasterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, MySqlParser.RULE_changeMaster);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3822;
	        this.match(MySqlParser.CHANGE);
	        this.state = 3823;
	        this.match(MySqlParser.MASTER);
	        this.state = 3824;
	        this.match(MySqlParser.TO);
	        this.state = 3825;
	        this.masterOption();
	        this.state = 3830;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 3826;
	            this.match(MySqlParser.COMMA);
	            this.state = 3827;
	            this.masterOption();
	            this.state = 3832;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3834;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.FOR) {
	            this.state = 3833;
	            this.channelOption();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	changeReplicationFilter() {
	    let localctx = new ChangeReplicationFilterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, MySqlParser.RULE_changeReplicationFilter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3836;
	        this.match(MySqlParser.CHANGE);
	        this.state = 3837;
	        this.match(MySqlParser.REPLICATION);
	        this.state = 3838;
	        this.match(MySqlParser.FILTER);
	        this.state = 3839;
	        this.replicationFilter();
	        this.state = 3844;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 3840;
	            this.match(MySqlParser.COMMA);
	            this.state = 3841;
	            this.replicationFilter();
	            this.state = 3846;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	purgeBinaryLogs() {
	    let localctx = new PurgeBinaryLogsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, MySqlParser.RULE_purgeBinaryLogs);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3847;
	        this.match(MySqlParser.PURGE);
	        this.state = 3848;
	        localctx.purgeFormat = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.BINARY || _la===MySqlParser.MASTER)) {
	            localctx.purgeFormat = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3849;
	        this.match(MySqlParser.LOGS);
	        this.state = 3854;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.TO:
	            this.state = 3850;
	            this.match(MySqlParser.TO);
	            this.state = 3851;
	            localctx.fileName = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.BEFORE:
	            this.state = 3852;
	            this.match(MySqlParser.BEFORE);
	            this.state = 3853;
	            localctx.timeValue = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resetMaster() {
	    let localctx = new ResetMasterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, MySqlParser.RULE_resetMaster);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3856;
	        this.match(MySqlParser.RESET);
	        this.state = 3857;
	        this.match(MySqlParser.MASTER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resetSlave() {
	    let localctx = new ResetSlaveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, MySqlParser.RULE_resetSlave);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3859;
	        this.match(MySqlParser.RESET);
	        this.state = 3860;
	        this.match(MySqlParser.SLAVE);
	        this.state = 3862;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.ALL) {
	            this.state = 3861;
	            this.match(MySqlParser.ALL);
	        }

	        this.state = 3865;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.FOR) {
	            this.state = 3864;
	            this.channelOption();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	startSlave() {
	    let localctx = new StartSlaveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, MySqlParser.RULE_startSlave);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3867;
	        this.match(MySqlParser.START);
	        this.state = 3868;
	        this.match(MySqlParser.SLAVE);
	        this.state = 3877;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.IO_THREAD || _la===MySqlParser.SQL_THREAD) {
	            this.state = 3869;
	            this.threadType();
	            this.state = 3874;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 3870;
	                this.match(MySqlParser.COMMA);
	                this.state = 3871;
	                this.threadType();
	                this.state = 3876;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 3881;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.UNTIL) {
	            this.state = 3879;
	            this.match(MySqlParser.UNTIL);
	            this.state = 3880;
	            this.untilOption();
	        }

	        this.state = 3886;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.DEFAULT_AUTH || _la===MySqlParser.PASSWORD || _la===MySqlParser.PLUGIN_DIR || _la===MySqlParser.USER) {
	            this.state = 3883;
	            this.connectionOption();
	            this.state = 3888;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3890;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.FOR) {
	            this.state = 3889;
	            this.channelOption();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stopSlave() {
	    let localctx = new StopSlaveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, MySqlParser.RULE_stopSlave);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3892;
	        this.match(MySqlParser.STOP);
	        this.state = 3893;
	        this.match(MySqlParser.SLAVE);
	        this.state = 3902;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.IO_THREAD || _la===MySqlParser.SQL_THREAD) {
	            this.state = 3894;
	            this.threadType();
	            this.state = 3899;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 3895;
	                this.match(MySqlParser.COMMA);
	                this.state = 3896;
	                this.threadType();
	                this.state = 3901;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	startGroupReplication() {
	    let localctx = new StartGroupReplicationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, MySqlParser.RULE_startGroupReplication);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3904;
	        this.match(MySqlParser.START);
	        this.state = 3905;
	        this.match(MySqlParser.GROUP_REPLICATION);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stopGroupReplication() {
	    let localctx = new StopGroupReplicationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, MySqlParser.RULE_stopGroupReplication);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3907;
	        this.match(MySqlParser.STOP);
	        this.state = 3908;
	        this.match(MySqlParser.GROUP_REPLICATION);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	masterOption() {
	    let localctx = new MasterOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, MySqlParser.RULE_masterOption);
	    var _la = 0; // Token type
	    try {
	        this.state = 3939;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.MASTER_BIND:
	        case MySqlParser.MASTER_HOST:
	        case MySqlParser.MASTER_LOG_FILE:
	        case MySqlParser.MASTER_PASSWORD:
	        case MySqlParser.MASTER_SSL_CA:
	        case MySqlParser.MASTER_SSL_CAPATH:
	        case MySqlParser.MASTER_SSL_CERT:
	        case MySqlParser.MASTER_SSL_CIPHER:
	        case MySqlParser.MASTER_SSL_CRL:
	        case MySqlParser.MASTER_SSL_CRLPATH:
	        case MySqlParser.MASTER_SSL_KEY:
	        case MySqlParser.MASTER_TLS_VERSION:
	        case MySqlParser.MASTER_USER:
	        case MySqlParser.RELAY_LOG_FILE:
	            localctx = new MasterStringOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3910;
	            this.stringMasterOption();
	            this.state = 3911;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 3912;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.MASTER_CONNECT_RETRY:
	        case MySqlParser.MASTER_DELAY:
	        case MySqlParser.MASTER_LOG_POS:
	        case MySqlParser.MASTER_PORT:
	        case MySqlParser.MASTER_RETRY_COUNT:
	        case MySqlParser.RELAY_LOG_POS:
	            localctx = new MasterDecimalOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3914;
	            this.decimalMasterOption();
	            this.state = 3915;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 3916;
	            this.decimalLiteral();
	            break;
	        case MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT:
	        case MySqlParser.MASTER_AUTO_POSITION:
	        case MySqlParser.MASTER_SSL:
	            localctx = new MasterBoolOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3918;
	            this.boolMasterOption();
	            this.state = 3919;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 3920;
	            localctx.boolVal = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.ZERO_DECIMAL || _la===MySqlParser.ONE_DECIMAL)) {
	                localctx.boolVal = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case MySqlParser.MASTER_HEARTBEAT_PERIOD:
	            localctx = new MasterRealOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3922;
	            this.match(MySqlParser.MASTER_HEARTBEAT_PERIOD);
	            this.state = 3923;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 3924;
	            this.match(MySqlParser.REAL_LITERAL);
	            break;
	        case MySqlParser.IGNORE_SERVER_IDS:
	            localctx = new MasterUidListOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3925;
	            this.match(MySqlParser.IGNORE_SERVER_IDS);
	            this.state = 3926;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 3927;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3936;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySqlParser.CURRENT - 32)) | (1 << (MySqlParser.DATABASE - 32)) | (1 << (MySqlParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySqlParser.LEFT || _la===MySqlParser.NUMBER || _la===MySqlParser.RIGHT || _la===MySqlParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.TIMESTAMP - 199)) | (1 << (MySqlParser.DATETIME - 199)) | (1 << (MySqlParser.YEAR - 199)) | (1 << (MySqlParser.TEXT - 199)) | (1 << (MySqlParser.ENUM - 199)) | (1 << (MySqlParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.JSON_VALID - 233)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySqlParser.AVG - 233)) | (1 << (MySqlParser.BIT_AND - 233)) | (1 << (MySqlParser.BIT_OR - 233)) | (1 << (MySqlParser.BIT_XOR - 233)) | (1 << (MySqlParser.COUNT - 233)) | (1 << (MySqlParser.GROUP_CONCAT - 233)) | (1 << (MySqlParser.MAX - 233)) | (1 << (MySqlParser.MIN - 233)) | (1 << (MySqlParser.STD - 233)) | (1 << (MySqlParser.STDDEV - 233)) | (1 << (MySqlParser.STDDEV_POP - 233)) | (1 << (MySqlParser.STDDEV_SAMP - 233)) | (1 << (MySqlParser.SUM - 233)) | (1 << (MySqlParser.VAR_POP - 233)) | (1 << (MySqlParser.VAR_SAMP - 233)) | (1 << (MySqlParser.VARIANCE - 233)) | (1 << (MySqlParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySqlParser.ACCOUNT - 270)) | (1 << (MySqlParser.ACTION - 270)) | (1 << (MySqlParser.AFTER - 270)) | (1 << (MySqlParser.AGGREGATE - 270)) | (1 << (MySqlParser.ALGORITHM - 270)) | (1 << (MySqlParser.ANY - 270)) | (1 << (MySqlParser.AT - 270)) | (1 << (MySqlParser.AUTHORS - 270)) | (1 << (MySqlParser.AUTOCOMMIT - 270)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySqlParser.AUTO_INCREMENT - 270)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 270)) | (1 << (MySqlParser.BEGIN - 270)) | (1 << (MySqlParser.BINLOG - 270)) | (1 << (MySqlParser.BIT - 270)) | (1 << (MySqlParser.BLOCK - 270)) | (1 << (MySqlParser.BOOL - 270)) | (1 << (MySqlParser.BOOLEAN - 270)) | (1 << (MySqlParser.BTREE - 270)) | (1 << (MySqlParser.CACHE - 270)) | (1 << (MySqlParser.CASCADED - 270)) | (1 << (MySqlParser.CHAIN - 270)) | (1 << (MySqlParser.CHANGED - 270)) | (1 << (MySqlParser.CHANNEL - 270)) | (1 << (MySqlParser.CHECKSUM - 270)) | (1 << (MySqlParser.PAGE_CHECKSUM - 270)) | (1 << (MySqlParser.CIPHER - 270)) | (1 << (MySqlParser.CLASS_ORIGIN - 270)) | (1 << (MySqlParser.CLIENT - 270)) | (1 << (MySqlParser.CLOSE - 270)) | (1 << (MySqlParser.COALESCE - 270)) | (1 << (MySqlParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySqlParser.COLUMNS - 302)) | (1 << (MySqlParser.COLUMN_FORMAT - 302)) | (1 << (MySqlParser.COLUMN_NAME - 302)) | (1 << (MySqlParser.COMMENT - 302)) | (1 << (MySqlParser.COMMIT - 302)) | (1 << (MySqlParser.COMPACT - 302)) | (1 << (MySqlParser.COMPLETION - 302)) | (1 << (MySqlParser.COMPRESSED - 302)) | (1 << (MySqlParser.COMPRESSION - 302)) | (1 << (MySqlParser.CONCURRENT - 302)) | (1 << (MySqlParser.CONNECTION - 302)) | (1 << (MySqlParser.CONSISTENT - 302)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySqlParser.CONSTRAINT_NAME - 302)) | (1 << (MySqlParser.CONTAINS - 302)) | (1 << (MySqlParser.CONTEXT - 302)) | (1 << (MySqlParser.CONTRIBUTORS - 302)) | (1 << (MySqlParser.COPY - 302)) | (1 << (MySqlParser.CPU - 302)) | (1 << (MySqlParser.CURSOR_NAME - 302)) | (1 << (MySqlParser.DATA - 302)) | (1 << (MySqlParser.DATAFILE - 302)) | (1 << (MySqlParser.DEALLOCATE - 302)) | (1 << (MySqlParser.DEFAULT_AUTH - 302)) | (1 << (MySqlParser.DEFINER - 302)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 302)) | (1 << (MySqlParser.DES_KEY_FILE - 302)) | (1 << (MySqlParser.DIRECTORY - 302)) | (1 << (MySqlParser.DISABLE - 302)) | (1 << (MySqlParser.DISCARD - 302)) | (1 << (MySqlParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySqlParser.DO - 334)) | (1 << (MySqlParser.DUMPFILE - 334)) | (1 << (MySqlParser.DUPLICATE - 334)) | (1 << (MySqlParser.DYNAMIC - 334)) | (1 << (MySqlParser.ENABLE - 334)) | (1 << (MySqlParser.ENCRYPTION - 334)) | (1 << (MySqlParser.END - 334)) | (1 << (MySqlParser.ENDS - 334)) | (1 << (MySqlParser.ENGINE - 334)) | (1 << (MySqlParser.ENGINES - 334)) | (1 << (MySqlParser.ERROR - 334)) | (1 << (MySqlParser.ERRORS - 334)) | (1 << (MySqlParser.ESCAPE - 334)) | (1 << (MySqlParser.EVEN - 334)) | (1 << (MySqlParser.EVENT - 334)) | (1 << (MySqlParser.EVENTS - 334)) | (1 << (MySqlParser.EVERY - 334)) | (1 << (MySqlParser.EXCHANGE - 334)) | (1 << (MySqlParser.EXCLUSIVE - 334)) | (1 << (MySqlParser.EXPIRE - 334)) | (1 << (MySqlParser.EXPORT - 334)) | (1 << (MySqlParser.EXTENDED - 334)) | (1 << (MySqlParser.EXTENT_SIZE - 334)) | (1 << (MySqlParser.FAST - 334)) | (1 << (MySqlParser.FAULTS - 334)) | (1 << (MySqlParser.FIELDS - 334)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySqlParser.FILTER - 334)) | (1 << (MySqlParser.FIRST - 334)) | (1 << (MySqlParser.FIXED - 334)) | (1 << (MySqlParser.FLUSH - 334)) | (1 << (MySqlParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySqlParser.FOUND - 366)) | (1 << (MySqlParser.FULL - 366)) | (1 << (MySqlParser.FUNCTION - 366)) | (1 << (MySqlParser.GENERAL - 366)) | (1 << (MySqlParser.GLOBAL - 366)) | (1 << (MySqlParser.GRANTS - 366)) | (1 << (MySqlParser.GROUP_REPLICATION - 366)) | (1 << (MySqlParser.HANDLER - 366)) | (1 << (MySqlParser.HASH - 366)) | (1 << (MySqlParser.HELP - 366)) | (1 << (MySqlParser.HOST - 366)) | (1 << (MySqlParser.HOSTS - 366)) | (1 << (MySqlParser.IDENTIFIED - 366)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySqlParser.IMPORT - 366)) | (1 << (MySqlParser.INDEXES - 366)) | (1 << (MySqlParser.INITIAL_SIZE - 366)) | (1 << (MySqlParser.INPLACE - 366)) | (1 << (MySqlParser.INSERT_METHOD - 366)) | (1 << (MySqlParser.INSTALL - 366)) | (1 << (MySqlParser.INSTANCE - 366)) | (1 << (MySqlParser.INVISIBLE - 366)) | (1 << (MySqlParser.INVOKER - 366)) | (1 << (MySqlParser.IO - 366)) | (1 << (MySqlParser.IO_THREAD - 366)) | (1 << (MySqlParser.IPC - 366)) | (1 << (MySqlParser.ISOLATION - 366)) | (1 << (MySqlParser.ISSUER - 366)) | (1 << (MySqlParser.JSON - 366)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySqlParser.LANGUAGE - 366)) | (1 << (MySqlParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.LEAVES - 398)) | (1 << (MySqlParser.LESS - 398)) | (1 << (MySqlParser.LEVEL - 398)) | (1 << (MySqlParser.LIST - 398)) | (1 << (MySqlParser.LOCAL - 398)) | (1 << (MySqlParser.LOGFILE - 398)) | (1 << (MySqlParser.LOGS - 398)) | (1 << (MySqlParser.MASTER - 398)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySqlParser.MASTER_DELAY - 398)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySqlParser.MASTER_HOST - 398)) | (1 << (MySqlParser.MASTER_LOG_FILE - 398)) | (1 << (MySqlParser.MASTER_LOG_POS - 398)) | (1 << (MySqlParser.MASTER_PASSWORD - 398)) | (1 << (MySqlParser.MASTER_PORT - 398)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySqlParser.MASTER_SSL - 398)) | (1 << (MySqlParser.MASTER_SSL_CA - 398)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_CERT - 398)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySqlParser.MASTER_SSL_CRL - 398)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_KEY - 398)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 398)) | (1 << (MySqlParser.MASTER_USER - 398)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySqlParser.MEDIUM - 430)) | (1 << (MySqlParser.MEMBER - 430)) | (1 << (MySqlParser.MERGE - 430)) | (1 << (MySqlParser.MESSAGE_TEXT - 430)) | (1 << (MySqlParser.MID - 430)) | (1 << (MySqlParser.MIGRATE - 430)) | (1 << (MySqlParser.MIN_ROWS - 430)) | (1 << (MySqlParser.MODE - 430)) | (1 << (MySqlParser.MODIFY - 430)) | (1 << (MySqlParser.MUTEX - 430)) | (1 << (MySqlParser.MYSQL - 430)) | (1 << (MySqlParser.MYSQL_ERRNO - 430)) | (1 << (MySqlParser.NAME - 430)) | (1 << (MySqlParser.NAMES - 430)) | (1 << (MySqlParser.NCHAR - 430)) | (1 << (MySqlParser.NEVER - 430)) | (1 << (MySqlParser.NEXT - 430)) | (1 << (MySqlParser.NO - 430)) | (1 << (MySqlParser.NODEGROUP - 430)) | (1 << (MySqlParser.NONE - 430)) | (1 << (MySqlParser.OFFLINE - 430)) | (1 << (MySqlParser.OFFSET - 430)) | (1 << (MySqlParser.OF - 430)) | (1 << (MySqlParser.OJ - 430)) | (1 << (MySqlParser.OLD_PASSWORD - 430)) | (1 << (MySqlParser.ONE - 430)) | (1 << (MySqlParser.ONLINE - 430)) | (1 << (MySqlParser.ONLY - 430)) | (1 << (MySqlParser.OPEN - 430)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySqlParser.OPTIONS - 462)) | (1 << (MySqlParser.OWNER - 462)) | (1 << (MySqlParser.PACK_KEYS - 462)) | (1 << (MySqlParser.PAGE - 462)) | (1 << (MySqlParser.PARSER - 462)) | (1 << (MySqlParser.PARTIAL - 462)) | (1 << (MySqlParser.PARTITIONING - 462)) | (1 << (MySqlParser.PARTITIONS - 462)) | (1 << (MySqlParser.PASSWORD - 462)) | (1 << (MySqlParser.PHASE - 462)) | (1 << (MySqlParser.PLUGIN - 462)) | (1 << (MySqlParser.PLUGIN_DIR - 462)) | (1 << (MySqlParser.PLUGINS - 462)) | (1 << (MySqlParser.PORT - 462)) | (1 << (MySqlParser.PRECEDES - 462)) | (1 << (MySqlParser.PREPARE - 462)) | (1 << (MySqlParser.PRESERVE - 462)) | (1 << (MySqlParser.PREV - 462)) | (1 << (MySqlParser.PROCESSLIST - 462)) | (1 << (MySqlParser.PROFILE - 462)) | (1 << (MySqlParser.PROFILES - 462)) | (1 << (MySqlParser.PROXY - 462)) | (1 << (MySqlParser.QUERY - 462)) | (1 << (MySqlParser.QUICK - 462)) | (1 << (MySqlParser.REBUILD - 462)) | (1 << (MySqlParser.RECOVER - 462)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySqlParser.REDUNDANT - 462)) | (1 << (MySqlParser.RELAY - 462)) | (1 << (MySqlParser.RELAY_LOG_FILE - 462)) | (1 << (MySqlParser.RELAY_LOG_POS - 462)) | (1 << (MySqlParser.RELAYLOG - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySqlParser.REMOVE - 494)) | (1 << (MySqlParser.REORGANIZE - 494)) | (1 << (MySqlParser.REPAIR - 494)) | (1 << (MySqlParser.REPLICATE_DO_DB - 494)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATION - 494)) | (1 << (MySqlParser.RESET - 494)) | (1 << (MySqlParser.RESUME - 494)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 494)) | (1 << (MySqlParser.RETURNS - 494)) | (1 << (MySqlParser.ROLE - 494)) | (1 << (MySqlParser.ROLLBACK - 494)) | (1 << (MySqlParser.ROLLUP - 494)) | (1 << (MySqlParser.ROTATE - 494)) | (1 << (MySqlParser.ROW - 494)) | (1 << (MySqlParser.ROWS - 494)) | (1 << (MySqlParser.ROW_FORMAT - 494)) | (1 << (MySqlParser.SAVEPOINT - 494)) | (1 << (MySqlParser.SCHEDULE - 494)) | (1 << (MySqlParser.SECURITY - 494)) | (1 << (MySqlParser.SERVER - 494)) | (1 << (MySqlParser.SESSION - 494)) | (1 << (MySqlParser.SHARE - 494)) | (1 << (MySqlParser.SHARED - 494)) | (1 << (MySqlParser.SIGNED - 494)) | (1 << (MySqlParser.SIMPLE - 494)) | (1 << (MySqlParser.SLAVE - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySqlParser.SLOW - 526)) | (1 << (MySqlParser.SNAPSHOT - 526)) | (1 << (MySqlParser.SOCKET - 526)) | (1 << (MySqlParser.SOME - 526)) | (1 << (MySqlParser.SONAME - 526)) | (1 << (MySqlParser.SOUNDS - 526)) | (1 << (MySqlParser.SOURCE - 526)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySqlParser.SQL_CACHE - 526)) | (1 << (MySqlParser.SQL_NO_CACHE - 526)) | (1 << (MySqlParser.SQL_THREAD - 526)) | (1 << (MySqlParser.START - 526)) | (1 << (MySqlParser.STARTS - 526)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 526)) | (1 << (MySqlParser.STATS_PERSISTENT - 526)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySqlParser.STATUS - 526)) | (1 << (MySqlParser.STOP - 526)) | (1 << (MySqlParser.STORAGE - 526)) | (1 << (MySqlParser.STRING - 526)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySqlParser.SUBJECT - 526)) | (1 << (MySqlParser.SUBPARTITION - 526)) | (1 << (MySqlParser.SUBPARTITIONS - 526)) | (1 << (MySqlParser.SUSPEND - 526)) | (1 << (MySqlParser.SWAPS - 526)) | (1 << (MySqlParser.SWITCHES - 526)) | (1 << (MySqlParser.TABLE_NAME - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySqlParser.TABLESPACE - 558)) | (1 << (MySqlParser.TEMPORARY - 558)) | (1 << (MySqlParser.TEMPTABLE - 558)) | (1 << (MySqlParser.THAN - 558)) | (1 << (MySqlParser.TRADITIONAL - 558)) | (1 << (MySqlParser.TRANSACTION - 558)) | (1 << (MySqlParser.TRANSACTIONAL - 558)) | (1 << (MySqlParser.TRIGGERS - 558)) | (1 << (MySqlParser.TRUNCATE - 558)) | (1 << (MySqlParser.UNDEFINED - 558)) | (1 << (MySqlParser.UNDOFILE - 558)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySqlParser.UNINSTALL - 558)) | (1 << (MySqlParser.UNKNOWN - 558)) | (1 << (MySqlParser.UNTIL - 558)) | (1 << (MySqlParser.UPGRADE - 558)) | (1 << (MySqlParser.USER - 558)) | (1 << (MySqlParser.USE_FRM - 558)) | (1 << (MySqlParser.USER_RESOURCES - 558)) | (1 << (MySqlParser.VALIDATION - 558)) | (1 << (MySqlParser.VALUE - 558)) | (1 << (MySqlParser.VARIABLES - 558)) | (1 << (MySqlParser.VIEW - 558)) | (1 << (MySqlParser.VISIBLE - 558)) | (1 << (MySqlParser.WAIT - 558)) | (1 << (MySqlParser.WARNINGS - 558)) | (1 << (MySqlParser.WITHOUT - 558)) | (1 << (MySqlParser.WORK - 558)) | (1 << (MySqlParser.WRAPPER - 558)) | (1 << (MySqlParser.X509 - 558)) | (1 << (MySqlParser.XA - 558)))) !== 0) || ((((_la - 590)) & ~0x1f) == 0 && ((1 << (_la - 590)) & ((1 << (MySqlParser.XML - 590)) | (1 << (MySqlParser.INTERNAL - 590)) | (1 << (MySqlParser.QUARTER - 590)) | (1 << (MySqlParser.MONTH - 590)) | (1 << (MySqlParser.DAY - 590)) | (1 << (MySqlParser.HOUR - 590)) | (1 << (MySqlParser.MINUTE - 590)) | (1 << (MySqlParser.WEEK - 590)) | (1 << (MySqlParser.SECOND - 590)) | (1 << (MySqlParser.MICROSECOND - 590)) | (1 << (MySqlParser.TABLES - 590)) | (1 << (MySqlParser.ROUTINE - 590)) | (1 << (MySqlParser.EXECUTE - 590)) | (1 << (MySqlParser.FILE - 590)) | (1 << (MySqlParser.PROCESS - 590)) | (1 << (MySqlParser.RELOAD - 590)) | (1 << (MySqlParser.SHUTDOWN - 590)) | (1 << (MySqlParser.SUPER - 590)) | (1 << (MySqlParser.PRIVILEGES - 590)) | (1 << (MySqlParser.AUDIT_ADMIN - 590)) | (1 << (MySqlParser.BACKUP_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 590)) | (1 << (MySqlParser.CLONE_ADMIN - 590)) | (1 << (MySqlParser.CONNECTION_ADMIN - 590)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 590)) | (1 << (MySqlParser.FIREWALL_ADMIN - 590)))) !== 0) || ((((_la - 622)) & ~0x1f) == 0 && ((1 << (_la - 622)) & ((1 << (MySqlParser.FIREWALL_USER - 622)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 622)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 622)) | (1 << (MySqlParser.NDB_STORED_USER - 622)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.REPLICATION_APPLIER - 622)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 622)) | (1 << (MySqlParser.ROLE_ADMIN - 622)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.SET_USER_ID - 622)) | (1 << (MySqlParser.SHOW_ROUTINE - 622)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 622)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 622)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 622)) | (1 << (MySqlParser.ARMSCII8 - 622)) | (1 << (MySqlParser.ASCII - 622)) | (1 << (MySqlParser.BIG5 - 622)) | (1 << (MySqlParser.CP1250 - 622)) | (1 << (MySqlParser.CP1251 - 622)) | (1 << (MySqlParser.CP1256 - 622)) | (1 << (MySqlParser.CP1257 - 622)) | (1 << (MySqlParser.CP850 - 622)) | (1 << (MySqlParser.CP852 - 622)) | (1 << (MySqlParser.CP866 - 622)) | (1 << (MySqlParser.CP932 - 622)) | (1 << (MySqlParser.DEC8 - 622)) | (1 << (MySqlParser.EUCJPMS - 622)) | (1 << (MySqlParser.EUCKR - 622)) | (1 << (MySqlParser.GB2312 - 622)))) !== 0) || ((((_la - 654)) & ~0x1f) == 0 && ((1 << (_la - 654)) & ((1 << (MySqlParser.GBK - 654)) | (1 << (MySqlParser.GEOSTD8 - 654)) | (1 << (MySqlParser.GREEK - 654)) | (1 << (MySqlParser.HEBREW - 654)) | (1 << (MySqlParser.HP8 - 654)) | (1 << (MySqlParser.KEYBCS2 - 654)) | (1 << (MySqlParser.KOI8R - 654)) | (1 << (MySqlParser.KOI8U - 654)) | (1 << (MySqlParser.LATIN1 - 654)) | (1 << (MySqlParser.LATIN2 - 654)) | (1 << (MySqlParser.LATIN5 - 654)) | (1 << (MySqlParser.LATIN7 - 654)) | (1 << (MySqlParser.MACCE - 654)) | (1 << (MySqlParser.MACROMAN - 654)) | (1 << (MySqlParser.SJIS - 654)) | (1 << (MySqlParser.SWE7 - 654)) | (1 << (MySqlParser.TIS620 - 654)) | (1 << (MySqlParser.UCS2 - 654)) | (1 << (MySqlParser.UJIS - 654)) | (1 << (MySqlParser.UTF16 - 654)) | (1 << (MySqlParser.UTF16LE - 654)) | (1 << (MySqlParser.UTF32 - 654)) | (1 << (MySqlParser.UTF8 - 654)) | (1 << (MySqlParser.UTF8MB3 - 654)) | (1 << (MySqlParser.UTF8MB4 - 654)) | (1 << (MySqlParser.ARCHIVE - 654)) | (1 << (MySqlParser.BLACKHOLE - 654)) | (1 << (MySqlParser.CSV - 654)) | (1 << (MySqlParser.FEDERATED - 654)) | (1 << (MySqlParser.INNODB - 654)) | (1 << (MySqlParser.MEMORY - 654)) | (1 << (MySqlParser.MRG_MYISAM - 654)))) !== 0) || ((((_la - 686)) & ~0x1f) == 0 && ((1 << (_la - 686)) & ((1 << (MySqlParser.MYISAM - 686)) | (1 << (MySqlParser.NDB - 686)) | (1 << (MySqlParser.NDBCLUSTER - 686)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 686)) | (1 << (MySqlParser.TOKUDB - 686)) | (1 << (MySqlParser.REPEATABLE - 686)) | (1 << (MySqlParser.COMMITTED - 686)) | (1 << (MySqlParser.UNCOMMITTED - 686)) | (1 << (MySqlParser.SERIALIZABLE - 686)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 686)) | (1 << (MySqlParser.LINESTRING - 686)) | (1 << (MySqlParser.MULTILINESTRING - 686)) | (1 << (MySqlParser.MULTIPOINT - 686)) | (1 << (MySqlParser.MULTIPOLYGON - 686)) | (1 << (MySqlParser.POINT - 686)) | (1 << (MySqlParser.POLYGON - 686)) | (1 << (MySqlParser.ABS - 686)) | (1 << (MySqlParser.ACOS - 686)) | (1 << (MySqlParser.ADDDATE - 686)) | (1 << (MySqlParser.ADDTIME - 686)) | (1 << (MySqlParser.AES_DECRYPT - 686)) | (1 << (MySqlParser.AES_ENCRYPT - 686)) | (1 << (MySqlParser.AREA - 686)) | (1 << (MySqlParser.ASBINARY - 686)) | (1 << (MySqlParser.ASIN - 686)) | (1 << (MySqlParser.ASTEXT - 686)) | (1 << (MySqlParser.ASWKB - 686)) | (1 << (MySqlParser.ASWKT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 686)))) !== 0) || ((((_la - 718)) & ~0x1f) == 0 && ((1 << (_la - 718)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 718)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 718)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 718)) | (1 << (MySqlParser.ATAN - 718)) | (1 << (MySqlParser.ATAN2 - 718)) | (1 << (MySqlParser.BENCHMARK - 718)) | (1 << (MySqlParser.BIN - 718)) | (1 << (MySqlParser.BIT_COUNT - 718)) | (1 << (MySqlParser.BIT_LENGTH - 718)) | (1 << (MySqlParser.BUFFER - 718)) | (1 << (MySqlParser.CATALOG_NAME - 718)) | (1 << (MySqlParser.CEIL - 718)) | (1 << (MySqlParser.CEILING - 718)) | (1 << (MySqlParser.CENTROID - 718)) | (1 << (MySqlParser.CHARACTER_LENGTH - 718)) | (1 << (MySqlParser.CHARSET - 718)) | (1 << (MySqlParser.CHAR_LENGTH - 718)) | (1 << (MySqlParser.COERCIBILITY - 718)) | (1 << (MySqlParser.COLLATION - 718)) | (1 << (MySqlParser.COMPRESS - 718)) | (1 << (MySqlParser.CONCAT - 718)) | (1 << (MySqlParser.CONCAT_WS - 718)) | (1 << (MySqlParser.CONNECTION_ID - 718)) | (1 << (MySqlParser.CONV - 718)) | (1 << (MySqlParser.CONVERT_TZ - 718)) | (1 << (MySqlParser.COS - 718)) | (1 << (MySqlParser.COT - 718)) | (1 << (MySqlParser.CRC32 - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 718)) | (1 << (MySqlParser.CREATE_DIGEST - 718)))) !== 0) || ((((_la - 750)) & ~0x1f) == 0 && ((1 << (_la - 750)) & ((1 << (MySqlParser.CROSSES - 750)) | (1 << (MySqlParser.DATEDIFF - 750)) | (1 << (MySqlParser.DATE_FORMAT - 750)) | (1 << (MySqlParser.DAYNAME - 750)) | (1 << (MySqlParser.DAYOFMONTH - 750)) | (1 << (MySqlParser.DAYOFWEEK - 750)) | (1 << (MySqlParser.DAYOFYEAR - 750)) | (1 << (MySqlParser.DECODE - 750)) | (1 << (MySqlParser.DEGREES - 750)) | (1 << (MySqlParser.DES_DECRYPT - 750)) | (1 << (MySqlParser.DES_ENCRYPT - 750)) | (1 << (MySqlParser.DIMENSION - 750)) | (1 << (MySqlParser.DISJOINT - 750)) | (1 << (MySqlParser.ELT - 750)) | (1 << (MySqlParser.ENCODE - 750)) | (1 << (MySqlParser.ENCRYPT - 750)) | (1 << (MySqlParser.ENDPOINT - 750)) | (1 << (MySqlParser.ENVELOPE - 750)) | (1 << (MySqlParser.EQUALS - 750)) | (1 << (MySqlParser.EXP - 750)) | (1 << (MySqlParser.EXPORT_SET - 750)) | (1 << (MySqlParser.EXTERIORRING - 750)) | (1 << (MySqlParser.EXTRACTVALUE - 750)) | (1 << (MySqlParser.FIELD - 750)) | (1 << (MySqlParser.FIND_IN_SET - 750)) | (1 << (MySqlParser.FLOOR - 750)) | (1 << (MySqlParser.FORMAT - 750)) | (1 << (MySqlParser.FOUND_ROWS - 750)) | (1 << (MySqlParser.FROM_BASE64 - 750)) | (1 << (MySqlParser.FROM_DAYS - 750)) | (1 << (MySqlParser.FROM_UNIXTIME - 750)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 750)))) !== 0) || ((((_la - 782)) & ~0x1f) == 0 && ((1 << (_la - 782)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYN - 782)) | (1 << (MySqlParser.GEOMETRYTYPE - 782)) | (1 << (MySqlParser.GEOMFROMTEXT - 782)) | (1 << (MySqlParser.GEOMFROMWKB - 782)) | (1 << (MySqlParser.GET_FORMAT - 782)) | (1 << (MySqlParser.GET_LOCK - 782)) | (1 << (MySqlParser.GLENGTH - 782)) | (1 << (MySqlParser.GREATEST - 782)) | (1 << (MySqlParser.GTID_SUBSET - 782)) | (1 << (MySqlParser.GTID_SUBTRACT - 782)) | (1 << (MySqlParser.HEX - 782)) | (1 << (MySqlParser.IFNULL - 782)) | (1 << (MySqlParser.INET6_ATON - 782)) | (1 << (MySqlParser.INET6_NTOA - 782)) | (1 << (MySqlParser.INET_ATON - 782)) | (1 << (MySqlParser.INET_NTOA - 782)) | (1 << (MySqlParser.INSTR - 782)) | (1 << (MySqlParser.INTERIORRINGN - 782)) | (1 << (MySqlParser.INTERSECTS - 782)) | (1 << (MySqlParser.ISCLOSED - 782)) | (1 << (MySqlParser.ISEMPTY - 782)) | (1 << (MySqlParser.ISNULL - 782)) | (1 << (MySqlParser.ISSIMPLE - 782)) | (1 << (MySqlParser.IS_FREE_LOCK - 782)) | (1 << (MySqlParser.IS_IPV4 - 782)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 782)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 782)))) !== 0) || ((((_la - 814)) & ~0x1f) == 0 && ((1 << (_la - 814)) & ((1 << (MySqlParser.IS_IPV6 - 814)) | (1 << (MySqlParser.IS_USED_LOCK - 814)) | (1 << (MySqlParser.LAST_INSERT_ID - 814)) | (1 << (MySqlParser.LCASE - 814)) | (1 << (MySqlParser.LEAST - 814)) | (1 << (MySqlParser.LENGTH - 814)) | (1 << (MySqlParser.LINEFROMTEXT - 814)) | (1 << (MySqlParser.LINEFROMWKB - 814)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 814)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 814)) | (1 << (MySqlParser.LN - 814)) | (1 << (MySqlParser.LOAD_FILE - 814)) | (1 << (MySqlParser.LOCATE - 814)) | (1 << (MySqlParser.LOG - 814)) | (1 << (MySqlParser.LOG10 - 814)) | (1 << (MySqlParser.LOG2 - 814)) | (1 << (MySqlParser.LOWER - 814)) | (1 << (MySqlParser.LPAD - 814)) | (1 << (MySqlParser.LTRIM - 814)) | (1 << (MySqlParser.MAKEDATE - 814)) | (1 << (MySqlParser.MAKETIME - 814)) | (1 << (MySqlParser.MAKE_SET - 814)) | (1 << (MySqlParser.MASTER_POS_WAIT - 814)) | (1 << (MySqlParser.MBRCONTAINS - 814)) | (1 << (MySqlParser.MBRDISJOINT - 814)) | (1 << (MySqlParser.MBREQUAL - 814)) | (1 << (MySqlParser.MBRINTERSECTS - 814)) | (1 << (MySqlParser.MBROVERLAPS - 814)) | (1 << (MySqlParser.MBRTOUCHES - 814)) | (1 << (MySqlParser.MBRWITHIN - 814)) | (1 << (MySqlParser.MD5 - 814)) | (1 << (MySqlParser.MLINEFROMTEXT - 814)))) !== 0) || ((((_la - 846)) & ~0x1f) == 0 && ((1 << (_la - 846)) & ((1 << (MySqlParser.MLINEFROMWKB - 846)) | (1 << (MySqlParser.MONTHNAME - 846)) | (1 << (MySqlParser.MPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MPOINTFROMWKB - 846)) | (1 << (MySqlParser.MPOLYFROMTEXT - 846)) | (1 << (MySqlParser.MPOLYFROMWKB - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 846)) | (1 << (MySqlParser.NAME_CONST - 846)) | (1 << (MySqlParser.NULLIF - 846)) | (1 << (MySqlParser.NUMGEOMETRIES - 846)) | (1 << (MySqlParser.NUMINTERIORRINGS - 846)) | (1 << (MySqlParser.NUMPOINTS - 846)) | (1 << (MySqlParser.OCT - 846)) | (1 << (MySqlParser.OCTET_LENGTH - 846)) | (1 << (MySqlParser.ORD - 846)) | (1 << (MySqlParser.OVERLAPS - 846)) | (1 << (MySqlParser.PERIOD_ADD - 846)) | (1 << (MySqlParser.PERIOD_DIFF - 846)) | (1 << (MySqlParser.PI - 846)) | (1 << (MySqlParser.POINTFROMTEXT - 846)) | (1 << (MySqlParser.POINTFROMWKB - 846)) | (1 << (MySqlParser.POINTN - 846)) | (1 << (MySqlParser.POLYFROMTEXT - 846)) | (1 << (MySqlParser.POLYFROMWKB - 846)) | (1 << (MySqlParser.POLYGONFROMTEXT - 846)) | (1 << (MySqlParser.POLYGONFROMWKB - 846)) | (1 << (MySqlParser.POW - 846)))) !== 0) || ((((_la - 878)) & ~0x1f) == 0 && ((1 << (_la - 878)) & ((1 << (MySqlParser.POWER - 878)) | (1 << (MySqlParser.QUOTE - 878)) | (1 << (MySqlParser.RADIANS - 878)) | (1 << (MySqlParser.RAND - 878)) | (1 << (MySqlParser.RANDOM_BYTES - 878)) | (1 << (MySqlParser.RELEASE_LOCK - 878)) | (1 << (MySqlParser.REVERSE - 878)) | (1 << (MySqlParser.ROUND - 878)) | (1 << (MySqlParser.ROW_COUNT - 878)) | (1 << (MySqlParser.RPAD - 878)) | (1 << (MySqlParser.RTRIM - 878)) | (1 << (MySqlParser.SEC_TO_TIME - 878)) | (1 << (MySqlParser.SESSION_USER - 878)) | (1 << (MySqlParser.SHA - 878)) | (1 << (MySqlParser.SHA1 - 878)) | (1 << (MySqlParser.SHA2 - 878)) | (1 << (MySqlParser.SCHEMA_NAME - 878)) | (1 << (MySqlParser.SIGN - 878)) | (1 << (MySqlParser.SIN - 878)) | (1 << (MySqlParser.SLEEP - 878)) | (1 << (MySqlParser.SOUNDEX - 878)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 878)) | (1 << (MySqlParser.SQRT - 878)) | (1 << (MySqlParser.SRID - 878)) | (1 << (MySqlParser.STARTPOINT - 878)) | (1 << (MySqlParser.STRCMP - 878)) | (1 << (MySqlParser.STR_TO_DATE - 878)) | (1 << (MySqlParser.ST_AREA - 878)) | (1 << (MySqlParser.ST_ASBINARY - 878)) | (1 << (MySqlParser.ST_ASTEXT - 878)) | (1 << (MySqlParser.ST_ASWKB - 878)) | (1 << (MySqlParser.ST_ASWKT - 878)))) !== 0) || ((((_la - 910)) & ~0x1f) == 0 && ((1 << (_la - 910)) & ((1 << (MySqlParser.ST_BUFFER - 910)) | (1 << (MySqlParser.ST_CENTROID - 910)) | (1 << (MySqlParser.ST_CONTAINS - 910)) | (1 << (MySqlParser.ST_CROSSES - 910)) | (1 << (MySqlParser.ST_DIFFERENCE - 910)) | (1 << (MySqlParser.ST_DIMENSION - 910)) | (1 << (MySqlParser.ST_DISJOINT - 910)) | (1 << (MySqlParser.ST_DISTANCE - 910)) | (1 << (MySqlParser.ST_ENDPOINT - 910)) | (1 << (MySqlParser.ST_ENVELOPE - 910)) | (1 << (MySqlParser.ST_EQUALS - 910)) | (1 << (MySqlParser.ST_EXTERIORRING - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYN - 910)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 910)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 910)) | (1 << (MySqlParser.ST_INTERIORRINGN - 910)) | (1 << (MySqlParser.ST_INTERSECTION - 910)) | (1 << (MySqlParser.ST_INTERSECTS - 910)) | (1 << (MySqlParser.ST_ISCLOSED - 910)) | (1 << (MySqlParser.ST_ISEMPTY - 910)) | (1 << (MySqlParser.ST_ISSIMPLE - 910)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 910)) | (1 << (MySqlParser.ST_LINEFROMWKB - 910)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 910)))) !== 0) || ((((_la - 942)) & ~0x1f) == 0 && ((1 << (_la - 942)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 942)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 942)) | (1 << (MySqlParser.ST_NUMPOINTS - 942)) | (1 << (MySqlParser.ST_OVERLAPS - 942)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 942)) | (1 << (MySqlParser.ST_POINTFROMWKB - 942)) | (1 << (MySqlParser.ST_POINTN - 942)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYFROMWKB - 942)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 942)) | (1 << (MySqlParser.ST_SRID - 942)) | (1 << (MySqlParser.ST_STARTPOINT - 942)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 942)) | (1 << (MySqlParser.ST_TOUCHES - 942)) | (1 << (MySqlParser.ST_UNION - 942)) | (1 << (MySqlParser.ST_WITHIN - 942)) | (1 << (MySqlParser.ST_X - 942)) | (1 << (MySqlParser.ST_Y - 942)) | (1 << (MySqlParser.SUBDATE - 942)) | (1 << (MySqlParser.SUBSTRING_INDEX - 942)) | (1 << (MySqlParser.SUBTIME - 942)) | (1 << (MySqlParser.SYSTEM_USER - 942)) | (1 << (MySqlParser.TAN - 942)) | (1 << (MySqlParser.TIMEDIFF - 942)) | (1 << (MySqlParser.TIMESTAMPADD - 942)) | (1 << (MySqlParser.TIMESTAMPDIFF - 942)) | (1 << (MySqlParser.TIME_FORMAT - 942)) | (1 << (MySqlParser.TIME_TO_SEC - 942)) | (1 << (MySqlParser.TOUCHES - 942)))) !== 0) || ((((_la - 974)) & ~0x1f) == 0 && ((1 << (_la - 974)) & ((1 << (MySqlParser.TO_BASE64 - 974)) | (1 << (MySqlParser.TO_DAYS - 974)) | (1 << (MySqlParser.TO_SECONDS - 974)) | (1 << (MySqlParser.UCASE - 974)) | (1 << (MySqlParser.UNCOMPRESS - 974)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 974)) | (1 << (MySqlParser.UNHEX - 974)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 974)) | (1 << (MySqlParser.UPDATEXML - 974)) | (1 << (MySqlParser.UPPER - 974)) | (1 << (MySqlParser.UUID - 974)) | (1 << (MySqlParser.UUID_SHORT - 974)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 974)) | (1 << (MySqlParser.VERSION - 974)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1 << (MySqlParser.WEEKDAY - 974)) | (1 << (MySqlParser.WEEKOFYEAR - 974)) | (1 << (MySqlParser.WEIGHT_STRING - 974)) | (1 << (MySqlParser.WITHIN - 974)) | (1 << (MySqlParser.YEARWEEK - 974)) | (1 << (MySqlParser.Y_FUNCTION - 974)) | (1 << (MySqlParser.X_FUNCTION - 974)))) !== 0) || ((((_la - 1034)) & ~0x1f) == 0 && ((1 << (_la - 1034)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (MySqlParser.STRING_LITERAL - 1034)) | (1 << (MySqlParser.ID - 1034)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1034)))) !== 0)) {
	                this.state = 3928;
	                this.uid();
	                this.state = 3933;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===MySqlParser.COMMA) {
	                    this.state = 3929;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 3930;
	                    this.uid();
	                    this.state = 3935;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 3938;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringMasterOption() {
	    let localctx = new StringMasterOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, MySqlParser.RULE_stringMasterOption);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3941;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.MASTER_BIND || ((((_la - 410)) & ~0x1f) == 0 && ((1 << (_la - 410)) & ((1 << (MySqlParser.MASTER_HOST - 410)) | (1 << (MySqlParser.MASTER_LOG_FILE - 410)) | (1 << (MySqlParser.MASTER_PASSWORD - 410)) | (1 << (MySqlParser.MASTER_SSL_CA - 410)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 410)) | (1 << (MySqlParser.MASTER_SSL_CERT - 410)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 410)) | (1 << (MySqlParser.MASTER_SSL_CRL - 410)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 410)) | (1 << (MySqlParser.MASTER_SSL_KEY - 410)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 410)) | (1 << (MySqlParser.MASTER_USER - 410)))) !== 0) || _la===MySqlParser.RELAY_LOG_FILE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decimalMasterOption() {
	    let localctx = new DecimalMasterOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, MySqlParser.RULE_decimalMasterOption);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3943;
	        _la = this._input.LA(1);
	        if(!(((((_la - 407)) & ~0x1f) == 0 && ((1 << (_la - 407)) & ((1 << (MySqlParser.MASTER_CONNECT_RETRY - 407)) | (1 << (MySqlParser.MASTER_DELAY - 407)) | (1 << (MySqlParser.MASTER_LOG_POS - 407)) | (1 << (MySqlParser.MASTER_PORT - 407)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 407)))) !== 0) || _la===MySqlParser.RELAY_LOG_POS)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	boolMasterOption() {
	    let localctx = new BoolMasterOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, MySqlParser.RULE_boolMasterOption);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3945;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT || _la===MySqlParser.MASTER_AUTO_POSITION || _la===MySqlParser.MASTER_SSL)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	channelOption() {
	    let localctx = new ChannelOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, MySqlParser.RULE_channelOption);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3947;
	        this.match(MySqlParser.FOR);
	        this.state = 3948;
	        this.match(MySqlParser.CHANNEL);
	        this.state = 3949;
	        this.match(MySqlParser.STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replicationFilter() {
	    let localctx = new ReplicationFilterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, MySqlParser.RULE_replicationFilter);
	    var _la = 0; // Token type
	    try {
	        this.state = 4000;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.REPLICATE_DO_DB:
	            localctx = new DoDbReplicationContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3951;
	            this.match(MySqlParser.REPLICATE_DO_DB);
	            this.state = 3952;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 3953;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3954;
	            this.uidList();
	            this.state = 3955;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        case MySqlParser.REPLICATE_IGNORE_DB:
	            localctx = new IgnoreDbReplicationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3957;
	            this.match(MySqlParser.REPLICATE_IGNORE_DB);
	            this.state = 3958;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 3959;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3960;
	            this.uidList();
	            this.state = 3961;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        case MySqlParser.REPLICATE_DO_TABLE:
	            localctx = new DoTableReplicationContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3963;
	            this.match(MySqlParser.REPLICATE_DO_TABLE);
	            this.state = 3964;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 3965;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3966;
	            this.tables();
	            this.state = 3967;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        case MySqlParser.REPLICATE_IGNORE_TABLE:
	            localctx = new IgnoreTableReplicationContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3969;
	            this.match(MySqlParser.REPLICATE_IGNORE_TABLE);
	            this.state = 3970;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 3971;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3972;
	            this.tables();
	            this.state = 3973;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        case MySqlParser.REPLICATE_WILD_DO_TABLE:
	            localctx = new WildDoTableReplicationContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3975;
	            this.match(MySqlParser.REPLICATE_WILD_DO_TABLE);
	            this.state = 3976;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 3977;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3978;
	            this.simpleStrings();
	            this.state = 3979;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
	            localctx = new WildIgnoreTableReplicationContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3981;
	            this.match(MySqlParser.REPLICATE_WILD_IGNORE_TABLE);
	            this.state = 3982;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 3983;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3984;
	            this.simpleStrings();
	            this.state = 3985;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        case MySqlParser.REPLICATE_REWRITE_DB:
	            localctx = new RewriteDbReplicationContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3987;
	            this.match(MySqlParser.REPLICATE_REWRITE_DB);
	            this.state = 3988;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 3989;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3990;
	            this.tablePair();
	            this.state = 3995;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 3991;
	                this.match(MySqlParser.COMMA);
	                this.state = 3992;
	                this.tablePair();
	                this.state = 3997;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3998;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tablePair() {
	    let localctx = new TablePairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, MySqlParser.RULE_tablePair);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4002;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 4003;
	        localctx.firstTable = this.tableName();
	        this.state = 4004;
	        this.match(MySqlParser.COMMA);
	        this.state = 4005;
	        localctx.secondTable = this.tableName();
	        this.state = 4006;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	threadType() {
	    let localctx = new ThreadTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, MySqlParser.RULE_threadType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4008;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.IO_THREAD || _la===MySqlParser.SQL_THREAD)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	untilOption() {
	    let localctx = new UntilOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, MySqlParser.RULE_untilOption);
	    var _la = 0; // Token type
	    try {
	        this.state = 4028;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.SQL_AFTER_GTIDS:
	        case MySqlParser.SQL_BEFORE_GTIDS:
	            localctx = new GtidsUntilOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4010;
	            localctx.gtids = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.SQL_AFTER_GTIDS || _la===MySqlParser.SQL_BEFORE_GTIDS)) {
	                localctx.gtids = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4011;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 4012;
	            this.gtuidSet();
	            break;
	        case MySqlParser.MASTER_LOG_FILE:
	            localctx = new MasterLogUntilOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4013;
	            this.match(MySqlParser.MASTER_LOG_FILE);
	            this.state = 4014;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 4015;
	            this.match(MySqlParser.STRING_LITERAL);
	            this.state = 4016;
	            this.match(MySqlParser.COMMA);
	            this.state = 4017;
	            this.match(MySqlParser.MASTER_LOG_POS);
	            this.state = 4018;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 4019;
	            this.decimalLiteral();
	            break;
	        case MySqlParser.RELAY_LOG_FILE:
	            localctx = new RelayLogUntilOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4020;
	            this.match(MySqlParser.RELAY_LOG_FILE);
	            this.state = 4021;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 4022;
	            this.match(MySqlParser.STRING_LITERAL);
	            this.state = 4023;
	            this.match(MySqlParser.COMMA);
	            this.state = 4024;
	            this.match(MySqlParser.RELAY_LOG_POS);
	            this.state = 4025;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 4026;
	            this.decimalLiteral();
	            break;
	        case MySqlParser.SQL_AFTER_MTS_GAPS:
	            localctx = new SqlGapsUntilOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4027;
	            this.match(MySqlParser.SQL_AFTER_MTS_GAPS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	connectionOption() {
	    let localctx = new ConnectionOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, MySqlParser.RULE_connectionOption);
	    try {
	        this.state = 4042;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.USER:
	            localctx = new UserConnectionOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4030;
	            this.match(MySqlParser.USER);
	            this.state = 4031;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 4032;
	            localctx.conOptUser = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.PASSWORD:
	            localctx = new PasswordConnectionOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4033;
	            this.match(MySqlParser.PASSWORD);
	            this.state = 4034;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 4035;
	            localctx.conOptPassword = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.DEFAULT_AUTH:
	            localctx = new DefaultAuthConnectionOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4036;
	            this.match(MySqlParser.DEFAULT_AUTH);
	            this.state = 4037;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 4038;
	            localctx.conOptDefAuth = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.PLUGIN_DIR:
	            localctx = new PluginDirConnectionOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4039;
	            this.match(MySqlParser.PLUGIN_DIR);
	            this.state = 4040;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 4041;
	            localctx.conOptPluginDir = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gtuidSet() {
	    let localctx = new GtuidSetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, MySqlParser.RULE_gtuidSet);
	    var _la = 0; // Token type
	    try {
	        this.state = 4053;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.ZERO_DECIMAL:
	        case MySqlParser.ONE_DECIMAL:
	        case MySqlParser.TWO_DECIMAL:
	        case MySqlParser.DECIMAL_LITERAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4044;
	            this.uuidSet();
	            this.state = 4049;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 4045;
	                this.match(MySqlParser.COMMA);
	                this.state = 4046;
	                this.uuidSet();
	                this.state = 4051;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case MySqlParser.STRING_LITERAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4052;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xaStartTransaction() {
	    let localctx = new XaStartTransactionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, MySqlParser.RULE_xaStartTransaction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4055;
	        this.match(MySqlParser.XA);
	        this.state = 4056;
	        localctx.xaStart = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.BEGIN || _la===MySqlParser.START)) {
	            localctx.xaStart = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4057;
	        this.xid();
	        this.state = 4059;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.JOIN || _la===MySqlParser.RESUME) {
	            this.state = 4058;
	            localctx.xaAction = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.JOIN || _la===MySqlParser.RESUME)) {
	                localctx.xaAction = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xaEndTransaction() {
	    let localctx = new XaEndTransactionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, MySqlParser.RULE_xaEndTransaction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4061;
	        this.match(MySqlParser.XA);
	        this.state = 4062;
	        this.match(MySqlParser.END);
	        this.state = 4063;
	        this.xid();
	        this.state = 4069;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.SUSPEND) {
	            this.state = 4064;
	            this.match(MySqlParser.SUSPEND);
	            this.state = 4067;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.FOR) {
	                this.state = 4065;
	                this.match(MySqlParser.FOR);
	                this.state = 4066;
	                this.match(MySqlParser.MIGRATE);
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xaPrepareStatement() {
	    let localctx = new XaPrepareStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, MySqlParser.RULE_xaPrepareStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4071;
	        this.match(MySqlParser.XA);
	        this.state = 4072;
	        this.match(MySqlParser.PREPARE);
	        this.state = 4073;
	        this.xid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xaCommitWork() {
	    let localctx = new XaCommitWorkContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, MySqlParser.RULE_xaCommitWork);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4075;
	        this.match(MySqlParser.XA);
	        this.state = 4076;
	        this.match(MySqlParser.COMMIT);
	        this.state = 4077;
	        this.xid();
	        this.state = 4080;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.ONE) {
	            this.state = 4078;
	            this.match(MySqlParser.ONE);
	            this.state = 4079;
	            this.match(MySqlParser.PHASE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xaRollbackWork() {
	    let localctx = new XaRollbackWorkContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, MySqlParser.RULE_xaRollbackWork);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4082;
	        this.match(MySqlParser.XA);
	        this.state = 4083;
	        this.match(MySqlParser.ROLLBACK);
	        this.state = 4084;
	        this.xid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xaRecoverWork() {
	    let localctx = new XaRecoverWorkContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, MySqlParser.RULE_xaRecoverWork);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4086;
	        this.match(MySqlParser.XA);
	        this.state = 4087;
	        this.match(MySqlParser.RECOVER);
	        this.state = 4090;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.CONVERT) {
	            this.state = 4088;
	            this.match(MySqlParser.CONVERT);
	            this.state = 4089;
	            this.xid();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prepareStatement() {
	    let localctx = new PrepareStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, MySqlParser.RULE_prepareStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4092;
	        this.match(MySqlParser.PREPARE);
	        this.state = 4093;
	        this.uid();
	        this.state = 4094;
	        this.match(MySqlParser.FROM);
	        this.state = 4097;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.STRING_LITERAL:
	            this.state = 4095;
	            localctx.query = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.LOCAL_ID:
	            this.state = 4096;
	            localctx.variable = this.match(MySqlParser.LOCAL_ID);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	executeStatement() {
	    let localctx = new ExecuteStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, MySqlParser.RULE_executeStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4099;
	        this.match(MySqlParser.EXECUTE);
	        this.state = 4100;
	        this.uid();
	        this.state = 4103;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.USING) {
	            this.state = 4101;
	            this.match(MySqlParser.USING);
	            this.state = 4102;
	            this.userVariables();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deallocatePrepare() {
	    let localctx = new DeallocatePrepareContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, MySqlParser.RULE_deallocatePrepare);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4105;
	        localctx.dropFormat = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.DROP || _la===MySqlParser.DEALLOCATE)) {
	            localctx.dropFormat = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4106;
	        this.match(MySqlParser.PREPARE);
	        this.state = 4107;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	routineBody() {
	    let localctx = new RoutineBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, MySqlParser.RULE_routineBody);
	    try {
	        this.state = 4111;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,589,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4109;
	            this.blockStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4110;
	            this.sqlStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockStatement() {
	    let localctx = new BlockStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, MySqlParser.RULE_blockStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4116;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,590,this._ctx);
	        if(la_===1) {
	            this.state = 4113;
	            this.uid();
	            this.state = 4114;
	            this.match(MySqlParser.COLON_SYMB);

	        }
	        this.state = 4118;
	        this.match(MySqlParser.BEGIN);
	        this.state = 4157;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,596,this._ctx);
	        if(la_===1) {
	            this.state = 4124;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,591,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 4119;
	                    this.declareVariable();
	                    this.state = 4120;
	                    this.match(MySqlParser.SEMI); 
	                }
	                this.state = 4126;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,591,this._ctx);
	            }

	            this.state = 4132;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,592,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 4127;
	                    this.declareCondition();
	                    this.state = 4128;
	                    this.match(MySqlParser.SEMI); 
	                }
	                this.state = 4134;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,592,this._ctx);
	            }

	            this.state = 4140;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,593,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 4135;
	                    this.declareCursor();
	                    this.state = 4136;
	                    this.match(MySqlParser.SEMI); 
	                }
	                this.state = 4142;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,593,this._ctx);
	            }

	            this.state = 4148;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.DECLARE) {
	                this.state = 4143;
	                this.declareHandler();
	                this.state = 4144;
	                this.match(MySqlParser.SEMI);
	                this.state = 4150;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 4154;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,595,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 4151;
	                    this.procedureSqlStatement(); 
	                }
	                this.state = 4156;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,595,this._ctx);
	            }


	        }
	        this.state = 4159;
	        this.match(MySqlParser.END);
	        this.state = 4161;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,597,this._ctx);
	        if(la_===1) {
	            this.state = 4160;
	            this.uid();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseStatement() {
	    let localctx = new CaseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, MySqlParser.RULE_caseStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4163;
	        this.match(MySqlParser.CASE);
	        this.state = 4166;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,598,this._ctx);
	        if(la_===1) {
	            this.state = 4164;
	            this.uid();

	        } else if(la_===2) {
	            this.state = 4165;
	            this.expression(0);

	        }
	        this.state = 4169; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4168;
	            this.caseAlternative();
	            this.state = 4171; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===MySqlParser.WHEN);
	        this.state = 4179;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.ELSE) {
	            this.state = 4173;
	            this.match(MySqlParser.ELSE);
	            this.state = 4175; 
	            this._errHandler.sync(this);
	            let _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 4174;
	            		this.procedureSqlStatement();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 4177; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,600, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        }

	        this.state = 4181;
	        this.match(MySqlParser.END);
	        this.state = 4182;
	        this.match(MySqlParser.CASE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifStatement() {
	    let localctx = new IfStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, MySqlParser.RULE_ifStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4184;
	        this.match(MySqlParser.IF);
	        this.state = 4185;
	        this.expression(0);
	        this.state = 4186;
	        this.match(MySqlParser.THEN);
	        this.state = 4188; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 4187;
	        		localctx._procedureSqlStatement = this.procedureSqlStatement();
	        		localctx.thenStatements.push(localctx._procedureSqlStatement);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 4190; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,602, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 4195;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.ELSEIF) {
	            this.state = 4192;
	            this.elifAlternative();
	            this.state = 4197;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4204;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.ELSE) {
	            this.state = 4198;
	            this.match(MySqlParser.ELSE);
	            this.state = 4200; 
	            this._errHandler.sync(this);
	            let _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 4199;
	            		localctx._procedureSqlStatement = this.procedureSqlStatement();
	            		localctx.elseStatements.push(localctx._procedureSqlStatement);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 4202; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,604, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        }

	        this.state = 4206;
	        this.match(MySqlParser.END);
	        this.state = 4207;
	        this.match(MySqlParser.IF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iterateStatement() {
	    let localctx = new IterateStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, MySqlParser.RULE_iterateStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4209;
	        this.match(MySqlParser.ITERATE);
	        this.state = 4210;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	leaveStatement() {
	    let localctx = new LeaveStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, MySqlParser.RULE_leaveStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4212;
	        this.match(MySqlParser.LEAVE);
	        this.state = 4213;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loopStatement() {
	    let localctx = new LoopStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, MySqlParser.RULE_loopStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4218;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySqlParser.CURRENT - 32)) | (1 << (MySqlParser.DATABASE - 32)) | (1 << (MySqlParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySqlParser.LEFT || _la===MySqlParser.NUMBER || _la===MySqlParser.RIGHT || _la===MySqlParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.TIMESTAMP - 199)) | (1 << (MySqlParser.DATETIME - 199)) | (1 << (MySqlParser.YEAR - 199)) | (1 << (MySqlParser.TEXT - 199)) | (1 << (MySqlParser.ENUM - 199)) | (1 << (MySqlParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.JSON_VALID - 233)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySqlParser.AVG - 233)) | (1 << (MySqlParser.BIT_AND - 233)) | (1 << (MySqlParser.BIT_OR - 233)) | (1 << (MySqlParser.BIT_XOR - 233)) | (1 << (MySqlParser.COUNT - 233)) | (1 << (MySqlParser.GROUP_CONCAT - 233)) | (1 << (MySqlParser.MAX - 233)) | (1 << (MySqlParser.MIN - 233)) | (1 << (MySqlParser.STD - 233)) | (1 << (MySqlParser.STDDEV - 233)) | (1 << (MySqlParser.STDDEV_POP - 233)) | (1 << (MySqlParser.STDDEV_SAMP - 233)) | (1 << (MySqlParser.SUM - 233)) | (1 << (MySqlParser.VAR_POP - 233)) | (1 << (MySqlParser.VAR_SAMP - 233)) | (1 << (MySqlParser.VARIANCE - 233)) | (1 << (MySqlParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySqlParser.ACCOUNT - 270)) | (1 << (MySqlParser.ACTION - 270)) | (1 << (MySqlParser.AFTER - 270)) | (1 << (MySqlParser.AGGREGATE - 270)) | (1 << (MySqlParser.ALGORITHM - 270)) | (1 << (MySqlParser.ANY - 270)) | (1 << (MySqlParser.AT - 270)) | (1 << (MySqlParser.AUTHORS - 270)) | (1 << (MySqlParser.AUTOCOMMIT - 270)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySqlParser.AUTO_INCREMENT - 270)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 270)) | (1 << (MySqlParser.BEGIN - 270)) | (1 << (MySqlParser.BINLOG - 270)) | (1 << (MySqlParser.BIT - 270)) | (1 << (MySqlParser.BLOCK - 270)) | (1 << (MySqlParser.BOOL - 270)) | (1 << (MySqlParser.BOOLEAN - 270)) | (1 << (MySqlParser.BTREE - 270)) | (1 << (MySqlParser.CACHE - 270)) | (1 << (MySqlParser.CASCADED - 270)) | (1 << (MySqlParser.CHAIN - 270)) | (1 << (MySqlParser.CHANGED - 270)) | (1 << (MySqlParser.CHANNEL - 270)) | (1 << (MySqlParser.CHECKSUM - 270)) | (1 << (MySqlParser.PAGE_CHECKSUM - 270)) | (1 << (MySqlParser.CIPHER - 270)) | (1 << (MySqlParser.CLASS_ORIGIN - 270)) | (1 << (MySqlParser.CLIENT - 270)) | (1 << (MySqlParser.CLOSE - 270)) | (1 << (MySqlParser.COALESCE - 270)) | (1 << (MySqlParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySqlParser.COLUMNS - 302)) | (1 << (MySqlParser.COLUMN_FORMAT - 302)) | (1 << (MySqlParser.COLUMN_NAME - 302)) | (1 << (MySqlParser.COMMENT - 302)) | (1 << (MySqlParser.COMMIT - 302)) | (1 << (MySqlParser.COMPACT - 302)) | (1 << (MySqlParser.COMPLETION - 302)) | (1 << (MySqlParser.COMPRESSED - 302)) | (1 << (MySqlParser.COMPRESSION - 302)) | (1 << (MySqlParser.CONCURRENT - 302)) | (1 << (MySqlParser.CONNECTION - 302)) | (1 << (MySqlParser.CONSISTENT - 302)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySqlParser.CONSTRAINT_NAME - 302)) | (1 << (MySqlParser.CONTAINS - 302)) | (1 << (MySqlParser.CONTEXT - 302)) | (1 << (MySqlParser.CONTRIBUTORS - 302)) | (1 << (MySqlParser.COPY - 302)) | (1 << (MySqlParser.CPU - 302)) | (1 << (MySqlParser.CURSOR_NAME - 302)) | (1 << (MySqlParser.DATA - 302)) | (1 << (MySqlParser.DATAFILE - 302)) | (1 << (MySqlParser.DEALLOCATE - 302)) | (1 << (MySqlParser.DEFAULT_AUTH - 302)) | (1 << (MySqlParser.DEFINER - 302)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 302)) | (1 << (MySqlParser.DES_KEY_FILE - 302)) | (1 << (MySqlParser.DIRECTORY - 302)) | (1 << (MySqlParser.DISABLE - 302)) | (1 << (MySqlParser.DISCARD - 302)) | (1 << (MySqlParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySqlParser.DO - 334)) | (1 << (MySqlParser.DUMPFILE - 334)) | (1 << (MySqlParser.DUPLICATE - 334)) | (1 << (MySqlParser.DYNAMIC - 334)) | (1 << (MySqlParser.ENABLE - 334)) | (1 << (MySqlParser.ENCRYPTION - 334)) | (1 << (MySqlParser.END - 334)) | (1 << (MySqlParser.ENDS - 334)) | (1 << (MySqlParser.ENGINE - 334)) | (1 << (MySqlParser.ENGINES - 334)) | (1 << (MySqlParser.ERROR - 334)) | (1 << (MySqlParser.ERRORS - 334)) | (1 << (MySqlParser.ESCAPE - 334)) | (1 << (MySqlParser.EVEN - 334)) | (1 << (MySqlParser.EVENT - 334)) | (1 << (MySqlParser.EVENTS - 334)) | (1 << (MySqlParser.EVERY - 334)) | (1 << (MySqlParser.EXCHANGE - 334)) | (1 << (MySqlParser.EXCLUSIVE - 334)) | (1 << (MySqlParser.EXPIRE - 334)) | (1 << (MySqlParser.EXPORT - 334)) | (1 << (MySqlParser.EXTENDED - 334)) | (1 << (MySqlParser.EXTENT_SIZE - 334)) | (1 << (MySqlParser.FAST - 334)) | (1 << (MySqlParser.FAULTS - 334)) | (1 << (MySqlParser.FIELDS - 334)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySqlParser.FILTER - 334)) | (1 << (MySqlParser.FIRST - 334)) | (1 << (MySqlParser.FIXED - 334)) | (1 << (MySqlParser.FLUSH - 334)) | (1 << (MySqlParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySqlParser.FOUND - 366)) | (1 << (MySqlParser.FULL - 366)) | (1 << (MySqlParser.FUNCTION - 366)) | (1 << (MySqlParser.GENERAL - 366)) | (1 << (MySqlParser.GLOBAL - 366)) | (1 << (MySqlParser.GRANTS - 366)) | (1 << (MySqlParser.GROUP_REPLICATION - 366)) | (1 << (MySqlParser.HANDLER - 366)) | (1 << (MySqlParser.HASH - 366)) | (1 << (MySqlParser.HELP - 366)) | (1 << (MySqlParser.HOST - 366)) | (1 << (MySqlParser.HOSTS - 366)) | (1 << (MySqlParser.IDENTIFIED - 366)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySqlParser.IMPORT - 366)) | (1 << (MySqlParser.INDEXES - 366)) | (1 << (MySqlParser.INITIAL_SIZE - 366)) | (1 << (MySqlParser.INPLACE - 366)) | (1 << (MySqlParser.INSERT_METHOD - 366)) | (1 << (MySqlParser.INSTALL - 366)) | (1 << (MySqlParser.INSTANCE - 366)) | (1 << (MySqlParser.INVISIBLE - 366)) | (1 << (MySqlParser.INVOKER - 366)) | (1 << (MySqlParser.IO - 366)) | (1 << (MySqlParser.IO_THREAD - 366)) | (1 << (MySqlParser.IPC - 366)) | (1 << (MySqlParser.ISOLATION - 366)) | (1 << (MySqlParser.ISSUER - 366)) | (1 << (MySqlParser.JSON - 366)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySqlParser.LANGUAGE - 366)) | (1 << (MySqlParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.LEAVES - 398)) | (1 << (MySqlParser.LESS - 398)) | (1 << (MySqlParser.LEVEL - 398)) | (1 << (MySqlParser.LIST - 398)) | (1 << (MySqlParser.LOCAL - 398)) | (1 << (MySqlParser.LOGFILE - 398)) | (1 << (MySqlParser.LOGS - 398)) | (1 << (MySqlParser.MASTER - 398)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySqlParser.MASTER_DELAY - 398)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySqlParser.MASTER_HOST - 398)) | (1 << (MySqlParser.MASTER_LOG_FILE - 398)) | (1 << (MySqlParser.MASTER_LOG_POS - 398)) | (1 << (MySqlParser.MASTER_PASSWORD - 398)) | (1 << (MySqlParser.MASTER_PORT - 398)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySqlParser.MASTER_SSL - 398)) | (1 << (MySqlParser.MASTER_SSL_CA - 398)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_CERT - 398)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySqlParser.MASTER_SSL_CRL - 398)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_KEY - 398)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 398)) | (1 << (MySqlParser.MASTER_USER - 398)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySqlParser.MEDIUM - 430)) | (1 << (MySqlParser.MEMBER - 430)) | (1 << (MySqlParser.MERGE - 430)) | (1 << (MySqlParser.MESSAGE_TEXT - 430)) | (1 << (MySqlParser.MID - 430)) | (1 << (MySqlParser.MIGRATE - 430)) | (1 << (MySqlParser.MIN_ROWS - 430)) | (1 << (MySqlParser.MODE - 430)) | (1 << (MySqlParser.MODIFY - 430)) | (1 << (MySqlParser.MUTEX - 430)) | (1 << (MySqlParser.MYSQL - 430)) | (1 << (MySqlParser.MYSQL_ERRNO - 430)) | (1 << (MySqlParser.NAME - 430)) | (1 << (MySqlParser.NAMES - 430)) | (1 << (MySqlParser.NCHAR - 430)) | (1 << (MySqlParser.NEVER - 430)) | (1 << (MySqlParser.NEXT - 430)) | (1 << (MySqlParser.NO - 430)) | (1 << (MySqlParser.NODEGROUP - 430)) | (1 << (MySqlParser.NONE - 430)) | (1 << (MySqlParser.OFFLINE - 430)) | (1 << (MySqlParser.OFFSET - 430)) | (1 << (MySqlParser.OF - 430)) | (1 << (MySqlParser.OJ - 430)) | (1 << (MySqlParser.OLD_PASSWORD - 430)) | (1 << (MySqlParser.ONE - 430)) | (1 << (MySqlParser.ONLINE - 430)) | (1 << (MySqlParser.ONLY - 430)) | (1 << (MySqlParser.OPEN - 430)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySqlParser.OPTIONS - 462)) | (1 << (MySqlParser.OWNER - 462)) | (1 << (MySqlParser.PACK_KEYS - 462)) | (1 << (MySqlParser.PAGE - 462)) | (1 << (MySqlParser.PARSER - 462)) | (1 << (MySqlParser.PARTIAL - 462)) | (1 << (MySqlParser.PARTITIONING - 462)) | (1 << (MySqlParser.PARTITIONS - 462)) | (1 << (MySqlParser.PASSWORD - 462)) | (1 << (MySqlParser.PHASE - 462)) | (1 << (MySqlParser.PLUGIN - 462)) | (1 << (MySqlParser.PLUGIN_DIR - 462)) | (1 << (MySqlParser.PLUGINS - 462)) | (1 << (MySqlParser.PORT - 462)) | (1 << (MySqlParser.PRECEDES - 462)) | (1 << (MySqlParser.PREPARE - 462)) | (1 << (MySqlParser.PRESERVE - 462)) | (1 << (MySqlParser.PREV - 462)) | (1 << (MySqlParser.PROCESSLIST - 462)) | (1 << (MySqlParser.PROFILE - 462)) | (1 << (MySqlParser.PROFILES - 462)) | (1 << (MySqlParser.PROXY - 462)) | (1 << (MySqlParser.QUERY - 462)) | (1 << (MySqlParser.QUICK - 462)) | (1 << (MySqlParser.REBUILD - 462)) | (1 << (MySqlParser.RECOVER - 462)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySqlParser.REDUNDANT - 462)) | (1 << (MySqlParser.RELAY - 462)) | (1 << (MySqlParser.RELAY_LOG_FILE - 462)) | (1 << (MySqlParser.RELAY_LOG_POS - 462)) | (1 << (MySqlParser.RELAYLOG - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySqlParser.REMOVE - 494)) | (1 << (MySqlParser.REORGANIZE - 494)) | (1 << (MySqlParser.REPAIR - 494)) | (1 << (MySqlParser.REPLICATE_DO_DB - 494)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATION - 494)) | (1 << (MySqlParser.RESET - 494)) | (1 << (MySqlParser.RESUME - 494)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 494)) | (1 << (MySqlParser.RETURNS - 494)) | (1 << (MySqlParser.ROLE - 494)) | (1 << (MySqlParser.ROLLBACK - 494)) | (1 << (MySqlParser.ROLLUP - 494)) | (1 << (MySqlParser.ROTATE - 494)) | (1 << (MySqlParser.ROW - 494)) | (1 << (MySqlParser.ROWS - 494)) | (1 << (MySqlParser.ROW_FORMAT - 494)) | (1 << (MySqlParser.SAVEPOINT - 494)) | (1 << (MySqlParser.SCHEDULE - 494)) | (1 << (MySqlParser.SECURITY - 494)) | (1 << (MySqlParser.SERVER - 494)) | (1 << (MySqlParser.SESSION - 494)) | (1 << (MySqlParser.SHARE - 494)) | (1 << (MySqlParser.SHARED - 494)) | (1 << (MySqlParser.SIGNED - 494)) | (1 << (MySqlParser.SIMPLE - 494)) | (1 << (MySqlParser.SLAVE - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySqlParser.SLOW - 526)) | (1 << (MySqlParser.SNAPSHOT - 526)) | (1 << (MySqlParser.SOCKET - 526)) | (1 << (MySqlParser.SOME - 526)) | (1 << (MySqlParser.SONAME - 526)) | (1 << (MySqlParser.SOUNDS - 526)) | (1 << (MySqlParser.SOURCE - 526)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySqlParser.SQL_CACHE - 526)) | (1 << (MySqlParser.SQL_NO_CACHE - 526)) | (1 << (MySqlParser.SQL_THREAD - 526)) | (1 << (MySqlParser.START - 526)) | (1 << (MySqlParser.STARTS - 526)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 526)) | (1 << (MySqlParser.STATS_PERSISTENT - 526)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySqlParser.STATUS - 526)) | (1 << (MySqlParser.STOP - 526)) | (1 << (MySqlParser.STORAGE - 526)) | (1 << (MySqlParser.STRING - 526)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySqlParser.SUBJECT - 526)) | (1 << (MySqlParser.SUBPARTITION - 526)) | (1 << (MySqlParser.SUBPARTITIONS - 526)) | (1 << (MySqlParser.SUSPEND - 526)) | (1 << (MySqlParser.SWAPS - 526)) | (1 << (MySqlParser.SWITCHES - 526)) | (1 << (MySqlParser.TABLE_NAME - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySqlParser.TABLESPACE - 558)) | (1 << (MySqlParser.TEMPORARY - 558)) | (1 << (MySqlParser.TEMPTABLE - 558)) | (1 << (MySqlParser.THAN - 558)) | (1 << (MySqlParser.TRADITIONAL - 558)) | (1 << (MySqlParser.TRANSACTION - 558)) | (1 << (MySqlParser.TRANSACTIONAL - 558)) | (1 << (MySqlParser.TRIGGERS - 558)) | (1 << (MySqlParser.TRUNCATE - 558)) | (1 << (MySqlParser.UNDEFINED - 558)) | (1 << (MySqlParser.UNDOFILE - 558)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySqlParser.UNINSTALL - 558)) | (1 << (MySqlParser.UNKNOWN - 558)) | (1 << (MySqlParser.UNTIL - 558)) | (1 << (MySqlParser.UPGRADE - 558)) | (1 << (MySqlParser.USER - 558)) | (1 << (MySqlParser.USE_FRM - 558)) | (1 << (MySqlParser.USER_RESOURCES - 558)) | (1 << (MySqlParser.VALIDATION - 558)) | (1 << (MySqlParser.VALUE - 558)) | (1 << (MySqlParser.VARIABLES - 558)) | (1 << (MySqlParser.VIEW - 558)) | (1 << (MySqlParser.VISIBLE - 558)) | (1 << (MySqlParser.WAIT - 558)) | (1 << (MySqlParser.WARNINGS - 558)) | (1 << (MySqlParser.WITHOUT - 558)) | (1 << (MySqlParser.WORK - 558)) | (1 << (MySqlParser.WRAPPER - 558)) | (1 << (MySqlParser.X509 - 558)) | (1 << (MySqlParser.XA - 558)))) !== 0) || ((((_la - 590)) & ~0x1f) == 0 && ((1 << (_la - 590)) & ((1 << (MySqlParser.XML - 590)) | (1 << (MySqlParser.INTERNAL - 590)) | (1 << (MySqlParser.QUARTER - 590)) | (1 << (MySqlParser.MONTH - 590)) | (1 << (MySqlParser.DAY - 590)) | (1 << (MySqlParser.HOUR - 590)) | (1 << (MySqlParser.MINUTE - 590)) | (1 << (MySqlParser.WEEK - 590)) | (1 << (MySqlParser.SECOND - 590)) | (1 << (MySqlParser.MICROSECOND - 590)) | (1 << (MySqlParser.TABLES - 590)) | (1 << (MySqlParser.ROUTINE - 590)) | (1 << (MySqlParser.EXECUTE - 590)) | (1 << (MySqlParser.FILE - 590)) | (1 << (MySqlParser.PROCESS - 590)) | (1 << (MySqlParser.RELOAD - 590)) | (1 << (MySqlParser.SHUTDOWN - 590)) | (1 << (MySqlParser.SUPER - 590)) | (1 << (MySqlParser.PRIVILEGES - 590)) | (1 << (MySqlParser.AUDIT_ADMIN - 590)) | (1 << (MySqlParser.BACKUP_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 590)) | (1 << (MySqlParser.CLONE_ADMIN - 590)) | (1 << (MySqlParser.CONNECTION_ADMIN - 590)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 590)) | (1 << (MySqlParser.FIREWALL_ADMIN - 590)))) !== 0) || ((((_la - 622)) & ~0x1f) == 0 && ((1 << (_la - 622)) & ((1 << (MySqlParser.FIREWALL_USER - 622)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 622)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 622)) | (1 << (MySqlParser.NDB_STORED_USER - 622)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.REPLICATION_APPLIER - 622)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 622)) | (1 << (MySqlParser.ROLE_ADMIN - 622)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.SET_USER_ID - 622)) | (1 << (MySqlParser.SHOW_ROUTINE - 622)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 622)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 622)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 622)) | (1 << (MySqlParser.ARMSCII8 - 622)) | (1 << (MySqlParser.ASCII - 622)) | (1 << (MySqlParser.BIG5 - 622)) | (1 << (MySqlParser.CP1250 - 622)) | (1 << (MySqlParser.CP1251 - 622)) | (1 << (MySqlParser.CP1256 - 622)) | (1 << (MySqlParser.CP1257 - 622)) | (1 << (MySqlParser.CP850 - 622)) | (1 << (MySqlParser.CP852 - 622)) | (1 << (MySqlParser.CP866 - 622)) | (1 << (MySqlParser.CP932 - 622)) | (1 << (MySqlParser.DEC8 - 622)) | (1 << (MySqlParser.EUCJPMS - 622)) | (1 << (MySqlParser.EUCKR - 622)) | (1 << (MySqlParser.GB2312 - 622)))) !== 0) || ((((_la - 654)) & ~0x1f) == 0 && ((1 << (_la - 654)) & ((1 << (MySqlParser.GBK - 654)) | (1 << (MySqlParser.GEOSTD8 - 654)) | (1 << (MySqlParser.GREEK - 654)) | (1 << (MySqlParser.HEBREW - 654)) | (1 << (MySqlParser.HP8 - 654)) | (1 << (MySqlParser.KEYBCS2 - 654)) | (1 << (MySqlParser.KOI8R - 654)) | (1 << (MySqlParser.KOI8U - 654)) | (1 << (MySqlParser.LATIN1 - 654)) | (1 << (MySqlParser.LATIN2 - 654)) | (1 << (MySqlParser.LATIN5 - 654)) | (1 << (MySqlParser.LATIN7 - 654)) | (1 << (MySqlParser.MACCE - 654)) | (1 << (MySqlParser.MACROMAN - 654)) | (1 << (MySqlParser.SJIS - 654)) | (1 << (MySqlParser.SWE7 - 654)) | (1 << (MySqlParser.TIS620 - 654)) | (1 << (MySqlParser.UCS2 - 654)) | (1 << (MySqlParser.UJIS - 654)) | (1 << (MySqlParser.UTF16 - 654)) | (1 << (MySqlParser.UTF16LE - 654)) | (1 << (MySqlParser.UTF32 - 654)) | (1 << (MySqlParser.UTF8 - 654)) | (1 << (MySqlParser.UTF8MB3 - 654)) | (1 << (MySqlParser.UTF8MB4 - 654)) | (1 << (MySqlParser.ARCHIVE - 654)) | (1 << (MySqlParser.BLACKHOLE - 654)) | (1 << (MySqlParser.CSV - 654)) | (1 << (MySqlParser.FEDERATED - 654)) | (1 << (MySqlParser.INNODB - 654)) | (1 << (MySqlParser.MEMORY - 654)) | (1 << (MySqlParser.MRG_MYISAM - 654)))) !== 0) || ((((_la - 686)) & ~0x1f) == 0 && ((1 << (_la - 686)) & ((1 << (MySqlParser.MYISAM - 686)) | (1 << (MySqlParser.NDB - 686)) | (1 << (MySqlParser.NDBCLUSTER - 686)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 686)) | (1 << (MySqlParser.TOKUDB - 686)) | (1 << (MySqlParser.REPEATABLE - 686)) | (1 << (MySqlParser.COMMITTED - 686)) | (1 << (MySqlParser.UNCOMMITTED - 686)) | (1 << (MySqlParser.SERIALIZABLE - 686)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 686)) | (1 << (MySqlParser.LINESTRING - 686)) | (1 << (MySqlParser.MULTILINESTRING - 686)) | (1 << (MySqlParser.MULTIPOINT - 686)) | (1 << (MySqlParser.MULTIPOLYGON - 686)) | (1 << (MySqlParser.POINT - 686)) | (1 << (MySqlParser.POLYGON - 686)) | (1 << (MySqlParser.ABS - 686)) | (1 << (MySqlParser.ACOS - 686)) | (1 << (MySqlParser.ADDDATE - 686)) | (1 << (MySqlParser.ADDTIME - 686)) | (1 << (MySqlParser.AES_DECRYPT - 686)) | (1 << (MySqlParser.AES_ENCRYPT - 686)) | (1 << (MySqlParser.AREA - 686)) | (1 << (MySqlParser.ASBINARY - 686)) | (1 << (MySqlParser.ASIN - 686)) | (1 << (MySqlParser.ASTEXT - 686)) | (1 << (MySqlParser.ASWKB - 686)) | (1 << (MySqlParser.ASWKT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 686)))) !== 0) || ((((_la - 718)) & ~0x1f) == 0 && ((1 << (_la - 718)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 718)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 718)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 718)) | (1 << (MySqlParser.ATAN - 718)) | (1 << (MySqlParser.ATAN2 - 718)) | (1 << (MySqlParser.BENCHMARK - 718)) | (1 << (MySqlParser.BIN - 718)) | (1 << (MySqlParser.BIT_COUNT - 718)) | (1 << (MySqlParser.BIT_LENGTH - 718)) | (1 << (MySqlParser.BUFFER - 718)) | (1 << (MySqlParser.CATALOG_NAME - 718)) | (1 << (MySqlParser.CEIL - 718)) | (1 << (MySqlParser.CEILING - 718)) | (1 << (MySqlParser.CENTROID - 718)) | (1 << (MySqlParser.CHARACTER_LENGTH - 718)) | (1 << (MySqlParser.CHARSET - 718)) | (1 << (MySqlParser.CHAR_LENGTH - 718)) | (1 << (MySqlParser.COERCIBILITY - 718)) | (1 << (MySqlParser.COLLATION - 718)) | (1 << (MySqlParser.COMPRESS - 718)) | (1 << (MySqlParser.CONCAT - 718)) | (1 << (MySqlParser.CONCAT_WS - 718)) | (1 << (MySqlParser.CONNECTION_ID - 718)) | (1 << (MySqlParser.CONV - 718)) | (1 << (MySqlParser.CONVERT_TZ - 718)) | (1 << (MySqlParser.COS - 718)) | (1 << (MySqlParser.COT - 718)) | (1 << (MySqlParser.CRC32 - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 718)) | (1 << (MySqlParser.CREATE_DIGEST - 718)))) !== 0) || ((((_la - 750)) & ~0x1f) == 0 && ((1 << (_la - 750)) & ((1 << (MySqlParser.CROSSES - 750)) | (1 << (MySqlParser.DATEDIFF - 750)) | (1 << (MySqlParser.DATE_FORMAT - 750)) | (1 << (MySqlParser.DAYNAME - 750)) | (1 << (MySqlParser.DAYOFMONTH - 750)) | (1 << (MySqlParser.DAYOFWEEK - 750)) | (1 << (MySqlParser.DAYOFYEAR - 750)) | (1 << (MySqlParser.DECODE - 750)) | (1 << (MySqlParser.DEGREES - 750)) | (1 << (MySqlParser.DES_DECRYPT - 750)) | (1 << (MySqlParser.DES_ENCRYPT - 750)) | (1 << (MySqlParser.DIMENSION - 750)) | (1 << (MySqlParser.DISJOINT - 750)) | (1 << (MySqlParser.ELT - 750)) | (1 << (MySqlParser.ENCODE - 750)) | (1 << (MySqlParser.ENCRYPT - 750)) | (1 << (MySqlParser.ENDPOINT - 750)) | (1 << (MySqlParser.ENVELOPE - 750)) | (1 << (MySqlParser.EQUALS - 750)) | (1 << (MySqlParser.EXP - 750)) | (1 << (MySqlParser.EXPORT_SET - 750)) | (1 << (MySqlParser.EXTERIORRING - 750)) | (1 << (MySqlParser.EXTRACTVALUE - 750)) | (1 << (MySqlParser.FIELD - 750)) | (1 << (MySqlParser.FIND_IN_SET - 750)) | (1 << (MySqlParser.FLOOR - 750)) | (1 << (MySqlParser.FORMAT - 750)) | (1 << (MySqlParser.FOUND_ROWS - 750)) | (1 << (MySqlParser.FROM_BASE64 - 750)) | (1 << (MySqlParser.FROM_DAYS - 750)) | (1 << (MySqlParser.FROM_UNIXTIME - 750)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 750)))) !== 0) || ((((_la - 782)) & ~0x1f) == 0 && ((1 << (_la - 782)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYN - 782)) | (1 << (MySqlParser.GEOMETRYTYPE - 782)) | (1 << (MySqlParser.GEOMFROMTEXT - 782)) | (1 << (MySqlParser.GEOMFROMWKB - 782)) | (1 << (MySqlParser.GET_FORMAT - 782)) | (1 << (MySqlParser.GET_LOCK - 782)) | (1 << (MySqlParser.GLENGTH - 782)) | (1 << (MySqlParser.GREATEST - 782)) | (1 << (MySqlParser.GTID_SUBSET - 782)) | (1 << (MySqlParser.GTID_SUBTRACT - 782)) | (1 << (MySqlParser.HEX - 782)) | (1 << (MySqlParser.IFNULL - 782)) | (1 << (MySqlParser.INET6_ATON - 782)) | (1 << (MySqlParser.INET6_NTOA - 782)) | (1 << (MySqlParser.INET_ATON - 782)) | (1 << (MySqlParser.INET_NTOA - 782)) | (1 << (MySqlParser.INSTR - 782)) | (1 << (MySqlParser.INTERIORRINGN - 782)) | (1 << (MySqlParser.INTERSECTS - 782)) | (1 << (MySqlParser.ISCLOSED - 782)) | (1 << (MySqlParser.ISEMPTY - 782)) | (1 << (MySqlParser.ISNULL - 782)) | (1 << (MySqlParser.ISSIMPLE - 782)) | (1 << (MySqlParser.IS_FREE_LOCK - 782)) | (1 << (MySqlParser.IS_IPV4 - 782)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 782)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 782)))) !== 0) || ((((_la - 814)) & ~0x1f) == 0 && ((1 << (_la - 814)) & ((1 << (MySqlParser.IS_IPV6 - 814)) | (1 << (MySqlParser.IS_USED_LOCK - 814)) | (1 << (MySqlParser.LAST_INSERT_ID - 814)) | (1 << (MySqlParser.LCASE - 814)) | (1 << (MySqlParser.LEAST - 814)) | (1 << (MySqlParser.LENGTH - 814)) | (1 << (MySqlParser.LINEFROMTEXT - 814)) | (1 << (MySqlParser.LINEFROMWKB - 814)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 814)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 814)) | (1 << (MySqlParser.LN - 814)) | (1 << (MySqlParser.LOAD_FILE - 814)) | (1 << (MySqlParser.LOCATE - 814)) | (1 << (MySqlParser.LOG - 814)) | (1 << (MySqlParser.LOG10 - 814)) | (1 << (MySqlParser.LOG2 - 814)) | (1 << (MySqlParser.LOWER - 814)) | (1 << (MySqlParser.LPAD - 814)) | (1 << (MySqlParser.LTRIM - 814)) | (1 << (MySqlParser.MAKEDATE - 814)) | (1 << (MySqlParser.MAKETIME - 814)) | (1 << (MySqlParser.MAKE_SET - 814)) | (1 << (MySqlParser.MASTER_POS_WAIT - 814)) | (1 << (MySqlParser.MBRCONTAINS - 814)) | (1 << (MySqlParser.MBRDISJOINT - 814)) | (1 << (MySqlParser.MBREQUAL - 814)) | (1 << (MySqlParser.MBRINTERSECTS - 814)) | (1 << (MySqlParser.MBROVERLAPS - 814)) | (1 << (MySqlParser.MBRTOUCHES - 814)) | (1 << (MySqlParser.MBRWITHIN - 814)) | (1 << (MySqlParser.MD5 - 814)) | (1 << (MySqlParser.MLINEFROMTEXT - 814)))) !== 0) || ((((_la - 846)) & ~0x1f) == 0 && ((1 << (_la - 846)) & ((1 << (MySqlParser.MLINEFROMWKB - 846)) | (1 << (MySqlParser.MONTHNAME - 846)) | (1 << (MySqlParser.MPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MPOINTFROMWKB - 846)) | (1 << (MySqlParser.MPOLYFROMTEXT - 846)) | (1 << (MySqlParser.MPOLYFROMWKB - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 846)) | (1 << (MySqlParser.NAME_CONST - 846)) | (1 << (MySqlParser.NULLIF - 846)) | (1 << (MySqlParser.NUMGEOMETRIES - 846)) | (1 << (MySqlParser.NUMINTERIORRINGS - 846)) | (1 << (MySqlParser.NUMPOINTS - 846)) | (1 << (MySqlParser.OCT - 846)) | (1 << (MySqlParser.OCTET_LENGTH - 846)) | (1 << (MySqlParser.ORD - 846)) | (1 << (MySqlParser.OVERLAPS - 846)) | (1 << (MySqlParser.PERIOD_ADD - 846)) | (1 << (MySqlParser.PERIOD_DIFF - 846)) | (1 << (MySqlParser.PI - 846)) | (1 << (MySqlParser.POINTFROMTEXT - 846)) | (1 << (MySqlParser.POINTFROMWKB - 846)) | (1 << (MySqlParser.POINTN - 846)) | (1 << (MySqlParser.POLYFROMTEXT - 846)) | (1 << (MySqlParser.POLYFROMWKB - 846)) | (1 << (MySqlParser.POLYGONFROMTEXT - 846)) | (1 << (MySqlParser.POLYGONFROMWKB - 846)) | (1 << (MySqlParser.POW - 846)))) !== 0) || ((((_la - 878)) & ~0x1f) == 0 && ((1 << (_la - 878)) & ((1 << (MySqlParser.POWER - 878)) | (1 << (MySqlParser.QUOTE - 878)) | (1 << (MySqlParser.RADIANS - 878)) | (1 << (MySqlParser.RAND - 878)) | (1 << (MySqlParser.RANDOM_BYTES - 878)) | (1 << (MySqlParser.RELEASE_LOCK - 878)) | (1 << (MySqlParser.REVERSE - 878)) | (1 << (MySqlParser.ROUND - 878)) | (1 << (MySqlParser.ROW_COUNT - 878)) | (1 << (MySqlParser.RPAD - 878)) | (1 << (MySqlParser.RTRIM - 878)) | (1 << (MySqlParser.SEC_TO_TIME - 878)) | (1 << (MySqlParser.SESSION_USER - 878)) | (1 << (MySqlParser.SHA - 878)) | (1 << (MySqlParser.SHA1 - 878)) | (1 << (MySqlParser.SHA2 - 878)) | (1 << (MySqlParser.SCHEMA_NAME - 878)) | (1 << (MySqlParser.SIGN - 878)) | (1 << (MySqlParser.SIN - 878)) | (1 << (MySqlParser.SLEEP - 878)) | (1 << (MySqlParser.SOUNDEX - 878)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 878)) | (1 << (MySqlParser.SQRT - 878)) | (1 << (MySqlParser.SRID - 878)) | (1 << (MySqlParser.STARTPOINT - 878)) | (1 << (MySqlParser.STRCMP - 878)) | (1 << (MySqlParser.STR_TO_DATE - 878)) | (1 << (MySqlParser.ST_AREA - 878)) | (1 << (MySqlParser.ST_ASBINARY - 878)) | (1 << (MySqlParser.ST_ASTEXT - 878)) | (1 << (MySqlParser.ST_ASWKB - 878)) | (1 << (MySqlParser.ST_ASWKT - 878)))) !== 0) || ((((_la - 910)) & ~0x1f) == 0 && ((1 << (_la - 910)) & ((1 << (MySqlParser.ST_BUFFER - 910)) | (1 << (MySqlParser.ST_CENTROID - 910)) | (1 << (MySqlParser.ST_CONTAINS - 910)) | (1 << (MySqlParser.ST_CROSSES - 910)) | (1 << (MySqlParser.ST_DIFFERENCE - 910)) | (1 << (MySqlParser.ST_DIMENSION - 910)) | (1 << (MySqlParser.ST_DISJOINT - 910)) | (1 << (MySqlParser.ST_DISTANCE - 910)) | (1 << (MySqlParser.ST_ENDPOINT - 910)) | (1 << (MySqlParser.ST_ENVELOPE - 910)) | (1 << (MySqlParser.ST_EQUALS - 910)) | (1 << (MySqlParser.ST_EXTERIORRING - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYN - 910)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 910)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 910)) | (1 << (MySqlParser.ST_INTERIORRINGN - 910)) | (1 << (MySqlParser.ST_INTERSECTION - 910)) | (1 << (MySqlParser.ST_INTERSECTS - 910)) | (1 << (MySqlParser.ST_ISCLOSED - 910)) | (1 << (MySqlParser.ST_ISEMPTY - 910)) | (1 << (MySqlParser.ST_ISSIMPLE - 910)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 910)) | (1 << (MySqlParser.ST_LINEFROMWKB - 910)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 910)))) !== 0) || ((((_la - 942)) & ~0x1f) == 0 && ((1 << (_la - 942)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 942)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 942)) | (1 << (MySqlParser.ST_NUMPOINTS - 942)) | (1 << (MySqlParser.ST_OVERLAPS - 942)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 942)) | (1 << (MySqlParser.ST_POINTFROMWKB - 942)) | (1 << (MySqlParser.ST_POINTN - 942)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYFROMWKB - 942)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 942)) | (1 << (MySqlParser.ST_SRID - 942)) | (1 << (MySqlParser.ST_STARTPOINT - 942)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 942)) | (1 << (MySqlParser.ST_TOUCHES - 942)) | (1 << (MySqlParser.ST_UNION - 942)) | (1 << (MySqlParser.ST_WITHIN - 942)) | (1 << (MySqlParser.ST_X - 942)) | (1 << (MySqlParser.ST_Y - 942)) | (1 << (MySqlParser.SUBDATE - 942)) | (1 << (MySqlParser.SUBSTRING_INDEX - 942)) | (1 << (MySqlParser.SUBTIME - 942)) | (1 << (MySqlParser.SYSTEM_USER - 942)) | (1 << (MySqlParser.TAN - 942)) | (1 << (MySqlParser.TIMEDIFF - 942)) | (1 << (MySqlParser.TIMESTAMPADD - 942)) | (1 << (MySqlParser.TIMESTAMPDIFF - 942)) | (1 << (MySqlParser.TIME_FORMAT - 942)) | (1 << (MySqlParser.TIME_TO_SEC - 942)) | (1 << (MySqlParser.TOUCHES - 942)))) !== 0) || ((((_la - 974)) & ~0x1f) == 0 && ((1 << (_la - 974)) & ((1 << (MySqlParser.TO_BASE64 - 974)) | (1 << (MySqlParser.TO_DAYS - 974)) | (1 << (MySqlParser.TO_SECONDS - 974)) | (1 << (MySqlParser.UCASE - 974)) | (1 << (MySqlParser.UNCOMPRESS - 974)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 974)) | (1 << (MySqlParser.UNHEX - 974)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 974)) | (1 << (MySqlParser.UPDATEXML - 974)) | (1 << (MySqlParser.UPPER - 974)) | (1 << (MySqlParser.UUID - 974)) | (1 << (MySqlParser.UUID_SHORT - 974)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 974)) | (1 << (MySqlParser.VERSION - 974)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1 << (MySqlParser.WEEKDAY - 974)) | (1 << (MySqlParser.WEEKOFYEAR - 974)) | (1 << (MySqlParser.WEIGHT_STRING - 974)) | (1 << (MySqlParser.WITHIN - 974)) | (1 << (MySqlParser.YEARWEEK - 974)) | (1 << (MySqlParser.Y_FUNCTION - 974)) | (1 << (MySqlParser.X_FUNCTION - 974)))) !== 0) || ((((_la - 1034)) & ~0x1f) == 0 && ((1 << (_la - 1034)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (MySqlParser.STRING_LITERAL - 1034)) | (1 << (MySqlParser.ID - 1034)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1034)))) !== 0)) {
	            this.state = 4215;
	            this.uid();
	            this.state = 4216;
	            this.match(MySqlParser.COLON_SYMB);
	        }

	        this.state = 4220;
	        this.match(MySqlParser.LOOP);
	        this.state = 4222; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 4221;
	        		this.procedureSqlStatement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 4224; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,607, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 4226;
	        this.match(MySqlParser.END);
	        this.state = 4227;
	        this.match(MySqlParser.LOOP);
	        this.state = 4229;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySqlParser.CURRENT - 32)) | (1 << (MySqlParser.DATABASE - 32)) | (1 << (MySqlParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySqlParser.LEFT || _la===MySqlParser.NUMBER || _la===MySqlParser.RIGHT || _la===MySqlParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.TIMESTAMP - 199)) | (1 << (MySqlParser.DATETIME - 199)) | (1 << (MySqlParser.YEAR - 199)) | (1 << (MySqlParser.TEXT - 199)) | (1 << (MySqlParser.ENUM - 199)) | (1 << (MySqlParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.JSON_VALID - 233)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySqlParser.AVG - 233)) | (1 << (MySqlParser.BIT_AND - 233)) | (1 << (MySqlParser.BIT_OR - 233)) | (1 << (MySqlParser.BIT_XOR - 233)) | (1 << (MySqlParser.COUNT - 233)) | (1 << (MySqlParser.GROUP_CONCAT - 233)) | (1 << (MySqlParser.MAX - 233)) | (1 << (MySqlParser.MIN - 233)) | (1 << (MySqlParser.STD - 233)) | (1 << (MySqlParser.STDDEV - 233)) | (1 << (MySqlParser.STDDEV_POP - 233)) | (1 << (MySqlParser.STDDEV_SAMP - 233)) | (1 << (MySqlParser.SUM - 233)) | (1 << (MySqlParser.VAR_POP - 233)) | (1 << (MySqlParser.VAR_SAMP - 233)) | (1 << (MySqlParser.VARIANCE - 233)) | (1 << (MySqlParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySqlParser.ACCOUNT - 270)) | (1 << (MySqlParser.ACTION - 270)) | (1 << (MySqlParser.AFTER - 270)) | (1 << (MySqlParser.AGGREGATE - 270)) | (1 << (MySqlParser.ALGORITHM - 270)) | (1 << (MySqlParser.ANY - 270)) | (1 << (MySqlParser.AT - 270)) | (1 << (MySqlParser.AUTHORS - 270)) | (1 << (MySqlParser.AUTOCOMMIT - 270)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySqlParser.AUTO_INCREMENT - 270)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 270)) | (1 << (MySqlParser.BEGIN - 270)) | (1 << (MySqlParser.BINLOG - 270)) | (1 << (MySqlParser.BIT - 270)) | (1 << (MySqlParser.BLOCK - 270)) | (1 << (MySqlParser.BOOL - 270)) | (1 << (MySqlParser.BOOLEAN - 270)) | (1 << (MySqlParser.BTREE - 270)) | (1 << (MySqlParser.CACHE - 270)) | (1 << (MySqlParser.CASCADED - 270)) | (1 << (MySqlParser.CHAIN - 270)) | (1 << (MySqlParser.CHANGED - 270)) | (1 << (MySqlParser.CHANNEL - 270)) | (1 << (MySqlParser.CHECKSUM - 270)) | (1 << (MySqlParser.PAGE_CHECKSUM - 270)) | (1 << (MySqlParser.CIPHER - 270)) | (1 << (MySqlParser.CLASS_ORIGIN - 270)) | (1 << (MySqlParser.CLIENT - 270)) | (1 << (MySqlParser.CLOSE - 270)) | (1 << (MySqlParser.COALESCE - 270)) | (1 << (MySqlParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySqlParser.COLUMNS - 302)) | (1 << (MySqlParser.COLUMN_FORMAT - 302)) | (1 << (MySqlParser.COLUMN_NAME - 302)) | (1 << (MySqlParser.COMMENT - 302)) | (1 << (MySqlParser.COMMIT - 302)) | (1 << (MySqlParser.COMPACT - 302)) | (1 << (MySqlParser.COMPLETION - 302)) | (1 << (MySqlParser.COMPRESSED - 302)) | (1 << (MySqlParser.COMPRESSION - 302)) | (1 << (MySqlParser.CONCURRENT - 302)) | (1 << (MySqlParser.CONNECTION - 302)) | (1 << (MySqlParser.CONSISTENT - 302)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySqlParser.CONSTRAINT_NAME - 302)) | (1 << (MySqlParser.CONTAINS - 302)) | (1 << (MySqlParser.CONTEXT - 302)) | (1 << (MySqlParser.CONTRIBUTORS - 302)) | (1 << (MySqlParser.COPY - 302)) | (1 << (MySqlParser.CPU - 302)) | (1 << (MySqlParser.CURSOR_NAME - 302)) | (1 << (MySqlParser.DATA - 302)) | (1 << (MySqlParser.DATAFILE - 302)) | (1 << (MySqlParser.DEALLOCATE - 302)) | (1 << (MySqlParser.DEFAULT_AUTH - 302)) | (1 << (MySqlParser.DEFINER - 302)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 302)) | (1 << (MySqlParser.DES_KEY_FILE - 302)) | (1 << (MySqlParser.DIRECTORY - 302)) | (1 << (MySqlParser.DISABLE - 302)) | (1 << (MySqlParser.DISCARD - 302)) | (1 << (MySqlParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySqlParser.DO - 334)) | (1 << (MySqlParser.DUMPFILE - 334)) | (1 << (MySqlParser.DUPLICATE - 334)) | (1 << (MySqlParser.DYNAMIC - 334)) | (1 << (MySqlParser.ENABLE - 334)) | (1 << (MySqlParser.ENCRYPTION - 334)) | (1 << (MySqlParser.END - 334)) | (1 << (MySqlParser.ENDS - 334)) | (1 << (MySqlParser.ENGINE - 334)) | (1 << (MySqlParser.ENGINES - 334)) | (1 << (MySqlParser.ERROR - 334)) | (1 << (MySqlParser.ERRORS - 334)) | (1 << (MySqlParser.ESCAPE - 334)) | (1 << (MySqlParser.EVEN - 334)) | (1 << (MySqlParser.EVENT - 334)) | (1 << (MySqlParser.EVENTS - 334)) | (1 << (MySqlParser.EVERY - 334)) | (1 << (MySqlParser.EXCHANGE - 334)) | (1 << (MySqlParser.EXCLUSIVE - 334)) | (1 << (MySqlParser.EXPIRE - 334)) | (1 << (MySqlParser.EXPORT - 334)) | (1 << (MySqlParser.EXTENDED - 334)) | (1 << (MySqlParser.EXTENT_SIZE - 334)) | (1 << (MySqlParser.FAST - 334)) | (1 << (MySqlParser.FAULTS - 334)) | (1 << (MySqlParser.FIELDS - 334)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySqlParser.FILTER - 334)) | (1 << (MySqlParser.FIRST - 334)) | (1 << (MySqlParser.FIXED - 334)) | (1 << (MySqlParser.FLUSH - 334)) | (1 << (MySqlParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySqlParser.FOUND - 366)) | (1 << (MySqlParser.FULL - 366)) | (1 << (MySqlParser.FUNCTION - 366)) | (1 << (MySqlParser.GENERAL - 366)) | (1 << (MySqlParser.GLOBAL - 366)) | (1 << (MySqlParser.GRANTS - 366)) | (1 << (MySqlParser.GROUP_REPLICATION - 366)) | (1 << (MySqlParser.HANDLER - 366)) | (1 << (MySqlParser.HASH - 366)) | (1 << (MySqlParser.HELP - 366)) | (1 << (MySqlParser.HOST - 366)) | (1 << (MySqlParser.HOSTS - 366)) | (1 << (MySqlParser.IDENTIFIED - 366)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySqlParser.IMPORT - 366)) | (1 << (MySqlParser.INDEXES - 366)) | (1 << (MySqlParser.INITIAL_SIZE - 366)) | (1 << (MySqlParser.INPLACE - 366)) | (1 << (MySqlParser.INSERT_METHOD - 366)) | (1 << (MySqlParser.INSTALL - 366)) | (1 << (MySqlParser.INSTANCE - 366)) | (1 << (MySqlParser.INVISIBLE - 366)) | (1 << (MySqlParser.INVOKER - 366)) | (1 << (MySqlParser.IO - 366)) | (1 << (MySqlParser.IO_THREAD - 366)) | (1 << (MySqlParser.IPC - 366)) | (1 << (MySqlParser.ISOLATION - 366)) | (1 << (MySqlParser.ISSUER - 366)) | (1 << (MySqlParser.JSON - 366)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySqlParser.LANGUAGE - 366)) | (1 << (MySqlParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.LEAVES - 398)) | (1 << (MySqlParser.LESS - 398)) | (1 << (MySqlParser.LEVEL - 398)) | (1 << (MySqlParser.LIST - 398)) | (1 << (MySqlParser.LOCAL - 398)) | (1 << (MySqlParser.LOGFILE - 398)) | (1 << (MySqlParser.LOGS - 398)) | (1 << (MySqlParser.MASTER - 398)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySqlParser.MASTER_DELAY - 398)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySqlParser.MASTER_HOST - 398)) | (1 << (MySqlParser.MASTER_LOG_FILE - 398)) | (1 << (MySqlParser.MASTER_LOG_POS - 398)) | (1 << (MySqlParser.MASTER_PASSWORD - 398)) | (1 << (MySqlParser.MASTER_PORT - 398)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySqlParser.MASTER_SSL - 398)) | (1 << (MySqlParser.MASTER_SSL_CA - 398)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_CERT - 398)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySqlParser.MASTER_SSL_CRL - 398)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_KEY - 398)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 398)) | (1 << (MySqlParser.MASTER_USER - 398)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySqlParser.MEDIUM - 430)) | (1 << (MySqlParser.MEMBER - 430)) | (1 << (MySqlParser.MERGE - 430)) | (1 << (MySqlParser.MESSAGE_TEXT - 430)) | (1 << (MySqlParser.MID - 430)) | (1 << (MySqlParser.MIGRATE - 430)) | (1 << (MySqlParser.MIN_ROWS - 430)) | (1 << (MySqlParser.MODE - 430)) | (1 << (MySqlParser.MODIFY - 430)) | (1 << (MySqlParser.MUTEX - 430)) | (1 << (MySqlParser.MYSQL - 430)) | (1 << (MySqlParser.MYSQL_ERRNO - 430)) | (1 << (MySqlParser.NAME - 430)) | (1 << (MySqlParser.NAMES - 430)) | (1 << (MySqlParser.NCHAR - 430)) | (1 << (MySqlParser.NEVER - 430)) | (1 << (MySqlParser.NEXT - 430)) | (1 << (MySqlParser.NO - 430)) | (1 << (MySqlParser.NODEGROUP - 430)) | (1 << (MySqlParser.NONE - 430)) | (1 << (MySqlParser.OFFLINE - 430)) | (1 << (MySqlParser.OFFSET - 430)) | (1 << (MySqlParser.OF - 430)) | (1 << (MySqlParser.OJ - 430)) | (1 << (MySqlParser.OLD_PASSWORD - 430)) | (1 << (MySqlParser.ONE - 430)) | (1 << (MySqlParser.ONLINE - 430)) | (1 << (MySqlParser.ONLY - 430)) | (1 << (MySqlParser.OPEN - 430)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySqlParser.OPTIONS - 462)) | (1 << (MySqlParser.OWNER - 462)) | (1 << (MySqlParser.PACK_KEYS - 462)) | (1 << (MySqlParser.PAGE - 462)) | (1 << (MySqlParser.PARSER - 462)) | (1 << (MySqlParser.PARTIAL - 462)) | (1 << (MySqlParser.PARTITIONING - 462)) | (1 << (MySqlParser.PARTITIONS - 462)) | (1 << (MySqlParser.PASSWORD - 462)) | (1 << (MySqlParser.PHASE - 462)) | (1 << (MySqlParser.PLUGIN - 462)) | (1 << (MySqlParser.PLUGIN_DIR - 462)) | (1 << (MySqlParser.PLUGINS - 462)) | (1 << (MySqlParser.PORT - 462)) | (1 << (MySqlParser.PRECEDES - 462)) | (1 << (MySqlParser.PREPARE - 462)) | (1 << (MySqlParser.PRESERVE - 462)) | (1 << (MySqlParser.PREV - 462)) | (1 << (MySqlParser.PROCESSLIST - 462)) | (1 << (MySqlParser.PROFILE - 462)) | (1 << (MySqlParser.PROFILES - 462)) | (1 << (MySqlParser.PROXY - 462)) | (1 << (MySqlParser.QUERY - 462)) | (1 << (MySqlParser.QUICK - 462)) | (1 << (MySqlParser.REBUILD - 462)) | (1 << (MySqlParser.RECOVER - 462)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySqlParser.REDUNDANT - 462)) | (1 << (MySqlParser.RELAY - 462)) | (1 << (MySqlParser.RELAY_LOG_FILE - 462)) | (1 << (MySqlParser.RELAY_LOG_POS - 462)) | (1 << (MySqlParser.RELAYLOG - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySqlParser.REMOVE - 494)) | (1 << (MySqlParser.REORGANIZE - 494)) | (1 << (MySqlParser.REPAIR - 494)) | (1 << (MySqlParser.REPLICATE_DO_DB - 494)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATION - 494)) | (1 << (MySqlParser.RESET - 494)) | (1 << (MySqlParser.RESUME - 494)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 494)) | (1 << (MySqlParser.RETURNS - 494)) | (1 << (MySqlParser.ROLE - 494)) | (1 << (MySqlParser.ROLLBACK - 494)) | (1 << (MySqlParser.ROLLUP - 494)) | (1 << (MySqlParser.ROTATE - 494)) | (1 << (MySqlParser.ROW - 494)) | (1 << (MySqlParser.ROWS - 494)) | (1 << (MySqlParser.ROW_FORMAT - 494)) | (1 << (MySqlParser.SAVEPOINT - 494)) | (1 << (MySqlParser.SCHEDULE - 494)) | (1 << (MySqlParser.SECURITY - 494)) | (1 << (MySqlParser.SERVER - 494)) | (1 << (MySqlParser.SESSION - 494)) | (1 << (MySqlParser.SHARE - 494)) | (1 << (MySqlParser.SHARED - 494)) | (1 << (MySqlParser.SIGNED - 494)) | (1 << (MySqlParser.SIMPLE - 494)) | (1 << (MySqlParser.SLAVE - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySqlParser.SLOW - 526)) | (1 << (MySqlParser.SNAPSHOT - 526)) | (1 << (MySqlParser.SOCKET - 526)) | (1 << (MySqlParser.SOME - 526)) | (1 << (MySqlParser.SONAME - 526)) | (1 << (MySqlParser.SOUNDS - 526)) | (1 << (MySqlParser.SOURCE - 526)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySqlParser.SQL_CACHE - 526)) | (1 << (MySqlParser.SQL_NO_CACHE - 526)) | (1 << (MySqlParser.SQL_THREAD - 526)) | (1 << (MySqlParser.START - 526)) | (1 << (MySqlParser.STARTS - 526)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 526)) | (1 << (MySqlParser.STATS_PERSISTENT - 526)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySqlParser.STATUS - 526)) | (1 << (MySqlParser.STOP - 526)) | (1 << (MySqlParser.STORAGE - 526)) | (1 << (MySqlParser.STRING - 526)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySqlParser.SUBJECT - 526)) | (1 << (MySqlParser.SUBPARTITION - 526)) | (1 << (MySqlParser.SUBPARTITIONS - 526)) | (1 << (MySqlParser.SUSPEND - 526)) | (1 << (MySqlParser.SWAPS - 526)) | (1 << (MySqlParser.SWITCHES - 526)) | (1 << (MySqlParser.TABLE_NAME - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySqlParser.TABLESPACE - 558)) | (1 << (MySqlParser.TEMPORARY - 558)) | (1 << (MySqlParser.TEMPTABLE - 558)) | (1 << (MySqlParser.THAN - 558)) | (1 << (MySqlParser.TRADITIONAL - 558)) | (1 << (MySqlParser.TRANSACTION - 558)) | (1 << (MySqlParser.TRANSACTIONAL - 558)) | (1 << (MySqlParser.TRIGGERS - 558)) | (1 << (MySqlParser.TRUNCATE - 558)) | (1 << (MySqlParser.UNDEFINED - 558)) | (1 << (MySqlParser.UNDOFILE - 558)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySqlParser.UNINSTALL - 558)) | (1 << (MySqlParser.UNKNOWN - 558)) | (1 << (MySqlParser.UNTIL - 558)) | (1 << (MySqlParser.UPGRADE - 558)) | (1 << (MySqlParser.USER - 558)) | (1 << (MySqlParser.USE_FRM - 558)) | (1 << (MySqlParser.USER_RESOURCES - 558)) | (1 << (MySqlParser.VALIDATION - 558)) | (1 << (MySqlParser.VALUE - 558)) | (1 << (MySqlParser.VARIABLES - 558)) | (1 << (MySqlParser.VIEW - 558)) | (1 << (MySqlParser.VISIBLE - 558)) | (1 << (MySqlParser.WAIT - 558)) | (1 << (MySqlParser.WARNINGS - 558)) | (1 << (MySqlParser.WITHOUT - 558)) | (1 << (MySqlParser.WORK - 558)) | (1 << (MySqlParser.WRAPPER - 558)) | (1 << (MySqlParser.X509 - 558)) | (1 << (MySqlParser.XA - 558)))) !== 0) || ((((_la - 590)) & ~0x1f) == 0 && ((1 << (_la - 590)) & ((1 << (MySqlParser.XML - 590)) | (1 << (MySqlParser.INTERNAL - 590)) | (1 << (MySqlParser.QUARTER - 590)) | (1 << (MySqlParser.MONTH - 590)) | (1 << (MySqlParser.DAY - 590)) | (1 << (MySqlParser.HOUR - 590)) | (1 << (MySqlParser.MINUTE - 590)) | (1 << (MySqlParser.WEEK - 590)) | (1 << (MySqlParser.SECOND - 590)) | (1 << (MySqlParser.MICROSECOND - 590)) | (1 << (MySqlParser.TABLES - 590)) | (1 << (MySqlParser.ROUTINE - 590)) | (1 << (MySqlParser.EXECUTE - 590)) | (1 << (MySqlParser.FILE - 590)) | (1 << (MySqlParser.PROCESS - 590)) | (1 << (MySqlParser.RELOAD - 590)) | (1 << (MySqlParser.SHUTDOWN - 590)) | (1 << (MySqlParser.SUPER - 590)) | (1 << (MySqlParser.PRIVILEGES - 590)) | (1 << (MySqlParser.AUDIT_ADMIN - 590)) | (1 << (MySqlParser.BACKUP_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 590)) | (1 << (MySqlParser.CLONE_ADMIN - 590)) | (1 << (MySqlParser.CONNECTION_ADMIN - 590)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 590)) | (1 << (MySqlParser.FIREWALL_ADMIN - 590)))) !== 0) || ((((_la - 622)) & ~0x1f) == 0 && ((1 << (_la - 622)) & ((1 << (MySqlParser.FIREWALL_USER - 622)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 622)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 622)) | (1 << (MySqlParser.NDB_STORED_USER - 622)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.REPLICATION_APPLIER - 622)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 622)) | (1 << (MySqlParser.ROLE_ADMIN - 622)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.SET_USER_ID - 622)) | (1 << (MySqlParser.SHOW_ROUTINE - 622)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 622)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 622)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 622)) | (1 << (MySqlParser.ARMSCII8 - 622)) | (1 << (MySqlParser.ASCII - 622)) | (1 << (MySqlParser.BIG5 - 622)) | (1 << (MySqlParser.CP1250 - 622)) | (1 << (MySqlParser.CP1251 - 622)) | (1 << (MySqlParser.CP1256 - 622)) | (1 << (MySqlParser.CP1257 - 622)) | (1 << (MySqlParser.CP850 - 622)) | (1 << (MySqlParser.CP852 - 622)) | (1 << (MySqlParser.CP866 - 622)) | (1 << (MySqlParser.CP932 - 622)) | (1 << (MySqlParser.DEC8 - 622)) | (1 << (MySqlParser.EUCJPMS - 622)) | (1 << (MySqlParser.EUCKR - 622)) | (1 << (MySqlParser.GB2312 - 622)))) !== 0) || ((((_la - 654)) & ~0x1f) == 0 && ((1 << (_la - 654)) & ((1 << (MySqlParser.GBK - 654)) | (1 << (MySqlParser.GEOSTD8 - 654)) | (1 << (MySqlParser.GREEK - 654)) | (1 << (MySqlParser.HEBREW - 654)) | (1 << (MySqlParser.HP8 - 654)) | (1 << (MySqlParser.KEYBCS2 - 654)) | (1 << (MySqlParser.KOI8R - 654)) | (1 << (MySqlParser.KOI8U - 654)) | (1 << (MySqlParser.LATIN1 - 654)) | (1 << (MySqlParser.LATIN2 - 654)) | (1 << (MySqlParser.LATIN5 - 654)) | (1 << (MySqlParser.LATIN7 - 654)) | (1 << (MySqlParser.MACCE - 654)) | (1 << (MySqlParser.MACROMAN - 654)) | (1 << (MySqlParser.SJIS - 654)) | (1 << (MySqlParser.SWE7 - 654)) | (1 << (MySqlParser.TIS620 - 654)) | (1 << (MySqlParser.UCS2 - 654)) | (1 << (MySqlParser.UJIS - 654)) | (1 << (MySqlParser.UTF16 - 654)) | (1 << (MySqlParser.UTF16LE - 654)) | (1 << (MySqlParser.UTF32 - 654)) | (1 << (MySqlParser.UTF8 - 654)) | (1 << (MySqlParser.UTF8MB3 - 654)) | (1 << (MySqlParser.UTF8MB4 - 654)) | (1 << (MySqlParser.ARCHIVE - 654)) | (1 << (MySqlParser.BLACKHOLE - 654)) | (1 << (MySqlParser.CSV - 654)) | (1 << (MySqlParser.FEDERATED - 654)) | (1 << (MySqlParser.INNODB - 654)) | (1 << (MySqlParser.MEMORY - 654)) | (1 << (MySqlParser.MRG_MYISAM - 654)))) !== 0) || ((((_la - 686)) & ~0x1f) == 0 && ((1 << (_la - 686)) & ((1 << (MySqlParser.MYISAM - 686)) | (1 << (MySqlParser.NDB - 686)) | (1 << (MySqlParser.NDBCLUSTER - 686)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 686)) | (1 << (MySqlParser.TOKUDB - 686)) | (1 << (MySqlParser.REPEATABLE - 686)) | (1 << (MySqlParser.COMMITTED - 686)) | (1 << (MySqlParser.UNCOMMITTED - 686)) | (1 << (MySqlParser.SERIALIZABLE - 686)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 686)) | (1 << (MySqlParser.LINESTRING - 686)) | (1 << (MySqlParser.MULTILINESTRING - 686)) | (1 << (MySqlParser.MULTIPOINT - 686)) | (1 << (MySqlParser.MULTIPOLYGON - 686)) | (1 << (MySqlParser.POINT - 686)) | (1 << (MySqlParser.POLYGON - 686)) | (1 << (MySqlParser.ABS - 686)) | (1 << (MySqlParser.ACOS - 686)) | (1 << (MySqlParser.ADDDATE - 686)) | (1 << (MySqlParser.ADDTIME - 686)) | (1 << (MySqlParser.AES_DECRYPT - 686)) | (1 << (MySqlParser.AES_ENCRYPT - 686)) | (1 << (MySqlParser.AREA - 686)) | (1 << (MySqlParser.ASBINARY - 686)) | (1 << (MySqlParser.ASIN - 686)) | (1 << (MySqlParser.ASTEXT - 686)) | (1 << (MySqlParser.ASWKB - 686)) | (1 << (MySqlParser.ASWKT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 686)))) !== 0) || ((((_la - 718)) & ~0x1f) == 0 && ((1 << (_la - 718)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 718)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 718)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 718)) | (1 << (MySqlParser.ATAN - 718)) | (1 << (MySqlParser.ATAN2 - 718)) | (1 << (MySqlParser.BENCHMARK - 718)) | (1 << (MySqlParser.BIN - 718)) | (1 << (MySqlParser.BIT_COUNT - 718)) | (1 << (MySqlParser.BIT_LENGTH - 718)) | (1 << (MySqlParser.BUFFER - 718)) | (1 << (MySqlParser.CATALOG_NAME - 718)) | (1 << (MySqlParser.CEIL - 718)) | (1 << (MySqlParser.CEILING - 718)) | (1 << (MySqlParser.CENTROID - 718)) | (1 << (MySqlParser.CHARACTER_LENGTH - 718)) | (1 << (MySqlParser.CHARSET - 718)) | (1 << (MySqlParser.CHAR_LENGTH - 718)) | (1 << (MySqlParser.COERCIBILITY - 718)) | (1 << (MySqlParser.COLLATION - 718)) | (1 << (MySqlParser.COMPRESS - 718)) | (1 << (MySqlParser.CONCAT - 718)) | (1 << (MySqlParser.CONCAT_WS - 718)) | (1 << (MySqlParser.CONNECTION_ID - 718)) | (1 << (MySqlParser.CONV - 718)) | (1 << (MySqlParser.CONVERT_TZ - 718)) | (1 << (MySqlParser.COS - 718)) | (1 << (MySqlParser.COT - 718)) | (1 << (MySqlParser.CRC32 - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 718)) | (1 << (MySqlParser.CREATE_DIGEST - 718)))) !== 0) || ((((_la - 750)) & ~0x1f) == 0 && ((1 << (_la - 750)) & ((1 << (MySqlParser.CROSSES - 750)) | (1 << (MySqlParser.DATEDIFF - 750)) | (1 << (MySqlParser.DATE_FORMAT - 750)) | (1 << (MySqlParser.DAYNAME - 750)) | (1 << (MySqlParser.DAYOFMONTH - 750)) | (1 << (MySqlParser.DAYOFWEEK - 750)) | (1 << (MySqlParser.DAYOFYEAR - 750)) | (1 << (MySqlParser.DECODE - 750)) | (1 << (MySqlParser.DEGREES - 750)) | (1 << (MySqlParser.DES_DECRYPT - 750)) | (1 << (MySqlParser.DES_ENCRYPT - 750)) | (1 << (MySqlParser.DIMENSION - 750)) | (1 << (MySqlParser.DISJOINT - 750)) | (1 << (MySqlParser.ELT - 750)) | (1 << (MySqlParser.ENCODE - 750)) | (1 << (MySqlParser.ENCRYPT - 750)) | (1 << (MySqlParser.ENDPOINT - 750)) | (1 << (MySqlParser.ENVELOPE - 750)) | (1 << (MySqlParser.EQUALS - 750)) | (1 << (MySqlParser.EXP - 750)) | (1 << (MySqlParser.EXPORT_SET - 750)) | (1 << (MySqlParser.EXTERIORRING - 750)) | (1 << (MySqlParser.EXTRACTVALUE - 750)) | (1 << (MySqlParser.FIELD - 750)) | (1 << (MySqlParser.FIND_IN_SET - 750)) | (1 << (MySqlParser.FLOOR - 750)) | (1 << (MySqlParser.FORMAT - 750)) | (1 << (MySqlParser.FOUND_ROWS - 750)) | (1 << (MySqlParser.FROM_BASE64 - 750)) | (1 << (MySqlParser.FROM_DAYS - 750)) | (1 << (MySqlParser.FROM_UNIXTIME - 750)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 750)))) !== 0) || ((((_la - 782)) & ~0x1f) == 0 && ((1 << (_la - 782)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYN - 782)) | (1 << (MySqlParser.GEOMETRYTYPE - 782)) | (1 << (MySqlParser.GEOMFROMTEXT - 782)) | (1 << (MySqlParser.GEOMFROMWKB - 782)) | (1 << (MySqlParser.GET_FORMAT - 782)) | (1 << (MySqlParser.GET_LOCK - 782)) | (1 << (MySqlParser.GLENGTH - 782)) | (1 << (MySqlParser.GREATEST - 782)) | (1 << (MySqlParser.GTID_SUBSET - 782)) | (1 << (MySqlParser.GTID_SUBTRACT - 782)) | (1 << (MySqlParser.HEX - 782)) | (1 << (MySqlParser.IFNULL - 782)) | (1 << (MySqlParser.INET6_ATON - 782)) | (1 << (MySqlParser.INET6_NTOA - 782)) | (1 << (MySqlParser.INET_ATON - 782)) | (1 << (MySqlParser.INET_NTOA - 782)) | (1 << (MySqlParser.INSTR - 782)) | (1 << (MySqlParser.INTERIORRINGN - 782)) | (1 << (MySqlParser.INTERSECTS - 782)) | (1 << (MySqlParser.ISCLOSED - 782)) | (1 << (MySqlParser.ISEMPTY - 782)) | (1 << (MySqlParser.ISNULL - 782)) | (1 << (MySqlParser.ISSIMPLE - 782)) | (1 << (MySqlParser.IS_FREE_LOCK - 782)) | (1 << (MySqlParser.IS_IPV4 - 782)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 782)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 782)))) !== 0) || ((((_la - 814)) & ~0x1f) == 0 && ((1 << (_la - 814)) & ((1 << (MySqlParser.IS_IPV6 - 814)) | (1 << (MySqlParser.IS_USED_LOCK - 814)) | (1 << (MySqlParser.LAST_INSERT_ID - 814)) | (1 << (MySqlParser.LCASE - 814)) | (1 << (MySqlParser.LEAST - 814)) | (1 << (MySqlParser.LENGTH - 814)) | (1 << (MySqlParser.LINEFROMTEXT - 814)) | (1 << (MySqlParser.LINEFROMWKB - 814)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 814)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 814)) | (1 << (MySqlParser.LN - 814)) | (1 << (MySqlParser.LOAD_FILE - 814)) | (1 << (MySqlParser.LOCATE - 814)) | (1 << (MySqlParser.LOG - 814)) | (1 << (MySqlParser.LOG10 - 814)) | (1 << (MySqlParser.LOG2 - 814)) | (1 << (MySqlParser.LOWER - 814)) | (1 << (MySqlParser.LPAD - 814)) | (1 << (MySqlParser.LTRIM - 814)) | (1 << (MySqlParser.MAKEDATE - 814)) | (1 << (MySqlParser.MAKETIME - 814)) | (1 << (MySqlParser.MAKE_SET - 814)) | (1 << (MySqlParser.MASTER_POS_WAIT - 814)) | (1 << (MySqlParser.MBRCONTAINS - 814)) | (1 << (MySqlParser.MBRDISJOINT - 814)) | (1 << (MySqlParser.MBREQUAL - 814)) | (1 << (MySqlParser.MBRINTERSECTS - 814)) | (1 << (MySqlParser.MBROVERLAPS - 814)) | (1 << (MySqlParser.MBRTOUCHES - 814)) | (1 << (MySqlParser.MBRWITHIN - 814)) | (1 << (MySqlParser.MD5 - 814)) | (1 << (MySqlParser.MLINEFROMTEXT - 814)))) !== 0) || ((((_la - 846)) & ~0x1f) == 0 && ((1 << (_la - 846)) & ((1 << (MySqlParser.MLINEFROMWKB - 846)) | (1 << (MySqlParser.MONTHNAME - 846)) | (1 << (MySqlParser.MPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MPOINTFROMWKB - 846)) | (1 << (MySqlParser.MPOLYFROMTEXT - 846)) | (1 << (MySqlParser.MPOLYFROMWKB - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 846)) | (1 << (MySqlParser.NAME_CONST - 846)) | (1 << (MySqlParser.NULLIF - 846)) | (1 << (MySqlParser.NUMGEOMETRIES - 846)) | (1 << (MySqlParser.NUMINTERIORRINGS - 846)) | (1 << (MySqlParser.NUMPOINTS - 846)) | (1 << (MySqlParser.OCT - 846)) | (1 << (MySqlParser.OCTET_LENGTH - 846)) | (1 << (MySqlParser.ORD - 846)) | (1 << (MySqlParser.OVERLAPS - 846)) | (1 << (MySqlParser.PERIOD_ADD - 846)) | (1 << (MySqlParser.PERIOD_DIFF - 846)) | (1 << (MySqlParser.PI - 846)) | (1 << (MySqlParser.POINTFROMTEXT - 846)) | (1 << (MySqlParser.POINTFROMWKB - 846)) | (1 << (MySqlParser.POINTN - 846)) | (1 << (MySqlParser.POLYFROMTEXT - 846)) | (1 << (MySqlParser.POLYFROMWKB - 846)) | (1 << (MySqlParser.POLYGONFROMTEXT - 846)) | (1 << (MySqlParser.POLYGONFROMWKB - 846)) | (1 << (MySqlParser.POW - 846)))) !== 0) || ((((_la - 878)) & ~0x1f) == 0 && ((1 << (_la - 878)) & ((1 << (MySqlParser.POWER - 878)) | (1 << (MySqlParser.QUOTE - 878)) | (1 << (MySqlParser.RADIANS - 878)) | (1 << (MySqlParser.RAND - 878)) | (1 << (MySqlParser.RANDOM_BYTES - 878)) | (1 << (MySqlParser.RELEASE_LOCK - 878)) | (1 << (MySqlParser.REVERSE - 878)) | (1 << (MySqlParser.ROUND - 878)) | (1 << (MySqlParser.ROW_COUNT - 878)) | (1 << (MySqlParser.RPAD - 878)) | (1 << (MySqlParser.RTRIM - 878)) | (1 << (MySqlParser.SEC_TO_TIME - 878)) | (1 << (MySqlParser.SESSION_USER - 878)) | (1 << (MySqlParser.SHA - 878)) | (1 << (MySqlParser.SHA1 - 878)) | (1 << (MySqlParser.SHA2 - 878)) | (1 << (MySqlParser.SCHEMA_NAME - 878)) | (1 << (MySqlParser.SIGN - 878)) | (1 << (MySqlParser.SIN - 878)) | (1 << (MySqlParser.SLEEP - 878)) | (1 << (MySqlParser.SOUNDEX - 878)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 878)) | (1 << (MySqlParser.SQRT - 878)) | (1 << (MySqlParser.SRID - 878)) | (1 << (MySqlParser.STARTPOINT - 878)) | (1 << (MySqlParser.STRCMP - 878)) | (1 << (MySqlParser.STR_TO_DATE - 878)) | (1 << (MySqlParser.ST_AREA - 878)) | (1 << (MySqlParser.ST_ASBINARY - 878)) | (1 << (MySqlParser.ST_ASTEXT - 878)) | (1 << (MySqlParser.ST_ASWKB - 878)) | (1 << (MySqlParser.ST_ASWKT - 878)))) !== 0) || ((((_la - 910)) & ~0x1f) == 0 && ((1 << (_la - 910)) & ((1 << (MySqlParser.ST_BUFFER - 910)) | (1 << (MySqlParser.ST_CENTROID - 910)) | (1 << (MySqlParser.ST_CONTAINS - 910)) | (1 << (MySqlParser.ST_CROSSES - 910)) | (1 << (MySqlParser.ST_DIFFERENCE - 910)) | (1 << (MySqlParser.ST_DIMENSION - 910)) | (1 << (MySqlParser.ST_DISJOINT - 910)) | (1 << (MySqlParser.ST_DISTANCE - 910)) | (1 << (MySqlParser.ST_ENDPOINT - 910)) | (1 << (MySqlParser.ST_ENVELOPE - 910)) | (1 << (MySqlParser.ST_EQUALS - 910)) | (1 << (MySqlParser.ST_EXTERIORRING - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYN - 910)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 910)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 910)) | (1 << (MySqlParser.ST_INTERIORRINGN - 910)) | (1 << (MySqlParser.ST_INTERSECTION - 910)) | (1 << (MySqlParser.ST_INTERSECTS - 910)) | (1 << (MySqlParser.ST_ISCLOSED - 910)) | (1 << (MySqlParser.ST_ISEMPTY - 910)) | (1 << (MySqlParser.ST_ISSIMPLE - 910)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 910)) | (1 << (MySqlParser.ST_LINEFROMWKB - 910)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 910)))) !== 0) || ((((_la - 942)) & ~0x1f) == 0 && ((1 << (_la - 942)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 942)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 942)) | (1 << (MySqlParser.ST_NUMPOINTS - 942)) | (1 << (MySqlParser.ST_OVERLAPS - 942)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 942)) | (1 << (MySqlParser.ST_POINTFROMWKB - 942)) | (1 << (MySqlParser.ST_POINTN - 942)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYFROMWKB - 942)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 942)) | (1 << (MySqlParser.ST_SRID - 942)) | (1 << (MySqlParser.ST_STARTPOINT - 942)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 942)) | (1 << (MySqlParser.ST_TOUCHES - 942)) | (1 << (MySqlParser.ST_UNION - 942)) | (1 << (MySqlParser.ST_WITHIN - 942)) | (1 << (MySqlParser.ST_X - 942)) | (1 << (MySqlParser.ST_Y - 942)) | (1 << (MySqlParser.SUBDATE - 942)) | (1 << (MySqlParser.SUBSTRING_INDEX - 942)) | (1 << (MySqlParser.SUBTIME - 942)) | (1 << (MySqlParser.SYSTEM_USER - 942)) | (1 << (MySqlParser.TAN - 942)) | (1 << (MySqlParser.TIMEDIFF - 942)) | (1 << (MySqlParser.TIMESTAMPADD - 942)) | (1 << (MySqlParser.TIMESTAMPDIFF - 942)) | (1 << (MySqlParser.TIME_FORMAT - 942)) | (1 << (MySqlParser.TIME_TO_SEC - 942)) | (1 << (MySqlParser.TOUCHES - 942)))) !== 0) || ((((_la - 974)) & ~0x1f) == 0 && ((1 << (_la - 974)) & ((1 << (MySqlParser.TO_BASE64 - 974)) | (1 << (MySqlParser.TO_DAYS - 974)) | (1 << (MySqlParser.TO_SECONDS - 974)) | (1 << (MySqlParser.UCASE - 974)) | (1 << (MySqlParser.UNCOMPRESS - 974)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 974)) | (1 << (MySqlParser.UNHEX - 974)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 974)) | (1 << (MySqlParser.UPDATEXML - 974)) | (1 << (MySqlParser.UPPER - 974)) | (1 << (MySqlParser.UUID - 974)) | (1 << (MySqlParser.UUID_SHORT - 974)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 974)) | (1 << (MySqlParser.VERSION - 974)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1 << (MySqlParser.WEEKDAY - 974)) | (1 << (MySqlParser.WEEKOFYEAR - 974)) | (1 << (MySqlParser.WEIGHT_STRING - 974)) | (1 << (MySqlParser.WITHIN - 974)) | (1 << (MySqlParser.YEARWEEK - 974)) | (1 << (MySqlParser.Y_FUNCTION - 974)) | (1 << (MySqlParser.X_FUNCTION - 974)))) !== 0) || ((((_la - 1034)) & ~0x1f) == 0 && ((1 << (_la - 1034)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (MySqlParser.STRING_LITERAL - 1034)) | (1 << (MySqlParser.ID - 1034)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1034)))) !== 0)) {
	            this.state = 4228;
	            this.uid();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	repeatStatement() {
	    let localctx = new RepeatStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, MySqlParser.RULE_repeatStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4234;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySqlParser.CURRENT - 32)) | (1 << (MySqlParser.DATABASE - 32)) | (1 << (MySqlParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySqlParser.LEFT || _la===MySqlParser.NUMBER || _la===MySqlParser.RIGHT || _la===MySqlParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.TIMESTAMP - 199)) | (1 << (MySqlParser.DATETIME - 199)) | (1 << (MySqlParser.YEAR - 199)) | (1 << (MySqlParser.TEXT - 199)) | (1 << (MySqlParser.ENUM - 199)) | (1 << (MySqlParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.JSON_VALID - 233)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySqlParser.AVG - 233)) | (1 << (MySqlParser.BIT_AND - 233)) | (1 << (MySqlParser.BIT_OR - 233)) | (1 << (MySqlParser.BIT_XOR - 233)) | (1 << (MySqlParser.COUNT - 233)) | (1 << (MySqlParser.GROUP_CONCAT - 233)) | (1 << (MySqlParser.MAX - 233)) | (1 << (MySqlParser.MIN - 233)) | (1 << (MySqlParser.STD - 233)) | (1 << (MySqlParser.STDDEV - 233)) | (1 << (MySqlParser.STDDEV_POP - 233)) | (1 << (MySqlParser.STDDEV_SAMP - 233)) | (1 << (MySqlParser.SUM - 233)) | (1 << (MySqlParser.VAR_POP - 233)) | (1 << (MySqlParser.VAR_SAMP - 233)) | (1 << (MySqlParser.VARIANCE - 233)) | (1 << (MySqlParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySqlParser.ACCOUNT - 270)) | (1 << (MySqlParser.ACTION - 270)) | (1 << (MySqlParser.AFTER - 270)) | (1 << (MySqlParser.AGGREGATE - 270)) | (1 << (MySqlParser.ALGORITHM - 270)) | (1 << (MySqlParser.ANY - 270)) | (1 << (MySqlParser.AT - 270)) | (1 << (MySqlParser.AUTHORS - 270)) | (1 << (MySqlParser.AUTOCOMMIT - 270)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySqlParser.AUTO_INCREMENT - 270)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 270)) | (1 << (MySqlParser.BEGIN - 270)) | (1 << (MySqlParser.BINLOG - 270)) | (1 << (MySqlParser.BIT - 270)) | (1 << (MySqlParser.BLOCK - 270)) | (1 << (MySqlParser.BOOL - 270)) | (1 << (MySqlParser.BOOLEAN - 270)) | (1 << (MySqlParser.BTREE - 270)) | (1 << (MySqlParser.CACHE - 270)) | (1 << (MySqlParser.CASCADED - 270)) | (1 << (MySqlParser.CHAIN - 270)) | (1 << (MySqlParser.CHANGED - 270)) | (1 << (MySqlParser.CHANNEL - 270)) | (1 << (MySqlParser.CHECKSUM - 270)) | (1 << (MySqlParser.PAGE_CHECKSUM - 270)) | (1 << (MySqlParser.CIPHER - 270)) | (1 << (MySqlParser.CLASS_ORIGIN - 270)) | (1 << (MySqlParser.CLIENT - 270)) | (1 << (MySqlParser.CLOSE - 270)) | (1 << (MySqlParser.COALESCE - 270)) | (1 << (MySqlParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySqlParser.COLUMNS - 302)) | (1 << (MySqlParser.COLUMN_FORMAT - 302)) | (1 << (MySqlParser.COLUMN_NAME - 302)) | (1 << (MySqlParser.COMMENT - 302)) | (1 << (MySqlParser.COMMIT - 302)) | (1 << (MySqlParser.COMPACT - 302)) | (1 << (MySqlParser.COMPLETION - 302)) | (1 << (MySqlParser.COMPRESSED - 302)) | (1 << (MySqlParser.COMPRESSION - 302)) | (1 << (MySqlParser.CONCURRENT - 302)) | (1 << (MySqlParser.CONNECTION - 302)) | (1 << (MySqlParser.CONSISTENT - 302)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySqlParser.CONSTRAINT_NAME - 302)) | (1 << (MySqlParser.CONTAINS - 302)) | (1 << (MySqlParser.CONTEXT - 302)) | (1 << (MySqlParser.CONTRIBUTORS - 302)) | (1 << (MySqlParser.COPY - 302)) | (1 << (MySqlParser.CPU - 302)) | (1 << (MySqlParser.CURSOR_NAME - 302)) | (1 << (MySqlParser.DATA - 302)) | (1 << (MySqlParser.DATAFILE - 302)) | (1 << (MySqlParser.DEALLOCATE - 302)) | (1 << (MySqlParser.DEFAULT_AUTH - 302)) | (1 << (MySqlParser.DEFINER - 302)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 302)) | (1 << (MySqlParser.DES_KEY_FILE - 302)) | (1 << (MySqlParser.DIRECTORY - 302)) | (1 << (MySqlParser.DISABLE - 302)) | (1 << (MySqlParser.DISCARD - 302)) | (1 << (MySqlParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySqlParser.DO - 334)) | (1 << (MySqlParser.DUMPFILE - 334)) | (1 << (MySqlParser.DUPLICATE - 334)) | (1 << (MySqlParser.DYNAMIC - 334)) | (1 << (MySqlParser.ENABLE - 334)) | (1 << (MySqlParser.ENCRYPTION - 334)) | (1 << (MySqlParser.END - 334)) | (1 << (MySqlParser.ENDS - 334)) | (1 << (MySqlParser.ENGINE - 334)) | (1 << (MySqlParser.ENGINES - 334)) | (1 << (MySqlParser.ERROR - 334)) | (1 << (MySqlParser.ERRORS - 334)) | (1 << (MySqlParser.ESCAPE - 334)) | (1 << (MySqlParser.EVEN - 334)) | (1 << (MySqlParser.EVENT - 334)) | (1 << (MySqlParser.EVENTS - 334)) | (1 << (MySqlParser.EVERY - 334)) | (1 << (MySqlParser.EXCHANGE - 334)) | (1 << (MySqlParser.EXCLUSIVE - 334)) | (1 << (MySqlParser.EXPIRE - 334)) | (1 << (MySqlParser.EXPORT - 334)) | (1 << (MySqlParser.EXTENDED - 334)) | (1 << (MySqlParser.EXTENT_SIZE - 334)) | (1 << (MySqlParser.FAST - 334)) | (1 << (MySqlParser.FAULTS - 334)) | (1 << (MySqlParser.FIELDS - 334)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySqlParser.FILTER - 334)) | (1 << (MySqlParser.FIRST - 334)) | (1 << (MySqlParser.FIXED - 334)) | (1 << (MySqlParser.FLUSH - 334)) | (1 << (MySqlParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySqlParser.FOUND - 366)) | (1 << (MySqlParser.FULL - 366)) | (1 << (MySqlParser.FUNCTION - 366)) | (1 << (MySqlParser.GENERAL - 366)) | (1 << (MySqlParser.GLOBAL - 366)) | (1 << (MySqlParser.GRANTS - 366)) | (1 << (MySqlParser.GROUP_REPLICATION - 366)) | (1 << (MySqlParser.HANDLER - 366)) | (1 << (MySqlParser.HASH - 366)) | (1 << (MySqlParser.HELP - 366)) | (1 << (MySqlParser.HOST - 366)) | (1 << (MySqlParser.HOSTS - 366)) | (1 << (MySqlParser.IDENTIFIED - 366)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySqlParser.IMPORT - 366)) | (1 << (MySqlParser.INDEXES - 366)) | (1 << (MySqlParser.INITIAL_SIZE - 366)) | (1 << (MySqlParser.INPLACE - 366)) | (1 << (MySqlParser.INSERT_METHOD - 366)) | (1 << (MySqlParser.INSTALL - 366)) | (1 << (MySqlParser.INSTANCE - 366)) | (1 << (MySqlParser.INVISIBLE - 366)) | (1 << (MySqlParser.INVOKER - 366)) | (1 << (MySqlParser.IO - 366)) | (1 << (MySqlParser.IO_THREAD - 366)) | (1 << (MySqlParser.IPC - 366)) | (1 << (MySqlParser.ISOLATION - 366)) | (1 << (MySqlParser.ISSUER - 366)) | (1 << (MySqlParser.JSON - 366)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySqlParser.LANGUAGE - 366)) | (1 << (MySqlParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.LEAVES - 398)) | (1 << (MySqlParser.LESS - 398)) | (1 << (MySqlParser.LEVEL - 398)) | (1 << (MySqlParser.LIST - 398)) | (1 << (MySqlParser.LOCAL - 398)) | (1 << (MySqlParser.LOGFILE - 398)) | (1 << (MySqlParser.LOGS - 398)) | (1 << (MySqlParser.MASTER - 398)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySqlParser.MASTER_DELAY - 398)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySqlParser.MASTER_HOST - 398)) | (1 << (MySqlParser.MASTER_LOG_FILE - 398)) | (1 << (MySqlParser.MASTER_LOG_POS - 398)) | (1 << (MySqlParser.MASTER_PASSWORD - 398)) | (1 << (MySqlParser.MASTER_PORT - 398)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySqlParser.MASTER_SSL - 398)) | (1 << (MySqlParser.MASTER_SSL_CA - 398)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_CERT - 398)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySqlParser.MASTER_SSL_CRL - 398)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_KEY - 398)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 398)) | (1 << (MySqlParser.MASTER_USER - 398)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySqlParser.MEDIUM - 430)) | (1 << (MySqlParser.MEMBER - 430)) | (1 << (MySqlParser.MERGE - 430)) | (1 << (MySqlParser.MESSAGE_TEXT - 430)) | (1 << (MySqlParser.MID - 430)) | (1 << (MySqlParser.MIGRATE - 430)) | (1 << (MySqlParser.MIN_ROWS - 430)) | (1 << (MySqlParser.MODE - 430)) | (1 << (MySqlParser.MODIFY - 430)) | (1 << (MySqlParser.MUTEX - 430)) | (1 << (MySqlParser.MYSQL - 430)) | (1 << (MySqlParser.MYSQL_ERRNO - 430)) | (1 << (MySqlParser.NAME - 430)) | (1 << (MySqlParser.NAMES - 430)) | (1 << (MySqlParser.NCHAR - 430)) | (1 << (MySqlParser.NEVER - 430)) | (1 << (MySqlParser.NEXT - 430)) | (1 << (MySqlParser.NO - 430)) | (1 << (MySqlParser.NODEGROUP - 430)) | (1 << (MySqlParser.NONE - 430)) | (1 << (MySqlParser.OFFLINE - 430)) | (1 << (MySqlParser.OFFSET - 430)) | (1 << (MySqlParser.OF - 430)) | (1 << (MySqlParser.OJ - 430)) | (1 << (MySqlParser.OLD_PASSWORD - 430)) | (1 << (MySqlParser.ONE - 430)) | (1 << (MySqlParser.ONLINE - 430)) | (1 << (MySqlParser.ONLY - 430)) | (1 << (MySqlParser.OPEN - 430)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySqlParser.OPTIONS - 462)) | (1 << (MySqlParser.OWNER - 462)) | (1 << (MySqlParser.PACK_KEYS - 462)) | (1 << (MySqlParser.PAGE - 462)) | (1 << (MySqlParser.PARSER - 462)) | (1 << (MySqlParser.PARTIAL - 462)) | (1 << (MySqlParser.PARTITIONING - 462)) | (1 << (MySqlParser.PARTITIONS - 462)) | (1 << (MySqlParser.PASSWORD - 462)) | (1 << (MySqlParser.PHASE - 462)) | (1 << (MySqlParser.PLUGIN - 462)) | (1 << (MySqlParser.PLUGIN_DIR - 462)) | (1 << (MySqlParser.PLUGINS - 462)) | (1 << (MySqlParser.PORT - 462)) | (1 << (MySqlParser.PRECEDES - 462)) | (1 << (MySqlParser.PREPARE - 462)) | (1 << (MySqlParser.PRESERVE - 462)) | (1 << (MySqlParser.PREV - 462)) | (1 << (MySqlParser.PROCESSLIST - 462)) | (1 << (MySqlParser.PROFILE - 462)) | (1 << (MySqlParser.PROFILES - 462)) | (1 << (MySqlParser.PROXY - 462)) | (1 << (MySqlParser.QUERY - 462)) | (1 << (MySqlParser.QUICK - 462)) | (1 << (MySqlParser.REBUILD - 462)) | (1 << (MySqlParser.RECOVER - 462)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySqlParser.REDUNDANT - 462)) | (1 << (MySqlParser.RELAY - 462)) | (1 << (MySqlParser.RELAY_LOG_FILE - 462)) | (1 << (MySqlParser.RELAY_LOG_POS - 462)) | (1 << (MySqlParser.RELAYLOG - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySqlParser.REMOVE - 494)) | (1 << (MySqlParser.REORGANIZE - 494)) | (1 << (MySqlParser.REPAIR - 494)) | (1 << (MySqlParser.REPLICATE_DO_DB - 494)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATION - 494)) | (1 << (MySqlParser.RESET - 494)) | (1 << (MySqlParser.RESUME - 494)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 494)) | (1 << (MySqlParser.RETURNS - 494)) | (1 << (MySqlParser.ROLE - 494)) | (1 << (MySqlParser.ROLLBACK - 494)) | (1 << (MySqlParser.ROLLUP - 494)) | (1 << (MySqlParser.ROTATE - 494)) | (1 << (MySqlParser.ROW - 494)) | (1 << (MySqlParser.ROWS - 494)) | (1 << (MySqlParser.ROW_FORMAT - 494)) | (1 << (MySqlParser.SAVEPOINT - 494)) | (1 << (MySqlParser.SCHEDULE - 494)) | (1 << (MySqlParser.SECURITY - 494)) | (1 << (MySqlParser.SERVER - 494)) | (1 << (MySqlParser.SESSION - 494)) | (1 << (MySqlParser.SHARE - 494)) | (1 << (MySqlParser.SHARED - 494)) | (1 << (MySqlParser.SIGNED - 494)) | (1 << (MySqlParser.SIMPLE - 494)) | (1 << (MySqlParser.SLAVE - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySqlParser.SLOW - 526)) | (1 << (MySqlParser.SNAPSHOT - 526)) | (1 << (MySqlParser.SOCKET - 526)) | (1 << (MySqlParser.SOME - 526)) | (1 << (MySqlParser.SONAME - 526)) | (1 << (MySqlParser.SOUNDS - 526)) | (1 << (MySqlParser.SOURCE - 526)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySqlParser.SQL_CACHE - 526)) | (1 << (MySqlParser.SQL_NO_CACHE - 526)) | (1 << (MySqlParser.SQL_THREAD - 526)) | (1 << (MySqlParser.START - 526)) | (1 << (MySqlParser.STARTS - 526)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 526)) | (1 << (MySqlParser.STATS_PERSISTENT - 526)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySqlParser.STATUS - 526)) | (1 << (MySqlParser.STOP - 526)) | (1 << (MySqlParser.STORAGE - 526)) | (1 << (MySqlParser.STRING - 526)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySqlParser.SUBJECT - 526)) | (1 << (MySqlParser.SUBPARTITION - 526)) | (1 << (MySqlParser.SUBPARTITIONS - 526)) | (1 << (MySqlParser.SUSPEND - 526)) | (1 << (MySqlParser.SWAPS - 526)) | (1 << (MySqlParser.SWITCHES - 526)) | (1 << (MySqlParser.TABLE_NAME - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySqlParser.TABLESPACE - 558)) | (1 << (MySqlParser.TEMPORARY - 558)) | (1 << (MySqlParser.TEMPTABLE - 558)) | (1 << (MySqlParser.THAN - 558)) | (1 << (MySqlParser.TRADITIONAL - 558)) | (1 << (MySqlParser.TRANSACTION - 558)) | (1 << (MySqlParser.TRANSACTIONAL - 558)) | (1 << (MySqlParser.TRIGGERS - 558)) | (1 << (MySqlParser.TRUNCATE - 558)) | (1 << (MySqlParser.UNDEFINED - 558)) | (1 << (MySqlParser.UNDOFILE - 558)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySqlParser.UNINSTALL - 558)) | (1 << (MySqlParser.UNKNOWN - 558)) | (1 << (MySqlParser.UNTIL - 558)) | (1 << (MySqlParser.UPGRADE - 558)) | (1 << (MySqlParser.USER - 558)) | (1 << (MySqlParser.USE_FRM - 558)) | (1 << (MySqlParser.USER_RESOURCES - 558)) | (1 << (MySqlParser.VALIDATION - 558)) | (1 << (MySqlParser.VALUE - 558)) | (1 << (MySqlParser.VARIABLES - 558)) | (1 << (MySqlParser.VIEW - 558)) | (1 << (MySqlParser.VISIBLE - 558)) | (1 << (MySqlParser.WAIT - 558)) | (1 << (MySqlParser.WARNINGS - 558)) | (1 << (MySqlParser.WITHOUT - 558)) | (1 << (MySqlParser.WORK - 558)) | (1 << (MySqlParser.WRAPPER - 558)) | (1 << (MySqlParser.X509 - 558)) | (1 << (MySqlParser.XA - 558)))) !== 0) || ((((_la - 590)) & ~0x1f) == 0 && ((1 << (_la - 590)) & ((1 << (MySqlParser.XML - 590)) | (1 << (MySqlParser.INTERNAL - 590)) | (1 << (MySqlParser.QUARTER - 590)) | (1 << (MySqlParser.MONTH - 590)) | (1 << (MySqlParser.DAY - 590)) | (1 << (MySqlParser.HOUR - 590)) | (1 << (MySqlParser.MINUTE - 590)) | (1 << (MySqlParser.WEEK - 590)) | (1 << (MySqlParser.SECOND - 590)) | (1 << (MySqlParser.MICROSECOND - 590)) | (1 << (MySqlParser.TABLES - 590)) | (1 << (MySqlParser.ROUTINE - 590)) | (1 << (MySqlParser.EXECUTE - 590)) | (1 << (MySqlParser.FILE - 590)) | (1 << (MySqlParser.PROCESS - 590)) | (1 << (MySqlParser.RELOAD - 590)) | (1 << (MySqlParser.SHUTDOWN - 590)) | (1 << (MySqlParser.SUPER - 590)) | (1 << (MySqlParser.PRIVILEGES - 590)) | (1 << (MySqlParser.AUDIT_ADMIN - 590)) | (1 << (MySqlParser.BACKUP_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 590)) | (1 << (MySqlParser.CLONE_ADMIN - 590)) | (1 << (MySqlParser.CONNECTION_ADMIN - 590)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 590)) | (1 << (MySqlParser.FIREWALL_ADMIN - 590)))) !== 0) || ((((_la - 622)) & ~0x1f) == 0 && ((1 << (_la - 622)) & ((1 << (MySqlParser.FIREWALL_USER - 622)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 622)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 622)) | (1 << (MySqlParser.NDB_STORED_USER - 622)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.REPLICATION_APPLIER - 622)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 622)) | (1 << (MySqlParser.ROLE_ADMIN - 622)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.SET_USER_ID - 622)) | (1 << (MySqlParser.SHOW_ROUTINE - 622)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 622)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 622)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 622)) | (1 << (MySqlParser.ARMSCII8 - 622)) | (1 << (MySqlParser.ASCII - 622)) | (1 << (MySqlParser.BIG5 - 622)) | (1 << (MySqlParser.CP1250 - 622)) | (1 << (MySqlParser.CP1251 - 622)) | (1 << (MySqlParser.CP1256 - 622)) | (1 << (MySqlParser.CP1257 - 622)) | (1 << (MySqlParser.CP850 - 622)) | (1 << (MySqlParser.CP852 - 622)) | (1 << (MySqlParser.CP866 - 622)) | (1 << (MySqlParser.CP932 - 622)) | (1 << (MySqlParser.DEC8 - 622)) | (1 << (MySqlParser.EUCJPMS - 622)) | (1 << (MySqlParser.EUCKR - 622)) | (1 << (MySqlParser.GB2312 - 622)))) !== 0) || ((((_la - 654)) & ~0x1f) == 0 && ((1 << (_la - 654)) & ((1 << (MySqlParser.GBK - 654)) | (1 << (MySqlParser.GEOSTD8 - 654)) | (1 << (MySqlParser.GREEK - 654)) | (1 << (MySqlParser.HEBREW - 654)) | (1 << (MySqlParser.HP8 - 654)) | (1 << (MySqlParser.KEYBCS2 - 654)) | (1 << (MySqlParser.KOI8R - 654)) | (1 << (MySqlParser.KOI8U - 654)) | (1 << (MySqlParser.LATIN1 - 654)) | (1 << (MySqlParser.LATIN2 - 654)) | (1 << (MySqlParser.LATIN5 - 654)) | (1 << (MySqlParser.LATIN7 - 654)) | (1 << (MySqlParser.MACCE - 654)) | (1 << (MySqlParser.MACROMAN - 654)) | (1 << (MySqlParser.SJIS - 654)) | (1 << (MySqlParser.SWE7 - 654)) | (1 << (MySqlParser.TIS620 - 654)) | (1 << (MySqlParser.UCS2 - 654)) | (1 << (MySqlParser.UJIS - 654)) | (1 << (MySqlParser.UTF16 - 654)) | (1 << (MySqlParser.UTF16LE - 654)) | (1 << (MySqlParser.UTF32 - 654)) | (1 << (MySqlParser.UTF8 - 654)) | (1 << (MySqlParser.UTF8MB3 - 654)) | (1 << (MySqlParser.UTF8MB4 - 654)) | (1 << (MySqlParser.ARCHIVE - 654)) | (1 << (MySqlParser.BLACKHOLE - 654)) | (1 << (MySqlParser.CSV - 654)) | (1 << (MySqlParser.FEDERATED - 654)) | (1 << (MySqlParser.INNODB - 654)) | (1 << (MySqlParser.MEMORY - 654)) | (1 << (MySqlParser.MRG_MYISAM - 654)))) !== 0) || ((((_la - 686)) & ~0x1f) == 0 && ((1 << (_la - 686)) & ((1 << (MySqlParser.MYISAM - 686)) | (1 << (MySqlParser.NDB - 686)) | (1 << (MySqlParser.NDBCLUSTER - 686)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 686)) | (1 << (MySqlParser.TOKUDB - 686)) | (1 << (MySqlParser.REPEATABLE - 686)) | (1 << (MySqlParser.COMMITTED - 686)) | (1 << (MySqlParser.UNCOMMITTED - 686)) | (1 << (MySqlParser.SERIALIZABLE - 686)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 686)) | (1 << (MySqlParser.LINESTRING - 686)) | (1 << (MySqlParser.MULTILINESTRING - 686)) | (1 << (MySqlParser.MULTIPOINT - 686)) | (1 << (MySqlParser.MULTIPOLYGON - 686)) | (1 << (MySqlParser.POINT - 686)) | (1 << (MySqlParser.POLYGON - 686)) | (1 << (MySqlParser.ABS - 686)) | (1 << (MySqlParser.ACOS - 686)) | (1 << (MySqlParser.ADDDATE - 686)) | (1 << (MySqlParser.ADDTIME - 686)) | (1 << (MySqlParser.AES_DECRYPT - 686)) | (1 << (MySqlParser.AES_ENCRYPT - 686)) | (1 << (MySqlParser.AREA - 686)) | (1 << (MySqlParser.ASBINARY - 686)) | (1 << (MySqlParser.ASIN - 686)) | (1 << (MySqlParser.ASTEXT - 686)) | (1 << (MySqlParser.ASWKB - 686)) | (1 << (MySqlParser.ASWKT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 686)))) !== 0) || ((((_la - 718)) & ~0x1f) == 0 && ((1 << (_la - 718)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 718)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 718)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 718)) | (1 << (MySqlParser.ATAN - 718)) | (1 << (MySqlParser.ATAN2 - 718)) | (1 << (MySqlParser.BENCHMARK - 718)) | (1 << (MySqlParser.BIN - 718)) | (1 << (MySqlParser.BIT_COUNT - 718)) | (1 << (MySqlParser.BIT_LENGTH - 718)) | (1 << (MySqlParser.BUFFER - 718)) | (1 << (MySqlParser.CATALOG_NAME - 718)) | (1 << (MySqlParser.CEIL - 718)) | (1 << (MySqlParser.CEILING - 718)) | (1 << (MySqlParser.CENTROID - 718)) | (1 << (MySqlParser.CHARACTER_LENGTH - 718)) | (1 << (MySqlParser.CHARSET - 718)) | (1 << (MySqlParser.CHAR_LENGTH - 718)) | (1 << (MySqlParser.COERCIBILITY - 718)) | (1 << (MySqlParser.COLLATION - 718)) | (1 << (MySqlParser.COMPRESS - 718)) | (1 << (MySqlParser.CONCAT - 718)) | (1 << (MySqlParser.CONCAT_WS - 718)) | (1 << (MySqlParser.CONNECTION_ID - 718)) | (1 << (MySqlParser.CONV - 718)) | (1 << (MySqlParser.CONVERT_TZ - 718)) | (1 << (MySqlParser.COS - 718)) | (1 << (MySqlParser.COT - 718)) | (1 << (MySqlParser.CRC32 - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 718)) | (1 << (MySqlParser.CREATE_DIGEST - 718)))) !== 0) || ((((_la - 750)) & ~0x1f) == 0 && ((1 << (_la - 750)) & ((1 << (MySqlParser.CROSSES - 750)) | (1 << (MySqlParser.DATEDIFF - 750)) | (1 << (MySqlParser.DATE_FORMAT - 750)) | (1 << (MySqlParser.DAYNAME - 750)) | (1 << (MySqlParser.DAYOFMONTH - 750)) | (1 << (MySqlParser.DAYOFWEEK - 750)) | (1 << (MySqlParser.DAYOFYEAR - 750)) | (1 << (MySqlParser.DECODE - 750)) | (1 << (MySqlParser.DEGREES - 750)) | (1 << (MySqlParser.DES_DECRYPT - 750)) | (1 << (MySqlParser.DES_ENCRYPT - 750)) | (1 << (MySqlParser.DIMENSION - 750)) | (1 << (MySqlParser.DISJOINT - 750)) | (1 << (MySqlParser.ELT - 750)) | (1 << (MySqlParser.ENCODE - 750)) | (1 << (MySqlParser.ENCRYPT - 750)) | (1 << (MySqlParser.ENDPOINT - 750)) | (1 << (MySqlParser.ENVELOPE - 750)) | (1 << (MySqlParser.EQUALS - 750)) | (1 << (MySqlParser.EXP - 750)) | (1 << (MySqlParser.EXPORT_SET - 750)) | (1 << (MySqlParser.EXTERIORRING - 750)) | (1 << (MySqlParser.EXTRACTVALUE - 750)) | (1 << (MySqlParser.FIELD - 750)) | (1 << (MySqlParser.FIND_IN_SET - 750)) | (1 << (MySqlParser.FLOOR - 750)) | (1 << (MySqlParser.FORMAT - 750)) | (1 << (MySqlParser.FOUND_ROWS - 750)) | (1 << (MySqlParser.FROM_BASE64 - 750)) | (1 << (MySqlParser.FROM_DAYS - 750)) | (1 << (MySqlParser.FROM_UNIXTIME - 750)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 750)))) !== 0) || ((((_la - 782)) & ~0x1f) == 0 && ((1 << (_la - 782)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYN - 782)) | (1 << (MySqlParser.GEOMETRYTYPE - 782)) | (1 << (MySqlParser.GEOMFROMTEXT - 782)) | (1 << (MySqlParser.GEOMFROMWKB - 782)) | (1 << (MySqlParser.GET_FORMAT - 782)) | (1 << (MySqlParser.GET_LOCK - 782)) | (1 << (MySqlParser.GLENGTH - 782)) | (1 << (MySqlParser.GREATEST - 782)) | (1 << (MySqlParser.GTID_SUBSET - 782)) | (1 << (MySqlParser.GTID_SUBTRACT - 782)) | (1 << (MySqlParser.HEX - 782)) | (1 << (MySqlParser.IFNULL - 782)) | (1 << (MySqlParser.INET6_ATON - 782)) | (1 << (MySqlParser.INET6_NTOA - 782)) | (1 << (MySqlParser.INET_ATON - 782)) | (1 << (MySqlParser.INET_NTOA - 782)) | (1 << (MySqlParser.INSTR - 782)) | (1 << (MySqlParser.INTERIORRINGN - 782)) | (1 << (MySqlParser.INTERSECTS - 782)) | (1 << (MySqlParser.ISCLOSED - 782)) | (1 << (MySqlParser.ISEMPTY - 782)) | (1 << (MySqlParser.ISNULL - 782)) | (1 << (MySqlParser.ISSIMPLE - 782)) | (1 << (MySqlParser.IS_FREE_LOCK - 782)) | (1 << (MySqlParser.IS_IPV4 - 782)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 782)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 782)))) !== 0) || ((((_la - 814)) & ~0x1f) == 0 && ((1 << (_la - 814)) & ((1 << (MySqlParser.IS_IPV6 - 814)) | (1 << (MySqlParser.IS_USED_LOCK - 814)) | (1 << (MySqlParser.LAST_INSERT_ID - 814)) | (1 << (MySqlParser.LCASE - 814)) | (1 << (MySqlParser.LEAST - 814)) | (1 << (MySqlParser.LENGTH - 814)) | (1 << (MySqlParser.LINEFROMTEXT - 814)) | (1 << (MySqlParser.LINEFROMWKB - 814)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 814)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 814)) | (1 << (MySqlParser.LN - 814)) | (1 << (MySqlParser.LOAD_FILE - 814)) | (1 << (MySqlParser.LOCATE - 814)) | (1 << (MySqlParser.LOG - 814)) | (1 << (MySqlParser.LOG10 - 814)) | (1 << (MySqlParser.LOG2 - 814)) | (1 << (MySqlParser.LOWER - 814)) | (1 << (MySqlParser.LPAD - 814)) | (1 << (MySqlParser.LTRIM - 814)) | (1 << (MySqlParser.MAKEDATE - 814)) | (1 << (MySqlParser.MAKETIME - 814)) | (1 << (MySqlParser.MAKE_SET - 814)) | (1 << (MySqlParser.MASTER_POS_WAIT - 814)) | (1 << (MySqlParser.MBRCONTAINS - 814)) | (1 << (MySqlParser.MBRDISJOINT - 814)) | (1 << (MySqlParser.MBREQUAL - 814)) | (1 << (MySqlParser.MBRINTERSECTS - 814)) | (1 << (MySqlParser.MBROVERLAPS - 814)) | (1 << (MySqlParser.MBRTOUCHES - 814)) | (1 << (MySqlParser.MBRWITHIN - 814)) | (1 << (MySqlParser.MD5 - 814)) | (1 << (MySqlParser.MLINEFROMTEXT - 814)))) !== 0) || ((((_la - 846)) & ~0x1f) == 0 && ((1 << (_la - 846)) & ((1 << (MySqlParser.MLINEFROMWKB - 846)) | (1 << (MySqlParser.MONTHNAME - 846)) | (1 << (MySqlParser.MPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MPOINTFROMWKB - 846)) | (1 << (MySqlParser.MPOLYFROMTEXT - 846)) | (1 << (MySqlParser.MPOLYFROMWKB - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 846)) | (1 << (MySqlParser.NAME_CONST - 846)) | (1 << (MySqlParser.NULLIF - 846)) | (1 << (MySqlParser.NUMGEOMETRIES - 846)) | (1 << (MySqlParser.NUMINTERIORRINGS - 846)) | (1 << (MySqlParser.NUMPOINTS - 846)) | (1 << (MySqlParser.OCT - 846)) | (1 << (MySqlParser.OCTET_LENGTH - 846)) | (1 << (MySqlParser.ORD - 846)) | (1 << (MySqlParser.OVERLAPS - 846)) | (1 << (MySqlParser.PERIOD_ADD - 846)) | (1 << (MySqlParser.PERIOD_DIFF - 846)) | (1 << (MySqlParser.PI - 846)) | (1 << (MySqlParser.POINTFROMTEXT - 846)) | (1 << (MySqlParser.POINTFROMWKB - 846)) | (1 << (MySqlParser.POINTN - 846)) | (1 << (MySqlParser.POLYFROMTEXT - 846)) | (1 << (MySqlParser.POLYFROMWKB - 846)) | (1 << (MySqlParser.POLYGONFROMTEXT - 846)) | (1 << (MySqlParser.POLYGONFROMWKB - 846)) | (1 << (MySqlParser.POW - 846)))) !== 0) || ((((_la - 878)) & ~0x1f) == 0 && ((1 << (_la - 878)) & ((1 << (MySqlParser.POWER - 878)) | (1 << (MySqlParser.QUOTE - 878)) | (1 << (MySqlParser.RADIANS - 878)) | (1 << (MySqlParser.RAND - 878)) | (1 << (MySqlParser.RANDOM_BYTES - 878)) | (1 << (MySqlParser.RELEASE_LOCK - 878)) | (1 << (MySqlParser.REVERSE - 878)) | (1 << (MySqlParser.ROUND - 878)) | (1 << (MySqlParser.ROW_COUNT - 878)) | (1 << (MySqlParser.RPAD - 878)) | (1 << (MySqlParser.RTRIM - 878)) | (1 << (MySqlParser.SEC_TO_TIME - 878)) | (1 << (MySqlParser.SESSION_USER - 878)) | (1 << (MySqlParser.SHA - 878)) | (1 << (MySqlParser.SHA1 - 878)) | (1 << (MySqlParser.SHA2 - 878)) | (1 << (MySqlParser.SCHEMA_NAME - 878)) | (1 << (MySqlParser.SIGN - 878)) | (1 << (MySqlParser.SIN - 878)) | (1 << (MySqlParser.SLEEP - 878)) | (1 << (MySqlParser.SOUNDEX - 878)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 878)) | (1 << (MySqlParser.SQRT - 878)) | (1 << (MySqlParser.SRID - 878)) | (1 << (MySqlParser.STARTPOINT - 878)) | (1 << (MySqlParser.STRCMP - 878)) | (1 << (MySqlParser.STR_TO_DATE - 878)) | (1 << (MySqlParser.ST_AREA - 878)) | (1 << (MySqlParser.ST_ASBINARY - 878)) | (1 << (MySqlParser.ST_ASTEXT - 878)) | (1 << (MySqlParser.ST_ASWKB - 878)) | (1 << (MySqlParser.ST_ASWKT - 878)))) !== 0) || ((((_la - 910)) & ~0x1f) == 0 && ((1 << (_la - 910)) & ((1 << (MySqlParser.ST_BUFFER - 910)) | (1 << (MySqlParser.ST_CENTROID - 910)) | (1 << (MySqlParser.ST_CONTAINS - 910)) | (1 << (MySqlParser.ST_CROSSES - 910)) | (1 << (MySqlParser.ST_DIFFERENCE - 910)) | (1 << (MySqlParser.ST_DIMENSION - 910)) | (1 << (MySqlParser.ST_DISJOINT - 910)) | (1 << (MySqlParser.ST_DISTANCE - 910)) | (1 << (MySqlParser.ST_ENDPOINT - 910)) | (1 << (MySqlParser.ST_ENVELOPE - 910)) | (1 << (MySqlParser.ST_EQUALS - 910)) | (1 << (MySqlParser.ST_EXTERIORRING - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYN - 910)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 910)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 910)) | (1 << (MySqlParser.ST_INTERIORRINGN - 910)) | (1 << (MySqlParser.ST_INTERSECTION - 910)) | (1 << (MySqlParser.ST_INTERSECTS - 910)) | (1 << (MySqlParser.ST_ISCLOSED - 910)) | (1 << (MySqlParser.ST_ISEMPTY - 910)) | (1 << (MySqlParser.ST_ISSIMPLE - 910)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 910)) | (1 << (MySqlParser.ST_LINEFROMWKB - 910)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 910)))) !== 0) || ((((_la - 942)) & ~0x1f) == 0 && ((1 << (_la - 942)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 942)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 942)) | (1 << (MySqlParser.ST_NUMPOINTS - 942)) | (1 << (MySqlParser.ST_OVERLAPS - 942)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 942)) | (1 << (MySqlParser.ST_POINTFROMWKB - 942)) | (1 << (MySqlParser.ST_POINTN - 942)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYFROMWKB - 942)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 942)) | (1 << (MySqlParser.ST_SRID - 942)) | (1 << (MySqlParser.ST_STARTPOINT - 942)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 942)) | (1 << (MySqlParser.ST_TOUCHES - 942)) | (1 << (MySqlParser.ST_UNION - 942)) | (1 << (MySqlParser.ST_WITHIN - 942)) | (1 << (MySqlParser.ST_X - 942)) | (1 << (MySqlParser.ST_Y - 942)) | (1 << (MySqlParser.SUBDATE - 942)) | (1 << (MySqlParser.SUBSTRING_INDEX - 942)) | (1 << (MySqlParser.SUBTIME - 942)) | (1 << (MySqlParser.SYSTEM_USER - 942)) | (1 << (MySqlParser.TAN - 942)) | (1 << (MySqlParser.TIMEDIFF - 942)) | (1 << (MySqlParser.TIMESTAMPADD - 942)) | (1 << (MySqlParser.TIMESTAMPDIFF - 942)) | (1 << (MySqlParser.TIME_FORMAT - 942)) | (1 << (MySqlParser.TIME_TO_SEC - 942)) | (1 << (MySqlParser.TOUCHES - 942)))) !== 0) || ((((_la - 974)) & ~0x1f) == 0 && ((1 << (_la - 974)) & ((1 << (MySqlParser.TO_BASE64 - 974)) | (1 << (MySqlParser.TO_DAYS - 974)) | (1 << (MySqlParser.TO_SECONDS - 974)) | (1 << (MySqlParser.UCASE - 974)) | (1 << (MySqlParser.UNCOMPRESS - 974)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 974)) | (1 << (MySqlParser.UNHEX - 974)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 974)) | (1 << (MySqlParser.UPDATEXML - 974)) | (1 << (MySqlParser.UPPER - 974)) | (1 << (MySqlParser.UUID - 974)) | (1 << (MySqlParser.UUID_SHORT - 974)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 974)) | (1 << (MySqlParser.VERSION - 974)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1 << (MySqlParser.WEEKDAY - 974)) | (1 << (MySqlParser.WEEKOFYEAR - 974)) | (1 << (MySqlParser.WEIGHT_STRING - 974)) | (1 << (MySqlParser.WITHIN - 974)) | (1 << (MySqlParser.YEARWEEK - 974)) | (1 << (MySqlParser.Y_FUNCTION - 974)) | (1 << (MySqlParser.X_FUNCTION - 974)))) !== 0) || ((((_la - 1034)) & ~0x1f) == 0 && ((1 << (_la - 1034)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (MySqlParser.STRING_LITERAL - 1034)) | (1 << (MySqlParser.ID - 1034)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1034)))) !== 0)) {
	            this.state = 4231;
	            this.uid();
	            this.state = 4232;
	            this.match(MySqlParser.COLON_SYMB);
	        }

	        this.state = 4236;
	        this.match(MySqlParser.REPEAT);
	        this.state = 4238; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 4237;
	        		this.procedureSqlStatement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 4240; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,610, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 4242;
	        this.match(MySqlParser.UNTIL);
	        this.state = 4243;
	        this.expression(0);
	        this.state = 4244;
	        this.match(MySqlParser.END);
	        this.state = 4245;
	        this.match(MySqlParser.REPEAT);
	        this.state = 4247;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySqlParser.CURRENT - 32)) | (1 << (MySqlParser.DATABASE - 32)) | (1 << (MySqlParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySqlParser.LEFT || _la===MySqlParser.NUMBER || _la===MySqlParser.RIGHT || _la===MySqlParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.TIMESTAMP - 199)) | (1 << (MySqlParser.DATETIME - 199)) | (1 << (MySqlParser.YEAR - 199)) | (1 << (MySqlParser.TEXT - 199)) | (1 << (MySqlParser.ENUM - 199)) | (1 << (MySqlParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.JSON_VALID - 233)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySqlParser.AVG - 233)) | (1 << (MySqlParser.BIT_AND - 233)) | (1 << (MySqlParser.BIT_OR - 233)) | (1 << (MySqlParser.BIT_XOR - 233)) | (1 << (MySqlParser.COUNT - 233)) | (1 << (MySqlParser.GROUP_CONCAT - 233)) | (1 << (MySqlParser.MAX - 233)) | (1 << (MySqlParser.MIN - 233)) | (1 << (MySqlParser.STD - 233)) | (1 << (MySqlParser.STDDEV - 233)) | (1 << (MySqlParser.STDDEV_POP - 233)) | (1 << (MySqlParser.STDDEV_SAMP - 233)) | (1 << (MySqlParser.SUM - 233)) | (1 << (MySqlParser.VAR_POP - 233)) | (1 << (MySqlParser.VAR_SAMP - 233)) | (1 << (MySqlParser.VARIANCE - 233)) | (1 << (MySqlParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySqlParser.ACCOUNT - 270)) | (1 << (MySqlParser.ACTION - 270)) | (1 << (MySqlParser.AFTER - 270)) | (1 << (MySqlParser.AGGREGATE - 270)) | (1 << (MySqlParser.ALGORITHM - 270)) | (1 << (MySqlParser.ANY - 270)) | (1 << (MySqlParser.AT - 270)) | (1 << (MySqlParser.AUTHORS - 270)) | (1 << (MySqlParser.AUTOCOMMIT - 270)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySqlParser.AUTO_INCREMENT - 270)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 270)) | (1 << (MySqlParser.BEGIN - 270)) | (1 << (MySqlParser.BINLOG - 270)) | (1 << (MySqlParser.BIT - 270)) | (1 << (MySqlParser.BLOCK - 270)) | (1 << (MySqlParser.BOOL - 270)) | (1 << (MySqlParser.BOOLEAN - 270)) | (1 << (MySqlParser.BTREE - 270)) | (1 << (MySqlParser.CACHE - 270)) | (1 << (MySqlParser.CASCADED - 270)) | (1 << (MySqlParser.CHAIN - 270)) | (1 << (MySqlParser.CHANGED - 270)) | (1 << (MySqlParser.CHANNEL - 270)) | (1 << (MySqlParser.CHECKSUM - 270)) | (1 << (MySqlParser.PAGE_CHECKSUM - 270)) | (1 << (MySqlParser.CIPHER - 270)) | (1 << (MySqlParser.CLASS_ORIGIN - 270)) | (1 << (MySqlParser.CLIENT - 270)) | (1 << (MySqlParser.CLOSE - 270)) | (1 << (MySqlParser.COALESCE - 270)) | (1 << (MySqlParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySqlParser.COLUMNS - 302)) | (1 << (MySqlParser.COLUMN_FORMAT - 302)) | (1 << (MySqlParser.COLUMN_NAME - 302)) | (1 << (MySqlParser.COMMENT - 302)) | (1 << (MySqlParser.COMMIT - 302)) | (1 << (MySqlParser.COMPACT - 302)) | (1 << (MySqlParser.COMPLETION - 302)) | (1 << (MySqlParser.COMPRESSED - 302)) | (1 << (MySqlParser.COMPRESSION - 302)) | (1 << (MySqlParser.CONCURRENT - 302)) | (1 << (MySqlParser.CONNECTION - 302)) | (1 << (MySqlParser.CONSISTENT - 302)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySqlParser.CONSTRAINT_NAME - 302)) | (1 << (MySqlParser.CONTAINS - 302)) | (1 << (MySqlParser.CONTEXT - 302)) | (1 << (MySqlParser.CONTRIBUTORS - 302)) | (1 << (MySqlParser.COPY - 302)) | (1 << (MySqlParser.CPU - 302)) | (1 << (MySqlParser.CURSOR_NAME - 302)) | (1 << (MySqlParser.DATA - 302)) | (1 << (MySqlParser.DATAFILE - 302)) | (1 << (MySqlParser.DEALLOCATE - 302)) | (1 << (MySqlParser.DEFAULT_AUTH - 302)) | (1 << (MySqlParser.DEFINER - 302)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 302)) | (1 << (MySqlParser.DES_KEY_FILE - 302)) | (1 << (MySqlParser.DIRECTORY - 302)) | (1 << (MySqlParser.DISABLE - 302)) | (1 << (MySqlParser.DISCARD - 302)) | (1 << (MySqlParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySqlParser.DO - 334)) | (1 << (MySqlParser.DUMPFILE - 334)) | (1 << (MySqlParser.DUPLICATE - 334)) | (1 << (MySqlParser.DYNAMIC - 334)) | (1 << (MySqlParser.ENABLE - 334)) | (1 << (MySqlParser.ENCRYPTION - 334)) | (1 << (MySqlParser.END - 334)) | (1 << (MySqlParser.ENDS - 334)) | (1 << (MySqlParser.ENGINE - 334)) | (1 << (MySqlParser.ENGINES - 334)) | (1 << (MySqlParser.ERROR - 334)) | (1 << (MySqlParser.ERRORS - 334)) | (1 << (MySqlParser.ESCAPE - 334)) | (1 << (MySqlParser.EVEN - 334)) | (1 << (MySqlParser.EVENT - 334)) | (1 << (MySqlParser.EVENTS - 334)) | (1 << (MySqlParser.EVERY - 334)) | (1 << (MySqlParser.EXCHANGE - 334)) | (1 << (MySqlParser.EXCLUSIVE - 334)) | (1 << (MySqlParser.EXPIRE - 334)) | (1 << (MySqlParser.EXPORT - 334)) | (1 << (MySqlParser.EXTENDED - 334)) | (1 << (MySqlParser.EXTENT_SIZE - 334)) | (1 << (MySqlParser.FAST - 334)) | (1 << (MySqlParser.FAULTS - 334)) | (1 << (MySqlParser.FIELDS - 334)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySqlParser.FILTER - 334)) | (1 << (MySqlParser.FIRST - 334)) | (1 << (MySqlParser.FIXED - 334)) | (1 << (MySqlParser.FLUSH - 334)) | (1 << (MySqlParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySqlParser.FOUND - 366)) | (1 << (MySqlParser.FULL - 366)) | (1 << (MySqlParser.FUNCTION - 366)) | (1 << (MySqlParser.GENERAL - 366)) | (1 << (MySqlParser.GLOBAL - 366)) | (1 << (MySqlParser.GRANTS - 366)) | (1 << (MySqlParser.GROUP_REPLICATION - 366)) | (1 << (MySqlParser.HANDLER - 366)) | (1 << (MySqlParser.HASH - 366)) | (1 << (MySqlParser.HELP - 366)) | (1 << (MySqlParser.HOST - 366)) | (1 << (MySqlParser.HOSTS - 366)) | (1 << (MySqlParser.IDENTIFIED - 366)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySqlParser.IMPORT - 366)) | (1 << (MySqlParser.INDEXES - 366)) | (1 << (MySqlParser.INITIAL_SIZE - 366)) | (1 << (MySqlParser.INPLACE - 366)) | (1 << (MySqlParser.INSERT_METHOD - 366)) | (1 << (MySqlParser.INSTALL - 366)) | (1 << (MySqlParser.INSTANCE - 366)) | (1 << (MySqlParser.INVISIBLE - 366)) | (1 << (MySqlParser.INVOKER - 366)) | (1 << (MySqlParser.IO - 366)) | (1 << (MySqlParser.IO_THREAD - 366)) | (1 << (MySqlParser.IPC - 366)) | (1 << (MySqlParser.ISOLATION - 366)) | (1 << (MySqlParser.ISSUER - 366)) | (1 << (MySqlParser.JSON - 366)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySqlParser.LANGUAGE - 366)) | (1 << (MySqlParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.LEAVES - 398)) | (1 << (MySqlParser.LESS - 398)) | (1 << (MySqlParser.LEVEL - 398)) | (1 << (MySqlParser.LIST - 398)) | (1 << (MySqlParser.LOCAL - 398)) | (1 << (MySqlParser.LOGFILE - 398)) | (1 << (MySqlParser.LOGS - 398)) | (1 << (MySqlParser.MASTER - 398)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySqlParser.MASTER_DELAY - 398)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySqlParser.MASTER_HOST - 398)) | (1 << (MySqlParser.MASTER_LOG_FILE - 398)) | (1 << (MySqlParser.MASTER_LOG_POS - 398)) | (1 << (MySqlParser.MASTER_PASSWORD - 398)) | (1 << (MySqlParser.MASTER_PORT - 398)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySqlParser.MASTER_SSL - 398)) | (1 << (MySqlParser.MASTER_SSL_CA - 398)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_CERT - 398)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySqlParser.MASTER_SSL_CRL - 398)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_KEY - 398)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 398)) | (1 << (MySqlParser.MASTER_USER - 398)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySqlParser.MEDIUM - 430)) | (1 << (MySqlParser.MEMBER - 430)) | (1 << (MySqlParser.MERGE - 430)) | (1 << (MySqlParser.MESSAGE_TEXT - 430)) | (1 << (MySqlParser.MID - 430)) | (1 << (MySqlParser.MIGRATE - 430)) | (1 << (MySqlParser.MIN_ROWS - 430)) | (1 << (MySqlParser.MODE - 430)) | (1 << (MySqlParser.MODIFY - 430)) | (1 << (MySqlParser.MUTEX - 430)) | (1 << (MySqlParser.MYSQL - 430)) | (1 << (MySqlParser.MYSQL_ERRNO - 430)) | (1 << (MySqlParser.NAME - 430)) | (1 << (MySqlParser.NAMES - 430)) | (1 << (MySqlParser.NCHAR - 430)) | (1 << (MySqlParser.NEVER - 430)) | (1 << (MySqlParser.NEXT - 430)) | (1 << (MySqlParser.NO - 430)) | (1 << (MySqlParser.NODEGROUP - 430)) | (1 << (MySqlParser.NONE - 430)) | (1 << (MySqlParser.OFFLINE - 430)) | (1 << (MySqlParser.OFFSET - 430)) | (1 << (MySqlParser.OF - 430)) | (1 << (MySqlParser.OJ - 430)) | (1 << (MySqlParser.OLD_PASSWORD - 430)) | (1 << (MySqlParser.ONE - 430)) | (1 << (MySqlParser.ONLINE - 430)) | (1 << (MySqlParser.ONLY - 430)) | (1 << (MySqlParser.OPEN - 430)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySqlParser.OPTIONS - 462)) | (1 << (MySqlParser.OWNER - 462)) | (1 << (MySqlParser.PACK_KEYS - 462)) | (1 << (MySqlParser.PAGE - 462)) | (1 << (MySqlParser.PARSER - 462)) | (1 << (MySqlParser.PARTIAL - 462)) | (1 << (MySqlParser.PARTITIONING - 462)) | (1 << (MySqlParser.PARTITIONS - 462)) | (1 << (MySqlParser.PASSWORD - 462)) | (1 << (MySqlParser.PHASE - 462)) | (1 << (MySqlParser.PLUGIN - 462)) | (1 << (MySqlParser.PLUGIN_DIR - 462)) | (1 << (MySqlParser.PLUGINS - 462)) | (1 << (MySqlParser.PORT - 462)) | (1 << (MySqlParser.PRECEDES - 462)) | (1 << (MySqlParser.PREPARE - 462)) | (1 << (MySqlParser.PRESERVE - 462)) | (1 << (MySqlParser.PREV - 462)) | (1 << (MySqlParser.PROCESSLIST - 462)) | (1 << (MySqlParser.PROFILE - 462)) | (1 << (MySqlParser.PROFILES - 462)) | (1 << (MySqlParser.PROXY - 462)) | (1 << (MySqlParser.QUERY - 462)) | (1 << (MySqlParser.QUICK - 462)) | (1 << (MySqlParser.REBUILD - 462)) | (1 << (MySqlParser.RECOVER - 462)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySqlParser.REDUNDANT - 462)) | (1 << (MySqlParser.RELAY - 462)) | (1 << (MySqlParser.RELAY_LOG_FILE - 462)) | (1 << (MySqlParser.RELAY_LOG_POS - 462)) | (1 << (MySqlParser.RELAYLOG - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySqlParser.REMOVE - 494)) | (1 << (MySqlParser.REORGANIZE - 494)) | (1 << (MySqlParser.REPAIR - 494)) | (1 << (MySqlParser.REPLICATE_DO_DB - 494)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATION - 494)) | (1 << (MySqlParser.RESET - 494)) | (1 << (MySqlParser.RESUME - 494)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 494)) | (1 << (MySqlParser.RETURNS - 494)) | (1 << (MySqlParser.ROLE - 494)) | (1 << (MySqlParser.ROLLBACK - 494)) | (1 << (MySqlParser.ROLLUP - 494)) | (1 << (MySqlParser.ROTATE - 494)) | (1 << (MySqlParser.ROW - 494)) | (1 << (MySqlParser.ROWS - 494)) | (1 << (MySqlParser.ROW_FORMAT - 494)) | (1 << (MySqlParser.SAVEPOINT - 494)) | (1 << (MySqlParser.SCHEDULE - 494)) | (1 << (MySqlParser.SECURITY - 494)) | (1 << (MySqlParser.SERVER - 494)) | (1 << (MySqlParser.SESSION - 494)) | (1 << (MySqlParser.SHARE - 494)) | (1 << (MySqlParser.SHARED - 494)) | (1 << (MySqlParser.SIGNED - 494)) | (1 << (MySqlParser.SIMPLE - 494)) | (1 << (MySqlParser.SLAVE - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySqlParser.SLOW - 526)) | (1 << (MySqlParser.SNAPSHOT - 526)) | (1 << (MySqlParser.SOCKET - 526)) | (1 << (MySqlParser.SOME - 526)) | (1 << (MySqlParser.SONAME - 526)) | (1 << (MySqlParser.SOUNDS - 526)) | (1 << (MySqlParser.SOURCE - 526)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySqlParser.SQL_CACHE - 526)) | (1 << (MySqlParser.SQL_NO_CACHE - 526)) | (1 << (MySqlParser.SQL_THREAD - 526)) | (1 << (MySqlParser.START - 526)) | (1 << (MySqlParser.STARTS - 526)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 526)) | (1 << (MySqlParser.STATS_PERSISTENT - 526)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySqlParser.STATUS - 526)) | (1 << (MySqlParser.STOP - 526)) | (1 << (MySqlParser.STORAGE - 526)) | (1 << (MySqlParser.STRING - 526)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySqlParser.SUBJECT - 526)) | (1 << (MySqlParser.SUBPARTITION - 526)) | (1 << (MySqlParser.SUBPARTITIONS - 526)) | (1 << (MySqlParser.SUSPEND - 526)) | (1 << (MySqlParser.SWAPS - 526)) | (1 << (MySqlParser.SWITCHES - 526)) | (1 << (MySqlParser.TABLE_NAME - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySqlParser.TABLESPACE - 558)) | (1 << (MySqlParser.TEMPORARY - 558)) | (1 << (MySqlParser.TEMPTABLE - 558)) | (1 << (MySqlParser.THAN - 558)) | (1 << (MySqlParser.TRADITIONAL - 558)) | (1 << (MySqlParser.TRANSACTION - 558)) | (1 << (MySqlParser.TRANSACTIONAL - 558)) | (1 << (MySqlParser.TRIGGERS - 558)) | (1 << (MySqlParser.TRUNCATE - 558)) | (1 << (MySqlParser.UNDEFINED - 558)) | (1 << (MySqlParser.UNDOFILE - 558)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySqlParser.UNINSTALL - 558)) | (1 << (MySqlParser.UNKNOWN - 558)) | (1 << (MySqlParser.UNTIL - 558)) | (1 << (MySqlParser.UPGRADE - 558)) | (1 << (MySqlParser.USER - 558)) | (1 << (MySqlParser.USE_FRM - 558)) | (1 << (MySqlParser.USER_RESOURCES - 558)) | (1 << (MySqlParser.VALIDATION - 558)) | (1 << (MySqlParser.VALUE - 558)) | (1 << (MySqlParser.VARIABLES - 558)) | (1 << (MySqlParser.VIEW - 558)) | (1 << (MySqlParser.VISIBLE - 558)) | (1 << (MySqlParser.WAIT - 558)) | (1 << (MySqlParser.WARNINGS - 558)) | (1 << (MySqlParser.WITHOUT - 558)) | (1 << (MySqlParser.WORK - 558)) | (1 << (MySqlParser.WRAPPER - 558)) | (1 << (MySqlParser.X509 - 558)) | (1 << (MySqlParser.XA - 558)))) !== 0) || ((((_la - 590)) & ~0x1f) == 0 && ((1 << (_la - 590)) & ((1 << (MySqlParser.XML - 590)) | (1 << (MySqlParser.INTERNAL - 590)) | (1 << (MySqlParser.QUARTER - 590)) | (1 << (MySqlParser.MONTH - 590)) | (1 << (MySqlParser.DAY - 590)) | (1 << (MySqlParser.HOUR - 590)) | (1 << (MySqlParser.MINUTE - 590)) | (1 << (MySqlParser.WEEK - 590)) | (1 << (MySqlParser.SECOND - 590)) | (1 << (MySqlParser.MICROSECOND - 590)) | (1 << (MySqlParser.TABLES - 590)) | (1 << (MySqlParser.ROUTINE - 590)) | (1 << (MySqlParser.EXECUTE - 590)) | (1 << (MySqlParser.FILE - 590)) | (1 << (MySqlParser.PROCESS - 590)) | (1 << (MySqlParser.RELOAD - 590)) | (1 << (MySqlParser.SHUTDOWN - 590)) | (1 << (MySqlParser.SUPER - 590)) | (1 << (MySqlParser.PRIVILEGES - 590)) | (1 << (MySqlParser.AUDIT_ADMIN - 590)) | (1 << (MySqlParser.BACKUP_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 590)) | (1 << (MySqlParser.CLONE_ADMIN - 590)) | (1 << (MySqlParser.CONNECTION_ADMIN - 590)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 590)) | (1 << (MySqlParser.FIREWALL_ADMIN - 590)))) !== 0) || ((((_la - 622)) & ~0x1f) == 0 && ((1 << (_la - 622)) & ((1 << (MySqlParser.FIREWALL_USER - 622)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 622)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 622)) | (1 << (MySqlParser.NDB_STORED_USER - 622)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.REPLICATION_APPLIER - 622)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 622)) | (1 << (MySqlParser.ROLE_ADMIN - 622)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.SET_USER_ID - 622)) | (1 << (MySqlParser.SHOW_ROUTINE - 622)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 622)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 622)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 622)) | (1 << (MySqlParser.ARMSCII8 - 622)) | (1 << (MySqlParser.ASCII - 622)) | (1 << (MySqlParser.BIG5 - 622)) | (1 << (MySqlParser.CP1250 - 622)) | (1 << (MySqlParser.CP1251 - 622)) | (1 << (MySqlParser.CP1256 - 622)) | (1 << (MySqlParser.CP1257 - 622)) | (1 << (MySqlParser.CP850 - 622)) | (1 << (MySqlParser.CP852 - 622)) | (1 << (MySqlParser.CP866 - 622)) | (1 << (MySqlParser.CP932 - 622)) | (1 << (MySqlParser.DEC8 - 622)) | (1 << (MySqlParser.EUCJPMS - 622)) | (1 << (MySqlParser.EUCKR - 622)) | (1 << (MySqlParser.GB2312 - 622)))) !== 0) || ((((_la - 654)) & ~0x1f) == 0 && ((1 << (_la - 654)) & ((1 << (MySqlParser.GBK - 654)) | (1 << (MySqlParser.GEOSTD8 - 654)) | (1 << (MySqlParser.GREEK - 654)) | (1 << (MySqlParser.HEBREW - 654)) | (1 << (MySqlParser.HP8 - 654)) | (1 << (MySqlParser.KEYBCS2 - 654)) | (1 << (MySqlParser.KOI8R - 654)) | (1 << (MySqlParser.KOI8U - 654)) | (1 << (MySqlParser.LATIN1 - 654)) | (1 << (MySqlParser.LATIN2 - 654)) | (1 << (MySqlParser.LATIN5 - 654)) | (1 << (MySqlParser.LATIN7 - 654)) | (1 << (MySqlParser.MACCE - 654)) | (1 << (MySqlParser.MACROMAN - 654)) | (1 << (MySqlParser.SJIS - 654)) | (1 << (MySqlParser.SWE7 - 654)) | (1 << (MySqlParser.TIS620 - 654)) | (1 << (MySqlParser.UCS2 - 654)) | (1 << (MySqlParser.UJIS - 654)) | (1 << (MySqlParser.UTF16 - 654)) | (1 << (MySqlParser.UTF16LE - 654)) | (1 << (MySqlParser.UTF32 - 654)) | (1 << (MySqlParser.UTF8 - 654)) | (1 << (MySqlParser.UTF8MB3 - 654)) | (1 << (MySqlParser.UTF8MB4 - 654)) | (1 << (MySqlParser.ARCHIVE - 654)) | (1 << (MySqlParser.BLACKHOLE - 654)) | (1 << (MySqlParser.CSV - 654)) | (1 << (MySqlParser.FEDERATED - 654)) | (1 << (MySqlParser.INNODB - 654)) | (1 << (MySqlParser.MEMORY - 654)) | (1 << (MySqlParser.MRG_MYISAM - 654)))) !== 0) || ((((_la - 686)) & ~0x1f) == 0 && ((1 << (_la - 686)) & ((1 << (MySqlParser.MYISAM - 686)) | (1 << (MySqlParser.NDB - 686)) | (1 << (MySqlParser.NDBCLUSTER - 686)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 686)) | (1 << (MySqlParser.TOKUDB - 686)) | (1 << (MySqlParser.REPEATABLE - 686)) | (1 << (MySqlParser.COMMITTED - 686)) | (1 << (MySqlParser.UNCOMMITTED - 686)) | (1 << (MySqlParser.SERIALIZABLE - 686)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 686)) | (1 << (MySqlParser.LINESTRING - 686)) | (1 << (MySqlParser.MULTILINESTRING - 686)) | (1 << (MySqlParser.MULTIPOINT - 686)) | (1 << (MySqlParser.MULTIPOLYGON - 686)) | (1 << (MySqlParser.POINT - 686)) | (1 << (MySqlParser.POLYGON - 686)) | (1 << (MySqlParser.ABS - 686)) | (1 << (MySqlParser.ACOS - 686)) | (1 << (MySqlParser.ADDDATE - 686)) | (1 << (MySqlParser.ADDTIME - 686)) | (1 << (MySqlParser.AES_DECRYPT - 686)) | (1 << (MySqlParser.AES_ENCRYPT - 686)) | (1 << (MySqlParser.AREA - 686)) | (1 << (MySqlParser.ASBINARY - 686)) | (1 << (MySqlParser.ASIN - 686)) | (1 << (MySqlParser.ASTEXT - 686)) | (1 << (MySqlParser.ASWKB - 686)) | (1 << (MySqlParser.ASWKT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 686)))) !== 0) || ((((_la - 718)) & ~0x1f) == 0 && ((1 << (_la - 718)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 718)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 718)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 718)) | (1 << (MySqlParser.ATAN - 718)) | (1 << (MySqlParser.ATAN2 - 718)) | (1 << (MySqlParser.BENCHMARK - 718)) | (1 << (MySqlParser.BIN - 718)) | (1 << (MySqlParser.BIT_COUNT - 718)) | (1 << (MySqlParser.BIT_LENGTH - 718)) | (1 << (MySqlParser.BUFFER - 718)) | (1 << (MySqlParser.CATALOG_NAME - 718)) | (1 << (MySqlParser.CEIL - 718)) | (1 << (MySqlParser.CEILING - 718)) | (1 << (MySqlParser.CENTROID - 718)) | (1 << (MySqlParser.CHARACTER_LENGTH - 718)) | (1 << (MySqlParser.CHARSET - 718)) | (1 << (MySqlParser.CHAR_LENGTH - 718)) | (1 << (MySqlParser.COERCIBILITY - 718)) | (1 << (MySqlParser.COLLATION - 718)) | (1 << (MySqlParser.COMPRESS - 718)) | (1 << (MySqlParser.CONCAT - 718)) | (1 << (MySqlParser.CONCAT_WS - 718)) | (1 << (MySqlParser.CONNECTION_ID - 718)) | (1 << (MySqlParser.CONV - 718)) | (1 << (MySqlParser.CONVERT_TZ - 718)) | (1 << (MySqlParser.COS - 718)) | (1 << (MySqlParser.COT - 718)) | (1 << (MySqlParser.CRC32 - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 718)) | (1 << (MySqlParser.CREATE_DIGEST - 718)))) !== 0) || ((((_la - 750)) & ~0x1f) == 0 && ((1 << (_la - 750)) & ((1 << (MySqlParser.CROSSES - 750)) | (1 << (MySqlParser.DATEDIFF - 750)) | (1 << (MySqlParser.DATE_FORMAT - 750)) | (1 << (MySqlParser.DAYNAME - 750)) | (1 << (MySqlParser.DAYOFMONTH - 750)) | (1 << (MySqlParser.DAYOFWEEK - 750)) | (1 << (MySqlParser.DAYOFYEAR - 750)) | (1 << (MySqlParser.DECODE - 750)) | (1 << (MySqlParser.DEGREES - 750)) | (1 << (MySqlParser.DES_DECRYPT - 750)) | (1 << (MySqlParser.DES_ENCRYPT - 750)) | (1 << (MySqlParser.DIMENSION - 750)) | (1 << (MySqlParser.DISJOINT - 750)) | (1 << (MySqlParser.ELT - 750)) | (1 << (MySqlParser.ENCODE - 750)) | (1 << (MySqlParser.ENCRYPT - 750)) | (1 << (MySqlParser.ENDPOINT - 750)) | (1 << (MySqlParser.ENVELOPE - 750)) | (1 << (MySqlParser.EQUALS - 750)) | (1 << (MySqlParser.EXP - 750)) | (1 << (MySqlParser.EXPORT_SET - 750)) | (1 << (MySqlParser.EXTERIORRING - 750)) | (1 << (MySqlParser.EXTRACTVALUE - 750)) | (1 << (MySqlParser.FIELD - 750)) | (1 << (MySqlParser.FIND_IN_SET - 750)) | (1 << (MySqlParser.FLOOR - 750)) | (1 << (MySqlParser.FORMAT - 750)) | (1 << (MySqlParser.FOUND_ROWS - 750)) | (1 << (MySqlParser.FROM_BASE64 - 750)) | (1 << (MySqlParser.FROM_DAYS - 750)) | (1 << (MySqlParser.FROM_UNIXTIME - 750)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 750)))) !== 0) || ((((_la - 782)) & ~0x1f) == 0 && ((1 << (_la - 782)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYN - 782)) | (1 << (MySqlParser.GEOMETRYTYPE - 782)) | (1 << (MySqlParser.GEOMFROMTEXT - 782)) | (1 << (MySqlParser.GEOMFROMWKB - 782)) | (1 << (MySqlParser.GET_FORMAT - 782)) | (1 << (MySqlParser.GET_LOCK - 782)) | (1 << (MySqlParser.GLENGTH - 782)) | (1 << (MySqlParser.GREATEST - 782)) | (1 << (MySqlParser.GTID_SUBSET - 782)) | (1 << (MySqlParser.GTID_SUBTRACT - 782)) | (1 << (MySqlParser.HEX - 782)) | (1 << (MySqlParser.IFNULL - 782)) | (1 << (MySqlParser.INET6_ATON - 782)) | (1 << (MySqlParser.INET6_NTOA - 782)) | (1 << (MySqlParser.INET_ATON - 782)) | (1 << (MySqlParser.INET_NTOA - 782)) | (1 << (MySqlParser.INSTR - 782)) | (1 << (MySqlParser.INTERIORRINGN - 782)) | (1 << (MySqlParser.INTERSECTS - 782)) | (1 << (MySqlParser.ISCLOSED - 782)) | (1 << (MySqlParser.ISEMPTY - 782)) | (1 << (MySqlParser.ISNULL - 782)) | (1 << (MySqlParser.ISSIMPLE - 782)) | (1 << (MySqlParser.IS_FREE_LOCK - 782)) | (1 << (MySqlParser.IS_IPV4 - 782)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 782)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 782)))) !== 0) || ((((_la - 814)) & ~0x1f) == 0 && ((1 << (_la - 814)) & ((1 << (MySqlParser.IS_IPV6 - 814)) | (1 << (MySqlParser.IS_USED_LOCK - 814)) | (1 << (MySqlParser.LAST_INSERT_ID - 814)) | (1 << (MySqlParser.LCASE - 814)) | (1 << (MySqlParser.LEAST - 814)) | (1 << (MySqlParser.LENGTH - 814)) | (1 << (MySqlParser.LINEFROMTEXT - 814)) | (1 << (MySqlParser.LINEFROMWKB - 814)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 814)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 814)) | (1 << (MySqlParser.LN - 814)) | (1 << (MySqlParser.LOAD_FILE - 814)) | (1 << (MySqlParser.LOCATE - 814)) | (1 << (MySqlParser.LOG - 814)) | (1 << (MySqlParser.LOG10 - 814)) | (1 << (MySqlParser.LOG2 - 814)) | (1 << (MySqlParser.LOWER - 814)) | (1 << (MySqlParser.LPAD - 814)) | (1 << (MySqlParser.LTRIM - 814)) | (1 << (MySqlParser.MAKEDATE - 814)) | (1 << (MySqlParser.MAKETIME - 814)) | (1 << (MySqlParser.MAKE_SET - 814)) | (1 << (MySqlParser.MASTER_POS_WAIT - 814)) | (1 << (MySqlParser.MBRCONTAINS - 814)) | (1 << (MySqlParser.MBRDISJOINT - 814)) | (1 << (MySqlParser.MBREQUAL - 814)) | (1 << (MySqlParser.MBRINTERSECTS - 814)) | (1 << (MySqlParser.MBROVERLAPS - 814)) | (1 << (MySqlParser.MBRTOUCHES - 814)) | (1 << (MySqlParser.MBRWITHIN - 814)) | (1 << (MySqlParser.MD5 - 814)) | (1 << (MySqlParser.MLINEFROMTEXT - 814)))) !== 0) || ((((_la - 846)) & ~0x1f) == 0 && ((1 << (_la - 846)) & ((1 << (MySqlParser.MLINEFROMWKB - 846)) | (1 << (MySqlParser.MONTHNAME - 846)) | (1 << (MySqlParser.MPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MPOINTFROMWKB - 846)) | (1 << (MySqlParser.MPOLYFROMTEXT - 846)) | (1 << (MySqlParser.MPOLYFROMWKB - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 846)) | (1 << (MySqlParser.NAME_CONST - 846)) | (1 << (MySqlParser.NULLIF - 846)) | (1 << (MySqlParser.NUMGEOMETRIES - 846)) | (1 << (MySqlParser.NUMINTERIORRINGS - 846)) | (1 << (MySqlParser.NUMPOINTS - 846)) | (1 << (MySqlParser.OCT - 846)) | (1 << (MySqlParser.OCTET_LENGTH - 846)) | (1 << (MySqlParser.ORD - 846)) | (1 << (MySqlParser.OVERLAPS - 846)) | (1 << (MySqlParser.PERIOD_ADD - 846)) | (1 << (MySqlParser.PERIOD_DIFF - 846)) | (1 << (MySqlParser.PI - 846)) | (1 << (MySqlParser.POINTFROMTEXT - 846)) | (1 << (MySqlParser.POINTFROMWKB - 846)) | (1 << (MySqlParser.POINTN - 846)) | (1 << (MySqlParser.POLYFROMTEXT - 846)) | (1 << (MySqlParser.POLYFROMWKB - 846)) | (1 << (MySqlParser.POLYGONFROMTEXT - 846)) | (1 << (MySqlParser.POLYGONFROMWKB - 846)) | (1 << (MySqlParser.POW - 846)))) !== 0) || ((((_la - 878)) & ~0x1f) == 0 && ((1 << (_la - 878)) & ((1 << (MySqlParser.POWER - 878)) | (1 << (MySqlParser.QUOTE - 878)) | (1 << (MySqlParser.RADIANS - 878)) | (1 << (MySqlParser.RAND - 878)) | (1 << (MySqlParser.RANDOM_BYTES - 878)) | (1 << (MySqlParser.RELEASE_LOCK - 878)) | (1 << (MySqlParser.REVERSE - 878)) | (1 << (MySqlParser.ROUND - 878)) | (1 << (MySqlParser.ROW_COUNT - 878)) | (1 << (MySqlParser.RPAD - 878)) | (1 << (MySqlParser.RTRIM - 878)) | (1 << (MySqlParser.SEC_TO_TIME - 878)) | (1 << (MySqlParser.SESSION_USER - 878)) | (1 << (MySqlParser.SHA - 878)) | (1 << (MySqlParser.SHA1 - 878)) | (1 << (MySqlParser.SHA2 - 878)) | (1 << (MySqlParser.SCHEMA_NAME - 878)) | (1 << (MySqlParser.SIGN - 878)) | (1 << (MySqlParser.SIN - 878)) | (1 << (MySqlParser.SLEEP - 878)) | (1 << (MySqlParser.SOUNDEX - 878)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 878)) | (1 << (MySqlParser.SQRT - 878)) | (1 << (MySqlParser.SRID - 878)) | (1 << (MySqlParser.STARTPOINT - 878)) | (1 << (MySqlParser.STRCMP - 878)) | (1 << (MySqlParser.STR_TO_DATE - 878)) | (1 << (MySqlParser.ST_AREA - 878)) | (1 << (MySqlParser.ST_ASBINARY - 878)) | (1 << (MySqlParser.ST_ASTEXT - 878)) | (1 << (MySqlParser.ST_ASWKB - 878)) | (1 << (MySqlParser.ST_ASWKT - 878)))) !== 0) || ((((_la - 910)) & ~0x1f) == 0 && ((1 << (_la - 910)) & ((1 << (MySqlParser.ST_BUFFER - 910)) | (1 << (MySqlParser.ST_CENTROID - 910)) | (1 << (MySqlParser.ST_CONTAINS - 910)) | (1 << (MySqlParser.ST_CROSSES - 910)) | (1 << (MySqlParser.ST_DIFFERENCE - 910)) | (1 << (MySqlParser.ST_DIMENSION - 910)) | (1 << (MySqlParser.ST_DISJOINT - 910)) | (1 << (MySqlParser.ST_DISTANCE - 910)) | (1 << (MySqlParser.ST_ENDPOINT - 910)) | (1 << (MySqlParser.ST_ENVELOPE - 910)) | (1 << (MySqlParser.ST_EQUALS - 910)) | (1 << (MySqlParser.ST_EXTERIORRING - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYN - 910)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 910)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 910)) | (1 << (MySqlParser.ST_INTERIORRINGN - 910)) | (1 << (MySqlParser.ST_INTERSECTION - 910)) | (1 << (MySqlParser.ST_INTERSECTS - 910)) | (1 << (MySqlParser.ST_ISCLOSED - 910)) | (1 << (MySqlParser.ST_ISEMPTY - 910)) | (1 << (MySqlParser.ST_ISSIMPLE - 910)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 910)) | (1 << (MySqlParser.ST_LINEFROMWKB - 910)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 910)))) !== 0) || ((((_la - 942)) & ~0x1f) == 0 && ((1 << (_la - 942)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 942)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 942)) | (1 << (MySqlParser.ST_NUMPOINTS - 942)) | (1 << (MySqlParser.ST_OVERLAPS - 942)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 942)) | (1 << (MySqlParser.ST_POINTFROMWKB - 942)) | (1 << (MySqlParser.ST_POINTN - 942)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYFROMWKB - 942)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 942)) | (1 << (MySqlParser.ST_SRID - 942)) | (1 << (MySqlParser.ST_STARTPOINT - 942)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 942)) | (1 << (MySqlParser.ST_TOUCHES - 942)) | (1 << (MySqlParser.ST_UNION - 942)) | (1 << (MySqlParser.ST_WITHIN - 942)) | (1 << (MySqlParser.ST_X - 942)) | (1 << (MySqlParser.ST_Y - 942)) | (1 << (MySqlParser.SUBDATE - 942)) | (1 << (MySqlParser.SUBSTRING_INDEX - 942)) | (1 << (MySqlParser.SUBTIME - 942)) | (1 << (MySqlParser.SYSTEM_USER - 942)) | (1 << (MySqlParser.TAN - 942)) | (1 << (MySqlParser.TIMEDIFF - 942)) | (1 << (MySqlParser.TIMESTAMPADD - 942)) | (1 << (MySqlParser.TIMESTAMPDIFF - 942)) | (1 << (MySqlParser.TIME_FORMAT - 942)) | (1 << (MySqlParser.TIME_TO_SEC - 942)) | (1 << (MySqlParser.TOUCHES - 942)))) !== 0) || ((((_la - 974)) & ~0x1f) == 0 && ((1 << (_la - 974)) & ((1 << (MySqlParser.TO_BASE64 - 974)) | (1 << (MySqlParser.TO_DAYS - 974)) | (1 << (MySqlParser.TO_SECONDS - 974)) | (1 << (MySqlParser.UCASE - 974)) | (1 << (MySqlParser.UNCOMPRESS - 974)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 974)) | (1 << (MySqlParser.UNHEX - 974)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 974)) | (1 << (MySqlParser.UPDATEXML - 974)) | (1 << (MySqlParser.UPPER - 974)) | (1 << (MySqlParser.UUID - 974)) | (1 << (MySqlParser.UUID_SHORT - 974)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 974)) | (1 << (MySqlParser.VERSION - 974)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1 << (MySqlParser.WEEKDAY - 974)) | (1 << (MySqlParser.WEEKOFYEAR - 974)) | (1 << (MySqlParser.WEIGHT_STRING - 974)) | (1 << (MySqlParser.WITHIN - 974)) | (1 << (MySqlParser.YEARWEEK - 974)) | (1 << (MySqlParser.Y_FUNCTION - 974)) | (1 << (MySqlParser.X_FUNCTION - 974)))) !== 0) || ((((_la - 1034)) & ~0x1f) == 0 && ((1 << (_la - 1034)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (MySqlParser.STRING_LITERAL - 1034)) | (1 << (MySqlParser.ID - 1034)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1034)))) !== 0)) {
	            this.state = 4246;
	            this.uid();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, MySqlParser.RULE_returnStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4249;
	        this.match(MySqlParser.RETURN);
	        this.state = 4250;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whileStatement() {
	    let localctx = new WhileStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, MySqlParser.RULE_whileStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4255;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySqlParser.CURRENT - 32)) | (1 << (MySqlParser.DATABASE - 32)) | (1 << (MySqlParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySqlParser.LEFT || _la===MySqlParser.NUMBER || _la===MySqlParser.RIGHT || _la===MySqlParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.TIMESTAMP - 199)) | (1 << (MySqlParser.DATETIME - 199)) | (1 << (MySqlParser.YEAR - 199)) | (1 << (MySqlParser.TEXT - 199)) | (1 << (MySqlParser.ENUM - 199)) | (1 << (MySqlParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.JSON_VALID - 233)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySqlParser.AVG - 233)) | (1 << (MySqlParser.BIT_AND - 233)) | (1 << (MySqlParser.BIT_OR - 233)) | (1 << (MySqlParser.BIT_XOR - 233)) | (1 << (MySqlParser.COUNT - 233)) | (1 << (MySqlParser.GROUP_CONCAT - 233)) | (1 << (MySqlParser.MAX - 233)) | (1 << (MySqlParser.MIN - 233)) | (1 << (MySqlParser.STD - 233)) | (1 << (MySqlParser.STDDEV - 233)) | (1 << (MySqlParser.STDDEV_POP - 233)) | (1 << (MySqlParser.STDDEV_SAMP - 233)) | (1 << (MySqlParser.SUM - 233)) | (1 << (MySqlParser.VAR_POP - 233)) | (1 << (MySqlParser.VAR_SAMP - 233)) | (1 << (MySqlParser.VARIANCE - 233)) | (1 << (MySqlParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySqlParser.ACCOUNT - 270)) | (1 << (MySqlParser.ACTION - 270)) | (1 << (MySqlParser.AFTER - 270)) | (1 << (MySqlParser.AGGREGATE - 270)) | (1 << (MySqlParser.ALGORITHM - 270)) | (1 << (MySqlParser.ANY - 270)) | (1 << (MySqlParser.AT - 270)) | (1 << (MySqlParser.AUTHORS - 270)) | (1 << (MySqlParser.AUTOCOMMIT - 270)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySqlParser.AUTO_INCREMENT - 270)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 270)) | (1 << (MySqlParser.BEGIN - 270)) | (1 << (MySqlParser.BINLOG - 270)) | (1 << (MySqlParser.BIT - 270)) | (1 << (MySqlParser.BLOCK - 270)) | (1 << (MySqlParser.BOOL - 270)) | (1 << (MySqlParser.BOOLEAN - 270)) | (1 << (MySqlParser.BTREE - 270)) | (1 << (MySqlParser.CACHE - 270)) | (1 << (MySqlParser.CASCADED - 270)) | (1 << (MySqlParser.CHAIN - 270)) | (1 << (MySqlParser.CHANGED - 270)) | (1 << (MySqlParser.CHANNEL - 270)) | (1 << (MySqlParser.CHECKSUM - 270)) | (1 << (MySqlParser.PAGE_CHECKSUM - 270)) | (1 << (MySqlParser.CIPHER - 270)) | (1 << (MySqlParser.CLASS_ORIGIN - 270)) | (1 << (MySqlParser.CLIENT - 270)) | (1 << (MySqlParser.CLOSE - 270)) | (1 << (MySqlParser.COALESCE - 270)) | (1 << (MySqlParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySqlParser.COLUMNS - 302)) | (1 << (MySqlParser.COLUMN_FORMAT - 302)) | (1 << (MySqlParser.COLUMN_NAME - 302)) | (1 << (MySqlParser.COMMENT - 302)) | (1 << (MySqlParser.COMMIT - 302)) | (1 << (MySqlParser.COMPACT - 302)) | (1 << (MySqlParser.COMPLETION - 302)) | (1 << (MySqlParser.COMPRESSED - 302)) | (1 << (MySqlParser.COMPRESSION - 302)) | (1 << (MySqlParser.CONCURRENT - 302)) | (1 << (MySqlParser.CONNECTION - 302)) | (1 << (MySqlParser.CONSISTENT - 302)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySqlParser.CONSTRAINT_NAME - 302)) | (1 << (MySqlParser.CONTAINS - 302)) | (1 << (MySqlParser.CONTEXT - 302)) | (1 << (MySqlParser.CONTRIBUTORS - 302)) | (1 << (MySqlParser.COPY - 302)) | (1 << (MySqlParser.CPU - 302)) | (1 << (MySqlParser.CURSOR_NAME - 302)) | (1 << (MySqlParser.DATA - 302)) | (1 << (MySqlParser.DATAFILE - 302)) | (1 << (MySqlParser.DEALLOCATE - 302)) | (1 << (MySqlParser.DEFAULT_AUTH - 302)) | (1 << (MySqlParser.DEFINER - 302)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 302)) | (1 << (MySqlParser.DES_KEY_FILE - 302)) | (1 << (MySqlParser.DIRECTORY - 302)) | (1 << (MySqlParser.DISABLE - 302)) | (1 << (MySqlParser.DISCARD - 302)) | (1 << (MySqlParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySqlParser.DO - 334)) | (1 << (MySqlParser.DUMPFILE - 334)) | (1 << (MySqlParser.DUPLICATE - 334)) | (1 << (MySqlParser.DYNAMIC - 334)) | (1 << (MySqlParser.ENABLE - 334)) | (1 << (MySqlParser.ENCRYPTION - 334)) | (1 << (MySqlParser.END - 334)) | (1 << (MySqlParser.ENDS - 334)) | (1 << (MySqlParser.ENGINE - 334)) | (1 << (MySqlParser.ENGINES - 334)) | (1 << (MySqlParser.ERROR - 334)) | (1 << (MySqlParser.ERRORS - 334)) | (1 << (MySqlParser.ESCAPE - 334)) | (1 << (MySqlParser.EVEN - 334)) | (1 << (MySqlParser.EVENT - 334)) | (1 << (MySqlParser.EVENTS - 334)) | (1 << (MySqlParser.EVERY - 334)) | (1 << (MySqlParser.EXCHANGE - 334)) | (1 << (MySqlParser.EXCLUSIVE - 334)) | (1 << (MySqlParser.EXPIRE - 334)) | (1 << (MySqlParser.EXPORT - 334)) | (1 << (MySqlParser.EXTENDED - 334)) | (1 << (MySqlParser.EXTENT_SIZE - 334)) | (1 << (MySqlParser.FAST - 334)) | (1 << (MySqlParser.FAULTS - 334)) | (1 << (MySqlParser.FIELDS - 334)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySqlParser.FILTER - 334)) | (1 << (MySqlParser.FIRST - 334)) | (1 << (MySqlParser.FIXED - 334)) | (1 << (MySqlParser.FLUSH - 334)) | (1 << (MySqlParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySqlParser.FOUND - 366)) | (1 << (MySqlParser.FULL - 366)) | (1 << (MySqlParser.FUNCTION - 366)) | (1 << (MySqlParser.GENERAL - 366)) | (1 << (MySqlParser.GLOBAL - 366)) | (1 << (MySqlParser.GRANTS - 366)) | (1 << (MySqlParser.GROUP_REPLICATION - 366)) | (1 << (MySqlParser.HANDLER - 366)) | (1 << (MySqlParser.HASH - 366)) | (1 << (MySqlParser.HELP - 366)) | (1 << (MySqlParser.HOST - 366)) | (1 << (MySqlParser.HOSTS - 366)) | (1 << (MySqlParser.IDENTIFIED - 366)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySqlParser.IMPORT - 366)) | (1 << (MySqlParser.INDEXES - 366)) | (1 << (MySqlParser.INITIAL_SIZE - 366)) | (1 << (MySqlParser.INPLACE - 366)) | (1 << (MySqlParser.INSERT_METHOD - 366)) | (1 << (MySqlParser.INSTALL - 366)) | (1 << (MySqlParser.INSTANCE - 366)) | (1 << (MySqlParser.INVISIBLE - 366)) | (1 << (MySqlParser.INVOKER - 366)) | (1 << (MySqlParser.IO - 366)) | (1 << (MySqlParser.IO_THREAD - 366)) | (1 << (MySqlParser.IPC - 366)) | (1 << (MySqlParser.ISOLATION - 366)) | (1 << (MySqlParser.ISSUER - 366)) | (1 << (MySqlParser.JSON - 366)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySqlParser.LANGUAGE - 366)) | (1 << (MySqlParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.LEAVES - 398)) | (1 << (MySqlParser.LESS - 398)) | (1 << (MySqlParser.LEVEL - 398)) | (1 << (MySqlParser.LIST - 398)) | (1 << (MySqlParser.LOCAL - 398)) | (1 << (MySqlParser.LOGFILE - 398)) | (1 << (MySqlParser.LOGS - 398)) | (1 << (MySqlParser.MASTER - 398)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySqlParser.MASTER_DELAY - 398)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySqlParser.MASTER_HOST - 398)) | (1 << (MySqlParser.MASTER_LOG_FILE - 398)) | (1 << (MySqlParser.MASTER_LOG_POS - 398)) | (1 << (MySqlParser.MASTER_PASSWORD - 398)) | (1 << (MySqlParser.MASTER_PORT - 398)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySqlParser.MASTER_SSL - 398)) | (1 << (MySqlParser.MASTER_SSL_CA - 398)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_CERT - 398)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySqlParser.MASTER_SSL_CRL - 398)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_KEY - 398)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 398)) | (1 << (MySqlParser.MASTER_USER - 398)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySqlParser.MEDIUM - 430)) | (1 << (MySqlParser.MEMBER - 430)) | (1 << (MySqlParser.MERGE - 430)) | (1 << (MySqlParser.MESSAGE_TEXT - 430)) | (1 << (MySqlParser.MID - 430)) | (1 << (MySqlParser.MIGRATE - 430)) | (1 << (MySqlParser.MIN_ROWS - 430)) | (1 << (MySqlParser.MODE - 430)) | (1 << (MySqlParser.MODIFY - 430)) | (1 << (MySqlParser.MUTEX - 430)) | (1 << (MySqlParser.MYSQL - 430)) | (1 << (MySqlParser.MYSQL_ERRNO - 430)) | (1 << (MySqlParser.NAME - 430)) | (1 << (MySqlParser.NAMES - 430)) | (1 << (MySqlParser.NCHAR - 430)) | (1 << (MySqlParser.NEVER - 430)) | (1 << (MySqlParser.NEXT - 430)) | (1 << (MySqlParser.NO - 430)) | (1 << (MySqlParser.NODEGROUP - 430)) | (1 << (MySqlParser.NONE - 430)) | (1 << (MySqlParser.OFFLINE - 430)) | (1 << (MySqlParser.OFFSET - 430)) | (1 << (MySqlParser.OF - 430)) | (1 << (MySqlParser.OJ - 430)) | (1 << (MySqlParser.OLD_PASSWORD - 430)) | (1 << (MySqlParser.ONE - 430)) | (1 << (MySqlParser.ONLINE - 430)) | (1 << (MySqlParser.ONLY - 430)) | (1 << (MySqlParser.OPEN - 430)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySqlParser.OPTIONS - 462)) | (1 << (MySqlParser.OWNER - 462)) | (1 << (MySqlParser.PACK_KEYS - 462)) | (1 << (MySqlParser.PAGE - 462)) | (1 << (MySqlParser.PARSER - 462)) | (1 << (MySqlParser.PARTIAL - 462)) | (1 << (MySqlParser.PARTITIONING - 462)) | (1 << (MySqlParser.PARTITIONS - 462)) | (1 << (MySqlParser.PASSWORD - 462)) | (1 << (MySqlParser.PHASE - 462)) | (1 << (MySqlParser.PLUGIN - 462)) | (1 << (MySqlParser.PLUGIN_DIR - 462)) | (1 << (MySqlParser.PLUGINS - 462)) | (1 << (MySqlParser.PORT - 462)) | (1 << (MySqlParser.PRECEDES - 462)) | (1 << (MySqlParser.PREPARE - 462)) | (1 << (MySqlParser.PRESERVE - 462)) | (1 << (MySqlParser.PREV - 462)) | (1 << (MySqlParser.PROCESSLIST - 462)) | (1 << (MySqlParser.PROFILE - 462)) | (1 << (MySqlParser.PROFILES - 462)) | (1 << (MySqlParser.PROXY - 462)) | (1 << (MySqlParser.QUERY - 462)) | (1 << (MySqlParser.QUICK - 462)) | (1 << (MySqlParser.REBUILD - 462)) | (1 << (MySqlParser.RECOVER - 462)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySqlParser.REDUNDANT - 462)) | (1 << (MySqlParser.RELAY - 462)) | (1 << (MySqlParser.RELAY_LOG_FILE - 462)) | (1 << (MySqlParser.RELAY_LOG_POS - 462)) | (1 << (MySqlParser.RELAYLOG - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySqlParser.REMOVE - 494)) | (1 << (MySqlParser.REORGANIZE - 494)) | (1 << (MySqlParser.REPAIR - 494)) | (1 << (MySqlParser.REPLICATE_DO_DB - 494)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATION - 494)) | (1 << (MySqlParser.RESET - 494)) | (1 << (MySqlParser.RESUME - 494)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 494)) | (1 << (MySqlParser.RETURNS - 494)) | (1 << (MySqlParser.ROLE - 494)) | (1 << (MySqlParser.ROLLBACK - 494)) | (1 << (MySqlParser.ROLLUP - 494)) | (1 << (MySqlParser.ROTATE - 494)) | (1 << (MySqlParser.ROW - 494)) | (1 << (MySqlParser.ROWS - 494)) | (1 << (MySqlParser.ROW_FORMAT - 494)) | (1 << (MySqlParser.SAVEPOINT - 494)) | (1 << (MySqlParser.SCHEDULE - 494)) | (1 << (MySqlParser.SECURITY - 494)) | (1 << (MySqlParser.SERVER - 494)) | (1 << (MySqlParser.SESSION - 494)) | (1 << (MySqlParser.SHARE - 494)) | (1 << (MySqlParser.SHARED - 494)) | (1 << (MySqlParser.SIGNED - 494)) | (1 << (MySqlParser.SIMPLE - 494)) | (1 << (MySqlParser.SLAVE - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySqlParser.SLOW - 526)) | (1 << (MySqlParser.SNAPSHOT - 526)) | (1 << (MySqlParser.SOCKET - 526)) | (1 << (MySqlParser.SOME - 526)) | (1 << (MySqlParser.SONAME - 526)) | (1 << (MySqlParser.SOUNDS - 526)) | (1 << (MySqlParser.SOURCE - 526)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySqlParser.SQL_CACHE - 526)) | (1 << (MySqlParser.SQL_NO_CACHE - 526)) | (1 << (MySqlParser.SQL_THREAD - 526)) | (1 << (MySqlParser.START - 526)) | (1 << (MySqlParser.STARTS - 526)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 526)) | (1 << (MySqlParser.STATS_PERSISTENT - 526)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySqlParser.STATUS - 526)) | (1 << (MySqlParser.STOP - 526)) | (1 << (MySqlParser.STORAGE - 526)) | (1 << (MySqlParser.STRING - 526)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySqlParser.SUBJECT - 526)) | (1 << (MySqlParser.SUBPARTITION - 526)) | (1 << (MySqlParser.SUBPARTITIONS - 526)) | (1 << (MySqlParser.SUSPEND - 526)) | (1 << (MySqlParser.SWAPS - 526)) | (1 << (MySqlParser.SWITCHES - 526)) | (1 << (MySqlParser.TABLE_NAME - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySqlParser.TABLESPACE - 558)) | (1 << (MySqlParser.TEMPORARY - 558)) | (1 << (MySqlParser.TEMPTABLE - 558)) | (1 << (MySqlParser.THAN - 558)) | (1 << (MySqlParser.TRADITIONAL - 558)) | (1 << (MySqlParser.TRANSACTION - 558)) | (1 << (MySqlParser.TRANSACTIONAL - 558)) | (1 << (MySqlParser.TRIGGERS - 558)) | (1 << (MySqlParser.TRUNCATE - 558)) | (1 << (MySqlParser.UNDEFINED - 558)) | (1 << (MySqlParser.UNDOFILE - 558)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySqlParser.UNINSTALL - 558)) | (1 << (MySqlParser.UNKNOWN - 558)) | (1 << (MySqlParser.UNTIL - 558)) | (1 << (MySqlParser.UPGRADE - 558)) | (1 << (MySqlParser.USER - 558)) | (1 << (MySqlParser.USE_FRM - 558)) | (1 << (MySqlParser.USER_RESOURCES - 558)) | (1 << (MySqlParser.VALIDATION - 558)) | (1 << (MySqlParser.VALUE - 558)) | (1 << (MySqlParser.VARIABLES - 558)) | (1 << (MySqlParser.VIEW - 558)) | (1 << (MySqlParser.VISIBLE - 558)) | (1 << (MySqlParser.WAIT - 558)) | (1 << (MySqlParser.WARNINGS - 558)) | (1 << (MySqlParser.WITHOUT - 558)) | (1 << (MySqlParser.WORK - 558)) | (1 << (MySqlParser.WRAPPER - 558)) | (1 << (MySqlParser.X509 - 558)) | (1 << (MySqlParser.XA - 558)))) !== 0) || ((((_la - 590)) & ~0x1f) == 0 && ((1 << (_la - 590)) & ((1 << (MySqlParser.XML - 590)) | (1 << (MySqlParser.INTERNAL - 590)) | (1 << (MySqlParser.QUARTER - 590)) | (1 << (MySqlParser.MONTH - 590)) | (1 << (MySqlParser.DAY - 590)) | (1 << (MySqlParser.HOUR - 590)) | (1 << (MySqlParser.MINUTE - 590)) | (1 << (MySqlParser.WEEK - 590)) | (1 << (MySqlParser.SECOND - 590)) | (1 << (MySqlParser.MICROSECOND - 590)) | (1 << (MySqlParser.TABLES - 590)) | (1 << (MySqlParser.ROUTINE - 590)) | (1 << (MySqlParser.EXECUTE - 590)) | (1 << (MySqlParser.FILE - 590)) | (1 << (MySqlParser.PROCESS - 590)) | (1 << (MySqlParser.RELOAD - 590)) | (1 << (MySqlParser.SHUTDOWN - 590)) | (1 << (MySqlParser.SUPER - 590)) | (1 << (MySqlParser.PRIVILEGES - 590)) | (1 << (MySqlParser.AUDIT_ADMIN - 590)) | (1 << (MySqlParser.BACKUP_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 590)) | (1 << (MySqlParser.CLONE_ADMIN - 590)) | (1 << (MySqlParser.CONNECTION_ADMIN - 590)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 590)) | (1 << (MySqlParser.FIREWALL_ADMIN - 590)))) !== 0) || ((((_la - 622)) & ~0x1f) == 0 && ((1 << (_la - 622)) & ((1 << (MySqlParser.FIREWALL_USER - 622)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 622)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 622)) | (1 << (MySqlParser.NDB_STORED_USER - 622)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.REPLICATION_APPLIER - 622)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 622)) | (1 << (MySqlParser.ROLE_ADMIN - 622)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.SET_USER_ID - 622)) | (1 << (MySqlParser.SHOW_ROUTINE - 622)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 622)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 622)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 622)) | (1 << (MySqlParser.ARMSCII8 - 622)) | (1 << (MySqlParser.ASCII - 622)) | (1 << (MySqlParser.BIG5 - 622)) | (1 << (MySqlParser.CP1250 - 622)) | (1 << (MySqlParser.CP1251 - 622)) | (1 << (MySqlParser.CP1256 - 622)) | (1 << (MySqlParser.CP1257 - 622)) | (1 << (MySqlParser.CP850 - 622)) | (1 << (MySqlParser.CP852 - 622)) | (1 << (MySqlParser.CP866 - 622)) | (1 << (MySqlParser.CP932 - 622)) | (1 << (MySqlParser.DEC8 - 622)) | (1 << (MySqlParser.EUCJPMS - 622)) | (1 << (MySqlParser.EUCKR - 622)) | (1 << (MySqlParser.GB2312 - 622)))) !== 0) || ((((_la - 654)) & ~0x1f) == 0 && ((1 << (_la - 654)) & ((1 << (MySqlParser.GBK - 654)) | (1 << (MySqlParser.GEOSTD8 - 654)) | (1 << (MySqlParser.GREEK - 654)) | (1 << (MySqlParser.HEBREW - 654)) | (1 << (MySqlParser.HP8 - 654)) | (1 << (MySqlParser.KEYBCS2 - 654)) | (1 << (MySqlParser.KOI8R - 654)) | (1 << (MySqlParser.KOI8U - 654)) | (1 << (MySqlParser.LATIN1 - 654)) | (1 << (MySqlParser.LATIN2 - 654)) | (1 << (MySqlParser.LATIN5 - 654)) | (1 << (MySqlParser.LATIN7 - 654)) | (1 << (MySqlParser.MACCE - 654)) | (1 << (MySqlParser.MACROMAN - 654)) | (1 << (MySqlParser.SJIS - 654)) | (1 << (MySqlParser.SWE7 - 654)) | (1 << (MySqlParser.TIS620 - 654)) | (1 << (MySqlParser.UCS2 - 654)) | (1 << (MySqlParser.UJIS - 654)) | (1 << (MySqlParser.UTF16 - 654)) | (1 << (MySqlParser.UTF16LE - 654)) | (1 << (MySqlParser.UTF32 - 654)) | (1 << (MySqlParser.UTF8 - 654)) | (1 << (MySqlParser.UTF8MB3 - 654)) | (1 << (MySqlParser.UTF8MB4 - 654)) | (1 << (MySqlParser.ARCHIVE - 654)) | (1 << (MySqlParser.BLACKHOLE - 654)) | (1 << (MySqlParser.CSV - 654)) | (1 << (MySqlParser.FEDERATED - 654)) | (1 << (MySqlParser.INNODB - 654)) | (1 << (MySqlParser.MEMORY - 654)) | (1 << (MySqlParser.MRG_MYISAM - 654)))) !== 0) || ((((_la - 686)) & ~0x1f) == 0 && ((1 << (_la - 686)) & ((1 << (MySqlParser.MYISAM - 686)) | (1 << (MySqlParser.NDB - 686)) | (1 << (MySqlParser.NDBCLUSTER - 686)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 686)) | (1 << (MySqlParser.TOKUDB - 686)) | (1 << (MySqlParser.REPEATABLE - 686)) | (1 << (MySqlParser.COMMITTED - 686)) | (1 << (MySqlParser.UNCOMMITTED - 686)) | (1 << (MySqlParser.SERIALIZABLE - 686)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 686)) | (1 << (MySqlParser.LINESTRING - 686)) | (1 << (MySqlParser.MULTILINESTRING - 686)) | (1 << (MySqlParser.MULTIPOINT - 686)) | (1 << (MySqlParser.MULTIPOLYGON - 686)) | (1 << (MySqlParser.POINT - 686)) | (1 << (MySqlParser.POLYGON - 686)) | (1 << (MySqlParser.ABS - 686)) | (1 << (MySqlParser.ACOS - 686)) | (1 << (MySqlParser.ADDDATE - 686)) | (1 << (MySqlParser.ADDTIME - 686)) | (1 << (MySqlParser.AES_DECRYPT - 686)) | (1 << (MySqlParser.AES_ENCRYPT - 686)) | (1 << (MySqlParser.AREA - 686)) | (1 << (MySqlParser.ASBINARY - 686)) | (1 << (MySqlParser.ASIN - 686)) | (1 << (MySqlParser.ASTEXT - 686)) | (1 << (MySqlParser.ASWKB - 686)) | (1 << (MySqlParser.ASWKT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 686)))) !== 0) || ((((_la - 718)) & ~0x1f) == 0 && ((1 << (_la - 718)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 718)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 718)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 718)) | (1 << (MySqlParser.ATAN - 718)) | (1 << (MySqlParser.ATAN2 - 718)) | (1 << (MySqlParser.BENCHMARK - 718)) | (1 << (MySqlParser.BIN - 718)) | (1 << (MySqlParser.BIT_COUNT - 718)) | (1 << (MySqlParser.BIT_LENGTH - 718)) | (1 << (MySqlParser.BUFFER - 718)) | (1 << (MySqlParser.CATALOG_NAME - 718)) | (1 << (MySqlParser.CEIL - 718)) | (1 << (MySqlParser.CEILING - 718)) | (1 << (MySqlParser.CENTROID - 718)) | (1 << (MySqlParser.CHARACTER_LENGTH - 718)) | (1 << (MySqlParser.CHARSET - 718)) | (1 << (MySqlParser.CHAR_LENGTH - 718)) | (1 << (MySqlParser.COERCIBILITY - 718)) | (1 << (MySqlParser.COLLATION - 718)) | (1 << (MySqlParser.COMPRESS - 718)) | (1 << (MySqlParser.CONCAT - 718)) | (1 << (MySqlParser.CONCAT_WS - 718)) | (1 << (MySqlParser.CONNECTION_ID - 718)) | (1 << (MySqlParser.CONV - 718)) | (1 << (MySqlParser.CONVERT_TZ - 718)) | (1 << (MySqlParser.COS - 718)) | (1 << (MySqlParser.COT - 718)) | (1 << (MySqlParser.CRC32 - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 718)) | (1 << (MySqlParser.CREATE_DIGEST - 718)))) !== 0) || ((((_la - 750)) & ~0x1f) == 0 && ((1 << (_la - 750)) & ((1 << (MySqlParser.CROSSES - 750)) | (1 << (MySqlParser.DATEDIFF - 750)) | (1 << (MySqlParser.DATE_FORMAT - 750)) | (1 << (MySqlParser.DAYNAME - 750)) | (1 << (MySqlParser.DAYOFMONTH - 750)) | (1 << (MySqlParser.DAYOFWEEK - 750)) | (1 << (MySqlParser.DAYOFYEAR - 750)) | (1 << (MySqlParser.DECODE - 750)) | (1 << (MySqlParser.DEGREES - 750)) | (1 << (MySqlParser.DES_DECRYPT - 750)) | (1 << (MySqlParser.DES_ENCRYPT - 750)) | (1 << (MySqlParser.DIMENSION - 750)) | (1 << (MySqlParser.DISJOINT - 750)) | (1 << (MySqlParser.ELT - 750)) | (1 << (MySqlParser.ENCODE - 750)) | (1 << (MySqlParser.ENCRYPT - 750)) | (1 << (MySqlParser.ENDPOINT - 750)) | (1 << (MySqlParser.ENVELOPE - 750)) | (1 << (MySqlParser.EQUALS - 750)) | (1 << (MySqlParser.EXP - 750)) | (1 << (MySqlParser.EXPORT_SET - 750)) | (1 << (MySqlParser.EXTERIORRING - 750)) | (1 << (MySqlParser.EXTRACTVALUE - 750)) | (1 << (MySqlParser.FIELD - 750)) | (1 << (MySqlParser.FIND_IN_SET - 750)) | (1 << (MySqlParser.FLOOR - 750)) | (1 << (MySqlParser.FORMAT - 750)) | (1 << (MySqlParser.FOUND_ROWS - 750)) | (1 << (MySqlParser.FROM_BASE64 - 750)) | (1 << (MySqlParser.FROM_DAYS - 750)) | (1 << (MySqlParser.FROM_UNIXTIME - 750)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 750)))) !== 0) || ((((_la - 782)) & ~0x1f) == 0 && ((1 << (_la - 782)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYN - 782)) | (1 << (MySqlParser.GEOMETRYTYPE - 782)) | (1 << (MySqlParser.GEOMFROMTEXT - 782)) | (1 << (MySqlParser.GEOMFROMWKB - 782)) | (1 << (MySqlParser.GET_FORMAT - 782)) | (1 << (MySqlParser.GET_LOCK - 782)) | (1 << (MySqlParser.GLENGTH - 782)) | (1 << (MySqlParser.GREATEST - 782)) | (1 << (MySqlParser.GTID_SUBSET - 782)) | (1 << (MySqlParser.GTID_SUBTRACT - 782)) | (1 << (MySqlParser.HEX - 782)) | (1 << (MySqlParser.IFNULL - 782)) | (1 << (MySqlParser.INET6_ATON - 782)) | (1 << (MySqlParser.INET6_NTOA - 782)) | (1 << (MySqlParser.INET_ATON - 782)) | (1 << (MySqlParser.INET_NTOA - 782)) | (1 << (MySqlParser.INSTR - 782)) | (1 << (MySqlParser.INTERIORRINGN - 782)) | (1 << (MySqlParser.INTERSECTS - 782)) | (1 << (MySqlParser.ISCLOSED - 782)) | (1 << (MySqlParser.ISEMPTY - 782)) | (1 << (MySqlParser.ISNULL - 782)) | (1 << (MySqlParser.ISSIMPLE - 782)) | (1 << (MySqlParser.IS_FREE_LOCK - 782)) | (1 << (MySqlParser.IS_IPV4 - 782)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 782)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 782)))) !== 0) || ((((_la - 814)) & ~0x1f) == 0 && ((1 << (_la - 814)) & ((1 << (MySqlParser.IS_IPV6 - 814)) | (1 << (MySqlParser.IS_USED_LOCK - 814)) | (1 << (MySqlParser.LAST_INSERT_ID - 814)) | (1 << (MySqlParser.LCASE - 814)) | (1 << (MySqlParser.LEAST - 814)) | (1 << (MySqlParser.LENGTH - 814)) | (1 << (MySqlParser.LINEFROMTEXT - 814)) | (1 << (MySqlParser.LINEFROMWKB - 814)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 814)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 814)) | (1 << (MySqlParser.LN - 814)) | (1 << (MySqlParser.LOAD_FILE - 814)) | (1 << (MySqlParser.LOCATE - 814)) | (1 << (MySqlParser.LOG - 814)) | (1 << (MySqlParser.LOG10 - 814)) | (1 << (MySqlParser.LOG2 - 814)) | (1 << (MySqlParser.LOWER - 814)) | (1 << (MySqlParser.LPAD - 814)) | (1 << (MySqlParser.LTRIM - 814)) | (1 << (MySqlParser.MAKEDATE - 814)) | (1 << (MySqlParser.MAKETIME - 814)) | (1 << (MySqlParser.MAKE_SET - 814)) | (1 << (MySqlParser.MASTER_POS_WAIT - 814)) | (1 << (MySqlParser.MBRCONTAINS - 814)) | (1 << (MySqlParser.MBRDISJOINT - 814)) | (1 << (MySqlParser.MBREQUAL - 814)) | (1 << (MySqlParser.MBRINTERSECTS - 814)) | (1 << (MySqlParser.MBROVERLAPS - 814)) | (1 << (MySqlParser.MBRTOUCHES - 814)) | (1 << (MySqlParser.MBRWITHIN - 814)) | (1 << (MySqlParser.MD5 - 814)) | (1 << (MySqlParser.MLINEFROMTEXT - 814)))) !== 0) || ((((_la - 846)) & ~0x1f) == 0 && ((1 << (_la - 846)) & ((1 << (MySqlParser.MLINEFROMWKB - 846)) | (1 << (MySqlParser.MONTHNAME - 846)) | (1 << (MySqlParser.MPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MPOINTFROMWKB - 846)) | (1 << (MySqlParser.MPOLYFROMTEXT - 846)) | (1 << (MySqlParser.MPOLYFROMWKB - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 846)) | (1 << (MySqlParser.NAME_CONST - 846)) | (1 << (MySqlParser.NULLIF - 846)) | (1 << (MySqlParser.NUMGEOMETRIES - 846)) | (1 << (MySqlParser.NUMINTERIORRINGS - 846)) | (1 << (MySqlParser.NUMPOINTS - 846)) | (1 << (MySqlParser.OCT - 846)) | (1 << (MySqlParser.OCTET_LENGTH - 846)) | (1 << (MySqlParser.ORD - 846)) | (1 << (MySqlParser.OVERLAPS - 846)) | (1 << (MySqlParser.PERIOD_ADD - 846)) | (1 << (MySqlParser.PERIOD_DIFF - 846)) | (1 << (MySqlParser.PI - 846)) | (1 << (MySqlParser.POINTFROMTEXT - 846)) | (1 << (MySqlParser.POINTFROMWKB - 846)) | (1 << (MySqlParser.POINTN - 846)) | (1 << (MySqlParser.POLYFROMTEXT - 846)) | (1 << (MySqlParser.POLYFROMWKB - 846)) | (1 << (MySqlParser.POLYGONFROMTEXT - 846)) | (1 << (MySqlParser.POLYGONFROMWKB - 846)) | (1 << (MySqlParser.POW - 846)))) !== 0) || ((((_la - 878)) & ~0x1f) == 0 && ((1 << (_la - 878)) & ((1 << (MySqlParser.POWER - 878)) | (1 << (MySqlParser.QUOTE - 878)) | (1 << (MySqlParser.RADIANS - 878)) | (1 << (MySqlParser.RAND - 878)) | (1 << (MySqlParser.RANDOM_BYTES - 878)) | (1 << (MySqlParser.RELEASE_LOCK - 878)) | (1 << (MySqlParser.REVERSE - 878)) | (1 << (MySqlParser.ROUND - 878)) | (1 << (MySqlParser.ROW_COUNT - 878)) | (1 << (MySqlParser.RPAD - 878)) | (1 << (MySqlParser.RTRIM - 878)) | (1 << (MySqlParser.SEC_TO_TIME - 878)) | (1 << (MySqlParser.SESSION_USER - 878)) | (1 << (MySqlParser.SHA - 878)) | (1 << (MySqlParser.SHA1 - 878)) | (1 << (MySqlParser.SHA2 - 878)) | (1 << (MySqlParser.SCHEMA_NAME - 878)) | (1 << (MySqlParser.SIGN - 878)) | (1 << (MySqlParser.SIN - 878)) | (1 << (MySqlParser.SLEEP - 878)) | (1 << (MySqlParser.SOUNDEX - 878)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 878)) | (1 << (MySqlParser.SQRT - 878)) | (1 << (MySqlParser.SRID - 878)) | (1 << (MySqlParser.STARTPOINT - 878)) | (1 << (MySqlParser.STRCMP - 878)) | (1 << (MySqlParser.STR_TO_DATE - 878)) | (1 << (MySqlParser.ST_AREA - 878)) | (1 << (MySqlParser.ST_ASBINARY - 878)) | (1 << (MySqlParser.ST_ASTEXT - 878)) | (1 << (MySqlParser.ST_ASWKB - 878)) | (1 << (MySqlParser.ST_ASWKT - 878)))) !== 0) || ((((_la - 910)) & ~0x1f) == 0 && ((1 << (_la - 910)) & ((1 << (MySqlParser.ST_BUFFER - 910)) | (1 << (MySqlParser.ST_CENTROID - 910)) | (1 << (MySqlParser.ST_CONTAINS - 910)) | (1 << (MySqlParser.ST_CROSSES - 910)) | (1 << (MySqlParser.ST_DIFFERENCE - 910)) | (1 << (MySqlParser.ST_DIMENSION - 910)) | (1 << (MySqlParser.ST_DISJOINT - 910)) | (1 << (MySqlParser.ST_DISTANCE - 910)) | (1 << (MySqlParser.ST_ENDPOINT - 910)) | (1 << (MySqlParser.ST_ENVELOPE - 910)) | (1 << (MySqlParser.ST_EQUALS - 910)) | (1 << (MySqlParser.ST_EXTERIORRING - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYN - 910)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 910)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 910)) | (1 << (MySqlParser.ST_INTERIORRINGN - 910)) | (1 << (MySqlParser.ST_INTERSECTION - 910)) | (1 << (MySqlParser.ST_INTERSECTS - 910)) | (1 << (MySqlParser.ST_ISCLOSED - 910)) | (1 << (MySqlParser.ST_ISEMPTY - 910)) | (1 << (MySqlParser.ST_ISSIMPLE - 910)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 910)) | (1 << (MySqlParser.ST_LINEFROMWKB - 910)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 910)))) !== 0) || ((((_la - 942)) & ~0x1f) == 0 && ((1 << (_la - 942)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 942)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 942)) | (1 << (MySqlParser.ST_NUMPOINTS - 942)) | (1 << (MySqlParser.ST_OVERLAPS - 942)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 942)) | (1 << (MySqlParser.ST_POINTFROMWKB - 942)) | (1 << (MySqlParser.ST_POINTN - 942)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYFROMWKB - 942)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 942)) | (1 << (MySqlParser.ST_SRID - 942)) | (1 << (MySqlParser.ST_STARTPOINT - 942)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 942)) | (1 << (MySqlParser.ST_TOUCHES - 942)) | (1 << (MySqlParser.ST_UNION - 942)) | (1 << (MySqlParser.ST_WITHIN - 942)) | (1 << (MySqlParser.ST_X - 942)) | (1 << (MySqlParser.ST_Y - 942)) | (1 << (MySqlParser.SUBDATE - 942)) | (1 << (MySqlParser.SUBSTRING_INDEX - 942)) | (1 << (MySqlParser.SUBTIME - 942)) | (1 << (MySqlParser.SYSTEM_USER - 942)) | (1 << (MySqlParser.TAN - 942)) | (1 << (MySqlParser.TIMEDIFF - 942)) | (1 << (MySqlParser.TIMESTAMPADD - 942)) | (1 << (MySqlParser.TIMESTAMPDIFF - 942)) | (1 << (MySqlParser.TIME_FORMAT - 942)) | (1 << (MySqlParser.TIME_TO_SEC - 942)) | (1 << (MySqlParser.TOUCHES - 942)))) !== 0) || ((((_la - 974)) & ~0x1f) == 0 && ((1 << (_la - 974)) & ((1 << (MySqlParser.TO_BASE64 - 974)) | (1 << (MySqlParser.TO_DAYS - 974)) | (1 << (MySqlParser.TO_SECONDS - 974)) | (1 << (MySqlParser.UCASE - 974)) | (1 << (MySqlParser.UNCOMPRESS - 974)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 974)) | (1 << (MySqlParser.UNHEX - 974)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 974)) | (1 << (MySqlParser.UPDATEXML - 974)) | (1 << (MySqlParser.UPPER - 974)) | (1 << (MySqlParser.UUID - 974)) | (1 << (MySqlParser.UUID_SHORT - 974)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 974)) | (1 << (MySqlParser.VERSION - 974)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1 << (MySqlParser.WEEKDAY - 974)) | (1 << (MySqlParser.WEEKOFYEAR - 974)) | (1 << (MySqlParser.WEIGHT_STRING - 974)) | (1 << (MySqlParser.WITHIN - 974)) | (1 << (MySqlParser.YEARWEEK - 974)) | (1 << (MySqlParser.Y_FUNCTION - 974)) | (1 << (MySqlParser.X_FUNCTION - 974)))) !== 0) || ((((_la - 1034)) & ~0x1f) == 0 && ((1 << (_la - 1034)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (MySqlParser.STRING_LITERAL - 1034)) | (1 << (MySqlParser.ID - 1034)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1034)))) !== 0)) {
	            this.state = 4252;
	            this.uid();
	            this.state = 4253;
	            this.match(MySqlParser.COLON_SYMB);
	        }

	        this.state = 4257;
	        this.match(MySqlParser.WHILE);
	        this.state = 4258;
	        this.expression(0);
	        this.state = 4259;
	        this.match(MySqlParser.DO);
	        this.state = 4261; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 4260;
	        		this.procedureSqlStatement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 4263; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,613, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 4265;
	        this.match(MySqlParser.END);
	        this.state = 4266;
	        this.match(MySqlParser.WHILE);
	        this.state = 4268;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySqlParser.CURRENT - 32)) | (1 << (MySqlParser.DATABASE - 32)) | (1 << (MySqlParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySqlParser.LEFT || _la===MySqlParser.NUMBER || _la===MySqlParser.RIGHT || _la===MySqlParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.TIMESTAMP - 199)) | (1 << (MySqlParser.DATETIME - 199)) | (1 << (MySqlParser.YEAR - 199)) | (1 << (MySqlParser.TEXT - 199)) | (1 << (MySqlParser.ENUM - 199)) | (1 << (MySqlParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.JSON_VALID - 233)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySqlParser.AVG - 233)) | (1 << (MySqlParser.BIT_AND - 233)) | (1 << (MySqlParser.BIT_OR - 233)) | (1 << (MySqlParser.BIT_XOR - 233)) | (1 << (MySqlParser.COUNT - 233)) | (1 << (MySqlParser.GROUP_CONCAT - 233)) | (1 << (MySqlParser.MAX - 233)) | (1 << (MySqlParser.MIN - 233)) | (1 << (MySqlParser.STD - 233)) | (1 << (MySqlParser.STDDEV - 233)) | (1 << (MySqlParser.STDDEV_POP - 233)) | (1 << (MySqlParser.STDDEV_SAMP - 233)) | (1 << (MySqlParser.SUM - 233)) | (1 << (MySqlParser.VAR_POP - 233)) | (1 << (MySqlParser.VAR_SAMP - 233)) | (1 << (MySqlParser.VARIANCE - 233)) | (1 << (MySqlParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySqlParser.ACCOUNT - 270)) | (1 << (MySqlParser.ACTION - 270)) | (1 << (MySqlParser.AFTER - 270)) | (1 << (MySqlParser.AGGREGATE - 270)) | (1 << (MySqlParser.ALGORITHM - 270)) | (1 << (MySqlParser.ANY - 270)) | (1 << (MySqlParser.AT - 270)) | (1 << (MySqlParser.AUTHORS - 270)) | (1 << (MySqlParser.AUTOCOMMIT - 270)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySqlParser.AUTO_INCREMENT - 270)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 270)) | (1 << (MySqlParser.BEGIN - 270)) | (1 << (MySqlParser.BINLOG - 270)) | (1 << (MySqlParser.BIT - 270)) | (1 << (MySqlParser.BLOCK - 270)) | (1 << (MySqlParser.BOOL - 270)) | (1 << (MySqlParser.BOOLEAN - 270)) | (1 << (MySqlParser.BTREE - 270)) | (1 << (MySqlParser.CACHE - 270)) | (1 << (MySqlParser.CASCADED - 270)) | (1 << (MySqlParser.CHAIN - 270)) | (1 << (MySqlParser.CHANGED - 270)) | (1 << (MySqlParser.CHANNEL - 270)) | (1 << (MySqlParser.CHECKSUM - 270)) | (1 << (MySqlParser.PAGE_CHECKSUM - 270)) | (1 << (MySqlParser.CIPHER - 270)) | (1 << (MySqlParser.CLASS_ORIGIN - 270)) | (1 << (MySqlParser.CLIENT - 270)) | (1 << (MySqlParser.CLOSE - 270)) | (1 << (MySqlParser.COALESCE - 270)) | (1 << (MySqlParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySqlParser.COLUMNS - 302)) | (1 << (MySqlParser.COLUMN_FORMAT - 302)) | (1 << (MySqlParser.COLUMN_NAME - 302)) | (1 << (MySqlParser.COMMENT - 302)) | (1 << (MySqlParser.COMMIT - 302)) | (1 << (MySqlParser.COMPACT - 302)) | (1 << (MySqlParser.COMPLETION - 302)) | (1 << (MySqlParser.COMPRESSED - 302)) | (1 << (MySqlParser.COMPRESSION - 302)) | (1 << (MySqlParser.CONCURRENT - 302)) | (1 << (MySqlParser.CONNECTION - 302)) | (1 << (MySqlParser.CONSISTENT - 302)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySqlParser.CONSTRAINT_NAME - 302)) | (1 << (MySqlParser.CONTAINS - 302)) | (1 << (MySqlParser.CONTEXT - 302)) | (1 << (MySqlParser.CONTRIBUTORS - 302)) | (1 << (MySqlParser.COPY - 302)) | (1 << (MySqlParser.CPU - 302)) | (1 << (MySqlParser.CURSOR_NAME - 302)) | (1 << (MySqlParser.DATA - 302)) | (1 << (MySqlParser.DATAFILE - 302)) | (1 << (MySqlParser.DEALLOCATE - 302)) | (1 << (MySqlParser.DEFAULT_AUTH - 302)) | (1 << (MySqlParser.DEFINER - 302)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 302)) | (1 << (MySqlParser.DES_KEY_FILE - 302)) | (1 << (MySqlParser.DIRECTORY - 302)) | (1 << (MySqlParser.DISABLE - 302)) | (1 << (MySqlParser.DISCARD - 302)) | (1 << (MySqlParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySqlParser.DO - 334)) | (1 << (MySqlParser.DUMPFILE - 334)) | (1 << (MySqlParser.DUPLICATE - 334)) | (1 << (MySqlParser.DYNAMIC - 334)) | (1 << (MySqlParser.ENABLE - 334)) | (1 << (MySqlParser.ENCRYPTION - 334)) | (1 << (MySqlParser.END - 334)) | (1 << (MySqlParser.ENDS - 334)) | (1 << (MySqlParser.ENGINE - 334)) | (1 << (MySqlParser.ENGINES - 334)) | (1 << (MySqlParser.ERROR - 334)) | (1 << (MySqlParser.ERRORS - 334)) | (1 << (MySqlParser.ESCAPE - 334)) | (1 << (MySqlParser.EVEN - 334)) | (1 << (MySqlParser.EVENT - 334)) | (1 << (MySqlParser.EVENTS - 334)) | (1 << (MySqlParser.EVERY - 334)) | (1 << (MySqlParser.EXCHANGE - 334)) | (1 << (MySqlParser.EXCLUSIVE - 334)) | (1 << (MySqlParser.EXPIRE - 334)) | (1 << (MySqlParser.EXPORT - 334)) | (1 << (MySqlParser.EXTENDED - 334)) | (1 << (MySqlParser.EXTENT_SIZE - 334)) | (1 << (MySqlParser.FAST - 334)) | (1 << (MySqlParser.FAULTS - 334)) | (1 << (MySqlParser.FIELDS - 334)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySqlParser.FILTER - 334)) | (1 << (MySqlParser.FIRST - 334)) | (1 << (MySqlParser.FIXED - 334)) | (1 << (MySqlParser.FLUSH - 334)) | (1 << (MySqlParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySqlParser.FOUND - 366)) | (1 << (MySqlParser.FULL - 366)) | (1 << (MySqlParser.FUNCTION - 366)) | (1 << (MySqlParser.GENERAL - 366)) | (1 << (MySqlParser.GLOBAL - 366)) | (1 << (MySqlParser.GRANTS - 366)) | (1 << (MySqlParser.GROUP_REPLICATION - 366)) | (1 << (MySqlParser.HANDLER - 366)) | (1 << (MySqlParser.HASH - 366)) | (1 << (MySqlParser.HELP - 366)) | (1 << (MySqlParser.HOST - 366)) | (1 << (MySqlParser.HOSTS - 366)) | (1 << (MySqlParser.IDENTIFIED - 366)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySqlParser.IMPORT - 366)) | (1 << (MySqlParser.INDEXES - 366)) | (1 << (MySqlParser.INITIAL_SIZE - 366)) | (1 << (MySqlParser.INPLACE - 366)) | (1 << (MySqlParser.INSERT_METHOD - 366)) | (1 << (MySqlParser.INSTALL - 366)) | (1 << (MySqlParser.INSTANCE - 366)) | (1 << (MySqlParser.INVISIBLE - 366)) | (1 << (MySqlParser.INVOKER - 366)) | (1 << (MySqlParser.IO - 366)) | (1 << (MySqlParser.IO_THREAD - 366)) | (1 << (MySqlParser.IPC - 366)) | (1 << (MySqlParser.ISOLATION - 366)) | (1 << (MySqlParser.ISSUER - 366)) | (1 << (MySqlParser.JSON - 366)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySqlParser.LANGUAGE - 366)) | (1 << (MySqlParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.LEAVES - 398)) | (1 << (MySqlParser.LESS - 398)) | (1 << (MySqlParser.LEVEL - 398)) | (1 << (MySqlParser.LIST - 398)) | (1 << (MySqlParser.LOCAL - 398)) | (1 << (MySqlParser.LOGFILE - 398)) | (1 << (MySqlParser.LOGS - 398)) | (1 << (MySqlParser.MASTER - 398)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySqlParser.MASTER_DELAY - 398)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySqlParser.MASTER_HOST - 398)) | (1 << (MySqlParser.MASTER_LOG_FILE - 398)) | (1 << (MySqlParser.MASTER_LOG_POS - 398)) | (1 << (MySqlParser.MASTER_PASSWORD - 398)) | (1 << (MySqlParser.MASTER_PORT - 398)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySqlParser.MASTER_SSL - 398)) | (1 << (MySqlParser.MASTER_SSL_CA - 398)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_CERT - 398)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySqlParser.MASTER_SSL_CRL - 398)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_KEY - 398)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 398)) | (1 << (MySqlParser.MASTER_USER - 398)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySqlParser.MEDIUM - 430)) | (1 << (MySqlParser.MEMBER - 430)) | (1 << (MySqlParser.MERGE - 430)) | (1 << (MySqlParser.MESSAGE_TEXT - 430)) | (1 << (MySqlParser.MID - 430)) | (1 << (MySqlParser.MIGRATE - 430)) | (1 << (MySqlParser.MIN_ROWS - 430)) | (1 << (MySqlParser.MODE - 430)) | (1 << (MySqlParser.MODIFY - 430)) | (1 << (MySqlParser.MUTEX - 430)) | (1 << (MySqlParser.MYSQL - 430)) | (1 << (MySqlParser.MYSQL_ERRNO - 430)) | (1 << (MySqlParser.NAME - 430)) | (1 << (MySqlParser.NAMES - 430)) | (1 << (MySqlParser.NCHAR - 430)) | (1 << (MySqlParser.NEVER - 430)) | (1 << (MySqlParser.NEXT - 430)) | (1 << (MySqlParser.NO - 430)) | (1 << (MySqlParser.NODEGROUP - 430)) | (1 << (MySqlParser.NONE - 430)) | (1 << (MySqlParser.OFFLINE - 430)) | (1 << (MySqlParser.OFFSET - 430)) | (1 << (MySqlParser.OF - 430)) | (1 << (MySqlParser.OJ - 430)) | (1 << (MySqlParser.OLD_PASSWORD - 430)) | (1 << (MySqlParser.ONE - 430)) | (1 << (MySqlParser.ONLINE - 430)) | (1 << (MySqlParser.ONLY - 430)) | (1 << (MySqlParser.OPEN - 430)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySqlParser.OPTIONS - 462)) | (1 << (MySqlParser.OWNER - 462)) | (1 << (MySqlParser.PACK_KEYS - 462)) | (1 << (MySqlParser.PAGE - 462)) | (1 << (MySqlParser.PARSER - 462)) | (1 << (MySqlParser.PARTIAL - 462)) | (1 << (MySqlParser.PARTITIONING - 462)) | (1 << (MySqlParser.PARTITIONS - 462)) | (1 << (MySqlParser.PASSWORD - 462)) | (1 << (MySqlParser.PHASE - 462)) | (1 << (MySqlParser.PLUGIN - 462)) | (1 << (MySqlParser.PLUGIN_DIR - 462)) | (1 << (MySqlParser.PLUGINS - 462)) | (1 << (MySqlParser.PORT - 462)) | (1 << (MySqlParser.PRECEDES - 462)) | (1 << (MySqlParser.PREPARE - 462)) | (1 << (MySqlParser.PRESERVE - 462)) | (1 << (MySqlParser.PREV - 462)) | (1 << (MySqlParser.PROCESSLIST - 462)) | (1 << (MySqlParser.PROFILE - 462)) | (1 << (MySqlParser.PROFILES - 462)) | (1 << (MySqlParser.PROXY - 462)) | (1 << (MySqlParser.QUERY - 462)) | (1 << (MySqlParser.QUICK - 462)) | (1 << (MySqlParser.REBUILD - 462)) | (1 << (MySqlParser.RECOVER - 462)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySqlParser.REDUNDANT - 462)) | (1 << (MySqlParser.RELAY - 462)) | (1 << (MySqlParser.RELAY_LOG_FILE - 462)) | (1 << (MySqlParser.RELAY_LOG_POS - 462)) | (1 << (MySqlParser.RELAYLOG - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySqlParser.REMOVE - 494)) | (1 << (MySqlParser.REORGANIZE - 494)) | (1 << (MySqlParser.REPAIR - 494)) | (1 << (MySqlParser.REPLICATE_DO_DB - 494)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATION - 494)) | (1 << (MySqlParser.RESET - 494)) | (1 << (MySqlParser.RESUME - 494)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 494)) | (1 << (MySqlParser.RETURNS - 494)) | (1 << (MySqlParser.ROLE - 494)) | (1 << (MySqlParser.ROLLBACK - 494)) | (1 << (MySqlParser.ROLLUP - 494)) | (1 << (MySqlParser.ROTATE - 494)) | (1 << (MySqlParser.ROW - 494)) | (1 << (MySqlParser.ROWS - 494)) | (1 << (MySqlParser.ROW_FORMAT - 494)) | (1 << (MySqlParser.SAVEPOINT - 494)) | (1 << (MySqlParser.SCHEDULE - 494)) | (1 << (MySqlParser.SECURITY - 494)) | (1 << (MySqlParser.SERVER - 494)) | (1 << (MySqlParser.SESSION - 494)) | (1 << (MySqlParser.SHARE - 494)) | (1 << (MySqlParser.SHARED - 494)) | (1 << (MySqlParser.SIGNED - 494)) | (1 << (MySqlParser.SIMPLE - 494)) | (1 << (MySqlParser.SLAVE - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySqlParser.SLOW - 526)) | (1 << (MySqlParser.SNAPSHOT - 526)) | (1 << (MySqlParser.SOCKET - 526)) | (1 << (MySqlParser.SOME - 526)) | (1 << (MySqlParser.SONAME - 526)) | (1 << (MySqlParser.SOUNDS - 526)) | (1 << (MySqlParser.SOURCE - 526)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySqlParser.SQL_CACHE - 526)) | (1 << (MySqlParser.SQL_NO_CACHE - 526)) | (1 << (MySqlParser.SQL_THREAD - 526)) | (1 << (MySqlParser.START - 526)) | (1 << (MySqlParser.STARTS - 526)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 526)) | (1 << (MySqlParser.STATS_PERSISTENT - 526)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySqlParser.STATUS - 526)) | (1 << (MySqlParser.STOP - 526)) | (1 << (MySqlParser.STORAGE - 526)) | (1 << (MySqlParser.STRING - 526)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySqlParser.SUBJECT - 526)) | (1 << (MySqlParser.SUBPARTITION - 526)) | (1 << (MySqlParser.SUBPARTITIONS - 526)) | (1 << (MySqlParser.SUSPEND - 526)) | (1 << (MySqlParser.SWAPS - 526)) | (1 << (MySqlParser.SWITCHES - 526)) | (1 << (MySqlParser.TABLE_NAME - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySqlParser.TABLESPACE - 558)) | (1 << (MySqlParser.TEMPORARY - 558)) | (1 << (MySqlParser.TEMPTABLE - 558)) | (1 << (MySqlParser.THAN - 558)) | (1 << (MySqlParser.TRADITIONAL - 558)) | (1 << (MySqlParser.TRANSACTION - 558)) | (1 << (MySqlParser.TRANSACTIONAL - 558)) | (1 << (MySqlParser.TRIGGERS - 558)) | (1 << (MySqlParser.TRUNCATE - 558)) | (1 << (MySqlParser.UNDEFINED - 558)) | (1 << (MySqlParser.UNDOFILE - 558)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySqlParser.UNINSTALL - 558)) | (1 << (MySqlParser.UNKNOWN - 558)) | (1 << (MySqlParser.UNTIL - 558)) | (1 << (MySqlParser.UPGRADE - 558)) | (1 << (MySqlParser.USER - 558)) | (1 << (MySqlParser.USE_FRM - 558)) | (1 << (MySqlParser.USER_RESOURCES - 558)) | (1 << (MySqlParser.VALIDATION - 558)) | (1 << (MySqlParser.VALUE - 558)) | (1 << (MySqlParser.VARIABLES - 558)) | (1 << (MySqlParser.VIEW - 558)) | (1 << (MySqlParser.VISIBLE - 558)) | (1 << (MySqlParser.WAIT - 558)) | (1 << (MySqlParser.WARNINGS - 558)) | (1 << (MySqlParser.WITHOUT - 558)) | (1 << (MySqlParser.WORK - 558)) | (1 << (MySqlParser.WRAPPER - 558)) | (1 << (MySqlParser.X509 - 558)) | (1 << (MySqlParser.XA - 558)))) !== 0) || ((((_la - 590)) & ~0x1f) == 0 && ((1 << (_la - 590)) & ((1 << (MySqlParser.XML - 590)) | (1 << (MySqlParser.INTERNAL - 590)) | (1 << (MySqlParser.QUARTER - 590)) | (1 << (MySqlParser.MONTH - 590)) | (1 << (MySqlParser.DAY - 590)) | (1 << (MySqlParser.HOUR - 590)) | (1 << (MySqlParser.MINUTE - 590)) | (1 << (MySqlParser.WEEK - 590)) | (1 << (MySqlParser.SECOND - 590)) | (1 << (MySqlParser.MICROSECOND - 590)) | (1 << (MySqlParser.TABLES - 590)) | (1 << (MySqlParser.ROUTINE - 590)) | (1 << (MySqlParser.EXECUTE - 590)) | (1 << (MySqlParser.FILE - 590)) | (1 << (MySqlParser.PROCESS - 590)) | (1 << (MySqlParser.RELOAD - 590)) | (1 << (MySqlParser.SHUTDOWN - 590)) | (1 << (MySqlParser.SUPER - 590)) | (1 << (MySqlParser.PRIVILEGES - 590)) | (1 << (MySqlParser.AUDIT_ADMIN - 590)) | (1 << (MySqlParser.BACKUP_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 590)) | (1 << (MySqlParser.CLONE_ADMIN - 590)) | (1 << (MySqlParser.CONNECTION_ADMIN - 590)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 590)) | (1 << (MySqlParser.FIREWALL_ADMIN - 590)))) !== 0) || ((((_la - 622)) & ~0x1f) == 0 && ((1 << (_la - 622)) & ((1 << (MySqlParser.FIREWALL_USER - 622)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 622)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 622)) | (1 << (MySqlParser.NDB_STORED_USER - 622)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.REPLICATION_APPLIER - 622)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 622)) | (1 << (MySqlParser.ROLE_ADMIN - 622)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.SET_USER_ID - 622)) | (1 << (MySqlParser.SHOW_ROUTINE - 622)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 622)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 622)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 622)) | (1 << (MySqlParser.ARMSCII8 - 622)) | (1 << (MySqlParser.ASCII - 622)) | (1 << (MySqlParser.BIG5 - 622)) | (1 << (MySqlParser.CP1250 - 622)) | (1 << (MySqlParser.CP1251 - 622)) | (1 << (MySqlParser.CP1256 - 622)) | (1 << (MySqlParser.CP1257 - 622)) | (1 << (MySqlParser.CP850 - 622)) | (1 << (MySqlParser.CP852 - 622)) | (1 << (MySqlParser.CP866 - 622)) | (1 << (MySqlParser.CP932 - 622)) | (1 << (MySqlParser.DEC8 - 622)) | (1 << (MySqlParser.EUCJPMS - 622)) | (1 << (MySqlParser.EUCKR - 622)) | (1 << (MySqlParser.GB2312 - 622)))) !== 0) || ((((_la - 654)) & ~0x1f) == 0 && ((1 << (_la - 654)) & ((1 << (MySqlParser.GBK - 654)) | (1 << (MySqlParser.GEOSTD8 - 654)) | (1 << (MySqlParser.GREEK - 654)) | (1 << (MySqlParser.HEBREW - 654)) | (1 << (MySqlParser.HP8 - 654)) | (1 << (MySqlParser.KEYBCS2 - 654)) | (1 << (MySqlParser.KOI8R - 654)) | (1 << (MySqlParser.KOI8U - 654)) | (1 << (MySqlParser.LATIN1 - 654)) | (1 << (MySqlParser.LATIN2 - 654)) | (1 << (MySqlParser.LATIN5 - 654)) | (1 << (MySqlParser.LATIN7 - 654)) | (1 << (MySqlParser.MACCE - 654)) | (1 << (MySqlParser.MACROMAN - 654)) | (1 << (MySqlParser.SJIS - 654)) | (1 << (MySqlParser.SWE7 - 654)) | (1 << (MySqlParser.TIS620 - 654)) | (1 << (MySqlParser.UCS2 - 654)) | (1 << (MySqlParser.UJIS - 654)) | (1 << (MySqlParser.UTF16 - 654)) | (1 << (MySqlParser.UTF16LE - 654)) | (1 << (MySqlParser.UTF32 - 654)) | (1 << (MySqlParser.UTF8 - 654)) | (1 << (MySqlParser.UTF8MB3 - 654)) | (1 << (MySqlParser.UTF8MB4 - 654)) | (1 << (MySqlParser.ARCHIVE - 654)) | (1 << (MySqlParser.BLACKHOLE - 654)) | (1 << (MySqlParser.CSV - 654)) | (1 << (MySqlParser.FEDERATED - 654)) | (1 << (MySqlParser.INNODB - 654)) | (1 << (MySqlParser.MEMORY - 654)) | (1 << (MySqlParser.MRG_MYISAM - 654)))) !== 0) || ((((_la - 686)) & ~0x1f) == 0 && ((1 << (_la - 686)) & ((1 << (MySqlParser.MYISAM - 686)) | (1 << (MySqlParser.NDB - 686)) | (1 << (MySqlParser.NDBCLUSTER - 686)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 686)) | (1 << (MySqlParser.TOKUDB - 686)) | (1 << (MySqlParser.REPEATABLE - 686)) | (1 << (MySqlParser.COMMITTED - 686)) | (1 << (MySqlParser.UNCOMMITTED - 686)) | (1 << (MySqlParser.SERIALIZABLE - 686)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 686)) | (1 << (MySqlParser.LINESTRING - 686)) | (1 << (MySqlParser.MULTILINESTRING - 686)) | (1 << (MySqlParser.MULTIPOINT - 686)) | (1 << (MySqlParser.MULTIPOLYGON - 686)) | (1 << (MySqlParser.POINT - 686)) | (1 << (MySqlParser.POLYGON - 686)) | (1 << (MySqlParser.ABS - 686)) | (1 << (MySqlParser.ACOS - 686)) | (1 << (MySqlParser.ADDDATE - 686)) | (1 << (MySqlParser.ADDTIME - 686)) | (1 << (MySqlParser.AES_DECRYPT - 686)) | (1 << (MySqlParser.AES_ENCRYPT - 686)) | (1 << (MySqlParser.AREA - 686)) | (1 << (MySqlParser.ASBINARY - 686)) | (1 << (MySqlParser.ASIN - 686)) | (1 << (MySqlParser.ASTEXT - 686)) | (1 << (MySqlParser.ASWKB - 686)) | (1 << (MySqlParser.ASWKT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 686)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 686)))) !== 0) || ((((_la - 718)) & ~0x1f) == 0 && ((1 << (_la - 718)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 718)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 718)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 718)) | (1 << (MySqlParser.ATAN - 718)) | (1 << (MySqlParser.ATAN2 - 718)) | (1 << (MySqlParser.BENCHMARK - 718)) | (1 << (MySqlParser.BIN - 718)) | (1 << (MySqlParser.BIT_COUNT - 718)) | (1 << (MySqlParser.BIT_LENGTH - 718)) | (1 << (MySqlParser.BUFFER - 718)) | (1 << (MySqlParser.CATALOG_NAME - 718)) | (1 << (MySqlParser.CEIL - 718)) | (1 << (MySqlParser.CEILING - 718)) | (1 << (MySqlParser.CENTROID - 718)) | (1 << (MySqlParser.CHARACTER_LENGTH - 718)) | (1 << (MySqlParser.CHARSET - 718)) | (1 << (MySqlParser.CHAR_LENGTH - 718)) | (1 << (MySqlParser.COERCIBILITY - 718)) | (1 << (MySqlParser.COLLATION - 718)) | (1 << (MySqlParser.COMPRESS - 718)) | (1 << (MySqlParser.CONCAT - 718)) | (1 << (MySqlParser.CONCAT_WS - 718)) | (1 << (MySqlParser.CONNECTION_ID - 718)) | (1 << (MySqlParser.CONV - 718)) | (1 << (MySqlParser.CONVERT_TZ - 718)) | (1 << (MySqlParser.COS - 718)) | (1 << (MySqlParser.COT - 718)) | (1 << (MySqlParser.CRC32 - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 718)) | (1 << (MySqlParser.CREATE_DIGEST - 718)))) !== 0) || ((((_la - 750)) & ~0x1f) == 0 && ((1 << (_la - 750)) & ((1 << (MySqlParser.CROSSES - 750)) | (1 << (MySqlParser.DATEDIFF - 750)) | (1 << (MySqlParser.DATE_FORMAT - 750)) | (1 << (MySqlParser.DAYNAME - 750)) | (1 << (MySqlParser.DAYOFMONTH - 750)) | (1 << (MySqlParser.DAYOFWEEK - 750)) | (1 << (MySqlParser.DAYOFYEAR - 750)) | (1 << (MySqlParser.DECODE - 750)) | (1 << (MySqlParser.DEGREES - 750)) | (1 << (MySqlParser.DES_DECRYPT - 750)) | (1 << (MySqlParser.DES_ENCRYPT - 750)) | (1 << (MySqlParser.DIMENSION - 750)) | (1 << (MySqlParser.DISJOINT - 750)) | (1 << (MySqlParser.ELT - 750)) | (1 << (MySqlParser.ENCODE - 750)) | (1 << (MySqlParser.ENCRYPT - 750)) | (1 << (MySqlParser.ENDPOINT - 750)) | (1 << (MySqlParser.ENVELOPE - 750)) | (1 << (MySqlParser.EQUALS - 750)) | (1 << (MySqlParser.EXP - 750)) | (1 << (MySqlParser.EXPORT_SET - 750)) | (1 << (MySqlParser.EXTERIORRING - 750)) | (1 << (MySqlParser.EXTRACTVALUE - 750)) | (1 << (MySqlParser.FIELD - 750)) | (1 << (MySqlParser.FIND_IN_SET - 750)) | (1 << (MySqlParser.FLOOR - 750)) | (1 << (MySqlParser.FORMAT - 750)) | (1 << (MySqlParser.FOUND_ROWS - 750)) | (1 << (MySqlParser.FROM_BASE64 - 750)) | (1 << (MySqlParser.FROM_DAYS - 750)) | (1 << (MySqlParser.FROM_UNIXTIME - 750)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 750)))) !== 0) || ((((_la - 782)) & ~0x1f) == 0 && ((1 << (_la - 782)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 782)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 782)) | (1 << (MySqlParser.GEOMETRYN - 782)) | (1 << (MySqlParser.GEOMETRYTYPE - 782)) | (1 << (MySqlParser.GEOMFROMTEXT - 782)) | (1 << (MySqlParser.GEOMFROMWKB - 782)) | (1 << (MySqlParser.GET_FORMAT - 782)) | (1 << (MySqlParser.GET_LOCK - 782)) | (1 << (MySqlParser.GLENGTH - 782)) | (1 << (MySqlParser.GREATEST - 782)) | (1 << (MySqlParser.GTID_SUBSET - 782)) | (1 << (MySqlParser.GTID_SUBTRACT - 782)) | (1 << (MySqlParser.HEX - 782)) | (1 << (MySqlParser.IFNULL - 782)) | (1 << (MySqlParser.INET6_ATON - 782)) | (1 << (MySqlParser.INET6_NTOA - 782)) | (1 << (MySqlParser.INET_ATON - 782)) | (1 << (MySqlParser.INET_NTOA - 782)) | (1 << (MySqlParser.INSTR - 782)) | (1 << (MySqlParser.INTERIORRINGN - 782)) | (1 << (MySqlParser.INTERSECTS - 782)) | (1 << (MySqlParser.ISCLOSED - 782)) | (1 << (MySqlParser.ISEMPTY - 782)) | (1 << (MySqlParser.ISNULL - 782)) | (1 << (MySqlParser.ISSIMPLE - 782)) | (1 << (MySqlParser.IS_FREE_LOCK - 782)) | (1 << (MySqlParser.IS_IPV4 - 782)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 782)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 782)))) !== 0) || ((((_la - 814)) & ~0x1f) == 0 && ((1 << (_la - 814)) & ((1 << (MySqlParser.IS_IPV6 - 814)) | (1 << (MySqlParser.IS_USED_LOCK - 814)) | (1 << (MySqlParser.LAST_INSERT_ID - 814)) | (1 << (MySqlParser.LCASE - 814)) | (1 << (MySqlParser.LEAST - 814)) | (1 << (MySqlParser.LENGTH - 814)) | (1 << (MySqlParser.LINEFROMTEXT - 814)) | (1 << (MySqlParser.LINEFROMWKB - 814)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 814)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 814)) | (1 << (MySqlParser.LN - 814)) | (1 << (MySqlParser.LOAD_FILE - 814)) | (1 << (MySqlParser.LOCATE - 814)) | (1 << (MySqlParser.LOG - 814)) | (1 << (MySqlParser.LOG10 - 814)) | (1 << (MySqlParser.LOG2 - 814)) | (1 << (MySqlParser.LOWER - 814)) | (1 << (MySqlParser.LPAD - 814)) | (1 << (MySqlParser.LTRIM - 814)) | (1 << (MySqlParser.MAKEDATE - 814)) | (1 << (MySqlParser.MAKETIME - 814)) | (1 << (MySqlParser.MAKE_SET - 814)) | (1 << (MySqlParser.MASTER_POS_WAIT - 814)) | (1 << (MySqlParser.MBRCONTAINS - 814)) | (1 << (MySqlParser.MBRDISJOINT - 814)) | (1 << (MySqlParser.MBREQUAL - 814)) | (1 << (MySqlParser.MBRINTERSECTS - 814)) | (1 << (MySqlParser.MBROVERLAPS - 814)) | (1 << (MySqlParser.MBRTOUCHES - 814)) | (1 << (MySqlParser.MBRWITHIN - 814)) | (1 << (MySqlParser.MD5 - 814)) | (1 << (MySqlParser.MLINEFROMTEXT - 814)))) !== 0) || ((((_la - 846)) & ~0x1f) == 0 && ((1 << (_la - 846)) & ((1 << (MySqlParser.MLINEFROMWKB - 846)) | (1 << (MySqlParser.MONTHNAME - 846)) | (1 << (MySqlParser.MPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MPOINTFROMWKB - 846)) | (1 << (MySqlParser.MPOLYFROMTEXT - 846)) | (1 << (MySqlParser.MPOLYFROMWKB - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 846)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 846)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 846)) | (1 << (MySqlParser.NAME_CONST - 846)) | (1 << (MySqlParser.NULLIF - 846)) | (1 << (MySqlParser.NUMGEOMETRIES - 846)) | (1 << (MySqlParser.NUMINTERIORRINGS - 846)) | (1 << (MySqlParser.NUMPOINTS - 846)) | (1 << (MySqlParser.OCT - 846)) | (1 << (MySqlParser.OCTET_LENGTH - 846)) | (1 << (MySqlParser.ORD - 846)) | (1 << (MySqlParser.OVERLAPS - 846)) | (1 << (MySqlParser.PERIOD_ADD - 846)) | (1 << (MySqlParser.PERIOD_DIFF - 846)) | (1 << (MySqlParser.PI - 846)) | (1 << (MySqlParser.POINTFROMTEXT - 846)) | (1 << (MySqlParser.POINTFROMWKB - 846)) | (1 << (MySqlParser.POINTN - 846)) | (1 << (MySqlParser.POLYFROMTEXT - 846)) | (1 << (MySqlParser.POLYFROMWKB - 846)) | (1 << (MySqlParser.POLYGONFROMTEXT - 846)) | (1 << (MySqlParser.POLYGONFROMWKB - 846)) | (1 << (MySqlParser.POW - 846)))) !== 0) || ((((_la - 878)) & ~0x1f) == 0 && ((1 << (_la - 878)) & ((1 << (MySqlParser.POWER - 878)) | (1 << (MySqlParser.QUOTE - 878)) | (1 << (MySqlParser.RADIANS - 878)) | (1 << (MySqlParser.RAND - 878)) | (1 << (MySqlParser.RANDOM_BYTES - 878)) | (1 << (MySqlParser.RELEASE_LOCK - 878)) | (1 << (MySqlParser.REVERSE - 878)) | (1 << (MySqlParser.ROUND - 878)) | (1 << (MySqlParser.ROW_COUNT - 878)) | (1 << (MySqlParser.RPAD - 878)) | (1 << (MySqlParser.RTRIM - 878)) | (1 << (MySqlParser.SEC_TO_TIME - 878)) | (1 << (MySqlParser.SESSION_USER - 878)) | (1 << (MySqlParser.SHA - 878)) | (1 << (MySqlParser.SHA1 - 878)) | (1 << (MySqlParser.SHA2 - 878)) | (1 << (MySqlParser.SCHEMA_NAME - 878)) | (1 << (MySqlParser.SIGN - 878)) | (1 << (MySqlParser.SIN - 878)) | (1 << (MySqlParser.SLEEP - 878)) | (1 << (MySqlParser.SOUNDEX - 878)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 878)) | (1 << (MySqlParser.SQRT - 878)) | (1 << (MySqlParser.SRID - 878)) | (1 << (MySqlParser.STARTPOINT - 878)) | (1 << (MySqlParser.STRCMP - 878)) | (1 << (MySqlParser.STR_TO_DATE - 878)) | (1 << (MySqlParser.ST_AREA - 878)) | (1 << (MySqlParser.ST_ASBINARY - 878)) | (1 << (MySqlParser.ST_ASTEXT - 878)) | (1 << (MySqlParser.ST_ASWKB - 878)) | (1 << (MySqlParser.ST_ASWKT - 878)))) !== 0) || ((((_la - 910)) & ~0x1f) == 0 && ((1 << (_la - 910)) & ((1 << (MySqlParser.ST_BUFFER - 910)) | (1 << (MySqlParser.ST_CENTROID - 910)) | (1 << (MySqlParser.ST_CONTAINS - 910)) | (1 << (MySqlParser.ST_CROSSES - 910)) | (1 << (MySqlParser.ST_DIFFERENCE - 910)) | (1 << (MySqlParser.ST_DIMENSION - 910)) | (1 << (MySqlParser.ST_DISJOINT - 910)) | (1 << (MySqlParser.ST_DISTANCE - 910)) | (1 << (MySqlParser.ST_ENDPOINT - 910)) | (1 << (MySqlParser.ST_ENVELOPE - 910)) | (1 << (MySqlParser.ST_EQUALS - 910)) | (1 << (MySqlParser.ST_EXTERIORRING - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 910)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 910)) | (1 << (MySqlParser.ST_GEOMETRYN - 910)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 910)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 910)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 910)) | (1 << (MySqlParser.ST_INTERIORRINGN - 910)) | (1 << (MySqlParser.ST_INTERSECTION - 910)) | (1 << (MySqlParser.ST_INTERSECTS - 910)) | (1 << (MySqlParser.ST_ISCLOSED - 910)) | (1 << (MySqlParser.ST_ISEMPTY - 910)) | (1 << (MySqlParser.ST_ISSIMPLE - 910)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 910)) | (1 << (MySqlParser.ST_LINEFROMWKB - 910)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 910)))) !== 0) || ((((_la - 942)) & ~0x1f) == 0 && ((1 << (_la - 942)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 942)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 942)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 942)) | (1 << (MySqlParser.ST_NUMPOINTS - 942)) | (1 << (MySqlParser.ST_OVERLAPS - 942)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 942)) | (1 << (MySqlParser.ST_POINTFROMWKB - 942)) | (1 << (MySqlParser.ST_POINTN - 942)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYFROMWKB - 942)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 942)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 942)) | (1 << (MySqlParser.ST_SRID - 942)) | (1 << (MySqlParser.ST_STARTPOINT - 942)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 942)) | (1 << (MySqlParser.ST_TOUCHES - 942)) | (1 << (MySqlParser.ST_UNION - 942)) | (1 << (MySqlParser.ST_WITHIN - 942)) | (1 << (MySqlParser.ST_X - 942)) | (1 << (MySqlParser.ST_Y - 942)) | (1 << (MySqlParser.SUBDATE - 942)) | (1 << (MySqlParser.SUBSTRING_INDEX - 942)) | (1 << (MySqlParser.SUBTIME - 942)) | (1 << (MySqlParser.SYSTEM_USER - 942)) | (1 << (MySqlParser.TAN - 942)) | (1 << (MySqlParser.TIMEDIFF - 942)) | (1 << (MySqlParser.TIMESTAMPADD - 942)) | (1 << (MySqlParser.TIMESTAMPDIFF - 942)) | (1 << (MySqlParser.TIME_FORMAT - 942)) | (1 << (MySqlParser.TIME_TO_SEC - 942)) | (1 << (MySqlParser.TOUCHES - 942)))) !== 0) || ((((_la - 974)) & ~0x1f) == 0 && ((1 << (_la - 974)) & ((1 << (MySqlParser.TO_BASE64 - 974)) | (1 << (MySqlParser.TO_DAYS - 974)) | (1 << (MySqlParser.TO_SECONDS - 974)) | (1 << (MySqlParser.UCASE - 974)) | (1 << (MySqlParser.UNCOMPRESS - 974)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 974)) | (1 << (MySqlParser.UNHEX - 974)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 974)) | (1 << (MySqlParser.UPDATEXML - 974)) | (1 << (MySqlParser.UPPER - 974)) | (1 << (MySqlParser.UUID - 974)) | (1 << (MySqlParser.UUID_SHORT - 974)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 974)) | (1 << (MySqlParser.VERSION - 974)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1 << (MySqlParser.WEEKDAY - 974)) | (1 << (MySqlParser.WEEKOFYEAR - 974)) | (1 << (MySqlParser.WEIGHT_STRING - 974)) | (1 << (MySqlParser.WITHIN - 974)) | (1 << (MySqlParser.YEARWEEK - 974)) | (1 << (MySqlParser.Y_FUNCTION - 974)) | (1 << (MySqlParser.X_FUNCTION - 974)))) !== 0) || ((((_la - 1034)) & ~0x1f) == 0 && ((1 << (_la - 1034)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (MySqlParser.STRING_LITERAL - 1034)) | (1 << (MySqlParser.ID - 1034)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1034)))) !== 0)) {
	            this.state = 4267;
	            this.uid();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cursorStatement() {
	    let localctx = new CursorStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, MySqlParser.RULE_cursorStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 4285;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.CLOSE:
	            localctx = new CloseCursorContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4270;
	            this.match(MySqlParser.CLOSE);
	            this.state = 4271;
	            this.uid();
	            break;
	        case MySqlParser.FETCH:
	            localctx = new FetchCursorContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4272;
	            this.match(MySqlParser.FETCH);
	            this.state = 4277;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,616,this._ctx);
	            if(la_===1) {
	                this.state = 4274;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===MySqlParser.NEXT) {
	                    this.state = 4273;
	                    this.match(MySqlParser.NEXT);
	                }

	                this.state = 4276;
	                this.match(MySqlParser.FROM);

	            }
	            this.state = 4279;
	            this.uid();
	            this.state = 4280;
	            this.match(MySqlParser.INTO);
	            this.state = 4281;
	            this.uidList();
	            break;
	        case MySqlParser.OPEN:
	            localctx = new OpenCursorContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4283;
	            this.match(MySqlParser.OPEN);
	            this.state = 4284;
	            this.uid();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declareVariable() {
	    let localctx = new DeclareVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, MySqlParser.RULE_declareVariable);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4287;
	        this.match(MySqlParser.DECLARE);
	        this.state = 4288;
	        this.uidList();
	        this.state = 4289;
	        this.dataType();
	        this.state = 4292;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.DEFAULT) {
	            this.state = 4290;
	            this.match(MySqlParser.DEFAULT);
	            this.state = 4291;
	            this.expression(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declareCondition() {
	    let localctx = new DeclareConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, MySqlParser.RULE_declareCondition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4294;
	        this.match(MySqlParser.DECLARE);
	        this.state = 4295;
	        this.uid();
	        this.state = 4296;
	        this.match(MySqlParser.CONDITION);
	        this.state = 4297;
	        this.match(MySqlParser.FOR);
	        this.state = 4304;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.ZERO_DECIMAL:
	        case MySqlParser.ONE_DECIMAL:
	        case MySqlParser.TWO_DECIMAL:
	        case MySqlParser.DECIMAL_LITERAL:
	            this.state = 4298;
	            this.decimalLiteral();
	            break;
	        case MySqlParser.SQLSTATE:
	            this.state = 4299;
	            this.match(MySqlParser.SQLSTATE);
	            this.state = 4301;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.VALUE) {
	                this.state = 4300;
	                this.match(MySqlParser.VALUE);
	            }

	            this.state = 4303;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declareCursor() {
	    let localctx = new DeclareCursorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, MySqlParser.RULE_declareCursor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4306;
	        this.match(MySqlParser.DECLARE);
	        this.state = 4307;
	        this.uid();
	        this.state = 4308;
	        this.match(MySqlParser.CURSOR);
	        this.state = 4309;
	        this.match(MySqlParser.FOR);
	        this.state = 4310;
	        this.selectStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declareHandler() {
	    let localctx = new DeclareHandlerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, MySqlParser.RULE_declareHandler);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4312;
	        this.match(MySqlParser.DECLARE);
	        this.state = 4313;
	        localctx.handlerAction = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.CONTINUE || _la===MySqlParser.EXIT || _la===MySqlParser.UNDO)) {
	            localctx.handlerAction = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4314;
	        this.match(MySqlParser.HANDLER);
	        this.state = 4315;
	        this.match(MySqlParser.FOR);
	        this.state = 4316;
	        this.handlerConditionValue();
	        this.state = 4321;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 4317;
	            this.match(MySqlParser.COMMA);
	            this.state = 4318;
	            this.handlerConditionValue();
	            this.state = 4323;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4324;
	        this.routineBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	handlerConditionValue() {
	    let localctx = new HandlerConditionValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, MySqlParser.RULE_handlerConditionValue);
	    var _la = 0; // Token type
	    try {
	        this.state = 4337;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.ZERO_DECIMAL:
	        case MySqlParser.ONE_DECIMAL:
	        case MySqlParser.TWO_DECIMAL:
	        case MySqlParser.DECIMAL_LITERAL:
	            localctx = new HandlerConditionCodeContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4326;
	            this.decimalLiteral();
	            break;
	        case MySqlParser.SQLSTATE:
	            localctx = new HandlerConditionStateContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4327;
	            this.match(MySqlParser.SQLSTATE);
	            this.state = 4329;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.VALUE) {
	                this.state = 4328;
	                this.match(MySqlParser.VALUE);
	            }

	            this.state = 4331;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.CURRENT:
	        case MySqlParser.DATABASE:
	        case MySqlParser.DIAGNOSTICS:
	        case MySqlParser.LEFT:
	        case MySqlParser.NUMBER:
	        case MySqlParser.RIGHT:
	        case MySqlParser.STACKED:
	        case MySqlParser.DATE:
	        case MySqlParser.TIME:
	        case MySqlParser.TIMESTAMP:
	        case MySqlParser.DATETIME:
	        case MySqlParser.YEAR:
	        case MySqlParser.TEXT:
	        case MySqlParser.ENUM:
	        case MySqlParser.SERIAL:
	        case MySqlParser.JSON_VALID:
	        case MySqlParser.JSON_SCHEMA_VALID:
	        case MySqlParser.AVG:
	        case MySqlParser.BIT_AND:
	        case MySqlParser.BIT_OR:
	        case MySqlParser.BIT_XOR:
	        case MySqlParser.COUNT:
	        case MySqlParser.GROUP_CONCAT:
	        case MySqlParser.MAX:
	        case MySqlParser.MIN:
	        case MySqlParser.STD:
	        case MySqlParser.STDDEV:
	        case MySqlParser.STDDEV_POP:
	        case MySqlParser.STDDEV_SAMP:
	        case MySqlParser.SUM:
	        case MySqlParser.VAR_POP:
	        case MySqlParser.VAR_SAMP:
	        case MySqlParser.VARIANCE:
	        case MySqlParser.POSITION:
	        case MySqlParser.ACCOUNT:
	        case MySqlParser.ACTION:
	        case MySqlParser.AFTER:
	        case MySqlParser.AGGREGATE:
	        case MySqlParser.ALGORITHM:
	        case MySqlParser.ANY:
	        case MySqlParser.AT:
	        case MySqlParser.AUTHORS:
	        case MySqlParser.AUTOCOMMIT:
	        case MySqlParser.AUTOEXTEND_SIZE:
	        case MySqlParser.AUTO_INCREMENT:
	        case MySqlParser.AVG_ROW_LENGTH:
	        case MySqlParser.BEGIN:
	        case MySqlParser.BINLOG:
	        case MySqlParser.BIT:
	        case MySqlParser.BLOCK:
	        case MySqlParser.BOOL:
	        case MySqlParser.BOOLEAN:
	        case MySqlParser.BTREE:
	        case MySqlParser.CACHE:
	        case MySqlParser.CASCADED:
	        case MySqlParser.CHAIN:
	        case MySqlParser.CHANGED:
	        case MySqlParser.CHANNEL:
	        case MySqlParser.CHECKSUM:
	        case MySqlParser.PAGE_CHECKSUM:
	        case MySqlParser.CIPHER:
	        case MySqlParser.CLASS_ORIGIN:
	        case MySqlParser.CLIENT:
	        case MySqlParser.CLOSE:
	        case MySqlParser.COALESCE:
	        case MySqlParser.CODE:
	        case MySqlParser.COLUMNS:
	        case MySqlParser.COLUMN_FORMAT:
	        case MySqlParser.COLUMN_NAME:
	        case MySqlParser.COMMENT:
	        case MySqlParser.COMMIT:
	        case MySqlParser.COMPACT:
	        case MySqlParser.COMPLETION:
	        case MySqlParser.COMPRESSED:
	        case MySqlParser.COMPRESSION:
	        case MySqlParser.CONCURRENT:
	        case MySqlParser.CONNECTION:
	        case MySqlParser.CONSISTENT:
	        case MySqlParser.CONSTRAINT_CATALOG:
	        case MySqlParser.CONSTRAINT_SCHEMA:
	        case MySqlParser.CONSTRAINT_NAME:
	        case MySqlParser.CONTAINS:
	        case MySqlParser.CONTEXT:
	        case MySqlParser.CONTRIBUTORS:
	        case MySqlParser.COPY:
	        case MySqlParser.CPU:
	        case MySqlParser.CURSOR_NAME:
	        case MySqlParser.DATA:
	        case MySqlParser.DATAFILE:
	        case MySqlParser.DEALLOCATE:
	        case MySqlParser.DEFAULT_AUTH:
	        case MySqlParser.DEFINER:
	        case MySqlParser.DELAY_KEY_WRITE:
	        case MySqlParser.DES_KEY_FILE:
	        case MySqlParser.DIRECTORY:
	        case MySqlParser.DISABLE:
	        case MySqlParser.DISCARD:
	        case MySqlParser.DISK:
	        case MySqlParser.DO:
	        case MySqlParser.DUMPFILE:
	        case MySqlParser.DUPLICATE:
	        case MySqlParser.DYNAMIC:
	        case MySqlParser.ENABLE:
	        case MySqlParser.ENCRYPTION:
	        case MySqlParser.END:
	        case MySqlParser.ENDS:
	        case MySqlParser.ENGINE:
	        case MySqlParser.ENGINES:
	        case MySqlParser.ERROR:
	        case MySqlParser.ERRORS:
	        case MySqlParser.ESCAPE:
	        case MySqlParser.EVEN:
	        case MySqlParser.EVENT:
	        case MySqlParser.EVENTS:
	        case MySqlParser.EVERY:
	        case MySqlParser.EXCHANGE:
	        case MySqlParser.EXCLUSIVE:
	        case MySqlParser.EXPIRE:
	        case MySqlParser.EXPORT:
	        case MySqlParser.EXTENDED:
	        case MySqlParser.EXTENT_SIZE:
	        case MySqlParser.FAST:
	        case MySqlParser.FAULTS:
	        case MySqlParser.FIELDS:
	        case MySqlParser.FILE_BLOCK_SIZE:
	        case MySqlParser.FILTER:
	        case MySqlParser.FIRST:
	        case MySqlParser.FIXED:
	        case MySqlParser.FLUSH:
	        case MySqlParser.FOLLOWS:
	        case MySqlParser.FOUND:
	        case MySqlParser.FULL:
	        case MySqlParser.FUNCTION:
	        case MySqlParser.GENERAL:
	        case MySqlParser.GLOBAL:
	        case MySqlParser.GRANTS:
	        case MySqlParser.GROUP_REPLICATION:
	        case MySqlParser.HANDLER:
	        case MySqlParser.HASH:
	        case MySqlParser.HELP:
	        case MySqlParser.HOST:
	        case MySqlParser.HOSTS:
	        case MySqlParser.IDENTIFIED:
	        case MySqlParser.IGNORE_SERVER_IDS:
	        case MySqlParser.IMPORT:
	        case MySqlParser.INDEXES:
	        case MySqlParser.INITIAL_SIZE:
	        case MySqlParser.INPLACE:
	        case MySqlParser.INSERT_METHOD:
	        case MySqlParser.INSTALL:
	        case MySqlParser.INSTANCE:
	        case MySqlParser.INVISIBLE:
	        case MySqlParser.INVOKER:
	        case MySqlParser.IO:
	        case MySqlParser.IO_THREAD:
	        case MySqlParser.IPC:
	        case MySqlParser.ISOLATION:
	        case MySqlParser.ISSUER:
	        case MySqlParser.JSON:
	        case MySqlParser.KEY_BLOCK_SIZE:
	        case MySqlParser.LANGUAGE:
	        case MySqlParser.LAST:
	        case MySqlParser.LEAVES:
	        case MySqlParser.LESS:
	        case MySqlParser.LEVEL:
	        case MySqlParser.LIST:
	        case MySqlParser.LOCAL:
	        case MySqlParser.LOGFILE:
	        case MySqlParser.LOGS:
	        case MySqlParser.MASTER:
	        case MySqlParser.MASTER_AUTO_POSITION:
	        case MySqlParser.MASTER_CONNECT_RETRY:
	        case MySqlParser.MASTER_DELAY:
	        case MySqlParser.MASTER_HEARTBEAT_PERIOD:
	        case MySqlParser.MASTER_HOST:
	        case MySqlParser.MASTER_LOG_FILE:
	        case MySqlParser.MASTER_LOG_POS:
	        case MySqlParser.MASTER_PASSWORD:
	        case MySqlParser.MASTER_PORT:
	        case MySqlParser.MASTER_RETRY_COUNT:
	        case MySqlParser.MASTER_SSL:
	        case MySqlParser.MASTER_SSL_CA:
	        case MySqlParser.MASTER_SSL_CAPATH:
	        case MySqlParser.MASTER_SSL_CERT:
	        case MySqlParser.MASTER_SSL_CIPHER:
	        case MySqlParser.MASTER_SSL_CRL:
	        case MySqlParser.MASTER_SSL_CRLPATH:
	        case MySqlParser.MASTER_SSL_KEY:
	        case MySqlParser.MASTER_TLS_VERSION:
	        case MySqlParser.MASTER_USER:
	        case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
	        case MySqlParser.MAX_QUERIES_PER_HOUR:
	        case MySqlParser.MAX_ROWS:
	        case MySqlParser.MAX_SIZE:
	        case MySqlParser.MAX_UPDATES_PER_HOUR:
	        case MySqlParser.MAX_USER_CONNECTIONS:
	        case MySqlParser.MEDIUM:
	        case MySqlParser.MEMBER:
	        case MySqlParser.MERGE:
	        case MySqlParser.MESSAGE_TEXT:
	        case MySqlParser.MID:
	        case MySqlParser.MIGRATE:
	        case MySqlParser.MIN_ROWS:
	        case MySqlParser.MODE:
	        case MySqlParser.MODIFY:
	        case MySqlParser.MUTEX:
	        case MySqlParser.MYSQL:
	        case MySqlParser.MYSQL_ERRNO:
	        case MySqlParser.NAME:
	        case MySqlParser.NAMES:
	        case MySqlParser.NCHAR:
	        case MySqlParser.NEVER:
	        case MySqlParser.NEXT:
	        case MySqlParser.NO:
	        case MySqlParser.NODEGROUP:
	        case MySqlParser.NONE:
	        case MySqlParser.OFFLINE:
	        case MySqlParser.OFFSET:
	        case MySqlParser.OF:
	        case MySqlParser.OJ:
	        case MySqlParser.OLD_PASSWORD:
	        case MySqlParser.ONE:
	        case MySqlParser.ONLINE:
	        case MySqlParser.ONLY:
	        case MySqlParser.OPEN:
	        case MySqlParser.OPTIMIZER_COSTS:
	        case MySqlParser.OPTIONS:
	        case MySqlParser.OWNER:
	        case MySqlParser.PACK_KEYS:
	        case MySqlParser.PAGE:
	        case MySqlParser.PARSER:
	        case MySqlParser.PARTIAL:
	        case MySqlParser.PARTITIONING:
	        case MySqlParser.PARTITIONS:
	        case MySqlParser.PASSWORD:
	        case MySqlParser.PHASE:
	        case MySqlParser.PLUGIN:
	        case MySqlParser.PLUGIN_DIR:
	        case MySqlParser.PLUGINS:
	        case MySqlParser.PORT:
	        case MySqlParser.PRECEDES:
	        case MySqlParser.PREPARE:
	        case MySqlParser.PRESERVE:
	        case MySqlParser.PREV:
	        case MySqlParser.PROCESSLIST:
	        case MySqlParser.PROFILE:
	        case MySqlParser.PROFILES:
	        case MySqlParser.PROXY:
	        case MySqlParser.QUERY:
	        case MySqlParser.QUICK:
	        case MySqlParser.REBUILD:
	        case MySqlParser.RECOVER:
	        case MySqlParser.REDO_BUFFER_SIZE:
	        case MySqlParser.REDUNDANT:
	        case MySqlParser.RELAY:
	        case MySqlParser.RELAY_LOG_FILE:
	        case MySqlParser.RELAY_LOG_POS:
	        case MySqlParser.RELAYLOG:
	        case MySqlParser.REMOVE:
	        case MySqlParser.REORGANIZE:
	        case MySqlParser.REPAIR:
	        case MySqlParser.REPLICATE_DO_DB:
	        case MySqlParser.REPLICATE_DO_TABLE:
	        case MySqlParser.REPLICATE_IGNORE_DB:
	        case MySqlParser.REPLICATE_IGNORE_TABLE:
	        case MySqlParser.REPLICATE_REWRITE_DB:
	        case MySqlParser.REPLICATE_WILD_DO_TABLE:
	        case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
	        case MySqlParser.REPLICATION:
	        case MySqlParser.RESET:
	        case MySqlParser.RESUME:
	        case MySqlParser.RETURNED_SQLSTATE:
	        case MySqlParser.RETURNS:
	        case MySqlParser.ROLE:
	        case MySqlParser.ROLLBACK:
	        case MySqlParser.ROLLUP:
	        case MySqlParser.ROTATE:
	        case MySqlParser.ROW:
	        case MySqlParser.ROWS:
	        case MySqlParser.ROW_FORMAT:
	        case MySqlParser.SAVEPOINT:
	        case MySqlParser.SCHEDULE:
	        case MySqlParser.SECURITY:
	        case MySqlParser.SERVER:
	        case MySqlParser.SESSION:
	        case MySqlParser.SHARE:
	        case MySqlParser.SHARED:
	        case MySqlParser.SIGNED:
	        case MySqlParser.SIMPLE:
	        case MySqlParser.SLAVE:
	        case MySqlParser.SLOW:
	        case MySqlParser.SNAPSHOT:
	        case MySqlParser.SOCKET:
	        case MySqlParser.SOME:
	        case MySqlParser.SONAME:
	        case MySqlParser.SOUNDS:
	        case MySqlParser.SOURCE:
	        case MySqlParser.SQL_AFTER_GTIDS:
	        case MySqlParser.SQL_AFTER_MTS_GAPS:
	        case MySqlParser.SQL_BEFORE_GTIDS:
	        case MySqlParser.SQL_BUFFER_RESULT:
	        case MySqlParser.SQL_CACHE:
	        case MySqlParser.SQL_NO_CACHE:
	        case MySqlParser.SQL_THREAD:
	        case MySqlParser.START:
	        case MySqlParser.STARTS:
	        case MySqlParser.STATS_AUTO_RECALC:
	        case MySqlParser.STATS_PERSISTENT:
	        case MySqlParser.STATS_SAMPLE_PAGES:
	        case MySqlParser.STATUS:
	        case MySqlParser.STOP:
	        case MySqlParser.STORAGE:
	        case MySqlParser.STRING:
	        case MySqlParser.SUBCLASS_ORIGIN:
	        case MySqlParser.SUBJECT:
	        case MySqlParser.SUBPARTITION:
	        case MySqlParser.SUBPARTITIONS:
	        case MySqlParser.SUSPEND:
	        case MySqlParser.SWAPS:
	        case MySqlParser.SWITCHES:
	        case MySqlParser.TABLE_NAME:
	        case MySqlParser.TABLESPACE:
	        case MySqlParser.TEMPORARY:
	        case MySqlParser.TEMPTABLE:
	        case MySqlParser.THAN:
	        case MySqlParser.TRADITIONAL:
	        case MySqlParser.TRANSACTION:
	        case MySqlParser.TRANSACTIONAL:
	        case MySqlParser.TRIGGERS:
	        case MySqlParser.TRUNCATE:
	        case MySqlParser.UNDEFINED:
	        case MySqlParser.UNDOFILE:
	        case MySqlParser.UNDO_BUFFER_SIZE:
	        case MySqlParser.UNINSTALL:
	        case MySqlParser.UNKNOWN:
	        case MySqlParser.UNTIL:
	        case MySqlParser.UPGRADE:
	        case MySqlParser.USER:
	        case MySqlParser.USE_FRM:
	        case MySqlParser.USER_RESOURCES:
	        case MySqlParser.VALIDATION:
	        case MySqlParser.VALUE:
	        case MySqlParser.VARIABLES:
	        case MySqlParser.VIEW:
	        case MySqlParser.VISIBLE:
	        case MySqlParser.WAIT:
	        case MySqlParser.WARNINGS:
	        case MySqlParser.WITHOUT:
	        case MySqlParser.WORK:
	        case MySqlParser.WRAPPER:
	        case MySqlParser.X509:
	        case MySqlParser.XA:
	        case MySqlParser.XML:
	        case MySqlParser.INTERNAL:
	        case MySqlParser.QUARTER:
	        case MySqlParser.MONTH:
	        case MySqlParser.DAY:
	        case MySqlParser.HOUR:
	        case MySqlParser.MINUTE:
	        case MySqlParser.WEEK:
	        case MySqlParser.SECOND:
	        case MySqlParser.MICROSECOND:
	        case MySqlParser.TABLES:
	        case MySqlParser.ROUTINE:
	        case MySqlParser.EXECUTE:
	        case MySqlParser.FILE:
	        case MySqlParser.PROCESS:
	        case MySqlParser.RELOAD:
	        case MySqlParser.SHUTDOWN:
	        case MySqlParser.SUPER:
	        case MySqlParser.PRIVILEGES:
	        case MySqlParser.AUDIT_ADMIN:
	        case MySqlParser.BACKUP_ADMIN:
	        case MySqlParser.BINLOG_ADMIN:
	        case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
	        case MySqlParser.CLONE_ADMIN:
	        case MySqlParser.CONNECTION_ADMIN:
	        case MySqlParser.ENCRYPTION_KEY_ADMIN:
	        case MySqlParser.FIREWALL_ADMIN:
	        case MySqlParser.FIREWALL_USER:
	        case MySqlParser.GROUP_REPLICATION_ADMIN:
	        case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
	        case MySqlParser.NDB_STORED_USER:
	        case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
	        case MySqlParser.REPLICATION_APPLIER:
	        case MySqlParser.REPLICATION_SLAVE_ADMIN:
	        case MySqlParser.RESOURCE_GROUP_ADMIN:
	        case MySqlParser.RESOURCE_GROUP_USER:
	        case MySqlParser.ROLE_ADMIN:
	        case MySqlParser.SESSION_VARIABLES_ADMIN:
	        case MySqlParser.SET_USER_ID:
	        case MySqlParser.SHOW_ROUTINE:
	        case MySqlParser.SYSTEM_VARIABLES_ADMIN:
	        case MySqlParser.TABLE_ENCRYPTION_ADMIN:
	        case MySqlParser.VERSION_TOKEN_ADMIN:
	        case MySqlParser.XA_RECOVER_ADMIN:
	        case MySqlParser.ARMSCII8:
	        case MySqlParser.ASCII:
	        case MySqlParser.BIG5:
	        case MySqlParser.CP1250:
	        case MySqlParser.CP1251:
	        case MySqlParser.CP1256:
	        case MySqlParser.CP1257:
	        case MySqlParser.CP850:
	        case MySqlParser.CP852:
	        case MySqlParser.CP866:
	        case MySqlParser.CP932:
	        case MySqlParser.DEC8:
	        case MySqlParser.EUCJPMS:
	        case MySqlParser.EUCKR:
	        case MySqlParser.GB2312:
	        case MySqlParser.GBK:
	        case MySqlParser.GEOSTD8:
	        case MySqlParser.GREEK:
	        case MySqlParser.HEBREW:
	        case MySqlParser.HP8:
	        case MySqlParser.KEYBCS2:
	        case MySqlParser.KOI8R:
	        case MySqlParser.KOI8U:
	        case MySqlParser.LATIN1:
	        case MySqlParser.LATIN2:
	        case MySqlParser.LATIN5:
	        case MySqlParser.LATIN7:
	        case MySqlParser.MACCE:
	        case MySqlParser.MACROMAN:
	        case MySqlParser.SJIS:
	        case MySqlParser.SWE7:
	        case MySqlParser.TIS620:
	        case MySqlParser.UCS2:
	        case MySqlParser.UJIS:
	        case MySqlParser.UTF16:
	        case MySqlParser.UTF16LE:
	        case MySqlParser.UTF32:
	        case MySqlParser.UTF8:
	        case MySqlParser.UTF8MB3:
	        case MySqlParser.UTF8MB4:
	        case MySqlParser.ARCHIVE:
	        case MySqlParser.BLACKHOLE:
	        case MySqlParser.CSV:
	        case MySqlParser.FEDERATED:
	        case MySqlParser.INNODB:
	        case MySqlParser.MEMORY:
	        case MySqlParser.MRG_MYISAM:
	        case MySqlParser.MYISAM:
	        case MySqlParser.NDB:
	        case MySqlParser.NDBCLUSTER:
	        case MySqlParser.PERFORMANCE_SCHEMA:
	        case MySqlParser.TOKUDB:
	        case MySqlParser.REPEATABLE:
	        case MySqlParser.COMMITTED:
	        case MySqlParser.UNCOMMITTED:
	        case MySqlParser.SERIALIZABLE:
	        case MySqlParser.GEOMETRYCOLLECTION:
	        case MySqlParser.LINESTRING:
	        case MySqlParser.MULTILINESTRING:
	        case MySqlParser.MULTIPOINT:
	        case MySqlParser.MULTIPOLYGON:
	        case MySqlParser.POINT:
	        case MySqlParser.POLYGON:
	        case MySqlParser.ABS:
	        case MySqlParser.ACOS:
	        case MySqlParser.ADDDATE:
	        case MySqlParser.ADDTIME:
	        case MySqlParser.AES_DECRYPT:
	        case MySqlParser.AES_ENCRYPT:
	        case MySqlParser.AREA:
	        case MySqlParser.ASBINARY:
	        case MySqlParser.ASIN:
	        case MySqlParser.ASTEXT:
	        case MySqlParser.ASWKB:
	        case MySqlParser.ASWKT:
	        case MySqlParser.ASYMMETRIC_DECRYPT:
	        case MySqlParser.ASYMMETRIC_DERIVE:
	        case MySqlParser.ASYMMETRIC_ENCRYPT:
	        case MySqlParser.ASYMMETRIC_SIGN:
	        case MySqlParser.ASYMMETRIC_VERIFY:
	        case MySqlParser.ATAN:
	        case MySqlParser.ATAN2:
	        case MySqlParser.BENCHMARK:
	        case MySqlParser.BIN:
	        case MySqlParser.BIT_COUNT:
	        case MySqlParser.BIT_LENGTH:
	        case MySqlParser.BUFFER:
	        case MySqlParser.CATALOG_NAME:
	        case MySqlParser.CEIL:
	        case MySqlParser.CEILING:
	        case MySqlParser.CENTROID:
	        case MySqlParser.CHARACTER_LENGTH:
	        case MySqlParser.CHARSET:
	        case MySqlParser.CHAR_LENGTH:
	        case MySqlParser.COERCIBILITY:
	        case MySqlParser.COLLATION:
	        case MySqlParser.COMPRESS:
	        case MySqlParser.CONCAT:
	        case MySqlParser.CONCAT_WS:
	        case MySqlParser.CONNECTION_ID:
	        case MySqlParser.CONV:
	        case MySqlParser.CONVERT_TZ:
	        case MySqlParser.COS:
	        case MySqlParser.COT:
	        case MySqlParser.CRC32:
	        case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
	        case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
	        case MySqlParser.CREATE_DH_PARAMETERS:
	        case MySqlParser.CREATE_DIGEST:
	        case MySqlParser.CROSSES:
	        case MySqlParser.DATEDIFF:
	        case MySqlParser.DATE_FORMAT:
	        case MySqlParser.DAYNAME:
	        case MySqlParser.DAYOFMONTH:
	        case MySqlParser.DAYOFWEEK:
	        case MySqlParser.DAYOFYEAR:
	        case MySqlParser.DECODE:
	        case MySqlParser.DEGREES:
	        case MySqlParser.DES_DECRYPT:
	        case MySqlParser.DES_ENCRYPT:
	        case MySqlParser.DIMENSION:
	        case MySqlParser.DISJOINT:
	        case MySqlParser.ELT:
	        case MySqlParser.ENCODE:
	        case MySqlParser.ENCRYPT:
	        case MySqlParser.ENDPOINT:
	        case MySqlParser.ENVELOPE:
	        case MySqlParser.EQUALS:
	        case MySqlParser.EXP:
	        case MySqlParser.EXPORT_SET:
	        case MySqlParser.EXTERIORRING:
	        case MySqlParser.EXTRACTVALUE:
	        case MySqlParser.FIELD:
	        case MySqlParser.FIND_IN_SET:
	        case MySqlParser.FLOOR:
	        case MySqlParser.FORMAT:
	        case MySqlParser.FOUND_ROWS:
	        case MySqlParser.FROM_BASE64:
	        case MySqlParser.FROM_DAYS:
	        case MySqlParser.FROM_UNIXTIME:
	        case MySqlParser.GEOMCOLLFROMTEXT:
	        case MySqlParser.GEOMCOLLFROMWKB:
	        case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
	        case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
	        case MySqlParser.GEOMETRYFROMTEXT:
	        case MySqlParser.GEOMETRYFROMWKB:
	        case MySqlParser.GEOMETRYN:
	        case MySqlParser.GEOMETRYTYPE:
	        case MySqlParser.GEOMFROMTEXT:
	        case MySqlParser.GEOMFROMWKB:
	        case MySqlParser.GET_FORMAT:
	        case MySqlParser.GET_LOCK:
	        case MySqlParser.GLENGTH:
	        case MySqlParser.GREATEST:
	        case MySqlParser.GTID_SUBSET:
	        case MySqlParser.GTID_SUBTRACT:
	        case MySqlParser.HEX:
	        case MySqlParser.IFNULL:
	        case MySqlParser.INET6_ATON:
	        case MySqlParser.INET6_NTOA:
	        case MySqlParser.INET_ATON:
	        case MySqlParser.INET_NTOA:
	        case MySqlParser.INSTR:
	        case MySqlParser.INTERIORRINGN:
	        case MySqlParser.INTERSECTS:
	        case MySqlParser.ISCLOSED:
	        case MySqlParser.ISEMPTY:
	        case MySqlParser.ISNULL:
	        case MySqlParser.ISSIMPLE:
	        case MySqlParser.IS_FREE_LOCK:
	        case MySqlParser.IS_IPV4:
	        case MySqlParser.IS_IPV4_COMPAT:
	        case MySqlParser.IS_IPV4_MAPPED:
	        case MySqlParser.IS_IPV6:
	        case MySqlParser.IS_USED_LOCK:
	        case MySqlParser.LAST_INSERT_ID:
	        case MySqlParser.LCASE:
	        case MySqlParser.LEAST:
	        case MySqlParser.LENGTH:
	        case MySqlParser.LINEFROMTEXT:
	        case MySqlParser.LINEFROMWKB:
	        case MySqlParser.LINESTRINGFROMTEXT:
	        case MySqlParser.LINESTRINGFROMWKB:
	        case MySqlParser.LN:
	        case MySqlParser.LOAD_FILE:
	        case MySqlParser.LOCATE:
	        case MySqlParser.LOG:
	        case MySqlParser.LOG10:
	        case MySqlParser.LOG2:
	        case MySqlParser.LOWER:
	        case MySqlParser.LPAD:
	        case MySqlParser.LTRIM:
	        case MySqlParser.MAKEDATE:
	        case MySqlParser.MAKETIME:
	        case MySqlParser.MAKE_SET:
	        case MySqlParser.MASTER_POS_WAIT:
	        case MySqlParser.MBRCONTAINS:
	        case MySqlParser.MBRDISJOINT:
	        case MySqlParser.MBREQUAL:
	        case MySqlParser.MBRINTERSECTS:
	        case MySqlParser.MBROVERLAPS:
	        case MySqlParser.MBRTOUCHES:
	        case MySqlParser.MBRWITHIN:
	        case MySqlParser.MD5:
	        case MySqlParser.MLINEFROMTEXT:
	        case MySqlParser.MLINEFROMWKB:
	        case MySqlParser.MONTHNAME:
	        case MySqlParser.MPOINTFROMTEXT:
	        case MySqlParser.MPOINTFROMWKB:
	        case MySqlParser.MPOLYFROMTEXT:
	        case MySqlParser.MPOLYFROMWKB:
	        case MySqlParser.MULTILINESTRINGFROMTEXT:
	        case MySqlParser.MULTILINESTRINGFROMWKB:
	        case MySqlParser.MULTIPOINTFROMTEXT:
	        case MySqlParser.MULTIPOINTFROMWKB:
	        case MySqlParser.MULTIPOLYGONFROMTEXT:
	        case MySqlParser.MULTIPOLYGONFROMWKB:
	        case MySqlParser.NAME_CONST:
	        case MySqlParser.NULLIF:
	        case MySqlParser.NUMGEOMETRIES:
	        case MySqlParser.NUMINTERIORRINGS:
	        case MySqlParser.NUMPOINTS:
	        case MySqlParser.OCT:
	        case MySqlParser.OCTET_LENGTH:
	        case MySqlParser.ORD:
	        case MySqlParser.OVERLAPS:
	        case MySqlParser.PERIOD_ADD:
	        case MySqlParser.PERIOD_DIFF:
	        case MySqlParser.PI:
	        case MySqlParser.POINTFROMTEXT:
	        case MySqlParser.POINTFROMWKB:
	        case MySqlParser.POINTN:
	        case MySqlParser.POLYFROMTEXT:
	        case MySqlParser.POLYFROMWKB:
	        case MySqlParser.POLYGONFROMTEXT:
	        case MySqlParser.POLYGONFROMWKB:
	        case MySqlParser.POW:
	        case MySqlParser.POWER:
	        case MySqlParser.QUOTE:
	        case MySqlParser.RADIANS:
	        case MySqlParser.RAND:
	        case MySqlParser.RANDOM_BYTES:
	        case MySqlParser.RELEASE_LOCK:
	        case MySqlParser.REVERSE:
	        case MySqlParser.ROUND:
	        case MySqlParser.ROW_COUNT:
	        case MySqlParser.RPAD:
	        case MySqlParser.RTRIM:
	        case MySqlParser.SEC_TO_TIME:
	        case MySqlParser.SESSION_USER:
	        case MySqlParser.SHA:
	        case MySqlParser.SHA1:
	        case MySqlParser.SHA2:
	        case MySqlParser.SCHEMA_NAME:
	        case MySqlParser.SIGN:
	        case MySqlParser.SIN:
	        case MySqlParser.SLEEP:
	        case MySqlParser.SOUNDEX:
	        case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
	        case MySqlParser.SQRT:
	        case MySqlParser.SRID:
	        case MySqlParser.STARTPOINT:
	        case MySqlParser.STRCMP:
	        case MySqlParser.STR_TO_DATE:
	        case MySqlParser.ST_AREA:
	        case MySqlParser.ST_ASBINARY:
	        case MySqlParser.ST_ASTEXT:
	        case MySqlParser.ST_ASWKB:
	        case MySqlParser.ST_ASWKT:
	        case MySqlParser.ST_BUFFER:
	        case MySqlParser.ST_CENTROID:
	        case MySqlParser.ST_CONTAINS:
	        case MySqlParser.ST_CROSSES:
	        case MySqlParser.ST_DIFFERENCE:
	        case MySqlParser.ST_DIMENSION:
	        case MySqlParser.ST_DISJOINT:
	        case MySqlParser.ST_DISTANCE:
	        case MySqlParser.ST_ENDPOINT:
	        case MySqlParser.ST_ENVELOPE:
	        case MySqlParser.ST_EQUALS:
	        case MySqlParser.ST_EXTERIORRING:
	        case MySqlParser.ST_GEOMCOLLFROMTEXT:
	        case MySqlParser.ST_GEOMCOLLFROMTXT:
	        case MySqlParser.ST_GEOMCOLLFROMWKB:
	        case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
	        case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
	        case MySqlParser.ST_GEOMETRYFROMTEXT:
	        case MySqlParser.ST_GEOMETRYFROMWKB:
	        case MySqlParser.ST_GEOMETRYN:
	        case MySqlParser.ST_GEOMETRYTYPE:
	        case MySqlParser.ST_GEOMFROMTEXT:
	        case MySqlParser.ST_GEOMFROMWKB:
	        case MySqlParser.ST_INTERIORRINGN:
	        case MySqlParser.ST_INTERSECTION:
	        case MySqlParser.ST_INTERSECTS:
	        case MySqlParser.ST_ISCLOSED:
	        case MySqlParser.ST_ISEMPTY:
	        case MySqlParser.ST_ISSIMPLE:
	        case MySqlParser.ST_LINEFROMTEXT:
	        case MySqlParser.ST_LINEFROMWKB:
	        case MySqlParser.ST_LINESTRINGFROMTEXT:
	        case MySqlParser.ST_LINESTRINGFROMWKB:
	        case MySqlParser.ST_NUMGEOMETRIES:
	        case MySqlParser.ST_NUMINTERIORRING:
	        case MySqlParser.ST_NUMINTERIORRINGS:
	        case MySqlParser.ST_NUMPOINTS:
	        case MySqlParser.ST_OVERLAPS:
	        case MySqlParser.ST_POINTFROMTEXT:
	        case MySqlParser.ST_POINTFROMWKB:
	        case MySqlParser.ST_POINTN:
	        case MySqlParser.ST_POLYFROMTEXT:
	        case MySqlParser.ST_POLYFROMWKB:
	        case MySqlParser.ST_POLYGONFROMTEXT:
	        case MySqlParser.ST_POLYGONFROMWKB:
	        case MySqlParser.ST_SRID:
	        case MySqlParser.ST_STARTPOINT:
	        case MySqlParser.ST_SYMDIFFERENCE:
	        case MySqlParser.ST_TOUCHES:
	        case MySqlParser.ST_UNION:
	        case MySqlParser.ST_WITHIN:
	        case MySqlParser.ST_X:
	        case MySqlParser.ST_Y:
	        case MySqlParser.SUBDATE:
	        case MySqlParser.SUBSTRING_INDEX:
	        case MySqlParser.SUBTIME:
	        case MySqlParser.SYSTEM_USER:
	        case MySqlParser.TAN:
	        case MySqlParser.TIMEDIFF:
	        case MySqlParser.TIMESTAMPADD:
	        case MySqlParser.TIMESTAMPDIFF:
	        case MySqlParser.TIME_FORMAT:
	        case MySqlParser.TIME_TO_SEC:
	        case MySqlParser.TOUCHES:
	        case MySqlParser.TO_BASE64:
	        case MySqlParser.TO_DAYS:
	        case MySqlParser.TO_SECONDS:
	        case MySqlParser.UCASE:
	        case MySqlParser.UNCOMPRESS:
	        case MySqlParser.UNCOMPRESSED_LENGTH:
	        case MySqlParser.UNHEX:
	        case MySqlParser.UNIX_TIMESTAMP:
	        case MySqlParser.UPDATEXML:
	        case MySqlParser.UPPER:
	        case MySqlParser.UUID:
	        case MySqlParser.UUID_SHORT:
	        case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
	        case MySqlParser.VERSION:
	        case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
	        case MySqlParser.WEEKDAY:
	        case MySqlParser.WEEKOFYEAR:
	        case MySqlParser.WEIGHT_STRING:
	        case MySqlParser.WITHIN:
	        case MySqlParser.YEARWEEK:
	        case MySqlParser.Y_FUNCTION:
	        case MySqlParser.X_FUNCTION:
	        case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
	        case MySqlParser.STRING_LITERAL:
	        case MySqlParser.ID:
	        case MySqlParser.REVERSE_QUOTE_ID:
	            localctx = new HandlerConditionNameContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4332;
	            this.uid();
	            break;
	        case MySqlParser.SQLWARNING:
	            localctx = new HandlerConditionWarningContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4333;
	            this.match(MySqlParser.SQLWARNING);
	            break;
	        case MySqlParser.NOT:
	            localctx = new HandlerConditionNotfoundContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4334;
	            this.match(MySqlParser.NOT);
	            this.state = 4335;
	            this.match(MySqlParser.FOUND);
	            break;
	        case MySqlParser.SQLEXCEPTION:
	            localctx = new HandlerConditionExceptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4336;
	            this.match(MySqlParser.SQLEXCEPTION);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureSqlStatement() {
	    let localctx = new ProcedureSqlStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, MySqlParser.RULE_procedureSqlStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4341;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,624,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4339;
	            this.compoundStatement();
	            break;

	        case 2:
	            this.state = 4340;
	            this.sqlStatement();
	            break;

	        }
	        this.state = 4343;
	        this.match(MySqlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseAlternative() {
	    let localctx = new CaseAlternativeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, MySqlParser.RULE_caseAlternative);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4345;
	        this.match(MySqlParser.WHEN);
	        this.state = 4348;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,625,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4346;
	            this.constant();
	            break;

	        case 2:
	            this.state = 4347;
	            this.expression(0);
	            break;

	        }
	        this.state = 4350;
	        this.match(MySqlParser.THEN);
	        this.state = 4352; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 4351;
	        		this.procedureSqlStatement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 4354; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,626, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elifAlternative() {
	    let localctx = new ElifAlternativeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, MySqlParser.RULE_elifAlternative);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4356;
	        this.match(MySqlParser.ELSEIF);
	        this.state = 4357;
	        this.expression(0);
	        this.state = 4358;
	        this.match(MySqlParser.THEN);
	        this.state = 4360; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 4359;
	        		this.procedureSqlStatement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 4362; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,627, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterUser() {
	    let localctx = new AlterUserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, MySqlParser.RULE_alterUser);
	    var _la = 0; // Token type
	    try {
	        this.state = 4418;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,639,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new AlterUserMysqlV56Context(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4364;
	            this.match(MySqlParser.ALTER);
	            this.state = 4365;
	            this.match(MySqlParser.USER);
	            this.state = 4366;
	            this.userSpecification();
	            this.state = 4371;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 4367;
	                this.match(MySqlParser.COMMA);
	                this.state = 4368;
	                this.userSpecification();
	                this.state = 4373;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            localctx = new AlterUserMysqlV57Context(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4374;
	            this.match(MySqlParser.ALTER);
	            this.state = 4375;
	            this.match(MySqlParser.USER);
	            this.state = 4377;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.IF) {
	                this.state = 4376;
	                this.ifExists();
	            }

	            this.state = 4379;
	            this.userAuthOption();
	            this.state = 4384;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 4380;
	                this.match(MySqlParser.COMMA);
	                this.state = 4381;
	                this.userAuthOption();
	                this.state = 4386;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 4401;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.REQUIRE) {
	                this.state = 4387;
	                this.match(MySqlParser.REQUIRE);
	                this.state = 4399;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case MySqlParser.NONE:
	                    this.state = 4388;
	                    localctx.tlsNone = this.match(MySqlParser.NONE);
	                    break;
	                case MySqlParser.SSL:
	                case MySqlParser.CIPHER:
	                case MySqlParser.ISSUER:
	                case MySqlParser.SUBJECT:
	                case MySqlParser.X509:
	                    this.state = 4389;
	                    this.tlsOption();
	                    this.state = 4396;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===MySqlParser.AND || _la===MySqlParser.SSL || _la===MySqlParser.CIPHER || _la===MySqlParser.ISSUER || _la===MySqlParser.SUBJECT || _la===MySqlParser.X509) {
	                        this.state = 4391;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        if(_la===MySqlParser.AND) {
	                            this.state = 4390;
	                            this.match(MySqlParser.AND);
	                        }

	                        this.state = 4393;
	                        this.tlsOption();
	                        this.state = 4398;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	            }

	            this.state = 4409;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.WITH) {
	                this.state = 4403;
	                this.match(MySqlParser.WITH);
	                this.state = 4405; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 4404;
	                    this.userResourceOption();
	                    this.state = 4407; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(((((_la - 426)) & ~0x1f) == 0 && ((1 << (_la - 426)) & ((1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 426)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 426)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 426)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 426)))) !== 0));
	            }

	            this.state = 4415;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.ACCOUNT || _la===MySqlParser.PASSWORD) {
	                this.state = 4413;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case MySqlParser.PASSWORD:
	                    this.state = 4411;
	                    this.userPasswordOption();
	                    break;
	                case MySqlParser.ACCOUNT:
	                    this.state = 4412;
	                    this.userLockOption();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 4417;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createUser() {
	    let localctx = new CreateUserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, MySqlParser.RULE_createUser);
	    var _la = 0; // Token type
	    try {
	        this.state = 4474;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,651,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new CreateUserMysqlV56Context(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4420;
	            this.match(MySqlParser.CREATE);
	            this.state = 4421;
	            this.match(MySqlParser.USER);
	            this.state = 4422;
	            this.userAuthOption();
	            this.state = 4427;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 4423;
	                this.match(MySqlParser.COMMA);
	                this.state = 4424;
	                this.userAuthOption();
	                this.state = 4429;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            localctx = new CreateUserMysqlV57Context(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4430;
	            this.match(MySqlParser.CREATE);
	            this.state = 4431;
	            this.match(MySqlParser.USER);
	            this.state = 4433;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.IF) {
	                this.state = 4432;
	                this.ifNotExists();
	            }

	            this.state = 4435;
	            this.userAuthOption();
	            this.state = 4440;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 4436;
	                this.match(MySqlParser.COMMA);
	                this.state = 4437;
	                this.userAuthOption();
	                this.state = 4442;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 4457;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.REQUIRE) {
	                this.state = 4443;
	                this.match(MySqlParser.REQUIRE);
	                this.state = 4455;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case MySqlParser.NONE:
	                    this.state = 4444;
	                    localctx.tlsNone = this.match(MySqlParser.NONE);
	                    break;
	                case MySqlParser.SSL:
	                case MySqlParser.CIPHER:
	                case MySqlParser.ISSUER:
	                case MySqlParser.SUBJECT:
	                case MySqlParser.X509:
	                    this.state = 4445;
	                    this.tlsOption();
	                    this.state = 4452;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===MySqlParser.AND || _la===MySqlParser.SSL || _la===MySqlParser.CIPHER || _la===MySqlParser.ISSUER || _la===MySqlParser.SUBJECT || _la===MySqlParser.X509) {
	                        this.state = 4447;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        if(_la===MySqlParser.AND) {
	                            this.state = 4446;
	                            this.match(MySqlParser.AND);
	                        }

	                        this.state = 4449;
	                        this.tlsOption();
	                        this.state = 4454;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	            }

	            this.state = 4465;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.WITH) {
	                this.state = 4459;
	                this.match(MySqlParser.WITH);
	                this.state = 4461; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 4460;
	                    this.userResourceOption();
	                    this.state = 4463; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(((((_la - 426)) & ~0x1f) == 0 && ((1 << (_la - 426)) & ((1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 426)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 426)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 426)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 426)))) !== 0));
	            }

	            this.state = 4471;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.ACCOUNT || _la===MySqlParser.PASSWORD) {
	                this.state = 4469;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case MySqlParser.PASSWORD:
	                    this.state = 4467;
	                    this.userPasswordOption();
	                    break;
	                case MySqlParser.ACCOUNT:
	                    this.state = 4468;
	                    this.userLockOption();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 4473;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropUser() {
	    let localctx = new DropUserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, MySqlParser.RULE_dropUser);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4476;
	        this.match(MySqlParser.DROP);
	        this.state = 4477;
	        this.match(MySqlParser.USER);
	        this.state = 4479;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.IF) {
	            this.state = 4478;
	            this.ifExists();
	        }

	        this.state = 4481;
	        this.userName();
	        this.state = 4486;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 4482;
	            this.match(MySqlParser.COMMA);
	            this.state = 4483;
	            this.userName();
	            this.state = 4488;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantStatement() {
	    let localctx = new GrantStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, MySqlParser.RULE_grantStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4489;
	        this.match(MySqlParser.GRANT);
	        this.state = 4490;
	        this.privelegeClause();
	        this.state = 4495;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 4491;
	            this.match(MySqlParser.COMMA);
	            this.state = 4492;
	            this.privelegeClause();
	            this.state = 4497;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4498;
	        this.match(MySqlParser.ON);
	        this.state = 4500;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,655,this._ctx);
	        if(la_===1) {
	            this.state = 4499;
	            localctx.privilegeObject = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.PROCEDURE || _la===MySqlParser.TABLE || _la===MySqlParser.FUNCTION)) {
	                localctx.privilegeObject = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 4502;
	        this.privilegeLevel();
	        this.state = 4503;
	        this.match(MySqlParser.TO);
	        this.state = 4504;
	        this.userAuthOption();
	        this.state = 4509;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 4505;
	            this.match(MySqlParser.COMMA);
	            this.state = 4506;
	            this.userAuthOption();
	            this.state = 4511;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4526;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.REQUIRE) {
	            this.state = 4512;
	            this.match(MySqlParser.REQUIRE);
	            this.state = 4524;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.NONE:
	                this.state = 4513;
	                localctx.tlsNone = this.match(MySqlParser.NONE);
	                break;
	            case MySqlParser.SSL:
	            case MySqlParser.CIPHER:
	            case MySqlParser.ISSUER:
	            case MySqlParser.SUBJECT:
	            case MySqlParser.X509:
	                this.state = 4514;
	                this.tlsOption();
	                this.state = 4521;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===MySqlParser.AND || _la===MySqlParser.SSL || _la===MySqlParser.CIPHER || _la===MySqlParser.ISSUER || _la===MySqlParser.SUBJECT || _la===MySqlParser.X509) {
	                    this.state = 4516;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===MySqlParser.AND) {
	                        this.state = 4515;
	                        this.match(MySqlParser.AND);
	                    }

	                    this.state = 4518;
	                    this.tlsOption();
	                    this.state = 4523;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	        }

	        this.state = 4537;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.WITH) {
	            this.state = 4528;
	            this.match(MySqlParser.WITH);
	            this.state = 4534;
	            this._errHandler.sync(this);
	            let _alt = this._interp.adaptivePredict(this._input,662,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 4532;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case MySqlParser.GRANT:
	                        this.state = 4529;
	                        this.match(MySqlParser.GRANT);
	                        this.state = 4530;
	                        this.match(MySqlParser.OPTION);
	                        break;
	                    case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
	                    case MySqlParser.MAX_QUERIES_PER_HOUR:
	                    case MySqlParser.MAX_UPDATES_PER_HOUR:
	                    case MySqlParser.MAX_USER_CONNECTIONS:
	                        this.state = 4531;
	                        this.userResourceOption();
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    } 
	                }
	                this.state = 4536;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,662,this._ctx);
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantProxy() {
	    let localctx = new GrantProxyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, MySqlParser.RULE_grantProxy);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4539;
	        this.match(MySqlParser.GRANT);
	        this.state = 4540;
	        this.match(MySqlParser.PROXY);
	        this.state = 4541;
	        this.match(MySqlParser.ON);
	        this.state = 4542;
	        localctx.fromFirst = this.userName();
	        this.state = 4543;
	        this.match(MySqlParser.TO);
	        this.state = 4544;
	        localctx.toFirst = this.userName();
	        this.state = 4549;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 4545;
	            this.match(MySqlParser.COMMA);
	            this.state = 4546;
	            localctx._userName = this.userName();
	            localctx.toOther.push(localctx._userName);
	            this.state = 4551;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4555;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.WITH) {
	            this.state = 4552;
	            this.match(MySqlParser.WITH);
	            this.state = 4553;
	            this.match(MySqlParser.GRANT);
	            this.state = 4554;
	            this.match(MySqlParser.OPTION);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	renameUser() {
	    let localctx = new RenameUserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, MySqlParser.RULE_renameUser);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4557;
	        this.match(MySqlParser.RENAME);
	        this.state = 4558;
	        this.match(MySqlParser.USER);
	        this.state = 4559;
	        this.renameUserClause();
	        this.state = 4564;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 4560;
	            this.match(MySqlParser.COMMA);
	            this.state = 4561;
	            this.renameUserClause();
	            this.state = 4566;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	revokeStatement() {
	    let localctx = new RevokeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, MySqlParser.RULE_revokeStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 4607;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,672,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new DetailRevokeContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4567;
	            this.match(MySqlParser.REVOKE);
	            this.state = 4568;
	            this.privelegeClause();
	            this.state = 4573;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 4569;
	                this.match(MySqlParser.COMMA);
	                this.state = 4570;
	                this.privelegeClause();
	                this.state = 4575;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 4576;
	            this.match(MySqlParser.ON);
	            this.state = 4578;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,668,this._ctx);
	            if(la_===1) {
	                this.state = 4577;
	                localctx.privilegeObject = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.PROCEDURE || _la===MySqlParser.TABLE || _la===MySqlParser.FUNCTION)) {
	                    localctx.privilegeObject = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 4580;
	            this.privilegeLevel();
	            this.state = 4581;
	            this.match(MySqlParser.FROM);
	            this.state = 4582;
	            this.userName();
	            this.state = 4587;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 4583;
	                this.match(MySqlParser.COMMA);
	                this.state = 4584;
	                this.userName();
	                this.state = 4589;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            localctx = new ShortRevokeContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4590;
	            this.match(MySqlParser.REVOKE);
	            this.state = 4591;
	            this.match(MySqlParser.ALL);
	            this.state = 4593;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.PRIVILEGES) {
	                this.state = 4592;
	                this.match(MySqlParser.PRIVILEGES);
	            }

	            this.state = 4595;
	            this.match(MySqlParser.COMMA);
	            this.state = 4596;
	            this.match(MySqlParser.GRANT);
	            this.state = 4597;
	            this.match(MySqlParser.OPTION);
	            this.state = 4598;
	            this.match(MySqlParser.FROM);
	            this.state = 4599;
	            this.userName();
	            this.state = 4604;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 4600;
	                this.match(MySqlParser.COMMA);
	                this.state = 4601;
	                this.userName();
	                this.state = 4606;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	revokeProxy() {
	    let localctx = new RevokeProxyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, MySqlParser.RULE_revokeProxy);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4609;
	        this.match(MySqlParser.REVOKE);
	        this.state = 4610;
	        this.match(MySqlParser.PROXY);
	        this.state = 4611;
	        this.match(MySqlParser.ON);
	        this.state = 4612;
	        localctx.onUser = this.userName();
	        this.state = 4613;
	        this.match(MySqlParser.FROM);
	        this.state = 4614;
	        localctx.fromFirst = this.userName();
	        this.state = 4619;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 4615;
	            this.match(MySqlParser.COMMA);
	            this.state = 4616;
	            localctx._userName = this.userName();
	            localctx.fromOther.push(localctx._userName);
	            this.state = 4621;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setPasswordStatement() {
	    let localctx = new SetPasswordStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, MySqlParser.RULE_setPasswordStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4622;
	        this.match(MySqlParser.SET);
	        this.state = 4623;
	        this.match(MySqlParser.PASSWORD);
	        this.state = 4626;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.FOR) {
	            this.state = 4624;
	            this.match(MySqlParser.FOR);
	            this.state = 4625;
	            this.userName();
	        }

	        this.state = 4628;
	        this.match(MySqlParser.EQUAL_SYMBOL);
	        this.state = 4631;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.OLD_PASSWORD:
	        case MySqlParser.PASSWORD:
	            this.state = 4629;
	            this.passwordFunctionClause();
	            break;
	        case MySqlParser.STRING_LITERAL:
	            this.state = 4630;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	userSpecification() {
	    let localctx = new UserSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, MySqlParser.RULE_userSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4633;
	        this.userName();
	        this.state = 4634;
	        this.userPasswordOption();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	userAuthOption() {
	    let localctx = new UserAuthOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, MySqlParser.RULE_userAuthOption);
	    var _la = 0; // Token type
	    try {
	        this.state = 4660;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,678,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PasswordAuthOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4636;
	            this.userName();
	            this.state = 4637;
	            this.match(MySqlParser.IDENTIFIED);
	            this.state = 4638;
	            this.match(MySqlParser.BY);
	            this.state = 4639;
	            this.match(MySqlParser.PASSWORD);
	            this.state = 4640;
	            localctx.hashed = this.match(MySqlParser.STRING_LITERAL);
	            break;

	        case 2:
	            localctx = new StringAuthOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4642;
	            this.userName();
	            this.state = 4643;
	            this.match(MySqlParser.IDENTIFIED);
	            this.state = 4646;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.WITH) {
	                this.state = 4644;
	                this.match(MySqlParser.WITH);
	                this.state = 4645;
	                this.authPlugin();
	            }

	            this.state = 4648;
	            this.match(MySqlParser.BY);
	            this.state = 4649;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        case 3:
	            localctx = new HashAuthOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4651;
	            this.userName();
	            this.state = 4652;
	            this.match(MySqlParser.IDENTIFIED);
	            this.state = 4653;
	            this.match(MySqlParser.WITH);
	            this.state = 4654;
	            this.authPlugin();
	            this.state = 4657;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.AS) {
	                this.state = 4655;
	                this.match(MySqlParser.AS);
	                this.state = 4656;
	                this.match(MySqlParser.STRING_LITERAL);
	            }

	            break;

	        case 4:
	            localctx = new SimpleAuthOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4659;
	            this.userName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tlsOption() {
	    let localctx = new TlsOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, MySqlParser.RULE_tlsOption);
	    try {
	        this.state = 4670;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.SSL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4662;
	            this.match(MySqlParser.SSL);
	            break;
	        case MySqlParser.X509:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4663;
	            this.match(MySqlParser.X509);
	            break;
	        case MySqlParser.CIPHER:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4664;
	            this.match(MySqlParser.CIPHER);
	            this.state = 4665;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.ISSUER:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4666;
	            this.match(MySqlParser.ISSUER);
	            this.state = 4667;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.SUBJECT:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4668;
	            this.match(MySqlParser.SUBJECT);
	            this.state = 4669;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	userResourceOption() {
	    let localctx = new UserResourceOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, MySqlParser.RULE_userResourceOption);
	    try {
	        this.state = 4680;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.MAX_QUERIES_PER_HOUR:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4672;
	            this.match(MySqlParser.MAX_QUERIES_PER_HOUR);
	            this.state = 4673;
	            this.decimalLiteral();
	            break;
	        case MySqlParser.MAX_UPDATES_PER_HOUR:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4674;
	            this.match(MySqlParser.MAX_UPDATES_PER_HOUR);
	            this.state = 4675;
	            this.decimalLiteral();
	            break;
	        case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4676;
	            this.match(MySqlParser.MAX_CONNECTIONS_PER_HOUR);
	            this.state = 4677;
	            this.decimalLiteral();
	            break;
	        case MySqlParser.MAX_USER_CONNECTIONS:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4678;
	            this.match(MySqlParser.MAX_USER_CONNECTIONS);
	            this.state = 4679;
	            this.decimalLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	userPasswordOption() {
	    let localctx = new UserPasswordOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, MySqlParser.RULE_userPasswordOption);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4682;
	        this.match(MySqlParser.PASSWORD);
	        this.state = 4683;
	        this.match(MySqlParser.EXPIRE);
	        this.state = 4690;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case MySqlParser.DEFAULT:
	        	this.state = 4684;
	        	localctx.expireType = this.match(MySqlParser.DEFAULT);
	        	break;
	        case MySqlParser.NEVER:
	        	this.state = 4685;
	        	localctx.expireType = this.match(MySqlParser.NEVER);
	        	break;
	        case MySqlParser.INTERVAL:
	        	this.state = 4686;
	        	localctx.expireType = this.match(MySqlParser.INTERVAL);
	        	this.state = 4687;
	        	this.decimalLiteral();
	        	this.state = 4688;
	        	this.match(MySqlParser.DAY);
	        	break;
	        case MySqlParser.EOF:
	        case MySqlParser.ALTER:
	        case MySqlParser.ANALYZE:
	        case MySqlParser.CALL:
	        case MySqlParser.CHANGE:
	        case MySqlParser.CHECK:
	        case MySqlParser.CREATE:
	        case MySqlParser.DELETE:
	        case MySqlParser.DESC:
	        case MySqlParser.DESCRIBE:
	        case MySqlParser.DROP:
	        case MySqlParser.EXPLAIN:
	        case MySqlParser.GET:
	        case MySqlParser.GRANT:
	        case MySqlParser.INSERT:
	        case MySqlParser.KILL:
	        case MySqlParser.LOAD:
	        case MySqlParser.LOCK:
	        case MySqlParser.OPTIMIZE:
	        case MySqlParser.PURGE:
	        case MySqlParser.RELEASE:
	        case MySqlParser.RENAME:
	        case MySqlParser.REPLACE:
	        case MySqlParser.RESIGNAL:
	        case MySqlParser.REVOKE:
	        case MySqlParser.SELECT:
	        case MySqlParser.SET:
	        case MySqlParser.SHOW:
	        case MySqlParser.SIGNAL:
	        case MySqlParser.UNLOCK:
	        case MySqlParser.UPDATE:
	        case MySqlParser.USE:
	        case MySqlParser.ACCOUNT:
	        case MySqlParser.BEGIN:
	        case MySqlParser.BINLOG:
	        case MySqlParser.CACHE:
	        case MySqlParser.CHECKSUM:
	        case MySqlParser.COMMIT:
	        case MySqlParser.DEALLOCATE:
	        case MySqlParser.DO:
	        case MySqlParser.FLUSH:
	        case MySqlParser.HANDLER:
	        case MySqlParser.HELP:
	        case MySqlParser.INSTALL:
	        case MySqlParser.PASSWORD:
	        case MySqlParser.PREPARE:
	        case MySqlParser.REPAIR:
	        case MySqlParser.RESET:
	        case MySqlParser.ROLLBACK:
	        case MySqlParser.SAVEPOINT:
	        case MySqlParser.START:
	        case MySqlParser.STOP:
	        case MySqlParser.TRUNCATE:
	        case MySqlParser.UNINSTALL:
	        case MySqlParser.XA:
	        case MySqlParser.EXECUTE:
	        case MySqlParser.SHUTDOWN:
	        case MySqlParser.MINUSMINUS:
	        case MySqlParser.LR_BRACKET:
	        case MySqlParser.COMMA:
	        case MySqlParser.SEMI:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	userLockOption() {
	    let localctx = new UserLockOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 410, MySqlParser.RULE_userLockOption);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4692;
	        this.match(MySqlParser.ACCOUNT);
	        this.state = 4693;
	        localctx.lockType = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.LOCK || _la===MySqlParser.UNLOCK)) {
	            localctx.lockType = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privelegeClause() {
	    let localctx = new PrivelegeClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, MySqlParser.RULE_privelegeClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4695;
	        this.privilege();
	        this.state = 4700;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.LR_BRACKET) {
	            this.state = 4696;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 4697;
	            this.uidList();
	            this.state = 4698;
	            this.match(MySqlParser.RR_BRACKET);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privilege() {
	    let localctx = new PrivilegeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 414, MySqlParser.RULE_privilege);
	    var _la = 0; // Token type
	    try {
	        this.state = 4773;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.ALL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4702;
	            this.match(MySqlParser.ALL);
	            this.state = 4704;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.PRIVILEGES) {
	                this.state = 4703;
	                this.match(MySqlParser.PRIVILEGES);
	            }

	            break;
	        case MySqlParser.ALTER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4706;
	            this.match(MySqlParser.ALTER);
	            this.state = 4708;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.ROUTINE) {
	                this.state = 4707;
	                this.match(MySqlParser.ROUTINE);
	            }

	            break;
	        case MySqlParser.CREATE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4710;
	            this.match(MySqlParser.CREATE);
	            this.state = 4718;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case MySqlParser.TEMPORARY:
	            	this.state = 4711;
	            	this.match(MySqlParser.TEMPORARY);
	            	this.state = 4712;
	            	this.match(MySqlParser.TABLES);
	            	break;
	            case MySqlParser.ROUTINE:
	            	this.state = 4713;
	            	this.match(MySqlParser.ROUTINE);
	            	break;
	            case MySqlParser.VIEW:
	            	this.state = 4714;
	            	this.match(MySqlParser.VIEW);
	            	break;
	            case MySqlParser.USER:
	            	this.state = 4715;
	            	this.match(MySqlParser.USER);
	            	break;
	            case MySqlParser.TABLESPACE:
	            	this.state = 4716;
	            	this.match(MySqlParser.TABLESPACE);
	            	break;
	            case MySqlParser.ROLE:
	            	this.state = 4717;
	            	this.match(MySqlParser.ROLE);
	            	break;
	            case MySqlParser.ON:
	            case MySqlParser.LR_BRACKET:
	            case MySqlParser.COMMA:
	            	break;
	            default:
	            	break;
	            }
	            break;
	        case MySqlParser.DELETE:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4720;
	            this.match(MySqlParser.DELETE);
	            break;
	        case MySqlParser.DROP:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4721;
	            this.match(MySqlParser.DROP);
	            this.state = 4723;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.ROLE) {
	                this.state = 4722;
	                this.match(MySqlParser.ROLE);
	            }

	            break;
	        case MySqlParser.EVENT:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4725;
	            this.match(MySqlParser.EVENT);
	            break;
	        case MySqlParser.EXECUTE:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4726;
	            this.match(MySqlParser.EXECUTE);
	            break;
	        case MySqlParser.FILE:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4727;
	            this.match(MySqlParser.FILE);
	            break;
	        case MySqlParser.GRANT:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 4728;
	            this.match(MySqlParser.GRANT);
	            this.state = 4729;
	            this.match(MySqlParser.OPTION);
	            break;
	        case MySqlParser.INDEX:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 4730;
	            this.match(MySqlParser.INDEX);
	            break;
	        case MySqlParser.INSERT:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 4731;
	            this.match(MySqlParser.INSERT);
	            break;
	        case MySqlParser.LOCK:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 4732;
	            this.match(MySqlParser.LOCK);
	            this.state = 4733;
	            this.match(MySqlParser.TABLES);
	            break;
	        case MySqlParser.PROCESS:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 4734;
	            this.match(MySqlParser.PROCESS);
	            break;
	        case MySqlParser.PROXY:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 4735;
	            this.match(MySqlParser.PROXY);
	            break;
	        case MySqlParser.REFERENCES:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 4736;
	            this.match(MySqlParser.REFERENCES);
	            break;
	        case MySqlParser.RELOAD:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 4737;
	            this.match(MySqlParser.RELOAD);
	            break;
	        case MySqlParser.REPLICATION:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 4738;
	            this.match(MySqlParser.REPLICATION);
	            this.state = 4739;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.CLIENT || _la===MySqlParser.SLAVE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case MySqlParser.SELECT:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 4740;
	            this.match(MySqlParser.SELECT);
	            break;
	        case MySqlParser.SHOW:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 4741;
	            this.match(MySqlParser.SHOW);
	            this.state = 4742;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DATABASES || _la===MySqlParser.VIEW)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case MySqlParser.SHUTDOWN:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 4743;
	            this.match(MySqlParser.SHUTDOWN);
	            break;
	        case MySqlParser.SUPER:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 4744;
	            this.match(MySqlParser.SUPER);
	            break;
	        case MySqlParser.TRIGGER:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 4745;
	            this.match(MySqlParser.TRIGGER);
	            break;
	        case MySqlParser.UPDATE:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 4746;
	            this.match(MySqlParser.UPDATE);
	            break;
	        case MySqlParser.USAGE:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 4747;
	            this.match(MySqlParser.USAGE);
	            break;
	        case MySqlParser.AUDIT_ADMIN:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 4748;
	            this.match(MySqlParser.AUDIT_ADMIN);
	            break;
	        case MySqlParser.BACKUP_ADMIN:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 4749;
	            this.match(MySqlParser.BACKUP_ADMIN);
	            break;
	        case MySqlParser.BINLOG_ADMIN:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 4750;
	            this.match(MySqlParser.BINLOG_ADMIN);
	            break;
	        case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 4751;
	            this.match(MySqlParser.BINLOG_ENCRYPTION_ADMIN);
	            break;
	        case MySqlParser.CLONE_ADMIN:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 4752;
	            this.match(MySqlParser.CLONE_ADMIN);
	            break;
	        case MySqlParser.CONNECTION_ADMIN:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 4753;
	            this.match(MySqlParser.CONNECTION_ADMIN);
	            break;
	        case MySqlParser.ENCRYPTION_KEY_ADMIN:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 4754;
	            this.match(MySqlParser.ENCRYPTION_KEY_ADMIN);
	            break;
	        case MySqlParser.FIREWALL_ADMIN:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 4755;
	            this.match(MySqlParser.FIREWALL_ADMIN);
	            break;
	        case MySqlParser.FIREWALL_USER:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 4756;
	            this.match(MySqlParser.FIREWALL_USER);
	            break;
	        case MySqlParser.GROUP_REPLICATION_ADMIN:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 4757;
	            this.match(MySqlParser.GROUP_REPLICATION_ADMIN);
	            break;
	        case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 4758;
	            this.match(MySqlParser.INNODB_REDO_LOG_ARCHIVE);
	            break;
	        case MySqlParser.NDB_STORED_USER:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 4759;
	            this.match(MySqlParser.NDB_STORED_USER);
	            break;
	        case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 4760;
	            this.match(MySqlParser.PERSIST_RO_VARIABLES_ADMIN);
	            break;
	        case MySqlParser.REPLICATION_APPLIER:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 4761;
	            this.match(MySqlParser.REPLICATION_APPLIER);
	            break;
	        case MySqlParser.REPLICATION_SLAVE_ADMIN:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 4762;
	            this.match(MySqlParser.REPLICATION_SLAVE_ADMIN);
	            break;
	        case MySqlParser.RESOURCE_GROUP_ADMIN:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 4763;
	            this.match(MySqlParser.RESOURCE_GROUP_ADMIN);
	            break;
	        case MySqlParser.RESOURCE_GROUP_USER:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 4764;
	            this.match(MySqlParser.RESOURCE_GROUP_USER);
	            break;
	        case MySqlParser.ROLE_ADMIN:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 4765;
	            this.match(MySqlParser.ROLE_ADMIN);
	            break;
	        case MySqlParser.SESSION_VARIABLES_ADMIN:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 4766;
	            this.match(MySqlParser.SESSION_VARIABLES_ADMIN);
	            break;
	        case MySqlParser.SET_USER_ID:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 4767;
	            this.match(MySqlParser.SET_USER_ID);
	            break;
	        case MySqlParser.SHOW_ROUTINE:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 4768;
	            this.match(MySqlParser.SHOW_ROUTINE);
	            break;
	        case MySqlParser.SYSTEM_VARIABLES_ADMIN:
	            this.enterOuterAlt(localctx, 46);
	            this.state = 4769;
	            this.match(MySqlParser.SYSTEM_VARIABLES_ADMIN);
	            break;
	        case MySqlParser.TABLE_ENCRYPTION_ADMIN:
	            this.enterOuterAlt(localctx, 47);
	            this.state = 4770;
	            this.match(MySqlParser.TABLE_ENCRYPTION_ADMIN);
	            break;
	        case MySqlParser.VERSION_TOKEN_ADMIN:
	            this.enterOuterAlt(localctx, 48);
	            this.state = 4771;
	            this.match(MySqlParser.VERSION_TOKEN_ADMIN);
	            break;
	        case MySqlParser.XA_RECOVER_ADMIN:
	            this.enterOuterAlt(localctx, 49);
	            this.state = 4772;
	            this.match(MySqlParser.XA_RECOVER_ADMIN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privilegeLevel() {
	    let localctx = new PrivilegeLevelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 416, MySqlParser.RULE_privilegeLevel);
	    try {
	        this.state = 4791;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,688,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new CurrentSchemaPriviLevelContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4775;
	            this.match(MySqlParser.STAR);
	            break;

	        case 2:
	            localctx = new GlobalPrivLevelContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4776;
	            this.match(MySqlParser.STAR);
	            this.state = 4777;
	            this.match(MySqlParser.DOT);
	            this.state = 4778;
	            this.match(MySqlParser.STAR);
	            break;

	        case 3:
	            localctx = new DefiniteSchemaPrivLevelContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4779;
	            this.uid();
	            this.state = 4780;
	            this.match(MySqlParser.DOT);
	            this.state = 4781;
	            this.match(MySqlParser.STAR);
	            break;

	        case 4:
	            localctx = new DefiniteFullTablePrivLevelContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4783;
	            this.uid();
	            this.state = 4784;
	            this.match(MySqlParser.DOT);
	            this.state = 4785;
	            this.uid();
	            break;

	        case 5:
	            localctx = new DefiniteFullTablePrivLevel2Context(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4787;
	            this.uid();
	            this.state = 4788;
	            this.dottedId();
	            break;

	        case 6:
	            localctx = new DefiniteTablePrivLevelContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4790;
	            this.uid();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	renameUserClause() {
	    let localctx = new RenameUserClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, MySqlParser.RULE_renameUserClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4793;
	        localctx.fromFirst = this.userName();
	        this.state = 4794;
	        this.match(MySqlParser.TO);
	        this.state = 4795;
	        localctx.toFirst = this.userName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	analyzeTable() {
	    let localctx = new AnalyzeTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 420, MySqlParser.RULE_analyzeTable);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4797;
	        this.match(MySqlParser.ANALYZE);
	        this.state = 4799;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.NO_WRITE_TO_BINLOG || _la===MySqlParser.LOCAL) {
	            this.state = 4798;
	            localctx.actionOption = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.NO_WRITE_TO_BINLOG || _la===MySqlParser.LOCAL)) {
	                localctx.actionOption = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 4801;
	        this.match(MySqlParser.TABLE);
	        this.state = 4802;
	        this.tables();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	checkTable() {
	    let localctx = new CheckTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 422, MySqlParser.RULE_checkTable);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4804;
	        this.match(MySqlParser.CHECK);
	        this.state = 4805;
	        this.match(MySqlParser.TABLE);
	        this.state = 4806;
	        this.tables();
	        this.state = 4810;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.FOR || _la===MySqlParser.CHANGED || _la===MySqlParser.EXTENDED || _la===MySqlParser.FAST || _la===MySqlParser.MEDIUM || _la===MySqlParser.QUICK) {
	            this.state = 4807;
	            this.checkTableOption();
	            this.state = 4812;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	checksumTable() {
	    let localctx = new ChecksumTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 424, MySqlParser.RULE_checksumTable);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4813;
	        this.match(MySqlParser.CHECKSUM);
	        this.state = 4814;
	        this.match(MySqlParser.TABLE);
	        this.state = 4815;
	        this.tables();
	        this.state = 4817;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.EXTENDED || _la===MySqlParser.QUICK) {
	            this.state = 4816;
	            localctx.actionOption = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.EXTENDED || _la===MySqlParser.QUICK)) {
	                localctx.actionOption = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optimizeTable() {
	    let localctx = new OptimizeTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 426, MySqlParser.RULE_optimizeTable);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4819;
	        this.match(MySqlParser.OPTIMIZE);
	        this.state = 4821;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.NO_WRITE_TO_BINLOG || _la===MySqlParser.LOCAL) {
	            this.state = 4820;
	            localctx.actionOption = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.NO_WRITE_TO_BINLOG || _la===MySqlParser.LOCAL)) {
	                localctx.actionOption = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 4823;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.TABLE || _la===MySqlParser.TABLES)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4824;
	        this.tables();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	repairTable() {
	    let localctx = new RepairTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 428, MySqlParser.RULE_repairTable);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4826;
	        this.match(MySqlParser.REPAIR);
	        this.state = 4828;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.NO_WRITE_TO_BINLOG || _la===MySqlParser.LOCAL) {
	            this.state = 4827;
	            localctx.actionOption = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.NO_WRITE_TO_BINLOG || _la===MySqlParser.LOCAL)) {
	                localctx.actionOption = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 4830;
	        this.match(MySqlParser.TABLE);
	        this.state = 4831;
	        this.tables();
	        this.state = 4833;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.QUICK) {
	            this.state = 4832;
	            this.match(MySqlParser.QUICK);
	        }

	        this.state = 4836;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.EXTENDED) {
	            this.state = 4835;
	            this.match(MySqlParser.EXTENDED);
	        }

	        this.state = 4839;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.USE_FRM) {
	            this.state = 4838;
	            this.match(MySqlParser.USE_FRM);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	checkTableOption() {
	    let localctx = new CheckTableOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 430, MySqlParser.RULE_checkTableOption);
	    try {
	        this.state = 4848;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.FOR:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4841;
	            this.match(MySqlParser.FOR);
	            this.state = 4842;
	            this.match(MySqlParser.UPGRADE);
	            break;
	        case MySqlParser.QUICK:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4843;
	            this.match(MySqlParser.QUICK);
	            break;
	        case MySqlParser.FAST:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4844;
	            this.match(MySqlParser.FAST);
	            break;
	        case MySqlParser.MEDIUM:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4845;
	            this.match(MySqlParser.MEDIUM);
	            break;
	        case MySqlParser.EXTENDED:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4846;
	            this.match(MySqlParser.EXTENDED);
	            break;
	        case MySqlParser.CHANGED:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4847;
	            this.match(MySqlParser.CHANGED);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createUdfunction() {
	    let localctx = new CreateUdfunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 432, MySqlParser.RULE_createUdfunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4850;
	        this.match(MySqlParser.CREATE);
	        this.state = 4852;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.AGGREGATE) {
	            this.state = 4851;
	            this.match(MySqlParser.AGGREGATE);
	        }

	        this.state = 4854;
	        this.match(MySqlParser.FUNCTION);
	        this.state = 4855;
	        this.uid();
	        this.state = 4856;
	        this.match(MySqlParser.RETURNS);
	        this.state = 4857;
	        localctx.returnType = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(((((_la - 188)) & ~0x1f) == 0 && ((1 << (_la - 188)) & ((1 << (MySqlParser.INTEGER - 188)) | (1 << (MySqlParser.REAL - 188)) | (1 << (MySqlParser.DECIMAL - 188)))) !== 0) || _la===MySqlParser.STRING)) {
	            localctx.returnType = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4858;
	        this.match(MySqlParser.SONAME);
	        this.state = 4859;
	        this.match(MySqlParser.STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	installPlugin() {
	    let localctx = new InstallPluginContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 434, MySqlParser.RULE_installPlugin);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4861;
	        this.match(MySqlParser.INSTALL);
	        this.state = 4862;
	        this.match(MySqlParser.PLUGIN);
	        this.state = 4863;
	        this.uid();
	        this.state = 4864;
	        this.match(MySqlParser.SONAME);
	        this.state = 4865;
	        this.match(MySqlParser.STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uninstallPlugin() {
	    let localctx = new UninstallPluginContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 436, MySqlParser.RULE_uninstallPlugin);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4867;
	        this.match(MySqlParser.UNINSTALL);
	        this.state = 4868;
	        this.match(MySqlParser.PLUGIN);
	        this.state = 4869;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setStatement() {
	    let localctx = new SetStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 438, MySqlParser.RULE_setStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 4922;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,705,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SetVariableContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4871;
	            this.match(MySqlParser.SET);
	            this.state = 4872;
	            this.variableClause();
	            this.state = 4873;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.VAR_ASSIGN || _la===MySqlParser.EQUAL_SYMBOL)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4874;
	            this.expression(0);
	            this.state = 4882;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 4875;
	                this.match(MySqlParser.COMMA);
	                this.state = 4876;
	                this.variableClause();
	                this.state = 4877;
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.VAR_ASSIGN || _la===MySqlParser.EQUAL_SYMBOL)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 4878;
	                this.expression(0);
	                this.state = 4884;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            localctx = new SetCharsetContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4885;
	            this.match(MySqlParser.SET);
	            this.state = 4889;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.CHARACTER:
	                this.state = 4886;
	                this.match(MySqlParser.CHARACTER);
	                this.state = 4887;
	                this.match(MySqlParser.SET);
	                break;
	            case MySqlParser.CHARSET:
	                this.state = 4888;
	                this.match(MySqlParser.CHARSET);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 4893;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.BINARY:
	            case MySqlParser.ARMSCII8:
	            case MySqlParser.ASCII:
	            case MySqlParser.BIG5:
	            case MySqlParser.CP1250:
	            case MySqlParser.CP1251:
	            case MySqlParser.CP1256:
	            case MySqlParser.CP1257:
	            case MySqlParser.CP850:
	            case MySqlParser.CP852:
	            case MySqlParser.CP866:
	            case MySqlParser.CP932:
	            case MySqlParser.DEC8:
	            case MySqlParser.EUCJPMS:
	            case MySqlParser.EUCKR:
	            case MySqlParser.GB2312:
	            case MySqlParser.GBK:
	            case MySqlParser.GEOSTD8:
	            case MySqlParser.GREEK:
	            case MySqlParser.HEBREW:
	            case MySqlParser.HP8:
	            case MySqlParser.KEYBCS2:
	            case MySqlParser.KOI8R:
	            case MySqlParser.KOI8U:
	            case MySqlParser.LATIN1:
	            case MySqlParser.LATIN2:
	            case MySqlParser.LATIN5:
	            case MySqlParser.LATIN7:
	            case MySqlParser.MACCE:
	            case MySqlParser.MACROMAN:
	            case MySqlParser.SJIS:
	            case MySqlParser.SWE7:
	            case MySqlParser.TIS620:
	            case MySqlParser.UCS2:
	            case MySqlParser.UJIS:
	            case MySqlParser.UTF16:
	            case MySqlParser.UTF16LE:
	            case MySqlParser.UTF32:
	            case MySqlParser.UTF8:
	            case MySqlParser.UTF8MB3:
	            case MySqlParser.UTF8MB4:
	            case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
	            case MySqlParser.STRING_LITERAL:
	                this.state = 4891;
	                this.charsetName();
	                break;
	            case MySqlParser.DEFAULT:
	                this.state = 4892;
	                this.match(MySqlParser.DEFAULT);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 3:
	            localctx = new SetNamesContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4895;
	            this.match(MySqlParser.SET);
	            this.state = 4896;
	            this.match(MySqlParser.NAMES);
	            this.state = 4903;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.BINARY:
	            case MySqlParser.ARMSCII8:
	            case MySqlParser.ASCII:
	            case MySqlParser.BIG5:
	            case MySqlParser.CP1250:
	            case MySqlParser.CP1251:
	            case MySqlParser.CP1256:
	            case MySqlParser.CP1257:
	            case MySqlParser.CP850:
	            case MySqlParser.CP852:
	            case MySqlParser.CP866:
	            case MySqlParser.CP932:
	            case MySqlParser.DEC8:
	            case MySqlParser.EUCJPMS:
	            case MySqlParser.EUCKR:
	            case MySqlParser.GB2312:
	            case MySqlParser.GBK:
	            case MySqlParser.GEOSTD8:
	            case MySqlParser.GREEK:
	            case MySqlParser.HEBREW:
	            case MySqlParser.HP8:
	            case MySqlParser.KEYBCS2:
	            case MySqlParser.KOI8R:
	            case MySqlParser.KOI8U:
	            case MySqlParser.LATIN1:
	            case MySqlParser.LATIN2:
	            case MySqlParser.LATIN5:
	            case MySqlParser.LATIN7:
	            case MySqlParser.MACCE:
	            case MySqlParser.MACROMAN:
	            case MySqlParser.SJIS:
	            case MySqlParser.SWE7:
	            case MySqlParser.TIS620:
	            case MySqlParser.UCS2:
	            case MySqlParser.UJIS:
	            case MySqlParser.UTF16:
	            case MySqlParser.UTF16LE:
	            case MySqlParser.UTF32:
	            case MySqlParser.UTF8:
	            case MySqlParser.UTF8MB3:
	            case MySqlParser.UTF8MB4:
	            case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
	            case MySqlParser.STRING_LITERAL:
	                this.state = 4897;
	                this.charsetName();
	                this.state = 4900;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===MySqlParser.COLLATE) {
	                    this.state = 4898;
	                    this.match(MySqlParser.COLLATE);
	                    this.state = 4899;
	                    this.collationName();
	                }

	                break;
	            case MySqlParser.DEFAULT:
	                this.state = 4902;
	                this.match(MySqlParser.DEFAULT);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 4:
	            localctx = new SetPasswordContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4905;
	            this.setPasswordStatement();
	            break;

	        case 5:
	            localctx = new SetTransactionContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4906;
	            this.setTransactionStatement();
	            break;

	        case 6:
	            localctx = new SetAutocommitContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4907;
	            this.setAutocommitStatement();
	            break;

	        case 7:
	            localctx = new SetNewValueInsideTriggerContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4908;
	            this.match(MySqlParser.SET);
	            this.state = 4909;
	            this.fullId();
	            this.state = 4910;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.VAR_ASSIGN || _la===MySqlParser.EQUAL_SYMBOL)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4911;
	            this.expression(0);
	            this.state = 4919;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 4912;
	                this.match(MySqlParser.COMMA);
	                this.state = 4913;
	                this.fullId();
	                this.state = 4914;
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.VAR_ASSIGN || _la===MySqlParser.EQUAL_SYMBOL)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 4915;
	                this.expression(0);
	                this.state = 4921;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showStatement() {
	    let localctx = new ShowStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 440, MySqlParser.RULE_showStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 5075;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,727,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ShowMasterLogsContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4924;
	            this.match(MySqlParser.SHOW);
	            this.state = 4925;
	            localctx.logFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.BINARY || _la===MySqlParser.MASTER)) {
	                localctx.logFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4926;
	            this.match(MySqlParser.LOGS);
	            break;

	        case 2:
	            localctx = new ShowLogEventsContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4927;
	            this.match(MySqlParser.SHOW);
	            this.state = 4928;
	            localctx.logFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.BINLOG || _la===MySqlParser.RELAYLOG)) {
	                localctx.logFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4929;
	            this.match(MySqlParser.EVENTS);
	            this.state = 4932;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.IN) {
	                this.state = 4930;
	                this.match(MySqlParser.IN);
	                this.state = 4931;
	                localctx.filename = this.match(MySqlParser.STRING_LITERAL);
	            }

	            this.state = 4936;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.FROM) {
	                this.state = 4934;
	                this.match(MySqlParser.FROM);
	                this.state = 4935;
	                localctx.fromPosition = this.decimalLiteral();
	            }

	            this.state = 4945;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.LIMIT) {
	                this.state = 4938;
	                this.match(MySqlParser.LIMIT);
	                this.state = 4942;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,708,this._ctx);
	                if(la_===1) {
	                    this.state = 4939;
	                    localctx.offset = this.decimalLiteral();
	                    this.state = 4940;
	                    this.match(MySqlParser.COMMA);

	                }
	                this.state = 4944;
	                localctx.rowCount = this.decimalLiteral();
	            }

	            break;

	        case 3:
	            localctx = new ShowObjectFilterContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4947;
	            this.match(MySqlParser.SHOW);
	            this.state = 4948;
	            this.showCommonEntity();
	            this.state = 4950;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.LIKE || _la===MySqlParser.WHERE) {
	                this.state = 4949;
	                this.showFilter();
	            }

	            break;

	        case 4:
	            localctx = new ShowColumnsContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4952;
	            this.match(MySqlParser.SHOW);
	            this.state = 4954;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.FULL) {
	                this.state = 4953;
	                this.match(MySqlParser.FULL);
	            }

	            this.state = 4956;
	            localctx.columnsFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.COLUMNS || _la===MySqlParser.FIELDS)) {
	                localctx.columnsFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4957;
	            localctx.tableFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.FROM || _la===MySqlParser.IN)) {
	                localctx.tableFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4958;
	            this.tableName();
	            this.state = 4961;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.FROM || _la===MySqlParser.IN) {
	                this.state = 4959;
	                localctx.schemaFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.FROM || _la===MySqlParser.IN)) {
	                    localctx.schemaFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 4960;
	                this.uid();
	            }

	            this.state = 4964;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.LIKE || _la===MySqlParser.WHERE) {
	                this.state = 4963;
	                this.showFilter();
	            }

	            break;

	        case 5:
	            localctx = new ShowCreateDbContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4966;
	            this.match(MySqlParser.SHOW);
	            this.state = 4967;
	            this.match(MySqlParser.CREATE);
	            this.state = 4968;
	            localctx.schemaFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.DATABASE || _la===MySqlParser.SCHEMA)) {
	                localctx.schemaFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4970;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.IF) {
	                this.state = 4969;
	                this.ifNotExists();
	            }

	            this.state = 4972;
	            this.uid();
	            break;

	        case 6:
	            localctx = new ShowCreateFullIdObjectContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4973;
	            this.match(MySqlParser.SHOW);
	            this.state = 4974;
	            this.match(MySqlParser.CREATE);
	            this.state = 4975;
	            localctx.namedEntity = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.PROCEDURE || _la===MySqlParser.TABLE || _la===MySqlParser.TRIGGER || _la===MySqlParser.EVENT || _la===MySqlParser.FUNCTION || _la===MySqlParser.VIEW)) {
	                localctx.namedEntity = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4976;
	            this.fullId();
	            break;

	        case 7:
	            localctx = new ShowCreateUserContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4977;
	            this.match(MySqlParser.SHOW);
	            this.state = 4978;
	            this.match(MySqlParser.CREATE);
	            this.state = 4979;
	            this.match(MySqlParser.USER);
	            this.state = 4980;
	            this.userName();
	            break;

	        case 8:
	            localctx = new ShowEngineContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4981;
	            this.match(MySqlParser.SHOW);
	            this.state = 4982;
	            this.match(MySqlParser.ENGINE);
	            this.state = 4983;
	            this.engineName();
	            this.state = 4984;
	            localctx.engineOption = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.MUTEX || _la===MySqlParser.STATUS)) {
	                localctx.engineOption = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 9:
	            localctx = new ShowGlobalInfoContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 4986;
	            this.match(MySqlParser.SHOW);
	            this.state = 4987;
	            this.showGlobalInfoClause();
	            break;

	        case 10:
	            localctx = new ShowErrorsContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 4988;
	            this.match(MySqlParser.SHOW);
	            this.state = 4989;
	            localctx.errorFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.ERRORS || _la===MySqlParser.WARNINGS)) {
	                localctx.errorFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	            this.state = 4990;
	            this.match(MySqlParser.LIMIT);
	            this.state = 4994;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,715,this._ctx);
	            if(la_===1) {
	                this.state = 4991;
	                localctx.offset = this.decimalLiteral();
	                this.state = 4992;
	                this.match(MySqlParser.COMMA);

	            }
	            this.state = 4996;
	            localctx.rowCount = this.decimalLiteral();
	            break;

	        case 11:
	            localctx = new ShowCountErrorsContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 4997;
	            this.match(MySqlParser.SHOW);
	            this.state = 4998;
	            this.match(MySqlParser.COUNT);
	            this.state = 4999;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 5000;
	            this.match(MySqlParser.STAR);
	            this.state = 5001;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 5002;
	            localctx.errorFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.ERRORS || _la===MySqlParser.WARNINGS)) {
	                localctx.errorFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 12:
	            localctx = new ShowSchemaFilterContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 5003;
	            this.match(MySqlParser.SHOW);
	            this.state = 5004;
	            this.showSchemaEntity();
	            this.state = 5007;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.FROM || _la===MySqlParser.IN) {
	                this.state = 5005;
	                localctx.schemaFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.FROM || _la===MySqlParser.IN)) {
	                    localctx.schemaFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 5006;
	                this.uid();
	            }

	            this.state = 5010;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.LIKE || _la===MySqlParser.WHERE) {
	                this.state = 5009;
	                this.showFilter();
	            }

	            break;

	        case 13:
	            localctx = new ShowRoutineContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 5012;
	            this.match(MySqlParser.SHOW);
	            this.state = 5013;
	            localctx.routine = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.PROCEDURE || _la===MySqlParser.FUNCTION)) {
	                localctx.routine = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5014;
	            this.match(MySqlParser.CODE);
	            this.state = 5015;
	            this.fullId();
	            break;

	        case 14:
	            localctx = new ShowGrantsContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 5016;
	            this.match(MySqlParser.SHOW);
	            this.state = 5017;
	            this.match(MySqlParser.GRANTS);
	            this.state = 5020;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.FOR) {
	                this.state = 5018;
	                this.match(MySqlParser.FOR);
	                this.state = 5019;
	                this.userName();
	            }

	            break;

	        case 15:
	            localctx = new ShowIndexesContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 5022;
	            this.match(MySqlParser.SHOW);
	            this.state = 5023;
	            localctx.indexFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.INDEX || _la===MySqlParser.KEYS || _la===MySqlParser.INDEXES)) {
	                localctx.indexFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5024;
	            localctx.tableFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.FROM || _la===MySqlParser.IN)) {
	                localctx.tableFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5025;
	            this.tableName();
	            this.state = 5028;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.FROM || _la===MySqlParser.IN) {
	                this.state = 5026;
	                localctx.schemaFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.FROM || _la===MySqlParser.IN)) {
	                    localctx.schemaFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 5027;
	                this.uid();
	            }

	            this.state = 5032;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.WHERE) {
	                this.state = 5030;
	                this.match(MySqlParser.WHERE);
	                this.state = 5031;
	                this.expression(0);
	            }

	            break;

	        case 16:
	            localctx = new ShowOpenTablesContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 5034;
	            this.match(MySqlParser.SHOW);
	            this.state = 5035;
	            this.match(MySqlParser.OPEN);
	            this.state = 5036;
	            this.match(MySqlParser.TABLES);
	            this.state = 5039;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.FROM || _la===MySqlParser.IN) {
	                this.state = 5037;
	                localctx.schemaFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.FROM || _la===MySqlParser.IN)) {
	                    localctx.schemaFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 5038;
	                this.uid();
	            }

	            this.state = 5042;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.LIKE || _la===MySqlParser.WHERE) {
	                this.state = 5041;
	                this.showFilter();
	            }

	            break;

	        case 17:
	            localctx = new ShowProfileContext(this, localctx);
	            this.enterOuterAlt(localctx, 17);
	            this.state = 5044;
	            this.match(MySqlParser.SHOW);
	            this.state = 5045;
	            this.match(MySqlParser.PROFILE);
	            this.state = 5046;
	            this.showProfileType();
	            this.state = 5051;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 5047;
	                this.match(MySqlParser.COMMA);
	                this.state = 5048;
	                this.showProfileType();
	                this.state = 5053;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 5057;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.FOR) {
	                this.state = 5054;
	                this.match(MySqlParser.FOR);
	                this.state = 5055;
	                this.match(MySqlParser.QUERY);
	                this.state = 5056;
	                localctx.queryCount = this.decimalLiteral();
	            }

	            this.state = 5059;
	            this.match(MySqlParser.LIMIT);
	            this.state = 5063;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,725,this._ctx);
	            if(la_===1) {
	                this.state = 5060;
	                localctx.offset = this.decimalLiteral();
	                this.state = 5061;
	                this.match(MySqlParser.COMMA);

	            }
	            this.state = 5065;
	            localctx.rowCount = this.decimalLiteral();
	            break;

	        case 18:
	            localctx = new ShowSlaveStatusContext(this, localctx);
	            this.enterOuterAlt(localctx, 18);
	            this.state = 5067;
	            this.match(MySqlParser.SHOW);
	            this.state = 5068;
	            this.match(MySqlParser.SLAVE);
	            this.state = 5069;
	            this.match(MySqlParser.STATUS);
	            this.state = 5073;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.FOR) {
	                this.state = 5070;
	                this.match(MySqlParser.FOR);
	                this.state = 5071;
	                this.match(MySqlParser.CHANNEL);
	                this.state = 5072;
	                this.match(MySqlParser.STRING_LITERAL);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableClause() {
	    let localctx = new VariableClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 442, MySqlParser.RULE_variableClause);
	    var _la = 0; // Token type
	    try {
	        this.state = 5087;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.LOCAL_ID:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5077;
	            this.match(MySqlParser.LOCAL_ID);
	            break;
	        case MySqlParser.GLOBAL_ID:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5078;
	            this.match(MySqlParser.GLOBAL_ID);
	            break;
	        case MySqlParser.CURRENT:
	        case MySqlParser.DATABASE:
	        case MySqlParser.DIAGNOSTICS:
	        case MySqlParser.LEFT:
	        case MySqlParser.NUMBER:
	        case MySqlParser.RIGHT:
	        case MySqlParser.STACKED:
	        case MySqlParser.DATE:
	        case MySqlParser.TIME:
	        case MySqlParser.TIMESTAMP:
	        case MySqlParser.DATETIME:
	        case MySqlParser.YEAR:
	        case MySqlParser.TEXT:
	        case MySqlParser.ENUM:
	        case MySqlParser.SERIAL:
	        case MySqlParser.JSON_VALID:
	        case MySqlParser.JSON_SCHEMA_VALID:
	        case MySqlParser.AVG:
	        case MySqlParser.BIT_AND:
	        case MySqlParser.BIT_OR:
	        case MySqlParser.BIT_XOR:
	        case MySqlParser.COUNT:
	        case MySqlParser.GROUP_CONCAT:
	        case MySqlParser.MAX:
	        case MySqlParser.MIN:
	        case MySqlParser.STD:
	        case MySqlParser.STDDEV:
	        case MySqlParser.STDDEV_POP:
	        case MySqlParser.STDDEV_SAMP:
	        case MySqlParser.SUM:
	        case MySqlParser.VAR_POP:
	        case MySqlParser.VAR_SAMP:
	        case MySqlParser.VARIANCE:
	        case MySqlParser.POSITION:
	        case MySqlParser.ACCOUNT:
	        case MySqlParser.ACTION:
	        case MySqlParser.AFTER:
	        case MySqlParser.AGGREGATE:
	        case MySqlParser.ALGORITHM:
	        case MySqlParser.ANY:
	        case MySqlParser.AT:
	        case MySqlParser.AUTHORS:
	        case MySqlParser.AUTOCOMMIT:
	        case MySqlParser.AUTOEXTEND_SIZE:
	        case MySqlParser.AUTO_INCREMENT:
	        case MySqlParser.AVG_ROW_LENGTH:
	        case MySqlParser.BEGIN:
	        case MySqlParser.BINLOG:
	        case MySqlParser.BIT:
	        case MySqlParser.BLOCK:
	        case MySqlParser.BOOL:
	        case MySqlParser.BOOLEAN:
	        case MySqlParser.BTREE:
	        case MySqlParser.CACHE:
	        case MySqlParser.CASCADED:
	        case MySqlParser.CHAIN:
	        case MySqlParser.CHANGED:
	        case MySqlParser.CHANNEL:
	        case MySqlParser.CHECKSUM:
	        case MySqlParser.PAGE_CHECKSUM:
	        case MySqlParser.CIPHER:
	        case MySqlParser.CLASS_ORIGIN:
	        case MySqlParser.CLIENT:
	        case MySqlParser.CLOSE:
	        case MySqlParser.COALESCE:
	        case MySqlParser.CODE:
	        case MySqlParser.COLUMNS:
	        case MySqlParser.COLUMN_FORMAT:
	        case MySqlParser.COLUMN_NAME:
	        case MySqlParser.COMMENT:
	        case MySqlParser.COMMIT:
	        case MySqlParser.COMPACT:
	        case MySqlParser.COMPLETION:
	        case MySqlParser.COMPRESSED:
	        case MySqlParser.COMPRESSION:
	        case MySqlParser.CONCURRENT:
	        case MySqlParser.CONNECTION:
	        case MySqlParser.CONSISTENT:
	        case MySqlParser.CONSTRAINT_CATALOG:
	        case MySqlParser.CONSTRAINT_SCHEMA:
	        case MySqlParser.CONSTRAINT_NAME:
	        case MySqlParser.CONTAINS:
	        case MySqlParser.CONTEXT:
	        case MySqlParser.CONTRIBUTORS:
	        case MySqlParser.COPY:
	        case MySqlParser.CPU:
	        case MySqlParser.CURSOR_NAME:
	        case MySqlParser.DATA:
	        case MySqlParser.DATAFILE:
	        case MySqlParser.DEALLOCATE:
	        case MySqlParser.DEFAULT_AUTH:
	        case MySqlParser.DEFINER:
	        case MySqlParser.DELAY_KEY_WRITE:
	        case MySqlParser.DES_KEY_FILE:
	        case MySqlParser.DIRECTORY:
	        case MySqlParser.DISABLE:
	        case MySqlParser.DISCARD:
	        case MySqlParser.DISK:
	        case MySqlParser.DO:
	        case MySqlParser.DUMPFILE:
	        case MySqlParser.DUPLICATE:
	        case MySqlParser.DYNAMIC:
	        case MySqlParser.ENABLE:
	        case MySqlParser.ENCRYPTION:
	        case MySqlParser.END:
	        case MySqlParser.ENDS:
	        case MySqlParser.ENGINE:
	        case MySqlParser.ENGINES:
	        case MySqlParser.ERROR:
	        case MySqlParser.ERRORS:
	        case MySqlParser.ESCAPE:
	        case MySqlParser.EVEN:
	        case MySqlParser.EVENT:
	        case MySqlParser.EVENTS:
	        case MySqlParser.EVERY:
	        case MySqlParser.EXCHANGE:
	        case MySqlParser.EXCLUSIVE:
	        case MySqlParser.EXPIRE:
	        case MySqlParser.EXPORT:
	        case MySqlParser.EXTENDED:
	        case MySqlParser.EXTENT_SIZE:
	        case MySqlParser.FAST:
	        case MySqlParser.FAULTS:
	        case MySqlParser.FIELDS:
	        case MySqlParser.FILE_BLOCK_SIZE:
	        case MySqlParser.FILTER:
	        case MySqlParser.FIRST:
	        case MySqlParser.FIXED:
	        case MySqlParser.FLUSH:
	        case MySqlParser.FOLLOWS:
	        case MySqlParser.FOUND:
	        case MySqlParser.FULL:
	        case MySqlParser.FUNCTION:
	        case MySqlParser.GENERAL:
	        case MySqlParser.GLOBAL:
	        case MySqlParser.GRANTS:
	        case MySqlParser.GROUP_REPLICATION:
	        case MySqlParser.HANDLER:
	        case MySqlParser.HASH:
	        case MySqlParser.HELP:
	        case MySqlParser.HOST:
	        case MySqlParser.HOSTS:
	        case MySqlParser.IDENTIFIED:
	        case MySqlParser.IGNORE_SERVER_IDS:
	        case MySqlParser.IMPORT:
	        case MySqlParser.INDEXES:
	        case MySqlParser.INITIAL_SIZE:
	        case MySqlParser.INPLACE:
	        case MySqlParser.INSERT_METHOD:
	        case MySqlParser.INSTALL:
	        case MySqlParser.INSTANCE:
	        case MySqlParser.INVISIBLE:
	        case MySqlParser.INVOKER:
	        case MySqlParser.IO:
	        case MySqlParser.IO_THREAD:
	        case MySqlParser.IPC:
	        case MySqlParser.ISOLATION:
	        case MySqlParser.ISSUER:
	        case MySqlParser.JSON:
	        case MySqlParser.KEY_BLOCK_SIZE:
	        case MySqlParser.LANGUAGE:
	        case MySqlParser.LAST:
	        case MySqlParser.LEAVES:
	        case MySqlParser.LESS:
	        case MySqlParser.LEVEL:
	        case MySqlParser.LIST:
	        case MySqlParser.LOCAL:
	        case MySqlParser.LOGFILE:
	        case MySqlParser.LOGS:
	        case MySqlParser.MASTER:
	        case MySqlParser.MASTER_AUTO_POSITION:
	        case MySqlParser.MASTER_CONNECT_RETRY:
	        case MySqlParser.MASTER_DELAY:
	        case MySqlParser.MASTER_HEARTBEAT_PERIOD:
	        case MySqlParser.MASTER_HOST:
	        case MySqlParser.MASTER_LOG_FILE:
	        case MySqlParser.MASTER_LOG_POS:
	        case MySqlParser.MASTER_PASSWORD:
	        case MySqlParser.MASTER_PORT:
	        case MySqlParser.MASTER_RETRY_COUNT:
	        case MySqlParser.MASTER_SSL:
	        case MySqlParser.MASTER_SSL_CA:
	        case MySqlParser.MASTER_SSL_CAPATH:
	        case MySqlParser.MASTER_SSL_CERT:
	        case MySqlParser.MASTER_SSL_CIPHER:
	        case MySqlParser.MASTER_SSL_CRL:
	        case MySqlParser.MASTER_SSL_CRLPATH:
	        case MySqlParser.MASTER_SSL_KEY:
	        case MySqlParser.MASTER_TLS_VERSION:
	        case MySqlParser.MASTER_USER:
	        case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
	        case MySqlParser.MAX_QUERIES_PER_HOUR:
	        case MySqlParser.MAX_ROWS:
	        case MySqlParser.MAX_SIZE:
	        case MySqlParser.MAX_UPDATES_PER_HOUR:
	        case MySqlParser.MAX_USER_CONNECTIONS:
	        case MySqlParser.MEDIUM:
	        case MySqlParser.MEMBER:
	        case MySqlParser.MERGE:
	        case MySqlParser.MESSAGE_TEXT:
	        case MySqlParser.MID:
	        case MySqlParser.MIGRATE:
	        case MySqlParser.MIN_ROWS:
	        case MySqlParser.MODE:
	        case MySqlParser.MODIFY:
	        case MySqlParser.MUTEX:
	        case MySqlParser.MYSQL:
	        case MySqlParser.MYSQL_ERRNO:
	        case MySqlParser.NAME:
	        case MySqlParser.NAMES:
	        case MySqlParser.NCHAR:
	        case MySqlParser.NEVER:
	        case MySqlParser.NEXT:
	        case MySqlParser.NO:
	        case MySqlParser.NODEGROUP:
	        case MySqlParser.NONE:
	        case MySqlParser.OFFLINE:
	        case MySqlParser.OFFSET:
	        case MySqlParser.OF:
	        case MySqlParser.OJ:
	        case MySqlParser.OLD_PASSWORD:
	        case MySqlParser.ONE:
	        case MySqlParser.ONLINE:
	        case MySqlParser.ONLY:
	        case MySqlParser.OPEN:
	        case MySqlParser.OPTIMIZER_COSTS:
	        case MySqlParser.OPTIONS:
	        case MySqlParser.OWNER:
	        case MySqlParser.PACK_KEYS:
	        case MySqlParser.PAGE:
	        case MySqlParser.PARSER:
	        case MySqlParser.PARTIAL:
	        case MySqlParser.PARTITIONING:
	        case MySqlParser.PARTITIONS:
	        case MySqlParser.PASSWORD:
	        case MySqlParser.PHASE:
	        case MySqlParser.PLUGIN:
	        case MySqlParser.PLUGIN_DIR:
	        case MySqlParser.PLUGINS:
	        case MySqlParser.PORT:
	        case MySqlParser.PRECEDES:
	        case MySqlParser.PREPARE:
	        case MySqlParser.PRESERVE:
	        case MySqlParser.PREV:
	        case MySqlParser.PROCESSLIST:
	        case MySqlParser.PROFILE:
	        case MySqlParser.PROFILES:
	        case MySqlParser.PROXY:
	        case MySqlParser.QUERY:
	        case MySqlParser.QUICK:
	        case MySqlParser.REBUILD:
	        case MySqlParser.RECOVER:
	        case MySqlParser.REDO_BUFFER_SIZE:
	        case MySqlParser.REDUNDANT:
	        case MySqlParser.RELAY:
	        case MySqlParser.RELAY_LOG_FILE:
	        case MySqlParser.RELAY_LOG_POS:
	        case MySqlParser.RELAYLOG:
	        case MySqlParser.REMOVE:
	        case MySqlParser.REORGANIZE:
	        case MySqlParser.REPAIR:
	        case MySqlParser.REPLICATE_DO_DB:
	        case MySqlParser.REPLICATE_DO_TABLE:
	        case MySqlParser.REPLICATE_IGNORE_DB:
	        case MySqlParser.REPLICATE_IGNORE_TABLE:
	        case MySqlParser.REPLICATE_REWRITE_DB:
	        case MySqlParser.REPLICATE_WILD_DO_TABLE:
	        case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
	        case MySqlParser.REPLICATION:
	        case MySqlParser.RESET:
	        case MySqlParser.RESUME:
	        case MySqlParser.RETURNED_SQLSTATE:
	        case MySqlParser.RETURNS:
	        case MySqlParser.ROLE:
	        case MySqlParser.ROLLBACK:
	        case MySqlParser.ROLLUP:
	        case MySqlParser.ROTATE:
	        case MySqlParser.ROW:
	        case MySqlParser.ROWS:
	        case MySqlParser.ROW_FORMAT:
	        case MySqlParser.SAVEPOINT:
	        case MySqlParser.SCHEDULE:
	        case MySqlParser.SECURITY:
	        case MySqlParser.SERVER:
	        case MySqlParser.SESSION:
	        case MySqlParser.SHARE:
	        case MySqlParser.SHARED:
	        case MySqlParser.SIGNED:
	        case MySqlParser.SIMPLE:
	        case MySqlParser.SLAVE:
	        case MySqlParser.SLOW:
	        case MySqlParser.SNAPSHOT:
	        case MySqlParser.SOCKET:
	        case MySqlParser.SOME:
	        case MySqlParser.SONAME:
	        case MySqlParser.SOUNDS:
	        case MySqlParser.SOURCE:
	        case MySqlParser.SQL_AFTER_GTIDS:
	        case MySqlParser.SQL_AFTER_MTS_GAPS:
	        case MySqlParser.SQL_BEFORE_GTIDS:
	        case MySqlParser.SQL_BUFFER_RESULT:
	        case MySqlParser.SQL_CACHE:
	        case MySqlParser.SQL_NO_CACHE:
	        case MySqlParser.SQL_THREAD:
	        case MySqlParser.START:
	        case MySqlParser.STARTS:
	        case MySqlParser.STATS_AUTO_RECALC:
	        case MySqlParser.STATS_PERSISTENT:
	        case MySqlParser.STATS_SAMPLE_PAGES:
	        case MySqlParser.STATUS:
	        case MySqlParser.STOP:
	        case MySqlParser.STORAGE:
	        case MySqlParser.STRING:
	        case MySqlParser.SUBCLASS_ORIGIN:
	        case MySqlParser.SUBJECT:
	        case MySqlParser.SUBPARTITION:
	        case MySqlParser.SUBPARTITIONS:
	        case MySqlParser.SUSPEND:
	        case MySqlParser.SWAPS:
	        case MySqlParser.SWITCHES:
	        case MySqlParser.TABLE_NAME:
	        case MySqlParser.TABLESPACE:
	        case MySqlParser.TEMPORARY:
	        case MySqlParser.TEMPTABLE:
	        case MySqlParser.THAN:
	        case MySqlParser.TRADITIONAL:
	        case MySqlParser.TRANSACTION:
	        case MySqlParser.TRANSACTIONAL:
	        case MySqlParser.TRIGGERS:
	        case MySqlParser.TRUNCATE:
	        case MySqlParser.UNDEFINED:
	        case MySqlParser.UNDOFILE:
	        case MySqlParser.UNDO_BUFFER_SIZE:
	        case MySqlParser.UNINSTALL:
	        case MySqlParser.UNKNOWN:
	        case MySqlParser.UNTIL:
	        case MySqlParser.UPGRADE:
	        case MySqlParser.USER:
	        case MySqlParser.USE_FRM:
	        case MySqlParser.USER_RESOURCES:
	        case MySqlParser.VALIDATION:
	        case MySqlParser.VALUE:
	        case MySqlParser.VARIABLES:
	        case MySqlParser.VIEW:
	        case MySqlParser.VISIBLE:
	        case MySqlParser.WAIT:
	        case MySqlParser.WARNINGS:
	        case MySqlParser.WITHOUT:
	        case MySqlParser.WORK:
	        case MySqlParser.WRAPPER:
	        case MySqlParser.X509:
	        case MySqlParser.XA:
	        case MySqlParser.XML:
	        case MySqlParser.INTERNAL:
	        case MySqlParser.QUARTER:
	        case MySqlParser.MONTH:
	        case MySqlParser.DAY:
	        case MySqlParser.HOUR:
	        case MySqlParser.MINUTE:
	        case MySqlParser.WEEK:
	        case MySqlParser.SECOND:
	        case MySqlParser.MICROSECOND:
	        case MySqlParser.TABLES:
	        case MySqlParser.ROUTINE:
	        case MySqlParser.EXECUTE:
	        case MySqlParser.FILE:
	        case MySqlParser.PROCESS:
	        case MySqlParser.RELOAD:
	        case MySqlParser.SHUTDOWN:
	        case MySqlParser.SUPER:
	        case MySqlParser.PRIVILEGES:
	        case MySqlParser.AUDIT_ADMIN:
	        case MySqlParser.BACKUP_ADMIN:
	        case MySqlParser.BINLOG_ADMIN:
	        case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
	        case MySqlParser.CLONE_ADMIN:
	        case MySqlParser.CONNECTION_ADMIN:
	        case MySqlParser.ENCRYPTION_KEY_ADMIN:
	        case MySqlParser.FIREWALL_ADMIN:
	        case MySqlParser.FIREWALL_USER:
	        case MySqlParser.GROUP_REPLICATION_ADMIN:
	        case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
	        case MySqlParser.NDB_STORED_USER:
	        case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
	        case MySqlParser.REPLICATION_APPLIER:
	        case MySqlParser.REPLICATION_SLAVE_ADMIN:
	        case MySqlParser.RESOURCE_GROUP_ADMIN:
	        case MySqlParser.RESOURCE_GROUP_USER:
	        case MySqlParser.ROLE_ADMIN:
	        case MySqlParser.SESSION_VARIABLES_ADMIN:
	        case MySqlParser.SET_USER_ID:
	        case MySqlParser.SHOW_ROUTINE:
	        case MySqlParser.SYSTEM_VARIABLES_ADMIN:
	        case MySqlParser.TABLE_ENCRYPTION_ADMIN:
	        case MySqlParser.VERSION_TOKEN_ADMIN:
	        case MySqlParser.XA_RECOVER_ADMIN:
	        case MySqlParser.ARMSCII8:
	        case MySqlParser.ASCII:
	        case MySqlParser.BIG5:
	        case MySqlParser.CP1250:
	        case MySqlParser.CP1251:
	        case MySqlParser.CP1256:
	        case MySqlParser.CP1257:
	        case MySqlParser.CP850:
	        case MySqlParser.CP852:
	        case MySqlParser.CP866:
	        case MySqlParser.CP932:
	        case MySqlParser.DEC8:
	        case MySqlParser.EUCJPMS:
	        case MySqlParser.EUCKR:
	        case MySqlParser.GB2312:
	        case MySqlParser.GBK:
	        case MySqlParser.GEOSTD8:
	        case MySqlParser.GREEK:
	        case MySqlParser.HEBREW:
	        case MySqlParser.HP8:
	        case MySqlParser.KEYBCS2:
	        case MySqlParser.KOI8R:
	        case MySqlParser.KOI8U:
	        case MySqlParser.LATIN1:
	        case MySqlParser.LATIN2:
	        case MySqlParser.LATIN5:
	        case MySqlParser.LATIN7:
	        case MySqlParser.MACCE:
	        case MySqlParser.MACROMAN:
	        case MySqlParser.SJIS:
	        case MySqlParser.SWE7:
	        case MySqlParser.TIS620:
	        case MySqlParser.UCS2:
	        case MySqlParser.UJIS:
	        case MySqlParser.UTF16:
	        case MySqlParser.UTF16LE:
	        case MySqlParser.UTF32:
	        case MySqlParser.UTF8:
	        case MySqlParser.UTF8MB3:
	        case MySqlParser.UTF8MB4:
	        case MySqlParser.ARCHIVE:
	        case MySqlParser.BLACKHOLE:
	        case MySqlParser.CSV:
	        case MySqlParser.FEDERATED:
	        case MySqlParser.INNODB:
	        case MySqlParser.MEMORY:
	        case MySqlParser.MRG_MYISAM:
	        case MySqlParser.MYISAM:
	        case MySqlParser.NDB:
	        case MySqlParser.NDBCLUSTER:
	        case MySqlParser.PERFORMANCE_SCHEMA:
	        case MySqlParser.TOKUDB:
	        case MySqlParser.REPEATABLE:
	        case MySqlParser.COMMITTED:
	        case MySqlParser.UNCOMMITTED:
	        case MySqlParser.SERIALIZABLE:
	        case MySqlParser.GEOMETRYCOLLECTION:
	        case MySqlParser.LINESTRING:
	        case MySqlParser.MULTILINESTRING:
	        case MySqlParser.MULTIPOINT:
	        case MySqlParser.MULTIPOLYGON:
	        case MySqlParser.POINT:
	        case MySqlParser.POLYGON:
	        case MySqlParser.ABS:
	        case MySqlParser.ACOS:
	        case MySqlParser.ADDDATE:
	        case MySqlParser.ADDTIME:
	        case MySqlParser.AES_DECRYPT:
	        case MySqlParser.AES_ENCRYPT:
	        case MySqlParser.AREA:
	        case MySqlParser.ASBINARY:
	        case MySqlParser.ASIN:
	        case MySqlParser.ASTEXT:
	        case MySqlParser.ASWKB:
	        case MySqlParser.ASWKT:
	        case MySqlParser.ASYMMETRIC_DECRYPT:
	        case MySqlParser.ASYMMETRIC_DERIVE:
	        case MySqlParser.ASYMMETRIC_ENCRYPT:
	        case MySqlParser.ASYMMETRIC_SIGN:
	        case MySqlParser.ASYMMETRIC_VERIFY:
	        case MySqlParser.ATAN:
	        case MySqlParser.ATAN2:
	        case MySqlParser.BENCHMARK:
	        case MySqlParser.BIN:
	        case MySqlParser.BIT_COUNT:
	        case MySqlParser.BIT_LENGTH:
	        case MySqlParser.BUFFER:
	        case MySqlParser.CATALOG_NAME:
	        case MySqlParser.CEIL:
	        case MySqlParser.CEILING:
	        case MySqlParser.CENTROID:
	        case MySqlParser.CHARACTER_LENGTH:
	        case MySqlParser.CHARSET:
	        case MySqlParser.CHAR_LENGTH:
	        case MySqlParser.COERCIBILITY:
	        case MySqlParser.COLLATION:
	        case MySqlParser.COMPRESS:
	        case MySqlParser.CONCAT:
	        case MySqlParser.CONCAT_WS:
	        case MySqlParser.CONNECTION_ID:
	        case MySqlParser.CONV:
	        case MySqlParser.CONVERT_TZ:
	        case MySqlParser.COS:
	        case MySqlParser.COT:
	        case MySqlParser.CRC32:
	        case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
	        case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
	        case MySqlParser.CREATE_DH_PARAMETERS:
	        case MySqlParser.CREATE_DIGEST:
	        case MySqlParser.CROSSES:
	        case MySqlParser.DATEDIFF:
	        case MySqlParser.DATE_FORMAT:
	        case MySqlParser.DAYNAME:
	        case MySqlParser.DAYOFMONTH:
	        case MySqlParser.DAYOFWEEK:
	        case MySqlParser.DAYOFYEAR:
	        case MySqlParser.DECODE:
	        case MySqlParser.DEGREES:
	        case MySqlParser.DES_DECRYPT:
	        case MySqlParser.DES_ENCRYPT:
	        case MySqlParser.DIMENSION:
	        case MySqlParser.DISJOINT:
	        case MySqlParser.ELT:
	        case MySqlParser.ENCODE:
	        case MySqlParser.ENCRYPT:
	        case MySqlParser.ENDPOINT:
	        case MySqlParser.ENVELOPE:
	        case MySqlParser.EQUALS:
	        case MySqlParser.EXP:
	        case MySqlParser.EXPORT_SET:
	        case MySqlParser.EXTERIORRING:
	        case MySqlParser.EXTRACTVALUE:
	        case MySqlParser.FIELD:
	        case MySqlParser.FIND_IN_SET:
	        case MySqlParser.FLOOR:
	        case MySqlParser.FORMAT:
	        case MySqlParser.FOUND_ROWS:
	        case MySqlParser.FROM_BASE64:
	        case MySqlParser.FROM_DAYS:
	        case MySqlParser.FROM_UNIXTIME:
	        case MySqlParser.GEOMCOLLFROMTEXT:
	        case MySqlParser.GEOMCOLLFROMWKB:
	        case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
	        case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
	        case MySqlParser.GEOMETRYFROMTEXT:
	        case MySqlParser.GEOMETRYFROMWKB:
	        case MySqlParser.GEOMETRYN:
	        case MySqlParser.GEOMETRYTYPE:
	        case MySqlParser.GEOMFROMTEXT:
	        case MySqlParser.GEOMFROMWKB:
	        case MySqlParser.GET_FORMAT:
	        case MySqlParser.GET_LOCK:
	        case MySqlParser.GLENGTH:
	        case MySqlParser.GREATEST:
	        case MySqlParser.GTID_SUBSET:
	        case MySqlParser.GTID_SUBTRACT:
	        case MySqlParser.HEX:
	        case MySqlParser.IFNULL:
	        case MySqlParser.INET6_ATON:
	        case MySqlParser.INET6_NTOA:
	        case MySqlParser.INET_ATON:
	        case MySqlParser.INET_NTOA:
	        case MySqlParser.INSTR:
	        case MySqlParser.INTERIORRINGN:
	        case MySqlParser.INTERSECTS:
	        case MySqlParser.ISCLOSED:
	        case MySqlParser.ISEMPTY:
	        case MySqlParser.ISNULL:
	        case MySqlParser.ISSIMPLE:
	        case MySqlParser.IS_FREE_LOCK:
	        case MySqlParser.IS_IPV4:
	        case MySqlParser.IS_IPV4_COMPAT:
	        case MySqlParser.IS_IPV4_MAPPED:
	        case MySqlParser.IS_IPV6:
	        case MySqlParser.IS_USED_LOCK:
	        case MySqlParser.LAST_INSERT_ID:
	        case MySqlParser.LCASE:
	        case MySqlParser.LEAST:
	        case MySqlParser.LENGTH:
	        case MySqlParser.LINEFROMTEXT:
	        case MySqlParser.LINEFROMWKB:
	        case MySqlParser.LINESTRINGFROMTEXT:
	        case MySqlParser.LINESTRINGFROMWKB:
	        case MySqlParser.LN:
	        case MySqlParser.LOAD_FILE:
	        case MySqlParser.LOCATE:
	        case MySqlParser.LOG:
	        case MySqlParser.LOG10:
	        case MySqlParser.LOG2:
	        case MySqlParser.LOWER:
	        case MySqlParser.LPAD:
	        case MySqlParser.LTRIM:
	        case MySqlParser.MAKEDATE:
	        case MySqlParser.MAKETIME:
	        case MySqlParser.MAKE_SET:
	        case MySqlParser.MASTER_POS_WAIT:
	        case MySqlParser.MBRCONTAINS:
	        case MySqlParser.MBRDISJOINT:
	        case MySqlParser.MBREQUAL:
	        case MySqlParser.MBRINTERSECTS:
	        case MySqlParser.MBROVERLAPS:
	        case MySqlParser.MBRTOUCHES:
	        case MySqlParser.MBRWITHIN:
	        case MySqlParser.MD5:
	        case MySqlParser.MLINEFROMTEXT:
	        case MySqlParser.MLINEFROMWKB:
	        case MySqlParser.MONTHNAME:
	        case MySqlParser.MPOINTFROMTEXT:
	        case MySqlParser.MPOINTFROMWKB:
	        case MySqlParser.MPOLYFROMTEXT:
	        case MySqlParser.MPOLYFROMWKB:
	        case MySqlParser.MULTILINESTRINGFROMTEXT:
	        case MySqlParser.MULTILINESTRINGFROMWKB:
	        case MySqlParser.MULTIPOINTFROMTEXT:
	        case MySqlParser.MULTIPOINTFROMWKB:
	        case MySqlParser.MULTIPOLYGONFROMTEXT:
	        case MySqlParser.MULTIPOLYGONFROMWKB:
	        case MySqlParser.NAME_CONST:
	        case MySqlParser.NULLIF:
	        case MySqlParser.NUMGEOMETRIES:
	        case MySqlParser.NUMINTERIORRINGS:
	        case MySqlParser.NUMPOINTS:
	        case MySqlParser.OCT:
	        case MySqlParser.OCTET_LENGTH:
	        case MySqlParser.ORD:
	        case MySqlParser.OVERLAPS:
	        case MySqlParser.PERIOD_ADD:
	        case MySqlParser.PERIOD_DIFF:
	        case MySqlParser.PI:
	        case MySqlParser.POINTFROMTEXT:
	        case MySqlParser.POINTFROMWKB:
	        case MySqlParser.POINTN:
	        case MySqlParser.POLYFROMTEXT:
	        case MySqlParser.POLYFROMWKB:
	        case MySqlParser.POLYGONFROMTEXT:
	        case MySqlParser.POLYGONFROMWKB:
	        case MySqlParser.POW:
	        case MySqlParser.POWER:
	        case MySqlParser.QUOTE:
	        case MySqlParser.RADIANS:
	        case MySqlParser.RAND:
	        case MySqlParser.RANDOM_BYTES:
	        case MySqlParser.RELEASE_LOCK:
	        case MySqlParser.REVERSE:
	        case MySqlParser.ROUND:
	        case MySqlParser.ROW_COUNT:
	        case MySqlParser.RPAD:
	        case MySqlParser.RTRIM:
	        case MySqlParser.SEC_TO_TIME:
	        case MySqlParser.SESSION_USER:
	        case MySqlParser.SHA:
	        case MySqlParser.SHA1:
	        case MySqlParser.SHA2:
	        case MySqlParser.SCHEMA_NAME:
	        case MySqlParser.SIGN:
	        case MySqlParser.SIN:
	        case MySqlParser.SLEEP:
	        case MySqlParser.SOUNDEX:
	        case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
	        case MySqlParser.SQRT:
	        case MySqlParser.SRID:
	        case MySqlParser.STARTPOINT:
	        case MySqlParser.STRCMP:
	        case MySqlParser.STR_TO_DATE:
	        case MySqlParser.ST_AREA:
	        case MySqlParser.ST_ASBINARY:
	        case MySqlParser.ST_ASTEXT:
	        case MySqlParser.ST_ASWKB:
	        case MySqlParser.ST_ASWKT:
	        case MySqlParser.ST_BUFFER:
	        case MySqlParser.ST_CENTROID:
	        case MySqlParser.ST_CONTAINS:
	        case MySqlParser.ST_CROSSES:
	        case MySqlParser.ST_DIFFERENCE:
	        case MySqlParser.ST_DIMENSION:
	        case MySqlParser.ST_DISJOINT:
	        case MySqlParser.ST_DISTANCE:
	        case MySqlParser.ST_ENDPOINT:
	        case MySqlParser.ST_ENVELOPE:
	        case MySqlParser.ST_EQUALS:
	        case MySqlParser.ST_EXTERIORRING:
	        case MySqlParser.ST_GEOMCOLLFROMTEXT:
	        case MySqlParser.ST_GEOMCOLLFROMTXT:
	        case MySqlParser.ST_GEOMCOLLFROMWKB:
	        case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
	        case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
	        case MySqlParser.ST_GEOMETRYFROMTEXT:
	        case MySqlParser.ST_GEOMETRYFROMWKB:
	        case MySqlParser.ST_GEOMETRYN:
	        case MySqlParser.ST_GEOMETRYTYPE:
	        case MySqlParser.ST_GEOMFROMTEXT:
	        case MySqlParser.ST_GEOMFROMWKB:
	        case MySqlParser.ST_INTERIORRINGN:
	        case MySqlParser.ST_INTERSECTION:
	        case MySqlParser.ST_INTERSECTS:
	        case MySqlParser.ST_ISCLOSED:
	        case MySqlParser.ST_ISEMPTY:
	        case MySqlParser.ST_ISSIMPLE:
	        case MySqlParser.ST_LINEFROMTEXT:
	        case MySqlParser.ST_LINEFROMWKB:
	        case MySqlParser.ST_LINESTRINGFROMTEXT:
	        case MySqlParser.ST_LINESTRINGFROMWKB:
	        case MySqlParser.ST_NUMGEOMETRIES:
	        case MySqlParser.ST_NUMINTERIORRING:
	        case MySqlParser.ST_NUMINTERIORRINGS:
	        case MySqlParser.ST_NUMPOINTS:
	        case MySqlParser.ST_OVERLAPS:
	        case MySqlParser.ST_POINTFROMTEXT:
	        case MySqlParser.ST_POINTFROMWKB:
	        case MySqlParser.ST_POINTN:
	        case MySqlParser.ST_POLYFROMTEXT:
	        case MySqlParser.ST_POLYFROMWKB:
	        case MySqlParser.ST_POLYGONFROMTEXT:
	        case MySqlParser.ST_POLYGONFROMWKB:
	        case MySqlParser.ST_SRID:
	        case MySqlParser.ST_STARTPOINT:
	        case MySqlParser.ST_SYMDIFFERENCE:
	        case MySqlParser.ST_TOUCHES:
	        case MySqlParser.ST_UNION:
	        case MySqlParser.ST_WITHIN:
	        case MySqlParser.ST_X:
	        case MySqlParser.ST_Y:
	        case MySqlParser.SUBDATE:
	        case MySqlParser.SUBSTRING_INDEX:
	        case MySqlParser.SUBTIME:
	        case MySqlParser.SYSTEM_USER:
	        case MySqlParser.TAN:
	        case MySqlParser.TIMEDIFF:
	        case MySqlParser.TIMESTAMPADD:
	        case MySqlParser.TIMESTAMPDIFF:
	        case MySqlParser.TIME_FORMAT:
	        case MySqlParser.TIME_TO_SEC:
	        case MySqlParser.TOUCHES:
	        case MySqlParser.TO_BASE64:
	        case MySqlParser.TO_DAYS:
	        case MySqlParser.TO_SECONDS:
	        case MySqlParser.UCASE:
	        case MySqlParser.UNCOMPRESS:
	        case MySqlParser.UNCOMPRESSED_LENGTH:
	        case MySqlParser.UNHEX:
	        case MySqlParser.UNIX_TIMESTAMP:
	        case MySqlParser.UPDATEXML:
	        case MySqlParser.UPPER:
	        case MySqlParser.UUID:
	        case MySqlParser.UUID_SHORT:
	        case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
	        case MySqlParser.VERSION:
	        case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
	        case MySqlParser.WEEKDAY:
	        case MySqlParser.WEEKOFYEAR:
	        case MySqlParser.WEIGHT_STRING:
	        case MySqlParser.WITHIN:
	        case MySqlParser.YEARWEEK:
	        case MySqlParser.Y_FUNCTION:
	        case MySqlParser.X_FUNCTION:
	        case MySqlParser.AT_SIGN:
	        case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
	        case MySqlParser.STRING_LITERAL:
	        case MySqlParser.ID:
	        case MySqlParser.REVERSE_QUOTE_ID:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5084;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,729,this._ctx);
	            if(la_===1) {
	                this.state = 5081;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===MySqlParser.AT_SIGN) {
	                    this.state = 5079;
	                    this.match(MySqlParser.AT_SIGN);
	                    this.state = 5080;
	                    this.match(MySqlParser.AT_SIGN);
	                }

	                this.state = 5083;
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.GLOBAL || _la===MySqlParser.LOCAL || _la===MySqlParser.SESSION)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 5086;
	            this.uid();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showCommonEntity() {
	    let localctx = new ShowCommonEntityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 444, MySqlParser.RULE_showCommonEntity);
	    var _la = 0; // Token type
	    try {
	        this.state = 5102;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.CHARACTER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5089;
	            this.match(MySqlParser.CHARACTER);
	            this.state = 5090;
	            this.match(MySqlParser.SET);
	            break;
	        case MySqlParser.COLLATION:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5091;
	            this.match(MySqlParser.COLLATION);
	            break;
	        case MySqlParser.DATABASES:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5092;
	            this.match(MySqlParser.DATABASES);
	            break;
	        case MySqlParser.SCHEMAS:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5093;
	            this.match(MySqlParser.SCHEMAS);
	            break;
	        case MySqlParser.FUNCTION:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5094;
	            this.match(MySqlParser.FUNCTION);
	            this.state = 5095;
	            this.match(MySqlParser.STATUS);
	            break;
	        case MySqlParser.PROCEDURE:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5096;
	            this.match(MySqlParser.PROCEDURE);
	            this.state = 5097;
	            this.match(MySqlParser.STATUS);
	            break;
	        case MySqlParser.GLOBAL:
	        case MySqlParser.SESSION:
	        case MySqlParser.STATUS:
	        case MySqlParser.VARIABLES:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 5099;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.GLOBAL || _la===MySqlParser.SESSION) {
	                this.state = 5098;
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.GLOBAL || _la===MySqlParser.SESSION)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 5101;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.STATUS || _la===MySqlParser.VARIABLES)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showFilter() {
	    let localctx = new ShowFilterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 446, MySqlParser.RULE_showFilter);
	    try {
	        this.state = 5108;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.LIKE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5104;
	            this.match(MySqlParser.LIKE);
	            this.state = 5105;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.WHERE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5106;
	            this.match(MySqlParser.WHERE);
	            this.state = 5107;
	            this.expression(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showGlobalInfoClause() {
	    let localctx = new ShowGlobalInfoClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 448, MySqlParser.RULE_showGlobalInfoClause);
	    var _la = 0; // Token type
	    try {
	        this.state = 5127;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.ENGINES:
	        case MySqlParser.STORAGE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5111;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.STORAGE) {
	                this.state = 5110;
	                this.match(MySqlParser.STORAGE);
	            }

	            this.state = 5113;
	            this.match(MySqlParser.ENGINES);
	            break;
	        case MySqlParser.MASTER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5114;
	            this.match(MySqlParser.MASTER);
	            this.state = 5115;
	            this.match(MySqlParser.STATUS);
	            break;
	        case MySqlParser.PLUGINS:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5116;
	            this.match(MySqlParser.PLUGINS);
	            break;
	        case MySqlParser.PRIVILEGES:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5117;
	            this.match(MySqlParser.PRIVILEGES);
	            break;
	        case MySqlParser.FULL:
	        case MySqlParser.PROCESSLIST:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5119;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.FULL) {
	                this.state = 5118;
	                this.match(MySqlParser.FULL);
	            }

	            this.state = 5121;
	            this.match(MySqlParser.PROCESSLIST);
	            break;
	        case MySqlParser.PROFILES:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5122;
	            this.match(MySqlParser.PROFILES);
	            break;
	        case MySqlParser.SLAVE:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 5123;
	            this.match(MySqlParser.SLAVE);
	            this.state = 5124;
	            this.match(MySqlParser.HOSTS);
	            break;
	        case MySqlParser.AUTHORS:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 5125;
	            this.match(MySqlParser.AUTHORS);
	            break;
	        case MySqlParser.CONTRIBUTORS:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 5126;
	            this.match(MySqlParser.CONTRIBUTORS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showSchemaEntity() {
	    let localctx = new ShowSchemaEntityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 450, MySqlParser.RULE_showSchemaEntity);
	    var _la = 0; // Token type
	    try {
	        this.state = 5137;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.EVENTS:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5129;
	            this.match(MySqlParser.EVENTS);
	            break;
	        case MySqlParser.TABLE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5130;
	            this.match(MySqlParser.TABLE);
	            this.state = 5131;
	            this.match(MySqlParser.STATUS);
	            break;
	        case MySqlParser.FULL:
	        case MySqlParser.TABLES:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5133;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.FULL) {
	                this.state = 5132;
	                this.match(MySqlParser.FULL);
	            }

	            this.state = 5135;
	            this.match(MySqlParser.TABLES);
	            break;
	        case MySqlParser.TRIGGERS:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5136;
	            this.match(MySqlParser.TRIGGERS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showProfileType() {
	    let localctx = new ShowProfileTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 452, MySqlParser.RULE_showProfileType);
	    try {
	        this.state = 5151;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.ALL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5139;
	            this.match(MySqlParser.ALL);
	            break;
	        case MySqlParser.BLOCK:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5140;
	            this.match(MySqlParser.BLOCK);
	            this.state = 5141;
	            this.match(MySqlParser.IO);
	            break;
	        case MySqlParser.CONTEXT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5142;
	            this.match(MySqlParser.CONTEXT);
	            this.state = 5143;
	            this.match(MySqlParser.SWITCHES);
	            break;
	        case MySqlParser.CPU:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5144;
	            this.match(MySqlParser.CPU);
	            break;
	        case MySqlParser.IPC:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5145;
	            this.match(MySqlParser.IPC);
	            break;
	        case MySqlParser.MEMORY:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5146;
	            this.match(MySqlParser.MEMORY);
	            break;
	        case MySqlParser.PAGE:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 5147;
	            this.match(MySqlParser.PAGE);
	            this.state = 5148;
	            this.match(MySqlParser.FAULTS);
	            break;
	        case MySqlParser.SOURCE:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 5149;
	            this.match(MySqlParser.SOURCE);
	            break;
	        case MySqlParser.SWAPS:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 5150;
	            this.match(MySqlParser.SWAPS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binlogStatement() {
	    let localctx = new BinlogStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 454, MySqlParser.RULE_binlogStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5153;
	        this.match(MySqlParser.BINLOG);
	        this.state = 5154;
	        this.match(MySqlParser.STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cacheIndexStatement() {
	    let localctx = new CacheIndexStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 456, MySqlParser.RULE_cacheIndexStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5156;
	        this.match(MySqlParser.CACHE);
	        this.state = 5157;
	        this.match(MySqlParser.INDEX);
	        this.state = 5158;
	        this.tableIndexes();
	        this.state = 5163;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 5159;
	            this.match(MySqlParser.COMMA);
	            this.state = 5160;
	            this.tableIndexes();
	            this.state = 5165;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 5173;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.PARTITION) {
	            this.state = 5166;
	            this.match(MySqlParser.PARTITION);
	            this.state = 5167;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 5170;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.CURRENT:
	            case MySqlParser.DATABASE:
	            case MySqlParser.DIAGNOSTICS:
	            case MySqlParser.LEFT:
	            case MySqlParser.NUMBER:
	            case MySqlParser.RIGHT:
	            case MySqlParser.STACKED:
	            case MySqlParser.DATE:
	            case MySqlParser.TIME:
	            case MySqlParser.TIMESTAMP:
	            case MySqlParser.DATETIME:
	            case MySqlParser.YEAR:
	            case MySqlParser.TEXT:
	            case MySqlParser.ENUM:
	            case MySqlParser.SERIAL:
	            case MySqlParser.JSON_VALID:
	            case MySqlParser.JSON_SCHEMA_VALID:
	            case MySqlParser.AVG:
	            case MySqlParser.BIT_AND:
	            case MySqlParser.BIT_OR:
	            case MySqlParser.BIT_XOR:
	            case MySqlParser.COUNT:
	            case MySqlParser.GROUP_CONCAT:
	            case MySqlParser.MAX:
	            case MySqlParser.MIN:
	            case MySqlParser.STD:
	            case MySqlParser.STDDEV:
	            case MySqlParser.STDDEV_POP:
	            case MySqlParser.STDDEV_SAMP:
	            case MySqlParser.SUM:
	            case MySqlParser.VAR_POP:
	            case MySqlParser.VAR_SAMP:
	            case MySqlParser.VARIANCE:
	            case MySqlParser.POSITION:
	            case MySqlParser.ACCOUNT:
	            case MySqlParser.ACTION:
	            case MySqlParser.AFTER:
	            case MySqlParser.AGGREGATE:
	            case MySqlParser.ALGORITHM:
	            case MySqlParser.ANY:
	            case MySqlParser.AT:
	            case MySqlParser.AUTHORS:
	            case MySqlParser.AUTOCOMMIT:
	            case MySqlParser.AUTOEXTEND_SIZE:
	            case MySqlParser.AUTO_INCREMENT:
	            case MySqlParser.AVG_ROW_LENGTH:
	            case MySqlParser.BEGIN:
	            case MySqlParser.BINLOG:
	            case MySqlParser.BIT:
	            case MySqlParser.BLOCK:
	            case MySqlParser.BOOL:
	            case MySqlParser.BOOLEAN:
	            case MySqlParser.BTREE:
	            case MySqlParser.CACHE:
	            case MySqlParser.CASCADED:
	            case MySqlParser.CHAIN:
	            case MySqlParser.CHANGED:
	            case MySqlParser.CHANNEL:
	            case MySqlParser.CHECKSUM:
	            case MySqlParser.PAGE_CHECKSUM:
	            case MySqlParser.CIPHER:
	            case MySqlParser.CLASS_ORIGIN:
	            case MySqlParser.CLIENT:
	            case MySqlParser.CLOSE:
	            case MySqlParser.COALESCE:
	            case MySqlParser.CODE:
	            case MySqlParser.COLUMNS:
	            case MySqlParser.COLUMN_FORMAT:
	            case MySqlParser.COLUMN_NAME:
	            case MySqlParser.COMMENT:
	            case MySqlParser.COMMIT:
	            case MySqlParser.COMPACT:
	            case MySqlParser.COMPLETION:
	            case MySqlParser.COMPRESSED:
	            case MySqlParser.COMPRESSION:
	            case MySqlParser.CONCURRENT:
	            case MySqlParser.CONNECTION:
	            case MySqlParser.CONSISTENT:
	            case MySqlParser.CONSTRAINT_CATALOG:
	            case MySqlParser.CONSTRAINT_SCHEMA:
	            case MySqlParser.CONSTRAINT_NAME:
	            case MySqlParser.CONTAINS:
	            case MySqlParser.CONTEXT:
	            case MySqlParser.CONTRIBUTORS:
	            case MySqlParser.COPY:
	            case MySqlParser.CPU:
	            case MySqlParser.CURSOR_NAME:
	            case MySqlParser.DATA:
	            case MySqlParser.DATAFILE:
	            case MySqlParser.DEALLOCATE:
	            case MySqlParser.DEFAULT_AUTH:
	            case MySqlParser.DEFINER:
	            case MySqlParser.DELAY_KEY_WRITE:
	            case MySqlParser.DES_KEY_FILE:
	            case MySqlParser.DIRECTORY:
	            case MySqlParser.DISABLE:
	            case MySqlParser.DISCARD:
	            case MySqlParser.DISK:
	            case MySqlParser.DO:
	            case MySqlParser.DUMPFILE:
	            case MySqlParser.DUPLICATE:
	            case MySqlParser.DYNAMIC:
	            case MySqlParser.ENABLE:
	            case MySqlParser.ENCRYPTION:
	            case MySqlParser.END:
	            case MySqlParser.ENDS:
	            case MySqlParser.ENGINE:
	            case MySqlParser.ENGINES:
	            case MySqlParser.ERROR:
	            case MySqlParser.ERRORS:
	            case MySqlParser.ESCAPE:
	            case MySqlParser.EVEN:
	            case MySqlParser.EVENT:
	            case MySqlParser.EVENTS:
	            case MySqlParser.EVERY:
	            case MySqlParser.EXCHANGE:
	            case MySqlParser.EXCLUSIVE:
	            case MySqlParser.EXPIRE:
	            case MySqlParser.EXPORT:
	            case MySqlParser.EXTENDED:
	            case MySqlParser.EXTENT_SIZE:
	            case MySqlParser.FAST:
	            case MySqlParser.FAULTS:
	            case MySqlParser.FIELDS:
	            case MySqlParser.FILE_BLOCK_SIZE:
	            case MySqlParser.FILTER:
	            case MySqlParser.FIRST:
	            case MySqlParser.FIXED:
	            case MySqlParser.FLUSH:
	            case MySqlParser.FOLLOWS:
	            case MySqlParser.FOUND:
	            case MySqlParser.FULL:
	            case MySqlParser.FUNCTION:
	            case MySqlParser.GENERAL:
	            case MySqlParser.GLOBAL:
	            case MySqlParser.GRANTS:
	            case MySqlParser.GROUP_REPLICATION:
	            case MySqlParser.HANDLER:
	            case MySqlParser.HASH:
	            case MySqlParser.HELP:
	            case MySqlParser.HOST:
	            case MySqlParser.HOSTS:
	            case MySqlParser.IDENTIFIED:
	            case MySqlParser.IGNORE_SERVER_IDS:
	            case MySqlParser.IMPORT:
	            case MySqlParser.INDEXES:
	            case MySqlParser.INITIAL_SIZE:
	            case MySqlParser.INPLACE:
	            case MySqlParser.INSERT_METHOD:
	            case MySqlParser.INSTALL:
	            case MySqlParser.INSTANCE:
	            case MySqlParser.INVISIBLE:
	            case MySqlParser.INVOKER:
	            case MySqlParser.IO:
	            case MySqlParser.IO_THREAD:
	            case MySqlParser.IPC:
	            case MySqlParser.ISOLATION:
	            case MySqlParser.ISSUER:
	            case MySqlParser.JSON:
	            case MySqlParser.KEY_BLOCK_SIZE:
	            case MySqlParser.LANGUAGE:
	            case MySqlParser.LAST:
	            case MySqlParser.LEAVES:
	            case MySqlParser.LESS:
	            case MySqlParser.LEVEL:
	            case MySqlParser.LIST:
	            case MySqlParser.LOCAL:
	            case MySqlParser.LOGFILE:
	            case MySqlParser.LOGS:
	            case MySqlParser.MASTER:
	            case MySqlParser.MASTER_AUTO_POSITION:
	            case MySqlParser.MASTER_CONNECT_RETRY:
	            case MySqlParser.MASTER_DELAY:
	            case MySqlParser.MASTER_HEARTBEAT_PERIOD:
	            case MySqlParser.MASTER_HOST:
	            case MySqlParser.MASTER_LOG_FILE:
	            case MySqlParser.MASTER_LOG_POS:
	            case MySqlParser.MASTER_PASSWORD:
	            case MySqlParser.MASTER_PORT:
	            case MySqlParser.MASTER_RETRY_COUNT:
	            case MySqlParser.MASTER_SSL:
	            case MySqlParser.MASTER_SSL_CA:
	            case MySqlParser.MASTER_SSL_CAPATH:
	            case MySqlParser.MASTER_SSL_CERT:
	            case MySqlParser.MASTER_SSL_CIPHER:
	            case MySqlParser.MASTER_SSL_CRL:
	            case MySqlParser.MASTER_SSL_CRLPATH:
	            case MySqlParser.MASTER_SSL_KEY:
	            case MySqlParser.MASTER_TLS_VERSION:
	            case MySqlParser.MASTER_USER:
	            case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
	            case MySqlParser.MAX_QUERIES_PER_HOUR:
	            case MySqlParser.MAX_ROWS:
	            case MySqlParser.MAX_SIZE:
	            case MySqlParser.MAX_UPDATES_PER_HOUR:
	            case MySqlParser.MAX_USER_CONNECTIONS:
	            case MySqlParser.MEDIUM:
	            case MySqlParser.MEMBER:
	            case MySqlParser.MERGE:
	            case MySqlParser.MESSAGE_TEXT:
	            case MySqlParser.MID:
	            case MySqlParser.MIGRATE:
	            case MySqlParser.MIN_ROWS:
	            case MySqlParser.MODE:
	            case MySqlParser.MODIFY:
	            case MySqlParser.MUTEX:
	            case MySqlParser.MYSQL:
	            case MySqlParser.MYSQL_ERRNO:
	            case MySqlParser.NAME:
	            case MySqlParser.NAMES:
	            case MySqlParser.NCHAR:
	            case MySqlParser.NEVER:
	            case MySqlParser.NEXT:
	            case MySqlParser.NO:
	            case MySqlParser.NODEGROUP:
	            case MySqlParser.NONE:
	            case MySqlParser.OFFLINE:
	            case MySqlParser.OFFSET:
	            case MySqlParser.OF:
	            case MySqlParser.OJ:
	            case MySqlParser.OLD_PASSWORD:
	            case MySqlParser.ONE:
	            case MySqlParser.ONLINE:
	            case MySqlParser.ONLY:
	            case MySqlParser.OPEN:
	            case MySqlParser.OPTIMIZER_COSTS:
	            case MySqlParser.OPTIONS:
	            case MySqlParser.OWNER:
	            case MySqlParser.PACK_KEYS:
	            case MySqlParser.PAGE:
	            case MySqlParser.PARSER:
	            case MySqlParser.PARTIAL:
	            case MySqlParser.PARTITIONING:
	            case MySqlParser.PARTITIONS:
	            case MySqlParser.PASSWORD:
	            case MySqlParser.PHASE:
	            case MySqlParser.PLUGIN:
	            case MySqlParser.PLUGIN_DIR:
	            case MySqlParser.PLUGINS:
	            case MySqlParser.PORT:
	            case MySqlParser.PRECEDES:
	            case MySqlParser.PREPARE:
	            case MySqlParser.PRESERVE:
	            case MySqlParser.PREV:
	            case MySqlParser.PROCESSLIST:
	            case MySqlParser.PROFILE:
	            case MySqlParser.PROFILES:
	            case MySqlParser.PROXY:
	            case MySqlParser.QUERY:
	            case MySqlParser.QUICK:
	            case MySqlParser.REBUILD:
	            case MySqlParser.RECOVER:
	            case MySqlParser.REDO_BUFFER_SIZE:
	            case MySqlParser.REDUNDANT:
	            case MySqlParser.RELAY:
	            case MySqlParser.RELAY_LOG_FILE:
	            case MySqlParser.RELAY_LOG_POS:
	            case MySqlParser.RELAYLOG:
	            case MySqlParser.REMOVE:
	            case MySqlParser.REORGANIZE:
	            case MySqlParser.REPAIR:
	            case MySqlParser.REPLICATE_DO_DB:
	            case MySqlParser.REPLICATE_DO_TABLE:
	            case MySqlParser.REPLICATE_IGNORE_DB:
	            case MySqlParser.REPLICATE_IGNORE_TABLE:
	            case MySqlParser.REPLICATE_REWRITE_DB:
	            case MySqlParser.REPLICATE_WILD_DO_TABLE:
	            case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
	            case MySqlParser.REPLICATION:
	            case MySqlParser.RESET:
	            case MySqlParser.RESUME:
	            case MySqlParser.RETURNED_SQLSTATE:
	            case MySqlParser.RETURNS:
	            case MySqlParser.ROLE:
	            case MySqlParser.ROLLBACK:
	            case MySqlParser.ROLLUP:
	            case MySqlParser.ROTATE:
	            case MySqlParser.ROW:
	            case MySqlParser.ROWS:
	            case MySqlParser.ROW_FORMAT:
	            case MySqlParser.SAVEPOINT:
	            case MySqlParser.SCHEDULE:
	            case MySqlParser.SECURITY:
	            case MySqlParser.SERVER:
	            case MySqlParser.SESSION:
	            case MySqlParser.SHARE:
	            case MySqlParser.SHARED:
	            case MySqlParser.SIGNED:
	            case MySqlParser.SIMPLE:
	            case MySqlParser.SLAVE:
	            case MySqlParser.SLOW:
	            case MySqlParser.SNAPSHOT:
	            case MySqlParser.SOCKET:
	            case MySqlParser.SOME:
	            case MySqlParser.SONAME:
	            case MySqlParser.SOUNDS:
	            case MySqlParser.SOURCE:
	            case MySqlParser.SQL_AFTER_GTIDS:
	            case MySqlParser.SQL_AFTER_MTS_GAPS:
	            case MySqlParser.SQL_BEFORE_GTIDS:
	            case MySqlParser.SQL_BUFFER_RESULT:
	            case MySqlParser.SQL_CACHE:
	            case MySqlParser.SQL_NO_CACHE:
	            case MySqlParser.SQL_THREAD:
	            case MySqlParser.START:
	            case MySqlParser.STARTS:
	            case MySqlParser.STATS_AUTO_RECALC:
	            case MySqlParser.STATS_PERSISTENT:
	            case MySqlParser.STATS_SAMPLE_PAGES:
	            case MySqlParser.STATUS:
	            case MySqlParser.STOP:
	            case MySqlParser.STORAGE:
	            case MySqlParser.STRING:
	            case MySqlParser.SUBCLASS_ORIGIN:
	            case MySqlParser.SUBJECT:
	            case MySqlParser.SUBPARTITION:
	            case MySqlParser.SUBPARTITIONS:
	            case MySqlParser.SUSPEND:
	            case MySqlParser.SWAPS:
	            case MySqlParser.SWITCHES:
	            case MySqlParser.TABLE_NAME:
	            case MySqlParser.TABLESPACE:
	            case MySqlParser.TEMPORARY:
	            case MySqlParser.TEMPTABLE:
	            case MySqlParser.THAN:
	            case MySqlParser.TRADITIONAL:
	            case MySqlParser.TRANSACTION:
	            case MySqlParser.TRANSACTIONAL:
	            case MySqlParser.TRIGGERS:
	            case MySqlParser.TRUNCATE:
	            case MySqlParser.UNDEFINED:
	            case MySqlParser.UNDOFILE:
	            case MySqlParser.UNDO_BUFFER_SIZE:
	            case MySqlParser.UNINSTALL:
	            case MySqlParser.UNKNOWN:
	            case MySqlParser.UNTIL:
	            case MySqlParser.UPGRADE:
	            case MySqlParser.USER:
	            case MySqlParser.USE_FRM:
	            case MySqlParser.USER_RESOURCES:
	            case MySqlParser.VALIDATION:
	            case MySqlParser.VALUE:
	            case MySqlParser.VARIABLES:
	            case MySqlParser.VIEW:
	            case MySqlParser.VISIBLE:
	            case MySqlParser.WAIT:
	            case MySqlParser.WARNINGS:
	            case MySqlParser.WITHOUT:
	            case MySqlParser.WORK:
	            case MySqlParser.WRAPPER:
	            case MySqlParser.X509:
	            case MySqlParser.XA:
	            case MySqlParser.XML:
	            case MySqlParser.INTERNAL:
	            case MySqlParser.QUARTER:
	            case MySqlParser.MONTH:
	            case MySqlParser.DAY:
	            case MySqlParser.HOUR:
	            case MySqlParser.MINUTE:
	            case MySqlParser.WEEK:
	            case MySqlParser.SECOND:
	            case MySqlParser.MICROSECOND:
	            case MySqlParser.TABLES:
	            case MySqlParser.ROUTINE:
	            case MySqlParser.EXECUTE:
	            case MySqlParser.FILE:
	            case MySqlParser.PROCESS:
	            case MySqlParser.RELOAD:
	            case MySqlParser.SHUTDOWN:
	            case MySqlParser.SUPER:
	            case MySqlParser.PRIVILEGES:
	            case MySqlParser.AUDIT_ADMIN:
	            case MySqlParser.BACKUP_ADMIN:
	            case MySqlParser.BINLOG_ADMIN:
	            case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
	            case MySqlParser.CLONE_ADMIN:
	            case MySqlParser.CONNECTION_ADMIN:
	            case MySqlParser.ENCRYPTION_KEY_ADMIN:
	            case MySqlParser.FIREWALL_ADMIN:
	            case MySqlParser.FIREWALL_USER:
	            case MySqlParser.GROUP_REPLICATION_ADMIN:
	            case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
	            case MySqlParser.NDB_STORED_USER:
	            case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
	            case MySqlParser.REPLICATION_APPLIER:
	            case MySqlParser.REPLICATION_SLAVE_ADMIN:
	            case MySqlParser.RESOURCE_GROUP_ADMIN:
	            case MySqlParser.RESOURCE_GROUP_USER:
	            case MySqlParser.ROLE_ADMIN:
	            case MySqlParser.SESSION_VARIABLES_ADMIN:
	            case MySqlParser.SET_USER_ID:
	            case MySqlParser.SHOW_ROUTINE:
	            case MySqlParser.SYSTEM_VARIABLES_ADMIN:
	            case MySqlParser.TABLE_ENCRYPTION_ADMIN:
	            case MySqlParser.VERSION_TOKEN_ADMIN:
	            case MySqlParser.XA_RECOVER_ADMIN:
	            case MySqlParser.ARMSCII8:
	            case MySqlParser.ASCII:
	            case MySqlParser.BIG5:
	            case MySqlParser.CP1250:
	            case MySqlParser.CP1251:
	            case MySqlParser.CP1256:
	            case MySqlParser.CP1257:
	            case MySqlParser.CP850:
	            case MySqlParser.CP852:
	            case MySqlParser.CP866:
	            case MySqlParser.CP932:
	            case MySqlParser.DEC8:
	            case MySqlParser.EUCJPMS:
	            case MySqlParser.EUCKR:
	            case MySqlParser.GB2312:
	            case MySqlParser.GBK:
	            case MySqlParser.GEOSTD8:
	            case MySqlParser.GREEK:
	            case MySqlParser.HEBREW:
	            case MySqlParser.HP8:
	            case MySqlParser.KEYBCS2:
	            case MySqlParser.KOI8R:
	            case MySqlParser.KOI8U:
	            case MySqlParser.LATIN1:
	            case MySqlParser.LATIN2:
	            case MySqlParser.LATIN5:
	            case MySqlParser.LATIN7:
	            case MySqlParser.MACCE:
	            case MySqlParser.MACROMAN:
	            case MySqlParser.SJIS:
	            case MySqlParser.SWE7:
	            case MySqlParser.TIS620:
	            case MySqlParser.UCS2:
	            case MySqlParser.UJIS:
	            case MySqlParser.UTF16:
	            case MySqlParser.UTF16LE:
	            case MySqlParser.UTF32:
	            case MySqlParser.UTF8:
	            case MySqlParser.UTF8MB3:
	            case MySqlParser.UTF8MB4:
	            case MySqlParser.ARCHIVE:
	            case MySqlParser.BLACKHOLE:
	            case MySqlParser.CSV:
	            case MySqlParser.FEDERATED:
	            case MySqlParser.INNODB:
	            case MySqlParser.MEMORY:
	            case MySqlParser.MRG_MYISAM:
	            case MySqlParser.MYISAM:
	            case MySqlParser.NDB:
	            case MySqlParser.NDBCLUSTER:
	            case MySqlParser.PERFORMANCE_SCHEMA:
	            case MySqlParser.TOKUDB:
	            case MySqlParser.REPEATABLE:
	            case MySqlParser.COMMITTED:
	            case MySqlParser.UNCOMMITTED:
	            case MySqlParser.SERIALIZABLE:
	            case MySqlParser.GEOMETRYCOLLECTION:
	            case MySqlParser.LINESTRING:
	            case MySqlParser.MULTILINESTRING:
	            case MySqlParser.MULTIPOINT:
	            case MySqlParser.MULTIPOLYGON:
	            case MySqlParser.POINT:
	            case MySqlParser.POLYGON:
	            case MySqlParser.ABS:
	            case MySqlParser.ACOS:
	            case MySqlParser.ADDDATE:
	            case MySqlParser.ADDTIME:
	            case MySqlParser.AES_DECRYPT:
	            case MySqlParser.AES_ENCRYPT:
	            case MySqlParser.AREA:
	            case MySqlParser.ASBINARY:
	            case MySqlParser.ASIN:
	            case MySqlParser.ASTEXT:
	            case MySqlParser.ASWKB:
	            case MySqlParser.ASWKT:
	            case MySqlParser.ASYMMETRIC_DECRYPT:
	            case MySqlParser.ASYMMETRIC_DERIVE:
	            case MySqlParser.ASYMMETRIC_ENCRYPT:
	            case MySqlParser.ASYMMETRIC_SIGN:
	            case MySqlParser.ASYMMETRIC_VERIFY:
	            case MySqlParser.ATAN:
	            case MySqlParser.ATAN2:
	            case MySqlParser.BENCHMARK:
	            case MySqlParser.BIN:
	            case MySqlParser.BIT_COUNT:
	            case MySqlParser.BIT_LENGTH:
	            case MySqlParser.BUFFER:
	            case MySqlParser.CATALOG_NAME:
	            case MySqlParser.CEIL:
	            case MySqlParser.CEILING:
	            case MySqlParser.CENTROID:
	            case MySqlParser.CHARACTER_LENGTH:
	            case MySqlParser.CHARSET:
	            case MySqlParser.CHAR_LENGTH:
	            case MySqlParser.COERCIBILITY:
	            case MySqlParser.COLLATION:
	            case MySqlParser.COMPRESS:
	            case MySqlParser.CONCAT:
	            case MySqlParser.CONCAT_WS:
	            case MySqlParser.CONNECTION_ID:
	            case MySqlParser.CONV:
	            case MySqlParser.CONVERT_TZ:
	            case MySqlParser.COS:
	            case MySqlParser.COT:
	            case MySqlParser.CRC32:
	            case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
	            case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
	            case MySqlParser.CREATE_DH_PARAMETERS:
	            case MySqlParser.CREATE_DIGEST:
	            case MySqlParser.CROSSES:
	            case MySqlParser.DATEDIFF:
	            case MySqlParser.DATE_FORMAT:
	            case MySqlParser.DAYNAME:
	            case MySqlParser.DAYOFMONTH:
	            case MySqlParser.DAYOFWEEK:
	            case MySqlParser.DAYOFYEAR:
	            case MySqlParser.DECODE:
	            case MySqlParser.DEGREES:
	            case MySqlParser.DES_DECRYPT:
	            case MySqlParser.DES_ENCRYPT:
	            case MySqlParser.DIMENSION:
	            case MySqlParser.DISJOINT:
	            case MySqlParser.ELT:
	            case MySqlParser.ENCODE:
	            case MySqlParser.ENCRYPT:
	            case MySqlParser.ENDPOINT:
	            case MySqlParser.ENVELOPE:
	            case MySqlParser.EQUALS:
	            case MySqlParser.EXP:
	            case MySqlParser.EXPORT_SET:
	            case MySqlParser.EXTERIORRING:
	            case MySqlParser.EXTRACTVALUE:
	            case MySqlParser.FIELD:
	            case MySqlParser.FIND_IN_SET:
	            case MySqlParser.FLOOR:
	            case MySqlParser.FORMAT:
	            case MySqlParser.FOUND_ROWS:
	            case MySqlParser.FROM_BASE64:
	            case MySqlParser.FROM_DAYS:
	            case MySqlParser.FROM_UNIXTIME:
	            case MySqlParser.GEOMCOLLFROMTEXT:
	            case MySqlParser.GEOMCOLLFROMWKB:
	            case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
	            case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
	            case MySqlParser.GEOMETRYFROMTEXT:
	            case MySqlParser.GEOMETRYFROMWKB:
	            case MySqlParser.GEOMETRYN:
	            case MySqlParser.GEOMETRYTYPE:
	            case MySqlParser.GEOMFROMTEXT:
	            case MySqlParser.GEOMFROMWKB:
	            case MySqlParser.GET_FORMAT:
	            case MySqlParser.GET_LOCK:
	            case MySqlParser.GLENGTH:
	            case MySqlParser.GREATEST:
	            case MySqlParser.GTID_SUBSET:
	            case MySqlParser.GTID_SUBTRACT:
	            case MySqlParser.HEX:
	            case MySqlParser.IFNULL:
	            case MySqlParser.INET6_ATON:
	            case MySqlParser.INET6_NTOA:
	            case MySqlParser.INET_ATON:
	            case MySqlParser.INET_NTOA:
	            case MySqlParser.INSTR:
	            case MySqlParser.INTERIORRINGN:
	            case MySqlParser.INTERSECTS:
	            case MySqlParser.ISCLOSED:
	            case MySqlParser.ISEMPTY:
	            case MySqlParser.ISNULL:
	            case MySqlParser.ISSIMPLE:
	            case MySqlParser.IS_FREE_LOCK:
	            case MySqlParser.IS_IPV4:
	            case MySqlParser.IS_IPV4_COMPAT:
	            case MySqlParser.IS_IPV4_MAPPED:
	            case MySqlParser.IS_IPV6:
	            case MySqlParser.IS_USED_LOCK:
	            case MySqlParser.LAST_INSERT_ID:
	            case MySqlParser.LCASE:
	            case MySqlParser.LEAST:
	            case MySqlParser.LENGTH:
	            case MySqlParser.LINEFROMTEXT:
	            case MySqlParser.LINEFROMWKB:
	            case MySqlParser.LINESTRINGFROMTEXT:
	            case MySqlParser.LINESTRINGFROMWKB:
	            case MySqlParser.LN:
	            case MySqlParser.LOAD_FILE:
	            case MySqlParser.LOCATE:
	            case MySqlParser.LOG:
	            case MySqlParser.LOG10:
	            case MySqlParser.LOG2:
	            case MySqlParser.LOWER:
	            case MySqlParser.LPAD:
	            case MySqlParser.LTRIM:
	            case MySqlParser.MAKEDATE:
	            case MySqlParser.MAKETIME:
	            case MySqlParser.MAKE_SET:
	            case MySqlParser.MASTER_POS_WAIT:
	            case MySqlParser.MBRCONTAINS:
	            case MySqlParser.MBRDISJOINT:
	            case MySqlParser.MBREQUAL:
	            case MySqlParser.MBRINTERSECTS:
	            case MySqlParser.MBROVERLAPS:
	            case MySqlParser.MBRTOUCHES:
	            case MySqlParser.MBRWITHIN:
	            case MySqlParser.MD5:
	            case MySqlParser.MLINEFROMTEXT:
	            case MySqlParser.MLINEFROMWKB:
	            case MySqlParser.MONTHNAME:
	            case MySqlParser.MPOINTFROMTEXT:
	            case MySqlParser.MPOINTFROMWKB:
	            case MySqlParser.MPOLYFROMTEXT:
	            case MySqlParser.MPOLYFROMWKB:
	            case MySqlParser.MULTILINESTRINGFROMTEXT:
	            case MySqlParser.MULTILINESTRINGFROMWKB:
	            case MySqlParser.MULTIPOINTFROMTEXT:
	            case MySqlParser.MULTIPOINTFROMWKB:
	            case MySqlParser.MULTIPOLYGONFROMTEXT:
	            case MySqlParser.MULTIPOLYGONFROMWKB:
	            case MySqlParser.NAME_CONST:
	            case MySqlParser.NULLIF:
	            case MySqlParser.NUMGEOMETRIES:
	            case MySqlParser.NUMINTERIORRINGS:
	            case MySqlParser.NUMPOINTS:
	            case MySqlParser.OCT:
	            case MySqlParser.OCTET_LENGTH:
	            case MySqlParser.ORD:
	            case MySqlParser.OVERLAPS:
	            case MySqlParser.PERIOD_ADD:
	            case MySqlParser.PERIOD_DIFF:
	            case MySqlParser.PI:
	            case MySqlParser.POINTFROMTEXT:
	            case MySqlParser.POINTFROMWKB:
	            case MySqlParser.POINTN:
	            case MySqlParser.POLYFROMTEXT:
	            case MySqlParser.POLYFROMWKB:
	            case MySqlParser.POLYGONFROMTEXT:
	            case MySqlParser.POLYGONFROMWKB:
	            case MySqlParser.POW:
	            case MySqlParser.POWER:
	            case MySqlParser.QUOTE:
	            case MySqlParser.RADIANS:
	            case MySqlParser.RAND:
	            case MySqlParser.RANDOM_BYTES:
	            case MySqlParser.RELEASE_LOCK:
	            case MySqlParser.REVERSE:
	            case MySqlParser.ROUND:
	            case MySqlParser.ROW_COUNT:
	            case MySqlParser.RPAD:
	            case MySqlParser.RTRIM:
	            case MySqlParser.SEC_TO_TIME:
	            case MySqlParser.SESSION_USER:
	            case MySqlParser.SHA:
	            case MySqlParser.SHA1:
	            case MySqlParser.SHA2:
	            case MySqlParser.SCHEMA_NAME:
	            case MySqlParser.SIGN:
	            case MySqlParser.SIN:
	            case MySqlParser.SLEEP:
	            case MySqlParser.SOUNDEX:
	            case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
	            case MySqlParser.SQRT:
	            case MySqlParser.SRID:
	            case MySqlParser.STARTPOINT:
	            case MySqlParser.STRCMP:
	            case MySqlParser.STR_TO_DATE:
	            case MySqlParser.ST_AREA:
	            case MySqlParser.ST_ASBINARY:
	            case MySqlParser.ST_ASTEXT:
	            case MySqlParser.ST_ASWKB:
	            case MySqlParser.ST_ASWKT:
	            case MySqlParser.ST_BUFFER:
	            case MySqlParser.ST_CENTROID:
	            case MySqlParser.ST_CONTAINS:
	            case MySqlParser.ST_CROSSES:
	            case MySqlParser.ST_DIFFERENCE:
	            case MySqlParser.ST_DIMENSION:
	            case MySqlParser.ST_DISJOINT:
	            case MySqlParser.ST_DISTANCE:
	            case MySqlParser.ST_ENDPOINT:
	            case MySqlParser.ST_ENVELOPE:
	            case MySqlParser.ST_EQUALS:
	            case MySqlParser.ST_EXTERIORRING:
	            case MySqlParser.ST_GEOMCOLLFROMTEXT:
	            case MySqlParser.ST_GEOMCOLLFROMTXT:
	            case MySqlParser.ST_GEOMCOLLFROMWKB:
	            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
	            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
	            case MySqlParser.ST_GEOMETRYFROMTEXT:
	            case MySqlParser.ST_GEOMETRYFROMWKB:
	            case MySqlParser.ST_GEOMETRYN:
	            case MySqlParser.ST_GEOMETRYTYPE:
	            case MySqlParser.ST_GEOMFROMTEXT:
	            case MySqlParser.ST_GEOMFROMWKB:
	            case MySqlParser.ST_INTERIORRINGN:
	            case MySqlParser.ST_INTERSECTION:
	            case MySqlParser.ST_INTERSECTS:
	            case MySqlParser.ST_ISCLOSED:
	            case MySqlParser.ST_ISEMPTY:
	            case MySqlParser.ST_ISSIMPLE:
	            case MySqlParser.ST_LINEFROMTEXT:
	            case MySqlParser.ST_LINEFROMWKB:
	            case MySqlParser.ST_LINESTRINGFROMTEXT:
	            case MySqlParser.ST_LINESTRINGFROMWKB:
	            case MySqlParser.ST_NUMGEOMETRIES:
	            case MySqlParser.ST_NUMINTERIORRING:
	            case MySqlParser.ST_NUMINTERIORRINGS:
	            case MySqlParser.ST_NUMPOINTS:
	            case MySqlParser.ST_OVERLAPS:
	            case MySqlParser.ST_POINTFROMTEXT:
	            case MySqlParser.ST_POINTFROMWKB:
	            case MySqlParser.ST_POINTN:
	            case MySqlParser.ST_POLYFROMTEXT:
	            case MySqlParser.ST_POLYFROMWKB:
	            case MySqlParser.ST_POLYGONFROMTEXT:
	            case MySqlParser.ST_POLYGONFROMWKB:
	            case MySqlParser.ST_SRID:
	            case MySqlParser.ST_STARTPOINT:
	            case MySqlParser.ST_SYMDIFFERENCE:
	            case MySqlParser.ST_TOUCHES:
	            case MySqlParser.ST_UNION:
	            case MySqlParser.ST_WITHIN:
	            case MySqlParser.ST_X:
	            case MySqlParser.ST_Y:
	            case MySqlParser.SUBDATE:
	            case MySqlParser.SUBSTRING_INDEX:
	            case MySqlParser.SUBTIME:
	            case MySqlParser.SYSTEM_USER:
	            case MySqlParser.TAN:
	            case MySqlParser.TIMEDIFF:
	            case MySqlParser.TIMESTAMPADD:
	            case MySqlParser.TIMESTAMPDIFF:
	            case MySqlParser.TIME_FORMAT:
	            case MySqlParser.TIME_TO_SEC:
	            case MySqlParser.TOUCHES:
	            case MySqlParser.TO_BASE64:
	            case MySqlParser.TO_DAYS:
	            case MySqlParser.TO_SECONDS:
	            case MySqlParser.UCASE:
	            case MySqlParser.UNCOMPRESS:
	            case MySqlParser.UNCOMPRESSED_LENGTH:
	            case MySqlParser.UNHEX:
	            case MySqlParser.UNIX_TIMESTAMP:
	            case MySqlParser.UPDATEXML:
	            case MySqlParser.UPPER:
	            case MySqlParser.UUID:
	            case MySqlParser.UUID_SHORT:
	            case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
	            case MySqlParser.VERSION:
	            case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
	            case MySqlParser.WEEKDAY:
	            case MySqlParser.WEEKOFYEAR:
	            case MySqlParser.WEIGHT_STRING:
	            case MySqlParser.WITHIN:
	            case MySqlParser.YEARWEEK:
	            case MySqlParser.Y_FUNCTION:
	            case MySqlParser.X_FUNCTION:
	            case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
	            case MySqlParser.STRING_LITERAL:
	            case MySqlParser.ID:
	            case MySqlParser.REVERSE_QUOTE_ID:
	                this.state = 5168;
	                this.uidList();
	                break;
	            case MySqlParser.ALL:
	                this.state = 5169;
	                this.match(MySqlParser.ALL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 5172;
	            this.match(MySqlParser.RR_BRACKET);
	        }

	        this.state = 5175;
	        this.match(MySqlParser.IN);
	        this.state = 5176;
	        localctx.schema = this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flushStatement() {
	    let localctx = new FlushStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 458, MySqlParser.RULE_flushStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5178;
	        this.match(MySqlParser.FLUSH);
	        this.state = 5180;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.NO_WRITE_TO_BINLOG || _la===MySqlParser.LOCAL) {
	            this.state = 5179;
	            localctx.flushFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.NO_WRITE_TO_BINLOG || _la===MySqlParser.LOCAL)) {
	                localctx.flushFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 5182;
	        this.flushOption();
	        this.state = 5187;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 5183;
	            this.match(MySqlParser.COMMA);
	            this.state = 5184;
	            this.flushOption();
	            this.state = 5189;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	killStatement() {
	    let localctx = new KillStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 460, MySqlParser.RULE_killStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5190;
	        this.match(MySqlParser.KILL);
	        this.state = 5192;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.CONNECTION || _la===MySqlParser.QUERY) {
	            this.state = 5191;
	            localctx.connectionFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.CONNECTION || _la===MySqlParser.QUERY)) {
	                localctx.connectionFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 5195; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 5194;
	            this.decimalLiteral();
	            this.state = 5197; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 1027)) & ~0x1f) == 0 && ((1 << (_la - 1027)) & ((1 << (MySqlParser.ZERO_DECIMAL - 1027)) | (1 << (MySqlParser.ONE_DECIMAL - 1027)) | (1 << (MySqlParser.TWO_DECIMAL - 1027)) | (1 << (MySqlParser.DECIMAL_LITERAL - 1027)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loadIndexIntoCache() {
	    let localctx = new LoadIndexIntoCacheContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 462, MySqlParser.RULE_loadIndexIntoCache);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5199;
	        this.match(MySqlParser.LOAD);
	        this.state = 5200;
	        this.match(MySqlParser.INDEX);
	        this.state = 5201;
	        this.match(MySqlParser.INTO);
	        this.state = 5202;
	        this.match(MySqlParser.CACHE);
	        this.state = 5203;
	        this.loadedTableIndexes();
	        this.state = 5208;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 5204;
	            this.match(MySqlParser.COMMA);
	            this.state = 5205;
	            this.loadedTableIndexes();
	            this.state = 5210;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resetStatement() {
	    let localctx = new ResetStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 464, MySqlParser.RULE_resetStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5211;
	        this.match(MySqlParser.RESET);
	        this.state = 5212;
	        this.match(MySqlParser.QUERY);
	        this.state = 5213;
	        this.match(MySqlParser.CACHE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shutdownStatement() {
	    let localctx = new ShutdownStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 466, MySqlParser.RULE_shutdownStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5215;
	        this.match(MySqlParser.SHUTDOWN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableIndexes() {
	    let localctx = new TableIndexesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 468, MySqlParser.RULE_tableIndexes);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5217;
	        this.tableName();
	        this.state = 5225;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.INDEX || _la===MySqlParser.KEY || _la===MySqlParser.LR_BRACKET) {
	            this.state = 5219;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.INDEX || _la===MySqlParser.KEY) {
	                this.state = 5218;
	                localctx.indexFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.INDEX || _la===MySqlParser.KEY)) {
	                    localctx.indexFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 5221;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 5222;
	            this.uidList();
	            this.state = 5223;
	            this.match(MySqlParser.RR_BRACKET);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flushOption() {
	    let localctx = new FlushOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 470, MySqlParser.RULE_flushOption);
	    var _la = 0; // Token type
	    try {
	        this.state = 5257;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,755,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SimpleFlushOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5245;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.DES_KEY_FILE:
	                this.state = 5227;
	                this.match(MySqlParser.DES_KEY_FILE);
	                break;
	            case MySqlParser.HOSTS:
	                this.state = 5228;
	                this.match(MySqlParser.HOSTS);
	                break;
	            case MySqlParser.BINARY:
	            case MySqlParser.ENGINE:
	            case MySqlParser.ERROR:
	            case MySqlParser.GENERAL:
	            case MySqlParser.LOGS:
	            case MySqlParser.RELAY:
	            case MySqlParser.SLOW:
	                this.state = 5230;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===MySqlParser.BINARY || ((((_la - 342)) & ~0x1f) == 0 && ((1 << (_la - 342)) & ((1 << (MySqlParser.ENGINE - 342)) | (1 << (MySqlParser.ERROR - 342)) | (1 << (MySqlParser.GENERAL - 342)))) !== 0) || _la===MySqlParser.RELAY || _la===MySqlParser.SLOW) {
	                    this.state = 5229;
	                    _la = this._input.LA(1);
	                    if(!(_la===MySqlParser.BINARY || ((((_la - 342)) & ~0x1f) == 0 && ((1 << (_la - 342)) & ((1 << (MySqlParser.ENGINE - 342)) | (1 << (MySqlParser.ERROR - 342)) | (1 << (MySqlParser.GENERAL - 342)))) !== 0) || _la===MySqlParser.RELAY || _la===MySqlParser.SLOW)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                }

	                this.state = 5232;
	                this.match(MySqlParser.LOGS);
	                break;
	            case MySqlParser.OPTIMIZER_COSTS:
	                this.state = 5233;
	                this.match(MySqlParser.OPTIMIZER_COSTS);
	                break;
	            case MySqlParser.PRIVILEGES:
	                this.state = 5234;
	                this.match(MySqlParser.PRIVILEGES);
	                break;
	            case MySqlParser.QUERY:
	                this.state = 5235;
	                this.match(MySqlParser.QUERY);
	                this.state = 5236;
	                this.match(MySqlParser.CACHE);
	                break;
	            case MySqlParser.STATUS:
	                this.state = 5237;
	                this.match(MySqlParser.STATUS);
	                break;
	            case MySqlParser.USER_RESOURCES:
	                this.state = 5238;
	                this.match(MySqlParser.USER_RESOURCES);
	                break;
	            case MySqlParser.TABLES:
	                this.state = 5239;
	                this.match(MySqlParser.TABLES);
	                this.state = 5243;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===MySqlParser.WITH) {
	                    this.state = 5240;
	                    this.match(MySqlParser.WITH);
	                    this.state = 5241;
	                    this.match(MySqlParser.READ);
	                    this.state = 5242;
	                    this.match(MySqlParser.LOCK);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 2:
	            localctx = new ChannelFlushOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5247;
	            this.match(MySqlParser.RELAY);
	            this.state = 5248;
	            this.match(MySqlParser.LOGS);
	            this.state = 5250;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.FOR) {
	                this.state = 5249;
	                this.channelOption();
	            }

	            break;

	        case 3:
	            localctx = new TableFlushOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5252;
	            this.match(MySqlParser.TABLES);
	            this.state = 5253;
	            this.tables();
	            this.state = 5255;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.FOR || _la===MySqlParser.WITH) {
	                this.state = 5254;
	                this.flushTableOption();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flushTableOption() {
	    let localctx = new FlushTableOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 472, MySqlParser.RULE_flushTableOption);
	    try {
	        this.state = 5264;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.WITH:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5259;
	            this.match(MySqlParser.WITH);
	            this.state = 5260;
	            this.match(MySqlParser.READ);
	            this.state = 5261;
	            this.match(MySqlParser.LOCK);
	            break;
	        case MySqlParser.FOR:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5262;
	            this.match(MySqlParser.FOR);
	            this.state = 5263;
	            this.match(MySqlParser.EXPORT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loadedTableIndexes() {
	    let localctx = new LoadedTableIndexesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 474, MySqlParser.RULE_loadedTableIndexes);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5266;
	        this.tableName();
	        this.state = 5274;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.PARTITION) {
	            this.state = 5267;
	            this.match(MySqlParser.PARTITION);
	            this.state = 5268;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 5271;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.CURRENT:
	            case MySqlParser.DATABASE:
	            case MySqlParser.DIAGNOSTICS:
	            case MySqlParser.LEFT:
	            case MySqlParser.NUMBER:
	            case MySqlParser.RIGHT:
	            case MySqlParser.STACKED:
	            case MySqlParser.DATE:
	            case MySqlParser.TIME:
	            case MySqlParser.TIMESTAMP:
	            case MySqlParser.DATETIME:
	            case MySqlParser.YEAR:
	            case MySqlParser.TEXT:
	            case MySqlParser.ENUM:
	            case MySqlParser.SERIAL:
	            case MySqlParser.JSON_VALID:
	            case MySqlParser.JSON_SCHEMA_VALID:
	            case MySqlParser.AVG:
	            case MySqlParser.BIT_AND:
	            case MySqlParser.BIT_OR:
	            case MySqlParser.BIT_XOR:
	            case MySqlParser.COUNT:
	            case MySqlParser.GROUP_CONCAT:
	            case MySqlParser.MAX:
	            case MySqlParser.MIN:
	            case MySqlParser.STD:
	            case MySqlParser.STDDEV:
	            case MySqlParser.STDDEV_POP:
	            case MySqlParser.STDDEV_SAMP:
	            case MySqlParser.SUM:
	            case MySqlParser.VAR_POP:
	            case MySqlParser.VAR_SAMP:
	            case MySqlParser.VARIANCE:
	            case MySqlParser.POSITION:
	            case MySqlParser.ACCOUNT:
	            case MySqlParser.ACTION:
	            case MySqlParser.AFTER:
	            case MySqlParser.AGGREGATE:
	            case MySqlParser.ALGORITHM:
	            case MySqlParser.ANY:
	            case MySqlParser.AT:
	            case MySqlParser.AUTHORS:
	            case MySqlParser.AUTOCOMMIT:
	            case MySqlParser.AUTOEXTEND_SIZE:
	            case MySqlParser.AUTO_INCREMENT:
	            case MySqlParser.AVG_ROW_LENGTH:
	            case MySqlParser.BEGIN:
	            case MySqlParser.BINLOG:
	            case MySqlParser.BIT:
	            case MySqlParser.BLOCK:
	            case MySqlParser.BOOL:
	            case MySqlParser.BOOLEAN:
	            case MySqlParser.BTREE:
	            case MySqlParser.CACHE:
	            case MySqlParser.CASCADED:
	            case MySqlParser.CHAIN:
	            case MySqlParser.CHANGED:
	            case MySqlParser.CHANNEL:
	            case MySqlParser.CHECKSUM:
	            case MySqlParser.PAGE_CHECKSUM:
	            case MySqlParser.CIPHER:
	            case MySqlParser.CLASS_ORIGIN:
	            case MySqlParser.CLIENT:
	            case MySqlParser.CLOSE:
	            case MySqlParser.COALESCE:
	            case MySqlParser.CODE:
	            case MySqlParser.COLUMNS:
	            case MySqlParser.COLUMN_FORMAT:
	            case MySqlParser.COLUMN_NAME:
	            case MySqlParser.COMMENT:
	            case MySqlParser.COMMIT:
	            case MySqlParser.COMPACT:
	            case MySqlParser.COMPLETION:
	            case MySqlParser.COMPRESSED:
	            case MySqlParser.COMPRESSION:
	            case MySqlParser.CONCURRENT:
	            case MySqlParser.CONNECTION:
	            case MySqlParser.CONSISTENT:
	            case MySqlParser.CONSTRAINT_CATALOG:
	            case MySqlParser.CONSTRAINT_SCHEMA:
	            case MySqlParser.CONSTRAINT_NAME:
	            case MySqlParser.CONTAINS:
	            case MySqlParser.CONTEXT:
	            case MySqlParser.CONTRIBUTORS:
	            case MySqlParser.COPY:
	            case MySqlParser.CPU:
	            case MySqlParser.CURSOR_NAME:
	            case MySqlParser.DATA:
	            case MySqlParser.DATAFILE:
	            case MySqlParser.DEALLOCATE:
	            case MySqlParser.DEFAULT_AUTH:
	            case MySqlParser.DEFINER:
	            case MySqlParser.DELAY_KEY_WRITE:
	            case MySqlParser.DES_KEY_FILE:
	            case MySqlParser.DIRECTORY:
	            case MySqlParser.DISABLE:
	            case MySqlParser.DISCARD:
	            case MySqlParser.DISK:
	            case MySqlParser.DO:
	            case MySqlParser.DUMPFILE:
	            case MySqlParser.DUPLICATE:
	            case MySqlParser.DYNAMIC:
	            case MySqlParser.ENABLE:
	            case MySqlParser.ENCRYPTION:
	            case MySqlParser.END:
	            case MySqlParser.ENDS:
	            case MySqlParser.ENGINE:
	            case MySqlParser.ENGINES:
	            case MySqlParser.ERROR:
	            case MySqlParser.ERRORS:
	            case MySqlParser.ESCAPE:
	            case MySqlParser.EVEN:
	            case MySqlParser.EVENT:
	            case MySqlParser.EVENTS:
	            case MySqlParser.EVERY:
	            case MySqlParser.EXCHANGE:
	            case MySqlParser.EXCLUSIVE:
	            case MySqlParser.EXPIRE:
	            case MySqlParser.EXPORT:
	            case MySqlParser.EXTENDED:
	            case MySqlParser.EXTENT_SIZE:
	            case MySqlParser.FAST:
	            case MySqlParser.FAULTS:
	            case MySqlParser.FIELDS:
	            case MySqlParser.FILE_BLOCK_SIZE:
	            case MySqlParser.FILTER:
	            case MySqlParser.FIRST:
	            case MySqlParser.FIXED:
	            case MySqlParser.FLUSH:
	            case MySqlParser.FOLLOWS:
	            case MySqlParser.FOUND:
	            case MySqlParser.FULL:
	            case MySqlParser.FUNCTION:
	            case MySqlParser.GENERAL:
	            case MySqlParser.GLOBAL:
	            case MySqlParser.GRANTS:
	            case MySqlParser.GROUP_REPLICATION:
	            case MySqlParser.HANDLER:
	            case MySqlParser.HASH:
	            case MySqlParser.HELP:
	            case MySqlParser.HOST:
	            case MySqlParser.HOSTS:
	            case MySqlParser.IDENTIFIED:
	            case MySqlParser.IGNORE_SERVER_IDS:
	            case MySqlParser.IMPORT:
	            case MySqlParser.INDEXES:
	            case MySqlParser.INITIAL_SIZE:
	            case MySqlParser.INPLACE:
	            case MySqlParser.INSERT_METHOD:
	            case MySqlParser.INSTALL:
	            case MySqlParser.INSTANCE:
	            case MySqlParser.INVISIBLE:
	            case MySqlParser.INVOKER:
	            case MySqlParser.IO:
	            case MySqlParser.IO_THREAD:
	            case MySqlParser.IPC:
	            case MySqlParser.ISOLATION:
	            case MySqlParser.ISSUER:
	            case MySqlParser.JSON:
	            case MySqlParser.KEY_BLOCK_SIZE:
	            case MySqlParser.LANGUAGE:
	            case MySqlParser.LAST:
	            case MySqlParser.LEAVES:
	            case MySqlParser.LESS:
	            case MySqlParser.LEVEL:
	            case MySqlParser.LIST:
	            case MySqlParser.LOCAL:
	            case MySqlParser.LOGFILE:
	            case MySqlParser.LOGS:
	            case MySqlParser.MASTER:
	            case MySqlParser.MASTER_AUTO_POSITION:
	            case MySqlParser.MASTER_CONNECT_RETRY:
	            case MySqlParser.MASTER_DELAY:
	            case MySqlParser.MASTER_HEARTBEAT_PERIOD:
	            case MySqlParser.MASTER_HOST:
	            case MySqlParser.MASTER_LOG_FILE:
	            case MySqlParser.MASTER_LOG_POS:
	            case MySqlParser.MASTER_PASSWORD:
	            case MySqlParser.MASTER_PORT:
	            case MySqlParser.MASTER_RETRY_COUNT:
	            case MySqlParser.MASTER_SSL:
	            case MySqlParser.MASTER_SSL_CA:
	            case MySqlParser.MASTER_SSL_CAPATH:
	            case MySqlParser.MASTER_SSL_CERT:
	            case MySqlParser.MASTER_SSL_CIPHER:
	            case MySqlParser.MASTER_SSL_CRL:
	            case MySqlParser.MASTER_SSL_CRLPATH:
	            case MySqlParser.MASTER_SSL_KEY:
	            case MySqlParser.MASTER_TLS_VERSION:
	            case MySqlParser.MASTER_USER:
	            case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
	            case MySqlParser.MAX_QUERIES_PER_HOUR:
	            case MySqlParser.MAX_ROWS:
	            case MySqlParser.MAX_SIZE:
	            case MySqlParser.MAX_UPDATES_PER_HOUR:
	            case MySqlParser.MAX_USER_CONNECTIONS:
	            case MySqlParser.MEDIUM:
	            case MySqlParser.MEMBER:
	            case MySqlParser.MERGE:
	            case MySqlParser.MESSAGE_TEXT:
	            case MySqlParser.MID:
	            case MySqlParser.MIGRATE:
	            case MySqlParser.MIN_ROWS:
	            case MySqlParser.MODE:
	            case MySqlParser.MODIFY:
	            case MySqlParser.MUTEX:
	            case MySqlParser.MYSQL:
	            case MySqlParser.MYSQL_ERRNO:
	            case MySqlParser.NAME:
	            case MySqlParser.NAMES:
	            case MySqlParser.NCHAR:
	            case MySqlParser.NEVER:
	            case MySqlParser.NEXT:
	            case MySqlParser.NO:
	            case MySqlParser.NODEGROUP:
	            case MySqlParser.NONE:
	            case MySqlParser.OFFLINE:
	            case MySqlParser.OFFSET:
	            case MySqlParser.OF:
	            case MySqlParser.OJ:
	            case MySqlParser.OLD_PASSWORD:
	            case MySqlParser.ONE:
	            case MySqlParser.ONLINE:
	            case MySqlParser.ONLY:
	            case MySqlParser.OPEN:
	            case MySqlParser.OPTIMIZER_COSTS:
	            case MySqlParser.OPTIONS:
	            case MySqlParser.OWNER:
	            case MySqlParser.PACK_KEYS:
	            case MySqlParser.PAGE:
	            case MySqlParser.PARSER:
	            case MySqlParser.PARTIAL:
	            case MySqlParser.PARTITIONING:
	            case MySqlParser.PARTITIONS:
	            case MySqlParser.PASSWORD:
	            case MySqlParser.PHASE:
	            case MySqlParser.PLUGIN:
	            case MySqlParser.PLUGIN_DIR:
	            case MySqlParser.PLUGINS:
	            case MySqlParser.PORT:
	            case MySqlParser.PRECEDES:
	            case MySqlParser.PREPARE:
	            case MySqlParser.PRESERVE:
	            case MySqlParser.PREV:
	            case MySqlParser.PROCESSLIST:
	            case MySqlParser.PROFILE:
	            case MySqlParser.PROFILES:
	            case MySqlParser.PROXY:
	            case MySqlParser.QUERY:
	            case MySqlParser.QUICK:
	            case MySqlParser.REBUILD:
	            case MySqlParser.RECOVER:
	            case MySqlParser.REDO_BUFFER_SIZE:
	            case MySqlParser.REDUNDANT:
	            case MySqlParser.RELAY:
	            case MySqlParser.RELAY_LOG_FILE:
	            case MySqlParser.RELAY_LOG_POS:
	            case MySqlParser.RELAYLOG:
	            case MySqlParser.REMOVE:
	            case MySqlParser.REORGANIZE:
	            case MySqlParser.REPAIR:
	            case MySqlParser.REPLICATE_DO_DB:
	            case MySqlParser.REPLICATE_DO_TABLE:
	            case MySqlParser.REPLICATE_IGNORE_DB:
	            case MySqlParser.REPLICATE_IGNORE_TABLE:
	            case MySqlParser.REPLICATE_REWRITE_DB:
	            case MySqlParser.REPLICATE_WILD_DO_TABLE:
	            case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
	            case MySqlParser.REPLICATION:
	            case MySqlParser.RESET:
	            case MySqlParser.RESUME:
	            case MySqlParser.RETURNED_SQLSTATE:
	            case MySqlParser.RETURNS:
	            case MySqlParser.ROLE:
	            case MySqlParser.ROLLBACK:
	            case MySqlParser.ROLLUP:
	            case MySqlParser.ROTATE:
	            case MySqlParser.ROW:
	            case MySqlParser.ROWS:
	            case MySqlParser.ROW_FORMAT:
	            case MySqlParser.SAVEPOINT:
	            case MySqlParser.SCHEDULE:
	            case MySqlParser.SECURITY:
	            case MySqlParser.SERVER:
	            case MySqlParser.SESSION:
	            case MySqlParser.SHARE:
	            case MySqlParser.SHARED:
	            case MySqlParser.SIGNED:
	            case MySqlParser.SIMPLE:
	            case MySqlParser.SLAVE:
	            case MySqlParser.SLOW:
	            case MySqlParser.SNAPSHOT:
	            case MySqlParser.SOCKET:
	            case MySqlParser.SOME:
	            case MySqlParser.SONAME:
	            case MySqlParser.SOUNDS:
	            case MySqlParser.SOURCE:
	            case MySqlParser.SQL_AFTER_GTIDS:
	            case MySqlParser.SQL_AFTER_MTS_GAPS:
	            case MySqlParser.SQL_BEFORE_GTIDS:
	            case MySqlParser.SQL_BUFFER_RESULT:
	            case MySqlParser.SQL_CACHE:
	            case MySqlParser.SQL_NO_CACHE:
	            case MySqlParser.SQL_THREAD:
	            case MySqlParser.START:
	            case MySqlParser.STARTS:
	            case MySqlParser.STATS_AUTO_RECALC:
	            case MySqlParser.STATS_PERSISTENT:
	            case MySqlParser.STATS_SAMPLE_PAGES:
	            case MySqlParser.STATUS:
	            case MySqlParser.STOP:
	            case MySqlParser.STORAGE:
	            case MySqlParser.STRING:
	            case MySqlParser.SUBCLASS_ORIGIN:
	            case MySqlParser.SUBJECT:
	            case MySqlParser.SUBPARTITION:
	            case MySqlParser.SUBPARTITIONS:
	            case MySqlParser.SUSPEND:
	            case MySqlParser.SWAPS:
	            case MySqlParser.SWITCHES:
	            case MySqlParser.TABLE_NAME:
	            case MySqlParser.TABLESPACE:
	            case MySqlParser.TEMPORARY:
	            case MySqlParser.TEMPTABLE:
	            case MySqlParser.THAN:
	            case MySqlParser.TRADITIONAL:
	            case MySqlParser.TRANSACTION:
	            case MySqlParser.TRANSACTIONAL:
	            case MySqlParser.TRIGGERS:
	            case MySqlParser.TRUNCATE:
	            case MySqlParser.UNDEFINED:
	            case MySqlParser.UNDOFILE:
	            case MySqlParser.UNDO_BUFFER_SIZE:
	            case MySqlParser.UNINSTALL:
	            case MySqlParser.UNKNOWN:
	            case MySqlParser.UNTIL:
	            case MySqlParser.UPGRADE:
	            case MySqlParser.USER:
	            case MySqlParser.USE_FRM:
	            case MySqlParser.USER_RESOURCES:
	            case MySqlParser.VALIDATION:
	            case MySqlParser.VALUE:
	            case MySqlParser.VARIABLES:
	            case MySqlParser.VIEW:
	            case MySqlParser.VISIBLE:
	            case MySqlParser.WAIT:
	            case MySqlParser.WARNINGS:
	            case MySqlParser.WITHOUT:
	            case MySqlParser.WORK:
	            case MySqlParser.WRAPPER:
	            case MySqlParser.X509:
	            case MySqlParser.XA:
	            case MySqlParser.XML:
	            case MySqlParser.INTERNAL:
	            case MySqlParser.QUARTER:
	            case MySqlParser.MONTH:
	            case MySqlParser.DAY:
	            case MySqlParser.HOUR:
	            case MySqlParser.MINUTE:
	            case MySqlParser.WEEK:
	            case MySqlParser.SECOND:
	            case MySqlParser.MICROSECOND:
	            case MySqlParser.TABLES:
	            case MySqlParser.ROUTINE:
	            case MySqlParser.EXECUTE:
	            case MySqlParser.FILE:
	            case MySqlParser.PROCESS:
	            case MySqlParser.RELOAD:
	            case MySqlParser.SHUTDOWN:
	            case MySqlParser.SUPER:
	            case MySqlParser.PRIVILEGES:
	            case MySqlParser.AUDIT_ADMIN:
	            case MySqlParser.BACKUP_ADMIN:
	            case MySqlParser.BINLOG_ADMIN:
	            case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
	            case MySqlParser.CLONE_ADMIN:
	            case MySqlParser.CONNECTION_ADMIN:
	            case MySqlParser.ENCRYPTION_KEY_ADMIN:
	            case MySqlParser.FIREWALL_ADMIN:
	            case MySqlParser.FIREWALL_USER:
	            case MySqlParser.GROUP_REPLICATION_ADMIN:
	            case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
	            case MySqlParser.NDB_STORED_USER:
	            case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
	            case MySqlParser.REPLICATION_APPLIER:
	            case MySqlParser.REPLICATION_SLAVE_ADMIN:
	            case MySqlParser.RESOURCE_GROUP_ADMIN:
	            case MySqlParser.RESOURCE_GROUP_USER:
	            case MySqlParser.ROLE_ADMIN:
	            case MySqlParser.SESSION_VARIABLES_ADMIN:
	            case MySqlParser.SET_USER_ID:
	            case MySqlParser.SHOW_ROUTINE:
	            case MySqlParser.SYSTEM_VARIABLES_ADMIN:
	            case MySqlParser.TABLE_ENCRYPTION_ADMIN:
	            case MySqlParser.VERSION_TOKEN_ADMIN:
	            case MySqlParser.XA_RECOVER_ADMIN:
	            case MySqlParser.ARMSCII8:
	            case MySqlParser.ASCII:
	            case MySqlParser.BIG5:
	            case MySqlParser.CP1250:
	            case MySqlParser.CP1251:
	            case MySqlParser.CP1256:
	            case MySqlParser.CP1257:
	            case MySqlParser.CP850:
	            case MySqlParser.CP852:
	            case MySqlParser.CP866:
	            case MySqlParser.CP932:
	            case MySqlParser.DEC8:
	            case MySqlParser.EUCJPMS:
	            case MySqlParser.EUCKR:
	            case MySqlParser.GB2312:
	            case MySqlParser.GBK:
	            case MySqlParser.GEOSTD8:
	            case MySqlParser.GREEK:
	            case MySqlParser.HEBREW:
	            case MySqlParser.HP8:
	            case MySqlParser.KEYBCS2:
	            case MySqlParser.KOI8R:
	            case MySqlParser.KOI8U:
	            case MySqlParser.LATIN1:
	            case MySqlParser.LATIN2:
	            case MySqlParser.LATIN5:
	            case MySqlParser.LATIN7:
	            case MySqlParser.MACCE:
	            case MySqlParser.MACROMAN:
	            case MySqlParser.SJIS:
	            case MySqlParser.SWE7:
	            case MySqlParser.TIS620:
	            case MySqlParser.UCS2:
	            case MySqlParser.UJIS:
	            case MySqlParser.UTF16:
	            case MySqlParser.UTF16LE:
	            case MySqlParser.UTF32:
	            case MySqlParser.UTF8:
	            case MySqlParser.UTF8MB3:
	            case MySqlParser.UTF8MB4:
	            case MySqlParser.ARCHIVE:
	            case MySqlParser.BLACKHOLE:
	            case MySqlParser.CSV:
	            case MySqlParser.FEDERATED:
	            case MySqlParser.INNODB:
	            case MySqlParser.MEMORY:
	            case MySqlParser.MRG_MYISAM:
	            case MySqlParser.MYISAM:
	            case MySqlParser.NDB:
	            case MySqlParser.NDBCLUSTER:
	            case MySqlParser.PERFORMANCE_SCHEMA:
	            case MySqlParser.TOKUDB:
	            case MySqlParser.REPEATABLE:
	            case MySqlParser.COMMITTED:
	            case MySqlParser.UNCOMMITTED:
	            case MySqlParser.SERIALIZABLE:
	            case MySqlParser.GEOMETRYCOLLECTION:
	            case MySqlParser.LINESTRING:
	            case MySqlParser.MULTILINESTRING:
	            case MySqlParser.MULTIPOINT:
	            case MySqlParser.MULTIPOLYGON:
	            case MySqlParser.POINT:
	            case MySqlParser.POLYGON:
	            case MySqlParser.ABS:
	            case MySqlParser.ACOS:
	            case MySqlParser.ADDDATE:
	            case MySqlParser.ADDTIME:
	            case MySqlParser.AES_DECRYPT:
	            case MySqlParser.AES_ENCRYPT:
	            case MySqlParser.AREA:
	            case MySqlParser.ASBINARY:
	            case MySqlParser.ASIN:
	            case MySqlParser.ASTEXT:
	            case MySqlParser.ASWKB:
	            case MySqlParser.ASWKT:
	            case MySqlParser.ASYMMETRIC_DECRYPT:
	            case MySqlParser.ASYMMETRIC_DERIVE:
	            case MySqlParser.ASYMMETRIC_ENCRYPT:
	            case MySqlParser.ASYMMETRIC_SIGN:
	            case MySqlParser.ASYMMETRIC_VERIFY:
	            case MySqlParser.ATAN:
	            case MySqlParser.ATAN2:
	            case MySqlParser.BENCHMARK:
	            case MySqlParser.BIN:
	            case MySqlParser.BIT_COUNT:
	            case MySqlParser.BIT_LENGTH:
	            case MySqlParser.BUFFER:
	            case MySqlParser.CATALOG_NAME:
	            case MySqlParser.CEIL:
	            case MySqlParser.CEILING:
	            case MySqlParser.CENTROID:
	            case MySqlParser.CHARACTER_LENGTH:
	            case MySqlParser.CHARSET:
	            case MySqlParser.CHAR_LENGTH:
	            case MySqlParser.COERCIBILITY:
	            case MySqlParser.COLLATION:
	            case MySqlParser.COMPRESS:
	            case MySqlParser.CONCAT:
	            case MySqlParser.CONCAT_WS:
	            case MySqlParser.CONNECTION_ID:
	            case MySqlParser.CONV:
	            case MySqlParser.CONVERT_TZ:
	            case MySqlParser.COS:
	            case MySqlParser.COT:
	            case MySqlParser.CRC32:
	            case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
	            case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
	            case MySqlParser.CREATE_DH_PARAMETERS:
	            case MySqlParser.CREATE_DIGEST:
	            case MySqlParser.CROSSES:
	            case MySqlParser.DATEDIFF:
	            case MySqlParser.DATE_FORMAT:
	            case MySqlParser.DAYNAME:
	            case MySqlParser.DAYOFMONTH:
	            case MySqlParser.DAYOFWEEK:
	            case MySqlParser.DAYOFYEAR:
	            case MySqlParser.DECODE:
	            case MySqlParser.DEGREES:
	            case MySqlParser.DES_DECRYPT:
	            case MySqlParser.DES_ENCRYPT:
	            case MySqlParser.DIMENSION:
	            case MySqlParser.DISJOINT:
	            case MySqlParser.ELT:
	            case MySqlParser.ENCODE:
	            case MySqlParser.ENCRYPT:
	            case MySqlParser.ENDPOINT:
	            case MySqlParser.ENVELOPE:
	            case MySqlParser.EQUALS:
	            case MySqlParser.EXP:
	            case MySqlParser.EXPORT_SET:
	            case MySqlParser.EXTERIORRING:
	            case MySqlParser.EXTRACTVALUE:
	            case MySqlParser.FIELD:
	            case MySqlParser.FIND_IN_SET:
	            case MySqlParser.FLOOR:
	            case MySqlParser.FORMAT:
	            case MySqlParser.FOUND_ROWS:
	            case MySqlParser.FROM_BASE64:
	            case MySqlParser.FROM_DAYS:
	            case MySqlParser.FROM_UNIXTIME:
	            case MySqlParser.GEOMCOLLFROMTEXT:
	            case MySqlParser.GEOMCOLLFROMWKB:
	            case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
	            case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
	            case MySqlParser.GEOMETRYFROMTEXT:
	            case MySqlParser.GEOMETRYFROMWKB:
	            case MySqlParser.GEOMETRYN:
	            case MySqlParser.GEOMETRYTYPE:
	            case MySqlParser.GEOMFROMTEXT:
	            case MySqlParser.GEOMFROMWKB:
	            case MySqlParser.GET_FORMAT:
	            case MySqlParser.GET_LOCK:
	            case MySqlParser.GLENGTH:
	            case MySqlParser.GREATEST:
	            case MySqlParser.GTID_SUBSET:
	            case MySqlParser.GTID_SUBTRACT:
	            case MySqlParser.HEX:
	            case MySqlParser.IFNULL:
	            case MySqlParser.INET6_ATON:
	            case MySqlParser.INET6_NTOA:
	            case MySqlParser.INET_ATON:
	            case MySqlParser.INET_NTOA:
	            case MySqlParser.INSTR:
	            case MySqlParser.INTERIORRINGN:
	            case MySqlParser.INTERSECTS:
	            case MySqlParser.ISCLOSED:
	            case MySqlParser.ISEMPTY:
	            case MySqlParser.ISNULL:
	            case MySqlParser.ISSIMPLE:
	            case MySqlParser.IS_FREE_LOCK:
	            case MySqlParser.IS_IPV4:
	            case MySqlParser.IS_IPV4_COMPAT:
	            case MySqlParser.IS_IPV4_MAPPED:
	            case MySqlParser.IS_IPV6:
	            case MySqlParser.IS_USED_LOCK:
	            case MySqlParser.LAST_INSERT_ID:
	            case MySqlParser.LCASE:
	            case MySqlParser.LEAST:
	            case MySqlParser.LENGTH:
	            case MySqlParser.LINEFROMTEXT:
	            case MySqlParser.LINEFROMWKB:
	            case MySqlParser.LINESTRINGFROMTEXT:
	            case MySqlParser.LINESTRINGFROMWKB:
	            case MySqlParser.LN:
	            case MySqlParser.LOAD_FILE:
	            case MySqlParser.LOCATE:
	            case MySqlParser.LOG:
	            case MySqlParser.LOG10:
	            case MySqlParser.LOG2:
	            case MySqlParser.LOWER:
	            case MySqlParser.LPAD:
	            case MySqlParser.LTRIM:
	            case MySqlParser.MAKEDATE:
	            case MySqlParser.MAKETIME:
	            case MySqlParser.MAKE_SET:
	            case MySqlParser.MASTER_POS_WAIT:
	            case MySqlParser.MBRCONTAINS:
	            case MySqlParser.MBRDISJOINT:
	            case MySqlParser.MBREQUAL:
	            case MySqlParser.MBRINTERSECTS:
	            case MySqlParser.MBROVERLAPS:
	            case MySqlParser.MBRTOUCHES:
	            case MySqlParser.MBRWITHIN:
	            case MySqlParser.MD5:
	            case MySqlParser.MLINEFROMTEXT:
	            case MySqlParser.MLINEFROMWKB:
	            case MySqlParser.MONTHNAME:
	            case MySqlParser.MPOINTFROMTEXT:
	            case MySqlParser.MPOINTFROMWKB:
	            case MySqlParser.MPOLYFROMTEXT:
	            case MySqlParser.MPOLYFROMWKB:
	            case MySqlParser.MULTILINESTRINGFROMTEXT:
	            case MySqlParser.MULTILINESTRINGFROMWKB:
	            case MySqlParser.MULTIPOINTFROMTEXT:
	            case MySqlParser.MULTIPOINTFROMWKB:
	            case MySqlParser.MULTIPOLYGONFROMTEXT:
	            case MySqlParser.MULTIPOLYGONFROMWKB:
	            case MySqlParser.NAME_CONST:
	            case MySqlParser.NULLIF:
	            case MySqlParser.NUMGEOMETRIES:
	            case MySqlParser.NUMINTERIORRINGS:
	            case MySqlParser.NUMPOINTS:
	            case MySqlParser.OCT:
	            case MySqlParser.OCTET_LENGTH:
	            case MySqlParser.ORD:
	            case MySqlParser.OVERLAPS:
	            case MySqlParser.PERIOD_ADD:
	            case MySqlParser.PERIOD_DIFF:
	            case MySqlParser.PI:
	            case MySqlParser.POINTFROMTEXT:
	            case MySqlParser.POINTFROMWKB:
	            case MySqlParser.POINTN:
	            case MySqlParser.POLYFROMTEXT:
	            case MySqlParser.POLYFROMWKB:
	            case MySqlParser.POLYGONFROMTEXT:
	            case MySqlParser.POLYGONFROMWKB:
	            case MySqlParser.POW:
	            case MySqlParser.POWER:
	            case MySqlParser.QUOTE:
	            case MySqlParser.RADIANS:
	            case MySqlParser.RAND:
	            case MySqlParser.RANDOM_BYTES:
	            case MySqlParser.RELEASE_LOCK:
	            case MySqlParser.REVERSE:
	            case MySqlParser.ROUND:
	            case MySqlParser.ROW_COUNT:
	            case MySqlParser.RPAD:
	            case MySqlParser.RTRIM:
	            case MySqlParser.SEC_TO_TIME:
	            case MySqlParser.SESSION_USER:
	            case MySqlParser.SHA:
	            case MySqlParser.SHA1:
	            case MySqlParser.SHA2:
	            case MySqlParser.SCHEMA_NAME:
	            case MySqlParser.SIGN:
	            case MySqlParser.SIN:
	            case MySqlParser.SLEEP:
	            case MySqlParser.SOUNDEX:
	            case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
	            case MySqlParser.SQRT:
	            case MySqlParser.SRID:
	            case MySqlParser.STARTPOINT:
	            case MySqlParser.STRCMP:
	            case MySqlParser.STR_TO_DATE:
	            case MySqlParser.ST_AREA:
	            case MySqlParser.ST_ASBINARY:
	            case MySqlParser.ST_ASTEXT:
	            case MySqlParser.ST_ASWKB:
	            case MySqlParser.ST_ASWKT:
	            case MySqlParser.ST_BUFFER:
	            case MySqlParser.ST_CENTROID:
	            case MySqlParser.ST_CONTAINS:
	            case MySqlParser.ST_CROSSES:
	            case MySqlParser.ST_DIFFERENCE:
	            case MySqlParser.ST_DIMENSION:
	            case MySqlParser.ST_DISJOINT:
	            case MySqlParser.ST_DISTANCE:
	            case MySqlParser.ST_ENDPOINT:
	            case MySqlParser.ST_ENVELOPE:
	            case MySqlParser.ST_EQUALS:
	            case MySqlParser.ST_EXTERIORRING:
	            case MySqlParser.ST_GEOMCOLLFROMTEXT:
	            case MySqlParser.ST_GEOMCOLLFROMTXT:
	            case MySqlParser.ST_GEOMCOLLFROMWKB:
	            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
	            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
	            case MySqlParser.ST_GEOMETRYFROMTEXT:
	            case MySqlParser.ST_GEOMETRYFROMWKB:
	            case MySqlParser.ST_GEOMETRYN:
	            case MySqlParser.ST_GEOMETRYTYPE:
	            case MySqlParser.ST_GEOMFROMTEXT:
	            case MySqlParser.ST_GEOMFROMWKB:
	            case MySqlParser.ST_INTERIORRINGN:
	            case MySqlParser.ST_INTERSECTION:
	            case MySqlParser.ST_INTERSECTS:
	            case MySqlParser.ST_ISCLOSED:
	            case MySqlParser.ST_ISEMPTY:
	            case MySqlParser.ST_ISSIMPLE:
	            case MySqlParser.ST_LINEFROMTEXT:
	            case MySqlParser.ST_LINEFROMWKB:
	            case MySqlParser.ST_LINESTRINGFROMTEXT:
	            case MySqlParser.ST_LINESTRINGFROMWKB:
	            case MySqlParser.ST_NUMGEOMETRIES:
	            case MySqlParser.ST_NUMINTERIORRING:
	            case MySqlParser.ST_NUMINTERIORRINGS:
	            case MySqlParser.ST_NUMPOINTS:
	            case MySqlParser.ST_OVERLAPS:
	            case MySqlParser.ST_POINTFROMTEXT:
	            case MySqlParser.ST_POINTFROMWKB:
	            case MySqlParser.ST_POINTN:
	            case MySqlParser.ST_POLYFROMTEXT:
	            case MySqlParser.ST_POLYFROMWKB:
	            case MySqlParser.ST_POLYGONFROMTEXT:
	            case MySqlParser.ST_POLYGONFROMWKB:
	            case MySqlParser.ST_SRID:
	            case MySqlParser.ST_STARTPOINT:
	            case MySqlParser.ST_SYMDIFFERENCE:
	            case MySqlParser.ST_TOUCHES:
	            case MySqlParser.ST_UNION:
	            case MySqlParser.ST_WITHIN:
	            case MySqlParser.ST_X:
	            case MySqlParser.ST_Y:
	            case MySqlParser.SUBDATE:
	            case MySqlParser.SUBSTRING_INDEX:
	            case MySqlParser.SUBTIME:
	            case MySqlParser.SYSTEM_USER:
	            case MySqlParser.TAN:
	            case MySqlParser.TIMEDIFF:
	            case MySqlParser.TIMESTAMPADD:
	            case MySqlParser.TIMESTAMPDIFF:
	            case MySqlParser.TIME_FORMAT:
	            case MySqlParser.TIME_TO_SEC:
	            case MySqlParser.TOUCHES:
	            case MySqlParser.TO_BASE64:
	            case MySqlParser.TO_DAYS:
	            case MySqlParser.TO_SECONDS:
	            case MySqlParser.UCASE:
	            case MySqlParser.UNCOMPRESS:
	            case MySqlParser.UNCOMPRESSED_LENGTH:
	            case MySqlParser.UNHEX:
	            case MySqlParser.UNIX_TIMESTAMP:
	            case MySqlParser.UPDATEXML:
	            case MySqlParser.UPPER:
	            case MySqlParser.UUID:
	            case MySqlParser.UUID_SHORT:
	            case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
	            case MySqlParser.VERSION:
	            case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
	            case MySqlParser.WEEKDAY:
	            case MySqlParser.WEEKOFYEAR:
	            case MySqlParser.WEIGHT_STRING:
	            case MySqlParser.WITHIN:
	            case MySqlParser.YEARWEEK:
	            case MySqlParser.Y_FUNCTION:
	            case MySqlParser.X_FUNCTION:
	            case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
	            case MySqlParser.STRING_LITERAL:
	            case MySqlParser.ID:
	            case MySqlParser.REVERSE_QUOTE_ID:
	                this.state = 5269;
	                localctx.partitionList = this.uidList();
	                break;
	            case MySqlParser.ALL:
	                this.state = 5270;
	                this.match(MySqlParser.ALL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 5273;
	            this.match(MySqlParser.RR_BRACKET);
	        }

	        this.state = 5283;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,760,this._ctx);
	        if(la_===1) {
	            this.state = 5277;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.INDEX || _la===MySqlParser.KEY) {
	                this.state = 5276;
	                localctx.indexFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.INDEX || _la===MySqlParser.KEY)) {
	                    localctx.indexFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 5279;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 5280;
	            localctx.indexList = this.uidList();
	            this.state = 5281;
	            this.match(MySqlParser.RR_BRACKET);

	        }
	        this.state = 5287;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.IGNORE) {
	            this.state = 5285;
	            this.match(MySqlParser.IGNORE);
	            this.state = 5286;
	            this.match(MySqlParser.LEAVES);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleDescribeStatement() {
	    let localctx = new SimpleDescribeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 476, MySqlParser.RULE_simpleDescribeStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5289;
	        localctx.command = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(((((_la - 41)) & ~0x1f) == 0 && ((1 << (_la - 41)) & ((1 << (MySqlParser.DESC - 41)) | (1 << (MySqlParser.DESCRIBE - 41)) | (1 << (MySqlParser.EXPLAIN - 41)))) !== 0))) {
	            localctx.command = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5290;
	        this.tableName();
	        this.state = 5293;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,762,this._ctx);
	        if(la_===1) {
	            this.state = 5291;
	            localctx.column = this.uid();

	        } else if(la_===2) {
	            this.state = 5292;
	            localctx.pattern = this.match(MySqlParser.STRING_LITERAL);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullDescribeStatement() {
	    let localctx = new FullDescribeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 478, MySqlParser.RULE_fullDescribeStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5295;
	        localctx.command = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(((((_la - 41)) & ~0x1f) == 0 && ((1 << (_la - 41)) & ((1 << (MySqlParser.DESC - 41)) | (1 << (MySqlParser.DESCRIBE - 41)) | (1 << (MySqlParser.EXPLAIN - 41)))) !== 0))) {
	            localctx.command = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5299;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.EXTENDED || _la===MySqlParser.PARTITIONS || _la===MySqlParser.FORMAT) {
	            this.state = 5296;
	            localctx.formatType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.EXTENDED || _la===MySqlParser.PARTITIONS || _la===MySqlParser.FORMAT)) {
	                localctx.formatType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5297;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 5298;
	            localctx.formatValue = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.JSON || _la===MySqlParser.TRADITIONAL)) {
	                localctx.formatValue = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 5301;
	        this.describeObjectClause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	helpStatement() {
	    let localctx = new HelpStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 480, MySqlParser.RULE_helpStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5303;
	        this.match(MySqlParser.HELP);
	        this.state = 5304;
	        this.match(MySqlParser.STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useStatement() {
	    let localctx = new UseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 482, MySqlParser.RULE_useStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5306;
	        this.match(MySqlParser.USE);
	        this.state = 5307;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signalStatement() {
	    let localctx = new SignalStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 484, MySqlParser.RULE_signalStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5309;
	        this.match(MySqlParser.SIGNAL);
	        this.state = 5317;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.SQLSTATE:
	            this.state = 5310;
	            this.match(MySqlParser.SQLSTATE);
	            this.state = 5312;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.VALUE) {
	                this.state = 5311;
	                this.match(MySqlParser.VALUE);
	            }

	            this.state = 5314;
	            this.stringLiteral();
	            break;
	        case MySqlParser.ID:
	            this.state = 5315;
	            this.match(MySqlParser.ID);
	            break;
	        case MySqlParser.REVERSE_QUOTE_ID:
	            this.state = 5316;
	            this.match(MySqlParser.REVERSE_QUOTE_ID);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 5328;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,767,this._ctx);
	        if(la_===1) {
	            this.state = 5319;
	            this.match(MySqlParser.SET);
	            this.state = 5320;
	            this.signalConditionInformation();
	            this.state = 5325;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 5321;
	                this.match(MySqlParser.COMMA);
	                this.state = 5322;
	                this.signalConditionInformation();
	                this.state = 5327;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resignalStatement() {
	    let localctx = new ResignalStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 486, MySqlParser.RULE_resignalStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5330;
	        this.match(MySqlParser.RESIGNAL);
	        this.state = 5338;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case MySqlParser.SQLSTATE:
	        	this.state = 5331;
	        	this.match(MySqlParser.SQLSTATE);
	        	this.state = 5333;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	if(_la===MySqlParser.VALUE) {
	        	    this.state = 5332;
	        	    this.match(MySqlParser.VALUE);
	        	}

	        	this.state = 5335;
	        	this.stringLiteral();
	        	break;
	        case MySqlParser.ID:
	        	this.state = 5336;
	        	this.match(MySqlParser.ID);
	        	break;
	        case MySqlParser.REVERSE_QUOTE_ID:
	        	this.state = 5337;
	        	this.match(MySqlParser.REVERSE_QUOTE_ID);
	        	break;
	        case MySqlParser.EOF:
	        case MySqlParser.ALTER:
	        case MySqlParser.ANALYZE:
	        case MySqlParser.CALL:
	        case MySqlParser.CHANGE:
	        case MySqlParser.CHECK:
	        case MySqlParser.CREATE:
	        case MySqlParser.DELETE:
	        case MySqlParser.DESC:
	        case MySqlParser.DESCRIBE:
	        case MySqlParser.DROP:
	        case MySqlParser.EXPLAIN:
	        case MySqlParser.GET:
	        case MySqlParser.GRANT:
	        case MySqlParser.INSERT:
	        case MySqlParser.KILL:
	        case MySqlParser.LOAD:
	        case MySqlParser.LOCK:
	        case MySqlParser.OPTIMIZE:
	        case MySqlParser.PURGE:
	        case MySqlParser.RELEASE:
	        case MySqlParser.RENAME:
	        case MySqlParser.REPLACE:
	        case MySqlParser.RESIGNAL:
	        case MySqlParser.REVOKE:
	        case MySqlParser.SELECT:
	        case MySqlParser.SET:
	        case MySqlParser.SHOW:
	        case MySqlParser.SIGNAL:
	        case MySqlParser.UNLOCK:
	        case MySqlParser.UPDATE:
	        case MySqlParser.USE:
	        case MySqlParser.BEGIN:
	        case MySqlParser.BINLOG:
	        case MySqlParser.CACHE:
	        case MySqlParser.CHECKSUM:
	        case MySqlParser.COMMIT:
	        case MySqlParser.DEALLOCATE:
	        case MySqlParser.DO:
	        case MySqlParser.FLUSH:
	        case MySqlParser.HANDLER:
	        case MySqlParser.HELP:
	        case MySqlParser.INSTALL:
	        case MySqlParser.PREPARE:
	        case MySqlParser.REPAIR:
	        case MySqlParser.RESET:
	        case MySqlParser.ROLLBACK:
	        case MySqlParser.SAVEPOINT:
	        case MySqlParser.START:
	        case MySqlParser.STOP:
	        case MySqlParser.TRUNCATE:
	        case MySqlParser.UNINSTALL:
	        case MySqlParser.XA:
	        case MySqlParser.EXECUTE:
	        case MySqlParser.SHUTDOWN:
	        case MySqlParser.MINUSMINUS:
	        case MySqlParser.LR_BRACKET:
	        case MySqlParser.SEMI:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 5349;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,771,this._ctx);
	        if(la_===1) {
	            this.state = 5340;
	            this.match(MySqlParser.SET);
	            this.state = 5341;
	            this.signalConditionInformation();
	            this.state = 5346;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 5342;
	                this.match(MySqlParser.COMMA);
	                this.state = 5343;
	                this.signalConditionInformation();
	                this.state = 5348;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signalConditionInformation() {
	    let localctx = new SignalConditionInformationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 488, MySqlParser.RULE_signalConditionInformation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5351;
	        _la = this._input.LA(1);
	        if(!(((((_la - 297)) & ~0x1f) == 0 && ((1 << (_la - 297)) & ((1 << (MySqlParser.CLASS_ORIGIN - 297)) | (1 << (MySqlParser.COLUMN_NAME - 297)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 297)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 297)) | (1 << (MySqlParser.CONSTRAINT_NAME - 297)) | (1 << (MySqlParser.CURSOR_NAME - 297)))) !== 0) || _la===MySqlParser.MESSAGE_TEXT || _la===MySqlParser.MYSQL_ERRNO || _la===MySqlParser.SUBCLASS_ORIGIN || _la===MySqlParser.TABLE_NAME || _la===MySqlParser.CATALOG_NAME || _la===MySqlParser.SCHEMA_NAME)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5352;
	        this.match(MySqlParser.EQUAL_SYMBOL);
	        this.state = 5355;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.START_NATIONAL_STRING_LITERAL:
	        case MySqlParser.STRING_LITERAL:
	        case MySqlParser.STRING_CHARSET_NAME:
	            this.state = 5353;
	            this.stringLiteral();
	            break;
	        case MySqlParser.DECIMAL_LITERAL:
	            this.state = 5354;
	            this.match(MySqlParser.DECIMAL_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	diagnosticsStatement() {
	    let localctx = new DiagnosticsStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 490, MySqlParser.RULE_diagnosticsStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5357;
	        this.match(MySqlParser.GET);
	        this.state = 5359;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.CURRENT || _la===MySqlParser.STACKED) {
	            this.state = 5358;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.CURRENT || _la===MySqlParser.STACKED)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 5361;
	        this.match(MySqlParser.DIAGNOSTICS);
	        this.state = 5393;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.CURRENT:
	        case MySqlParser.DATABASE:
	        case MySqlParser.DIAGNOSTICS:
	        case MySqlParser.LEFT:
	        case MySqlParser.NUMBER:
	        case MySqlParser.RIGHT:
	        case MySqlParser.STACKED:
	        case MySqlParser.DATE:
	        case MySqlParser.TIME:
	        case MySqlParser.TIMESTAMP:
	        case MySqlParser.DATETIME:
	        case MySqlParser.YEAR:
	        case MySqlParser.TEXT:
	        case MySqlParser.ENUM:
	        case MySqlParser.SERIAL:
	        case MySqlParser.JSON_VALID:
	        case MySqlParser.JSON_SCHEMA_VALID:
	        case MySqlParser.AVG:
	        case MySqlParser.BIT_AND:
	        case MySqlParser.BIT_OR:
	        case MySqlParser.BIT_XOR:
	        case MySqlParser.COUNT:
	        case MySqlParser.GROUP_CONCAT:
	        case MySqlParser.MAX:
	        case MySqlParser.MIN:
	        case MySqlParser.STD:
	        case MySqlParser.STDDEV:
	        case MySqlParser.STDDEV_POP:
	        case MySqlParser.STDDEV_SAMP:
	        case MySqlParser.SUM:
	        case MySqlParser.VAR_POP:
	        case MySqlParser.VAR_SAMP:
	        case MySqlParser.VARIANCE:
	        case MySqlParser.POSITION:
	        case MySqlParser.ACCOUNT:
	        case MySqlParser.ACTION:
	        case MySqlParser.AFTER:
	        case MySqlParser.AGGREGATE:
	        case MySqlParser.ALGORITHM:
	        case MySqlParser.ANY:
	        case MySqlParser.AT:
	        case MySqlParser.AUTHORS:
	        case MySqlParser.AUTOCOMMIT:
	        case MySqlParser.AUTOEXTEND_SIZE:
	        case MySqlParser.AUTO_INCREMENT:
	        case MySqlParser.AVG_ROW_LENGTH:
	        case MySqlParser.BEGIN:
	        case MySqlParser.BINLOG:
	        case MySqlParser.BIT:
	        case MySqlParser.BLOCK:
	        case MySqlParser.BOOL:
	        case MySqlParser.BOOLEAN:
	        case MySqlParser.BTREE:
	        case MySqlParser.CACHE:
	        case MySqlParser.CASCADED:
	        case MySqlParser.CHAIN:
	        case MySqlParser.CHANGED:
	        case MySqlParser.CHANNEL:
	        case MySqlParser.CHECKSUM:
	        case MySqlParser.PAGE_CHECKSUM:
	        case MySqlParser.CIPHER:
	        case MySqlParser.CLASS_ORIGIN:
	        case MySqlParser.CLIENT:
	        case MySqlParser.CLOSE:
	        case MySqlParser.COALESCE:
	        case MySqlParser.CODE:
	        case MySqlParser.COLUMNS:
	        case MySqlParser.COLUMN_FORMAT:
	        case MySqlParser.COLUMN_NAME:
	        case MySqlParser.COMMENT:
	        case MySqlParser.COMMIT:
	        case MySqlParser.COMPACT:
	        case MySqlParser.COMPLETION:
	        case MySqlParser.COMPRESSED:
	        case MySqlParser.COMPRESSION:
	        case MySqlParser.CONCURRENT:
	        case MySqlParser.CONNECTION:
	        case MySqlParser.CONSISTENT:
	        case MySqlParser.CONSTRAINT_CATALOG:
	        case MySqlParser.CONSTRAINT_SCHEMA:
	        case MySqlParser.CONSTRAINT_NAME:
	        case MySqlParser.CONTAINS:
	        case MySqlParser.CONTEXT:
	        case MySqlParser.CONTRIBUTORS:
	        case MySqlParser.COPY:
	        case MySqlParser.CPU:
	        case MySqlParser.CURSOR_NAME:
	        case MySqlParser.DATA:
	        case MySqlParser.DATAFILE:
	        case MySqlParser.DEALLOCATE:
	        case MySqlParser.DEFAULT_AUTH:
	        case MySqlParser.DEFINER:
	        case MySqlParser.DELAY_KEY_WRITE:
	        case MySqlParser.DES_KEY_FILE:
	        case MySqlParser.DIRECTORY:
	        case MySqlParser.DISABLE:
	        case MySqlParser.DISCARD:
	        case MySqlParser.DISK:
	        case MySqlParser.DO:
	        case MySqlParser.DUMPFILE:
	        case MySqlParser.DUPLICATE:
	        case MySqlParser.DYNAMIC:
	        case MySqlParser.ENABLE:
	        case MySqlParser.ENCRYPTION:
	        case MySqlParser.END:
	        case MySqlParser.ENDS:
	        case MySqlParser.ENGINE:
	        case MySqlParser.ENGINES:
	        case MySqlParser.ERROR:
	        case MySqlParser.ERRORS:
	        case MySqlParser.ESCAPE:
	        case MySqlParser.EVEN:
	        case MySqlParser.EVENT:
	        case MySqlParser.EVENTS:
	        case MySqlParser.EVERY:
	        case MySqlParser.EXCHANGE:
	        case MySqlParser.EXCLUSIVE:
	        case MySqlParser.EXPIRE:
	        case MySqlParser.EXPORT:
	        case MySqlParser.EXTENDED:
	        case MySqlParser.EXTENT_SIZE:
	        case MySqlParser.FAST:
	        case MySqlParser.FAULTS:
	        case MySqlParser.FIELDS:
	        case MySqlParser.FILE_BLOCK_SIZE:
	        case MySqlParser.FILTER:
	        case MySqlParser.FIRST:
	        case MySqlParser.FIXED:
	        case MySqlParser.FLUSH:
	        case MySqlParser.FOLLOWS:
	        case MySqlParser.FOUND:
	        case MySqlParser.FULL:
	        case MySqlParser.FUNCTION:
	        case MySqlParser.GENERAL:
	        case MySqlParser.GLOBAL:
	        case MySqlParser.GRANTS:
	        case MySqlParser.GROUP_REPLICATION:
	        case MySqlParser.HANDLER:
	        case MySqlParser.HASH:
	        case MySqlParser.HELP:
	        case MySqlParser.HOST:
	        case MySqlParser.HOSTS:
	        case MySqlParser.IDENTIFIED:
	        case MySqlParser.IGNORE_SERVER_IDS:
	        case MySqlParser.IMPORT:
	        case MySqlParser.INDEXES:
	        case MySqlParser.INITIAL_SIZE:
	        case MySqlParser.INPLACE:
	        case MySqlParser.INSERT_METHOD:
	        case MySqlParser.INSTALL:
	        case MySqlParser.INSTANCE:
	        case MySqlParser.INVISIBLE:
	        case MySqlParser.INVOKER:
	        case MySqlParser.IO:
	        case MySqlParser.IO_THREAD:
	        case MySqlParser.IPC:
	        case MySqlParser.ISOLATION:
	        case MySqlParser.ISSUER:
	        case MySqlParser.JSON:
	        case MySqlParser.KEY_BLOCK_SIZE:
	        case MySqlParser.LANGUAGE:
	        case MySqlParser.LAST:
	        case MySqlParser.LEAVES:
	        case MySqlParser.LESS:
	        case MySqlParser.LEVEL:
	        case MySqlParser.LIST:
	        case MySqlParser.LOCAL:
	        case MySqlParser.LOGFILE:
	        case MySqlParser.LOGS:
	        case MySqlParser.MASTER:
	        case MySqlParser.MASTER_AUTO_POSITION:
	        case MySqlParser.MASTER_CONNECT_RETRY:
	        case MySqlParser.MASTER_DELAY:
	        case MySqlParser.MASTER_HEARTBEAT_PERIOD:
	        case MySqlParser.MASTER_HOST:
	        case MySqlParser.MASTER_LOG_FILE:
	        case MySqlParser.MASTER_LOG_POS:
	        case MySqlParser.MASTER_PASSWORD:
	        case MySqlParser.MASTER_PORT:
	        case MySqlParser.MASTER_RETRY_COUNT:
	        case MySqlParser.MASTER_SSL:
	        case MySqlParser.MASTER_SSL_CA:
	        case MySqlParser.MASTER_SSL_CAPATH:
	        case MySqlParser.MASTER_SSL_CERT:
	        case MySqlParser.MASTER_SSL_CIPHER:
	        case MySqlParser.MASTER_SSL_CRL:
	        case MySqlParser.MASTER_SSL_CRLPATH:
	        case MySqlParser.MASTER_SSL_KEY:
	        case MySqlParser.MASTER_TLS_VERSION:
	        case MySqlParser.MASTER_USER:
	        case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
	        case MySqlParser.MAX_QUERIES_PER_HOUR:
	        case MySqlParser.MAX_ROWS:
	        case MySqlParser.MAX_SIZE:
	        case MySqlParser.MAX_UPDATES_PER_HOUR:
	        case MySqlParser.MAX_USER_CONNECTIONS:
	        case MySqlParser.MEDIUM:
	        case MySqlParser.MEMBER:
	        case MySqlParser.MERGE:
	        case MySqlParser.MESSAGE_TEXT:
	        case MySqlParser.MID:
	        case MySqlParser.MIGRATE:
	        case MySqlParser.MIN_ROWS:
	        case MySqlParser.MODE:
	        case MySqlParser.MODIFY:
	        case MySqlParser.MUTEX:
	        case MySqlParser.MYSQL:
	        case MySqlParser.MYSQL_ERRNO:
	        case MySqlParser.NAME:
	        case MySqlParser.NAMES:
	        case MySqlParser.NCHAR:
	        case MySqlParser.NEVER:
	        case MySqlParser.NEXT:
	        case MySqlParser.NO:
	        case MySqlParser.NODEGROUP:
	        case MySqlParser.NONE:
	        case MySqlParser.OFFLINE:
	        case MySqlParser.OFFSET:
	        case MySqlParser.OF:
	        case MySqlParser.OJ:
	        case MySqlParser.OLD_PASSWORD:
	        case MySqlParser.ONE:
	        case MySqlParser.ONLINE:
	        case MySqlParser.ONLY:
	        case MySqlParser.OPEN:
	        case MySqlParser.OPTIMIZER_COSTS:
	        case MySqlParser.OPTIONS:
	        case MySqlParser.OWNER:
	        case MySqlParser.PACK_KEYS:
	        case MySqlParser.PAGE:
	        case MySqlParser.PARSER:
	        case MySqlParser.PARTIAL:
	        case MySqlParser.PARTITIONING:
	        case MySqlParser.PARTITIONS:
	        case MySqlParser.PASSWORD:
	        case MySqlParser.PHASE:
	        case MySqlParser.PLUGIN:
	        case MySqlParser.PLUGIN_DIR:
	        case MySqlParser.PLUGINS:
	        case MySqlParser.PORT:
	        case MySqlParser.PRECEDES:
	        case MySqlParser.PREPARE:
	        case MySqlParser.PRESERVE:
	        case MySqlParser.PREV:
	        case MySqlParser.PROCESSLIST:
	        case MySqlParser.PROFILE:
	        case MySqlParser.PROFILES:
	        case MySqlParser.PROXY:
	        case MySqlParser.QUERY:
	        case MySqlParser.QUICK:
	        case MySqlParser.REBUILD:
	        case MySqlParser.RECOVER:
	        case MySqlParser.REDO_BUFFER_SIZE:
	        case MySqlParser.REDUNDANT:
	        case MySqlParser.RELAY:
	        case MySqlParser.RELAY_LOG_FILE:
	        case MySqlParser.RELAY_LOG_POS:
	        case MySqlParser.RELAYLOG:
	        case MySqlParser.REMOVE:
	        case MySqlParser.REORGANIZE:
	        case MySqlParser.REPAIR:
	        case MySqlParser.REPLICATE_DO_DB:
	        case MySqlParser.REPLICATE_DO_TABLE:
	        case MySqlParser.REPLICATE_IGNORE_DB:
	        case MySqlParser.REPLICATE_IGNORE_TABLE:
	        case MySqlParser.REPLICATE_REWRITE_DB:
	        case MySqlParser.REPLICATE_WILD_DO_TABLE:
	        case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
	        case MySqlParser.REPLICATION:
	        case MySqlParser.RESET:
	        case MySqlParser.RESUME:
	        case MySqlParser.RETURNED_SQLSTATE:
	        case MySqlParser.RETURNS:
	        case MySqlParser.ROLE:
	        case MySqlParser.ROLLBACK:
	        case MySqlParser.ROLLUP:
	        case MySqlParser.ROTATE:
	        case MySqlParser.ROW:
	        case MySqlParser.ROWS:
	        case MySqlParser.ROW_FORMAT:
	        case MySqlParser.SAVEPOINT:
	        case MySqlParser.SCHEDULE:
	        case MySqlParser.SECURITY:
	        case MySqlParser.SERVER:
	        case MySqlParser.SESSION:
	        case MySqlParser.SHARE:
	        case MySqlParser.SHARED:
	        case MySqlParser.SIGNED:
	        case MySqlParser.SIMPLE:
	        case MySqlParser.SLAVE:
	        case MySqlParser.SLOW:
	        case MySqlParser.SNAPSHOT:
	        case MySqlParser.SOCKET:
	        case MySqlParser.SOME:
	        case MySqlParser.SONAME:
	        case MySqlParser.SOUNDS:
	        case MySqlParser.SOURCE:
	        case MySqlParser.SQL_AFTER_GTIDS:
	        case MySqlParser.SQL_AFTER_MTS_GAPS:
	        case MySqlParser.SQL_BEFORE_GTIDS:
	        case MySqlParser.SQL_BUFFER_RESULT:
	        case MySqlParser.SQL_CACHE:
	        case MySqlParser.SQL_NO_CACHE:
	        case MySqlParser.SQL_THREAD:
	        case MySqlParser.START:
	        case MySqlParser.STARTS:
	        case MySqlParser.STATS_AUTO_RECALC:
	        case MySqlParser.STATS_PERSISTENT:
	        case MySqlParser.STATS_SAMPLE_PAGES:
	        case MySqlParser.STATUS:
	        case MySqlParser.STOP:
	        case MySqlParser.STORAGE:
	        case MySqlParser.STRING:
	        case MySqlParser.SUBCLASS_ORIGIN:
	        case MySqlParser.SUBJECT:
	        case MySqlParser.SUBPARTITION:
	        case MySqlParser.SUBPARTITIONS:
	        case MySqlParser.SUSPEND:
	        case MySqlParser.SWAPS:
	        case MySqlParser.SWITCHES:
	        case MySqlParser.TABLE_NAME:
	        case MySqlParser.TABLESPACE:
	        case MySqlParser.TEMPORARY:
	        case MySqlParser.TEMPTABLE:
	        case MySqlParser.THAN:
	        case MySqlParser.TRADITIONAL:
	        case MySqlParser.TRANSACTION:
	        case MySqlParser.TRANSACTIONAL:
	        case MySqlParser.TRIGGERS:
	        case MySqlParser.TRUNCATE:
	        case MySqlParser.UNDEFINED:
	        case MySqlParser.UNDOFILE:
	        case MySqlParser.UNDO_BUFFER_SIZE:
	        case MySqlParser.UNINSTALL:
	        case MySqlParser.UNKNOWN:
	        case MySqlParser.UNTIL:
	        case MySqlParser.UPGRADE:
	        case MySqlParser.USER:
	        case MySqlParser.USE_FRM:
	        case MySqlParser.USER_RESOURCES:
	        case MySqlParser.VALIDATION:
	        case MySqlParser.VALUE:
	        case MySqlParser.VARIABLES:
	        case MySqlParser.VIEW:
	        case MySqlParser.VISIBLE:
	        case MySqlParser.WAIT:
	        case MySqlParser.WARNINGS:
	        case MySqlParser.WITHOUT:
	        case MySqlParser.WORK:
	        case MySqlParser.WRAPPER:
	        case MySqlParser.X509:
	        case MySqlParser.XA:
	        case MySqlParser.XML:
	        case MySqlParser.INTERNAL:
	        case MySqlParser.QUARTER:
	        case MySqlParser.MONTH:
	        case MySqlParser.DAY:
	        case MySqlParser.HOUR:
	        case MySqlParser.MINUTE:
	        case MySqlParser.WEEK:
	        case MySqlParser.SECOND:
	        case MySqlParser.MICROSECOND:
	        case MySqlParser.TABLES:
	        case MySqlParser.ROUTINE:
	        case MySqlParser.EXECUTE:
	        case MySqlParser.FILE:
	        case MySqlParser.PROCESS:
	        case MySqlParser.RELOAD:
	        case MySqlParser.SHUTDOWN:
	        case MySqlParser.SUPER:
	        case MySqlParser.PRIVILEGES:
	        case MySqlParser.AUDIT_ADMIN:
	        case MySqlParser.BACKUP_ADMIN:
	        case MySqlParser.BINLOG_ADMIN:
	        case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
	        case MySqlParser.CLONE_ADMIN:
	        case MySqlParser.CONNECTION_ADMIN:
	        case MySqlParser.ENCRYPTION_KEY_ADMIN:
	        case MySqlParser.FIREWALL_ADMIN:
	        case MySqlParser.FIREWALL_USER:
	        case MySqlParser.GROUP_REPLICATION_ADMIN:
	        case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
	        case MySqlParser.NDB_STORED_USER:
	        case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
	        case MySqlParser.REPLICATION_APPLIER:
	        case MySqlParser.REPLICATION_SLAVE_ADMIN:
	        case MySqlParser.RESOURCE_GROUP_ADMIN:
	        case MySqlParser.RESOURCE_GROUP_USER:
	        case MySqlParser.ROLE_ADMIN:
	        case MySqlParser.SESSION_VARIABLES_ADMIN:
	        case MySqlParser.SET_USER_ID:
	        case MySqlParser.SHOW_ROUTINE:
	        case MySqlParser.SYSTEM_VARIABLES_ADMIN:
	        case MySqlParser.TABLE_ENCRYPTION_ADMIN:
	        case MySqlParser.VERSION_TOKEN_ADMIN:
	        case MySqlParser.XA_RECOVER_ADMIN:
	        case MySqlParser.ARMSCII8:
	        case MySqlParser.ASCII:
	        case MySqlParser.BIG5:
	        case MySqlParser.CP1250:
	        case MySqlParser.CP1251:
	        case MySqlParser.CP1256:
	        case MySqlParser.CP1257:
	        case MySqlParser.CP850:
	        case MySqlParser.CP852:
	        case MySqlParser.CP866:
	        case MySqlParser.CP932:
	        case MySqlParser.DEC8:
	        case MySqlParser.EUCJPMS:
	        case MySqlParser.EUCKR:
	        case MySqlParser.GB2312:
	        case MySqlParser.GBK:
	        case MySqlParser.GEOSTD8:
	        case MySqlParser.GREEK:
	        case MySqlParser.HEBREW:
	        case MySqlParser.HP8:
	        case MySqlParser.KEYBCS2:
	        case MySqlParser.KOI8R:
	        case MySqlParser.KOI8U:
	        case MySqlParser.LATIN1:
	        case MySqlParser.LATIN2:
	        case MySqlParser.LATIN5:
	        case MySqlParser.LATIN7:
	        case MySqlParser.MACCE:
	        case MySqlParser.MACROMAN:
	        case MySqlParser.SJIS:
	        case MySqlParser.SWE7:
	        case MySqlParser.TIS620:
	        case MySqlParser.UCS2:
	        case MySqlParser.UJIS:
	        case MySqlParser.UTF16:
	        case MySqlParser.UTF16LE:
	        case MySqlParser.UTF32:
	        case MySqlParser.UTF8:
	        case MySqlParser.UTF8MB3:
	        case MySqlParser.UTF8MB4:
	        case MySqlParser.ARCHIVE:
	        case MySqlParser.BLACKHOLE:
	        case MySqlParser.CSV:
	        case MySqlParser.FEDERATED:
	        case MySqlParser.INNODB:
	        case MySqlParser.MEMORY:
	        case MySqlParser.MRG_MYISAM:
	        case MySqlParser.MYISAM:
	        case MySqlParser.NDB:
	        case MySqlParser.NDBCLUSTER:
	        case MySqlParser.PERFORMANCE_SCHEMA:
	        case MySqlParser.TOKUDB:
	        case MySqlParser.REPEATABLE:
	        case MySqlParser.COMMITTED:
	        case MySqlParser.UNCOMMITTED:
	        case MySqlParser.SERIALIZABLE:
	        case MySqlParser.GEOMETRYCOLLECTION:
	        case MySqlParser.LINESTRING:
	        case MySqlParser.MULTILINESTRING:
	        case MySqlParser.MULTIPOINT:
	        case MySqlParser.MULTIPOLYGON:
	        case MySqlParser.POINT:
	        case MySqlParser.POLYGON:
	        case MySqlParser.ABS:
	        case MySqlParser.ACOS:
	        case MySqlParser.ADDDATE:
	        case MySqlParser.ADDTIME:
	        case MySqlParser.AES_DECRYPT:
	        case MySqlParser.AES_ENCRYPT:
	        case MySqlParser.AREA:
	        case MySqlParser.ASBINARY:
	        case MySqlParser.ASIN:
	        case MySqlParser.ASTEXT:
	        case MySqlParser.ASWKB:
	        case MySqlParser.ASWKT:
	        case MySqlParser.ASYMMETRIC_DECRYPT:
	        case MySqlParser.ASYMMETRIC_DERIVE:
	        case MySqlParser.ASYMMETRIC_ENCRYPT:
	        case MySqlParser.ASYMMETRIC_SIGN:
	        case MySqlParser.ASYMMETRIC_VERIFY:
	        case MySqlParser.ATAN:
	        case MySqlParser.ATAN2:
	        case MySqlParser.BENCHMARK:
	        case MySqlParser.BIN:
	        case MySqlParser.BIT_COUNT:
	        case MySqlParser.BIT_LENGTH:
	        case MySqlParser.BUFFER:
	        case MySqlParser.CATALOG_NAME:
	        case MySqlParser.CEIL:
	        case MySqlParser.CEILING:
	        case MySqlParser.CENTROID:
	        case MySqlParser.CHARACTER_LENGTH:
	        case MySqlParser.CHARSET:
	        case MySqlParser.CHAR_LENGTH:
	        case MySqlParser.COERCIBILITY:
	        case MySqlParser.COLLATION:
	        case MySqlParser.COMPRESS:
	        case MySqlParser.CONCAT:
	        case MySqlParser.CONCAT_WS:
	        case MySqlParser.CONNECTION_ID:
	        case MySqlParser.CONV:
	        case MySqlParser.CONVERT_TZ:
	        case MySqlParser.COS:
	        case MySqlParser.COT:
	        case MySqlParser.CRC32:
	        case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
	        case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
	        case MySqlParser.CREATE_DH_PARAMETERS:
	        case MySqlParser.CREATE_DIGEST:
	        case MySqlParser.CROSSES:
	        case MySqlParser.DATEDIFF:
	        case MySqlParser.DATE_FORMAT:
	        case MySqlParser.DAYNAME:
	        case MySqlParser.DAYOFMONTH:
	        case MySqlParser.DAYOFWEEK:
	        case MySqlParser.DAYOFYEAR:
	        case MySqlParser.DECODE:
	        case MySqlParser.DEGREES:
	        case MySqlParser.DES_DECRYPT:
	        case MySqlParser.DES_ENCRYPT:
	        case MySqlParser.DIMENSION:
	        case MySqlParser.DISJOINT:
	        case MySqlParser.ELT:
	        case MySqlParser.ENCODE:
	        case MySqlParser.ENCRYPT:
	        case MySqlParser.ENDPOINT:
	        case MySqlParser.ENVELOPE:
	        case MySqlParser.EQUALS:
	        case MySqlParser.EXP:
	        case MySqlParser.EXPORT_SET:
	        case MySqlParser.EXTERIORRING:
	        case MySqlParser.EXTRACTVALUE:
	        case MySqlParser.FIELD:
	        case MySqlParser.FIND_IN_SET:
	        case MySqlParser.FLOOR:
	        case MySqlParser.FORMAT:
	        case MySqlParser.FOUND_ROWS:
	        case MySqlParser.FROM_BASE64:
	        case MySqlParser.FROM_DAYS:
	        case MySqlParser.FROM_UNIXTIME:
	        case MySqlParser.GEOMCOLLFROMTEXT:
	        case MySqlParser.GEOMCOLLFROMWKB:
	        case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
	        case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
	        case MySqlParser.GEOMETRYFROMTEXT:
	        case MySqlParser.GEOMETRYFROMWKB:
	        case MySqlParser.GEOMETRYN:
	        case MySqlParser.GEOMETRYTYPE:
	        case MySqlParser.GEOMFROMTEXT:
	        case MySqlParser.GEOMFROMWKB:
	        case MySqlParser.GET_FORMAT:
	        case MySqlParser.GET_LOCK:
	        case MySqlParser.GLENGTH:
	        case MySqlParser.GREATEST:
	        case MySqlParser.GTID_SUBSET:
	        case MySqlParser.GTID_SUBTRACT:
	        case MySqlParser.HEX:
	        case MySqlParser.IFNULL:
	        case MySqlParser.INET6_ATON:
	        case MySqlParser.INET6_NTOA:
	        case MySqlParser.INET_ATON:
	        case MySqlParser.INET_NTOA:
	        case MySqlParser.INSTR:
	        case MySqlParser.INTERIORRINGN:
	        case MySqlParser.INTERSECTS:
	        case MySqlParser.ISCLOSED:
	        case MySqlParser.ISEMPTY:
	        case MySqlParser.ISNULL:
	        case MySqlParser.ISSIMPLE:
	        case MySqlParser.IS_FREE_LOCK:
	        case MySqlParser.IS_IPV4:
	        case MySqlParser.IS_IPV4_COMPAT:
	        case MySqlParser.IS_IPV4_MAPPED:
	        case MySqlParser.IS_IPV6:
	        case MySqlParser.IS_USED_LOCK:
	        case MySqlParser.LAST_INSERT_ID:
	        case MySqlParser.LCASE:
	        case MySqlParser.LEAST:
	        case MySqlParser.LENGTH:
	        case MySqlParser.LINEFROMTEXT:
	        case MySqlParser.LINEFROMWKB:
	        case MySqlParser.LINESTRINGFROMTEXT:
	        case MySqlParser.LINESTRINGFROMWKB:
	        case MySqlParser.LN:
	        case MySqlParser.LOAD_FILE:
	        case MySqlParser.LOCATE:
	        case MySqlParser.LOG:
	        case MySqlParser.LOG10:
	        case MySqlParser.LOG2:
	        case MySqlParser.LOWER:
	        case MySqlParser.LPAD:
	        case MySqlParser.LTRIM:
	        case MySqlParser.MAKEDATE:
	        case MySqlParser.MAKETIME:
	        case MySqlParser.MAKE_SET:
	        case MySqlParser.MASTER_POS_WAIT:
	        case MySqlParser.MBRCONTAINS:
	        case MySqlParser.MBRDISJOINT:
	        case MySqlParser.MBREQUAL:
	        case MySqlParser.MBRINTERSECTS:
	        case MySqlParser.MBROVERLAPS:
	        case MySqlParser.MBRTOUCHES:
	        case MySqlParser.MBRWITHIN:
	        case MySqlParser.MD5:
	        case MySqlParser.MLINEFROMTEXT:
	        case MySqlParser.MLINEFROMWKB:
	        case MySqlParser.MONTHNAME:
	        case MySqlParser.MPOINTFROMTEXT:
	        case MySqlParser.MPOINTFROMWKB:
	        case MySqlParser.MPOLYFROMTEXT:
	        case MySqlParser.MPOLYFROMWKB:
	        case MySqlParser.MULTILINESTRINGFROMTEXT:
	        case MySqlParser.MULTILINESTRINGFROMWKB:
	        case MySqlParser.MULTIPOINTFROMTEXT:
	        case MySqlParser.MULTIPOINTFROMWKB:
	        case MySqlParser.MULTIPOLYGONFROMTEXT:
	        case MySqlParser.MULTIPOLYGONFROMWKB:
	        case MySqlParser.NAME_CONST:
	        case MySqlParser.NULLIF:
	        case MySqlParser.NUMGEOMETRIES:
	        case MySqlParser.NUMINTERIORRINGS:
	        case MySqlParser.NUMPOINTS:
	        case MySqlParser.OCT:
	        case MySqlParser.OCTET_LENGTH:
	        case MySqlParser.ORD:
	        case MySqlParser.OVERLAPS:
	        case MySqlParser.PERIOD_ADD:
	        case MySqlParser.PERIOD_DIFF:
	        case MySqlParser.PI:
	        case MySqlParser.POINTFROMTEXT:
	        case MySqlParser.POINTFROMWKB:
	        case MySqlParser.POINTN:
	        case MySqlParser.POLYFROMTEXT:
	        case MySqlParser.POLYFROMWKB:
	        case MySqlParser.POLYGONFROMTEXT:
	        case MySqlParser.POLYGONFROMWKB:
	        case MySqlParser.POW:
	        case MySqlParser.POWER:
	        case MySqlParser.QUOTE:
	        case MySqlParser.RADIANS:
	        case MySqlParser.RAND:
	        case MySqlParser.RANDOM_BYTES:
	        case MySqlParser.RELEASE_LOCK:
	        case MySqlParser.REVERSE:
	        case MySqlParser.ROUND:
	        case MySqlParser.ROW_COUNT:
	        case MySqlParser.RPAD:
	        case MySqlParser.RTRIM:
	        case MySqlParser.SEC_TO_TIME:
	        case MySqlParser.SESSION_USER:
	        case MySqlParser.SHA:
	        case MySqlParser.SHA1:
	        case MySqlParser.SHA2:
	        case MySqlParser.SCHEMA_NAME:
	        case MySqlParser.SIGN:
	        case MySqlParser.SIN:
	        case MySqlParser.SLEEP:
	        case MySqlParser.SOUNDEX:
	        case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
	        case MySqlParser.SQRT:
	        case MySqlParser.SRID:
	        case MySqlParser.STARTPOINT:
	        case MySqlParser.STRCMP:
	        case MySqlParser.STR_TO_DATE:
	        case MySqlParser.ST_AREA:
	        case MySqlParser.ST_ASBINARY:
	        case MySqlParser.ST_ASTEXT:
	        case MySqlParser.ST_ASWKB:
	        case MySqlParser.ST_ASWKT:
	        case MySqlParser.ST_BUFFER:
	        case MySqlParser.ST_CENTROID:
	        case MySqlParser.ST_CONTAINS:
	        case MySqlParser.ST_CROSSES:
	        case MySqlParser.ST_DIFFERENCE:
	        case MySqlParser.ST_DIMENSION:
	        case MySqlParser.ST_DISJOINT:
	        case MySqlParser.ST_DISTANCE:
	        case MySqlParser.ST_ENDPOINT:
	        case MySqlParser.ST_ENVELOPE:
	        case MySqlParser.ST_EQUALS:
	        case MySqlParser.ST_EXTERIORRING:
	        case MySqlParser.ST_GEOMCOLLFROMTEXT:
	        case MySqlParser.ST_GEOMCOLLFROMTXT:
	        case MySqlParser.ST_GEOMCOLLFROMWKB:
	        case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
	        case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
	        case MySqlParser.ST_GEOMETRYFROMTEXT:
	        case MySqlParser.ST_GEOMETRYFROMWKB:
	        case MySqlParser.ST_GEOMETRYN:
	        case MySqlParser.ST_GEOMETRYTYPE:
	        case MySqlParser.ST_GEOMFROMTEXT:
	        case MySqlParser.ST_GEOMFROMWKB:
	        case MySqlParser.ST_INTERIORRINGN:
	        case MySqlParser.ST_INTERSECTION:
	        case MySqlParser.ST_INTERSECTS:
	        case MySqlParser.ST_ISCLOSED:
	        case MySqlParser.ST_ISEMPTY:
	        case MySqlParser.ST_ISSIMPLE:
	        case MySqlParser.ST_LINEFROMTEXT:
	        case MySqlParser.ST_LINEFROMWKB:
	        case MySqlParser.ST_LINESTRINGFROMTEXT:
	        case MySqlParser.ST_LINESTRINGFROMWKB:
	        case MySqlParser.ST_NUMGEOMETRIES:
	        case MySqlParser.ST_NUMINTERIORRING:
	        case MySqlParser.ST_NUMINTERIORRINGS:
	        case MySqlParser.ST_NUMPOINTS:
	        case MySqlParser.ST_OVERLAPS:
	        case MySqlParser.ST_POINTFROMTEXT:
	        case MySqlParser.ST_POINTFROMWKB:
	        case MySqlParser.ST_POINTN:
	        case MySqlParser.ST_POLYFROMTEXT:
	        case MySqlParser.ST_POLYFROMWKB:
	        case MySqlParser.ST_POLYGONFROMTEXT:
	        case MySqlParser.ST_POLYGONFROMWKB:
	        case MySqlParser.ST_SRID:
	        case MySqlParser.ST_STARTPOINT:
	        case MySqlParser.ST_SYMDIFFERENCE:
	        case MySqlParser.ST_TOUCHES:
	        case MySqlParser.ST_UNION:
	        case MySqlParser.ST_WITHIN:
	        case MySqlParser.ST_X:
	        case MySqlParser.ST_Y:
	        case MySqlParser.SUBDATE:
	        case MySqlParser.SUBSTRING_INDEX:
	        case MySqlParser.SUBTIME:
	        case MySqlParser.SYSTEM_USER:
	        case MySqlParser.TAN:
	        case MySqlParser.TIMEDIFF:
	        case MySqlParser.TIMESTAMPADD:
	        case MySqlParser.TIMESTAMPDIFF:
	        case MySqlParser.TIME_FORMAT:
	        case MySqlParser.TIME_TO_SEC:
	        case MySqlParser.TOUCHES:
	        case MySqlParser.TO_BASE64:
	        case MySqlParser.TO_DAYS:
	        case MySqlParser.TO_SECONDS:
	        case MySqlParser.UCASE:
	        case MySqlParser.UNCOMPRESS:
	        case MySqlParser.UNCOMPRESSED_LENGTH:
	        case MySqlParser.UNHEX:
	        case MySqlParser.UNIX_TIMESTAMP:
	        case MySqlParser.UPDATEXML:
	        case MySqlParser.UPPER:
	        case MySqlParser.UUID:
	        case MySqlParser.UUID_SHORT:
	        case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
	        case MySqlParser.VERSION:
	        case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
	        case MySqlParser.WEEKDAY:
	        case MySqlParser.WEEKOFYEAR:
	        case MySqlParser.WEIGHT_STRING:
	        case MySqlParser.WITHIN:
	        case MySqlParser.YEARWEEK:
	        case MySqlParser.Y_FUNCTION:
	        case MySqlParser.X_FUNCTION:
	        case MySqlParser.AT_SIGN:
	        case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
	        case MySqlParser.STRING_LITERAL:
	        case MySqlParser.ID:
	        case MySqlParser.REVERSE_QUOTE_ID:
	        case MySqlParser.LOCAL_ID:
	        case MySqlParser.GLOBAL_ID:
	            this.state = 5362;
	            this.variableClause();
	            this.state = 5363;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 5364;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.NUMBER || _la===MySqlParser.ROW_COUNT)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5372;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 5365;
	                this.match(MySqlParser.COMMA);
	                this.state = 5366;
	                this.variableClause();
	                this.state = 5367;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	                this.state = 5368;
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.NUMBER || _la===MySqlParser.ROW_COUNT)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 5374;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case MySqlParser.CONDITION:
	            this.state = 5375;
	            this.match(MySqlParser.CONDITION);
	            this.state = 5378;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.ZERO_DECIMAL:
	            case MySqlParser.ONE_DECIMAL:
	            case MySqlParser.TWO_DECIMAL:
	            case MySqlParser.DECIMAL_LITERAL:
	                this.state = 5376;
	                this.decimalLiteral();
	                break;
	            case MySqlParser.CURRENT:
	            case MySqlParser.DATABASE:
	            case MySqlParser.DIAGNOSTICS:
	            case MySqlParser.LEFT:
	            case MySqlParser.NUMBER:
	            case MySqlParser.RIGHT:
	            case MySqlParser.STACKED:
	            case MySqlParser.DATE:
	            case MySqlParser.TIME:
	            case MySqlParser.TIMESTAMP:
	            case MySqlParser.DATETIME:
	            case MySqlParser.YEAR:
	            case MySqlParser.TEXT:
	            case MySqlParser.ENUM:
	            case MySqlParser.SERIAL:
	            case MySqlParser.JSON_VALID:
	            case MySqlParser.JSON_SCHEMA_VALID:
	            case MySqlParser.AVG:
	            case MySqlParser.BIT_AND:
	            case MySqlParser.BIT_OR:
	            case MySqlParser.BIT_XOR:
	            case MySqlParser.COUNT:
	            case MySqlParser.GROUP_CONCAT:
	            case MySqlParser.MAX:
	            case MySqlParser.MIN:
	            case MySqlParser.STD:
	            case MySqlParser.STDDEV:
	            case MySqlParser.STDDEV_POP:
	            case MySqlParser.STDDEV_SAMP:
	            case MySqlParser.SUM:
	            case MySqlParser.VAR_POP:
	            case MySqlParser.VAR_SAMP:
	            case MySqlParser.VARIANCE:
	            case MySqlParser.POSITION:
	            case MySqlParser.ACCOUNT:
	            case MySqlParser.ACTION:
	            case MySqlParser.AFTER:
	            case MySqlParser.AGGREGATE:
	            case MySqlParser.ALGORITHM:
	            case MySqlParser.ANY:
	            case MySqlParser.AT:
	            case MySqlParser.AUTHORS:
	            case MySqlParser.AUTOCOMMIT:
	            case MySqlParser.AUTOEXTEND_SIZE:
	            case MySqlParser.AUTO_INCREMENT:
	            case MySqlParser.AVG_ROW_LENGTH:
	            case MySqlParser.BEGIN:
	            case MySqlParser.BINLOG:
	            case MySqlParser.BIT:
	            case MySqlParser.BLOCK:
	            case MySqlParser.BOOL:
	            case MySqlParser.BOOLEAN:
	            case MySqlParser.BTREE:
	            case MySqlParser.CACHE:
	            case MySqlParser.CASCADED:
	            case MySqlParser.CHAIN:
	            case MySqlParser.CHANGED:
	            case MySqlParser.CHANNEL:
	            case MySqlParser.CHECKSUM:
	            case MySqlParser.PAGE_CHECKSUM:
	            case MySqlParser.CIPHER:
	            case MySqlParser.CLASS_ORIGIN:
	            case MySqlParser.CLIENT:
	            case MySqlParser.CLOSE:
	            case MySqlParser.COALESCE:
	            case MySqlParser.CODE:
	            case MySqlParser.COLUMNS:
	            case MySqlParser.COLUMN_FORMAT:
	            case MySqlParser.COLUMN_NAME:
	            case MySqlParser.COMMENT:
	            case MySqlParser.COMMIT:
	            case MySqlParser.COMPACT:
	            case MySqlParser.COMPLETION:
	            case MySqlParser.COMPRESSED:
	            case MySqlParser.COMPRESSION:
	            case MySqlParser.CONCURRENT:
	            case MySqlParser.CONNECTION:
	            case MySqlParser.CONSISTENT:
	            case MySqlParser.CONSTRAINT_CATALOG:
	            case MySqlParser.CONSTRAINT_SCHEMA:
	            case MySqlParser.CONSTRAINT_NAME:
	            case MySqlParser.CONTAINS:
	            case MySqlParser.CONTEXT:
	            case MySqlParser.CONTRIBUTORS:
	            case MySqlParser.COPY:
	            case MySqlParser.CPU:
	            case MySqlParser.CURSOR_NAME:
	            case MySqlParser.DATA:
	            case MySqlParser.DATAFILE:
	            case MySqlParser.DEALLOCATE:
	            case MySqlParser.DEFAULT_AUTH:
	            case MySqlParser.DEFINER:
	            case MySqlParser.DELAY_KEY_WRITE:
	            case MySqlParser.DES_KEY_FILE:
	            case MySqlParser.DIRECTORY:
	            case MySqlParser.DISABLE:
	            case MySqlParser.DISCARD:
	            case MySqlParser.DISK:
	            case MySqlParser.DO:
	            case MySqlParser.DUMPFILE:
	            case MySqlParser.DUPLICATE:
	            case MySqlParser.DYNAMIC:
	            case MySqlParser.ENABLE:
	            case MySqlParser.ENCRYPTION:
	            case MySqlParser.END:
	            case MySqlParser.ENDS:
	            case MySqlParser.ENGINE:
	            case MySqlParser.ENGINES:
	            case MySqlParser.ERROR:
	            case MySqlParser.ERRORS:
	            case MySqlParser.ESCAPE:
	            case MySqlParser.EVEN:
	            case MySqlParser.EVENT:
	            case MySqlParser.EVENTS:
	            case MySqlParser.EVERY:
	            case MySqlParser.EXCHANGE:
	            case MySqlParser.EXCLUSIVE:
	            case MySqlParser.EXPIRE:
	            case MySqlParser.EXPORT:
	            case MySqlParser.EXTENDED:
	            case MySqlParser.EXTENT_SIZE:
	            case MySqlParser.FAST:
	            case MySqlParser.FAULTS:
	            case MySqlParser.FIELDS:
	            case MySqlParser.FILE_BLOCK_SIZE:
	            case MySqlParser.FILTER:
	            case MySqlParser.FIRST:
	            case MySqlParser.FIXED:
	            case MySqlParser.FLUSH:
	            case MySqlParser.FOLLOWS:
	            case MySqlParser.FOUND:
	            case MySqlParser.FULL:
	            case MySqlParser.FUNCTION:
	            case MySqlParser.GENERAL:
	            case MySqlParser.GLOBAL:
	            case MySqlParser.GRANTS:
	            case MySqlParser.GROUP_REPLICATION:
	            case MySqlParser.HANDLER:
	            case MySqlParser.HASH:
	            case MySqlParser.HELP:
	            case MySqlParser.HOST:
	            case MySqlParser.HOSTS:
	            case MySqlParser.IDENTIFIED:
	            case MySqlParser.IGNORE_SERVER_IDS:
	            case MySqlParser.IMPORT:
	            case MySqlParser.INDEXES:
	            case MySqlParser.INITIAL_SIZE:
	            case MySqlParser.INPLACE:
	            case MySqlParser.INSERT_METHOD:
	            case MySqlParser.INSTALL:
	            case MySqlParser.INSTANCE:
	            case MySqlParser.INVISIBLE:
	            case MySqlParser.INVOKER:
	            case MySqlParser.IO:
	            case MySqlParser.IO_THREAD:
	            case MySqlParser.IPC:
	            case MySqlParser.ISOLATION:
	            case MySqlParser.ISSUER:
	            case MySqlParser.JSON:
	            case MySqlParser.KEY_BLOCK_SIZE:
	            case MySqlParser.LANGUAGE:
	            case MySqlParser.LAST:
	            case MySqlParser.LEAVES:
	            case MySqlParser.LESS:
	            case MySqlParser.LEVEL:
	            case MySqlParser.LIST:
	            case MySqlParser.LOCAL:
	            case MySqlParser.LOGFILE:
	            case MySqlParser.LOGS:
	            case MySqlParser.MASTER:
	            case MySqlParser.MASTER_AUTO_POSITION:
	            case MySqlParser.MASTER_CONNECT_RETRY:
	            case MySqlParser.MASTER_DELAY:
	            case MySqlParser.MASTER_HEARTBEAT_PERIOD:
	            case MySqlParser.MASTER_HOST:
	            case MySqlParser.MASTER_LOG_FILE:
	            case MySqlParser.MASTER_LOG_POS:
	            case MySqlParser.MASTER_PASSWORD:
	            case MySqlParser.MASTER_PORT:
	            case MySqlParser.MASTER_RETRY_COUNT:
	            case MySqlParser.MASTER_SSL:
	            case MySqlParser.MASTER_SSL_CA:
	            case MySqlParser.MASTER_SSL_CAPATH:
	            case MySqlParser.MASTER_SSL_CERT:
	            case MySqlParser.MASTER_SSL_CIPHER:
	            case MySqlParser.MASTER_SSL_CRL:
	            case MySqlParser.MASTER_SSL_CRLPATH:
	            case MySqlParser.MASTER_SSL_KEY:
	            case MySqlParser.MASTER_TLS_VERSION:
	            case MySqlParser.MASTER_USER:
	            case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
	            case MySqlParser.MAX_QUERIES_PER_HOUR:
	            case MySqlParser.MAX_ROWS:
	            case MySqlParser.MAX_SIZE:
	            case MySqlParser.MAX_UPDATES_PER_HOUR:
	            case MySqlParser.MAX_USER_CONNECTIONS:
	            case MySqlParser.MEDIUM:
	            case MySqlParser.MEMBER:
	            case MySqlParser.MERGE:
	            case MySqlParser.MESSAGE_TEXT:
	            case MySqlParser.MID:
	            case MySqlParser.MIGRATE:
	            case MySqlParser.MIN_ROWS:
	            case MySqlParser.MODE:
	            case MySqlParser.MODIFY:
	            case MySqlParser.MUTEX:
	            case MySqlParser.MYSQL:
	            case MySqlParser.MYSQL_ERRNO:
	            case MySqlParser.NAME:
	            case MySqlParser.NAMES:
	            case MySqlParser.NCHAR:
	            case MySqlParser.NEVER:
	            case MySqlParser.NEXT:
	            case MySqlParser.NO:
	            case MySqlParser.NODEGROUP:
	            case MySqlParser.NONE:
	            case MySqlParser.OFFLINE:
	            case MySqlParser.OFFSET:
	            case MySqlParser.OF:
	            case MySqlParser.OJ:
	            case MySqlParser.OLD_PASSWORD:
	            case MySqlParser.ONE:
	            case MySqlParser.ONLINE:
	            case MySqlParser.ONLY:
	            case MySqlParser.OPEN:
	            case MySqlParser.OPTIMIZER_COSTS:
	            case MySqlParser.OPTIONS:
	            case MySqlParser.OWNER:
	            case MySqlParser.PACK_KEYS:
	            case MySqlParser.PAGE:
	            case MySqlParser.PARSER:
	            case MySqlParser.PARTIAL:
	            case MySqlParser.PARTITIONING:
	            case MySqlParser.PARTITIONS:
	            case MySqlParser.PASSWORD:
	            case MySqlParser.PHASE:
	            case MySqlParser.PLUGIN:
	            case MySqlParser.PLUGIN_DIR:
	            case MySqlParser.PLUGINS:
	            case MySqlParser.PORT:
	            case MySqlParser.PRECEDES:
	            case MySqlParser.PREPARE:
	            case MySqlParser.PRESERVE:
	            case MySqlParser.PREV:
	            case MySqlParser.PROCESSLIST:
	            case MySqlParser.PROFILE:
	            case MySqlParser.PROFILES:
	            case MySqlParser.PROXY:
	            case MySqlParser.QUERY:
	            case MySqlParser.QUICK:
	            case MySqlParser.REBUILD:
	            case MySqlParser.RECOVER:
	            case MySqlParser.REDO_BUFFER_SIZE:
	            case MySqlParser.REDUNDANT:
	            case MySqlParser.RELAY:
	            case MySqlParser.RELAY_LOG_FILE:
	            case MySqlParser.RELAY_LOG_POS:
	            case MySqlParser.RELAYLOG:
	            case MySqlParser.REMOVE:
	            case MySqlParser.REORGANIZE:
	            case MySqlParser.REPAIR:
	            case MySqlParser.REPLICATE_DO_DB:
	            case MySqlParser.REPLICATE_DO_TABLE:
	            case MySqlParser.REPLICATE_IGNORE_DB:
	            case MySqlParser.REPLICATE_IGNORE_TABLE:
	            case MySqlParser.REPLICATE_REWRITE_DB:
	            case MySqlParser.REPLICATE_WILD_DO_TABLE:
	            case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
	            case MySqlParser.REPLICATION:
	            case MySqlParser.RESET:
	            case MySqlParser.RESUME:
	            case MySqlParser.RETURNED_SQLSTATE:
	            case MySqlParser.RETURNS:
	            case MySqlParser.ROLE:
	            case MySqlParser.ROLLBACK:
	            case MySqlParser.ROLLUP:
	            case MySqlParser.ROTATE:
	            case MySqlParser.ROW:
	            case MySqlParser.ROWS:
	            case MySqlParser.ROW_FORMAT:
	            case MySqlParser.SAVEPOINT:
	            case MySqlParser.SCHEDULE:
	            case MySqlParser.SECURITY:
	            case MySqlParser.SERVER:
	            case MySqlParser.SESSION:
	            case MySqlParser.SHARE:
	            case MySqlParser.SHARED:
	            case MySqlParser.SIGNED:
	            case MySqlParser.SIMPLE:
	            case MySqlParser.SLAVE:
	            case MySqlParser.SLOW:
	            case MySqlParser.SNAPSHOT:
	            case MySqlParser.SOCKET:
	            case MySqlParser.SOME:
	            case MySqlParser.SONAME:
	            case MySqlParser.SOUNDS:
	            case MySqlParser.SOURCE:
	            case MySqlParser.SQL_AFTER_GTIDS:
	            case MySqlParser.SQL_AFTER_MTS_GAPS:
	            case MySqlParser.SQL_BEFORE_GTIDS:
	            case MySqlParser.SQL_BUFFER_RESULT:
	            case MySqlParser.SQL_CACHE:
	            case MySqlParser.SQL_NO_CACHE:
	            case MySqlParser.SQL_THREAD:
	            case MySqlParser.START:
	            case MySqlParser.STARTS:
	            case MySqlParser.STATS_AUTO_RECALC:
	            case MySqlParser.STATS_PERSISTENT:
	            case MySqlParser.STATS_SAMPLE_PAGES:
	            case MySqlParser.STATUS:
	            case MySqlParser.STOP:
	            case MySqlParser.STORAGE:
	            case MySqlParser.STRING:
	            case MySqlParser.SUBCLASS_ORIGIN:
	            case MySqlParser.SUBJECT:
	            case MySqlParser.SUBPARTITION:
	            case MySqlParser.SUBPARTITIONS:
	            case MySqlParser.SUSPEND:
	            case MySqlParser.SWAPS:
	            case MySqlParser.SWITCHES:
	            case MySqlParser.TABLE_NAME:
	            case MySqlParser.TABLESPACE:
	            case MySqlParser.TEMPORARY:
	            case MySqlParser.TEMPTABLE:
	            case MySqlParser.THAN:
	            case MySqlParser.TRADITIONAL:
	            case MySqlParser.TRANSACTION:
	            case MySqlParser.TRANSACTIONAL:
	            case MySqlParser.TRIGGERS:
	            case MySqlParser.TRUNCATE:
	            case MySqlParser.UNDEFINED:
	            case MySqlParser.UNDOFILE:
	            case MySqlParser.UNDO_BUFFER_SIZE:
	            case MySqlParser.UNINSTALL:
	            case MySqlParser.UNKNOWN:
	            case MySqlParser.UNTIL:
	            case MySqlParser.UPGRADE:
	            case MySqlParser.USER:
	            case MySqlParser.USE_FRM:
	            case MySqlParser.USER_RESOURCES:
	            case MySqlParser.VALIDATION:
	            case MySqlParser.VALUE:
	            case MySqlParser.VARIABLES:
	            case MySqlParser.VIEW:
	            case MySqlParser.VISIBLE:
	            case MySqlParser.WAIT:
	            case MySqlParser.WARNINGS:
	            case MySqlParser.WITHOUT:
	            case MySqlParser.WORK:
	            case MySqlParser.WRAPPER:
	            case MySqlParser.X509:
	            case MySqlParser.XA:
	            case MySqlParser.XML:
	            case MySqlParser.INTERNAL:
	            case MySqlParser.QUARTER:
	            case MySqlParser.MONTH:
	            case MySqlParser.DAY:
	            case MySqlParser.HOUR:
	            case MySqlParser.MINUTE:
	            case MySqlParser.WEEK:
	            case MySqlParser.SECOND:
	            case MySqlParser.MICROSECOND:
	            case MySqlParser.TABLES:
	            case MySqlParser.ROUTINE:
	            case MySqlParser.EXECUTE:
	            case MySqlParser.FILE:
	            case MySqlParser.PROCESS:
	            case MySqlParser.RELOAD:
	            case MySqlParser.SHUTDOWN:
	            case MySqlParser.SUPER:
	            case MySqlParser.PRIVILEGES:
	            case MySqlParser.AUDIT_ADMIN:
	            case MySqlParser.BACKUP_ADMIN:
	            case MySqlParser.BINLOG_ADMIN:
	            case MySqlParser.BINLOG_ENCRYPTION_ADMIN:
	            case MySqlParser.CLONE_ADMIN:
	            case MySqlParser.CONNECTION_ADMIN:
	            case MySqlParser.ENCRYPTION_KEY_ADMIN:
	            case MySqlParser.FIREWALL_ADMIN:
	            case MySqlParser.FIREWALL_USER:
	            case MySqlParser.GROUP_REPLICATION_ADMIN:
	            case MySqlParser.INNODB_REDO_LOG_ARCHIVE:
	            case MySqlParser.NDB_STORED_USER:
	            case MySqlParser.PERSIST_RO_VARIABLES_ADMIN:
	            case MySqlParser.REPLICATION_APPLIER:
	            case MySqlParser.REPLICATION_SLAVE_ADMIN:
	            case MySqlParser.RESOURCE_GROUP_ADMIN:
	            case MySqlParser.RESOURCE_GROUP_USER:
	            case MySqlParser.ROLE_ADMIN:
	            case MySqlParser.SESSION_VARIABLES_ADMIN:
	            case MySqlParser.SET_USER_ID:
	            case MySqlParser.SHOW_ROUTINE:
	            case MySqlParser.SYSTEM_VARIABLES_ADMIN:
	            case MySqlParser.TABLE_ENCRYPTION_ADMIN:
	            case MySqlParser.VERSION_TOKEN_ADMIN:
	            case MySqlParser.XA_RECOVER_ADMIN:
	            case MySqlParser.ARMSCII8:
	            case MySqlParser.ASCII:
	            case MySqlParser.BIG5:
	            case MySqlParser.CP1250:
	            case MySqlParser.CP1251:
	            case MySqlParser.CP1256:
	            case MySqlParser.CP1257:
	            case MySqlParser.CP850:
	            case MySqlParser.CP852:
	            case MySqlParser.CP866:
	            case MySqlParser.CP932:
	            case MySqlParser.DEC8:
	            case MySqlParser.EUCJPMS:
	            case MySqlParser.EUCKR:
	            case MySqlParser.GB2312:
	            case MySqlParser.GBK:
	            case MySqlParser.GEOSTD8:
	            case MySqlParser.GREEK:
	            case MySqlParser.HEBREW:
	            case MySqlParser.HP8:
	            case MySqlParser.KEYBCS2:
	            case MySqlParser.KOI8R:
	            case MySqlParser.KOI8U:
	            case MySqlParser.LATIN1:
	            case MySqlParser.LATIN2:
	            case MySqlParser.LATIN5:
	            case MySqlParser.LATIN7:
	            case MySqlParser.MACCE:
	            case MySqlParser.MACROMAN:
	            case MySqlParser.SJIS:
	            case MySqlParser.SWE7:
	            case MySqlParser.TIS620:
	            case MySqlParser.UCS2:
	            case MySqlParser.UJIS:
	            case MySqlParser.UTF16:
	            case MySqlParser.UTF16LE:
	            case MySqlParser.UTF32:
	            case MySqlParser.UTF8:
	            case MySqlParser.UTF8MB3:
	            case MySqlParser.UTF8MB4:
	            case MySqlParser.ARCHIVE:
	            case MySqlParser.BLACKHOLE:
	            case MySqlParser.CSV:
	            case MySqlParser.FEDERATED:
	            case MySqlParser.INNODB:
	            case MySqlParser.MEMORY:
	            case MySqlParser.MRG_MYISAM:
	            case MySqlParser.MYISAM:
	            case MySqlParser.NDB:
	            case MySqlParser.NDBCLUSTER:
	            case MySqlParser.PERFORMANCE_SCHEMA:
	            case MySqlParser.TOKUDB:
	            case MySqlParser.REPEATABLE:
	            case MySqlParser.COMMITTED:
	            case MySqlParser.UNCOMMITTED:
	            case MySqlParser.SERIALIZABLE:
	            case MySqlParser.GEOMETRYCOLLECTION:
	            case MySqlParser.LINESTRING:
	            case MySqlParser.MULTILINESTRING:
	            case MySqlParser.MULTIPOINT:
	            case MySqlParser.MULTIPOLYGON:
	            case MySqlParser.POINT:
	            case MySqlParser.POLYGON:
	            case MySqlParser.ABS:
	            case MySqlParser.ACOS:
	            case MySqlParser.ADDDATE:
	            case MySqlParser.ADDTIME:
	            case MySqlParser.AES_DECRYPT:
	            case MySqlParser.AES_ENCRYPT:
	            case MySqlParser.AREA:
	            case MySqlParser.ASBINARY:
	            case MySqlParser.ASIN:
	            case MySqlParser.ASTEXT:
	            case MySqlParser.ASWKB:
	            case MySqlParser.ASWKT:
	            case MySqlParser.ASYMMETRIC_DECRYPT:
	            case MySqlParser.ASYMMETRIC_DERIVE:
	            case MySqlParser.ASYMMETRIC_ENCRYPT:
	            case MySqlParser.ASYMMETRIC_SIGN:
	            case MySqlParser.ASYMMETRIC_VERIFY:
	            case MySqlParser.ATAN:
	            case MySqlParser.ATAN2:
	            case MySqlParser.BENCHMARK:
	            case MySqlParser.BIN:
	            case MySqlParser.BIT_COUNT:
	            case MySqlParser.BIT_LENGTH:
	            case MySqlParser.BUFFER:
	            case MySqlParser.CATALOG_NAME:
	            case MySqlParser.CEIL:
	            case MySqlParser.CEILING:
	            case MySqlParser.CENTROID:
	            case MySqlParser.CHARACTER_LENGTH:
	            case MySqlParser.CHARSET:
	            case MySqlParser.CHAR_LENGTH:
	            case MySqlParser.COERCIBILITY:
	            case MySqlParser.COLLATION:
	            case MySqlParser.COMPRESS:
	            case MySqlParser.CONCAT:
	            case MySqlParser.CONCAT_WS:
	            case MySqlParser.CONNECTION_ID:
	            case MySqlParser.CONV:
	            case MySqlParser.CONVERT_TZ:
	            case MySqlParser.COS:
	            case MySqlParser.COT:
	            case MySqlParser.CRC32:
	            case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
	            case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
	            case MySqlParser.CREATE_DH_PARAMETERS:
	            case MySqlParser.CREATE_DIGEST:
	            case MySqlParser.CROSSES:
	            case MySqlParser.DATEDIFF:
	            case MySqlParser.DATE_FORMAT:
	            case MySqlParser.DAYNAME:
	            case MySqlParser.DAYOFMONTH:
	            case MySqlParser.DAYOFWEEK:
	            case MySqlParser.DAYOFYEAR:
	            case MySqlParser.DECODE:
	            case MySqlParser.DEGREES:
	            case MySqlParser.DES_DECRYPT:
	            case MySqlParser.DES_ENCRYPT:
	            case MySqlParser.DIMENSION:
	            case MySqlParser.DISJOINT:
	            case MySqlParser.ELT:
	            case MySqlParser.ENCODE:
	            case MySqlParser.ENCRYPT:
	            case MySqlParser.ENDPOINT:
	            case MySqlParser.ENVELOPE:
	            case MySqlParser.EQUALS:
	            case MySqlParser.EXP:
	            case MySqlParser.EXPORT_SET:
	            case MySqlParser.EXTERIORRING:
	            case MySqlParser.EXTRACTVALUE:
	            case MySqlParser.FIELD:
	            case MySqlParser.FIND_IN_SET:
	            case MySqlParser.FLOOR:
	            case MySqlParser.FORMAT:
	            case MySqlParser.FOUND_ROWS:
	            case MySqlParser.FROM_BASE64:
	            case MySqlParser.FROM_DAYS:
	            case MySqlParser.FROM_UNIXTIME:
	            case MySqlParser.GEOMCOLLFROMTEXT:
	            case MySqlParser.GEOMCOLLFROMWKB:
	            case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
	            case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
	            case MySqlParser.GEOMETRYFROMTEXT:
	            case MySqlParser.GEOMETRYFROMWKB:
	            case MySqlParser.GEOMETRYN:
	            case MySqlParser.GEOMETRYTYPE:
	            case MySqlParser.GEOMFROMTEXT:
	            case MySqlParser.GEOMFROMWKB:
	            case MySqlParser.GET_FORMAT:
	            case MySqlParser.GET_LOCK:
	            case MySqlParser.GLENGTH:
	            case MySqlParser.GREATEST:
	            case MySqlParser.GTID_SUBSET:
	            case MySqlParser.GTID_SUBTRACT:
	            case MySqlParser.HEX:
	            case MySqlParser.IFNULL:
	            case MySqlParser.INET6_ATON:
	            case MySqlParser.INET6_NTOA:
	            case MySqlParser.INET_ATON:
	            case MySqlParser.INET_NTOA:
	            case MySqlParser.INSTR:
	            case MySqlParser.INTERIORRINGN:
	            case MySqlParser.INTERSECTS:
	            case MySqlParser.ISCLOSED:
	            case MySqlParser.ISEMPTY:
	            case MySqlParser.ISNULL:
	            case MySqlParser.ISSIMPLE:
	            case MySqlParser.IS_FREE_LOCK:
	            case MySqlParser.IS_IPV4:
	            case MySqlParser.IS_IPV4_COMPAT:
	            case MySqlParser.IS_IPV4_MAPPED:
	            case MySqlParser.IS_IPV6:
	            case MySqlParser.IS_USED_LOCK:
	            case MySqlParser.LAST_INSERT_ID:
	            case MySqlParser.LCASE:
	            case MySqlParser.LEAST:
	            case MySqlParser.LENGTH:
	            case MySqlParser.LINEFROMTEXT:
	            case MySqlParser.LINEFROMWKB:
	            case MySqlParser.LINESTRINGFROMTEXT:
	            case MySqlParser.LINESTRINGFROMWKB:
	            case MySqlParser.LN:
	            case MySqlParser.LOAD_FILE:
	            case MySqlParser.LOCATE:
	            case MySqlParser.LOG:
	            case MySqlParser.LOG10:
	            case MySqlParser.LOG2:
	            case MySqlParser.LOWER:
	            case MySqlParser.LPAD:
	            case MySqlParser.LTRIM:
	            case MySqlParser.MAKEDATE:
	            case MySqlParser.MAKETIME:
	            case MySqlParser.MAKE_SET:
	            case MySqlParser.MASTER_POS_WAIT:
	            case MySqlParser.MBRCONTAINS:
	            case MySqlParser.MBRDISJOINT:
	            case MySqlParser.MBREQUAL:
	            case MySqlParser.MBRINTERSECTS:
	            case MySqlParser.MBROVERLAPS:
	            case MySqlParser.MBRTOUCHES:
	            case MySqlParser.MBRWITHIN:
	            case MySqlParser.MD5:
	            case MySqlParser.MLINEFROMTEXT:
	            case MySqlParser.MLINEFROMWKB:
	            case MySqlParser.MONTHNAME:
	            case MySqlParser.MPOINTFROMTEXT:
	            case MySqlParser.MPOINTFROMWKB:
	            case MySqlParser.MPOLYFROMTEXT:
	            case MySqlParser.MPOLYFROMWKB:
	            case MySqlParser.MULTILINESTRINGFROMTEXT:
	            case MySqlParser.MULTILINESTRINGFROMWKB:
	            case MySqlParser.MULTIPOINTFROMTEXT:
	            case MySqlParser.MULTIPOINTFROMWKB:
	            case MySqlParser.MULTIPOLYGONFROMTEXT:
	            case MySqlParser.MULTIPOLYGONFROMWKB:
	            case MySqlParser.NAME_CONST:
	            case MySqlParser.NULLIF:
	            case MySqlParser.NUMGEOMETRIES:
	            case MySqlParser.NUMINTERIORRINGS:
	            case MySqlParser.NUMPOINTS:
	            case MySqlParser.OCT:
	            case MySqlParser.OCTET_LENGTH:
	            case MySqlParser.ORD:
	            case MySqlParser.OVERLAPS:
	            case MySqlParser.PERIOD_ADD:
	            case MySqlParser.PERIOD_DIFF:
	            case MySqlParser.PI:
	            case MySqlParser.POINTFROMTEXT:
	            case MySqlParser.POINTFROMWKB:
	            case MySqlParser.POINTN:
	            case MySqlParser.POLYFROMTEXT:
	            case MySqlParser.POLYFROMWKB:
	            case MySqlParser.POLYGONFROMTEXT:
	            case MySqlParser.POLYGONFROMWKB:
	            case MySqlParser.POW:
	            case MySqlParser.POWER:
	            case MySqlParser.QUOTE:
	            case MySqlParser.RADIANS:
	            case MySqlParser.RAND:
	            case MySqlParser.RANDOM_BYTES:
	            case MySqlParser.RELEASE_LOCK:
	            case MySqlParser.REVERSE:
	            case MySqlParser.ROUND:
	            case MySqlParser.ROW_COUNT:
	            case MySqlParser.RPAD:
	            case MySqlParser.RTRIM:
	            case MySqlParser.SEC_TO_TIME:
	            case MySqlParser.SESSION_USER:
	            case MySqlParser.SHA:
	            case MySqlParser.SHA1:
	            case MySqlParser.SHA2:
	            case MySqlParser.SCHEMA_NAME:
	            case MySqlParser.SIGN:
	            case MySqlParser.SIN:
	            case MySqlParser.SLEEP:
	            case MySqlParser.SOUNDEX:
	            case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
	            case MySqlParser.SQRT:
	            case MySqlParser.SRID:
	            case MySqlParser.STARTPOINT:
	            case MySqlParser.STRCMP:
	            case MySqlParser.STR_TO_DATE:
	            case MySqlParser.ST_AREA:
	            case MySqlParser.ST_ASBINARY:
	            case MySqlParser.ST_ASTEXT:
	            case MySqlParser.ST_ASWKB:
	            case MySqlParser.ST_ASWKT:
	            case MySqlParser.ST_BUFFER:
	            case MySqlParser.ST_CENTROID:
	            case MySqlParser.ST_CONTAINS:
	            case MySqlParser.ST_CROSSES:
	            case MySqlParser.ST_DIFFERENCE:
	            case MySqlParser.ST_DIMENSION:
	            case MySqlParser.ST_DISJOINT:
	            case MySqlParser.ST_DISTANCE:
	            case MySqlParser.ST_ENDPOINT:
	            case MySqlParser.ST_ENVELOPE:
	            case MySqlParser.ST_EQUALS:
	            case MySqlParser.ST_EXTERIORRING:
	            case MySqlParser.ST_GEOMCOLLFROMTEXT:
	            case MySqlParser.ST_GEOMCOLLFROMTXT:
	            case MySqlParser.ST_GEOMCOLLFROMWKB:
	            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
	            case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
	            case MySqlParser.ST_GEOMETRYFROMTEXT:
	            case MySqlParser.ST_GEOMETRYFROMWKB:
	            case MySqlParser.ST_GEOMETRYN:
	            case MySqlParser.ST_GEOMETRYTYPE:
	            case MySqlParser.ST_GEOMFROMTEXT:
	            case MySqlParser.ST_GEOMFROMWKB:
	            case MySqlParser.ST_INTERIORRINGN:
	            case MySqlParser.ST_INTERSECTION:
	            case MySqlParser.ST_INTERSECTS:
	            case MySqlParser.ST_ISCLOSED:
	            case MySqlParser.ST_ISEMPTY:
	            case MySqlParser.ST_ISSIMPLE:
	            case MySqlParser.ST_LINEFROMTEXT:
	            case MySqlParser.ST_LINEFROMWKB:
	            case MySqlParser.ST_LINESTRINGFROMTEXT:
	            case MySqlParser.ST_LINESTRINGFROMWKB:
	            case MySqlParser.ST_NUMGEOMETRIES:
	            case MySqlParser.ST_NUMINTERIORRING:
	            case MySqlParser.ST_NUMINTERIORRINGS:
	            case MySqlParser.ST_NUMPOINTS:
	            case MySqlParser.ST_OVERLAPS:
	            case MySqlParser.ST_POINTFROMTEXT:
	            case MySqlParser.ST_POINTFROMWKB:
	            case MySqlParser.ST_POINTN:
	            case MySqlParser.ST_POLYFROMTEXT:
	            case MySqlParser.ST_POLYFROMWKB:
	            case MySqlParser.ST_POLYGONFROMTEXT:
	            case MySqlParser.ST_POLYGONFROMWKB:
	            case MySqlParser.ST_SRID:
	            case MySqlParser.ST_STARTPOINT:
	            case MySqlParser.ST_SYMDIFFERENCE:
	            case MySqlParser.ST_TOUCHES:
	            case MySqlParser.ST_UNION:
	            case MySqlParser.ST_WITHIN:
	            case MySqlParser.ST_X:
	            case MySqlParser.ST_Y:
	            case MySqlParser.SUBDATE:
	            case MySqlParser.SUBSTRING_INDEX:
	            case MySqlParser.SUBTIME:
	            case MySqlParser.SYSTEM_USER:
	            case MySqlParser.TAN:
	            case MySqlParser.TIMEDIFF:
	            case MySqlParser.TIMESTAMPADD:
	            case MySqlParser.TIMESTAMPDIFF:
	            case MySqlParser.TIME_FORMAT:
	            case MySqlParser.TIME_TO_SEC:
	            case MySqlParser.TOUCHES:
	            case MySqlParser.TO_BASE64:
	            case MySqlParser.TO_DAYS:
	            case MySqlParser.TO_SECONDS:
	            case MySqlParser.UCASE:
	            case MySqlParser.UNCOMPRESS:
	            case MySqlParser.UNCOMPRESSED_LENGTH:
	            case MySqlParser.UNHEX:
	            case MySqlParser.UNIX_TIMESTAMP:
	            case MySqlParser.UPDATEXML:
	            case MySqlParser.UPPER:
	            case MySqlParser.UUID:
	            case MySqlParser.UUID_SHORT:
	            case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
	            case MySqlParser.VERSION:
	            case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
	            case MySqlParser.WEEKDAY:
	            case MySqlParser.WEEKOFYEAR:
	            case MySqlParser.WEIGHT_STRING:
	            case MySqlParser.WITHIN:
	            case MySqlParser.YEARWEEK:
	            case MySqlParser.Y_FUNCTION:
	            case MySqlParser.X_FUNCTION:
	            case MySqlParser.AT_SIGN:
	            case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
	            case MySqlParser.STRING_LITERAL:
	            case MySqlParser.ID:
	            case MySqlParser.REVERSE_QUOTE_ID:
	            case MySqlParser.LOCAL_ID:
	            case MySqlParser.GLOBAL_ID:
	                this.state = 5377;
	                this.variableClause();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 5380;
	            this.variableClause();
	            this.state = 5381;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 5382;
	            this.diagnosticsConditionInformationName();
	            this.state = 5390;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 5383;
	                this.match(MySqlParser.COMMA);
	                this.state = 5384;
	                this.variableClause();
	                this.state = 5385;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	                this.state = 5386;
	                this.diagnosticsConditionInformationName();
	                this.state = 5392;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	diagnosticsConditionInformationName() {
	    let localctx = new DiagnosticsConditionInformationNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 492, MySqlParser.RULE_diagnosticsConditionInformationName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5395;
	        _la = this._input.LA(1);
	        if(!(((((_la - 297)) & ~0x1f) == 0 && ((1 << (_la - 297)) & ((1 << (MySqlParser.CLASS_ORIGIN - 297)) | (1 << (MySqlParser.COLUMN_NAME - 297)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 297)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 297)) | (1 << (MySqlParser.CONSTRAINT_NAME - 297)) | (1 << (MySqlParser.CURSOR_NAME - 297)))) !== 0) || _la===MySqlParser.MESSAGE_TEXT || _la===MySqlParser.MYSQL_ERRNO || _la===MySqlParser.RETURNED_SQLSTATE || _la===MySqlParser.SUBCLASS_ORIGIN || _la===MySqlParser.TABLE_NAME || _la===MySqlParser.CATALOG_NAME || _la===MySqlParser.SCHEMA_NAME)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describeObjectClause() {
	    let localctx = new DescribeObjectClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 494, MySqlParser.RULE_describeObjectClause);
	    try {
	        this.state = 5407;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.DELETE:
	        case MySqlParser.INSERT:
	        case MySqlParser.REPLACE:
	        case MySqlParser.SELECT:
	        case MySqlParser.UPDATE:
	        case MySqlParser.LR_BRACKET:
	            localctx = new DescribeStatementsContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5402;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.SELECT:
	            case MySqlParser.LR_BRACKET:
	                this.state = 5397;
	                this.selectStatement();
	                break;
	            case MySqlParser.DELETE:
	                this.state = 5398;
	                this.deleteStatement();
	                break;
	            case MySqlParser.INSERT:
	                this.state = 5399;
	                this.insertStatement();
	                break;
	            case MySqlParser.REPLACE:
	                this.state = 5400;
	                this.replaceStatement();
	                break;
	            case MySqlParser.UPDATE:
	                this.state = 5401;
	                this.updateStatement();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case MySqlParser.FOR:
	            localctx = new DescribeConnectionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5404;
	            this.match(MySqlParser.FOR);
	            this.state = 5405;
	            this.match(MySqlParser.CONNECTION);
	            this.state = 5406;
	            this.uid();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullId() {
	    let localctx = new FullIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 496, MySqlParser.RULE_fullId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5409;
	        this.uid();
	        this.state = 5413;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,780,this._ctx);
	        if(la_===1) {
	            this.state = 5410;
	            this.match(MySqlParser.DOT_ID);

	        } else if(la_===2) {
	            this.state = 5411;
	            this.match(MySqlParser.DOT);
	            this.state = 5412;
	            this.uid();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableName() {
	    let localctx = new TableNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 498, MySqlParser.RULE_tableName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5415;
	        this.fullId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullColumnName() {
	    let localctx = new FullColumnNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 500, MySqlParser.RULE_fullColumnName);
	    try {
	        this.state = 5429;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,784,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5417;
	            this.uid();
	            this.state = 5422;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,782,this._ctx);
	            if(la_===1) {
	                this.state = 5418;
	                this.dottedId();
	                this.state = 5420;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,781,this._ctx);
	                if(la_===1) {
	                    this.state = 5419;
	                    this.dottedId();

	                }

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5424;
	            this.matchWildcard();
	            this.state = 5425;
	            this.dottedId();
	            this.state = 5427;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,783,this._ctx);
	            if(la_===1) {
	                this.state = 5426;
	                this.dottedId();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexColumnName() {
	    let localctx = new IndexColumnNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 502, MySqlParser.RULE_indexColumnName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5433;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,785,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 5431;
	            this.uid();
	            break;

	        case 2:
	            this.state = 5432;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        }
	        this.state = 5439;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.LR_BRACKET) {
	            this.state = 5435;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 5436;
	            this.decimalLiteral();
	            this.state = 5437;
	            this.match(MySqlParser.RR_BRACKET);
	        }

	        this.state = 5442;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.ASC || _la===MySqlParser.DESC) {
	            this.state = 5441;
	            localctx.sortType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.ASC || _la===MySqlParser.DESC)) {
	                localctx.sortType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	userName() {
	    let localctx = new UserNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 504, MySqlParser.RULE_userName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5444;
	        _la = this._input.LA(1);
	        if(!(((((_la - 1037)) & ~0x1f) == 0 && ((1 << (_la - 1037)) & ((1 << (MySqlParser.STRING_LITERAL - 1037)) | (1 << (MySqlParser.ID - 1037)) | (1 << (MySqlParser.STRING_USER_NAME - 1037)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mysqlVariable() {
	    let localctx = new MysqlVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 506, MySqlParser.RULE_mysqlVariable);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5446;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.LOCAL_ID || _la===MySqlParser.GLOBAL_ID)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charsetName() {
	    let localctx = new CharsetNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 508, MySqlParser.RULE_charsetName);
	    try {
	        this.state = 5452;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.BINARY:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5448;
	            this.match(MySqlParser.BINARY);
	            break;
	        case MySqlParser.ARMSCII8:
	        case MySqlParser.ASCII:
	        case MySqlParser.BIG5:
	        case MySqlParser.CP1250:
	        case MySqlParser.CP1251:
	        case MySqlParser.CP1256:
	        case MySqlParser.CP1257:
	        case MySqlParser.CP850:
	        case MySqlParser.CP852:
	        case MySqlParser.CP866:
	        case MySqlParser.CP932:
	        case MySqlParser.DEC8:
	        case MySqlParser.EUCJPMS:
	        case MySqlParser.EUCKR:
	        case MySqlParser.GB2312:
	        case MySqlParser.GBK:
	        case MySqlParser.GEOSTD8:
	        case MySqlParser.GREEK:
	        case MySqlParser.HEBREW:
	        case MySqlParser.HP8:
	        case MySqlParser.KEYBCS2:
	        case MySqlParser.KOI8R:
	        case MySqlParser.KOI8U:
	        case MySqlParser.LATIN1:
	        case MySqlParser.LATIN2:
	        case MySqlParser.LATIN5:
	        case MySqlParser.LATIN7:
	        case MySqlParser.MACCE:
	        case MySqlParser.MACROMAN:
	        case MySqlParser.SJIS:
	        case MySqlParser.SWE7:
	        case MySqlParser.TIS620:
	        case MySqlParser.UCS2:
	        case MySqlParser.UJIS:
	        case MySqlParser.UTF16:
	        case MySqlParser.UTF16LE:
	        case MySqlParser.UTF32:
	        case MySqlParser.UTF8:
	        case MySqlParser.UTF8MB3:
	        case MySqlParser.UTF8MB4:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5449;
	            this.charsetNameBase();
	            break;
	        case MySqlParser.STRING_LITERAL:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5450;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5451;
	            this.match(MySqlParser.CHARSET_REVERSE_QOUTE_STRING);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collationName() {
	    let localctx = new CollationNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 510, MySqlParser.RULE_collationName);
	    try {
	        this.state = 5456;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,789,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5454;
	            this.uid();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5455;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	engineName() {
	    let localctx = new EngineNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 512, MySqlParser.RULE_engineName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5458;
	        _la = this._input.LA(1);
	        if(!(((((_la - 679)) & ~0x1f) == 0 && ((1 << (_la - 679)) & ((1 << (MySqlParser.ARCHIVE - 679)) | (1 << (MySqlParser.BLACKHOLE - 679)) | (1 << (MySqlParser.CSV - 679)) | (1 << (MySqlParser.FEDERATED - 679)) | (1 << (MySqlParser.INNODB - 679)) | (1 << (MySqlParser.MEMORY - 679)) | (1 << (MySqlParser.MRG_MYISAM - 679)) | (1 << (MySqlParser.MYISAM - 679)) | (1 << (MySqlParser.NDB - 679)) | (1 << (MySqlParser.NDBCLUSTER - 679)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 679)) | (1 << (MySqlParser.TOKUDB - 679)))) !== 0) || ((((_la - 1037)) & ~0x1f) == 0 && ((1 << (_la - 1037)) & ((1 << (MySqlParser.STRING_LITERAL - 1037)) | (1 << (MySqlParser.ID - 1037)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1037)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uuidSet() {
	    let localctx = new UuidSetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 514, MySqlParser.RULE_uuidSet);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5460;
	        this.decimalLiteral();
	        this.state = 5461;
	        this.match(MySqlParser.MINUS);
	        this.state = 5462;
	        this.decimalLiteral();
	        this.state = 5463;
	        this.match(MySqlParser.MINUS);
	        this.state = 5464;
	        this.decimalLiteral();
	        this.state = 5465;
	        this.match(MySqlParser.MINUS);
	        this.state = 5466;
	        this.decimalLiteral();
	        this.state = 5467;
	        this.match(MySqlParser.MINUS);
	        this.state = 5468;
	        this.decimalLiteral();
	        this.state = 5474; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 5469;
	            this.match(MySqlParser.COLON_SYMB);
	            this.state = 5470;
	            this.decimalLiteral();
	            this.state = 5471;
	            this.match(MySqlParser.MINUS);
	            this.state = 5472;
	            this.decimalLiteral();
	            this.state = 5476; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===MySqlParser.COLON_SYMB);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xid() {
	    let localctx = new XidContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 516, MySqlParser.RULE_xid);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5478;
	        localctx.globalTableUid = this.xuidStringId();
	        this.state = 5485;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.COMMA) {
	            this.state = 5479;
	            this.match(MySqlParser.COMMA);
	            this.state = 5480;
	            localctx.qualifier = this.xuidStringId();
	            this.state = 5483;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.COMMA) {
	                this.state = 5481;
	                this.match(MySqlParser.COMMA);
	                this.state = 5482;
	                localctx.idFormat = this.decimalLiteral();
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xuidStringId() {
	    let localctx = new XuidStringIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 518, MySqlParser.RULE_xuidStringId);
	    var _la = 0; // Token type
	    try {
	        this.state = 5494;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.STRING_LITERAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5487;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case MySqlParser.BIT_STRING:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5488;
	            this.match(MySqlParser.BIT_STRING);
	            break;
	        case MySqlParser.HEXADECIMAL_LITERAL:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5490; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 5489;
	                this.match(MySqlParser.HEXADECIMAL_LITERAL);
	                this.state = 5492; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===MySqlParser.HEXADECIMAL_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	authPlugin() {
	    let localctx = new AuthPluginContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 520, MySqlParser.RULE_authPlugin);
	    try {
	        this.state = 5498;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,795,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5496;
	            this.uid();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5497;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uid() {
	    let localctx = new UidContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 522, MySqlParser.RULE_uid);
	    try {
	        this.state = 5503;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,796,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5500;
	            this.simpleId();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5501;
	            this.match(MySqlParser.REVERSE_QUOTE_ID);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5502;
	            this.match(MySqlParser.CHARSET_REVERSE_QOUTE_STRING);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleId() {
	    let localctx = new SimpleIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 524, MySqlParser.RULE_simpleId);
	    try {
	        this.state = 5514;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,797,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5505;
	            this.match(MySqlParser.ID);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5506;
	            this.charsetNameBase();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5507;
	            this.transactionLevelBase();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5508;
	            this.engineName();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5509;
	            this.privilegesBase();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5510;
	            this.intervalTypeBase();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 5511;
	            this.dataTypeBase();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 5512;
	            this.keywordsCanBeId();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 5513;
	            this.functionNameBase();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dottedId() {
	    let localctx = new DottedIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 526, MySqlParser.RULE_dottedId);
	    try {
	        this.state = 5519;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.DOT_ID:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5516;
	            this.match(MySqlParser.DOT_ID);
	            break;
	        case MySqlParser.DOT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5517;
	            this.match(MySqlParser.DOT);
	            this.state = 5518;
	            this.uid();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decimalLiteral() {
	    let localctx = new DecimalLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 528, MySqlParser.RULE_decimalLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5521;
	        _la = this._input.LA(1);
	        if(!(((((_la - 1027)) & ~0x1f) == 0 && ((1 << (_la - 1027)) & ((1 << (MySqlParser.ZERO_DECIMAL - 1027)) | (1 << (MySqlParser.ONE_DECIMAL - 1027)) | (1 << (MySqlParser.TWO_DECIMAL - 1027)) | (1 << (MySqlParser.DECIMAL_LITERAL - 1027)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fileSizeLiteral() {
	    let localctx = new FileSizeLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 530, MySqlParser.RULE_fileSizeLiteral);
	    try {
	        this.state = 5525;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.FILESIZE_LITERAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5523;
	            this.match(MySqlParser.FILESIZE_LITERAL);
	            break;
	        case MySqlParser.ZERO_DECIMAL:
	        case MySqlParser.ONE_DECIMAL:
	        case MySqlParser.TWO_DECIMAL:
	        case MySqlParser.DECIMAL_LITERAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5524;
	            this.decimalLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringLiteral() {
	    let localctx = new StringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 532, MySqlParser.RULE_stringLiteral);
	    var _la = 0; // Token type
	    try {
	        this.state = 5550;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,806,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5532;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.STRING_LITERAL:
	            case MySqlParser.STRING_CHARSET_NAME:
	                this.state = 5528;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===MySqlParser.STRING_CHARSET_NAME) {
	                    this.state = 5527;
	                    this.match(MySqlParser.STRING_CHARSET_NAME);
	                }

	                this.state = 5530;
	                this.match(MySqlParser.STRING_LITERAL);
	                break;
	            case MySqlParser.START_NATIONAL_STRING_LITERAL:
	                this.state = 5531;
	                this.match(MySqlParser.START_NATIONAL_STRING_LITERAL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 5535; 
	            this._errHandler.sync(this);
	            let _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 5534;
	            		this.match(MySqlParser.STRING_LITERAL);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 5537; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,802, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5544;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MySqlParser.STRING_LITERAL:
	            case MySqlParser.STRING_CHARSET_NAME:
	                this.state = 5540;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===MySqlParser.STRING_CHARSET_NAME) {
	                    this.state = 5539;
	                    this.match(MySqlParser.STRING_CHARSET_NAME);
	                }

	                this.state = 5542;
	                this.match(MySqlParser.STRING_LITERAL);
	                break;
	            case MySqlParser.START_NATIONAL_STRING_LITERAL:
	                this.state = 5543;
	                this.match(MySqlParser.START_NATIONAL_STRING_LITERAL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 5548;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,805,this._ctx);
	            if(la_===1) {
	                this.state = 5546;
	                this.match(MySqlParser.COLLATE);
	                this.state = 5547;
	                this.collationName();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanLiteral() {
	    let localctx = new BooleanLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 534, MySqlParser.RULE_booleanLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5552;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.FALSE || _la===MySqlParser.TRUE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hexadecimalLiteral() {
	    let localctx = new HexadecimalLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 536, MySqlParser.RULE_hexadecimalLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5555;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.STRING_CHARSET_NAME) {
	            this.state = 5554;
	            this.match(MySqlParser.STRING_CHARSET_NAME);
	        }

	        this.state = 5557;
	        this.match(MySqlParser.HEXADECIMAL_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullNotnull() {
	    let localctx = new NullNotnullContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 538, MySqlParser.RULE_nullNotnull);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5560;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.NOT) {
	            this.state = 5559;
	            this.match(MySqlParser.NOT);
	        }

	        this.state = 5562;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.NULL_LITERAL || _la===MySqlParser.NULL_SPEC_LITERAL)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constant() {
	    let localctx = new ConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 540, MySqlParser.RULE_constant);
	    var _la = 0; // Token type
	    try {
	        this.state = 5576;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,810,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5564;
	            this.stringLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5565;
	            this.decimalLiteral();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5566;
	            this.match(MySqlParser.MINUS);
	            this.state = 5567;
	            this.decimalLiteral();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5568;
	            this.hexadecimalLiteral();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5569;
	            this.booleanLiteral();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5570;
	            this.match(MySqlParser.REAL_LITERAL);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 5571;
	            this.match(MySqlParser.BIT_STRING);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 5573;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.NOT) {
	                this.state = 5572;
	                this.match(MySqlParser.NOT);
	            }

	            this.state = 5575;
	            localctx.nullLiteral = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.NULL_LITERAL || _la===MySqlParser.NULL_SPEC_LITERAL)) {
	                localctx.nullLiteral = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataType() {
	    let localctx = new DataTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 542, MySqlParser.RULE_dataType);
	    var _la = 0; // Token type
	    try {
	        this.state = 5709;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,845,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new StringDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5578;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.CHARACTER || ((((_la - 204)) & ~0x1f) == 0 && ((1 << (_la - 204)) & ((1 << (MySqlParser.CHAR - 204)) | (1 << (MySqlParser.VARCHAR - 204)) | (1 << (MySqlParser.NVARCHAR - 204)) | (1 << (MySqlParser.LONG - 204)) | (1 << (MySqlParser.TINYTEXT - 204)) | (1 << (MySqlParser.TEXT - 204)) | (1 << (MySqlParser.MEDIUMTEXT - 204)) | (1 << (MySqlParser.LONGTEXT - 204)))) !== 0) || _la===MySqlParser.NCHAR)) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5580;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.VARYING) {
	                this.state = 5579;
	                this.match(MySqlParser.VARYING);
	            }

	            this.state = 5583;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,812,this._ctx);
	            if(la_===1) {
	                this.state = 5582;
	                this.lengthOneDimension();

	            }
	            this.state = 5586;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,813,this._ctx);
	            if(la_===1) {
	                this.state = 5585;
	                this.match(MySqlParser.BINARY);

	            }
	            this.state = 5594;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,815,this._ctx);
	            if(la_===1) {
	                this.state = 5591;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case MySqlParser.CHARACTER:
	                    this.state = 5588;
	                    this.match(MySqlParser.CHARACTER);
	                    this.state = 5589;
	                    this.match(MySqlParser.SET);
	                    break;
	                case MySqlParser.CHARSET:
	                    this.state = 5590;
	                    this.match(MySqlParser.CHARSET);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 5593;
	                this.charsetName();

	            }
	            this.state = 5599;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,816,this._ctx);
	            if(la_===1) {
	                this.state = 5596;
	                this.match(MySqlParser.COLLATE);
	                this.state = 5597;
	                this.collationName();

	            } else if(la_===2) {
	                this.state = 5598;
	                this.match(MySqlParser.BINARY);

	            }
	            break;

	        case 2:
	            localctx = new NationalStringDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5601;
	            this.match(MySqlParser.NATIONAL);
	            this.state = 5602;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.CHARACTER || _la===MySqlParser.VARCHAR)) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5604;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,817,this._ctx);
	            if(la_===1) {
	                this.state = 5603;
	                this.lengthOneDimension();

	            }
	            this.state = 5607;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.BINARY) {
	                this.state = 5606;
	                this.match(MySqlParser.BINARY);
	            }

	            break;

	        case 3:
	            localctx = new NationalStringDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5609;
	            this.match(MySqlParser.NCHAR);
	            this.state = 5610;
	            localctx.typeName = this.match(MySqlParser.VARCHAR);
	            this.state = 5612;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,819,this._ctx);
	            if(la_===1) {
	                this.state = 5611;
	                this.lengthOneDimension();

	            }
	            this.state = 5615;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.BINARY) {
	                this.state = 5614;
	                this.match(MySqlParser.BINARY);
	            }

	            break;

	        case 4:
	            localctx = new NationalVaryingStringDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5617;
	            this.match(MySqlParser.NATIONAL);
	            this.state = 5618;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.CHARACTER || _la===MySqlParser.CHAR)) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5619;
	            this.match(MySqlParser.VARYING);
	            this.state = 5621;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,821,this._ctx);
	            if(la_===1) {
	                this.state = 5620;
	                this.lengthOneDimension();

	            }
	            this.state = 5624;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.BINARY) {
	                this.state = 5623;
	                this.match(MySqlParser.BINARY);
	            }

	            break;

	        case 5:
	            localctx = new DimensionDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5626;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 178)) & ~0x1f) == 0 && ((1 << (_la - 178)) & ((1 << (MySqlParser.TINYINT - 178)) | (1 << (MySqlParser.SMALLINT - 178)) | (1 << (MySqlParser.MEDIUMINT - 178)) | (1 << (MySqlParser.MIDDLEINT - 178)) | (1 << (MySqlParser.INT - 178)) | (1 << (MySqlParser.INT1 - 178)) | (1 << (MySqlParser.INT2 - 178)) | (1 << (MySqlParser.INT3 - 178)) | (1 << (MySqlParser.INT4 - 178)) | (1 << (MySqlParser.INT8 - 178)) | (1 << (MySqlParser.INTEGER - 178)) | (1 << (MySqlParser.BIGINT - 178)))) !== 0))) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5628;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,823,this._ctx);
	            if(la_===1) {
	                this.state = 5627;
	                this.lengthOneDimension();

	            }
	            this.state = 5631;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,824,this._ctx);
	            if(la_===1) {
	                this.state = 5630;
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.UNSIGNED || _la===MySqlParser.SIGNED)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 5634;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.ZEROFILL) {
	                this.state = 5633;
	                this.match(MySqlParser.ZEROFILL);
	            }

	            break;

	        case 6:
	            localctx = new DimensionDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5636;
	            localctx.typeName = this.match(MySqlParser.REAL);
	            this.state = 5638;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,826,this._ctx);
	            if(la_===1) {
	                this.state = 5637;
	                this.lengthTwoDimension();

	            }
	            this.state = 5641;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,827,this._ctx);
	            if(la_===1) {
	                this.state = 5640;
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.UNSIGNED || _la===MySqlParser.SIGNED)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 5644;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.ZEROFILL) {
	                this.state = 5643;
	                this.match(MySqlParser.ZEROFILL);
	            }

	            break;

	        case 7:
	            localctx = new DimensionDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 5646;
	            localctx.typeName = this.match(MySqlParser.DOUBLE);
	            this.state = 5648;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.PRECISION) {
	                this.state = 5647;
	                this.match(MySqlParser.PRECISION);
	            }

	            this.state = 5651;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,830,this._ctx);
	            if(la_===1) {
	                this.state = 5650;
	                this.lengthTwoDimension();

	            }
	            this.state = 5654;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,831,this._ctx);
	            if(la_===1) {
	                this.state = 5653;
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.UNSIGNED || _la===MySqlParser.SIGNED)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 5657;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.ZEROFILL) {
	                this.state = 5656;
	                this.match(MySqlParser.ZEROFILL);
	            }

	            break;

	        case 8:
	            localctx = new DimensionDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 5659;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (MySqlParser.FLOAT - 193)) | (1 << (MySqlParser.FLOAT4 - 193)) | (1 << (MySqlParser.FLOAT8 - 193)) | (1 << (MySqlParser.DECIMAL - 193)) | (1 << (MySqlParser.DEC - 193)) | (1 << (MySqlParser.NUMERIC - 193)))) !== 0) || _la===MySqlParser.FIXED)) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5661;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,833,this._ctx);
	            if(la_===1) {
	                this.state = 5660;
	                this.lengthTwoOptionalDimension();

	            }
	            this.state = 5664;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,834,this._ctx);
	            if(la_===1) {
	                this.state = 5663;
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.UNSIGNED || _la===MySqlParser.SIGNED)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 5667;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.ZEROFILL) {
	                this.state = 5666;
	                this.match(MySqlParser.ZEROFILL);
	            }

	            break;

	        case 9:
	            localctx = new SimpleDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 5669;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TINYBLOB - 199)) | (1 << (MySqlParser.MEDIUMBLOB - 199)) | (1 << (MySqlParser.LONGBLOB - 199)) | (1 << (MySqlParser.SERIAL - 199)))) !== 0) || _la===MySqlParser.BOOL || _la===MySqlParser.BOOLEAN)) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 10:
	            localctx = new DimensionDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 5670;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 200)) & ~0x1f) == 0 && ((1 << (_la - 200)) & ((1 << (MySqlParser.TIME - 200)) | (1 << (MySqlParser.TIMESTAMP - 200)) | (1 << (MySqlParser.DATETIME - 200)) | (1 << (MySqlParser.YEAR - 200)) | (1 << (MySqlParser.BINARY - 200)) | (1 << (MySqlParser.VARBINARY - 200)) | (1 << (MySqlParser.BLOB - 200)))) !== 0) || _la===MySqlParser.BIT)) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5672;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,836,this._ctx);
	            if(la_===1) {
	                this.state = 5671;
	                this.lengthOneDimension();

	            }
	            break;

	        case 11:
	            localctx = new CollectionDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 5674;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.SET || _la===MySqlParser.ENUM)) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5675;
	            this.collectionOptions();
	            this.state = 5677;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.BINARY) {
	                this.state = 5676;
	                this.match(MySqlParser.BINARY);
	            }

	            this.state = 5685;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,839,this._ctx);
	            if(la_===1) {
	                this.state = 5682;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case MySqlParser.CHARACTER:
	                    this.state = 5679;
	                    this.match(MySqlParser.CHARACTER);
	                    this.state = 5680;
	                    this.match(MySqlParser.SET);
	                    break;
	                case MySqlParser.CHARSET:
	                    this.state = 5681;
	                    this.match(MySqlParser.CHARSET);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 5684;
	                this.charsetName();

	            }
	            break;

	        case 12:
	            localctx = new SpatialDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 5687;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.JSON || ((((_la - 695)) & ~0x1f) == 0 && ((1 << (_la - 695)) & ((1 << (MySqlParser.GEOMETRYCOLLECTION - 695)) | (1 << (MySqlParser.GEOMCOLLECTION - 695)) | (1 << (MySqlParser.GEOMETRY - 695)) | (1 << (MySqlParser.LINESTRING - 695)) | (1 << (MySqlParser.MULTILINESTRING - 695)) | (1 << (MySqlParser.MULTIPOINT - 695)) | (1 << (MySqlParser.MULTIPOLYGON - 695)) | (1 << (MySqlParser.POINT - 695)) | (1 << (MySqlParser.POLYGON - 695)))) !== 0))) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 13:
	            localctx = new LongVarcharDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 5688;
	            localctx.typeName = this.match(MySqlParser.LONG);
	            this.state = 5690;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.VARCHAR) {
	                this.state = 5689;
	                this.match(MySqlParser.VARCHAR);
	            }

	            this.state = 5693;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.BINARY) {
	                this.state = 5692;
	                this.match(MySqlParser.BINARY);
	            }

	            this.state = 5701;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,843,this._ctx);
	            if(la_===1) {
	                this.state = 5698;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case MySqlParser.CHARACTER:
	                    this.state = 5695;
	                    this.match(MySqlParser.CHARACTER);
	                    this.state = 5696;
	                    this.match(MySqlParser.SET);
	                    break;
	                case MySqlParser.CHARSET:
	                    this.state = 5697;
	                    this.match(MySqlParser.CHARSET);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 5700;
	                this.charsetName();

	            }
	            this.state = 5705;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,844,this._ctx);
	            if(la_===1) {
	                this.state = 5703;
	                this.match(MySqlParser.COLLATE);
	                this.state = 5704;
	                this.collationName();

	            }
	            break;

	        case 14:
	            localctx = new LongVarbinaryDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 5707;
	            this.match(MySqlParser.LONG);
	            this.state = 5708;
	            this.match(MySqlParser.VARBINARY);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collectionOptions() {
	    let localctx = new CollectionOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 544, MySqlParser.RULE_collectionOptions);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5711;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 5712;
	        this.match(MySqlParser.STRING_LITERAL);
	        this.state = 5717;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 5713;
	            this.match(MySqlParser.COMMA);
	            this.state = 5714;
	            this.match(MySqlParser.STRING_LITERAL);
	            this.state = 5719;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 5720;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	convertedDataType() {
	    let localctx = new ConvertedDataTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 546, MySqlParser.RULE_convertedDataType);
	    var _la = 0; // Token type
	    try {
	        this.state = 5747;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.BINARY:
	        case MySqlParser.NCHAR:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5722;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.BINARY || _la===MySqlParser.NCHAR)) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5724;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.LR_BRACKET) {
	                this.state = 5723;
	                this.lengthOneDimension();
	            }

	            break;
	        case MySqlParser.CHAR:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5726;
	            localctx.typeName = this.match(MySqlParser.CHAR);
	            this.state = 5728;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.LR_BRACKET) {
	                this.state = 5727;
	                this.lengthOneDimension();
	            }

	            this.state = 5736;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.CHARACTER || _la===MySqlParser.CHARSET) {
	                this.state = 5733;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case MySqlParser.CHARACTER:
	                    this.state = 5730;
	                    this.match(MySqlParser.CHARACTER);
	                    this.state = 5731;
	                    this.match(MySqlParser.SET);
	                    break;
	                case MySqlParser.CHARSET:
	                    this.state = 5732;
	                    this.match(MySqlParser.CHARSET);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 5735;
	                this.charsetName();
	            }

	            break;
	        case MySqlParser.DATE:
	        case MySqlParser.TIME:
	        case MySqlParser.DATETIME:
	        case MySqlParser.JSON:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5738;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.DATETIME - 199)))) !== 0) || _la===MySqlParser.JSON)) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case MySqlParser.DECIMAL:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5739;
	            localctx.typeName = this.match(MySqlParser.DECIMAL);
	            this.state = 5741;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.LR_BRACKET) {
	                this.state = 5740;
	                this.lengthTwoDimension();
	            }

	            break;
	        case MySqlParser.UNSIGNED:
	        case MySqlParser.SIGNED:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5743;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.UNSIGNED || _la===MySqlParser.SIGNED)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5745;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.INTEGER) {
	                this.state = 5744;
	                this.match(MySqlParser.INTEGER);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lengthOneDimension() {
	    let localctx = new LengthOneDimensionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 548, MySqlParser.RULE_lengthOneDimension);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5749;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 5750;
	        this.decimalLiteral();
	        this.state = 5751;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lengthTwoDimension() {
	    let localctx = new LengthTwoDimensionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 550, MySqlParser.RULE_lengthTwoDimension);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5753;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 5754;
	        this.decimalLiteral();
	        this.state = 5755;
	        this.match(MySqlParser.COMMA);
	        this.state = 5756;
	        this.decimalLiteral();
	        this.state = 5757;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lengthTwoOptionalDimension() {
	    let localctx = new LengthTwoOptionalDimensionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 552, MySqlParser.RULE_lengthTwoOptionalDimension);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5759;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 5760;
	        this.decimalLiteral();
	        this.state = 5763;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.COMMA) {
	            this.state = 5761;
	            this.match(MySqlParser.COMMA);
	            this.state = 5762;
	            this.decimalLiteral();
	        }

	        this.state = 5765;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uidList() {
	    let localctx = new UidListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 554, MySqlParser.RULE_uidList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5767;
	        this.uid();
	        this.state = 5772;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,855,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 5768;
	                this.match(MySqlParser.COMMA);
	                this.state = 5769;
	                this.uid(); 
	            }
	            this.state = 5774;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,855,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tables() {
	    let localctx = new TablesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 556, MySqlParser.RULE_tables);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5775;
	        this.tableName();
	        this.state = 5780;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,856,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 5776;
	                this.match(MySqlParser.COMMA);
	                this.state = 5777;
	                this.tableName(); 
	            }
	            this.state = 5782;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,856,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexColumnNames() {
	    let localctx = new IndexColumnNamesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 558, MySqlParser.RULE_indexColumnNames);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5783;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 5784;
	        this.indexColumnName();
	        this.state = 5789;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 5785;
	            this.match(MySqlParser.COMMA);
	            this.state = 5786;
	            this.indexColumnName();
	            this.state = 5791;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 5792;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressions() {
	    let localctx = new ExpressionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 560, MySqlParser.RULE_expressions);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5794;
	        this.expression(0);
	        this.state = 5799;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 5795;
	            this.match(MySqlParser.COMMA);
	            this.state = 5796;
	            this.expression(0);
	            this.state = 5801;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionsWithDefaults() {
	    let localctx = new ExpressionsWithDefaultsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 562, MySqlParser.RULE_expressionsWithDefaults);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5802;
	        this.expressionOrDefault();
	        this.state = 5807;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 5803;
	            this.match(MySqlParser.COMMA);
	            this.state = 5804;
	            this.expressionOrDefault();
	            this.state = 5809;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constants() {
	    let localctx = new ConstantsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 564, MySqlParser.RULE_constants);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5810;
	        this.constant();
	        this.state = 5815;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 5811;
	            this.match(MySqlParser.COMMA);
	            this.state = 5812;
	            this.constant();
	            this.state = 5817;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleStrings() {
	    let localctx = new SimpleStringsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 566, MySqlParser.RULE_simpleStrings);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5818;
	        this.match(MySqlParser.STRING_LITERAL);
	        this.state = 5823;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 5819;
	            this.match(MySqlParser.COMMA);
	            this.state = 5820;
	            this.match(MySqlParser.STRING_LITERAL);
	            this.state = 5825;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	userVariables() {
	    let localctx = new UserVariablesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 568, MySqlParser.RULE_userVariables);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5826;
	        this.match(MySqlParser.LOCAL_ID);
	        this.state = 5831;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 5827;
	            this.match(MySqlParser.COMMA);
	            this.state = 5828;
	            this.match(MySqlParser.LOCAL_ID);
	            this.state = 5833;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultValue() {
	    let localctx = new DefaultValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 570, MySqlParser.RULE_defaultValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5840;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,864,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 5834;
	            this.match(MySqlParser.NULL_LITERAL);
	            break;

	        case 2:
	            this.state = 5836;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,863,this._ctx);
	            if(la_===1) {
	                this.state = 5835;
	                this.unaryOperator();

	            }
	            this.state = 5838;
	            this.constant();
	            break;

	        case 3:
	            this.state = 5839;
	            this.currentTimestamp();
	            break;

	        }
	        this.state = 5845;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,865,this._ctx);
	        if(la_===1) {
	            this.state = 5842;
	            this.match(MySqlParser.ON);
	            this.state = 5843;
	            this.match(MySqlParser.UPDATE);
	            this.state = 5844;
	            this.currentTimestamp();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	currentTimestamp() {
	    let localctx = new CurrentTimestampContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 572, MySqlParser.RULE_currentTimestamp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5861;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.CURRENT_TIMESTAMP:
	        case MySqlParser.LOCALTIME:
	        case MySqlParser.LOCALTIMESTAMP:
	            this.state = 5847;
	            _la = this._input.LA(1);
	            if(!(((((_la - 253)) & ~0x1f) == 0 && ((1 << (_la - 253)) & ((1 << (MySqlParser.CURRENT_TIMESTAMP - 253)) | (1 << (MySqlParser.LOCALTIME - 253)) | (1 << (MySqlParser.LOCALTIMESTAMP - 253)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5853;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,867,this._ctx);
	            if(la_===1) {
	                this.state = 5848;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 5850;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(((((_la - 1027)) & ~0x1f) == 0 && ((1 << (_la - 1027)) & ((1 << (MySqlParser.ZERO_DECIMAL - 1027)) | (1 << (MySqlParser.ONE_DECIMAL - 1027)) | (1 << (MySqlParser.TWO_DECIMAL - 1027)) | (1 << (MySqlParser.DECIMAL_LITERAL - 1027)))) !== 0)) {
	                    this.state = 5849;
	                    this.decimalLiteral();
	                }

	                this.state = 5852;
	                this.match(MySqlParser.RR_BRACKET);

	            }
	            break;
	        case MySqlParser.NOW:
	            this.state = 5855;
	            this.match(MySqlParser.NOW);
	            this.state = 5856;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 5858;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 1027)) & ~0x1f) == 0 && ((1 << (_la - 1027)) & ((1 << (MySqlParser.ZERO_DECIMAL - 1027)) | (1 << (MySqlParser.ONE_DECIMAL - 1027)) | (1 << (MySqlParser.TWO_DECIMAL - 1027)) | (1 << (MySqlParser.DECIMAL_LITERAL - 1027)))) !== 0)) {
	                this.state = 5857;
	                this.decimalLiteral();
	            }

	            this.state = 5860;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionOrDefault() {
	    let localctx = new ExpressionOrDefaultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 574, MySqlParser.RULE_expressionOrDefault);
	    try {
	        this.state = 5865;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,870,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5863;
	            this.expression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5864;
	            this.match(MySqlParser.DEFAULT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifExists() {
	    let localctx = new IfExistsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 576, MySqlParser.RULE_ifExists);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5867;
	        this.match(MySqlParser.IF);
	        this.state = 5868;
	        this.match(MySqlParser.EXISTS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifNotExists() {
	    let localctx = new IfNotExistsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 578, MySqlParser.RULE_ifNotExists);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5870;
	        this.match(MySqlParser.IF);
	        this.state = 5871;
	        this.match(MySqlParser.NOT);
	        this.state = 5872;
	        this.match(MySqlParser.EXISTS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionCall() {
	    let localctx = new FunctionCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 580, MySqlParser.RULE_functionCall);
	    try {
	        this.state = 5891;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,873,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SpecificFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5874;
	            this.specificFunction();
	            break;

	        case 2:
	            localctx = new AggregateFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5875;
	            this.aggregateWindowedFunction();
	            break;

	        case 3:
	            localctx = new ScalarFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5876;
	            this.scalarFunctionName();
	            this.state = 5877;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 5879;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,871,this._ctx);
	            if(la_===1) {
	                this.state = 5878;
	                this.functionArgs();

	            }
	            this.state = 5881;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 4:
	            localctx = new UdfFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5883;
	            this.fullId();
	            this.state = 5884;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 5886;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,872,this._ctx);
	            if(la_===1) {
	                this.state = 5885;
	                this.functionArgs();

	            }
	            this.state = 5888;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 5:
	            localctx = new PasswordFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5890;
	            this.passwordFunctionClause();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	specificFunction() {
	    let localctx = new SpecificFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 582, MySqlParser.RULE_specificFunction);
	    var _la = 0; // Token type
	    try {
	        this.state = 6050;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,893,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SimpleFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5893;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.CURRENT_USER || ((((_la - 251)) & ~0x1f) == 0 && ((1 << (_la - 251)) & ((1 << (MySqlParser.CURRENT_DATE - 251)) | (1 << (MySqlParser.CURRENT_TIME - 251)) | (1 << (MySqlParser.CURRENT_TIMESTAMP - 251)) | (1 << (MySqlParser.LOCALTIME - 251)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 2:
	            localctx = new DataTypeFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5894;
	            this.match(MySqlParser.CONVERT);
	            this.state = 5895;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 5896;
	            this.expression(0);
	            this.state = 5897;
	            localctx.separator = this.match(MySqlParser.COMMA);
	            this.state = 5898;
	            this.convertedDataType();
	            this.state = 5899;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 3:
	            localctx = new DataTypeFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5901;
	            this.match(MySqlParser.CONVERT);
	            this.state = 5902;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 5903;
	            this.expression(0);
	            this.state = 5904;
	            this.match(MySqlParser.USING);
	            this.state = 5905;
	            this.charsetName();
	            this.state = 5906;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 4:
	            localctx = new DataTypeFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5908;
	            this.match(MySqlParser.CAST);
	            this.state = 5909;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 5910;
	            this.expression(0);
	            this.state = 5911;
	            this.match(MySqlParser.AS);
	            this.state = 5912;
	            this.convertedDataType();
	            this.state = 5913;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 5:
	            localctx = new ValuesFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5915;
	            this.match(MySqlParser.VALUES);
	            this.state = 5916;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 5917;
	            this.fullColumnName();
	            this.state = 5918;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 6:
	            localctx = new CaseFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5920;
	            this.match(MySqlParser.CASE);
	            this.state = 5921;
	            this.expression(0);
	            this.state = 5923; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 5922;
	                this.caseFuncAlternative();
	                this.state = 5925; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===MySqlParser.WHEN);
	            this.state = 5929;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.ELSE) {
	                this.state = 5927;
	                this.match(MySqlParser.ELSE);
	                this.state = 5928;
	                localctx.elseArg = this.functionArg();
	            }

	            this.state = 5931;
	            this.match(MySqlParser.END);
	            break;

	        case 7:
	            localctx = new CaseFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 5933;
	            this.match(MySqlParser.CASE);
	            this.state = 5935; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 5934;
	                this.caseFuncAlternative();
	                this.state = 5937; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===MySqlParser.WHEN);
	            this.state = 5941;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.ELSE) {
	                this.state = 5939;
	                this.match(MySqlParser.ELSE);
	                this.state = 5940;
	                localctx.elseArg = this.functionArg();
	            }

	            this.state = 5943;
	            this.match(MySqlParser.END);
	            break;

	        case 8:
	            localctx = new CharFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 5945;
	            this.match(MySqlParser.CHAR);
	            this.state = 5946;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 5947;
	            this.functionArgs();
	            this.state = 5950;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.USING) {
	                this.state = 5948;
	                this.match(MySqlParser.USING);
	                this.state = 5949;
	                this.charsetName();
	            }

	            this.state = 5952;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 9:
	            localctx = new PositionFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 5954;
	            this.match(MySqlParser.POSITION);
	            this.state = 5955;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 5958;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,879,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 5956;
	                localctx.positionString = this.stringLiteral();
	                break;

	            case 2:
	                this.state = 5957;
	                localctx.positionExpression = this.expression(0);
	                break;

	            }
	            this.state = 5960;
	            this.match(MySqlParser.IN);
	            this.state = 5963;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,880,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 5961;
	                localctx.inString = this.stringLiteral();
	                break;

	            case 2:
	                this.state = 5962;
	                localctx.inExpression = this.expression(0);
	                break;

	            }
	            this.state = 5965;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 10:
	            localctx = new SubstrFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 5967;
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.SUBSTR || _la===MySqlParser.SUBSTRING)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5968;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 5971;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,881,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 5969;
	                localctx.sourceString = this.stringLiteral();
	                break;

	            case 2:
	                this.state = 5970;
	                localctx.sourceExpression = this.expression(0);
	                break;

	            }
	            this.state = 5973;
	            this.match(MySqlParser.FROM);
	            this.state = 5976;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,882,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 5974;
	                localctx.fromDecimal = this.decimalLiteral();
	                break;

	            case 2:
	                this.state = 5975;
	                localctx.fromExpression = this.expression(0);
	                break;

	            }
	            this.state = 5983;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.FOR) {
	                this.state = 5978;
	                this.match(MySqlParser.FOR);
	                this.state = 5981;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,883,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 5979;
	                    localctx.forDecimal = this.decimalLiteral();
	                    break;

	                case 2:
	                    this.state = 5980;
	                    localctx.forExpression = this.expression(0);
	                    break;

	                }
	            }

	            this.state = 5985;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 11:
	            localctx = new TrimFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 5987;
	            this.match(MySqlParser.TRIM);
	            this.state = 5988;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 5989;
	            localctx.positioinForm = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.BOTH || _la===MySqlParser.LEADING || _la===MySqlParser.TRAILING)) {
	                localctx.positioinForm = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5992;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,885,this._ctx);
	            if(la_===1) {
	                this.state = 5990;
	                localctx.sourceString = this.stringLiteral();

	            } else if(la_===2) {
	                this.state = 5991;
	                localctx.sourceExpression = this.expression(0);

	            }
	            this.state = 5994;
	            this.match(MySqlParser.FROM);
	            this.state = 5997;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,886,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 5995;
	                localctx.fromString = this.stringLiteral();
	                break;

	            case 2:
	                this.state = 5996;
	                localctx.fromExpression = this.expression(0);
	                break;

	            }
	            this.state = 5999;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 12:
	            localctx = new TrimFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 6001;
	            this.match(MySqlParser.TRIM);
	            this.state = 6002;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6005;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,887,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 6003;
	                localctx.sourceString = this.stringLiteral();
	                break;

	            case 2:
	                this.state = 6004;
	                localctx.sourceExpression = this.expression(0);
	                break;

	            }
	            this.state = 6007;
	            this.match(MySqlParser.FROM);
	            this.state = 6010;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,888,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 6008;
	                localctx.fromString = this.stringLiteral();
	                break;

	            case 2:
	                this.state = 6009;
	                localctx.fromExpression = this.expression(0);
	                break;

	            }
	            this.state = 6012;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 13:
	            localctx = new WeightFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 6014;
	            this.match(MySqlParser.WEIGHT_STRING);
	            this.state = 6015;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6018;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,889,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 6016;
	                this.stringLiteral();
	                break;

	            case 2:
	                this.state = 6017;
	                this.expression(0);
	                break;

	            }
	            this.state = 6026;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.AS) {
	                this.state = 6020;
	                this.match(MySqlParser.AS);
	                this.state = 6021;
	                localctx.stringFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.CHAR || _la===MySqlParser.BINARY)) {
	                    localctx.stringFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 6022;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 6023;
	                this.decimalLiteral();
	                this.state = 6024;
	                this.match(MySqlParser.RR_BRACKET);
	            }

	            this.state = 6029;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.LEVEL) {
	                this.state = 6028;
	                this.levelsInWeightString();
	            }

	            this.state = 6031;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 14:
	            localctx = new ExtractFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 6033;
	            this.match(MySqlParser.EXTRACT);
	            this.state = 6034;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6035;
	            this.intervalType();
	            this.state = 6036;
	            this.match(MySqlParser.FROM);
	            this.state = 6039;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,892,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 6037;
	                localctx.sourceString = this.stringLiteral();
	                break;

	            case 2:
	                this.state = 6038;
	                localctx.sourceExpression = this.expression(0);
	                break;

	            }
	            this.state = 6041;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 15:
	            localctx = new GetFormatFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 6043;
	            this.match(MySqlParser.GET_FORMAT);
	            this.state = 6044;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6045;
	            localctx.datetimeFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.DATETIME - 199)))) !== 0))) {
	                localctx.datetimeFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6046;
	            this.match(MySqlParser.COMMA);
	            this.state = 6047;
	            this.stringLiteral();
	            this.state = 6048;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseFuncAlternative() {
	    let localctx = new CaseFuncAlternativeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 584, MySqlParser.RULE_caseFuncAlternative);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6052;
	        this.match(MySqlParser.WHEN);
	        this.state = 6053;
	        localctx.condition = this.functionArg();
	        this.state = 6054;
	        this.match(MySqlParser.THEN);
	        this.state = 6055;
	        localctx.consequent = this.functionArg();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	levelsInWeightString() {
	    let localctx = new LevelsInWeightStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 586, MySqlParser.RULE_levelsInWeightString);
	    var _la = 0; // Token type
	    try {
	        this.state = 6071;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,895,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new LevelWeightListContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6057;
	            this.match(MySqlParser.LEVEL);
	            this.state = 6058;
	            this.levelInWeightListElement();
	            this.state = 6063;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 6059;
	                this.match(MySqlParser.COMMA);
	                this.state = 6060;
	                this.levelInWeightListElement();
	                this.state = 6065;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            localctx = new LevelWeightRangeContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6066;
	            this.match(MySqlParser.LEVEL);
	            this.state = 6067;
	            localctx.firstLevel = this.decimalLiteral();
	            this.state = 6068;
	            this.match(MySqlParser.MINUS);
	            this.state = 6069;
	            localctx.lastLevel = this.decimalLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	levelInWeightListElement() {
	    let localctx = new LevelInWeightListElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 588, MySqlParser.RULE_levelInWeightListElement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6073;
	        this.decimalLiteral();
	        this.state = 6075;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MySqlParser.ASC || _la===MySqlParser.DESC || _la===MySqlParser.REVERSE) {
	            this.state = 6074;
	            localctx.orderType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.ASC || _la===MySqlParser.DESC || _la===MySqlParser.REVERSE)) {
	                localctx.orderType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregateWindowedFunction() {
	    let localctx = new AggregateWindowedFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 590, MySqlParser.RULE_aggregateWindowedFunction);
	    var _la = 0; // Token type
	    try {
	        this.state = 6133;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,905,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6077;
	            _la = this._input.LA(1);
	            if(!(((((_la - 235)) & ~0x1f) == 0 && ((1 << (_la - 235)) & ((1 << (MySqlParser.AVG - 235)) | (1 << (MySqlParser.MAX - 235)) | (1 << (MySqlParser.MIN - 235)) | (1 << (MySqlParser.SUM - 235)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6078;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6080;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,897,this._ctx);
	            if(la_===1) {
	                this.state = 6079;
	                localctx.aggregator = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===MySqlParser.ALL || _la===MySqlParser.DISTINCT)) {
	                    localctx.aggregator = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 6082;
	            this.functionArg();
	            this.state = 6083;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6085;
	            this.match(MySqlParser.COUNT);
	            this.state = 6086;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6092;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,899,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 6087;
	                localctx.starArg = this.match(MySqlParser.STAR);
	                break;

	            case 2:
	                this.state = 6089;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,898,this._ctx);
	                if(la_===1) {
	                    this.state = 6088;
	                    localctx.aggregator = this.match(MySqlParser.ALL);

	                }
	                this.state = 6091;
	                this.functionArg();
	                break;

	            }
	            this.state = 6094;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6095;
	            this.match(MySqlParser.COUNT);
	            this.state = 6096;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6097;
	            localctx.aggregator = this.match(MySqlParser.DISTINCT);
	            this.state = 6098;
	            this.functionArgs();
	            this.state = 6099;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6101;
	            _la = this._input.LA(1);
	            if(!(((((_la - 236)) & ~0x1f) == 0 && ((1 << (_la - 236)) & ((1 << (MySqlParser.BIT_AND - 236)) | (1 << (MySqlParser.BIT_OR - 236)) | (1 << (MySqlParser.BIT_XOR - 236)) | (1 << (MySqlParser.STD - 236)) | (1 << (MySqlParser.STDDEV - 236)) | (1 << (MySqlParser.STDDEV_POP - 236)) | (1 << (MySqlParser.STDDEV_SAMP - 236)) | (1 << (MySqlParser.VAR_POP - 236)) | (1 << (MySqlParser.VAR_SAMP - 236)) | (1 << (MySqlParser.VARIANCE - 236)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6102;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6104;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,900,this._ctx);
	            if(la_===1) {
	                this.state = 6103;
	                localctx.aggregator = this.match(MySqlParser.ALL);

	            }
	            this.state = 6106;
	            this.functionArg();
	            this.state = 6107;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6109;
	            this.match(MySqlParser.GROUP_CONCAT);
	            this.state = 6110;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6112;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,901,this._ctx);
	            if(la_===1) {
	                this.state = 6111;
	                localctx.aggregator = this.match(MySqlParser.DISTINCT);

	            }
	            this.state = 6114;
	            this.functionArgs();
	            this.state = 6125;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.ORDER) {
	                this.state = 6115;
	                this.match(MySqlParser.ORDER);
	                this.state = 6116;
	                this.match(MySqlParser.BY);
	                this.state = 6117;
	                this.orderByExpression();
	                this.state = 6122;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===MySqlParser.COMMA) {
	                    this.state = 6118;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 6119;
	                    this.orderByExpression();
	                    this.state = 6124;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 6129;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.SEPARATOR) {
	                this.state = 6127;
	                this.match(MySqlParser.SEPARATOR);
	                this.state = 6128;
	                localctx.separator = this.match(MySqlParser.STRING_LITERAL);
	            }

	            this.state = 6131;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scalarFunctionName() {
	    let localctx = new ScalarFunctionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 592, MySqlParser.RULE_scalarFunctionName);
	    try {
	        this.state = 6158;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.DATABASE:
	        case MySqlParser.LEFT:
	        case MySqlParser.RIGHT:
	        case MySqlParser.DATE:
	        case MySqlParser.TIME:
	        case MySqlParser.TIMESTAMP:
	        case MySqlParser.YEAR:
	        case MySqlParser.JSON_VALID:
	        case MySqlParser.JSON_SCHEMA_VALID:
	        case MySqlParser.COUNT:
	        case MySqlParser.POSITION:
	        case MySqlParser.INVISIBLE:
	        case MySqlParser.VISIBLE:
	        case MySqlParser.QUARTER:
	        case MySqlParser.MONTH:
	        case MySqlParser.DAY:
	        case MySqlParser.HOUR:
	        case MySqlParser.MINUTE:
	        case MySqlParser.WEEK:
	        case MySqlParser.SECOND:
	        case MySqlParser.MICROSECOND:
	        case MySqlParser.SESSION_VARIABLES_ADMIN:
	        case MySqlParser.GEOMETRYCOLLECTION:
	        case MySqlParser.LINESTRING:
	        case MySqlParser.MULTILINESTRING:
	        case MySqlParser.MULTIPOINT:
	        case MySqlParser.MULTIPOLYGON:
	        case MySqlParser.POINT:
	        case MySqlParser.POLYGON:
	        case MySqlParser.ABS:
	        case MySqlParser.ACOS:
	        case MySqlParser.ADDDATE:
	        case MySqlParser.ADDTIME:
	        case MySqlParser.AES_DECRYPT:
	        case MySqlParser.AES_ENCRYPT:
	        case MySqlParser.AREA:
	        case MySqlParser.ASBINARY:
	        case MySqlParser.ASIN:
	        case MySqlParser.ASTEXT:
	        case MySqlParser.ASWKB:
	        case MySqlParser.ASWKT:
	        case MySqlParser.ASYMMETRIC_DECRYPT:
	        case MySqlParser.ASYMMETRIC_DERIVE:
	        case MySqlParser.ASYMMETRIC_ENCRYPT:
	        case MySqlParser.ASYMMETRIC_SIGN:
	        case MySqlParser.ASYMMETRIC_VERIFY:
	        case MySqlParser.ATAN:
	        case MySqlParser.ATAN2:
	        case MySqlParser.BENCHMARK:
	        case MySqlParser.BIN:
	        case MySqlParser.BIT_COUNT:
	        case MySqlParser.BIT_LENGTH:
	        case MySqlParser.BUFFER:
	        case MySqlParser.CEIL:
	        case MySqlParser.CEILING:
	        case MySqlParser.CENTROID:
	        case MySqlParser.CHARACTER_LENGTH:
	        case MySqlParser.CHARSET:
	        case MySqlParser.CHAR_LENGTH:
	        case MySqlParser.COERCIBILITY:
	        case MySqlParser.COLLATION:
	        case MySqlParser.COMPRESS:
	        case MySqlParser.CONCAT:
	        case MySqlParser.CONCAT_WS:
	        case MySqlParser.CONNECTION_ID:
	        case MySqlParser.CONV:
	        case MySqlParser.CONVERT_TZ:
	        case MySqlParser.COS:
	        case MySqlParser.COT:
	        case MySqlParser.CRC32:
	        case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
	        case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
	        case MySqlParser.CREATE_DH_PARAMETERS:
	        case MySqlParser.CREATE_DIGEST:
	        case MySqlParser.CROSSES:
	        case MySqlParser.DATEDIFF:
	        case MySqlParser.DATE_FORMAT:
	        case MySqlParser.DAYNAME:
	        case MySqlParser.DAYOFMONTH:
	        case MySqlParser.DAYOFWEEK:
	        case MySqlParser.DAYOFYEAR:
	        case MySqlParser.DECODE:
	        case MySqlParser.DEGREES:
	        case MySqlParser.DES_DECRYPT:
	        case MySqlParser.DES_ENCRYPT:
	        case MySqlParser.DIMENSION:
	        case MySqlParser.DISJOINT:
	        case MySqlParser.ELT:
	        case MySqlParser.ENCODE:
	        case MySqlParser.ENCRYPT:
	        case MySqlParser.ENDPOINT:
	        case MySqlParser.ENVELOPE:
	        case MySqlParser.EQUALS:
	        case MySqlParser.EXP:
	        case MySqlParser.EXPORT_SET:
	        case MySqlParser.EXTERIORRING:
	        case MySqlParser.EXTRACTVALUE:
	        case MySqlParser.FIELD:
	        case MySqlParser.FIND_IN_SET:
	        case MySqlParser.FLOOR:
	        case MySqlParser.FORMAT:
	        case MySqlParser.FOUND_ROWS:
	        case MySqlParser.FROM_BASE64:
	        case MySqlParser.FROM_DAYS:
	        case MySqlParser.FROM_UNIXTIME:
	        case MySqlParser.GEOMCOLLFROMTEXT:
	        case MySqlParser.GEOMCOLLFROMWKB:
	        case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
	        case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
	        case MySqlParser.GEOMETRYFROMTEXT:
	        case MySqlParser.GEOMETRYFROMWKB:
	        case MySqlParser.GEOMETRYN:
	        case MySqlParser.GEOMETRYTYPE:
	        case MySqlParser.GEOMFROMTEXT:
	        case MySqlParser.GEOMFROMWKB:
	        case MySqlParser.GET_FORMAT:
	        case MySqlParser.GET_LOCK:
	        case MySqlParser.GLENGTH:
	        case MySqlParser.GREATEST:
	        case MySqlParser.GTID_SUBSET:
	        case MySqlParser.GTID_SUBTRACT:
	        case MySqlParser.HEX:
	        case MySqlParser.IFNULL:
	        case MySqlParser.INET6_ATON:
	        case MySqlParser.INET6_NTOA:
	        case MySqlParser.INET_ATON:
	        case MySqlParser.INET_NTOA:
	        case MySqlParser.INSTR:
	        case MySqlParser.INTERIORRINGN:
	        case MySqlParser.INTERSECTS:
	        case MySqlParser.ISCLOSED:
	        case MySqlParser.ISEMPTY:
	        case MySqlParser.ISNULL:
	        case MySqlParser.ISSIMPLE:
	        case MySqlParser.IS_FREE_LOCK:
	        case MySqlParser.IS_IPV4:
	        case MySqlParser.IS_IPV4_COMPAT:
	        case MySqlParser.IS_IPV4_MAPPED:
	        case MySqlParser.IS_IPV6:
	        case MySqlParser.IS_USED_LOCK:
	        case MySqlParser.LAST_INSERT_ID:
	        case MySqlParser.LCASE:
	        case MySqlParser.LEAST:
	        case MySqlParser.LENGTH:
	        case MySqlParser.LINEFROMTEXT:
	        case MySqlParser.LINEFROMWKB:
	        case MySqlParser.LINESTRINGFROMTEXT:
	        case MySqlParser.LINESTRINGFROMWKB:
	        case MySqlParser.LN:
	        case MySqlParser.LOAD_FILE:
	        case MySqlParser.LOCATE:
	        case MySqlParser.LOG:
	        case MySqlParser.LOG10:
	        case MySqlParser.LOG2:
	        case MySqlParser.LOWER:
	        case MySqlParser.LPAD:
	        case MySqlParser.LTRIM:
	        case MySqlParser.MAKEDATE:
	        case MySqlParser.MAKETIME:
	        case MySqlParser.MAKE_SET:
	        case MySqlParser.MASTER_POS_WAIT:
	        case MySqlParser.MBRCONTAINS:
	        case MySqlParser.MBRDISJOINT:
	        case MySqlParser.MBREQUAL:
	        case MySqlParser.MBRINTERSECTS:
	        case MySqlParser.MBROVERLAPS:
	        case MySqlParser.MBRTOUCHES:
	        case MySqlParser.MBRWITHIN:
	        case MySqlParser.MD5:
	        case MySqlParser.MLINEFROMTEXT:
	        case MySqlParser.MLINEFROMWKB:
	        case MySqlParser.MONTHNAME:
	        case MySqlParser.MPOINTFROMTEXT:
	        case MySqlParser.MPOINTFROMWKB:
	        case MySqlParser.MPOLYFROMTEXT:
	        case MySqlParser.MPOLYFROMWKB:
	        case MySqlParser.MULTILINESTRINGFROMTEXT:
	        case MySqlParser.MULTILINESTRINGFROMWKB:
	        case MySqlParser.MULTIPOINTFROMTEXT:
	        case MySqlParser.MULTIPOINTFROMWKB:
	        case MySqlParser.MULTIPOLYGONFROMTEXT:
	        case MySqlParser.MULTIPOLYGONFROMWKB:
	        case MySqlParser.NAME_CONST:
	        case MySqlParser.NULLIF:
	        case MySqlParser.NUMGEOMETRIES:
	        case MySqlParser.NUMINTERIORRINGS:
	        case MySqlParser.NUMPOINTS:
	        case MySqlParser.OCT:
	        case MySqlParser.OCTET_LENGTH:
	        case MySqlParser.ORD:
	        case MySqlParser.OVERLAPS:
	        case MySqlParser.PERIOD_ADD:
	        case MySqlParser.PERIOD_DIFF:
	        case MySqlParser.PI:
	        case MySqlParser.POINTFROMTEXT:
	        case MySqlParser.POINTFROMWKB:
	        case MySqlParser.POINTN:
	        case MySqlParser.POLYFROMTEXT:
	        case MySqlParser.POLYFROMWKB:
	        case MySqlParser.POLYGONFROMTEXT:
	        case MySqlParser.POLYGONFROMWKB:
	        case MySqlParser.POW:
	        case MySqlParser.POWER:
	        case MySqlParser.QUOTE:
	        case MySqlParser.RADIANS:
	        case MySqlParser.RAND:
	        case MySqlParser.RANDOM_BYTES:
	        case MySqlParser.RELEASE_LOCK:
	        case MySqlParser.REVERSE:
	        case MySqlParser.ROUND:
	        case MySqlParser.ROW_COUNT:
	        case MySqlParser.RPAD:
	        case MySqlParser.RTRIM:
	        case MySqlParser.SEC_TO_TIME:
	        case MySqlParser.SESSION_USER:
	        case MySqlParser.SHA:
	        case MySqlParser.SHA1:
	        case MySqlParser.SHA2:
	        case MySqlParser.SIGN:
	        case MySqlParser.SIN:
	        case MySqlParser.SLEEP:
	        case MySqlParser.SOUNDEX:
	        case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
	        case MySqlParser.SQRT:
	        case MySqlParser.SRID:
	        case MySqlParser.STARTPOINT:
	        case MySqlParser.STRCMP:
	        case MySqlParser.STR_TO_DATE:
	        case MySqlParser.ST_AREA:
	        case MySqlParser.ST_ASBINARY:
	        case MySqlParser.ST_ASTEXT:
	        case MySqlParser.ST_ASWKB:
	        case MySqlParser.ST_ASWKT:
	        case MySqlParser.ST_BUFFER:
	        case MySqlParser.ST_CENTROID:
	        case MySqlParser.ST_CONTAINS:
	        case MySqlParser.ST_CROSSES:
	        case MySqlParser.ST_DIFFERENCE:
	        case MySqlParser.ST_DIMENSION:
	        case MySqlParser.ST_DISJOINT:
	        case MySqlParser.ST_DISTANCE:
	        case MySqlParser.ST_ENDPOINT:
	        case MySqlParser.ST_ENVELOPE:
	        case MySqlParser.ST_EQUALS:
	        case MySqlParser.ST_EXTERIORRING:
	        case MySqlParser.ST_GEOMCOLLFROMTEXT:
	        case MySqlParser.ST_GEOMCOLLFROMTXT:
	        case MySqlParser.ST_GEOMCOLLFROMWKB:
	        case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
	        case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
	        case MySqlParser.ST_GEOMETRYFROMTEXT:
	        case MySqlParser.ST_GEOMETRYFROMWKB:
	        case MySqlParser.ST_GEOMETRYN:
	        case MySqlParser.ST_GEOMETRYTYPE:
	        case MySqlParser.ST_GEOMFROMTEXT:
	        case MySqlParser.ST_GEOMFROMWKB:
	        case MySqlParser.ST_INTERIORRINGN:
	        case MySqlParser.ST_INTERSECTION:
	        case MySqlParser.ST_INTERSECTS:
	        case MySqlParser.ST_ISCLOSED:
	        case MySqlParser.ST_ISEMPTY:
	        case MySqlParser.ST_ISSIMPLE:
	        case MySqlParser.ST_LINEFROMTEXT:
	        case MySqlParser.ST_LINEFROMWKB:
	        case MySqlParser.ST_LINESTRINGFROMTEXT:
	        case MySqlParser.ST_LINESTRINGFROMWKB:
	        case MySqlParser.ST_NUMGEOMETRIES:
	        case MySqlParser.ST_NUMINTERIORRING:
	        case MySqlParser.ST_NUMINTERIORRINGS:
	        case MySqlParser.ST_NUMPOINTS:
	        case MySqlParser.ST_OVERLAPS:
	        case MySqlParser.ST_POINTFROMTEXT:
	        case MySqlParser.ST_POINTFROMWKB:
	        case MySqlParser.ST_POINTN:
	        case MySqlParser.ST_POLYFROMTEXT:
	        case MySqlParser.ST_POLYFROMWKB:
	        case MySqlParser.ST_POLYGONFROMTEXT:
	        case MySqlParser.ST_POLYGONFROMWKB:
	        case MySqlParser.ST_SRID:
	        case MySqlParser.ST_STARTPOINT:
	        case MySqlParser.ST_SYMDIFFERENCE:
	        case MySqlParser.ST_TOUCHES:
	        case MySqlParser.ST_UNION:
	        case MySqlParser.ST_WITHIN:
	        case MySqlParser.ST_X:
	        case MySqlParser.ST_Y:
	        case MySqlParser.SUBDATE:
	        case MySqlParser.SUBSTRING_INDEX:
	        case MySqlParser.SUBTIME:
	        case MySqlParser.SYSTEM_USER:
	        case MySqlParser.TAN:
	        case MySqlParser.TIMEDIFF:
	        case MySqlParser.TIMESTAMPADD:
	        case MySqlParser.TIMESTAMPDIFF:
	        case MySqlParser.TIME_FORMAT:
	        case MySqlParser.TIME_TO_SEC:
	        case MySqlParser.TOUCHES:
	        case MySqlParser.TO_BASE64:
	        case MySqlParser.TO_DAYS:
	        case MySqlParser.TO_SECONDS:
	        case MySqlParser.UCASE:
	        case MySqlParser.UNCOMPRESS:
	        case MySqlParser.UNCOMPRESSED_LENGTH:
	        case MySqlParser.UNHEX:
	        case MySqlParser.UNIX_TIMESTAMP:
	        case MySqlParser.UPDATEXML:
	        case MySqlParser.UPPER:
	        case MySqlParser.UUID:
	        case MySqlParser.UUID_SHORT:
	        case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
	        case MySqlParser.VERSION:
	        case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
	        case MySqlParser.WEEKDAY:
	        case MySqlParser.WEEKOFYEAR:
	        case MySqlParser.WEIGHT_STRING:
	        case MySqlParser.WITHIN:
	        case MySqlParser.YEARWEEK:
	        case MySqlParser.Y_FUNCTION:
	        case MySqlParser.X_FUNCTION:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6135;
	            this.functionNameBase();
	            break;
	        case MySqlParser.ASCII:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6136;
	            this.match(MySqlParser.ASCII);
	            break;
	        case MySqlParser.CURDATE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6137;
	            this.match(MySqlParser.CURDATE);
	            break;
	        case MySqlParser.CURRENT_DATE:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6138;
	            this.match(MySqlParser.CURRENT_DATE);
	            break;
	        case MySqlParser.CURRENT_TIME:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6139;
	            this.match(MySqlParser.CURRENT_TIME);
	            break;
	        case MySqlParser.CURRENT_TIMESTAMP:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 6140;
	            this.match(MySqlParser.CURRENT_TIMESTAMP);
	            break;
	        case MySqlParser.CURTIME:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 6141;
	            this.match(MySqlParser.CURTIME);
	            break;
	        case MySqlParser.DATE_ADD:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 6142;
	            this.match(MySqlParser.DATE_ADD);
	            break;
	        case MySqlParser.DATE_SUB:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 6143;
	            this.match(MySqlParser.DATE_SUB);
	            break;
	        case MySqlParser.IF:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 6144;
	            this.match(MySqlParser.IF);
	            break;
	        case MySqlParser.INSERT:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 6145;
	            this.match(MySqlParser.INSERT);
	            break;
	        case MySqlParser.LOCALTIME:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 6146;
	            this.match(MySqlParser.LOCALTIME);
	            break;
	        case MySqlParser.LOCALTIMESTAMP:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 6147;
	            this.match(MySqlParser.LOCALTIMESTAMP);
	            break;
	        case MySqlParser.MID:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 6148;
	            this.match(MySqlParser.MID);
	            break;
	        case MySqlParser.NOW:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 6149;
	            this.match(MySqlParser.NOW);
	            break;
	        case MySqlParser.REPLACE:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 6150;
	            this.match(MySqlParser.REPLACE);
	            break;
	        case MySqlParser.SUBSTR:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 6151;
	            this.match(MySqlParser.SUBSTR);
	            break;
	        case MySqlParser.SUBSTRING:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 6152;
	            this.match(MySqlParser.SUBSTRING);
	            break;
	        case MySqlParser.SYSDATE:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 6153;
	            this.match(MySqlParser.SYSDATE);
	            break;
	        case MySqlParser.TRIM:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 6154;
	            this.match(MySqlParser.TRIM);
	            break;
	        case MySqlParser.UTC_DATE:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 6155;
	            this.match(MySqlParser.UTC_DATE);
	            break;
	        case MySqlParser.UTC_TIME:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 6156;
	            this.match(MySqlParser.UTC_TIME);
	            break;
	        case MySqlParser.UTC_TIMESTAMP:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 6157;
	            this.match(MySqlParser.UTC_TIMESTAMP);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	passwordFunctionClause() {
	    let localctx = new PasswordFunctionClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 594, MySqlParser.RULE_passwordFunctionClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6160;
	        localctx.functionName = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.OLD_PASSWORD || _la===MySqlParser.PASSWORD)) {
	            localctx.functionName = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 6161;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 6162;
	        this.functionArg();
	        this.state = 6163;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionArgs() {
	    let localctx = new FunctionArgsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 596, MySqlParser.RULE_functionArgs);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6169;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,907,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 6165;
	            this.constant();
	            break;

	        case 2:
	            this.state = 6166;
	            this.fullColumnName();
	            break;

	        case 3:
	            this.state = 6167;
	            this.functionCall();
	            break;

	        case 4:
	            this.state = 6168;
	            this.expression(0);
	            break;

	        }
	        this.state = 6180;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MySqlParser.COMMA) {
	            this.state = 6171;
	            this.match(MySqlParser.COMMA);
	            this.state = 6176;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,908,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 6172;
	                this.constant();
	                break;

	            case 2:
	                this.state = 6173;
	                this.fullColumnName();
	                break;

	            case 3:
	                this.state = 6174;
	                this.functionCall();
	                break;

	            case 4:
	                this.state = 6175;
	                this.expression(0);
	                break;

	            }
	            this.state = 6182;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionArg() {
	    let localctx = new FunctionArgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 598, MySqlParser.RULE_functionArg);
	    try {
	        this.state = 6187;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,910,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6183;
	            this.constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6184;
	            this.fullColumnName();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6185;
	            this.functionCall();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6186;
	            this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 600;
	    this.enterRecursionRule(localctx, 600, MySqlParser.RULE_expression, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6200;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,912,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new NotExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 6190;
	            localctx.notOperator = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.NOT || _la===MySqlParser.EXCLAMATION_SYMBOL)) {
	                localctx.notOperator = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6191;
	            this.expression(4);
	            break;

	        case 2:
	            localctx = new IsExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 6192;
	            this.predicate(0);
	            this.state = 6193;
	            this.match(MySqlParser.IS);
	            this.state = 6195;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MySqlParser.NOT) {
	                this.state = 6194;
	                this.match(MySqlParser.NOT);
	            }

	            this.state = 6197;
	            localctx.testValue = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===MySqlParser.FALSE || _la===MySqlParser.TRUE || _la===MySqlParser.UNKNOWN)) {
	                localctx.testValue = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 3:
	            localctx = new PredicateExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 6199;
	            this.predicate(0);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 6208;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,913,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new LogicalExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_expression);
	                this.state = 6202;
	                if (!( this.precpred(this._ctx, 3))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                }
	                this.state = 6203;
	                this.logicalOperator();
	                this.state = 6204;
	                this.expression(4); 
	            }
	            this.state = 6210;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,913,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	predicate(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new PredicateContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 602;
	    this.enterRecursionRule(localctx, 602, MySqlParser.RULE_predicate, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new ExpressionAtomPredicateContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 6214;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,914,this._ctx);
	        if(la_===1) {
	            this.state = 6212;
	            this.match(MySqlParser.LOCAL_ID);
	            this.state = 6213;
	            this.match(MySqlParser.VAR_ASSIGN);

	        }
	        this.state = 6216;
	        this.expressionAtom(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 6282;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,922,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 6280;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,921,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new BinaryComparasionPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
	                    this.state = 6218;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 6219;
	                    this.comparisonOperator();
	                    this.state = 6220;
	                    localctx.right = this.predicate(9);
	                    break;

	                case 2:
	                    localctx = new BetweenPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
	                    this.state = 6222;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 6224;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===MySqlParser.NOT) {
	                        this.state = 6223;
	                        this.match(MySqlParser.NOT);
	                    }

	                    this.state = 6226;
	                    this.match(MySqlParser.BETWEEN);
	                    this.state = 6227;
	                    this.predicate(0);
	                    this.state = 6228;
	                    this.match(MySqlParser.AND);
	                    this.state = 6229;
	                    this.predicate(7);
	                    break;

	                case 3:
	                    localctx = new SoundsLikePredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
	                    this.state = 6231;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 6232;
	                    this.match(MySqlParser.SOUNDS);
	                    this.state = 6233;
	                    this.match(MySqlParser.LIKE);
	                    this.state = 6234;
	                    this.predicate(6);
	                    break;

	                case 4:
	                    localctx = new RegexpPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
	                    this.state = 6235;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 6237;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===MySqlParser.NOT) {
	                        this.state = 6236;
	                        this.match(MySqlParser.NOT);
	                    }

	                    this.state = 6239;
	                    localctx.regex = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===MySqlParser.REGEXP || _la===MySqlParser.RLIKE)) {
	                        localctx.regex = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 6240;
	                    this.predicate(4);
	                    break;

	                case 5:
	                    localctx = new InPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
	                    this.state = 6241;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 6243;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===MySqlParser.NOT) {
	                        this.state = 6242;
	                        this.match(MySqlParser.NOT);
	                    }

	                    this.state = 6245;
	                    this.match(MySqlParser.IN);
	                    this.state = 6246;
	                    this.match(MySqlParser.LR_BRACKET);
	                    this.state = 6249;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,918,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 6247;
	                        this.selectStatement();
	                        break;

	                    case 2:
	                        this.state = 6248;
	                        this.expressions();
	                        break;

	                    }
	                    this.state = 6251;
	                    this.match(MySqlParser.RR_BRACKET);
	                    break;

	                case 6:
	                    localctx = new IsNullPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
	                    this.state = 6253;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 6254;
	                    this.match(MySqlParser.IS);
	                    this.state = 6255;
	                    this.nullNotnull();
	                    break;

	                case 7:
	                    localctx = new SubqueryComparasionPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
	                    this.state = 6256;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 6257;
	                    this.comparisonOperator();
	                    this.state = 6258;
	                    localctx.quantifier = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===MySqlParser.ALL || _la===MySqlParser.ANY || _la===MySqlParser.SOME)) {
	                        localctx.quantifier = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 6259;
	                    this.match(MySqlParser.LR_BRACKET);
	                    this.state = 6260;
	                    this.selectStatement();
	                    this.state = 6261;
	                    this.match(MySqlParser.RR_BRACKET);
	                    break;

	                case 8:
	                    localctx = new LikePredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
	                    this.state = 6263;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 6265;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===MySqlParser.NOT) {
	                        this.state = 6264;
	                        this.match(MySqlParser.NOT);
	                    }

	                    this.state = 6267;
	                    this.match(MySqlParser.LIKE);
	                    this.state = 6268;
	                    this.predicate(0);
	                    this.state = 6271;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,920,this._ctx);
	                    if(la_===1) {
	                        this.state = 6269;
	                        this.match(MySqlParser.ESCAPE);
	                        this.state = 6270;
	                        this.match(MySqlParser.STRING_LITERAL);

	                    }
	                    break;

	                case 9:
	                    localctx = new JsonMemberOfPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
	                    this.state = 6273;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 6274;
	                    this.match(MySqlParser.MEMBER);
	                    this.state = 6275;
	                    this.match(MySqlParser.OF);
	                    this.state = 6276;
	                    this.match(MySqlParser.LR_BRACKET);
	                    this.state = 6277;
	                    this.predicate(0);
	                    this.state = 6278;
	                    this.match(MySqlParser.RR_BRACKET);
	                    break;

	                } 
	            }
	            this.state = 6284;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,922,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	expressionAtom(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExpressionAtomContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 604;
	    this.enterRecursionRule(localctx, 604, MySqlParser.RULE_expressionAtom, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6330;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,925,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ConstantExpressionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 6286;
	            this.constant();
	            break;

	        case 2:
	            localctx = new FullColumnNameExpressionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 6287;
	            this.fullColumnName();
	            break;

	        case 3:
	            localctx = new FunctionCallExpressionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 6288;
	            this.functionCall();
	            break;

	        case 4:
	            localctx = new MysqlVariableExpressionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 6289;
	            this.mysqlVariable();
	            break;

	        case 5:
	            localctx = new UnaryExpressionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 6290;
	            this.unaryOperator();
	            this.state = 6291;
	            this.expressionAtom(10);
	            break;

	        case 6:
	            localctx = new BinaryExpressionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 6293;
	            this.match(MySqlParser.BINARY);
	            this.state = 6294;
	            this.expressionAtom(9);
	            break;

	        case 7:
	            localctx = new NestedExpressionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 6295;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6296;
	            this.expression(0);
	            this.state = 6301;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MySqlParser.COMMA) {
	                this.state = 6297;
	                this.match(MySqlParser.COMMA);
	                this.state = 6298;
	                this.expression(0);
	                this.state = 6303;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 6304;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 8:
	            localctx = new NestedRowExpressionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 6306;
	            this.match(MySqlParser.ROW);
	            this.state = 6307;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6308;
	            this.expression(0);
	            this.state = 6311; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 6309;
	                this.match(MySqlParser.COMMA);
	                this.state = 6310;
	                this.expression(0);
	                this.state = 6313; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===MySqlParser.COMMA);
	            this.state = 6315;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 9:
	            localctx = new ExistsExpessionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 6317;
	            this.match(MySqlParser.EXISTS);
	            this.state = 6318;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6319;
	            this.selectStatement();
	            this.state = 6320;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 10:
	            localctx = new SubqueryExpessionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 6322;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6323;
	            this.selectStatement();
	            this.state = 6324;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 11:
	            localctx = new IntervalExpressionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 6326;
	            this.match(MySqlParser.INTERVAL);
	            this.state = 6327;
	            this.expression(0);
	            this.state = 6328;
	            this.intervalType();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 6349;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,927,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 6347;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,926,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new BitExpressionAtomContext(this, new ExpressionAtomContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_expressionAtom);
	                    this.state = 6332;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 6333;
	                    this.bitOperator();
	                    this.state = 6334;
	                    localctx.right = this.expressionAtom(4);
	                    break;

	                case 2:
	                    localctx = new MathExpressionAtomContext(this, new ExpressionAtomContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_expressionAtom);
	                    this.state = 6336;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 6337;
	                    this.mathOperator();
	                    this.state = 6338;
	                    localctx.right = this.expressionAtom(3);
	                    break;

	                case 3:
	                    localctx = new JsonExpressionAtomContext(this, new ExpressionAtomContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_expressionAtom);
	                    this.state = 6340;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 6341;
	                    this.jsonOperator();
	                    this.state = 6342;
	                    localctx.right = this.expressionAtom(2);
	                    break;

	                case 4:
	                    localctx = new CollateExpressionAtomContext(this, new ExpressionAtomContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_expressionAtom);
	                    this.state = 6344;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 6345;
	                    this.match(MySqlParser.COLLATE);
	                    this.state = 6346;
	                    this.collationName();
	                    break;

	                } 
	            }
	            this.state = 6351;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,927,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	unaryOperator() {
	    let localctx = new UnaryOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 606, MySqlParser.RULE_unaryOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6352;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.NOT || ((((_la - 1008)) & ~0x1f) == 0 && ((1 << (_la - 1008)) & ((1 << (MySqlParser.PLUS - 1008)) | (1 << (MySqlParser.MINUS - 1008)) | (1 << (MySqlParser.EXCLAMATION_SYMBOL - 1008)) | (1 << (MySqlParser.BIT_NOT_OP - 1008)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparisonOperator() {
	    let localctx = new ComparisonOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 608, MySqlParser.RULE_comparisonOperator);
	    try {
	        this.state = 6368;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,928,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6354;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6355;
	            this.match(MySqlParser.GREATER_SYMBOL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6356;
	            this.match(MySqlParser.LESS_SYMBOL);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6357;
	            this.match(MySqlParser.LESS_SYMBOL);
	            this.state = 6358;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6359;
	            this.match(MySqlParser.GREATER_SYMBOL);
	            this.state = 6360;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 6361;
	            this.match(MySqlParser.LESS_SYMBOL);
	            this.state = 6362;
	            this.match(MySqlParser.GREATER_SYMBOL);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 6363;
	            this.match(MySqlParser.EXCLAMATION_SYMBOL);
	            this.state = 6364;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 6365;
	            this.match(MySqlParser.LESS_SYMBOL);
	            this.state = 6366;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 6367;
	            this.match(MySqlParser.GREATER_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logicalOperator() {
	    let localctx = new LogicalOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 610, MySqlParser.RULE_logicalOperator);
	    try {
	        this.state = 6377;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.AND:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6370;
	            this.match(MySqlParser.AND);
	            break;
	        case MySqlParser.BIT_AND_OP:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6371;
	            this.match(MySqlParser.BIT_AND_OP);
	            this.state = 6372;
	            this.match(MySqlParser.BIT_AND_OP);
	            break;
	        case MySqlParser.XOR:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6373;
	            this.match(MySqlParser.XOR);
	            break;
	        case MySqlParser.OR:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6374;
	            this.match(MySqlParser.OR);
	            break;
	        case MySqlParser.BIT_OR_OP:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6375;
	            this.match(MySqlParser.BIT_OR_OP);
	            this.state = 6376;
	            this.match(MySqlParser.BIT_OR_OP);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitOperator() {
	    let localctx = new BitOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 612, MySqlParser.RULE_bitOperator);
	    try {
	        this.state = 6386;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MySqlParser.LESS_SYMBOL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6379;
	            this.match(MySqlParser.LESS_SYMBOL);
	            this.state = 6380;
	            this.match(MySqlParser.LESS_SYMBOL);
	            break;
	        case MySqlParser.GREATER_SYMBOL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6381;
	            this.match(MySqlParser.GREATER_SYMBOL);
	            this.state = 6382;
	            this.match(MySqlParser.GREATER_SYMBOL);
	            break;
	        case MySqlParser.BIT_AND_OP:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6383;
	            this.match(MySqlParser.BIT_AND_OP);
	            break;
	        case MySqlParser.BIT_XOR_OP:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6384;
	            this.match(MySqlParser.BIT_XOR_OP);
	            break;
	        case MySqlParser.BIT_OR_OP:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6385;
	            this.match(MySqlParser.BIT_OR_OP);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mathOperator() {
	    let localctx = new MathOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 614, MySqlParser.RULE_mathOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6388;
	        _la = this._input.LA(1);
	        if(!(((((_la - 1005)) & ~0x1f) == 0 && ((1 << (_la - 1005)) & ((1 << (MySqlParser.STAR - 1005)) | (1 << (MySqlParser.DIVIDE - 1005)) | (1 << (MySqlParser.MODULE - 1005)) | (1 << (MySqlParser.PLUS - 1005)) | (1 << (MySqlParser.MINUSMINUS - 1005)) | (1 << (MySqlParser.MINUS - 1005)) | (1 << (MySqlParser.DIV - 1005)) | (1 << (MySqlParser.MOD - 1005)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsonOperator() {
	    let localctx = new JsonOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 616, MySqlParser.RULE_jsonOperator);
	    try {
	        this.state = 6395;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,931,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6390;
	            this.match(MySqlParser.MINUS);
	            this.state = 6391;
	            this.match(MySqlParser.GREATER_SYMBOL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6392;
	            this.match(MySqlParser.MINUS);
	            this.state = 6393;
	            this.match(MySqlParser.GREATER_SYMBOL);
	            this.state = 6394;
	            this.match(MySqlParser.GREATER_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charsetNameBase() {
	    let localctx = new CharsetNameBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 618, MySqlParser.RULE_charsetNameBase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6397;
	        _la = this._input.LA(1);
	        if(!(((((_la - 639)) & ~0x1f) == 0 && ((1 << (_la - 639)) & ((1 << (MySqlParser.ARMSCII8 - 639)) | (1 << (MySqlParser.ASCII - 639)) | (1 << (MySqlParser.BIG5 - 639)) | (1 << (MySqlParser.CP1250 - 639)) | (1 << (MySqlParser.CP1251 - 639)) | (1 << (MySqlParser.CP1256 - 639)) | (1 << (MySqlParser.CP1257 - 639)) | (1 << (MySqlParser.CP850 - 639)) | (1 << (MySqlParser.CP852 - 639)) | (1 << (MySqlParser.CP866 - 639)) | (1 << (MySqlParser.CP932 - 639)) | (1 << (MySqlParser.DEC8 - 639)) | (1 << (MySqlParser.EUCJPMS - 639)) | (1 << (MySqlParser.EUCKR - 639)) | (1 << (MySqlParser.GB2312 - 639)) | (1 << (MySqlParser.GBK - 639)) | (1 << (MySqlParser.GEOSTD8 - 639)) | (1 << (MySqlParser.GREEK - 639)) | (1 << (MySqlParser.HEBREW - 639)) | (1 << (MySqlParser.HP8 - 639)) | (1 << (MySqlParser.KEYBCS2 - 639)) | (1 << (MySqlParser.KOI8R - 639)) | (1 << (MySqlParser.KOI8U - 639)) | (1 << (MySqlParser.LATIN1 - 639)) | (1 << (MySqlParser.LATIN2 - 639)) | (1 << (MySqlParser.LATIN5 - 639)) | (1 << (MySqlParser.LATIN7 - 639)) | (1 << (MySqlParser.MACCE - 639)) | (1 << (MySqlParser.MACROMAN - 639)) | (1 << (MySqlParser.SJIS - 639)) | (1 << (MySqlParser.SWE7 - 639)) | (1 << (MySqlParser.TIS620 - 639)))) !== 0) || ((((_la - 671)) & ~0x1f) == 0 && ((1 << (_la - 671)) & ((1 << (MySqlParser.UCS2 - 671)) | (1 << (MySqlParser.UJIS - 671)) | (1 << (MySqlParser.UTF16 - 671)) | (1 << (MySqlParser.UTF16LE - 671)) | (1 << (MySqlParser.UTF32 - 671)) | (1 << (MySqlParser.UTF8 - 671)) | (1 << (MySqlParser.UTF8MB3 - 671)) | (1 << (MySqlParser.UTF8MB4 - 671)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionLevelBase() {
	    let localctx = new TransactionLevelBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 620, MySqlParser.RULE_transactionLevelBase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6399;
	        _la = this._input.LA(1);
	        if(!(((((_la - 691)) & ~0x1f) == 0 && ((1 << (_la - 691)) & ((1 << (MySqlParser.REPEATABLE - 691)) | (1 << (MySqlParser.COMMITTED - 691)) | (1 << (MySqlParser.UNCOMMITTED - 691)) | (1 << (MySqlParser.SERIALIZABLE - 691)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privilegesBase() {
	    let localctx = new PrivilegesBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 622, MySqlParser.RULE_privilegesBase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6401;
	        _la = this._input.LA(1);
	        if(!(((((_la - 604)) & ~0x1f) == 0 && ((1 << (_la - 604)) & ((1 << (MySqlParser.TABLES - 604)) | (1 << (MySqlParser.ROUTINE - 604)) | (1 << (MySqlParser.EXECUTE - 604)) | (1 << (MySqlParser.FILE - 604)) | (1 << (MySqlParser.PROCESS - 604)) | (1 << (MySqlParser.RELOAD - 604)) | (1 << (MySqlParser.SHUTDOWN - 604)) | (1 << (MySqlParser.SUPER - 604)) | (1 << (MySqlParser.PRIVILEGES - 604)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intervalTypeBase() {
	    let localctx = new IntervalTypeBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 624, MySqlParser.RULE_intervalTypeBase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6403;
	        _la = this._input.LA(1);
	        if(!(((((_la - 596)) & ~0x1f) == 0 && ((1 << (_la - 596)) & ((1 << (MySqlParser.QUARTER - 596)) | (1 << (MySqlParser.MONTH - 596)) | (1 << (MySqlParser.DAY - 596)) | (1 << (MySqlParser.HOUR - 596)) | (1 << (MySqlParser.MINUTE - 596)) | (1 << (MySqlParser.WEEK - 596)) | (1 << (MySqlParser.SECOND - 596)) | (1 << (MySqlParser.MICROSECOND - 596)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataTypeBase() {
	    let localctx = new DataTypeBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 626, MySqlParser.RULE_dataTypeBase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6405;
	        _la = this._input.LA(1);
	        if(!(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.TIMESTAMP - 199)) | (1 << (MySqlParser.DATETIME - 199)) | (1 << (MySqlParser.YEAR - 199)) | (1 << (MySqlParser.TEXT - 199)) | (1 << (MySqlParser.ENUM - 199)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keywordsCanBeId() {
	    let localctx = new KeywordsCanBeIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 628, MySqlParser.RULE_keywordsCanBeId);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6407;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.CURRENT || _la===MySqlParser.DIAGNOSTICS || _la===MySqlParser.NUMBER || _la===MySqlParser.STACKED || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (MySqlParser.SERIAL - 221)) | (1 << (MySqlParser.AVG - 221)) | (1 << (MySqlParser.BIT_AND - 221)) | (1 << (MySqlParser.BIT_OR - 221)) | (1 << (MySqlParser.BIT_XOR - 221)) | (1 << (MySqlParser.COUNT - 221)) | (1 << (MySqlParser.GROUP_CONCAT - 221)) | (1 << (MySqlParser.MAX - 221)) | (1 << (MySqlParser.MIN - 221)) | (1 << (MySqlParser.STD - 221)) | (1 << (MySqlParser.STDDEV - 221)) | (1 << (MySqlParser.STDDEV_POP - 221)) | (1 << (MySqlParser.STDDEV_SAMP - 221)) | (1 << (MySqlParser.SUM - 221)) | (1 << (MySqlParser.VAR_POP - 221)) | (1 << (MySqlParser.VAR_SAMP - 221)) | (1 << (MySqlParser.VARIANCE - 221)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySqlParser.ACCOUNT - 270)) | (1 << (MySqlParser.ACTION - 270)) | (1 << (MySqlParser.AFTER - 270)) | (1 << (MySqlParser.AGGREGATE - 270)) | (1 << (MySqlParser.ALGORITHM - 270)) | (1 << (MySqlParser.ANY - 270)) | (1 << (MySqlParser.AT - 270)) | (1 << (MySqlParser.AUTHORS - 270)) | (1 << (MySqlParser.AUTOCOMMIT - 270)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySqlParser.AUTO_INCREMENT - 270)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 270)) | (1 << (MySqlParser.BEGIN - 270)) | (1 << (MySqlParser.BINLOG - 270)) | (1 << (MySqlParser.BIT - 270)) | (1 << (MySqlParser.BLOCK - 270)) | (1 << (MySqlParser.BOOL - 270)) | (1 << (MySqlParser.BOOLEAN - 270)) | (1 << (MySqlParser.BTREE - 270)) | (1 << (MySqlParser.CACHE - 270)) | (1 << (MySqlParser.CASCADED - 270)) | (1 << (MySqlParser.CHAIN - 270)) | (1 << (MySqlParser.CHANGED - 270)) | (1 << (MySqlParser.CHANNEL - 270)) | (1 << (MySqlParser.CHECKSUM - 270)) | (1 << (MySqlParser.PAGE_CHECKSUM - 270)) | (1 << (MySqlParser.CIPHER - 270)) | (1 << (MySqlParser.CLASS_ORIGIN - 270)) | (1 << (MySqlParser.CLIENT - 270)) | (1 << (MySqlParser.CLOSE - 270)) | (1 << (MySqlParser.COALESCE - 270)) | (1 << (MySqlParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySqlParser.COLUMNS - 302)) | (1 << (MySqlParser.COLUMN_FORMAT - 302)) | (1 << (MySqlParser.COLUMN_NAME - 302)) | (1 << (MySqlParser.COMMENT - 302)) | (1 << (MySqlParser.COMMIT - 302)) | (1 << (MySqlParser.COMPACT - 302)) | (1 << (MySqlParser.COMPLETION - 302)) | (1 << (MySqlParser.COMPRESSED - 302)) | (1 << (MySqlParser.COMPRESSION - 302)) | (1 << (MySqlParser.CONCURRENT - 302)) | (1 << (MySqlParser.CONNECTION - 302)) | (1 << (MySqlParser.CONSISTENT - 302)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySqlParser.CONSTRAINT_NAME - 302)) | (1 << (MySqlParser.CONTAINS - 302)) | (1 << (MySqlParser.CONTEXT - 302)) | (1 << (MySqlParser.CONTRIBUTORS - 302)) | (1 << (MySqlParser.COPY - 302)) | (1 << (MySqlParser.CPU - 302)) | (1 << (MySqlParser.CURSOR_NAME - 302)) | (1 << (MySqlParser.DATA - 302)) | (1 << (MySqlParser.DATAFILE - 302)) | (1 << (MySqlParser.DEALLOCATE - 302)) | (1 << (MySqlParser.DEFAULT_AUTH - 302)) | (1 << (MySqlParser.DEFINER - 302)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 302)) | (1 << (MySqlParser.DES_KEY_FILE - 302)) | (1 << (MySqlParser.DIRECTORY - 302)) | (1 << (MySqlParser.DISABLE - 302)) | (1 << (MySqlParser.DISCARD - 302)) | (1 << (MySqlParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySqlParser.DO - 334)) | (1 << (MySqlParser.DUMPFILE - 334)) | (1 << (MySqlParser.DUPLICATE - 334)) | (1 << (MySqlParser.DYNAMIC - 334)) | (1 << (MySqlParser.ENABLE - 334)) | (1 << (MySqlParser.ENCRYPTION - 334)) | (1 << (MySqlParser.END - 334)) | (1 << (MySqlParser.ENDS - 334)) | (1 << (MySqlParser.ENGINE - 334)) | (1 << (MySqlParser.ENGINES - 334)) | (1 << (MySqlParser.ERROR - 334)) | (1 << (MySqlParser.ERRORS - 334)) | (1 << (MySqlParser.ESCAPE - 334)) | (1 << (MySqlParser.EVEN - 334)) | (1 << (MySqlParser.EVENT - 334)) | (1 << (MySqlParser.EVENTS - 334)) | (1 << (MySqlParser.EVERY - 334)) | (1 << (MySqlParser.EXCHANGE - 334)) | (1 << (MySqlParser.EXCLUSIVE - 334)) | (1 << (MySqlParser.EXPIRE - 334)) | (1 << (MySqlParser.EXPORT - 334)) | (1 << (MySqlParser.EXTENDED - 334)) | (1 << (MySqlParser.EXTENT_SIZE - 334)) | (1 << (MySqlParser.FAST - 334)) | (1 << (MySqlParser.FAULTS - 334)) | (1 << (MySqlParser.FIELDS - 334)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySqlParser.FILTER - 334)) | (1 << (MySqlParser.FIRST - 334)) | (1 << (MySqlParser.FIXED - 334)) | (1 << (MySqlParser.FLUSH - 334)) | (1 << (MySqlParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySqlParser.FOUND - 366)) | (1 << (MySqlParser.FULL - 366)) | (1 << (MySqlParser.FUNCTION - 366)) | (1 << (MySqlParser.GENERAL - 366)) | (1 << (MySqlParser.GLOBAL - 366)) | (1 << (MySqlParser.GRANTS - 366)) | (1 << (MySqlParser.GROUP_REPLICATION - 366)) | (1 << (MySqlParser.HANDLER - 366)) | (1 << (MySqlParser.HASH - 366)) | (1 << (MySqlParser.HELP - 366)) | (1 << (MySqlParser.HOST - 366)) | (1 << (MySqlParser.HOSTS - 366)) | (1 << (MySqlParser.IDENTIFIED - 366)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySqlParser.IMPORT - 366)) | (1 << (MySqlParser.INDEXES - 366)) | (1 << (MySqlParser.INITIAL_SIZE - 366)) | (1 << (MySqlParser.INPLACE - 366)) | (1 << (MySqlParser.INSERT_METHOD - 366)) | (1 << (MySqlParser.INSTALL - 366)) | (1 << (MySqlParser.INSTANCE - 366)) | (1 << (MySqlParser.INVOKER - 366)) | (1 << (MySqlParser.IO - 366)) | (1 << (MySqlParser.IO_THREAD - 366)) | (1 << (MySqlParser.IPC - 366)) | (1 << (MySqlParser.ISOLATION - 366)) | (1 << (MySqlParser.ISSUER - 366)) | (1 << (MySqlParser.JSON - 366)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySqlParser.LANGUAGE - 366)) | (1 << (MySqlParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySqlParser.LEAVES - 398)) | (1 << (MySqlParser.LESS - 398)) | (1 << (MySqlParser.LEVEL - 398)) | (1 << (MySqlParser.LIST - 398)) | (1 << (MySqlParser.LOCAL - 398)) | (1 << (MySqlParser.LOGFILE - 398)) | (1 << (MySqlParser.LOGS - 398)) | (1 << (MySqlParser.MASTER - 398)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySqlParser.MASTER_DELAY - 398)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySqlParser.MASTER_HOST - 398)) | (1 << (MySqlParser.MASTER_LOG_FILE - 398)) | (1 << (MySqlParser.MASTER_LOG_POS - 398)) | (1 << (MySqlParser.MASTER_PASSWORD - 398)) | (1 << (MySqlParser.MASTER_PORT - 398)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySqlParser.MASTER_SSL - 398)) | (1 << (MySqlParser.MASTER_SSL_CA - 398)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_CERT - 398)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySqlParser.MASTER_SSL_CRL - 398)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySqlParser.MASTER_SSL_KEY - 398)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 398)) | (1 << (MySqlParser.MASTER_USER - 398)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySqlParser.MAX_ROWS - 398)) | (1 << (MySqlParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySqlParser.MEDIUM - 430)) | (1 << (MySqlParser.MEMBER - 430)) | (1 << (MySqlParser.MERGE - 430)) | (1 << (MySqlParser.MESSAGE_TEXT - 430)) | (1 << (MySqlParser.MID - 430)) | (1 << (MySqlParser.MIGRATE - 430)) | (1 << (MySqlParser.MIN_ROWS - 430)) | (1 << (MySqlParser.MODE - 430)) | (1 << (MySqlParser.MODIFY - 430)) | (1 << (MySqlParser.MUTEX - 430)) | (1 << (MySqlParser.MYSQL - 430)) | (1 << (MySqlParser.MYSQL_ERRNO - 430)) | (1 << (MySqlParser.NAME - 430)) | (1 << (MySqlParser.NAMES - 430)) | (1 << (MySqlParser.NCHAR - 430)) | (1 << (MySqlParser.NEVER - 430)) | (1 << (MySqlParser.NEXT - 430)) | (1 << (MySqlParser.NO - 430)) | (1 << (MySqlParser.NODEGROUP - 430)) | (1 << (MySqlParser.NONE - 430)) | (1 << (MySqlParser.OFFLINE - 430)) | (1 << (MySqlParser.OFFSET - 430)) | (1 << (MySqlParser.OF - 430)) | (1 << (MySqlParser.OJ - 430)) | (1 << (MySqlParser.OLD_PASSWORD - 430)) | (1 << (MySqlParser.ONE - 430)) | (1 << (MySqlParser.ONLINE - 430)) | (1 << (MySqlParser.ONLY - 430)) | (1 << (MySqlParser.OPEN - 430)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySqlParser.OPTIONS - 462)) | (1 << (MySqlParser.OWNER - 462)) | (1 << (MySqlParser.PACK_KEYS - 462)) | (1 << (MySqlParser.PAGE - 462)) | (1 << (MySqlParser.PARSER - 462)) | (1 << (MySqlParser.PARTIAL - 462)) | (1 << (MySqlParser.PARTITIONING - 462)) | (1 << (MySqlParser.PARTITIONS - 462)) | (1 << (MySqlParser.PASSWORD - 462)) | (1 << (MySqlParser.PHASE - 462)) | (1 << (MySqlParser.PLUGIN - 462)) | (1 << (MySqlParser.PLUGIN_DIR - 462)) | (1 << (MySqlParser.PLUGINS - 462)) | (1 << (MySqlParser.PORT - 462)) | (1 << (MySqlParser.PRECEDES - 462)) | (1 << (MySqlParser.PREPARE - 462)) | (1 << (MySqlParser.PRESERVE - 462)) | (1 << (MySqlParser.PREV - 462)) | (1 << (MySqlParser.PROCESSLIST - 462)) | (1 << (MySqlParser.PROFILE - 462)) | (1 << (MySqlParser.PROFILES - 462)) | (1 << (MySqlParser.PROXY - 462)) | (1 << (MySqlParser.QUERY - 462)) | (1 << (MySqlParser.QUICK - 462)) | (1 << (MySqlParser.REBUILD - 462)) | (1 << (MySqlParser.RECOVER - 462)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySqlParser.REDUNDANT - 462)) | (1 << (MySqlParser.RELAY - 462)) | (1 << (MySqlParser.RELAY_LOG_FILE - 462)) | (1 << (MySqlParser.RELAY_LOG_POS - 462)) | (1 << (MySqlParser.RELAYLOG - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySqlParser.REMOVE - 494)) | (1 << (MySqlParser.REORGANIZE - 494)) | (1 << (MySqlParser.REPAIR - 494)) | (1 << (MySqlParser.REPLICATE_DO_DB - 494)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySqlParser.REPLICATION - 494)) | (1 << (MySqlParser.RESET - 494)) | (1 << (MySqlParser.RESUME - 494)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 494)) | (1 << (MySqlParser.RETURNS - 494)) | (1 << (MySqlParser.ROLE - 494)) | (1 << (MySqlParser.ROLLBACK - 494)) | (1 << (MySqlParser.ROLLUP - 494)) | (1 << (MySqlParser.ROTATE - 494)) | (1 << (MySqlParser.ROW - 494)) | (1 << (MySqlParser.ROWS - 494)) | (1 << (MySqlParser.ROW_FORMAT - 494)) | (1 << (MySqlParser.SAVEPOINT - 494)) | (1 << (MySqlParser.SCHEDULE - 494)) | (1 << (MySqlParser.SECURITY - 494)) | (1 << (MySqlParser.SERVER - 494)) | (1 << (MySqlParser.SESSION - 494)) | (1 << (MySqlParser.SHARE - 494)) | (1 << (MySqlParser.SHARED - 494)) | (1 << (MySqlParser.SIGNED - 494)) | (1 << (MySqlParser.SIMPLE - 494)) | (1 << (MySqlParser.SLAVE - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySqlParser.SLOW - 526)) | (1 << (MySqlParser.SNAPSHOT - 526)) | (1 << (MySqlParser.SOCKET - 526)) | (1 << (MySqlParser.SOME - 526)) | (1 << (MySqlParser.SONAME - 526)) | (1 << (MySqlParser.SOUNDS - 526)) | (1 << (MySqlParser.SOURCE - 526)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySqlParser.SQL_CACHE - 526)) | (1 << (MySqlParser.SQL_NO_CACHE - 526)) | (1 << (MySqlParser.SQL_THREAD - 526)) | (1 << (MySqlParser.START - 526)) | (1 << (MySqlParser.STARTS - 526)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 526)) | (1 << (MySqlParser.STATS_PERSISTENT - 526)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySqlParser.STATUS - 526)) | (1 << (MySqlParser.STOP - 526)) | (1 << (MySqlParser.STORAGE - 526)) | (1 << (MySqlParser.STRING - 526)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySqlParser.SUBJECT - 526)) | (1 << (MySqlParser.SUBPARTITION - 526)) | (1 << (MySqlParser.SUBPARTITIONS - 526)) | (1 << (MySqlParser.SUSPEND - 526)) | (1 << (MySqlParser.SWAPS - 526)) | (1 << (MySqlParser.SWITCHES - 526)) | (1 << (MySqlParser.TABLE_NAME - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySqlParser.TABLESPACE - 558)) | (1 << (MySqlParser.TEMPORARY - 558)) | (1 << (MySqlParser.TEMPTABLE - 558)) | (1 << (MySqlParser.THAN - 558)) | (1 << (MySqlParser.TRADITIONAL - 558)) | (1 << (MySqlParser.TRANSACTION - 558)) | (1 << (MySqlParser.TRANSACTIONAL - 558)) | (1 << (MySqlParser.TRIGGERS - 558)) | (1 << (MySqlParser.TRUNCATE - 558)) | (1 << (MySqlParser.UNDEFINED - 558)) | (1 << (MySqlParser.UNDOFILE - 558)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySqlParser.UNINSTALL - 558)) | (1 << (MySqlParser.UNKNOWN - 558)) | (1 << (MySqlParser.UNTIL - 558)) | (1 << (MySqlParser.UPGRADE - 558)) | (1 << (MySqlParser.USER - 558)) | (1 << (MySqlParser.USE_FRM - 558)) | (1 << (MySqlParser.USER_RESOURCES - 558)) | (1 << (MySqlParser.VALIDATION - 558)) | (1 << (MySqlParser.VALUE - 558)) | (1 << (MySqlParser.VARIABLES - 558)) | (1 << (MySqlParser.VIEW - 558)) | (1 << (MySqlParser.WAIT - 558)) | (1 << (MySqlParser.WARNINGS - 558)) | (1 << (MySqlParser.WITHOUT - 558)) | (1 << (MySqlParser.WORK - 558)) | (1 << (MySqlParser.WRAPPER - 558)) | (1 << (MySqlParser.X509 - 558)) | (1 << (MySqlParser.XA - 558)))) !== 0) || ((((_la - 590)) & ~0x1f) == 0 && ((1 << (_la - 590)) & ((1 << (MySqlParser.XML - 590)) | (1 << (MySqlParser.INTERNAL - 590)) | (1 << (MySqlParser.AUDIT_ADMIN - 590)) | (1 << (MySqlParser.BACKUP_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ADMIN - 590)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 590)) | (1 << (MySqlParser.CLONE_ADMIN - 590)) | (1 << (MySqlParser.CONNECTION_ADMIN - 590)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 590)) | (1 << (MySqlParser.FIREWALL_ADMIN - 590)))) !== 0) || ((((_la - 622)) & ~0x1f) == 0 && ((1 << (_la - 622)) & ((1 << (MySqlParser.FIREWALL_USER - 622)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 622)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 622)) | (1 << (MySqlParser.NDB_STORED_USER - 622)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.REPLICATION_APPLIER - 622)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 622)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 622)) | (1 << (MySqlParser.ROLE_ADMIN - 622)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.SET_USER_ID - 622)) | (1 << (MySqlParser.SHOW_ROUTINE - 622)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 622)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 622)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 622)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 622)))) !== 0) || _la===MySqlParser.MEMORY || _la===MySqlParser.CATALOG_NAME || _la===MySqlParser.SCHEMA_NAME)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionNameBase() {
	    let localctx = new FunctionNameBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 630, MySqlParser.RULE_functionNameBase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6409;
	        _la = this._input.LA(1);
	        if(!(_la===MySqlParser.DATABASE || _la===MySqlParser.LEFT || _la===MySqlParser.RIGHT || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySqlParser.DATE - 199)) | (1 << (MySqlParser.TIME - 199)) | (1 << (MySqlParser.TIMESTAMP - 199)) | (1 << (MySqlParser.YEAR - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.JSON_VALID - 233)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySqlParser.COUNT - 233)) | (1 << (MySqlParser.POSITION - 233)))) !== 0) || _la===MySqlParser.INVISIBLE || ((((_la - 582)) & ~0x1f) == 0 && ((1 << (_la - 582)) & ((1 << (MySqlParser.VISIBLE - 582)) | (1 << (MySqlParser.QUARTER - 582)) | (1 << (MySqlParser.MONTH - 582)) | (1 << (MySqlParser.DAY - 582)) | (1 << (MySqlParser.HOUR - 582)) | (1 << (MySqlParser.MINUTE - 582)) | (1 << (MySqlParser.WEEK - 582)) | (1 << (MySqlParser.SECOND - 582)) | (1 << (MySqlParser.MICROSECOND - 582)))) !== 0) || _la===MySqlParser.SESSION_VARIABLES_ADMIN || ((((_la - 695)) & ~0x1f) == 0 && ((1 << (_la - 695)) & ((1 << (MySqlParser.GEOMETRYCOLLECTION - 695)) | (1 << (MySqlParser.LINESTRING - 695)) | (1 << (MySqlParser.MULTILINESTRING - 695)) | (1 << (MySqlParser.MULTIPOINT - 695)) | (1 << (MySqlParser.MULTIPOLYGON - 695)) | (1 << (MySqlParser.POINT - 695)) | (1 << (MySqlParser.POLYGON - 695)) | (1 << (MySqlParser.ABS - 695)) | (1 << (MySqlParser.ACOS - 695)) | (1 << (MySqlParser.ADDDATE - 695)) | (1 << (MySqlParser.ADDTIME - 695)) | (1 << (MySqlParser.AES_DECRYPT - 695)) | (1 << (MySqlParser.AES_ENCRYPT - 695)) | (1 << (MySqlParser.AREA - 695)) | (1 << (MySqlParser.ASBINARY - 695)) | (1 << (MySqlParser.ASIN - 695)) | (1 << (MySqlParser.ASTEXT - 695)) | (1 << (MySqlParser.ASWKB - 695)) | (1 << (MySqlParser.ASWKT - 695)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 695)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 695)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 695)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 695)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 695)) | (1 << (MySqlParser.ATAN - 695)) | (1 << (MySqlParser.ATAN2 - 695)) | (1 << (MySqlParser.BENCHMARK - 695)) | (1 << (MySqlParser.BIN - 695)) | (1 << (MySqlParser.BIT_COUNT - 695)) | (1 << (MySqlParser.BIT_LENGTH - 695)))) !== 0) || ((((_la - 727)) & ~0x1f) == 0 && ((1 << (_la - 727)) & ((1 << (MySqlParser.BUFFER - 727)) | (1 << (MySqlParser.CEIL - 727)) | (1 << (MySqlParser.CEILING - 727)) | (1 << (MySqlParser.CENTROID - 727)) | (1 << (MySqlParser.CHARACTER_LENGTH - 727)) | (1 << (MySqlParser.CHARSET - 727)) | (1 << (MySqlParser.CHAR_LENGTH - 727)) | (1 << (MySqlParser.COERCIBILITY - 727)) | (1 << (MySqlParser.COLLATION - 727)) | (1 << (MySqlParser.COMPRESS - 727)) | (1 << (MySqlParser.CONCAT - 727)) | (1 << (MySqlParser.CONCAT_WS - 727)) | (1 << (MySqlParser.CONNECTION_ID - 727)) | (1 << (MySqlParser.CONV - 727)) | (1 << (MySqlParser.CONVERT_TZ - 727)) | (1 << (MySqlParser.COS - 727)) | (1 << (MySqlParser.COT - 727)) | (1 << (MySqlParser.CRC32 - 727)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 727)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 727)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 727)) | (1 << (MySqlParser.CREATE_DIGEST - 727)) | (1 << (MySqlParser.CROSSES - 727)) | (1 << (MySqlParser.DATEDIFF - 727)) | (1 << (MySqlParser.DATE_FORMAT - 727)) | (1 << (MySqlParser.DAYNAME - 727)) | (1 << (MySqlParser.DAYOFMONTH - 727)) | (1 << (MySqlParser.DAYOFWEEK - 727)) | (1 << (MySqlParser.DAYOFYEAR - 727)) | (1 << (MySqlParser.DECODE - 727)) | (1 << (MySqlParser.DEGREES - 727)))) !== 0) || ((((_la - 759)) & ~0x1f) == 0 && ((1 << (_la - 759)) & ((1 << (MySqlParser.DES_DECRYPT - 759)) | (1 << (MySqlParser.DES_ENCRYPT - 759)) | (1 << (MySqlParser.DIMENSION - 759)) | (1 << (MySqlParser.DISJOINT - 759)) | (1 << (MySqlParser.ELT - 759)) | (1 << (MySqlParser.ENCODE - 759)) | (1 << (MySqlParser.ENCRYPT - 759)) | (1 << (MySqlParser.ENDPOINT - 759)) | (1 << (MySqlParser.ENVELOPE - 759)) | (1 << (MySqlParser.EQUALS - 759)) | (1 << (MySqlParser.EXP - 759)) | (1 << (MySqlParser.EXPORT_SET - 759)) | (1 << (MySqlParser.EXTERIORRING - 759)) | (1 << (MySqlParser.EXTRACTVALUE - 759)) | (1 << (MySqlParser.FIELD - 759)) | (1 << (MySqlParser.FIND_IN_SET - 759)) | (1 << (MySqlParser.FLOOR - 759)) | (1 << (MySqlParser.FORMAT - 759)) | (1 << (MySqlParser.FOUND_ROWS - 759)) | (1 << (MySqlParser.FROM_BASE64 - 759)) | (1 << (MySqlParser.FROM_DAYS - 759)) | (1 << (MySqlParser.FROM_UNIXTIME - 759)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 759)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 759)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 759)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 759)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 759)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 759)) | (1 << (MySqlParser.GEOMETRYN - 759)) | (1 << (MySqlParser.GEOMETRYTYPE - 759)) | (1 << (MySqlParser.GEOMFROMTEXT - 759)) | (1 << (MySqlParser.GEOMFROMWKB - 759)))) !== 0) || ((((_la - 791)) & ~0x1f) == 0 && ((1 << (_la - 791)) & ((1 << (MySqlParser.GET_FORMAT - 791)) | (1 << (MySqlParser.GET_LOCK - 791)) | (1 << (MySqlParser.GLENGTH - 791)) | (1 << (MySqlParser.GREATEST - 791)) | (1 << (MySqlParser.GTID_SUBSET - 791)) | (1 << (MySqlParser.GTID_SUBTRACT - 791)) | (1 << (MySqlParser.HEX - 791)) | (1 << (MySqlParser.IFNULL - 791)) | (1 << (MySqlParser.INET6_ATON - 791)) | (1 << (MySqlParser.INET6_NTOA - 791)) | (1 << (MySqlParser.INET_ATON - 791)) | (1 << (MySqlParser.INET_NTOA - 791)) | (1 << (MySqlParser.INSTR - 791)) | (1 << (MySqlParser.INTERIORRINGN - 791)) | (1 << (MySqlParser.INTERSECTS - 791)) | (1 << (MySqlParser.ISCLOSED - 791)) | (1 << (MySqlParser.ISEMPTY - 791)) | (1 << (MySqlParser.ISNULL - 791)) | (1 << (MySqlParser.ISSIMPLE - 791)) | (1 << (MySqlParser.IS_FREE_LOCK - 791)) | (1 << (MySqlParser.IS_IPV4 - 791)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 791)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 791)) | (1 << (MySqlParser.IS_IPV6 - 791)) | (1 << (MySqlParser.IS_USED_LOCK - 791)) | (1 << (MySqlParser.LAST_INSERT_ID - 791)) | (1 << (MySqlParser.LCASE - 791)) | (1 << (MySqlParser.LEAST - 791)) | (1 << (MySqlParser.LENGTH - 791)) | (1 << (MySqlParser.LINEFROMTEXT - 791)) | (1 << (MySqlParser.LINEFROMWKB - 791)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 791)))) !== 0) || ((((_la - 823)) & ~0x1f) == 0 && ((1 << (_la - 823)) & ((1 << (MySqlParser.LINESTRINGFROMWKB - 823)) | (1 << (MySqlParser.LN - 823)) | (1 << (MySqlParser.LOAD_FILE - 823)) | (1 << (MySqlParser.LOCATE - 823)) | (1 << (MySqlParser.LOG - 823)) | (1 << (MySqlParser.LOG10 - 823)) | (1 << (MySqlParser.LOG2 - 823)) | (1 << (MySqlParser.LOWER - 823)) | (1 << (MySqlParser.LPAD - 823)) | (1 << (MySqlParser.LTRIM - 823)) | (1 << (MySqlParser.MAKEDATE - 823)) | (1 << (MySqlParser.MAKETIME - 823)) | (1 << (MySqlParser.MAKE_SET - 823)) | (1 << (MySqlParser.MASTER_POS_WAIT - 823)) | (1 << (MySqlParser.MBRCONTAINS - 823)) | (1 << (MySqlParser.MBRDISJOINT - 823)) | (1 << (MySqlParser.MBREQUAL - 823)) | (1 << (MySqlParser.MBRINTERSECTS - 823)) | (1 << (MySqlParser.MBROVERLAPS - 823)) | (1 << (MySqlParser.MBRTOUCHES - 823)) | (1 << (MySqlParser.MBRWITHIN - 823)) | (1 << (MySqlParser.MD5 - 823)) | (1 << (MySqlParser.MLINEFROMTEXT - 823)) | (1 << (MySqlParser.MLINEFROMWKB - 823)) | (1 << (MySqlParser.MONTHNAME - 823)) | (1 << (MySqlParser.MPOINTFROMTEXT - 823)) | (1 << (MySqlParser.MPOINTFROMWKB - 823)) | (1 << (MySqlParser.MPOLYFROMTEXT - 823)) | (1 << (MySqlParser.MPOLYFROMWKB - 823)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 823)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 823)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 823)))) !== 0) || ((((_la - 855)) & ~0x1f) == 0 && ((1 << (_la - 855)) & ((1 << (MySqlParser.MULTIPOINTFROMWKB - 855)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 855)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 855)) | (1 << (MySqlParser.NAME_CONST - 855)) | (1 << (MySqlParser.NULLIF - 855)) | (1 << (MySqlParser.NUMGEOMETRIES - 855)) | (1 << (MySqlParser.NUMINTERIORRINGS - 855)) | (1 << (MySqlParser.NUMPOINTS - 855)) | (1 << (MySqlParser.OCT - 855)) | (1 << (MySqlParser.OCTET_LENGTH - 855)) | (1 << (MySqlParser.ORD - 855)) | (1 << (MySqlParser.OVERLAPS - 855)) | (1 << (MySqlParser.PERIOD_ADD - 855)) | (1 << (MySqlParser.PERIOD_DIFF - 855)) | (1 << (MySqlParser.PI - 855)) | (1 << (MySqlParser.POINTFROMTEXT - 855)) | (1 << (MySqlParser.POINTFROMWKB - 855)) | (1 << (MySqlParser.POINTN - 855)) | (1 << (MySqlParser.POLYFROMTEXT - 855)) | (1 << (MySqlParser.POLYFROMWKB - 855)) | (1 << (MySqlParser.POLYGONFROMTEXT - 855)) | (1 << (MySqlParser.POLYGONFROMWKB - 855)) | (1 << (MySqlParser.POW - 855)) | (1 << (MySqlParser.POWER - 855)) | (1 << (MySqlParser.QUOTE - 855)) | (1 << (MySqlParser.RADIANS - 855)) | (1 << (MySqlParser.RAND - 855)) | (1 << (MySqlParser.RANDOM_BYTES - 855)) | (1 << (MySqlParser.RELEASE_LOCK - 855)) | (1 << (MySqlParser.REVERSE - 855)) | (1 << (MySqlParser.ROUND - 855)) | (1 << (MySqlParser.ROW_COUNT - 855)))) !== 0) || ((((_la - 887)) & ~0x1f) == 0 && ((1 << (_la - 887)) & ((1 << (MySqlParser.RPAD - 887)) | (1 << (MySqlParser.RTRIM - 887)) | (1 << (MySqlParser.SEC_TO_TIME - 887)) | (1 << (MySqlParser.SESSION_USER - 887)) | (1 << (MySqlParser.SHA - 887)) | (1 << (MySqlParser.SHA1 - 887)) | (1 << (MySqlParser.SHA2 - 887)) | (1 << (MySqlParser.SIGN - 887)) | (1 << (MySqlParser.SIN - 887)) | (1 << (MySqlParser.SLEEP - 887)) | (1 << (MySqlParser.SOUNDEX - 887)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 887)) | (1 << (MySqlParser.SQRT - 887)) | (1 << (MySqlParser.SRID - 887)) | (1 << (MySqlParser.STARTPOINT - 887)) | (1 << (MySqlParser.STRCMP - 887)) | (1 << (MySqlParser.STR_TO_DATE - 887)) | (1 << (MySqlParser.ST_AREA - 887)) | (1 << (MySqlParser.ST_ASBINARY - 887)) | (1 << (MySqlParser.ST_ASTEXT - 887)) | (1 << (MySqlParser.ST_ASWKB - 887)) | (1 << (MySqlParser.ST_ASWKT - 887)) | (1 << (MySqlParser.ST_BUFFER - 887)) | (1 << (MySqlParser.ST_CENTROID - 887)) | (1 << (MySqlParser.ST_CONTAINS - 887)) | (1 << (MySqlParser.ST_CROSSES - 887)) | (1 << (MySqlParser.ST_DIFFERENCE - 887)) | (1 << (MySqlParser.ST_DIMENSION - 887)) | (1 << (MySqlParser.ST_DISJOINT - 887)) | (1 << (MySqlParser.ST_DISTANCE - 887)) | (1 << (MySqlParser.ST_ENDPOINT - 887)))) !== 0) || ((((_la - 919)) & ~0x1f) == 0 && ((1 << (_la - 919)) & ((1 << (MySqlParser.ST_ENVELOPE - 919)) | (1 << (MySqlParser.ST_EQUALS - 919)) | (1 << (MySqlParser.ST_EXTERIORRING - 919)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 919)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 919)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 919)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 919)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 919)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 919)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 919)) | (1 << (MySqlParser.ST_GEOMETRYN - 919)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 919)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 919)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 919)) | (1 << (MySqlParser.ST_INTERIORRINGN - 919)) | (1 << (MySqlParser.ST_INTERSECTION - 919)) | (1 << (MySqlParser.ST_INTERSECTS - 919)) | (1 << (MySqlParser.ST_ISCLOSED - 919)) | (1 << (MySqlParser.ST_ISEMPTY - 919)) | (1 << (MySqlParser.ST_ISSIMPLE - 919)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 919)) | (1 << (MySqlParser.ST_LINEFROMWKB - 919)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 919)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 919)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 919)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 919)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 919)) | (1 << (MySqlParser.ST_NUMPOINTS - 919)) | (1 << (MySqlParser.ST_OVERLAPS - 919)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 919)) | (1 << (MySqlParser.ST_POINTFROMWKB - 919)) | (1 << (MySqlParser.ST_POINTN - 919)))) !== 0) || ((((_la - 951)) & ~0x1f) == 0 && ((1 << (_la - 951)) & ((1 << (MySqlParser.ST_POLYFROMTEXT - 951)) | (1 << (MySqlParser.ST_POLYFROMWKB - 951)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 951)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 951)) | (1 << (MySqlParser.ST_SRID - 951)) | (1 << (MySqlParser.ST_STARTPOINT - 951)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 951)) | (1 << (MySqlParser.ST_TOUCHES - 951)) | (1 << (MySqlParser.ST_UNION - 951)) | (1 << (MySqlParser.ST_WITHIN - 951)) | (1 << (MySqlParser.ST_X - 951)) | (1 << (MySqlParser.ST_Y - 951)) | (1 << (MySqlParser.SUBDATE - 951)) | (1 << (MySqlParser.SUBSTRING_INDEX - 951)) | (1 << (MySqlParser.SUBTIME - 951)) | (1 << (MySqlParser.SYSTEM_USER - 951)) | (1 << (MySqlParser.TAN - 951)) | (1 << (MySqlParser.TIMEDIFF - 951)) | (1 << (MySqlParser.TIMESTAMPADD - 951)) | (1 << (MySqlParser.TIMESTAMPDIFF - 951)) | (1 << (MySqlParser.TIME_FORMAT - 951)) | (1 << (MySqlParser.TIME_TO_SEC - 951)) | (1 << (MySqlParser.TOUCHES - 951)) | (1 << (MySqlParser.TO_BASE64 - 951)) | (1 << (MySqlParser.TO_DAYS - 951)) | (1 << (MySqlParser.TO_SECONDS - 951)) | (1 << (MySqlParser.UCASE - 951)) | (1 << (MySqlParser.UNCOMPRESS - 951)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 951)) | (1 << (MySqlParser.UNHEX - 951)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 951)) | (1 << (MySqlParser.UPDATEXML - 951)))) !== 0) || ((((_la - 983)) & ~0x1f) == 0 && ((1 << (_la - 983)) & ((1 << (MySqlParser.UPPER - 983)) | (1 << (MySqlParser.UUID - 983)) | (1 << (MySqlParser.UUID_SHORT - 983)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 983)) | (1 << (MySqlParser.VERSION - 983)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 983)) | (1 << (MySqlParser.WEEKDAY - 983)) | (1 << (MySqlParser.WEEKOFYEAR - 983)) | (1 << (MySqlParser.WEIGHT_STRING - 983)) | (1 << (MySqlParser.WITHIN - 983)) | (1 << (MySqlParser.YEARWEEK - 983)) | (1 << (MySqlParser.Y_FUNCTION - 983)) | (1 << (MySqlParser.X_FUNCTION - 983)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

MySqlParser.EOF = antlr4.Token.EOF;
MySqlParser.SPACE = 1;
MySqlParser.SPEC_MYSQL_COMMENT = 2;
MySqlParser.COMMENT_INPUT = 3;
MySqlParser.LINE_COMMENT = 4;
MySqlParser.ADD = 5;
MySqlParser.ALL = 6;
MySqlParser.ALTER = 7;
MySqlParser.ALWAYS = 8;
MySqlParser.ANALYZE = 9;
MySqlParser.AND = 10;
MySqlParser.AS = 11;
MySqlParser.ASC = 12;
MySqlParser.BEFORE = 13;
MySqlParser.BETWEEN = 14;
MySqlParser.BOTH = 15;
MySqlParser.BY = 16;
MySqlParser.CALL = 17;
MySqlParser.CASCADE = 18;
MySqlParser.CASE = 19;
MySqlParser.CAST = 20;
MySqlParser.CHANGE = 21;
MySqlParser.CHARACTER = 22;
MySqlParser.CHECK = 23;
MySqlParser.COLLATE = 24;
MySqlParser.COLUMN = 25;
MySqlParser.CONDITION = 26;
MySqlParser.CONSTRAINT = 27;
MySqlParser.CONTINUE = 28;
MySqlParser.CONVERT = 29;
MySqlParser.CREATE = 30;
MySqlParser.CROSS = 31;
MySqlParser.CURRENT = 32;
MySqlParser.CURRENT_USER = 33;
MySqlParser.CURSOR = 34;
MySqlParser.DATABASE = 35;
MySqlParser.DATABASES = 36;
MySqlParser.DECLARE = 37;
MySqlParser.DEFAULT = 38;
MySqlParser.DELAYED = 39;
MySqlParser.DELETE = 40;
MySqlParser.DESC = 41;
MySqlParser.DESCRIBE = 42;
MySqlParser.DETERMINISTIC = 43;
MySqlParser.DIAGNOSTICS = 44;
MySqlParser.DISTINCT = 45;
MySqlParser.DISTINCTROW = 46;
MySqlParser.DROP = 47;
MySqlParser.EACH = 48;
MySqlParser.ELSE = 49;
MySqlParser.ELSEIF = 50;
MySqlParser.ENCLOSED = 51;
MySqlParser.ESCAPED = 52;
MySqlParser.EXISTS = 53;
MySqlParser.EXIT = 54;
MySqlParser.EXPLAIN = 55;
MySqlParser.FALSE = 56;
MySqlParser.FETCH = 57;
MySqlParser.FOR = 58;
MySqlParser.FORCE = 59;
MySqlParser.FOREIGN = 60;
MySqlParser.FROM = 61;
MySqlParser.FULLTEXT = 62;
MySqlParser.GENERATED = 63;
MySqlParser.GET = 64;
MySqlParser.GRANT = 65;
MySqlParser.GROUP = 66;
MySqlParser.HAVING = 67;
MySqlParser.HIGH_PRIORITY = 68;
MySqlParser.IF = 69;
MySqlParser.IGNORE = 70;
MySqlParser.IN = 71;
MySqlParser.INDEX = 72;
MySqlParser.INFILE = 73;
MySqlParser.INNER = 74;
MySqlParser.INOUT = 75;
MySqlParser.INSERT = 76;
MySqlParser.INTERVAL = 77;
MySqlParser.INTO = 78;
MySqlParser.IS = 79;
MySqlParser.ITERATE = 80;
MySqlParser.JOIN = 81;
MySqlParser.KEY = 82;
MySqlParser.KEYS = 83;
MySqlParser.KILL = 84;
MySqlParser.LEADING = 85;
MySqlParser.LEAVE = 86;
MySqlParser.LEFT = 87;
MySqlParser.LIKE = 88;
MySqlParser.LIMIT = 89;
MySqlParser.LINEAR = 90;
MySqlParser.LINES = 91;
MySqlParser.LOAD = 92;
MySqlParser.LOCK = 93;
MySqlParser.LOOP = 94;
MySqlParser.LOW_PRIORITY = 95;
MySqlParser.MASTER_BIND = 96;
MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT = 97;
MySqlParser.MATCH = 98;
MySqlParser.MAXVALUE = 99;
MySqlParser.MODIFIES = 100;
MySqlParser.NATURAL = 101;
MySqlParser.NOT = 102;
MySqlParser.NO_WRITE_TO_BINLOG = 103;
MySqlParser.NULL_LITERAL = 104;
MySqlParser.NUMBER = 105;
MySqlParser.ON = 106;
MySqlParser.OPTIMIZE = 107;
MySqlParser.OPTION = 108;
MySqlParser.OPTIONALLY = 109;
MySqlParser.OR = 110;
MySqlParser.ORDER = 111;
MySqlParser.OUT = 112;
MySqlParser.OUTER = 113;
MySqlParser.OUTFILE = 114;
MySqlParser.PARTITION = 115;
MySqlParser.PRIMARY = 116;
MySqlParser.PROCEDURE = 117;
MySqlParser.PURGE = 118;
MySqlParser.RANGE = 119;
MySqlParser.READ = 120;
MySqlParser.READS = 121;
MySqlParser.REFERENCES = 122;
MySqlParser.REGEXP = 123;
MySqlParser.RELEASE = 124;
MySqlParser.RENAME = 125;
MySqlParser.REPEAT = 126;
MySqlParser.REPLACE = 127;
MySqlParser.REQUIRE = 128;
MySqlParser.RESIGNAL = 129;
MySqlParser.RESTRICT = 130;
MySqlParser.RETURN = 131;
MySqlParser.REVOKE = 132;
MySqlParser.RIGHT = 133;
MySqlParser.RLIKE = 134;
MySqlParser.SCHEMA = 135;
MySqlParser.SCHEMAS = 136;
MySqlParser.SELECT = 137;
MySqlParser.SET = 138;
MySqlParser.SEPARATOR = 139;
MySqlParser.SHOW = 140;
MySqlParser.SIGNAL = 141;
MySqlParser.SPATIAL = 142;
MySqlParser.SQL = 143;
MySqlParser.SQLEXCEPTION = 144;
MySqlParser.SQLSTATE = 145;
MySqlParser.SQLWARNING = 146;
MySqlParser.SQL_BIG_RESULT = 147;
MySqlParser.SQL_CALC_FOUND_ROWS = 148;
MySqlParser.SQL_SMALL_RESULT = 149;
MySqlParser.SSL = 150;
MySqlParser.STACKED = 151;
MySqlParser.STARTING = 152;
MySqlParser.STRAIGHT_JOIN = 153;
MySqlParser.TABLE = 154;
MySqlParser.TERMINATED = 155;
MySqlParser.THEN = 156;
MySqlParser.TO = 157;
MySqlParser.TRAILING = 158;
MySqlParser.TRIGGER = 159;
MySqlParser.TRUE = 160;
MySqlParser.UNDO = 161;
MySqlParser.UNION = 162;
MySqlParser.UNIQUE = 163;
MySqlParser.UNLOCK = 164;
MySqlParser.UNSIGNED = 165;
MySqlParser.UPDATE = 166;
MySqlParser.USAGE = 167;
MySqlParser.USE = 168;
MySqlParser.USING = 169;
MySqlParser.VALUES = 170;
MySqlParser.WHEN = 171;
MySqlParser.WHERE = 172;
MySqlParser.WHILE = 173;
MySqlParser.WITH = 174;
MySqlParser.WRITE = 175;
MySqlParser.XOR = 176;
MySqlParser.ZEROFILL = 177;
MySqlParser.TINYINT = 178;
MySqlParser.SMALLINT = 179;
MySqlParser.MEDIUMINT = 180;
MySqlParser.MIDDLEINT = 181;
MySqlParser.INT = 182;
MySqlParser.INT1 = 183;
MySqlParser.INT2 = 184;
MySqlParser.INT3 = 185;
MySqlParser.INT4 = 186;
MySqlParser.INT8 = 187;
MySqlParser.INTEGER = 188;
MySqlParser.BIGINT = 189;
MySqlParser.REAL = 190;
MySqlParser.DOUBLE = 191;
MySqlParser.PRECISION = 192;
MySqlParser.FLOAT = 193;
MySqlParser.FLOAT4 = 194;
MySqlParser.FLOAT8 = 195;
MySqlParser.DECIMAL = 196;
MySqlParser.DEC = 197;
MySqlParser.NUMERIC = 198;
MySqlParser.DATE = 199;
MySqlParser.TIME = 200;
MySqlParser.TIMESTAMP = 201;
MySqlParser.DATETIME = 202;
MySqlParser.YEAR = 203;
MySqlParser.CHAR = 204;
MySqlParser.VARCHAR = 205;
MySqlParser.NVARCHAR = 206;
MySqlParser.NATIONAL = 207;
MySqlParser.BINARY = 208;
MySqlParser.VARBINARY = 209;
MySqlParser.TINYBLOB = 210;
MySqlParser.BLOB = 211;
MySqlParser.MEDIUMBLOB = 212;
MySqlParser.LONG = 213;
MySqlParser.LONGBLOB = 214;
MySqlParser.TINYTEXT = 215;
MySqlParser.TEXT = 216;
MySqlParser.MEDIUMTEXT = 217;
MySqlParser.LONGTEXT = 218;
MySqlParser.ENUM = 219;
MySqlParser.VARYING = 220;
MySqlParser.SERIAL = 221;
MySqlParser.YEAR_MONTH = 222;
MySqlParser.DAY_HOUR = 223;
MySqlParser.DAY_MINUTE = 224;
MySqlParser.DAY_SECOND = 225;
MySqlParser.HOUR_MINUTE = 226;
MySqlParser.HOUR_SECOND = 227;
MySqlParser.MINUTE_SECOND = 228;
MySqlParser.SECOND_MICROSECOND = 229;
MySqlParser.MINUTE_MICROSECOND = 230;
MySqlParser.HOUR_MICROSECOND = 231;
MySqlParser.DAY_MICROSECOND = 232;
MySqlParser.JSON_VALID = 233;
MySqlParser.JSON_SCHEMA_VALID = 234;
MySqlParser.AVG = 235;
MySqlParser.BIT_AND = 236;
MySqlParser.BIT_OR = 237;
MySqlParser.BIT_XOR = 238;
MySqlParser.COUNT = 239;
MySqlParser.GROUP_CONCAT = 240;
MySqlParser.MAX = 241;
MySqlParser.MIN = 242;
MySqlParser.STD = 243;
MySqlParser.STDDEV = 244;
MySqlParser.STDDEV_POP = 245;
MySqlParser.STDDEV_SAMP = 246;
MySqlParser.SUM = 247;
MySqlParser.VAR_POP = 248;
MySqlParser.VAR_SAMP = 249;
MySqlParser.VARIANCE = 250;
MySqlParser.CURRENT_DATE = 251;
MySqlParser.CURRENT_TIME = 252;
MySqlParser.CURRENT_TIMESTAMP = 253;
MySqlParser.LOCALTIME = 254;
MySqlParser.CURDATE = 255;
MySqlParser.CURTIME = 256;
MySqlParser.DATE_ADD = 257;
MySqlParser.DATE_SUB = 258;
MySqlParser.EXTRACT = 259;
MySqlParser.LOCALTIMESTAMP = 260;
MySqlParser.NOW = 261;
MySqlParser.POSITION = 262;
MySqlParser.SUBSTR = 263;
MySqlParser.SUBSTRING = 264;
MySqlParser.SYSDATE = 265;
MySqlParser.TRIM = 266;
MySqlParser.UTC_DATE = 267;
MySqlParser.UTC_TIME = 268;
MySqlParser.UTC_TIMESTAMP = 269;
MySqlParser.ACCOUNT = 270;
MySqlParser.ACTION = 271;
MySqlParser.AFTER = 272;
MySqlParser.AGGREGATE = 273;
MySqlParser.ALGORITHM = 274;
MySqlParser.ANY = 275;
MySqlParser.AT = 276;
MySqlParser.AUTHORS = 277;
MySqlParser.AUTOCOMMIT = 278;
MySqlParser.AUTOEXTEND_SIZE = 279;
MySqlParser.AUTO_INCREMENT = 280;
MySqlParser.AVG_ROW_LENGTH = 281;
MySqlParser.BEGIN = 282;
MySqlParser.BINLOG = 283;
MySqlParser.BIT = 284;
MySqlParser.BLOCK = 285;
MySqlParser.BOOL = 286;
MySqlParser.BOOLEAN = 287;
MySqlParser.BTREE = 288;
MySqlParser.CACHE = 289;
MySqlParser.CASCADED = 290;
MySqlParser.CHAIN = 291;
MySqlParser.CHANGED = 292;
MySqlParser.CHANNEL = 293;
MySqlParser.CHECKSUM = 294;
MySqlParser.PAGE_CHECKSUM = 295;
MySqlParser.CIPHER = 296;
MySqlParser.CLASS_ORIGIN = 297;
MySqlParser.CLIENT = 298;
MySqlParser.CLOSE = 299;
MySqlParser.COALESCE = 300;
MySqlParser.CODE = 301;
MySqlParser.COLUMNS = 302;
MySqlParser.COLUMN_FORMAT = 303;
MySqlParser.COLUMN_NAME = 304;
MySqlParser.COMMENT = 305;
MySqlParser.COMMIT = 306;
MySqlParser.COMPACT = 307;
MySqlParser.COMPLETION = 308;
MySqlParser.COMPRESSED = 309;
MySqlParser.COMPRESSION = 310;
MySqlParser.CONCURRENT = 311;
MySqlParser.CONNECTION = 312;
MySqlParser.CONSISTENT = 313;
MySqlParser.CONSTRAINT_CATALOG = 314;
MySqlParser.CONSTRAINT_SCHEMA = 315;
MySqlParser.CONSTRAINT_NAME = 316;
MySqlParser.CONTAINS = 317;
MySqlParser.CONTEXT = 318;
MySqlParser.CONTRIBUTORS = 319;
MySqlParser.COPY = 320;
MySqlParser.CPU = 321;
MySqlParser.CURSOR_NAME = 322;
MySqlParser.DATA = 323;
MySqlParser.DATAFILE = 324;
MySqlParser.DEALLOCATE = 325;
MySqlParser.DEFAULT_AUTH = 326;
MySqlParser.DEFINER = 327;
MySqlParser.DELAY_KEY_WRITE = 328;
MySqlParser.DES_KEY_FILE = 329;
MySqlParser.DIRECTORY = 330;
MySqlParser.DISABLE = 331;
MySqlParser.DISCARD = 332;
MySqlParser.DISK = 333;
MySqlParser.DO = 334;
MySqlParser.DUMPFILE = 335;
MySqlParser.DUPLICATE = 336;
MySqlParser.DYNAMIC = 337;
MySqlParser.ENABLE = 338;
MySqlParser.ENCRYPTION = 339;
MySqlParser.END = 340;
MySqlParser.ENDS = 341;
MySqlParser.ENGINE = 342;
MySqlParser.ENGINES = 343;
MySqlParser.ERROR = 344;
MySqlParser.ERRORS = 345;
MySqlParser.ESCAPE = 346;
MySqlParser.EVEN = 347;
MySqlParser.EVENT = 348;
MySqlParser.EVENTS = 349;
MySqlParser.EVERY = 350;
MySqlParser.EXCHANGE = 351;
MySqlParser.EXCLUSIVE = 352;
MySqlParser.EXPIRE = 353;
MySqlParser.EXPORT = 354;
MySqlParser.EXTENDED = 355;
MySqlParser.EXTENT_SIZE = 356;
MySqlParser.FAST = 357;
MySqlParser.FAULTS = 358;
MySqlParser.FIELDS = 359;
MySqlParser.FILE_BLOCK_SIZE = 360;
MySqlParser.FILTER = 361;
MySqlParser.FIRST = 362;
MySqlParser.FIXED = 363;
MySqlParser.FLUSH = 364;
MySqlParser.FOLLOWS = 365;
MySqlParser.FOUND = 366;
MySqlParser.FULL = 367;
MySqlParser.FUNCTION = 368;
MySqlParser.GENERAL = 369;
MySqlParser.GLOBAL = 370;
MySqlParser.GRANTS = 371;
MySqlParser.GROUP_REPLICATION = 372;
MySqlParser.HANDLER = 373;
MySqlParser.HASH = 374;
MySqlParser.HELP = 375;
MySqlParser.HOST = 376;
MySqlParser.HOSTS = 377;
MySqlParser.IDENTIFIED = 378;
MySqlParser.IGNORE_SERVER_IDS = 379;
MySqlParser.IMPORT = 380;
MySqlParser.INDEXES = 381;
MySqlParser.INITIAL_SIZE = 382;
MySqlParser.INPLACE = 383;
MySqlParser.INSERT_METHOD = 384;
MySqlParser.INSTALL = 385;
MySqlParser.INSTANCE = 386;
MySqlParser.INVISIBLE = 387;
MySqlParser.INVOKER = 388;
MySqlParser.IO = 389;
MySqlParser.IO_THREAD = 390;
MySqlParser.IPC = 391;
MySqlParser.ISOLATION = 392;
MySqlParser.ISSUER = 393;
MySqlParser.JSON = 394;
MySqlParser.KEY_BLOCK_SIZE = 395;
MySqlParser.LANGUAGE = 396;
MySqlParser.LAST = 397;
MySqlParser.LEAVES = 398;
MySqlParser.LESS = 399;
MySqlParser.LEVEL = 400;
MySqlParser.LIST = 401;
MySqlParser.LOCAL = 402;
MySqlParser.LOGFILE = 403;
MySqlParser.LOGS = 404;
MySqlParser.MASTER = 405;
MySqlParser.MASTER_AUTO_POSITION = 406;
MySqlParser.MASTER_CONNECT_RETRY = 407;
MySqlParser.MASTER_DELAY = 408;
MySqlParser.MASTER_HEARTBEAT_PERIOD = 409;
MySqlParser.MASTER_HOST = 410;
MySqlParser.MASTER_LOG_FILE = 411;
MySqlParser.MASTER_LOG_POS = 412;
MySqlParser.MASTER_PASSWORD = 413;
MySqlParser.MASTER_PORT = 414;
MySqlParser.MASTER_RETRY_COUNT = 415;
MySqlParser.MASTER_SSL = 416;
MySqlParser.MASTER_SSL_CA = 417;
MySqlParser.MASTER_SSL_CAPATH = 418;
MySqlParser.MASTER_SSL_CERT = 419;
MySqlParser.MASTER_SSL_CIPHER = 420;
MySqlParser.MASTER_SSL_CRL = 421;
MySqlParser.MASTER_SSL_CRLPATH = 422;
MySqlParser.MASTER_SSL_KEY = 423;
MySqlParser.MASTER_TLS_VERSION = 424;
MySqlParser.MASTER_USER = 425;
MySqlParser.MAX_CONNECTIONS_PER_HOUR = 426;
MySqlParser.MAX_QUERIES_PER_HOUR = 427;
MySqlParser.MAX_ROWS = 428;
MySqlParser.MAX_SIZE = 429;
MySqlParser.MAX_UPDATES_PER_HOUR = 430;
MySqlParser.MAX_USER_CONNECTIONS = 431;
MySqlParser.MEDIUM = 432;
MySqlParser.MEMBER = 433;
MySqlParser.MERGE = 434;
MySqlParser.MESSAGE_TEXT = 435;
MySqlParser.MID = 436;
MySqlParser.MIGRATE = 437;
MySqlParser.MIN_ROWS = 438;
MySqlParser.MODE = 439;
MySqlParser.MODIFY = 440;
MySqlParser.MUTEX = 441;
MySqlParser.MYSQL = 442;
MySqlParser.MYSQL_ERRNO = 443;
MySqlParser.NAME = 444;
MySqlParser.NAMES = 445;
MySqlParser.NCHAR = 446;
MySqlParser.NEVER = 447;
MySqlParser.NEXT = 448;
MySqlParser.NO = 449;
MySqlParser.NODEGROUP = 450;
MySqlParser.NONE = 451;
MySqlParser.OFFLINE = 452;
MySqlParser.OFFSET = 453;
MySqlParser.OF = 454;
MySqlParser.OJ = 455;
MySqlParser.OLD_PASSWORD = 456;
MySqlParser.ONE = 457;
MySqlParser.ONLINE = 458;
MySqlParser.ONLY = 459;
MySqlParser.OPEN = 460;
MySqlParser.OPTIMIZER_COSTS = 461;
MySqlParser.OPTIONS = 462;
MySqlParser.OWNER = 463;
MySqlParser.PACK_KEYS = 464;
MySqlParser.PAGE = 465;
MySqlParser.PARSER = 466;
MySqlParser.PARTIAL = 467;
MySqlParser.PARTITIONING = 468;
MySqlParser.PARTITIONS = 469;
MySqlParser.PASSWORD = 470;
MySqlParser.PHASE = 471;
MySqlParser.PLUGIN = 472;
MySqlParser.PLUGIN_DIR = 473;
MySqlParser.PLUGINS = 474;
MySqlParser.PORT = 475;
MySqlParser.PRECEDES = 476;
MySqlParser.PREPARE = 477;
MySqlParser.PRESERVE = 478;
MySqlParser.PREV = 479;
MySqlParser.PROCESSLIST = 480;
MySqlParser.PROFILE = 481;
MySqlParser.PROFILES = 482;
MySqlParser.PROXY = 483;
MySqlParser.QUERY = 484;
MySqlParser.QUICK = 485;
MySqlParser.REBUILD = 486;
MySqlParser.RECOVER = 487;
MySqlParser.REDO_BUFFER_SIZE = 488;
MySqlParser.REDUNDANT = 489;
MySqlParser.RELAY = 490;
MySqlParser.RELAY_LOG_FILE = 491;
MySqlParser.RELAY_LOG_POS = 492;
MySqlParser.RELAYLOG = 493;
MySqlParser.REMOVE = 494;
MySqlParser.REORGANIZE = 495;
MySqlParser.REPAIR = 496;
MySqlParser.REPLICATE_DO_DB = 497;
MySqlParser.REPLICATE_DO_TABLE = 498;
MySqlParser.REPLICATE_IGNORE_DB = 499;
MySqlParser.REPLICATE_IGNORE_TABLE = 500;
MySqlParser.REPLICATE_REWRITE_DB = 501;
MySqlParser.REPLICATE_WILD_DO_TABLE = 502;
MySqlParser.REPLICATE_WILD_IGNORE_TABLE = 503;
MySqlParser.REPLICATION = 504;
MySqlParser.RESET = 505;
MySqlParser.RESUME = 506;
MySqlParser.RETURNED_SQLSTATE = 507;
MySqlParser.RETURNS = 508;
MySqlParser.ROLE = 509;
MySqlParser.ROLLBACK = 510;
MySqlParser.ROLLUP = 511;
MySqlParser.ROTATE = 512;
MySqlParser.ROW = 513;
MySqlParser.ROWS = 514;
MySqlParser.ROW_FORMAT = 515;
MySqlParser.SAVEPOINT = 516;
MySqlParser.SCHEDULE = 517;
MySqlParser.SECURITY = 518;
MySqlParser.SERVER = 519;
MySqlParser.SESSION = 520;
MySqlParser.SHARE = 521;
MySqlParser.SHARED = 522;
MySqlParser.SIGNED = 523;
MySqlParser.SIMPLE = 524;
MySqlParser.SLAVE = 525;
MySqlParser.SLOW = 526;
MySqlParser.SNAPSHOT = 527;
MySqlParser.SOCKET = 528;
MySqlParser.SOME = 529;
MySqlParser.SONAME = 530;
MySqlParser.SOUNDS = 531;
MySqlParser.SOURCE = 532;
MySqlParser.SQL_AFTER_GTIDS = 533;
MySqlParser.SQL_AFTER_MTS_GAPS = 534;
MySqlParser.SQL_BEFORE_GTIDS = 535;
MySqlParser.SQL_BUFFER_RESULT = 536;
MySqlParser.SQL_CACHE = 537;
MySqlParser.SQL_NO_CACHE = 538;
MySqlParser.SQL_THREAD = 539;
MySqlParser.START = 540;
MySqlParser.STARTS = 541;
MySqlParser.STATS_AUTO_RECALC = 542;
MySqlParser.STATS_PERSISTENT = 543;
MySqlParser.STATS_SAMPLE_PAGES = 544;
MySqlParser.STATUS = 545;
MySqlParser.STOP = 546;
MySqlParser.STORAGE = 547;
MySqlParser.STORED = 548;
MySqlParser.STRING = 549;
MySqlParser.SUBCLASS_ORIGIN = 550;
MySqlParser.SUBJECT = 551;
MySqlParser.SUBPARTITION = 552;
MySqlParser.SUBPARTITIONS = 553;
MySqlParser.SUSPEND = 554;
MySqlParser.SWAPS = 555;
MySqlParser.SWITCHES = 556;
MySqlParser.TABLE_NAME = 557;
MySqlParser.TABLESPACE = 558;
MySqlParser.TEMPORARY = 559;
MySqlParser.TEMPTABLE = 560;
MySqlParser.THAN = 561;
MySqlParser.TRADITIONAL = 562;
MySqlParser.TRANSACTION = 563;
MySqlParser.TRANSACTIONAL = 564;
MySqlParser.TRIGGERS = 565;
MySqlParser.TRUNCATE = 566;
MySqlParser.UNDEFINED = 567;
MySqlParser.UNDOFILE = 568;
MySqlParser.UNDO_BUFFER_SIZE = 569;
MySqlParser.UNINSTALL = 570;
MySqlParser.UNKNOWN = 571;
MySqlParser.UNTIL = 572;
MySqlParser.UPGRADE = 573;
MySqlParser.USER = 574;
MySqlParser.USE_FRM = 575;
MySqlParser.USER_RESOURCES = 576;
MySqlParser.VALIDATION = 577;
MySqlParser.VALUE = 578;
MySqlParser.VARIABLES = 579;
MySqlParser.VIEW = 580;
MySqlParser.VIRTUAL = 581;
MySqlParser.VISIBLE = 582;
MySqlParser.WAIT = 583;
MySqlParser.WARNINGS = 584;
MySqlParser.WITHOUT = 585;
MySqlParser.WORK = 586;
MySqlParser.WRAPPER = 587;
MySqlParser.X509 = 588;
MySqlParser.XA = 589;
MySqlParser.XML = 590;
MySqlParser.EUR = 591;
MySqlParser.USA = 592;
MySqlParser.JIS = 593;
MySqlParser.ISO = 594;
MySqlParser.INTERNAL = 595;
MySqlParser.QUARTER = 596;
MySqlParser.MONTH = 597;
MySqlParser.DAY = 598;
MySqlParser.HOUR = 599;
MySqlParser.MINUTE = 600;
MySqlParser.WEEK = 601;
MySqlParser.SECOND = 602;
MySqlParser.MICROSECOND = 603;
MySqlParser.TABLES = 604;
MySqlParser.ROUTINE = 605;
MySqlParser.EXECUTE = 606;
MySqlParser.FILE = 607;
MySqlParser.PROCESS = 608;
MySqlParser.RELOAD = 609;
MySqlParser.SHUTDOWN = 610;
MySqlParser.SUPER = 611;
MySqlParser.PRIVILEGES = 612;
MySqlParser.APPLICATION_PASSWORD_ADMIN = 613;
MySqlParser.AUDIT_ADMIN = 614;
MySqlParser.BACKUP_ADMIN = 615;
MySqlParser.BINLOG_ADMIN = 616;
MySqlParser.BINLOG_ENCRYPTION_ADMIN = 617;
MySqlParser.CLONE_ADMIN = 618;
MySqlParser.CONNECTION_ADMIN = 619;
MySqlParser.ENCRYPTION_KEY_ADMIN = 620;
MySqlParser.FIREWALL_ADMIN = 621;
MySqlParser.FIREWALL_USER = 622;
MySqlParser.GROUP_REPLICATION_ADMIN = 623;
MySqlParser.INNODB_REDO_LOG_ARCHIVE = 624;
MySqlParser.NDB_STORED_USER = 625;
MySqlParser.PERSIST_RO_VARIABLES_ADMIN = 626;
MySqlParser.REPLICATION_APPLIER = 627;
MySqlParser.REPLICATION_SLAVE_ADMIN = 628;
MySqlParser.RESOURCE_GROUP_ADMIN = 629;
MySqlParser.RESOURCE_GROUP_USER = 630;
MySqlParser.ROLE_ADMIN = 631;
MySqlParser.SESSION_VARIABLES_ADMIN = 632;
MySqlParser.SET_USER_ID = 633;
MySqlParser.SHOW_ROUTINE = 634;
MySqlParser.SYSTEM_VARIABLES_ADMIN = 635;
MySqlParser.TABLE_ENCRYPTION_ADMIN = 636;
MySqlParser.VERSION_TOKEN_ADMIN = 637;
MySqlParser.XA_RECOVER_ADMIN = 638;
MySqlParser.ARMSCII8 = 639;
MySqlParser.ASCII = 640;
MySqlParser.BIG5 = 641;
MySqlParser.CP1250 = 642;
MySqlParser.CP1251 = 643;
MySqlParser.CP1256 = 644;
MySqlParser.CP1257 = 645;
MySqlParser.CP850 = 646;
MySqlParser.CP852 = 647;
MySqlParser.CP866 = 648;
MySqlParser.CP932 = 649;
MySqlParser.DEC8 = 650;
MySqlParser.EUCJPMS = 651;
MySqlParser.EUCKR = 652;
MySqlParser.GB2312 = 653;
MySqlParser.GBK = 654;
MySqlParser.GEOSTD8 = 655;
MySqlParser.GREEK = 656;
MySqlParser.HEBREW = 657;
MySqlParser.HP8 = 658;
MySqlParser.KEYBCS2 = 659;
MySqlParser.KOI8R = 660;
MySqlParser.KOI8U = 661;
MySqlParser.LATIN1 = 662;
MySqlParser.LATIN2 = 663;
MySqlParser.LATIN5 = 664;
MySqlParser.LATIN7 = 665;
MySqlParser.MACCE = 666;
MySqlParser.MACROMAN = 667;
MySqlParser.SJIS = 668;
MySqlParser.SWE7 = 669;
MySqlParser.TIS620 = 670;
MySqlParser.UCS2 = 671;
MySqlParser.UJIS = 672;
MySqlParser.UTF16 = 673;
MySqlParser.UTF16LE = 674;
MySqlParser.UTF32 = 675;
MySqlParser.UTF8 = 676;
MySqlParser.UTF8MB3 = 677;
MySqlParser.UTF8MB4 = 678;
MySqlParser.ARCHIVE = 679;
MySqlParser.BLACKHOLE = 680;
MySqlParser.CSV = 681;
MySqlParser.FEDERATED = 682;
MySqlParser.INNODB = 683;
MySqlParser.MEMORY = 684;
MySqlParser.MRG_MYISAM = 685;
MySqlParser.MYISAM = 686;
MySqlParser.NDB = 687;
MySqlParser.NDBCLUSTER = 688;
MySqlParser.PERFORMANCE_SCHEMA = 689;
MySqlParser.TOKUDB = 690;
MySqlParser.REPEATABLE = 691;
MySqlParser.COMMITTED = 692;
MySqlParser.UNCOMMITTED = 693;
MySqlParser.SERIALIZABLE = 694;
MySqlParser.GEOMETRYCOLLECTION = 695;
MySqlParser.GEOMCOLLECTION = 696;
MySqlParser.GEOMETRY = 697;
MySqlParser.LINESTRING = 698;
MySqlParser.MULTILINESTRING = 699;
MySqlParser.MULTIPOINT = 700;
MySqlParser.MULTIPOLYGON = 701;
MySqlParser.POINT = 702;
MySqlParser.POLYGON = 703;
MySqlParser.ABS = 704;
MySqlParser.ACOS = 705;
MySqlParser.ADDDATE = 706;
MySqlParser.ADDTIME = 707;
MySqlParser.AES_DECRYPT = 708;
MySqlParser.AES_ENCRYPT = 709;
MySqlParser.AREA = 710;
MySqlParser.ASBINARY = 711;
MySqlParser.ASIN = 712;
MySqlParser.ASTEXT = 713;
MySqlParser.ASWKB = 714;
MySqlParser.ASWKT = 715;
MySqlParser.ASYMMETRIC_DECRYPT = 716;
MySqlParser.ASYMMETRIC_DERIVE = 717;
MySqlParser.ASYMMETRIC_ENCRYPT = 718;
MySqlParser.ASYMMETRIC_SIGN = 719;
MySqlParser.ASYMMETRIC_VERIFY = 720;
MySqlParser.ATAN = 721;
MySqlParser.ATAN2 = 722;
MySqlParser.BENCHMARK = 723;
MySqlParser.BIN = 724;
MySqlParser.BIT_COUNT = 725;
MySqlParser.BIT_LENGTH = 726;
MySqlParser.BUFFER = 727;
MySqlParser.CATALOG_NAME = 728;
MySqlParser.CEIL = 729;
MySqlParser.CEILING = 730;
MySqlParser.CENTROID = 731;
MySqlParser.CHARACTER_LENGTH = 732;
MySqlParser.CHARSET = 733;
MySqlParser.CHAR_LENGTH = 734;
MySqlParser.COERCIBILITY = 735;
MySqlParser.COLLATION = 736;
MySqlParser.COMPRESS = 737;
MySqlParser.CONCAT = 738;
MySqlParser.CONCAT_WS = 739;
MySqlParser.CONNECTION_ID = 740;
MySqlParser.CONV = 741;
MySqlParser.CONVERT_TZ = 742;
MySqlParser.COS = 743;
MySqlParser.COT = 744;
MySqlParser.CRC32 = 745;
MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY = 746;
MySqlParser.CREATE_ASYMMETRIC_PUB_KEY = 747;
MySqlParser.CREATE_DH_PARAMETERS = 748;
MySqlParser.CREATE_DIGEST = 749;
MySqlParser.CROSSES = 750;
MySqlParser.DATEDIFF = 751;
MySqlParser.DATE_FORMAT = 752;
MySqlParser.DAYNAME = 753;
MySqlParser.DAYOFMONTH = 754;
MySqlParser.DAYOFWEEK = 755;
MySqlParser.DAYOFYEAR = 756;
MySqlParser.DECODE = 757;
MySqlParser.DEGREES = 758;
MySqlParser.DES_DECRYPT = 759;
MySqlParser.DES_ENCRYPT = 760;
MySqlParser.DIMENSION = 761;
MySqlParser.DISJOINT = 762;
MySqlParser.ELT = 763;
MySqlParser.ENCODE = 764;
MySqlParser.ENCRYPT = 765;
MySqlParser.ENDPOINT = 766;
MySqlParser.ENVELOPE = 767;
MySqlParser.EQUALS = 768;
MySqlParser.EXP = 769;
MySqlParser.EXPORT_SET = 770;
MySqlParser.EXTERIORRING = 771;
MySqlParser.EXTRACTVALUE = 772;
MySqlParser.FIELD = 773;
MySqlParser.FIND_IN_SET = 774;
MySqlParser.FLOOR = 775;
MySqlParser.FORMAT = 776;
MySqlParser.FOUND_ROWS = 777;
MySqlParser.FROM_BASE64 = 778;
MySqlParser.FROM_DAYS = 779;
MySqlParser.FROM_UNIXTIME = 780;
MySqlParser.GEOMCOLLFROMTEXT = 781;
MySqlParser.GEOMCOLLFROMWKB = 782;
MySqlParser.GEOMETRYCOLLECTIONFROMTEXT = 783;
MySqlParser.GEOMETRYCOLLECTIONFROMWKB = 784;
MySqlParser.GEOMETRYFROMTEXT = 785;
MySqlParser.GEOMETRYFROMWKB = 786;
MySqlParser.GEOMETRYN = 787;
MySqlParser.GEOMETRYTYPE = 788;
MySqlParser.GEOMFROMTEXT = 789;
MySqlParser.GEOMFROMWKB = 790;
MySqlParser.GET_FORMAT = 791;
MySqlParser.GET_LOCK = 792;
MySqlParser.GLENGTH = 793;
MySqlParser.GREATEST = 794;
MySqlParser.GTID_SUBSET = 795;
MySqlParser.GTID_SUBTRACT = 796;
MySqlParser.HEX = 797;
MySqlParser.IFNULL = 798;
MySqlParser.INET6_ATON = 799;
MySqlParser.INET6_NTOA = 800;
MySqlParser.INET_ATON = 801;
MySqlParser.INET_NTOA = 802;
MySqlParser.INSTR = 803;
MySqlParser.INTERIORRINGN = 804;
MySqlParser.INTERSECTS = 805;
MySqlParser.ISCLOSED = 806;
MySqlParser.ISEMPTY = 807;
MySqlParser.ISNULL = 808;
MySqlParser.ISSIMPLE = 809;
MySqlParser.IS_FREE_LOCK = 810;
MySqlParser.IS_IPV4 = 811;
MySqlParser.IS_IPV4_COMPAT = 812;
MySqlParser.IS_IPV4_MAPPED = 813;
MySqlParser.IS_IPV6 = 814;
MySqlParser.IS_USED_LOCK = 815;
MySqlParser.LAST_INSERT_ID = 816;
MySqlParser.LCASE = 817;
MySqlParser.LEAST = 818;
MySqlParser.LENGTH = 819;
MySqlParser.LINEFROMTEXT = 820;
MySqlParser.LINEFROMWKB = 821;
MySqlParser.LINESTRINGFROMTEXT = 822;
MySqlParser.LINESTRINGFROMWKB = 823;
MySqlParser.LN = 824;
MySqlParser.LOAD_FILE = 825;
MySqlParser.LOCATE = 826;
MySqlParser.LOG = 827;
MySqlParser.LOG10 = 828;
MySqlParser.LOG2 = 829;
MySqlParser.LOWER = 830;
MySqlParser.LPAD = 831;
MySqlParser.LTRIM = 832;
MySqlParser.MAKEDATE = 833;
MySqlParser.MAKETIME = 834;
MySqlParser.MAKE_SET = 835;
MySqlParser.MASTER_POS_WAIT = 836;
MySqlParser.MBRCONTAINS = 837;
MySqlParser.MBRDISJOINT = 838;
MySqlParser.MBREQUAL = 839;
MySqlParser.MBRINTERSECTS = 840;
MySqlParser.MBROVERLAPS = 841;
MySqlParser.MBRTOUCHES = 842;
MySqlParser.MBRWITHIN = 843;
MySqlParser.MD5 = 844;
MySqlParser.MLINEFROMTEXT = 845;
MySqlParser.MLINEFROMWKB = 846;
MySqlParser.MONTHNAME = 847;
MySqlParser.MPOINTFROMTEXT = 848;
MySqlParser.MPOINTFROMWKB = 849;
MySqlParser.MPOLYFROMTEXT = 850;
MySqlParser.MPOLYFROMWKB = 851;
MySqlParser.MULTILINESTRINGFROMTEXT = 852;
MySqlParser.MULTILINESTRINGFROMWKB = 853;
MySqlParser.MULTIPOINTFROMTEXT = 854;
MySqlParser.MULTIPOINTFROMWKB = 855;
MySqlParser.MULTIPOLYGONFROMTEXT = 856;
MySqlParser.MULTIPOLYGONFROMWKB = 857;
MySqlParser.NAME_CONST = 858;
MySqlParser.NULLIF = 859;
MySqlParser.NUMGEOMETRIES = 860;
MySqlParser.NUMINTERIORRINGS = 861;
MySqlParser.NUMPOINTS = 862;
MySqlParser.OCT = 863;
MySqlParser.OCTET_LENGTH = 864;
MySqlParser.ORD = 865;
MySqlParser.OVERLAPS = 866;
MySqlParser.PERIOD_ADD = 867;
MySqlParser.PERIOD_DIFF = 868;
MySqlParser.PI = 869;
MySqlParser.POINTFROMTEXT = 870;
MySqlParser.POINTFROMWKB = 871;
MySqlParser.POINTN = 872;
MySqlParser.POLYFROMTEXT = 873;
MySqlParser.POLYFROMWKB = 874;
MySqlParser.POLYGONFROMTEXT = 875;
MySqlParser.POLYGONFROMWKB = 876;
MySqlParser.POW = 877;
MySqlParser.POWER = 878;
MySqlParser.QUOTE = 879;
MySqlParser.RADIANS = 880;
MySqlParser.RAND = 881;
MySqlParser.RANDOM_BYTES = 882;
MySqlParser.RELEASE_LOCK = 883;
MySqlParser.REVERSE = 884;
MySqlParser.ROUND = 885;
MySqlParser.ROW_COUNT = 886;
MySqlParser.RPAD = 887;
MySqlParser.RTRIM = 888;
MySqlParser.SEC_TO_TIME = 889;
MySqlParser.SESSION_USER = 890;
MySqlParser.SHA = 891;
MySqlParser.SHA1 = 892;
MySqlParser.SHA2 = 893;
MySqlParser.SCHEMA_NAME = 894;
MySqlParser.SIGN = 895;
MySqlParser.SIN = 896;
MySqlParser.SLEEP = 897;
MySqlParser.SOUNDEX = 898;
MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS = 899;
MySqlParser.SQRT = 900;
MySqlParser.SRID = 901;
MySqlParser.STARTPOINT = 902;
MySqlParser.STRCMP = 903;
MySqlParser.STR_TO_DATE = 904;
MySqlParser.ST_AREA = 905;
MySqlParser.ST_ASBINARY = 906;
MySqlParser.ST_ASTEXT = 907;
MySqlParser.ST_ASWKB = 908;
MySqlParser.ST_ASWKT = 909;
MySqlParser.ST_BUFFER = 910;
MySqlParser.ST_CENTROID = 911;
MySqlParser.ST_CONTAINS = 912;
MySqlParser.ST_CROSSES = 913;
MySqlParser.ST_DIFFERENCE = 914;
MySqlParser.ST_DIMENSION = 915;
MySqlParser.ST_DISJOINT = 916;
MySqlParser.ST_DISTANCE = 917;
MySqlParser.ST_ENDPOINT = 918;
MySqlParser.ST_ENVELOPE = 919;
MySqlParser.ST_EQUALS = 920;
MySqlParser.ST_EXTERIORRING = 921;
MySqlParser.ST_GEOMCOLLFROMTEXT = 922;
MySqlParser.ST_GEOMCOLLFROMTXT = 923;
MySqlParser.ST_GEOMCOLLFROMWKB = 924;
MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT = 925;
MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB = 926;
MySqlParser.ST_GEOMETRYFROMTEXT = 927;
MySqlParser.ST_GEOMETRYFROMWKB = 928;
MySqlParser.ST_GEOMETRYN = 929;
MySqlParser.ST_GEOMETRYTYPE = 930;
MySqlParser.ST_GEOMFROMTEXT = 931;
MySqlParser.ST_GEOMFROMWKB = 932;
MySqlParser.ST_INTERIORRINGN = 933;
MySqlParser.ST_INTERSECTION = 934;
MySqlParser.ST_INTERSECTS = 935;
MySqlParser.ST_ISCLOSED = 936;
MySqlParser.ST_ISEMPTY = 937;
MySqlParser.ST_ISSIMPLE = 938;
MySqlParser.ST_LINEFROMTEXT = 939;
MySqlParser.ST_LINEFROMWKB = 940;
MySqlParser.ST_LINESTRINGFROMTEXT = 941;
MySqlParser.ST_LINESTRINGFROMWKB = 942;
MySqlParser.ST_NUMGEOMETRIES = 943;
MySqlParser.ST_NUMINTERIORRING = 944;
MySqlParser.ST_NUMINTERIORRINGS = 945;
MySqlParser.ST_NUMPOINTS = 946;
MySqlParser.ST_OVERLAPS = 947;
MySqlParser.ST_POINTFROMTEXT = 948;
MySqlParser.ST_POINTFROMWKB = 949;
MySqlParser.ST_POINTN = 950;
MySqlParser.ST_POLYFROMTEXT = 951;
MySqlParser.ST_POLYFROMWKB = 952;
MySqlParser.ST_POLYGONFROMTEXT = 953;
MySqlParser.ST_POLYGONFROMWKB = 954;
MySqlParser.ST_SRID = 955;
MySqlParser.ST_STARTPOINT = 956;
MySqlParser.ST_SYMDIFFERENCE = 957;
MySqlParser.ST_TOUCHES = 958;
MySqlParser.ST_UNION = 959;
MySqlParser.ST_WITHIN = 960;
MySqlParser.ST_X = 961;
MySqlParser.ST_Y = 962;
MySqlParser.SUBDATE = 963;
MySqlParser.SUBSTRING_INDEX = 964;
MySqlParser.SUBTIME = 965;
MySqlParser.SYSTEM_USER = 966;
MySqlParser.TAN = 967;
MySqlParser.TIMEDIFF = 968;
MySqlParser.TIMESTAMPADD = 969;
MySqlParser.TIMESTAMPDIFF = 970;
MySqlParser.TIME_FORMAT = 971;
MySqlParser.TIME_TO_SEC = 972;
MySqlParser.TOUCHES = 973;
MySqlParser.TO_BASE64 = 974;
MySqlParser.TO_DAYS = 975;
MySqlParser.TO_SECONDS = 976;
MySqlParser.UCASE = 977;
MySqlParser.UNCOMPRESS = 978;
MySqlParser.UNCOMPRESSED_LENGTH = 979;
MySqlParser.UNHEX = 980;
MySqlParser.UNIX_TIMESTAMP = 981;
MySqlParser.UPDATEXML = 982;
MySqlParser.UPPER = 983;
MySqlParser.UUID = 984;
MySqlParser.UUID_SHORT = 985;
MySqlParser.VALIDATE_PASSWORD_STRENGTH = 986;
MySqlParser.VERSION = 987;
MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS = 988;
MySqlParser.WEEKDAY = 989;
MySqlParser.WEEKOFYEAR = 990;
MySqlParser.WEIGHT_STRING = 991;
MySqlParser.WITHIN = 992;
MySqlParser.YEARWEEK = 993;
MySqlParser.Y_FUNCTION = 994;
MySqlParser.X_FUNCTION = 995;
MySqlParser.VAR_ASSIGN = 996;
MySqlParser.PLUS_ASSIGN = 997;
MySqlParser.MINUS_ASSIGN = 998;
MySqlParser.MULT_ASSIGN = 999;
MySqlParser.DIV_ASSIGN = 1000;
MySqlParser.MOD_ASSIGN = 1001;
MySqlParser.AND_ASSIGN = 1002;
MySqlParser.XOR_ASSIGN = 1003;
MySqlParser.OR_ASSIGN = 1004;
MySqlParser.STAR = 1005;
MySqlParser.DIVIDE = 1006;
MySqlParser.MODULE = 1007;
MySqlParser.PLUS = 1008;
MySqlParser.MINUSMINUS = 1009;
MySqlParser.MINUS = 1010;
MySqlParser.DIV = 1011;
MySqlParser.MOD = 1012;
MySqlParser.EQUAL_SYMBOL = 1013;
MySqlParser.GREATER_SYMBOL = 1014;
MySqlParser.LESS_SYMBOL = 1015;
MySqlParser.EXCLAMATION_SYMBOL = 1016;
MySqlParser.BIT_NOT_OP = 1017;
MySqlParser.BIT_OR_OP = 1018;
MySqlParser.BIT_AND_OP = 1019;
MySqlParser.BIT_XOR_OP = 1020;
MySqlParser.DOT = 1021;
MySqlParser.LR_BRACKET = 1022;
MySqlParser.RR_BRACKET = 1023;
MySqlParser.COMMA = 1024;
MySqlParser.SEMI = 1025;
MySqlParser.AT_SIGN = 1026;
MySqlParser.ZERO_DECIMAL = 1027;
MySqlParser.ONE_DECIMAL = 1028;
MySqlParser.TWO_DECIMAL = 1029;
MySqlParser.SINGLE_QUOTE_SYMB = 1030;
MySqlParser.DOUBLE_QUOTE_SYMB = 1031;
MySqlParser.REVERSE_QUOTE_SYMB = 1032;
MySqlParser.COLON_SYMB = 1033;
MySqlParser.CHARSET_REVERSE_QOUTE_STRING = 1034;
MySqlParser.FILESIZE_LITERAL = 1035;
MySqlParser.START_NATIONAL_STRING_LITERAL = 1036;
MySqlParser.STRING_LITERAL = 1037;
MySqlParser.DECIMAL_LITERAL = 1038;
MySqlParser.HEXADECIMAL_LITERAL = 1039;
MySqlParser.REAL_LITERAL = 1040;
MySqlParser.NULL_SPEC_LITERAL = 1041;
MySqlParser.BIT_STRING = 1042;
MySqlParser.STRING_CHARSET_NAME = 1043;
MySqlParser.DOT_ID = 1044;
MySqlParser.ID = 1045;
MySqlParser.REVERSE_QUOTE_ID = 1046;
MySqlParser.STRING_USER_NAME = 1047;
MySqlParser.IP_ADDRESS = 1048;
MySqlParser.LOCAL_ID = 1049;
MySqlParser.GLOBAL_ID = 1050;
MySqlParser.ERROR_RECONGNIGION = 1051;

MySqlParser.RULE_root = 0;
MySqlParser.RULE_sqlStatements = 1;
MySqlParser.RULE_sqlStatement = 2;
MySqlParser.RULE_emptyStatement = 3;
MySqlParser.RULE_ddlStatement = 4;
MySqlParser.RULE_dmlStatement = 5;
MySqlParser.RULE_transactionStatement = 6;
MySqlParser.RULE_replicationStatement = 7;
MySqlParser.RULE_preparedStatement = 8;
MySqlParser.RULE_compoundStatement = 9;
MySqlParser.RULE_administrationStatement = 10;
MySqlParser.RULE_utilityStatement = 11;
MySqlParser.RULE_createDatabase = 12;
MySqlParser.RULE_createEvent = 13;
MySqlParser.RULE_createIndex = 14;
MySqlParser.RULE_createLogfileGroup = 15;
MySqlParser.RULE_createProcedure = 16;
MySqlParser.RULE_createFunction = 17;
MySqlParser.RULE_createServer = 18;
MySqlParser.RULE_createTable = 19;
MySqlParser.RULE_createTablespaceInnodb = 20;
MySqlParser.RULE_createTablespaceNdb = 21;
MySqlParser.RULE_createTrigger = 22;
MySqlParser.RULE_createView = 23;
MySqlParser.RULE_createDatabaseOption = 24;
MySqlParser.RULE_ownerStatement = 25;
MySqlParser.RULE_scheduleExpression = 26;
MySqlParser.RULE_timestampValue = 27;
MySqlParser.RULE_intervalExpr = 28;
MySqlParser.RULE_intervalType = 29;
MySqlParser.RULE_enableType = 30;
MySqlParser.RULE_indexType = 31;
MySqlParser.RULE_indexOption = 32;
MySqlParser.RULE_procedureParameter = 33;
MySqlParser.RULE_functionParameter = 34;
MySqlParser.RULE_routineOption = 35;
MySqlParser.RULE_serverOption = 36;
MySqlParser.RULE_createDefinitions = 37;
MySqlParser.RULE_createDefinition = 38;
MySqlParser.RULE_columnDefinition = 39;
MySqlParser.RULE_columnConstraint = 40;
MySqlParser.RULE_tableConstraint = 41;
MySqlParser.RULE_referenceDefinition = 42;
MySqlParser.RULE_referenceAction = 43;
MySqlParser.RULE_referenceControlType = 44;
MySqlParser.RULE_indexColumnDefinition = 45;
MySqlParser.RULE_tableOption = 46;
MySqlParser.RULE_tablespaceStorage = 47;
MySqlParser.RULE_partitionDefinitions = 48;
MySqlParser.RULE_partitionFunctionDefinition = 49;
MySqlParser.RULE_subpartitionFunctionDefinition = 50;
MySqlParser.RULE_partitionDefinition = 51;
MySqlParser.RULE_partitionDefinerAtom = 52;
MySqlParser.RULE_partitionDefinerVector = 53;
MySqlParser.RULE_subpartitionDefinition = 54;
MySqlParser.RULE_partitionOption = 55;
MySqlParser.RULE_alterDatabase = 56;
MySqlParser.RULE_alterEvent = 57;
MySqlParser.RULE_alterFunction = 58;
MySqlParser.RULE_alterInstance = 59;
MySqlParser.RULE_alterLogfileGroup = 60;
MySqlParser.RULE_alterProcedure = 61;
MySqlParser.RULE_alterServer = 62;
MySqlParser.RULE_alterTable = 63;
MySqlParser.RULE_alterTablespace = 64;
MySqlParser.RULE_alterView = 65;
MySqlParser.RULE_alterSpecification = 66;
MySqlParser.RULE_dropDatabase = 67;
MySqlParser.RULE_dropEvent = 68;
MySqlParser.RULE_dropIndex = 69;
MySqlParser.RULE_dropLogfileGroup = 70;
MySqlParser.RULE_dropProcedure = 71;
MySqlParser.RULE_dropFunction = 72;
MySqlParser.RULE_dropServer = 73;
MySqlParser.RULE_dropTable = 74;
MySqlParser.RULE_dropTablespace = 75;
MySqlParser.RULE_dropTrigger = 76;
MySqlParser.RULE_dropView = 77;
MySqlParser.RULE_renameTable = 78;
MySqlParser.RULE_renameTableClause = 79;
MySqlParser.RULE_truncateTable = 80;
MySqlParser.RULE_callStatement = 81;
MySqlParser.RULE_deleteStatement = 82;
MySqlParser.RULE_doStatement = 83;
MySqlParser.RULE_handlerStatement = 84;
MySqlParser.RULE_insertStatement = 85;
MySqlParser.RULE_loadDataStatement = 86;
MySqlParser.RULE_loadXmlStatement = 87;
MySqlParser.RULE_replaceStatement = 88;
MySqlParser.RULE_selectStatement = 89;
MySqlParser.RULE_updateStatement = 90;
MySqlParser.RULE_insertStatementValue = 91;
MySqlParser.RULE_updatedElement = 92;
MySqlParser.RULE_assignmentField = 93;
MySqlParser.RULE_lockClause = 94;
MySqlParser.RULE_singleDeleteStatement = 95;
MySqlParser.RULE_multipleDeleteStatement = 96;
MySqlParser.RULE_handlerOpenStatement = 97;
MySqlParser.RULE_handlerReadIndexStatement = 98;
MySqlParser.RULE_handlerReadStatement = 99;
MySqlParser.RULE_handlerCloseStatement = 100;
MySqlParser.RULE_singleUpdateStatement = 101;
MySqlParser.RULE_multipleUpdateStatement = 102;
MySqlParser.RULE_orderByClause = 103;
MySqlParser.RULE_orderByExpression = 104;
MySqlParser.RULE_tableSources = 105;
MySqlParser.RULE_tableSource = 106;
MySqlParser.RULE_tableSourceItem = 107;
MySqlParser.RULE_indexHint = 108;
MySqlParser.RULE_indexHintType = 109;
MySqlParser.RULE_joinPart = 110;
MySqlParser.RULE_queryExpression = 111;
MySqlParser.RULE_queryExpressionNointo = 112;
MySqlParser.RULE_querySpecification = 113;
MySqlParser.RULE_querySpecificationNointo = 114;
MySqlParser.RULE_unionParenthesis = 115;
MySqlParser.RULE_unionStatement = 116;
MySqlParser.RULE_selectSpec = 117;
MySqlParser.RULE_selectElements = 118;
MySqlParser.RULE_selectElement = 119;
MySqlParser.RULE_selectIntoExpression = 120;
MySqlParser.RULE_selectFieldsInto = 121;
MySqlParser.RULE_selectLinesInto = 122;
MySqlParser.RULE_fromClause = 123;
MySqlParser.RULE_groupByItem = 124;
MySqlParser.RULE_limitClause = 125;
MySqlParser.RULE_limitClauseAtom = 126;
MySqlParser.RULE_startTransaction = 127;
MySqlParser.RULE_beginWork = 128;
MySqlParser.RULE_commitWork = 129;
MySqlParser.RULE_rollbackWork = 130;
MySqlParser.RULE_savepointStatement = 131;
MySqlParser.RULE_rollbackStatement = 132;
MySqlParser.RULE_releaseStatement = 133;
MySqlParser.RULE_lockTables = 134;
MySqlParser.RULE_unlockTables = 135;
MySqlParser.RULE_setAutocommitStatement = 136;
MySqlParser.RULE_setTransactionStatement = 137;
MySqlParser.RULE_transactionMode = 138;
MySqlParser.RULE_lockTableElement = 139;
MySqlParser.RULE_lockAction = 140;
MySqlParser.RULE_transactionOption = 141;
MySqlParser.RULE_transactionLevel = 142;
MySqlParser.RULE_changeMaster = 143;
MySqlParser.RULE_changeReplicationFilter = 144;
MySqlParser.RULE_purgeBinaryLogs = 145;
MySqlParser.RULE_resetMaster = 146;
MySqlParser.RULE_resetSlave = 147;
MySqlParser.RULE_startSlave = 148;
MySqlParser.RULE_stopSlave = 149;
MySqlParser.RULE_startGroupReplication = 150;
MySqlParser.RULE_stopGroupReplication = 151;
MySqlParser.RULE_masterOption = 152;
MySqlParser.RULE_stringMasterOption = 153;
MySqlParser.RULE_decimalMasterOption = 154;
MySqlParser.RULE_boolMasterOption = 155;
MySqlParser.RULE_channelOption = 156;
MySqlParser.RULE_replicationFilter = 157;
MySqlParser.RULE_tablePair = 158;
MySqlParser.RULE_threadType = 159;
MySqlParser.RULE_untilOption = 160;
MySqlParser.RULE_connectionOption = 161;
MySqlParser.RULE_gtuidSet = 162;
MySqlParser.RULE_xaStartTransaction = 163;
MySqlParser.RULE_xaEndTransaction = 164;
MySqlParser.RULE_xaPrepareStatement = 165;
MySqlParser.RULE_xaCommitWork = 166;
MySqlParser.RULE_xaRollbackWork = 167;
MySqlParser.RULE_xaRecoverWork = 168;
MySqlParser.RULE_prepareStatement = 169;
MySqlParser.RULE_executeStatement = 170;
MySqlParser.RULE_deallocatePrepare = 171;
MySqlParser.RULE_routineBody = 172;
MySqlParser.RULE_blockStatement = 173;
MySqlParser.RULE_caseStatement = 174;
MySqlParser.RULE_ifStatement = 175;
MySqlParser.RULE_iterateStatement = 176;
MySqlParser.RULE_leaveStatement = 177;
MySqlParser.RULE_loopStatement = 178;
MySqlParser.RULE_repeatStatement = 179;
MySqlParser.RULE_returnStatement = 180;
MySqlParser.RULE_whileStatement = 181;
MySqlParser.RULE_cursorStatement = 182;
MySqlParser.RULE_declareVariable = 183;
MySqlParser.RULE_declareCondition = 184;
MySqlParser.RULE_declareCursor = 185;
MySqlParser.RULE_declareHandler = 186;
MySqlParser.RULE_handlerConditionValue = 187;
MySqlParser.RULE_procedureSqlStatement = 188;
MySqlParser.RULE_caseAlternative = 189;
MySqlParser.RULE_elifAlternative = 190;
MySqlParser.RULE_alterUser = 191;
MySqlParser.RULE_createUser = 192;
MySqlParser.RULE_dropUser = 193;
MySqlParser.RULE_grantStatement = 194;
MySqlParser.RULE_grantProxy = 195;
MySqlParser.RULE_renameUser = 196;
MySqlParser.RULE_revokeStatement = 197;
MySqlParser.RULE_revokeProxy = 198;
MySqlParser.RULE_setPasswordStatement = 199;
MySqlParser.RULE_userSpecification = 200;
MySqlParser.RULE_userAuthOption = 201;
MySqlParser.RULE_tlsOption = 202;
MySqlParser.RULE_userResourceOption = 203;
MySqlParser.RULE_userPasswordOption = 204;
MySqlParser.RULE_userLockOption = 205;
MySqlParser.RULE_privelegeClause = 206;
MySqlParser.RULE_privilege = 207;
MySqlParser.RULE_privilegeLevel = 208;
MySqlParser.RULE_renameUserClause = 209;
MySqlParser.RULE_analyzeTable = 210;
MySqlParser.RULE_checkTable = 211;
MySqlParser.RULE_checksumTable = 212;
MySqlParser.RULE_optimizeTable = 213;
MySqlParser.RULE_repairTable = 214;
MySqlParser.RULE_checkTableOption = 215;
MySqlParser.RULE_createUdfunction = 216;
MySqlParser.RULE_installPlugin = 217;
MySqlParser.RULE_uninstallPlugin = 218;
MySqlParser.RULE_setStatement = 219;
MySqlParser.RULE_showStatement = 220;
MySqlParser.RULE_variableClause = 221;
MySqlParser.RULE_showCommonEntity = 222;
MySqlParser.RULE_showFilter = 223;
MySqlParser.RULE_showGlobalInfoClause = 224;
MySqlParser.RULE_showSchemaEntity = 225;
MySqlParser.RULE_showProfileType = 226;
MySqlParser.RULE_binlogStatement = 227;
MySqlParser.RULE_cacheIndexStatement = 228;
MySqlParser.RULE_flushStatement = 229;
MySqlParser.RULE_killStatement = 230;
MySqlParser.RULE_loadIndexIntoCache = 231;
MySqlParser.RULE_resetStatement = 232;
MySqlParser.RULE_shutdownStatement = 233;
MySqlParser.RULE_tableIndexes = 234;
MySqlParser.RULE_flushOption = 235;
MySqlParser.RULE_flushTableOption = 236;
MySqlParser.RULE_loadedTableIndexes = 237;
MySqlParser.RULE_simpleDescribeStatement = 238;
MySqlParser.RULE_fullDescribeStatement = 239;
MySqlParser.RULE_helpStatement = 240;
MySqlParser.RULE_useStatement = 241;
MySqlParser.RULE_signalStatement = 242;
MySqlParser.RULE_resignalStatement = 243;
MySqlParser.RULE_signalConditionInformation = 244;
MySqlParser.RULE_diagnosticsStatement = 245;
MySqlParser.RULE_diagnosticsConditionInformationName = 246;
MySqlParser.RULE_describeObjectClause = 247;
MySqlParser.RULE_fullId = 248;
MySqlParser.RULE_tableName = 249;
MySqlParser.RULE_fullColumnName = 250;
MySqlParser.RULE_indexColumnName = 251;
MySqlParser.RULE_userName = 252;
MySqlParser.RULE_mysqlVariable = 253;
MySqlParser.RULE_charsetName = 254;
MySqlParser.RULE_collationName = 255;
MySqlParser.RULE_engineName = 256;
MySqlParser.RULE_uuidSet = 257;
MySqlParser.RULE_xid = 258;
MySqlParser.RULE_xuidStringId = 259;
MySqlParser.RULE_authPlugin = 260;
MySqlParser.RULE_uid = 261;
MySqlParser.RULE_simpleId = 262;
MySqlParser.RULE_dottedId = 263;
MySqlParser.RULE_decimalLiteral = 264;
MySqlParser.RULE_fileSizeLiteral = 265;
MySqlParser.RULE_stringLiteral = 266;
MySqlParser.RULE_booleanLiteral = 267;
MySqlParser.RULE_hexadecimalLiteral = 268;
MySqlParser.RULE_nullNotnull = 269;
MySqlParser.RULE_constant = 270;
MySqlParser.RULE_dataType = 271;
MySqlParser.RULE_collectionOptions = 272;
MySqlParser.RULE_convertedDataType = 273;
MySqlParser.RULE_lengthOneDimension = 274;
MySqlParser.RULE_lengthTwoDimension = 275;
MySqlParser.RULE_lengthTwoOptionalDimension = 276;
MySqlParser.RULE_uidList = 277;
MySqlParser.RULE_tables = 278;
MySqlParser.RULE_indexColumnNames = 279;
MySqlParser.RULE_expressions = 280;
MySqlParser.RULE_expressionsWithDefaults = 281;
MySqlParser.RULE_constants = 282;
MySqlParser.RULE_simpleStrings = 283;
MySqlParser.RULE_userVariables = 284;
MySqlParser.RULE_defaultValue = 285;
MySqlParser.RULE_currentTimestamp = 286;
MySqlParser.RULE_expressionOrDefault = 287;
MySqlParser.RULE_ifExists = 288;
MySqlParser.RULE_ifNotExists = 289;
MySqlParser.RULE_functionCall = 290;
MySqlParser.RULE_specificFunction = 291;
MySqlParser.RULE_caseFuncAlternative = 292;
MySqlParser.RULE_levelsInWeightString = 293;
MySqlParser.RULE_levelInWeightListElement = 294;
MySqlParser.RULE_aggregateWindowedFunction = 295;
MySqlParser.RULE_scalarFunctionName = 296;
MySqlParser.RULE_passwordFunctionClause = 297;
MySqlParser.RULE_functionArgs = 298;
MySqlParser.RULE_functionArg = 299;
MySqlParser.RULE_expression = 300;
MySqlParser.RULE_predicate = 301;
MySqlParser.RULE_expressionAtom = 302;
MySqlParser.RULE_unaryOperator = 303;
MySqlParser.RULE_comparisonOperator = 304;
MySqlParser.RULE_logicalOperator = 305;
MySqlParser.RULE_bitOperator = 306;
MySqlParser.RULE_mathOperator = 307;
MySqlParser.RULE_jsonOperator = 308;
MySqlParser.RULE_charsetNameBase = 309;
MySqlParser.RULE_transactionLevelBase = 310;
MySqlParser.RULE_privilegesBase = 311;
MySqlParser.RULE_intervalTypeBase = 312;
MySqlParser.RULE_dataTypeBase = 313;
MySqlParser.RULE_keywordsCanBeId = 314;
MySqlParser.RULE_functionNameBase = 315;

class RootContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_root;
    }

	EOF() {
	    return this.getToken(MySqlParser.EOF, 0);
	};

	sqlStatements() {
	    return this.getTypedRuleContext(SqlStatementsContext,0);
	};

	MINUSMINUS() {
	    return this.getToken(MySqlParser.MINUSMINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRoot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRoot(this);
		}
	}


}



class SqlStatementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_sqlStatements;
    }

	sqlStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SqlStatementContext);
	    } else {
	        return this.getTypedRuleContext(SqlStatementContext,i);
	    }
	};

	emptyStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EmptyStatementContext);
	    } else {
	        return this.getTypedRuleContext(EmptyStatementContext,i);
	    }
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.SEMI);
	    } else {
	        return this.getToken(MySqlParser.SEMI, i);
	    }
	};


	MINUSMINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.MINUSMINUS);
	    } else {
	        return this.getToken(MySqlParser.MINUSMINUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSqlStatements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSqlStatements(this);
		}
	}


}



class SqlStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_sqlStatement;
    }

	ddlStatement() {
	    return this.getTypedRuleContext(DdlStatementContext,0);
	};

	dmlStatement() {
	    return this.getTypedRuleContext(DmlStatementContext,0);
	};

	transactionStatement() {
	    return this.getTypedRuleContext(TransactionStatementContext,0);
	};

	replicationStatement() {
	    return this.getTypedRuleContext(ReplicationStatementContext,0);
	};

	preparedStatement() {
	    return this.getTypedRuleContext(PreparedStatementContext,0);
	};

	administrationStatement() {
	    return this.getTypedRuleContext(AdministrationStatementContext,0);
	};

	utilityStatement() {
	    return this.getTypedRuleContext(UtilityStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSqlStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSqlStatement(this);
		}
	}


}



class EmptyStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_emptyStatement;
    }

	SEMI() {
	    return this.getToken(MySqlParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterEmptyStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitEmptyStatement(this);
		}
	}


}



class DdlStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_ddlStatement;
    }

	createDatabase() {
	    return this.getTypedRuleContext(CreateDatabaseContext,0);
	};

	createEvent() {
	    return this.getTypedRuleContext(CreateEventContext,0);
	};

	createIndex() {
	    return this.getTypedRuleContext(CreateIndexContext,0);
	};

	createLogfileGroup() {
	    return this.getTypedRuleContext(CreateLogfileGroupContext,0);
	};

	createProcedure() {
	    return this.getTypedRuleContext(CreateProcedureContext,0);
	};

	createFunction() {
	    return this.getTypedRuleContext(CreateFunctionContext,0);
	};

	createServer() {
	    return this.getTypedRuleContext(CreateServerContext,0);
	};

	createTable() {
	    return this.getTypedRuleContext(CreateTableContext,0);
	};

	createTablespaceInnodb() {
	    return this.getTypedRuleContext(CreateTablespaceInnodbContext,0);
	};

	createTablespaceNdb() {
	    return this.getTypedRuleContext(CreateTablespaceNdbContext,0);
	};

	createTrigger() {
	    return this.getTypedRuleContext(CreateTriggerContext,0);
	};

	createView() {
	    return this.getTypedRuleContext(CreateViewContext,0);
	};

	alterDatabase() {
	    return this.getTypedRuleContext(AlterDatabaseContext,0);
	};

	alterEvent() {
	    return this.getTypedRuleContext(AlterEventContext,0);
	};

	alterFunction() {
	    return this.getTypedRuleContext(AlterFunctionContext,0);
	};

	alterInstance() {
	    return this.getTypedRuleContext(AlterInstanceContext,0);
	};

	alterLogfileGroup() {
	    return this.getTypedRuleContext(AlterLogfileGroupContext,0);
	};

	alterProcedure() {
	    return this.getTypedRuleContext(AlterProcedureContext,0);
	};

	alterServer() {
	    return this.getTypedRuleContext(AlterServerContext,0);
	};

	alterTable() {
	    return this.getTypedRuleContext(AlterTableContext,0);
	};

	alterTablespace() {
	    return this.getTypedRuleContext(AlterTablespaceContext,0);
	};

	alterView() {
	    return this.getTypedRuleContext(AlterViewContext,0);
	};

	dropDatabase() {
	    return this.getTypedRuleContext(DropDatabaseContext,0);
	};

	dropEvent() {
	    return this.getTypedRuleContext(DropEventContext,0);
	};

	dropIndex() {
	    return this.getTypedRuleContext(DropIndexContext,0);
	};

	dropLogfileGroup() {
	    return this.getTypedRuleContext(DropLogfileGroupContext,0);
	};

	dropProcedure() {
	    return this.getTypedRuleContext(DropProcedureContext,0);
	};

	dropFunction() {
	    return this.getTypedRuleContext(DropFunctionContext,0);
	};

	dropServer() {
	    return this.getTypedRuleContext(DropServerContext,0);
	};

	dropTable() {
	    return this.getTypedRuleContext(DropTableContext,0);
	};

	dropTablespace() {
	    return this.getTypedRuleContext(DropTablespaceContext,0);
	};

	dropTrigger() {
	    return this.getTypedRuleContext(DropTriggerContext,0);
	};

	dropView() {
	    return this.getTypedRuleContext(DropViewContext,0);
	};

	renameTable() {
	    return this.getTypedRuleContext(RenameTableContext,0);
	};

	truncateTable() {
	    return this.getTypedRuleContext(TruncateTableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDdlStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDdlStatement(this);
		}
	}


}



class DmlStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dmlStatement;
    }

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	insertStatement() {
	    return this.getTypedRuleContext(InsertStatementContext,0);
	};

	updateStatement() {
	    return this.getTypedRuleContext(UpdateStatementContext,0);
	};

	deleteStatement() {
	    return this.getTypedRuleContext(DeleteStatementContext,0);
	};

	replaceStatement() {
	    return this.getTypedRuleContext(ReplaceStatementContext,0);
	};

	callStatement() {
	    return this.getTypedRuleContext(CallStatementContext,0);
	};

	loadDataStatement() {
	    return this.getTypedRuleContext(LoadDataStatementContext,0);
	};

	loadXmlStatement() {
	    return this.getTypedRuleContext(LoadXmlStatementContext,0);
	};

	doStatement() {
	    return this.getTypedRuleContext(DoStatementContext,0);
	};

	handlerStatement() {
	    return this.getTypedRuleContext(HandlerStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDmlStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDmlStatement(this);
		}
	}


}



class TransactionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_transactionStatement;
    }

	startTransaction() {
	    return this.getTypedRuleContext(StartTransactionContext,0);
	};

	beginWork() {
	    return this.getTypedRuleContext(BeginWorkContext,0);
	};

	commitWork() {
	    return this.getTypedRuleContext(CommitWorkContext,0);
	};

	rollbackWork() {
	    return this.getTypedRuleContext(RollbackWorkContext,0);
	};

	savepointStatement() {
	    return this.getTypedRuleContext(SavepointStatementContext,0);
	};

	rollbackStatement() {
	    return this.getTypedRuleContext(RollbackStatementContext,0);
	};

	releaseStatement() {
	    return this.getTypedRuleContext(ReleaseStatementContext,0);
	};

	lockTables() {
	    return this.getTypedRuleContext(LockTablesContext,0);
	};

	unlockTables() {
	    return this.getTypedRuleContext(UnlockTablesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTransactionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTransactionStatement(this);
		}
	}


}



class ReplicationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_replicationStatement;
    }

	changeMaster() {
	    return this.getTypedRuleContext(ChangeMasterContext,0);
	};

	changeReplicationFilter() {
	    return this.getTypedRuleContext(ChangeReplicationFilterContext,0);
	};

	purgeBinaryLogs() {
	    return this.getTypedRuleContext(PurgeBinaryLogsContext,0);
	};

	resetMaster() {
	    return this.getTypedRuleContext(ResetMasterContext,0);
	};

	resetSlave() {
	    return this.getTypedRuleContext(ResetSlaveContext,0);
	};

	startSlave() {
	    return this.getTypedRuleContext(StartSlaveContext,0);
	};

	stopSlave() {
	    return this.getTypedRuleContext(StopSlaveContext,0);
	};

	startGroupReplication() {
	    return this.getTypedRuleContext(StartGroupReplicationContext,0);
	};

	stopGroupReplication() {
	    return this.getTypedRuleContext(StopGroupReplicationContext,0);
	};

	xaStartTransaction() {
	    return this.getTypedRuleContext(XaStartTransactionContext,0);
	};

	xaEndTransaction() {
	    return this.getTypedRuleContext(XaEndTransactionContext,0);
	};

	xaPrepareStatement() {
	    return this.getTypedRuleContext(XaPrepareStatementContext,0);
	};

	xaCommitWork() {
	    return this.getTypedRuleContext(XaCommitWorkContext,0);
	};

	xaRollbackWork() {
	    return this.getTypedRuleContext(XaRollbackWorkContext,0);
	};

	xaRecoverWork() {
	    return this.getTypedRuleContext(XaRecoverWorkContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterReplicationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitReplicationStatement(this);
		}
	}


}



class PreparedStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_preparedStatement;
    }

	prepareStatement() {
	    return this.getTypedRuleContext(PrepareStatementContext,0);
	};

	executeStatement() {
	    return this.getTypedRuleContext(ExecuteStatementContext,0);
	};

	deallocatePrepare() {
	    return this.getTypedRuleContext(DeallocatePrepareContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPreparedStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPreparedStatement(this);
		}
	}


}



class CompoundStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_compoundStatement;
    }

	blockStatement() {
	    return this.getTypedRuleContext(BlockStatementContext,0);
	};

	caseStatement() {
	    return this.getTypedRuleContext(CaseStatementContext,0);
	};

	ifStatement() {
	    return this.getTypedRuleContext(IfStatementContext,0);
	};

	leaveStatement() {
	    return this.getTypedRuleContext(LeaveStatementContext,0);
	};

	loopStatement() {
	    return this.getTypedRuleContext(LoopStatementContext,0);
	};

	repeatStatement() {
	    return this.getTypedRuleContext(RepeatStatementContext,0);
	};

	whileStatement() {
	    return this.getTypedRuleContext(WhileStatementContext,0);
	};

	iterateStatement() {
	    return this.getTypedRuleContext(IterateStatementContext,0);
	};

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	cursorStatement() {
	    return this.getTypedRuleContext(CursorStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCompoundStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCompoundStatement(this);
		}
	}


}



class AdministrationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_administrationStatement;
    }

	alterUser() {
	    return this.getTypedRuleContext(AlterUserContext,0);
	};

	createUser() {
	    return this.getTypedRuleContext(CreateUserContext,0);
	};

	dropUser() {
	    return this.getTypedRuleContext(DropUserContext,0);
	};

	grantStatement() {
	    return this.getTypedRuleContext(GrantStatementContext,0);
	};

	grantProxy() {
	    return this.getTypedRuleContext(GrantProxyContext,0);
	};

	renameUser() {
	    return this.getTypedRuleContext(RenameUserContext,0);
	};

	revokeStatement() {
	    return this.getTypedRuleContext(RevokeStatementContext,0);
	};

	revokeProxy() {
	    return this.getTypedRuleContext(RevokeProxyContext,0);
	};

	analyzeTable() {
	    return this.getTypedRuleContext(AnalyzeTableContext,0);
	};

	checkTable() {
	    return this.getTypedRuleContext(CheckTableContext,0);
	};

	checksumTable() {
	    return this.getTypedRuleContext(ChecksumTableContext,0);
	};

	optimizeTable() {
	    return this.getTypedRuleContext(OptimizeTableContext,0);
	};

	repairTable() {
	    return this.getTypedRuleContext(RepairTableContext,0);
	};

	createUdfunction() {
	    return this.getTypedRuleContext(CreateUdfunctionContext,0);
	};

	installPlugin() {
	    return this.getTypedRuleContext(InstallPluginContext,0);
	};

	uninstallPlugin() {
	    return this.getTypedRuleContext(UninstallPluginContext,0);
	};

	setStatement() {
	    return this.getTypedRuleContext(SetStatementContext,0);
	};

	showStatement() {
	    return this.getTypedRuleContext(ShowStatementContext,0);
	};

	binlogStatement() {
	    return this.getTypedRuleContext(BinlogStatementContext,0);
	};

	cacheIndexStatement() {
	    return this.getTypedRuleContext(CacheIndexStatementContext,0);
	};

	flushStatement() {
	    return this.getTypedRuleContext(FlushStatementContext,0);
	};

	killStatement() {
	    return this.getTypedRuleContext(KillStatementContext,0);
	};

	loadIndexIntoCache() {
	    return this.getTypedRuleContext(LoadIndexIntoCacheContext,0);
	};

	resetStatement() {
	    return this.getTypedRuleContext(ResetStatementContext,0);
	};

	shutdownStatement() {
	    return this.getTypedRuleContext(ShutdownStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAdministrationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAdministrationStatement(this);
		}
	}


}



class UtilityStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_utilityStatement;
    }

	simpleDescribeStatement() {
	    return this.getTypedRuleContext(SimpleDescribeStatementContext,0);
	};

	fullDescribeStatement() {
	    return this.getTypedRuleContext(FullDescribeStatementContext,0);
	};

	helpStatement() {
	    return this.getTypedRuleContext(HelpStatementContext,0);
	};

	useStatement() {
	    return this.getTypedRuleContext(UseStatementContext,0);
	};

	signalStatement() {
	    return this.getTypedRuleContext(SignalStatementContext,0);
	};

	resignalStatement() {
	    return this.getTypedRuleContext(ResignalStatementContext,0);
	};

	diagnosticsStatement() {
	    return this.getTypedRuleContext(DiagnosticsStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUtilityStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUtilityStatement(this);
		}
	}


}



class CreateDatabaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createDatabase;
        this.dbFormat = null; // Token
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	DATABASE() {
	    return this.getToken(MySqlParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(MySqlParser.SCHEMA, 0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	createDatabaseOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CreateDatabaseOptionContext);
	    } else {
	        return this.getTypedRuleContext(CreateDatabaseOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateDatabase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateDatabase(this);
		}
	}


}



class CreateEventContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createEvent;
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	EVENT() {
	    return this.getToken(MySqlParser.EVENT, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	ON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.ON);
	    } else {
	        return this.getToken(MySqlParser.ON, i);
	    }
	};


	SCHEDULE() {
	    return this.getToken(MySqlParser.SCHEDULE, 0);
	};

	scheduleExpression() {
	    return this.getTypedRuleContext(ScheduleExpressionContext,0);
	};

	DO() {
	    return this.getToken(MySqlParser.DO, 0);
	};

	routineBody() {
	    return this.getTypedRuleContext(RoutineBodyContext,0);
	};

	ownerStatement() {
	    return this.getTypedRuleContext(OwnerStatementContext,0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	COMPLETION() {
	    return this.getToken(MySqlParser.COMPLETION, 0);
	};

	PRESERVE() {
	    return this.getToken(MySqlParser.PRESERVE, 0);
	};

	enableType() {
	    return this.getTypedRuleContext(EnableTypeContext,0);
	};

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateEvent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateEvent(this);
		}
	}


}



class CreateIndexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createIndex;
        this.intimeAction = null; // Token
        this.indexCategory = null; // Token
        this.algType = null; // Token
        this.lockType = null; // Token
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	indexType() {
	    return this.getTypedRuleContext(IndexTypeContext,0);
	};

	indexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(IndexOptionContext,i);
	    }
	};

	ALGORITHM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.ALGORITHM);
	    } else {
	        return this.getToken(MySqlParser.ALGORITHM, i);
	    }
	};


	LOCK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LOCK);
	    } else {
	        return this.getToken(MySqlParser.LOCK, i);
	    }
	};


	ONLINE() {
	    return this.getToken(MySqlParser.ONLINE, 0);
	};

	OFFLINE() {
	    return this.getToken(MySqlParser.OFFLINE, 0);
	};

	UNIQUE() {
	    return this.getToken(MySqlParser.UNIQUE, 0);
	};

	FULLTEXT() {
	    return this.getToken(MySqlParser.FULLTEXT, 0);
	};

	SPATIAL() {
	    return this.getToken(MySqlParser.SPATIAL, 0);
	};

	DEFAULT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.DEFAULT);
	    } else {
	        return this.getToken(MySqlParser.DEFAULT, i);
	    }
	};


	INPLACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.INPLACE);
	    } else {
	        return this.getToken(MySqlParser.INPLACE, i);
	    }
	};


	COPY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COPY);
	    } else {
	        return this.getToken(MySqlParser.COPY, i);
	    }
	};


	NONE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.NONE);
	    } else {
	        return this.getToken(MySqlParser.NONE, i);
	    }
	};


	SHARED = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.SHARED);
	    } else {
	        return this.getToken(MySqlParser.SHARED, i);
	    }
	};


	EXCLUSIVE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EXCLUSIVE);
	    } else {
	        return this.getToken(MySqlParser.EXCLUSIVE, i);
	    }
	};


	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateIndex(this);
		}
	}


}



class CreateLogfileGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createLogfileGroup;
        this.undoFile = null; // Token
        this.initSize = null; // FileSizeLiteralContext
        this.undoSize = null; // FileSizeLiteralContext
        this.redoSize = null; // FileSizeLiteralContext
        this.comment = null; // Token
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	LOGFILE() {
	    return this.getToken(MySqlParser.LOGFILE, 0);
	};

	GROUP() {
	    return this.getToken(MySqlParser.GROUP, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	UNDOFILE() {
	    return this.getToken(MySqlParser.UNDOFILE, 0);
	};

	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	engineName() {
	    return this.getTypedRuleContext(EngineNameContext,0);
	};

	STRING_LITERAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.STRING_LITERAL);
	    } else {
	        return this.getToken(MySqlParser.STRING_LITERAL, i);
	    }
	};


	INITIAL_SIZE() {
	    return this.getToken(MySqlParser.INITIAL_SIZE, 0);
	};

	UNDO_BUFFER_SIZE() {
	    return this.getToken(MySqlParser.UNDO_BUFFER_SIZE, 0);
	};

	REDO_BUFFER_SIZE() {
	    return this.getToken(MySqlParser.REDO_BUFFER_SIZE, 0);
	};

	NODEGROUP() {
	    return this.getToken(MySqlParser.NODEGROUP, 0);
	};

	WAIT() {
	    return this.getToken(MySqlParser.WAIT, 0);
	};

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	fileSizeLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FileSizeLiteralContext);
	    } else {
	        return this.getTypedRuleContext(FileSizeLiteralContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateLogfileGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateLogfileGroup(this);
		}
	}


}



class CreateProcedureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createProcedure;
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	PROCEDURE() {
	    return this.getToken(MySqlParser.PROCEDURE, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	routineBody() {
	    return this.getTypedRuleContext(RoutineBodyContext,0);
	};

	ownerStatement() {
	    return this.getTypedRuleContext(OwnerStatementContext,0);
	};

	procedureParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureParameterContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureParameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	routineOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RoutineOptionContext);
	    } else {
	        return this.getTypedRuleContext(RoutineOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateProcedure(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateProcedure(this);
		}
	}


}



class CreateFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createFunction;
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	RETURNS() {
	    return this.getToken(MySqlParser.RETURNS, 0);
	};

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	routineBody() {
	    return this.getTypedRuleContext(RoutineBodyContext,0);
	};

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	ownerStatement() {
	    return this.getTypedRuleContext(OwnerStatementContext,0);
	};

	functionParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionParameterContext);
	    } else {
	        return this.getTypedRuleContext(FunctionParameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	routineOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RoutineOptionContext);
	    } else {
	        return this.getTypedRuleContext(RoutineOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateFunction(this);
		}
	}


}



class CreateServerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createServer;
        this.wrapperName = null; // Token
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	SERVER() {
	    return this.getToken(MySqlParser.SERVER, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	FOREIGN() {
	    return this.getToken(MySqlParser.FOREIGN, 0);
	};

	DATA() {
	    return this.getToken(MySqlParser.DATA, 0);
	};

	WRAPPER() {
	    return this.getToken(MySqlParser.WRAPPER, 0);
	};

	OPTIONS() {
	    return this.getToken(MySqlParser.OPTIONS, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	serverOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ServerOptionContext);
	    } else {
	        return this.getTypedRuleContext(ServerOptionContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	MYSQL() {
	    return this.getToken(MySqlParser.MYSQL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateServer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateServer(this);
		}
	}


}



class CreateTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createTable;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CopyCreateTableContext extends CreateTableContext {

    constructor(parser, ctx) {
        super(parser);
        this.parenthesisTable = null; // TableNameContext;
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tableName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableNameContext);
	    } else {
	        return this.getTypedRuleContext(TableNameContext,i);
	    }
	};

	LIKE() {
	    return this.getToken(MySqlParser.LIKE, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	TEMPORARY() {
	    return this.getToken(MySqlParser.TEMPORARY, 0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCopyCreateTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCopyCreateTable(this);
		}
	}


}

MySqlParser.CopyCreateTableContext = CopyCreateTableContext;

class ColumnCreateTableContext extends CreateTableContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	createDefinitions() {
	    return this.getTypedRuleContext(CreateDefinitionsContext,0);
	};

	TEMPORARY() {
	    return this.getToken(MySqlParser.TEMPORARY, 0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	tableOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableOptionContext);
	    } else {
	        return this.getTypedRuleContext(TableOptionContext,i);
	    }
	};

	partitionDefinitions() {
	    return this.getTypedRuleContext(PartitionDefinitionsContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterColumnCreateTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitColumnCreateTable(this);
		}
	}


}

MySqlParser.ColumnCreateTableContext = ColumnCreateTableContext;

class QueryCreateTableContext extends CreateTableContext {

    constructor(parser, ctx) {
        super(parser);
        this.keyViolate = null; // Token;
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	TEMPORARY() {
	    return this.getToken(MySqlParser.TEMPORARY, 0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	createDefinitions() {
	    return this.getTypedRuleContext(CreateDefinitionsContext,0);
	};

	tableOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableOptionContext);
	    } else {
	        return this.getTypedRuleContext(TableOptionContext,i);
	    }
	};

	partitionDefinitions() {
	    return this.getTypedRuleContext(PartitionDefinitionsContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	IGNORE() {
	    return this.getToken(MySqlParser.IGNORE, 0);
	};

	REPLACE() {
	    return this.getToken(MySqlParser.REPLACE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterQueryCreateTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitQueryCreateTable(this);
		}
	}


}

MySqlParser.QueryCreateTableContext = QueryCreateTableContext;

class CreateTablespaceInnodbContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createTablespaceInnodb;
        this.datafile = null; // Token
        this.fileBlockSize = null; // FileSizeLiteralContext
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	DATAFILE() {
	    return this.getToken(MySqlParser.DATAFILE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	FILE_BLOCK_SIZE() {
	    return this.getToken(MySqlParser.FILE_BLOCK_SIZE, 0);
	};

	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	engineName() {
	    return this.getTypedRuleContext(EngineNameContext,0);
	};

	fileSizeLiteral() {
	    return this.getTypedRuleContext(FileSizeLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateTablespaceInnodb(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateTablespaceInnodb(this);
		}
	}


}



class CreateTablespaceNdbContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createTablespaceNdb;
        this.datafile = null; // Token
        this.extentSize = null; // FileSizeLiteralContext
        this.initialSize = null; // FileSizeLiteralContext
        this.autoextendSize = null; // FileSizeLiteralContext
        this.maxSize = null; // FileSizeLiteralContext
        this.comment = null; // Token
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	DATAFILE() {
	    return this.getToken(MySqlParser.DATAFILE, 0);
	};

	USE() {
	    return this.getToken(MySqlParser.USE, 0);
	};

	LOGFILE() {
	    return this.getToken(MySqlParser.LOGFILE, 0);
	};

	GROUP() {
	    return this.getToken(MySqlParser.GROUP, 0);
	};

	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	engineName() {
	    return this.getTypedRuleContext(EngineNameContext,0);
	};

	STRING_LITERAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.STRING_LITERAL);
	    } else {
	        return this.getToken(MySqlParser.STRING_LITERAL, i);
	    }
	};


	EXTENT_SIZE() {
	    return this.getToken(MySqlParser.EXTENT_SIZE, 0);
	};

	INITIAL_SIZE() {
	    return this.getToken(MySqlParser.INITIAL_SIZE, 0);
	};

	AUTOEXTEND_SIZE() {
	    return this.getToken(MySqlParser.AUTOEXTEND_SIZE, 0);
	};

	MAX_SIZE() {
	    return this.getToken(MySqlParser.MAX_SIZE, 0);
	};

	NODEGROUP() {
	    return this.getToken(MySqlParser.NODEGROUP, 0);
	};

	WAIT() {
	    return this.getToken(MySqlParser.WAIT, 0);
	};

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	fileSizeLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FileSizeLiteralContext);
	    } else {
	        return this.getTypedRuleContext(FileSizeLiteralContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateTablespaceNdb(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateTablespaceNdb(this);
		}
	}


}



class CreateTriggerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createTrigger;
        this.thisTrigger = null; // FullIdContext
        this.triggerTime = null; // Token
        this.triggerEvent = null; // Token
        this.triggerPlace = null; // Token
        this.otherTrigger = null; // FullIdContext
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	TRIGGER() {
	    return this.getToken(MySqlParser.TRIGGER, 0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	EACH() {
	    return this.getToken(MySqlParser.EACH, 0);
	};

	ROW() {
	    return this.getToken(MySqlParser.ROW, 0);
	};

	routineBody() {
	    return this.getTypedRuleContext(RoutineBodyContext,0);
	};

	fullId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FullIdContext);
	    } else {
	        return this.getTypedRuleContext(FullIdContext,i);
	    }
	};

	BEFORE() {
	    return this.getToken(MySqlParser.BEFORE, 0);
	};

	AFTER() {
	    return this.getToken(MySqlParser.AFTER, 0);
	};

	INSERT() {
	    return this.getToken(MySqlParser.INSERT, 0);
	};

	UPDATE() {
	    return this.getToken(MySqlParser.UPDATE, 0);
	};

	DELETE() {
	    return this.getToken(MySqlParser.DELETE, 0);
	};

	ownerStatement() {
	    return this.getTypedRuleContext(OwnerStatementContext,0);
	};

	FOLLOWS() {
	    return this.getToken(MySqlParser.FOLLOWS, 0);
	};

	PRECEDES() {
	    return this.getToken(MySqlParser.PRECEDES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateTrigger(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateTrigger(this);
		}
	}


}



class CreateViewContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createView;
        this.algType = null; // Token
        this.secContext = null; // Token
        this.checkOption = null; // Token
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	VIEW() {
	    return this.getToken(MySqlParser.VIEW, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	OR() {
	    return this.getToken(MySqlParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(MySqlParser.REPLACE, 0);
	};

	ALGORITHM() {
	    return this.getToken(MySqlParser.ALGORITHM, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	ownerStatement() {
	    return this.getTypedRuleContext(OwnerStatementContext,0);
	};

	SQL() {
	    return this.getToken(MySqlParser.SQL, 0);
	};

	SECURITY() {
	    return this.getToken(MySqlParser.SECURITY, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	CHECK() {
	    return this.getToken(MySqlParser.CHECK, 0);
	};

	OPTION() {
	    return this.getToken(MySqlParser.OPTION, 0);
	};

	UNDEFINED() {
	    return this.getToken(MySqlParser.UNDEFINED, 0);
	};

	MERGE() {
	    return this.getToken(MySqlParser.MERGE, 0);
	};

	TEMPTABLE() {
	    return this.getToken(MySqlParser.TEMPTABLE, 0);
	};

	DEFINER() {
	    return this.getToken(MySqlParser.DEFINER, 0);
	};

	INVOKER() {
	    return this.getToken(MySqlParser.INVOKER, 0);
	};

	CASCADED() {
	    return this.getToken(MySqlParser.CASCADED, 0);
	};

	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateView(this);
		}
	}


}



class CreateDatabaseOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createDatabaseOption;
    }

	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	CHARSET() {
	    return this.getToken(MySqlParser.CHARSET, 0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	DEFAULT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.DEFAULT);
	    } else {
	        return this.getToken(MySqlParser.DEFAULT, i);
	    }
	};


	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	COLLATE() {
	    return this.getToken(MySqlParser.COLLATE, 0);
	};

	collationName() {
	    return this.getTypedRuleContext(CollationNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateDatabaseOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateDatabaseOption(this);
		}
	}


}



class OwnerStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_ownerStatement;
    }

	DEFINER() {
	    return this.getToken(MySqlParser.DEFINER, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	userName() {
	    return this.getTypedRuleContext(UserNameContext,0);
	};

	CURRENT_USER() {
	    return this.getToken(MySqlParser.CURRENT_USER, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterOwnerStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitOwnerStatement(this);
		}
	}


}



class ScheduleExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_scheduleExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PreciseScheduleContext extends ScheduleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	AT() {
	    return this.getToken(MySqlParser.AT, 0);
	};

	timestampValue() {
	    return this.getTypedRuleContext(TimestampValueContext,0);
	};

	intervalExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntervalExprContext);
	    } else {
	        return this.getTypedRuleContext(IntervalExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPreciseSchedule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPreciseSchedule(this);
		}
	}


}

MySqlParser.PreciseScheduleContext = PreciseScheduleContext;

class IntervalScheduleContext extends ScheduleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.startTimestamp = null; // TimestampValueContext;
        this._intervalExpr = null; // IntervalExprContext;
        this.startIntervals = []; // of IntervalExprContexts;
        this.endTimestamp = null; // TimestampValueContext;
        this.endIntervals = []; // of IntervalExprContexts;
        super.copyFrom(ctx);
    }

	EVERY() {
	    return this.getToken(MySqlParser.EVERY, 0);
	};

	intervalType() {
	    return this.getTypedRuleContext(IntervalTypeContext,0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	STARTS() {
	    return this.getToken(MySqlParser.STARTS, 0);
	};

	ENDS() {
	    return this.getToken(MySqlParser.ENDS, 0);
	};

	timestampValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TimestampValueContext);
	    } else {
	        return this.getTypedRuleContext(TimestampValueContext,i);
	    }
	};

	intervalExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntervalExprContext);
	    } else {
	        return this.getTypedRuleContext(IntervalExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIntervalSchedule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIntervalSchedule(this);
		}
	}


}

MySqlParser.IntervalScheduleContext = IntervalScheduleContext;

class TimestampValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_timestampValue;
    }

	CURRENT_TIMESTAMP() {
	    return this.getToken(MySqlParser.CURRENT_TIMESTAMP, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTimestampValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTimestampValue(this);
		}
	}


}



class IntervalExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_intervalExpr;
    }

	PLUS() {
	    return this.getToken(MySqlParser.PLUS, 0);
	};

	INTERVAL() {
	    return this.getToken(MySqlParser.INTERVAL, 0);
	};

	intervalType() {
	    return this.getTypedRuleContext(IntervalTypeContext,0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIntervalExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIntervalExpr(this);
		}
	}


}



class IntervalTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_intervalType;
    }

	intervalTypeBase() {
	    return this.getTypedRuleContext(IntervalTypeBaseContext,0);
	};

	YEAR() {
	    return this.getToken(MySqlParser.YEAR, 0);
	};

	YEAR_MONTH() {
	    return this.getToken(MySqlParser.YEAR_MONTH, 0);
	};

	DAY_HOUR() {
	    return this.getToken(MySqlParser.DAY_HOUR, 0);
	};

	DAY_MINUTE() {
	    return this.getToken(MySqlParser.DAY_MINUTE, 0);
	};

	DAY_SECOND() {
	    return this.getToken(MySqlParser.DAY_SECOND, 0);
	};

	HOUR_MINUTE() {
	    return this.getToken(MySqlParser.HOUR_MINUTE, 0);
	};

	HOUR_SECOND() {
	    return this.getToken(MySqlParser.HOUR_SECOND, 0);
	};

	MINUTE_SECOND() {
	    return this.getToken(MySqlParser.MINUTE_SECOND, 0);
	};

	SECOND_MICROSECOND() {
	    return this.getToken(MySqlParser.SECOND_MICROSECOND, 0);
	};

	MINUTE_MICROSECOND() {
	    return this.getToken(MySqlParser.MINUTE_MICROSECOND, 0);
	};

	HOUR_MICROSECOND() {
	    return this.getToken(MySqlParser.HOUR_MICROSECOND, 0);
	};

	DAY_MICROSECOND() {
	    return this.getToken(MySqlParser.DAY_MICROSECOND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIntervalType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIntervalType(this);
		}
	}


}



class EnableTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_enableType;
    }

	ENABLE() {
	    return this.getToken(MySqlParser.ENABLE, 0);
	};

	DISABLE() {
	    return this.getToken(MySqlParser.DISABLE, 0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	SLAVE() {
	    return this.getToken(MySqlParser.SLAVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterEnableType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitEnableType(this);
		}
	}


}



class IndexTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_indexType;
    }

	USING() {
	    return this.getToken(MySqlParser.USING, 0);
	};

	BTREE() {
	    return this.getToken(MySqlParser.BTREE, 0);
	};

	HASH() {
	    return this.getToken(MySqlParser.HASH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIndexType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIndexType(this);
		}
	}


}



class IndexOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_indexOption;
    }

	KEY_BLOCK_SIZE() {
	    return this.getToken(MySqlParser.KEY_BLOCK_SIZE, 0);
	};

	fileSizeLiteral() {
	    return this.getTypedRuleContext(FileSizeLiteralContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	indexType() {
	    return this.getTypedRuleContext(IndexTypeContext,0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	PARSER() {
	    return this.getToken(MySqlParser.PARSER, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	INVISIBLE() {
	    return this.getToken(MySqlParser.INVISIBLE, 0);
	};

	VISIBLE() {
	    return this.getToken(MySqlParser.VISIBLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIndexOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIndexOption(this);
		}
	}


}



class ProcedureParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_procedureParameter;
        this.direction = null; // Token
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	OUT() {
	    return this.getToken(MySqlParser.OUT, 0);
	};

	INOUT() {
	    return this.getToken(MySqlParser.INOUT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterProcedureParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitProcedureParameter(this);
		}
	}


}



class FunctionParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_functionParameter;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFunctionParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFunctionParameter(this);
		}
	}


}



class RoutineOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_routineOption;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class RoutineBehaviorContext extends RoutineOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DETERMINISTIC() {
	    return this.getToken(MySqlParser.DETERMINISTIC, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRoutineBehavior(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRoutineBehavior(this);
		}
	}


}

MySqlParser.RoutineBehaviorContext = RoutineBehaviorContext;

class RoutineLanguageContext extends RoutineOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LANGUAGE() {
	    return this.getToken(MySqlParser.LANGUAGE, 0);
	};

	SQL() {
	    return this.getToken(MySqlParser.SQL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRoutineLanguage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRoutineLanguage(this);
		}
	}


}

MySqlParser.RoutineLanguageContext = RoutineLanguageContext;

class RoutineCommentContext extends RoutineOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRoutineComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRoutineComment(this);
		}
	}


}

MySqlParser.RoutineCommentContext = RoutineCommentContext;

class RoutineSecurityContext extends RoutineOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.context = null; // Token;
        super.copyFrom(ctx);
    }

	SQL() {
	    return this.getToken(MySqlParser.SQL, 0);
	};

	SECURITY() {
	    return this.getToken(MySqlParser.SECURITY, 0);
	};

	DEFINER() {
	    return this.getToken(MySqlParser.DEFINER, 0);
	};

	INVOKER() {
	    return this.getToken(MySqlParser.INVOKER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRoutineSecurity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRoutineSecurity(this);
		}
	}


}

MySqlParser.RoutineSecurityContext = RoutineSecurityContext;

class RoutineDataContext extends RoutineOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CONTAINS() {
	    return this.getToken(MySqlParser.CONTAINS, 0);
	};

	SQL() {
	    return this.getToken(MySqlParser.SQL, 0);
	};

	NO() {
	    return this.getToken(MySqlParser.NO, 0);
	};

	READS() {
	    return this.getToken(MySqlParser.READS, 0);
	};

	DATA() {
	    return this.getToken(MySqlParser.DATA, 0);
	};

	MODIFIES() {
	    return this.getToken(MySqlParser.MODIFIES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRoutineData(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRoutineData(this);
		}
	}


}

MySqlParser.RoutineDataContext = RoutineDataContext;

class ServerOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_serverOption;
    }

	HOST() {
	    return this.getToken(MySqlParser.HOST, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	DATABASE() {
	    return this.getToken(MySqlParser.DATABASE, 0);
	};

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	PASSWORD() {
	    return this.getToken(MySqlParser.PASSWORD, 0);
	};

	SOCKET() {
	    return this.getToken(MySqlParser.SOCKET, 0);
	};

	OWNER() {
	    return this.getToken(MySqlParser.OWNER, 0);
	};

	PORT() {
	    return this.getToken(MySqlParser.PORT, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterServerOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitServerOption(this);
		}
	}


}



class CreateDefinitionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createDefinitions;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	createDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CreateDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(CreateDefinitionContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateDefinitions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateDefinitions(this);
		}
	}


}



class CreateDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createDefinition;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ColumnDeclarationContext extends CreateDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	columnDefinition() {
	    return this.getTypedRuleContext(ColumnDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterColumnDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitColumnDeclaration(this);
		}
	}


}

MySqlParser.ColumnDeclarationContext = ColumnDeclarationContext;

class ConstraintDeclarationContext extends CreateDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	tableConstraint() {
	    return this.getTypedRuleContext(TableConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterConstraintDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitConstraintDeclaration(this);
		}
	}


}

MySqlParser.ConstraintDeclarationContext = ConstraintDeclarationContext;

class IndexDeclarationContext extends CreateDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	indexColumnDefinition() {
	    return this.getTypedRuleContext(IndexColumnDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIndexDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIndexDeclaration(this);
		}
	}


}

MySqlParser.IndexDeclarationContext = IndexDeclarationContext;

class ColumnDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_columnDefinition;
    }

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	columnConstraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnConstraintContext);
	    } else {
	        return this.getTypedRuleContext(ColumnConstraintContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterColumnDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitColumnDefinition(this);
		}
	}


}



class ColumnConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_columnConstraint;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class StorageColumnConstraintContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        this.storageval = null; // Token;
        super.copyFrom(ctx);
    }

	STORAGE() {
	    return this.getToken(MySqlParser.STORAGE, 0);
	};

	DISK() {
	    return this.getToken(MySqlParser.DISK, 0);
	};

	MEMORY() {
	    return this.getToken(MySqlParser.MEMORY, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStorageColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStorageColumnConstraint(this);
		}
	}


}

MySqlParser.StorageColumnConstraintContext = StorageColumnConstraintContext;

class AutoIncrementColumnConstraintContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	AUTO_INCREMENT() {
	    return this.getToken(MySqlParser.AUTO_INCREMENT, 0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	UPDATE() {
	    return this.getToken(MySqlParser.UPDATE, 0);
	};

	currentTimestamp() {
	    return this.getTypedRuleContext(CurrentTimestampContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAutoIncrementColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAutoIncrementColumnConstraint(this);
		}
	}


}

MySqlParser.AutoIncrementColumnConstraintContext = AutoIncrementColumnConstraintContext;

class CommentColumnConstraintContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCommentColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCommentColumnConstraint(this);
		}
	}


}

MySqlParser.CommentColumnConstraintContext = CommentColumnConstraintContext;

class UniqueKeyColumnConstraintContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UNIQUE() {
	    return this.getToken(MySqlParser.UNIQUE, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUniqueKeyColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUniqueKeyColumnConstraint(this);
		}
	}


}

MySqlParser.UniqueKeyColumnConstraintContext = UniqueKeyColumnConstraintContext;

class SerialDefaultColumnConstraintContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SERIAL() {
	    return this.getToken(MySqlParser.SERIAL, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	VALUE() {
	    return this.getToken(MySqlParser.VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSerialDefaultColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSerialDefaultColumnConstraint(this);
		}
	}


}

MySqlParser.SerialDefaultColumnConstraintContext = SerialDefaultColumnConstraintContext;

class GeneratedColumnConstraintContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	GENERATED() {
	    return this.getToken(MySqlParser.GENERATED, 0);
	};

	ALWAYS() {
	    return this.getToken(MySqlParser.ALWAYS, 0);
	};

	VIRTUAL() {
	    return this.getToken(MySqlParser.VIRTUAL, 0);
	};

	STORED() {
	    return this.getToken(MySqlParser.STORED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGeneratedColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGeneratedColumnConstraint(this);
		}
	}


}

MySqlParser.GeneratedColumnConstraintContext = GeneratedColumnConstraintContext;

class FormatColumnConstraintContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        this.colformat = null; // Token;
        super.copyFrom(ctx);
    }

	COLUMN_FORMAT() {
	    return this.getToken(MySqlParser.COLUMN_FORMAT, 0);
	};

	FIXED() {
	    return this.getToken(MySqlParser.FIXED, 0);
	};

	DYNAMIC() {
	    return this.getToken(MySqlParser.DYNAMIC, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFormatColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFormatColumnConstraint(this);
		}
	}


}

MySqlParser.FormatColumnConstraintContext = FormatColumnConstraintContext;

class CollateColumnConstraintContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	COLLATE() {
	    return this.getToken(MySqlParser.COLLATE, 0);
	};

	collationName() {
	    return this.getTypedRuleContext(CollationNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCollateColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCollateColumnConstraint(this);
		}
	}


}

MySqlParser.CollateColumnConstraintContext = CollateColumnConstraintContext;

class PrimaryKeyColumnConstraintContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	PRIMARY() {
	    return this.getToken(MySqlParser.PRIMARY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPrimaryKeyColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPrimaryKeyColumnConstraint(this);
		}
	}


}

MySqlParser.PrimaryKeyColumnConstraintContext = PrimaryKeyColumnConstraintContext;

class CheckColumnConstraintContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // UidContext;
        super.copyFrom(ctx);
    }

	CHECK() {
	    return this.getToken(MySqlParser.CHECK, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCheckColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCheckColumnConstraint(this);
		}
	}


}

MySqlParser.CheckColumnConstraintContext = CheckColumnConstraintContext;

class NullColumnConstraintContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	nullNotnull() {
	    return this.getTypedRuleContext(NullNotnullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterNullColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitNullColumnConstraint(this);
		}
	}


}

MySqlParser.NullColumnConstraintContext = NullColumnConstraintContext;

class DefaultColumnConstraintContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	defaultValue() {
	    return this.getTypedRuleContext(DefaultValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDefaultColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDefaultColumnConstraint(this);
		}
	}


}

MySqlParser.DefaultColumnConstraintContext = DefaultColumnConstraintContext;

class ReferenceColumnConstraintContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	referenceDefinition() {
	    return this.getTypedRuleContext(ReferenceDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterReferenceColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitReferenceColumnConstraint(this);
		}
	}


}

MySqlParser.ReferenceColumnConstraintContext = ReferenceColumnConstraintContext;

class TableConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tableConstraint;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class UniqueKeyTableConstraintContext extends TableConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // UidContext;
        this.indexFormat = null; // Token;
        this.index = null; // UidContext;
        super.copyFrom(ctx);
    }

	UNIQUE() {
	    return this.getToken(MySqlParser.UNIQUE, 0);
	};

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	indexType() {
	    return this.getTypedRuleContext(IndexTypeContext,0);
	};

	indexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(IndexOptionContext,i);
	    }
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUniqueKeyTableConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUniqueKeyTableConstraint(this);
		}
	}


}

MySqlParser.UniqueKeyTableConstraintContext = UniqueKeyTableConstraintContext;

class CheckTableConstraintContext extends TableConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // UidContext;
        super.copyFrom(ctx);
    }

	CHECK() {
	    return this.getToken(MySqlParser.CHECK, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCheckTableConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCheckTableConstraint(this);
		}
	}


}

MySqlParser.CheckTableConstraintContext = CheckTableConstraintContext;

class PrimaryKeyTableConstraintContext extends TableConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // UidContext;
        this.index = null; // UidContext;
        super.copyFrom(ctx);
    }

	PRIMARY() {
	    return this.getToken(MySqlParser.PRIMARY, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	indexType() {
	    return this.getTypedRuleContext(IndexTypeContext,0);
	};

	indexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(IndexOptionContext,i);
	    }
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPrimaryKeyTableConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPrimaryKeyTableConstraint(this);
		}
	}


}

MySqlParser.PrimaryKeyTableConstraintContext = PrimaryKeyTableConstraintContext;

class ForeignKeyTableConstraintContext extends TableConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // UidContext;
        this.index = null; // UidContext;
        super.copyFrom(ctx);
    }

	FOREIGN() {
	    return this.getToken(MySqlParser.FOREIGN, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	referenceDefinition() {
	    return this.getTypedRuleContext(ReferenceDefinitionContext,0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterForeignKeyTableConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitForeignKeyTableConstraint(this);
		}
	}


}

MySqlParser.ForeignKeyTableConstraintContext = ForeignKeyTableConstraintContext;

class ReferenceDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_referenceDefinition;
        this.matchType = null; // Token
    }

	REFERENCES() {
	    return this.getToken(MySqlParser.REFERENCES, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	MATCH() {
	    return this.getToken(MySqlParser.MATCH, 0);
	};

	referenceAction() {
	    return this.getTypedRuleContext(ReferenceActionContext,0);
	};

	FULL() {
	    return this.getToken(MySqlParser.FULL, 0);
	};

	PARTIAL() {
	    return this.getToken(MySqlParser.PARTIAL, 0);
	};

	SIMPLE() {
	    return this.getToken(MySqlParser.SIMPLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterReferenceDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitReferenceDefinition(this);
		}
	}


}



class ReferenceActionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_referenceAction;
        this.onDelete = null; // ReferenceControlTypeContext
        this.onUpdate = null; // ReferenceControlTypeContext
    }

	ON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.ON);
	    } else {
	        return this.getToken(MySqlParser.ON, i);
	    }
	};


	DELETE() {
	    return this.getToken(MySqlParser.DELETE, 0);
	};

	referenceControlType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReferenceControlTypeContext);
	    } else {
	        return this.getTypedRuleContext(ReferenceControlTypeContext,i);
	    }
	};

	UPDATE() {
	    return this.getToken(MySqlParser.UPDATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterReferenceAction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitReferenceAction(this);
		}
	}


}



class ReferenceControlTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_referenceControlType;
    }

	RESTRICT() {
	    return this.getToken(MySqlParser.RESTRICT, 0);
	};

	CASCADE() {
	    return this.getToken(MySqlParser.CASCADE, 0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	NULL_LITERAL() {
	    return this.getToken(MySqlParser.NULL_LITERAL, 0);
	};

	NO() {
	    return this.getToken(MySqlParser.NO, 0);
	};

	ACTION() {
	    return this.getToken(MySqlParser.ACTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterReferenceControlType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitReferenceControlType(this);
		}
	}


}



class IndexColumnDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_indexColumnDefinition;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SpecialIndexDeclarationContext extends IndexColumnDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        this.indexFormat = null; // Token;
        super.copyFrom(ctx);
    }

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	FULLTEXT() {
	    return this.getToken(MySqlParser.FULLTEXT, 0);
	};

	SPATIAL() {
	    return this.getToken(MySqlParser.SPATIAL, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	indexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(IndexOptionContext,i);
	    }
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSpecialIndexDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSpecialIndexDeclaration(this);
		}
	}


}

MySqlParser.SpecialIndexDeclarationContext = SpecialIndexDeclarationContext;

class SimpleIndexDeclarationContext extends IndexColumnDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        this.indexFormat = null; // Token;
        super.copyFrom(ctx);
    }

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	indexType() {
	    return this.getTypedRuleContext(IndexTypeContext,0);
	};

	indexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(IndexOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSimpleIndexDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSimpleIndexDeclaration(this);
		}
	}


}

MySqlParser.SimpleIndexDeclarationContext = SimpleIndexDeclarationContext;

class TableOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tableOption;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TableOptionEngineContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	engineName() {
	    return this.getTypedRuleContext(EngineNameContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionEngine(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionEngine(this);
		}
	}


}

MySqlParser.TableOptionEngineContext = TableOptionEngineContext;

class TableOptionMaxRowsContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MAX_ROWS() {
	    return this.getToken(MySqlParser.MAX_ROWS, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionMaxRows(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionMaxRows(this);
		}
	}


}

MySqlParser.TableOptionMaxRowsContext = TableOptionMaxRowsContext;

class TableOptionCollateContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	COLLATE() {
	    return this.getToken(MySqlParser.COLLATE, 0);
	};

	collationName() {
	    return this.getTypedRuleContext(CollationNameContext,0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionCollate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionCollate(this);
		}
	}


}

MySqlParser.TableOptionCollateContext = TableOptionCollateContext;

class TableOptionPersistentContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.extBoolValue = null; // Token;
        super.copyFrom(ctx);
    }

	STATS_PERSISTENT() {
	    return this.getToken(MySqlParser.STATS_PERSISTENT, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	ZERO_DECIMAL() {
	    return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	};

	ONE_DECIMAL() {
	    return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionPersistent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionPersistent(this);
		}
	}


}

MySqlParser.TableOptionPersistentContext = TableOptionPersistentContext;

class TableOptionTablespaceContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	tablespaceStorage() {
	    return this.getTypedRuleContext(TablespaceStorageContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionTablespace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionTablespace(this);
		}
	}


}

MySqlParser.TableOptionTablespaceContext = TableOptionTablespaceContext;

class TableOptionPackKeysContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.extBoolValue = null; // Token;
        super.copyFrom(ctx);
    }

	PACK_KEYS() {
	    return this.getToken(MySqlParser.PACK_KEYS, 0);
	};

	ZERO_DECIMAL() {
	    return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	};

	ONE_DECIMAL() {
	    return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionPackKeys(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionPackKeys(this);
		}
	}


}

MySqlParser.TableOptionPackKeysContext = TableOptionPackKeysContext;

class TableOptionPasswordContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PASSWORD() {
	    return this.getToken(MySqlParser.PASSWORD, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionPassword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionPassword(this);
		}
	}


}

MySqlParser.TableOptionPasswordContext = TableOptionPasswordContext;

class TableOptionUnionContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UNION() {
	    return this.getToken(MySqlParser.UNION, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	tables() {
	    return this.getTypedRuleContext(TablesContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionUnion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionUnion(this);
		}
	}


}

MySqlParser.TableOptionUnionContext = TableOptionUnionContext;

class TableOptionSamplePageContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	STATS_SAMPLE_PAGES() {
	    return this.getToken(MySqlParser.STATS_SAMPLE_PAGES, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionSamplePage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionSamplePage(this);
		}
	}


}

MySqlParser.TableOptionSamplePageContext = TableOptionSamplePageContext;

class TableOptionCharsetContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	CHARSET() {
	    return this.getToken(MySqlParser.CHARSET, 0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	DEFAULT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.DEFAULT);
	    } else {
	        return this.getToken(MySqlParser.DEFAULT, i);
	    }
	};


	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionCharset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionCharset(this);
		}
	}


}

MySqlParser.TableOptionCharsetContext = TableOptionCharsetContext;

class TableOptionIndexDirectoryContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	DIRECTORY() {
	    return this.getToken(MySqlParser.DIRECTORY, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionIndexDirectory(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionIndexDirectory(this);
		}
	}


}

MySqlParser.TableOptionIndexDirectoryContext = TableOptionIndexDirectoryContext;

class TableOptionKeyBlockSizeContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	KEY_BLOCK_SIZE() {
	    return this.getToken(MySqlParser.KEY_BLOCK_SIZE, 0);
	};

	fileSizeLiteral() {
	    return this.getTypedRuleContext(FileSizeLiteralContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionKeyBlockSize(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionKeyBlockSize(this);
		}
	}


}

MySqlParser.TableOptionKeyBlockSizeContext = TableOptionKeyBlockSizeContext;

class TableOptionEncryptionContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ENCRYPTION() {
	    return this.getToken(MySqlParser.ENCRYPTION, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionEncryption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionEncryption(this);
		}
	}


}

MySqlParser.TableOptionEncryptionContext = TableOptionEncryptionContext;

class TableOptionDataDirectoryContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DATA() {
	    return this.getToken(MySqlParser.DATA, 0);
	};

	DIRECTORY() {
	    return this.getToken(MySqlParser.DIRECTORY, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionDataDirectory(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionDataDirectory(this);
		}
	}


}

MySqlParser.TableOptionDataDirectoryContext = TableOptionDataDirectoryContext;

class TableOptionRecalculationContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.extBoolValue = null; // Token;
        super.copyFrom(ctx);
    }

	STATS_AUTO_RECALC() {
	    return this.getToken(MySqlParser.STATS_AUTO_RECALC, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	ZERO_DECIMAL() {
	    return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	};

	ONE_DECIMAL() {
	    return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionRecalculation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionRecalculation(this);
		}
	}


}

MySqlParser.TableOptionRecalculationContext = TableOptionRecalculationContext;

class TableOptionAutoIncrementContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	AUTO_INCREMENT() {
	    return this.getToken(MySqlParser.AUTO_INCREMENT, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionAutoIncrement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionAutoIncrement(this);
		}
	}


}

MySqlParser.TableOptionAutoIncrementContext = TableOptionAutoIncrementContext;

class TableOptionChecksumContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.boolValue = null; // Token;
        super.copyFrom(ctx);
    }

	CHECKSUM() {
	    return this.getToken(MySqlParser.CHECKSUM, 0);
	};

	PAGE_CHECKSUM() {
	    return this.getToken(MySqlParser.PAGE_CHECKSUM, 0);
	};

	ZERO_DECIMAL() {
	    return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	};

	ONE_DECIMAL() {
	    return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionChecksum(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionChecksum(this);
		}
	}


}

MySqlParser.TableOptionChecksumContext = TableOptionChecksumContext;

class TableOptionDelayContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.boolValue = null; // Token;
        super.copyFrom(ctx);
    }

	DELAY_KEY_WRITE() {
	    return this.getToken(MySqlParser.DELAY_KEY_WRITE, 0);
	};

	ZERO_DECIMAL() {
	    return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	};

	ONE_DECIMAL() {
	    return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionDelay(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionDelay(this);
		}
	}


}

MySqlParser.TableOptionDelayContext = TableOptionDelayContext;

class TableOptionConnectionContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CONNECTION() {
	    return this.getToken(MySqlParser.CONNECTION, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionConnection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionConnection(this);
		}
	}


}

MySqlParser.TableOptionConnectionContext = TableOptionConnectionContext;

class TableOptionCommentContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionComment(this);
		}
	}


}

MySqlParser.TableOptionCommentContext = TableOptionCommentContext;

class TableOptionAverageContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	AVG_ROW_LENGTH() {
	    return this.getToken(MySqlParser.AVG_ROW_LENGTH, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionAverage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionAverage(this);
		}
	}


}

MySqlParser.TableOptionAverageContext = TableOptionAverageContext;

class TableOptionRowFormatContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.rowFormat = null; // Token;
        super.copyFrom(ctx);
    }

	ROW_FORMAT() {
	    return this.getToken(MySqlParser.ROW_FORMAT, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	DYNAMIC() {
	    return this.getToken(MySqlParser.DYNAMIC, 0);
	};

	FIXED() {
	    return this.getToken(MySqlParser.FIXED, 0);
	};

	COMPRESSED() {
	    return this.getToken(MySqlParser.COMPRESSED, 0);
	};

	REDUNDANT() {
	    return this.getToken(MySqlParser.REDUNDANT, 0);
	};

	COMPACT() {
	    return this.getToken(MySqlParser.COMPACT, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionRowFormat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionRowFormat(this);
		}
	}


}

MySqlParser.TableOptionRowFormatContext = TableOptionRowFormatContext;

class TableOptionCompressionContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	COMPRESSION() {
	    return this.getToken(MySqlParser.COMPRESSION, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	ID() {
	    return this.getToken(MySqlParser.ID, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionCompression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionCompression(this);
		}
	}


}

MySqlParser.TableOptionCompressionContext = TableOptionCompressionContext;

class TableOptionInsertMethodContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.insertMethod = null; // Token;
        super.copyFrom(ctx);
    }

	INSERT_METHOD() {
	    return this.getToken(MySqlParser.INSERT_METHOD, 0);
	};

	NO() {
	    return this.getToken(MySqlParser.NO, 0);
	};

	FIRST() {
	    return this.getToken(MySqlParser.FIRST, 0);
	};

	LAST() {
	    return this.getToken(MySqlParser.LAST, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionInsertMethod(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionInsertMethod(this);
		}
	}


}

MySqlParser.TableOptionInsertMethodContext = TableOptionInsertMethodContext;

class TableOptionMinRowsContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MIN_ROWS() {
	    return this.getToken(MySqlParser.MIN_ROWS, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionMinRows(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionMinRows(this);
		}
	}


}

MySqlParser.TableOptionMinRowsContext = TableOptionMinRowsContext;

class TablespaceStorageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tablespaceStorage;
    }

	STORAGE() {
	    return this.getToken(MySqlParser.STORAGE, 0);
	};

	DISK() {
	    return this.getToken(MySqlParser.DISK, 0);
	};

	MEMORY() {
	    return this.getToken(MySqlParser.MEMORY, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTablespaceStorage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTablespaceStorage(this);
		}
	}


}



class PartitionDefinitionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_partitionDefinitions;
        this.count = null; // DecimalLiteralContext
        this.subCount = null; // DecimalLiteralContext
    }

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	BY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.BY);
	    } else {
	        return this.getToken(MySqlParser.BY, i);
	    }
	};


	partitionFunctionDefinition() {
	    return this.getTypedRuleContext(PartitionFunctionDefinitionContext,0);
	};

	PARTITIONS() {
	    return this.getToken(MySqlParser.PARTITIONS, 0);
	};

	SUBPARTITION() {
	    return this.getToken(MySqlParser.SUBPARTITION, 0);
	};

	subpartitionFunctionDefinition() {
	    return this.getTypedRuleContext(SubpartitionFunctionDefinitionContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	partitionDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(PartitionDefinitionContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	SUBPARTITIONS() {
	    return this.getToken(MySqlParser.SUBPARTITIONS, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionDefinitions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionDefinitions(this);
		}
	}


}



class PartitionFunctionDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_partitionFunctionDefinition;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PartitionFunctionKeyContext extends PartitionFunctionDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        this.algType = null; // Token;
        super.copyFrom(ctx);
    }

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	LINEAR() {
	    return this.getToken(MySqlParser.LINEAR, 0);
	};

	ALGORITHM() {
	    return this.getToken(MySqlParser.ALGORITHM, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	ONE_DECIMAL() {
	    return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	};

	TWO_DECIMAL() {
	    return this.getToken(MySqlParser.TWO_DECIMAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionFunctionKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionFunctionKey(this);
		}
	}


}

MySqlParser.PartitionFunctionKeyContext = PartitionFunctionKeyContext;

class PartitionFunctionHashContext extends PartitionFunctionDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	HASH() {
	    return this.getToken(MySqlParser.HASH, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	LINEAR() {
	    return this.getToken(MySqlParser.LINEAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionFunctionHash(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionFunctionHash(this);
		}
	}


}

MySqlParser.PartitionFunctionHashContext = PartitionFunctionHashContext;

class PartitionFunctionListContext extends PartitionFunctionDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LIST() {
	    return this.getToken(MySqlParser.LIST, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COLUMNS() {
	    return this.getToken(MySqlParser.COLUMNS, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionFunctionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionFunctionList(this);
		}
	}


}

MySqlParser.PartitionFunctionListContext = PartitionFunctionListContext;

class PartitionFunctionRangeContext extends PartitionFunctionDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RANGE() {
	    return this.getToken(MySqlParser.RANGE, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COLUMNS() {
	    return this.getToken(MySqlParser.COLUMNS, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionFunctionRange(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionFunctionRange(this);
		}
	}


}

MySqlParser.PartitionFunctionRangeContext = PartitionFunctionRangeContext;

class SubpartitionFunctionDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_subpartitionFunctionDefinition;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SubPartitionFunctionHashContext extends SubpartitionFunctionDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	HASH() {
	    return this.getToken(MySqlParser.HASH, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	LINEAR() {
	    return this.getToken(MySqlParser.LINEAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSubPartitionFunctionHash(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSubPartitionFunctionHash(this);
		}
	}


}

MySqlParser.SubPartitionFunctionHashContext = SubPartitionFunctionHashContext;

class SubPartitionFunctionKeyContext extends SubpartitionFunctionDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        this.algType = null; // Token;
        super.copyFrom(ctx);
    }

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	LINEAR() {
	    return this.getToken(MySqlParser.LINEAR, 0);
	};

	ALGORITHM() {
	    return this.getToken(MySqlParser.ALGORITHM, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	ONE_DECIMAL() {
	    return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	};

	TWO_DECIMAL() {
	    return this.getToken(MySqlParser.TWO_DECIMAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSubPartitionFunctionKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSubPartitionFunctionKey(this);
		}
	}


}

MySqlParser.SubPartitionFunctionKeyContext = SubPartitionFunctionKeyContext;

class PartitionDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_partitionDefinition;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PartitionComparisionContext extends PartitionDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	VALUES() {
	    return this.getToken(MySqlParser.VALUES, 0);
	};

	LESS() {
	    return this.getToken(MySqlParser.LESS, 0);
	};

	THAN() {
	    return this.getToken(MySqlParser.THAN, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	partitionDefinerAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionDefinerAtomContext);
	    } else {
	        return this.getTypedRuleContext(PartitionDefinerAtomContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	partitionOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionOptionContext);
	    } else {
	        return this.getTypedRuleContext(PartitionOptionContext,i);
	    }
	};

	subpartitionDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubpartitionDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(SubpartitionDefinitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionComparision(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionComparision(this);
		}
	}


}

MySqlParser.PartitionComparisionContext = PartitionComparisionContext;

class PartitionListAtomContext extends PartitionDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	VALUES() {
	    return this.getToken(MySqlParser.VALUES, 0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	partitionDefinerAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionDefinerAtomContext);
	    } else {
	        return this.getTypedRuleContext(PartitionDefinerAtomContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	partitionOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionOptionContext);
	    } else {
	        return this.getTypedRuleContext(PartitionOptionContext,i);
	    }
	};

	subpartitionDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubpartitionDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(SubpartitionDefinitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionListAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionListAtom(this);
		}
	}


}

MySqlParser.PartitionListAtomContext = PartitionListAtomContext;

class PartitionListVectorContext extends PartitionDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	VALUES() {
	    return this.getToken(MySqlParser.VALUES, 0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	partitionDefinerVector = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionDefinerVectorContext);
	    } else {
	        return this.getTypedRuleContext(PartitionDefinerVectorContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	partitionOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionOptionContext);
	    } else {
	        return this.getTypedRuleContext(PartitionOptionContext,i);
	    }
	};

	subpartitionDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubpartitionDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(SubpartitionDefinitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionListVector(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionListVector(this);
		}
	}


}

MySqlParser.PartitionListVectorContext = PartitionListVectorContext;

class PartitionSimpleContext extends PartitionDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	partitionOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionOptionContext);
	    } else {
	        return this.getTypedRuleContext(PartitionOptionContext,i);
	    }
	};

	subpartitionDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubpartitionDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(SubpartitionDefinitionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionSimple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionSimple(this);
		}
	}


}

MySqlParser.PartitionSimpleContext = PartitionSimpleContext;

class PartitionDefinerAtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_partitionDefinerAtom;
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	MAXVALUE() {
	    return this.getToken(MySqlParser.MAXVALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionDefinerAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionDefinerAtom(this);
		}
	}


}



class PartitionDefinerVectorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_partitionDefinerVector;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	partitionDefinerAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionDefinerAtomContext);
	    } else {
	        return this.getTypedRuleContext(PartitionDefinerAtomContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionDefinerVector(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionDefinerVector(this);
		}
	}


}



class SubpartitionDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_subpartitionDefinition;
    }

	SUBPARTITION() {
	    return this.getToken(MySqlParser.SUBPARTITION, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	partitionOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionOptionContext);
	    } else {
	        return this.getTypedRuleContext(PartitionOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSubpartitionDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSubpartitionDefinition(this);
		}
	}


}



class PartitionOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_partitionOption;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PartitionOptionCommentContext extends PartitionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.comment = null; // Token;
        super.copyFrom(ctx);
    }

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionOptionComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionOptionComment(this);
		}
	}


}

MySqlParser.PartitionOptionCommentContext = PartitionOptionCommentContext;

class PartitionOptionNodeGroupContext extends PartitionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.nodegroup = null; // UidContext;
        super.copyFrom(ctx);
    }

	NODEGROUP() {
	    return this.getToken(MySqlParser.NODEGROUP, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionOptionNodeGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionOptionNodeGroup(this);
		}
	}


}

MySqlParser.PartitionOptionNodeGroupContext = PartitionOptionNodeGroupContext;

class PartitionOptionIndexDirectoryContext extends PartitionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.indexDirectory = null; // Token;
        super.copyFrom(ctx);
    }

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	DIRECTORY() {
	    return this.getToken(MySqlParser.DIRECTORY, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionOptionIndexDirectory(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionOptionIndexDirectory(this);
		}
	}


}

MySqlParser.PartitionOptionIndexDirectoryContext = PartitionOptionIndexDirectoryContext;

class PartitionOptionMaxRowsContext extends PartitionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.maxRows = null; // DecimalLiteralContext;
        super.copyFrom(ctx);
    }

	MAX_ROWS() {
	    return this.getToken(MySqlParser.MAX_ROWS, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionOptionMaxRows(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionOptionMaxRows(this);
		}
	}


}

MySqlParser.PartitionOptionMaxRowsContext = PartitionOptionMaxRowsContext;

class PartitionOptionTablespaceContext extends PartitionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.tablespace = null; // UidContext;
        super.copyFrom(ctx);
    }

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionOptionTablespace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionOptionTablespace(this);
		}
	}


}

MySqlParser.PartitionOptionTablespaceContext = PartitionOptionTablespaceContext;

class PartitionOptionEngineContext extends PartitionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	engineName() {
	    return this.getTypedRuleContext(EngineNameContext,0);
	};

	STORAGE() {
	    return this.getToken(MySqlParser.STORAGE, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionOptionEngine(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionOptionEngine(this);
		}
	}


}

MySqlParser.PartitionOptionEngineContext = PartitionOptionEngineContext;

class PartitionOptionMinRowsContext extends PartitionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.minRows = null; // DecimalLiteralContext;
        super.copyFrom(ctx);
    }

	MIN_ROWS() {
	    return this.getToken(MySqlParser.MIN_ROWS, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionOptionMinRows(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionOptionMinRows(this);
		}
	}


}

MySqlParser.PartitionOptionMinRowsContext = PartitionOptionMinRowsContext;

class PartitionOptionDataDirectoryContext extends PartitionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.dataDirectory = null; // Token;
        super.copyFrom(ctx);
    }

	DATA() {
	    return this.getToken(MySqlParser.DATA, 0);
	};

	DIRECTORY() {
	    return this.getToken(MySqlParser.DIRECTORY, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionOptionDataDirectory(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionOptionDataDirectory(this);
		}
	}


}

MySqlParser.PartitionOptionDataDirectoryContext = PartitionOptionDataDirectoryContext;

class AlterDatabaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterDatabase;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AlterUpgradeNameContext extends AlterDatabaseContext {

    constructor(parser, ctx) {
        super(parser);
        this.dbFormat = null; // Token;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	UPGRADE() {
	    return this.getToken(MySqlParser.UPGRADE, 0);
	};

	DATA() {
	    return this.getToken(MySqlParser.DATA, 0);
	};

	DIRECTORY() {
	    return this.getToken(MySqlParser.DIRECTORY, 0);
	};

	NAME() {
	    return this.getToken(MySqlParser.NAME, 0);
	};

	DATABASE() {
	    return this.getToken(MySqlParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(MySqlParser.SCHEMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterUpgradeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterUpgradeName(this);
		}
	}


}

MySqlParser.AlterUpgradeNameContext = AlterUpgradeNameContext;

class AlterSimpleDatabaseContext extends AlterDatabaseContext {

    constructor(parser, ctx) {
        super(parser);
        this.dbFormat = null; // Token;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	DATABASE() {
	    return this.getToken(MySqlParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(MySqlParser.SCHEMA, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	createDatabaseOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CreateDatabaseOptionContext);
	    } else {
	        return this.getTypedRuleContext(CreateDatabaseOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterSimpleDatabase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterSimpleDatabase(this);
		}
	}


}

MySqlParser.AlterSimpleDatabaseContext = AlterSimpleDatabaseContext;

class AlterEventContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterEvent;
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	EVENT() {
	    return this.getToken(MySqlParser.EVENT, 0);
	};

	fullId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FullIdContext);
	    } else {
	        return this.getTypedRuleContext(FullIdContext,i);
	    }
	};

	ownerStatement() {
	    return this.getTypedRuleContext(OwnerStatementContext,0);
	};

	ON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.ON);
	    } else {
	        return this.getToken(MySqlParser.ON, i);
	    }
	};


	SCHEDULE() {
	    return this.getToken(MySqlParser.SCHEDULE, 0);
	};

	scheduleExpression() {
	    return this.getTypedRuleContext(ScheduleExpressionContext,0);
	};

	COMPLETION() {
	    return this.getToken(MySqlParser.COMPLETION, 0);
	};

	PRESERVE() {
	    return this.getToken(MySqlParser.PRESERVE, 0);
	};

	RENAME() {
	    return this.getToken(MySqlParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	enableType() {
	    return this.getTypedRuleContext(EnableTypeContext,0);
	};

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	DO() {
	    return this.getToken(MySqlParser.DO, 0);
	};

	routineBody() {
	    return this.getTypedRuleContext(RoutineBodyContext,0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterEvent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterEvent(this);
		}
	}


}



class AlterFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterFunction;
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	routineOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RoutineOptionContext);
	    } else {
	        return this.getTypedRuleContext(RoutineOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterFunction(this);
		}
	}


}



class AlterInstanceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterInstance;
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	INSTANCE() {
	    return this.getToken(MySqlParser.INSTANCE, 0);
	};

	ROTATE() {
	    return this.getToken(MySqlParser.ROTATE, 0);
	};

	INNODB() {
	    return this.getToken(MySqlParser.INNODB, 0);
	};

	MASTER() {
	    return this.getToken(MySqlParser.MASTER, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterInstance(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterInstance(this);
		}
	}


}



class AlterLogfileGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterLogfileGroup;
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	LOGFILE() {
	    return this.getToken(MySqlParser.LOGFILE, 0);
	};

	GROUP() {
	    return this.getToken(MySqlParser.GROUP, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	UNDOFILE() {
	    return this.getToken(MySqlParser.UNDOFILE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	engineName() {
	    return this.getTypedRuleContext(EngineNameContext,0);
	};

	INITIAL_SIZE() {
	    return this.getToken(MySqlParser.INITIAL_SIZE, 0);
	};

	fileSizeLiteral() {
	    return this.getTypedRuleContext(FileSizeLiteralContext,0);
	};

	WAIT() {
	    return this.getToken(MySqlParser.WAIT, 0);
	};

	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterLogfileGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterLogfileGroup(this);
		}
	}


}



class AlterProcedureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterProcedure;
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	PROCEDURE() {
	    return this.getToken(MySqlParser.PROCEDURE, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	routineOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RoutineOptionContext);
	    } else {
	        return this.getTypedRuleContext(RoutineOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterProcedure(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterProcedure(this);
		}
	}


}



class AlterServerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterServer;
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	SERVER() {
	    return this.getToken(MySqlParser.SERVER, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	OPTIONS() {
	    return this.getToken(MySqlParser.OPTIONS, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	serverOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ServerOptionContext);
	    } else {
	        return this.getTypedRuleContext(ServerOptionContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterServer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterServer(this);
		}
	}


}



class AlterTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterTable;
        this.intimeAction = null; // Token
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	IGNORE() {
	    return this.getToken(MySqlParser.IGNORE, 0);
	};

	alterSpecification = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AlterSpecificationContext);
	    } else {
	        return this.getTypedRuleContext(AlterSpecificationContext,i);
	    }
	};

	partitionDefinitions() {
	    return this.getTypedRuleContext(PartitionDefinitionsContext,0);
	};

	ONLINE() {
	    return this.getToken(MySqlParser.ONLINE, 0);
	};

	OFFLINE() {
	    return this.getToken(MySqlParser.OFFLINE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterTable(this);
		}
	}


}



class AlterTablespaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterTablespace;
        this.objectAction = null; // Token
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	DATAFILE() {
	    return this.getToken(MySqlParser.DATAFILE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	engineName() {
	    return this.getTypedRuleContext(EngineNameContext,0);
	};

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	INITIAL_SIZE() {
	    return this.getToken(MySqlParser.INITIAL_SIZE, 0);
	};

	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	fileSizeLiteral() {
	    return this.getTypedRuleContext(FileSizeLiteralContext,0);
	};

	WAIT() {
	    return this.getToken(MySqlParser.WAIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterTablespace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterTablespace(this);
		}
	}


}



class AlterViewContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterView;
        this.algType = null; // Token
        this.secContext = null; // Token
        this.checkOpt = null; // Token
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	VIEW() {
	    return this.getToken(MySqlParser.VIEW, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	ALGORITHM() {
	    return this.getToken(MySqlParser.ALGORITHM, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	ownerStatement() {
	    return this.getTypedRuleContext(OwnerStatementContext,0);
	};

	SQL() {
	    return this.getToken(MySqlParser.SQL, 0);
	};

	SECURITY() {
	    return this.getToken(MySqlParser.SECURITY, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	CHECK() {
	    return this.getToken(MySqlParser.CHECK, 0);
	};

	OPTION() {
	    return this.getToken(MySqlParser.OPTION, 0);
	};

	UNDEFINED() {
	    return this.getToken(MySqlParser.UNDEFINED, 0);
	};

	MERGE() {
	    return this.getToken(MySqlParser.MERGE, 0);
	};

	TEMPTABLE() {
	    return this.getToken(MySqlParser.TEMPTABLE, 0);
	};

	DEFINER() {
	    return this.getToken(MySqlParser.DEFINER, 0);
	};

	INVOKER() {
	    return this.getToken(MySqlParser.INVOKER, 0);
	};

	CASCADED() {
	    return this.getToken(MySqlParser.CASCADED, 0);
	};

	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterView(this);
		}
	}


}



class AlterSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterSpecification;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AlterByDisableKeysContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DISABLE() {
	    return this.getToken(MySqlParser.DISABLE, 0);
	};

	KEYS() {
	    return this.getToken(MySqlParser.KEYS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByDisableKeys(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByDisableKeys(this);
		}
	}


}

MySqlParser.AlterByDisableKeysContext = AlterByDisableKeysContext;

class AlterByDefaultCharsetContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	COLLATE() {
	    return this.getToken(MySqlParser.COLLATE, 0);
	};

	collationName() {
	    return this.getTypedRuleContext(CollationNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByDefaultCharset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByDefaultCharset(this);
		}
	}


}

MySqlParser.AlterByDefaultCharsetContext = AlterByDefaultCharsetContext;

class AlterByRenameColumnContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        this.oldColumn = null; // UidContext;
        this.newColumn = null; // UidContext;
        super.copyFrom(ctx);
    }

	RENAME() {
	    return this.getToken(MySqlParser.RENAME, 0);
	};

	COLUMN() {
	    return this.getToken(MySqlParser.COLUMN, 0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByRenameColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByRenameColumn(this);
		}
	}


}

MySqlParser.AlterByRenameColumnContext = AlterByRenameColumnContext;

class AlterByConvertCharsetContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CONVERT() {
	    return this.getToken(MySqlParser.CONVERT, 0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	COLLATE() {
	    return this.getToken(MySqlParser.COLLATE, 0);
	};

	collationName() {
	    return this.getTypedRuleContext(CollationNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByConvertCharset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByConvertCharset(this);
		}
	}


}

MySqlParser.AlterByConvertCharsetContext = AlterByConvertCharsetContext;

class AlterByAddPartitionContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	partitionDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(PartitionDefinitionContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAddPartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAddPartition(this);
		}
	}


}

MySqlParser.AlterByAddPartitionContext = AlterByAddPartitionContext;

class AlterByAddForeignKeyContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // UidContext;
        this.indexName = null; // UidContext;
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	FOREIGN() {
	    return this.getToken(MySqlParser.FOREIGN, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	referenceDefinition() {
	    return this.getTypedRuleContext(ReferenceDefinitionContext,0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAddForeignKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAddForeignKey(this);
		}
	}


}

MySqlParser.AlterByAddForeignKeyContext = AlterByAddForeignKeyContext;

class AlterByRenameIndexContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        this.indexFormat = null; // Token;
        super.copyFrom(ctx);
    }

	RENAME() {
	    return this.getToken(MySqlParser.RENAME, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByRenameIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByRenameIndex(this);
		}
	}


}

MySqlParser.AlterByRenameIndexContext = AlterByRenameIndexContext;

class AlterByRemovePartitioningContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REMOVE() {
	    return this.getToken(MySqlParser.REMOVE, 0);
	};

	PARTITIONING() {
	    return this.getToken(MySqlParser.PARTITIONING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByRemovePartitioning(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByRemovePartitioning(this);
		}
	}


}

MySqlParser.AlterByRemovePartitioningContext = AlterByRemovePartitioningContext;

class AlterByRenameContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        this.renameFormat = null; // Token;
        super.copyFrom(ctx);
    }

	RENAME() {
	    return this.getToken(MySqlParser.RENAME, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByRename(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByRename(this);
		}
	}


}

MySqlParser.AlterByRenameContext = AlterByRenameContext;

class AlterByOptimizePartitionContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OPTIMIZE() {
	    return this.getToken(MySqlParser.OPTIMIZE, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByOptimizePartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByOptimizePartition(this);
		}
	}


}

MySqlParser.AlterByOptimizePartitionContext = AlterByOptimizePartitionContext;

class AlterByImportTablespaceContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IMPORT() {
	    return this.getToken(MySqlParser.IMPORT, 0);
	};

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByImportTablespace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByImportTablespace(this);
		}
	}


}

MySqlParser.AlterByImportTablespaceContext = AlterByImportTablespaceContext;

class AlterByCoalescePartitionContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	COALESCE() {
	    return this.getToken(MySqlParser.COALESCE, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByCoalescePartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByCoalescePartition(this);
		}
	}


}

MySqlParser.AlterByCoalescePartitionContext = AlterByCoalescePartitionContext;

class AlterByDropConstraintCheckContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	CHECK() {
	    return this.getToken(MySqlParser.CHECK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByDropConstraintCheck(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByDropConstraintCheck(this);
		}
	}


}

MySqlParser.AlterByDropConstraintCheckContext = AlterByDropConstraintCheckContext;

class AlterByAddColumnsContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	columnDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(ColumnDefinitionContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COLUMN() {
	    return this.getToken(MySqlParser.COLUMN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAddColumns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAddColumns(this);
		}
	}


}

MySqlParser.AlterByAddColumnsContext = AlterByAddColumnsContext;

class AlterByAlterIndexVisibilityContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	VISIBLE() {
	    return this.getToken(MySqlParser.VISIBLE, 0);
	};

	INVISIBLE() {
	    return this.getToken(MySqlParser.INVISIBLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAlterIndexVisibility(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAlterIndexVisibility(this);
		}
	}


}

MySqlParser.AlterByAlterIndexVisibilityContext = AlterByAlterIndexVisibilityContext;

class AlterByDropForeignKeyContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	FOREIGN() {
	    return this.getToken(MySqlParser.FOREIGN, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByDropForeignKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByDropForeignKey(this);
		}
	}


}

MySqlParser.AlterByDropForeignKeyContext = AlterByDropForeignKeyContext;

class AlterByAddCheckTableConstraintContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // UidContext;
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	CHECK() {
	    return this.getToken(MySqlParser.CHECK, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAddCheckTableConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAddCheckTableConstraint(this);
		}
	}


}

MySqlParser.AlterByAddCheckTableConstraintContext = AlterByAddCheckTableConstraintContext;

class AlterByRebuildPartitionContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REBUILD() {
	    return this.getToken(MySqlParser.REBUILD, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByRebuildPartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByRebuildPartition(this);
		}
	}


}

MySqlParser.AlterByRebuildPartitionContext = AlterByRebuildPartitionContext;

class AlterByUpgradePartitioningContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UPGRADE() {
	    return this.getToken(MySqlParser.UPGRADE, 0);
	};

	PARTITIONING() {
	    return this.getToken(MySqlParser.PARTITIONING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByUpgradePartitioning(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByUpgradePartitioning(this);
		}
	}


}

MySqlParser.AlterByUpgradePartitioningContext = AlterByUpgradePartitioningContext;

class AlterByRepairPartitionContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REPAIR() {
	    return this.getToken(MySqlParser.REPAIR, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByRepairPartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByRepairPartition(this);
		}
	}


}

MySqlParser.AlterByRepairPartitionContext = AlterByRepairPartitionContext;

class AlterByExchangePartitionContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        this.validationFormat = null; // Token;
        super.copyFrom(ctx);
    }

	EXCHANGE() {
	    return this.getToken(MySqlParser.EXCHANGE, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	WITH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.WITH);
	    } else {
	        return this.getToken(MySqlParser.WITH, i);
	    }
	};


	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	VALIDATION() {
	    return this.getToken(MySqlParser.VALIDATION, 0);
	};

	WITHOUT() {
	    return this.getToken(MySqlParser.WITHOUT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByExchangePartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByExchangePartition(this);
		}
	}


}

MySqlParser.AlterByExchangePartitionContext = AlterByExchangePartitionContext;

class AlterByAddIndexContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        this.indexFormat = null; // Token;
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	indexType() {
	    return this.getTypedRuleContext(IndexTypeContext,0);
	};

	indexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(IndexOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAddIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAddIndex(this);
		}
	}


}

MySqlParser.AlterByAddIndexContext = AlterByAddIndexContext;

class AlterByDropColumnContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	COLUMN() {
	    return this.getToken(MySqlParser.COLUMN, 0);
	};

	RESTRICT() {
	    return this.getToken(MySqlParser.RESTRICT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByDropColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByDropColumn(this);
		}
	}


}

MySqlParser.AlterByDropColumnContext = AlterByDropColumnContext;

class AlterByImportPartitionContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IMPORT() {
	    return this.getToken(MySqlParser.IMPORT, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByImportPartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByImportPartition(this);
		}
	}


}

MySqlParser.AlterByImportPartitionContext = AlterByImportPartitionContext;

class AlterByChangeDefaultContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	defaultValue() {
	    return this.getTypedRuleContext(DefaultValueContext,0);
	};

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	COLUMN() {
	    return this.getToken(MySqlParser.COLUMN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByChangeDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByChangeDefault(this);
		}
	}


}

MySqlParser.AlterByChangeDefaultContext = AlterByChangeDefaultContext;

class AlterByForceContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FORCE() {
	    return this.getToken(MySqlParser.FORCE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByForce(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByForce(this);
		}
	}


}

MySqlParser.AlterByForceContext = AlterByForceContext;

class AlterByDropPartitionContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByDropPartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByDropPartition(this);
		}
	}


}

MySqlParser.AlterByDropPartitionContext = AlterByDropPartitionContext;

class AlterByAddSpecialIndexContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        this.keyType = null; // Token;
        this.indexFormat = null; // Token;
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	FULLTEXT() {
	    return this.getToken(MySqlParser.FULLTEXT, 0);
	};

	SPATIAL() {
	    return this.getToken(MySqlParser.SPATIAL, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	indexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(IndexOptionContext,i);
	    }
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAddSpecialIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAddSpecialIndex(this);
		}
	}


}

MySqlParser.AlterByAddSpecialIndexContext = AlterByAddSpecialIndexContext;

class AlterByModifyColumnContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MODIFY() {
	    return this.getToken(MySqlParser.MODIFY, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	columnDefinition() {
	    return this.getTypedRuleContext(ColumnDefinitionContext,0);
	};

	COLUMN() {
	    return this.getToken(MySqlParser.COLUMN, 0);
	};

	FIRST() {
	    return this.getToken(MySqlParser.FIRST, 0);
	};

	AFTER() {
	    return this.getToken(MySqlParser.AFTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByModifyColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByModifyColumn(this);
		}
	}


}

MySqlParser.AlterByModifyColumnContext = AlterByModifyColumnContext;

class AlterByTableOptionContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	tableOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableOptionContext);
	    } else {
	        return this.getTypedRuleContext(TableOptionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByTableOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByTableOption(this);
		}
	}


}

MySqlParser.AlterByTableOptionContext = AlterByTableOptionContext;

class AlterByDropPrimaryKeyContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	PRIMARY() {
	    return this.getToken(MySqlParser.PRIMARY, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByDropPrimaryKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByDropPrimaryKey(this);
		}
	}


}

MySqlParser.AlterByDropPrimaryKeyContext = AlterByDropPrimaryKeyContext;

class AlterByLockContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        this.lockType = null; // Token;
        super.copyFrom(ctx);
    }

	LOCK() {
	    return this.getToken(MySqlParser.LOCK, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	NONE() {
	    return this.getToken(MySqlParser.NONE, 0);
	};

	SHARED() {
	    return this.getToken(MySqlParser.SHARED, 0);
	};

	EXCLUSIVE() {
	    return this.getToken(MySqlParser.EXCLUSIVE, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByLock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByLock(this);
		}
	}


}

MySqlParser.AlterByLockContext = AlterByLockContext;

class AlterByDiscardPartitionContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DISCARD() {
	    return this.getToken(MySqlParser.DISCARD, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByDiscardPartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByDiscardPartition(this);
		}
	}


}

MySqlParser.AlterByDiscardPartitionContext = AlterByDiscardPartitionContext;

class AlterByDiscardTablespaceContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DISCARD() {
	    return this.getToken(MySqlParser.DISCARD, 0);
	};

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByDiscardTablespace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByDiscardTablespace(this);
		}
	}


}

MySqlParser.AlterByDiscardTablespaceContext = AlterByDiscardTablespaceContext;

class AlterByValidateContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        this.validationFormat = null; // Token;
        super.copyFrom(ctx);
    }

	VALIDATION() {
	    return this.getToken(MySqlParser.VALIDATION, 0);
	};

	WITHOUT() {
	    return this.getToken(MySqlParser.WITHOUT, 0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByValidate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByValidate(this);
		}
	}


}

MySqlParser.AlterByValidateContext = AlterByValidateContext;

class AlterByAddPrimaryKeyContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // UidContext;
        this.index = null; // UidContext;
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	PRIMARY() {
	    return this.getToken(MySqlParser.PRIMARY, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	indexType() {
	    return this.getTypedRuleContext(IndexTypeContext,0);
	};

	indexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(IndexOptionContext,i);
	    }
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAddPrimaryKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAddPrimaryKey(this);
		}
	}


}

MySqlParser.AlterByAddPrimaryKeyContext = AlterByAddPrimaryKeyContext;

class AlterByCheckPartitionContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CHECK() {
	    return this.getToken(MySqlParser.CHECK, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByCheckPartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByCheckPartition(this);
		}
	}


}

MySqlParser.AlterByCheckPartitionContext = AlterByCheckPartitionContext;

class AlterByEnableKeysContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ENABLE() {
	    return this.getToken(MySqlParser.ENABLE, 0);
	};

	KEYS() {
	    return this.getToken(MySqlParser.KEYS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByEnableKeys(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByEnableKeys(this);
		}
	}


}

MySqlParser.AlterByEnableKeysContext = AlterByEnableKeysContext;

class AlterByReorganizePartitionContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REORGANIZE() {
	    return this.getToken(MySqlParser.REORGANIZE, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	partitionDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(PartitionDefinitionContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByReorganizePartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByReorganizePartition(this);
		}
	}


}

MySqlParser.AlterByReorganizePartitionContext = AlterByReorganizePartitionContext;

class AlterBySetAlgorithmContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        this.algType = null; // Token;
        super.copyFrom(ctx);
    }

	ALGORITHM() {
	    return this.getToken(MySqlParser.ALGORITHM, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	INPLACE() {
	    return this.getToken(MySqlParser.INPLACE, 0);
	};

	COPY() {
	    return this.getToken(MySqlParser.COPY, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterBySetAlgorithm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterBySetAlgorithm(this);
		}
	}


}

MySqlParser.AlterBySetAlgorithmContext = AlterBySetAlgorithmContext;

class AlterByAnalyzePartitionContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ANALYZE() {
	    return this.getToken(MySqlParser.ANALYZE, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAnalyzePartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAnalyzePartition(this);
		}
	}


}

MySqlParser.AlterByAnalyzePartitionContext = AlterByAnalyzePartitionContext;

class AlterByChangeColumnContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        this.oldColumn = null; // UidContext;
        this.newColumn = null; // UidContext;
        this.afterColumn = null; // UidContext;
        super.copyFrom(ctx);
    }

	CHANGE() {
	    return this.getToken(MySqlParser.CHANGE, 0);
	};

	columnDefinition() {
	    return this.getTypedRuleContext(ColumnDefinitionContext,0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	COLUMN() {
	    return this.getToken(MySqlParser.COLUMN, 0);
	};

	FIRST() {
	    return this.getToken(MySqlParser.FIRST, 0);
	};

	AFTER() {
	    return this.getToken(MySqlParser.AFTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByChangeColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByChangeColumn(this);
		}
	}


}

MySqlParser.AlterByChangeColumnContext = AlterByChangeColumnContext;

class AlterByAddUniqueKeyContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // UidContext;
        this.indexFormat = null; // Token;
        this.indexName = null; // UidContext;
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	UNIQUE() {
	    return this.getToken(MySqlParser.UNIQUE, 0);
	};

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	indexType() {
	    return this.getTypedRuleContext(IndexTypeContext,0);
	};

	indexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(IndexOptionContext,i);
	    }
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAddUniqueKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAddUniqueKey(this);
		}
	}


}

MySqlParser.AlterByAddUniqueKeyContext = AlterByAddUniqueKeyContext;

class AlterByTruncatePartitionContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TRUNCATE() {
	    return this.getToken(MySqlParser.TRUNCATE, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByTruncatePartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByTruncatePartition(this);
		}
	}


}

MySqlParser.AlterByTruncatePartitionContext = AlterByTruncatePartitionContext;

class AlterByDropIndexContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        this.indexFormat = null; // Token;
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByDropIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByDropIndex(this);
		}
	}


}

MySqlParser.AlterByDropIndexContext = AlterByDropIndexContext;

class AlterByAddColumnContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	columnDefinition() {
	    return this.getTypedRuleContext(ColumnDefinitionContext,0);
	};

	COLUMN() {
	    return this.getToken(MySqlParser.COLUMN, 0);
	};

	FIRST() {
	    return this.getToken(MySqlParser.FIRST, 0);
	};

	AFTER() {
	    return this.getToken(MySqlParser.AFTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAddColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAddColumn(this);
		}
	}


}

MySqlParser.AlterByAddColumnContext = AlterByAddColumnContext;

class AlterByOrderContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ORDER() {
	    return this.getToken(MySqlParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByOrder(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByOrder(this);
		}
	}


}

MySqlParser.AlterByOrderContext = AlterByOrderContext;

class DropDatabaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropDatabase;
        this.dbFormat = null; // Token
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	DATABASE() {
	    return this.getToken(MySqlParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(MySqlParser.SCHEMA, 0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropDatabase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropDatabase(this);
		}
	}


}



class DropEventContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropEvent;
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	EVENT() {
	    return this.getToken(MySqlParser.EVENT, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropEvent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropEvent(this);
		}
	}


}



class DropIndexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropIndex;
        this.intimeAction = null; // Token
        this.algType = null; // Token
        this.lockType = null; // Token
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	ALGORITHM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.ALGORITHM);
	    } else {
	        return this.getToken(MySqlParser.ALGORITHM, i);
	    }
	};


	LOCK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LOCK);
	    } else {
	        return this.getToken(MySqlParser.LOCK, i);
	    }
	};


	ONLINE() {
	    return this.getToken(MySqlParser.ONLINE, 0);
	};

	OFFLINE() {
	    return this.getToken(MySqlParser.OFFLINE, 0);
	};

	DEFAULT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.DEFAULT);
	    } else {
	        return this.getToken(MySqlParser.DEFAULT, i);
	    }
	};


	INPLACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.INPLACE);
	    } else {
	        return this.getToken(MySqlParser.INPLACE, i);
	    }
	};


	COPY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COPY);
	    } else {
	        return this.getToken(MySqlParser.COPY, i);
	    }
	};


	NONE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.NONE);
	    } else {
	        return this.getToken(MySqlParser.NONE, i);
	    }
	};


	SHARED = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.SHARED);
	    } else {
	        return this.getToken(MySqlParser.SHARED, i);
	    }
	};


	EXCLUSIVE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EXCLUSIVE);
	    } else {
	        return this.getToken(MySqlParser.EXCLUSIVE, i);
	    }
	};


	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropIndex(this);
		}
	}


}



class DropLogfileGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropLogfileGroup;
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	LOGFILE() {
	    return this.getToken(MySqlParser.LOGFILE, 0);
	};

	GROUP() {
	    return this.getToken(MySqlParser.GROUP, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	engineName() {
	    return this.getTypedRuleContext(EngineNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropLogfileGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropLogfileGroup(this);
		}
	}


}



class DropProcedureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropProcedure;
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	PROCEDURE() {
	    return this.getToken(MySqlParser.PROCEDURE, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropProcedure(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropProcedure(this);
		}
	}


}



class DropFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropFunction;
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropFunction(this);
		}
	}


}



class DropServerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropServer;
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	SERVER() {
	    return this.getToken(MySqlParser.SERVER, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropServer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropServer(this);
		}
	}


}



class DropTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropTable;
        this.dropType = null; // Token
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tables() {
	    return this.getTypedRuleContext(TablesContext,0);
	};

	TEMPORARY() {
	    return this.getToken(MySqlParser.TEMPORARY, 0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	RESTRICT() {
	    return this.getToken(MySqlParser.RESTRICT, 0);
	};

	CASCADE() {
	    return this.getToken(MySqlParser.CASCADE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropTable(this);
		}
	}


}



class DropTablespaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropTablespace;
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	engineName() {
	    return this.getTypedRuleContext(EngineNameContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropTablespace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropTablespace(this);
		}
	}


}



class DropTriggerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropTrigger;
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	TRIGGER() {
	    return this.getToken(MySqlParser.TRIGGER, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropTrigger(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropTrigger(this);
		}
	}


}



class DropViewContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropView;
        this.dropType = null; // Token
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	VIEW() {
	    return this.getToken(MySqlParser.VIEW, 0);
	};

	fullId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FullIdContext);
	    } else {
	        return this.getTypedRuleContext(FullIdContext,i);
	    }
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	RESTRICT() {
	    return this.getToken(MySqlParser.RESTRICT, 0);
	};

	CASCADE() {
	    return this.getToken(MySqlParser.CASCADE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropView(this);
		}
	}


}



class RenameTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_renameTable;
    }

	RENAME() {
	    return this.getToken(MySqlParser.RENAME, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	renameTableClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RenameTableClauseContext);
	    } else {
	        return this.getTypedRuleContext(RenameTableClauseContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRenameTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRenameTable(this);
		}
	}


}



class RenameTableClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_renameTableClause;
    }

	tableName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableNameContext);
	    } else {
	        return this.getTypedRuleContext(TableNameContext,i);
	    }
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRenameTableClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRenameTableClause(this);
		}
	}


}



class TruncateTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_truncateTable;
    }

	TRUNCATE() {
	    return this.getToken(MySqlParser.TRUNCATE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTruncateTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTruncateTable(this);
		}
	}


}



class CallStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_callStatement;
    }

	CALL() {
	    return this.getToken(MySqlParser.CALL, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	constants() {
	    return this.getTypedRuleContext(ConstantsContext,0);
	};

	expressions() {
	    return this.getTypedRuleContext(ExpressionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCallStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCallStatement(this);
		}
	}


}



class DeleteStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_deleteStatement;
    }

	singleDeleteStatement() {
	    return this.getTypedRuleContext(SingleDeleteStatementContext,0);
	};

	multipleDeleteStatement() {
	    return this.getTypedRuleContext(MultipleDeleteStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDeleteStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDeleteStatement(this);
		}
	}


}



class DoStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_doStatement;
    }

	DO() {
	    return this.getToken(MySqlParser.DO, 0);
	};

	expressions() {
	    return this.getTypedRuleContext(ExpressionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDoStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDoStatement(this);
		}
	}


}



class HandlerStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_handlerStatement;
    }

	handlerOpenStatement() {
	    return this.getTypedRuleContext(HandlerOpenStatementContext,0);
	};

	handlerReadIndexStatement() {
	    return this.getTypedRuleContext(HandlerReadIndexStatementContext,0);
	};

	handlerReadStatement() {
	    return this.getTypedRuleContext(HandlerReadStatementContext,0);
	};

	handlerCloseStatement() {
	    return this.getTypedRuleContext(HandlerCloseStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHandlerStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHandlerStatement(this);
		}
	}


}



class InsertStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_insertStatement;
        this.priority = null; // Token
        this.partitions = null; // UidListContext
        this.columns = null; // UidListContext
        this.setFirst = null; // UpdatedElementContext
        this._updatedElement = null; // UpdatedElementContext
        this.setElements = []; // of UpdatedElementContexts
        this.duplicatedFirst = null; // UpdatedElementContext
        this.duplicatedElements = []; // of UpdatedElementContexts
    }

	INSERT() {
	    return this.getToken(MySqlParser.INSERT, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	insertStatementValue() {
	    return this.getTypedRuleContext(InsertStatementValueContext,0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	IGNORE() {
	    return this.getToken(MySqlParser.IGNORE, 0);
	};

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.LR_BRACKET, i);
	    }
	};


	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.RR_BRACKET, i);
	    }
	};


	updatedElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UpdatedElementContext);
	    } else {
	        return this.getTypedRuleContext(UpdatedElementContext,i);
	    }
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	DUPLICATE() {
	    return this.getToken(MySqlParser.DUPLICATE, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	UPDATE() {
	    return this.getToken(MySqlParser.UPDATE, 0);
	};

	LOW_PRIORITY() {
	    return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	};

	DELAYED() {
	    return this.getToken(MySqlParser.DELAYED, 0);
	};

	HIGH_PRIORITY() {
	    return this.getToken(MySqlParser.HIGH_PRIORITY, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	uidList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidListContext);
	    } else {
	        return this.getTypedRuleContext(UidListContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInsertStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInsertStatement(this);
		}
	}


}



class LoadDataStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_loadDataStatement;
        this.priority = null; // Token
        this.filename = null; // Token
        this.violation = null; // Token
        this.charset = null; // CharsetNameContext
        this.fieldsFormat = null; // Token
        this.linesFormat = null; // Token
    }

	LOAD() {
	    return this.getToken(MySqlParser.LOAD, 0);
	};

	DATA() {
	    return this.getToken(MySqlParser.DATA, 0);
	};

	INFILE() {
	    return this.getToken(MySqlParser.INFILE, 0);
	};

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.LR_BRACKET, i);
	    }
	};


	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.RR_BRACKET, i);
	    }
	};


	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	SET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.SET);
	    } else {
	        return this.getToken(MySqlParser.SET, i);
	    }
	};


	LINES = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LINES);
	    } else {
	        return this.getToken(MySqlParser.LINES, i);
	    }
	};


	IGNORE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.IGNORE);
	    } else {
	        return this.getToken(MySqlParser.IGNORE, i);
	    }
	};


	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	assignmentField = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssignmentFieldContext);
	    } else {
	        return this.getTypedRuleContext(AssignmentFieldContext,i);
	    }
	};

	updatedElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UpdatedElementContext);
	    } else {
	        return this.getTypedRuleContext(UpdatedElementContext,i);
	    }
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	LOW_PRIORITY() {
	    return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	};

	CONCURRENT() {
	    return this.getToken(MySqlParser.CONCURRENT, 0);
	};

	REPLACE() {
	    return this.getToken(MySqlParser.REPLACE, 0);
	};

	FIELDS() {
	    return this.getToken(MySqlParser.FIELDS, 0);
	};

	COLUMNS() {
	    return this.getToken(MySqlParser.COLUMNS, 0);
	};

	ROWS() {
	    return this.getToken(MySqlParser.ROWS, 0);
	};

	selectFieldsInto = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectFieldsIntoContext);
	    } else {
	        return this.getTypedRuleContext(SelectFieldsIntoContext,i);
	    }
	};

	selectLinesInto = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectLinesIntoContext);
	    } else {
	        return this.getTypedRuleContext(SelectLinesIntoContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLoadDataStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLoadDataStatement(this);
		}
	}


}



class LoadXmlStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_loadXmlStatement;
        this.priority = null; // Token
        this.filename = null; // Token
        this.violation = null; // Token
        this.charset = null; // CharsetNameContext
        this.tag = null; // Token
        this.linesFormat = null; // Token
    }

	LOAD() {
	    return this.getToken(MySqlParser.LOAD, 0);
	};

	XML() {
	    return this.getToken(MySqlParser.XML, 0);
	};

	INFILE() {
	    return this.getToken(MySqlParser.INFILE, 0);
	};

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	STRING_LITERAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.STRING_LITERAL);
	    } else {
	        return this.getToken(MySqlParser.STRING_LITERAL, i);
	    }
	};


	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	SET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.SET);
	    } else {
	        return this.getToken(MySqlParser.SET, i);
	    }
	};


	ROWS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.ROWS);
	    } else {
	        return this.getToken(MySqlParser.ROWS, i);
	    }
	};


	IDENTIFIED() {
	    return this.getToken(MySqlParser.IDENTIFIED, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	LESS_SYMBOL() {
	    return this.getToken(MySqlParser.LESS_SYMBOL, 0);
	};

	GREATER_SYMBOL() {
	    return this.getToken(MySqlParser.GREATER_SYMBOL, 0);
	};

	IGNORE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.IGNORE);
	    } else {
	        return this.getToken(MySqlParser.IGNORE, i);
	    }
	};


	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	assignmentField = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssignmentFieldContext);
	    } else {
	        return this.getTypedRuleContext(AssignmentFieldContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	updatedElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UpdatedElementContext);
	    } else {
	        return this.getTypedRuleContext(UpdatedElementContext,i);
	    }
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	LOW_PRIORITY() {
	    return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	};

	CONCURRENT() {
	    return this.getToken(MySqlParser.CONCURRENT, 0);
	};

	REPLACE() {
	    return this.getToken(MySqlParser.REPLACE, 0);
	};

	LINES() {
	    return this.getToken(MySqlParser.LINES, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLoadXmlStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLoadXmlStatement(this);
		}
	}


}



class ReplaceStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_replaceStatement;
        this.priority = null; // Token
        this.partitions = null; // UidListContext
        this.columns = null; // UidListContext
        this.setFirst = null; // UpdatedElementContext
        this._updatedElement = null; // UpdatedElementContext
        this.setElements = []; // of UpdatedElementContexts
    }

	REPLACE() {
	    return this.getToken(MySqlParser.REPLACE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	insertStatementValue() {
	    return this.getTypedRuleContext(InsertStatementValueContext,0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.LR_BRACKET, i);
	    }
	};


	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.RR_BRACKET, i);
	    }
	};


	updatedElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UpdatedElementContext);
	    } else {
	        return this.getTypedRuleContext(UpdatedElementContext,i);
	    }
	};

	uidList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidListContext);
	    } else {
	        return this.getTypedRuleContext(UidListContext,i);
	    }
	};

	LOW_PRIORITY() {
	    return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	};

	DELAYED() {
	    return this.getToken(MySqlParser.DELAYED, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterReplaceStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitReplaceStatement(this);
		}
	}


}



class SelectStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_selectStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class UnionSelectContext extends SelectStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.unionType = null; // Token;
        super.copyFrom(ctx);
    }

	querySpecificationNointo() {
	    return this.getTypedRuleContext(QuerySpecificationNointoContext,0);
	};

	unionStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnionStatementContext);
	    } else {
	        return this.getTypedRuleContext(UnionStatementContext,i);
	    }
	};

	UNION() {
	    return this.getToken(MySqlParser.UNION, 0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	lockClause() {
	    return this.getTypedRuleContext(LockClauseContext,0);
	};

	querySpecification() {
	    return this.getTypedRuleContext(QuerySpecificationContext,0);
	};

	queryExpression() {
	    return this.getTypedRuleContext(QueryExpressionContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	DISTINCT() {
	    return this.getToken(MySqlParser.DISTINCT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUnionSelect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUnionSelect(this);
		}
	}


}

MySqlParser.UnionSelectContext = UnionSelectContext;

class UnionParenthesisSelectContext extends SelectStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.unionType = null; // Token;
        super.copyFrom(ctx);
    }

	queryExpressionNointo() {
	    return this.getTypedRuleContext(QueryExpressionNointoContext,0);
	};

	unionParenthesis = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnionParenthesisContext);
	    } else {
	        return this.getTypedRuleContext(UnionParenthesisContext,i);
	    }
	};

	UNION() {
	    return this.getToken(MySqlParser.UNION, 0);
	};

	queryExpression() {
	    return this.getTypedRuleContext(QueryExpressionContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	lockClause() {
	    return this.getTypedRuleContext(LockClauseContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	DISTINCT() {
	    return this.getToken(MySqlParser.DISTINCT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUnionParenthesisSelect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUnionParenthesisSelect(this);
		}
	}


}

MySqlParser.UnionParenthesisSelectContext = UnionParenthesisSelectContext;

class SimpleSelectContext extends SelectStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	querySpecification() {
	    return this.getTypedRuleContext(QuerySpecificationContext,0);
	};

	lockClause() {
	    return this.getTypedRuleContext(LockClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSimpleSelect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSimpleSelect(this);
		}
	}


}

MySqlParser.SimpleSelectContext = SimpleSelectContext;

class ParenthesisSelectContext extends SelectStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	queryExpression() {
	    return this.getTypedRuleContext(QueryExpressionContext,0);
	};

	lockClause() {
	    return this.getTypedRuleContext(LockClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterParenthesisSelect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitParenthesisSelect(this);
		}
	}


}

MySqlParser.ParenthesisSelectContext = ParenthesisSelectContext;

class UpdateStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_updateStatement;
    }

	singleUpdateStatement() {
	    return this.getTypedRuleContext(SingleUpdateStatementContext,0);
	};

	multipleUpdateStatement() {
	    return this.getTypedRuleContext(MultipleUpdateStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUpdateStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUpdateStatement(this);
		}
	}


}



class InsertStatementValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_insertStatementValue;
        this.insertFormat = null; // Token
    }

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.LR_BRACKET, i);
	    }
	};


	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.RR_BRACKET, i);
	    }
	};


	VALUES() {
	    return this.getToken(MySqlParser.VALUES, 0);
	};

	VALUE() {
	    return this.getToken(MySqlParser.VALUE, 0);
	};

	expressionsWithDefaults = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionsWithDefaultsContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionsWithDefaultsContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInsertStatementValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInsertStatementValue(this);
		}
	}


}



class UpdatedElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_updatedElement;
    }

	fullColumnName() {
	    return this.getTypedRuleContext(FullColumnNameContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUpdatedElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUpdatedElement(this);
		}
	}


}



class AssignmentFieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_assignmentField;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	LOCAL_ID() {
	    return this.getToken(MySqlParser.LOCAL_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAssignmentField(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAssignmentField(this);
		}
	}


}



class LockClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_lockClause;
    }

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	UPDATE() {
	    return this.getToken(MySqlParser.UPDATE, 0);
	};

	LOCK() {
	    return this.getToken(MySqlParser.LOCK, 0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	SHARE() {
	    return this.getToken(MySqlParser.SHARE, 0);
	};

	MODE() {
	    return this.getToken(MySqlParser.MODE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLockClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLockClause(this);
		}
	}


}



class SingleDeleteStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_singleDeleteStatement;
        this.priority = null; // Token
    }

	DELETE() {
	    return this.getToken(MySqlParser.DELETE, 0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	QUICK() {
	    return this.getToken(MySqlParser.QUICK, 0);
	};

	IGNORE() {
	    return this.getToken(MySqlParser.IGNORE, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	WHERE() {
	    return this.getToken(MySqlParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	LIMIT() {
	    return this.getToken(MySqlParser.LIMIT, 0);
	};

	limitClauseAtom() {
	    return this.getTypedRuleContext(LimitClauseAtomContext,0);
	};

	LOW_PRIORITY() {
	    return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSingleDeleteStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSingleDeleteStatement(this);
		}
	}


}



class MultipleDeleteStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_multipleDeleteStatement;
        this.priority = null; // Token
    }

	DELETE() {
	    return this.getToken(MySqlParser.DELETE, 0);
	};

	tableName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableNameContext);
	    } else {
	        return this.getTypedRuleContext(TableNameContext,i);
	    }
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	tableSources() {
	    return this.getTypedRuleContext(TableSourcesContext,0);
	};

	USING() {
	    return this.getToken(MySqlParser.USING, 0);
	};

	QUICK() {
	    return this.getToken(MySqlParser.QUICK, 0);
	};

	IGNORE() {
	    return this.getToken(MySqlParser.IGNORE, 0);
	};

	WHERE() {
	    return this.getToken(MySqlParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	LOW_PRIORITY() {
	    return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.DOT);
	    } else {
	        return this.getToken(MySqlParser.DOT, i);
	    }
	};


	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.STAR);
	    } else {
	        return this.getToken(MySqlParser.STAR, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMultipleDeleteStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMultipleDeleteStatement(this);
		}
	}


}



class HandlerOpenStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_handlerOpenStatement;
    }

	HANDLER() {
	    return this.getToken(MySqlParser.HANDLER, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	OPEN() {
	    return this.getToken(MySqlParser.OPEN, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHandlerOpenStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHandlerOpenStatement(this);
		}
	}


}



class HandlerReadIndexStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_handlerReadIndexStatement;
        this.index = null; // UidContext
        this.moveOrder = null; // Token
    }

	HANDLER() {
	    return this.getToken(MySqlParser.HANDLER, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	READ() {
	    return this.getToken(MySqlParser.READ, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	comparisonOperator() {
	    return this.getTypedRuleContext(ComparisonOperatorContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	constants() {
	    return this.getTypedRuleContext(ConstantsContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	WHERE() {
	    return this.getToken(MySqlParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	LIMIT() {
	    return this.getToken(MySqlParser.LIMIT, 0);
	};

	limitClauseAtom() {
	    return this.getTypedRuleContext(LimitClauseAtomContext,0);
	};

	FIRST() {
	    return this.getToken(MySqlParser.FIRST, 0);
	};

	NEXT() {
	    return this.getToken(MySqlParser.NEXT, 0);
	};

	PREV() {
	    return this.getToken(MySqlParser.PREV, 0);
	};

	LAST() {
	    return this.getToken(MySqlParser.LAST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHandlerReadIndexStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHandlerReadIndexStatement(this);
		}
	}


}



class HandlerReadStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_handlerReadStatement;
        this.moveOrder = null; // Token
    }

	HANDLER() {
	    return this.getToken(MySqlParser.HANDLER, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	READ() {
	    return this.getToken(MySqlParser.READ, 0);
	};

	FIRST() {
	    return this.getToken(MySqlParser.FIRST, 0);
	};

	NEXT() {
	    return this.getToken(MySqlParser.NEXT, 0);
	};

	WHERE() {
	    return this.getToken(MySqlParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	LIMIT() {
	    return this.getToken(MySqlParser.LIMIT, 0);
	};

	limitClauseAtom() {
	    return this.getTypedRuleContext(LimitClauseAtomContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHandlerReadStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHandlerReadStatement(this);
		}
	}


}



class HandlerCloseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_handlerCloseStatement;
    }

	HANDLER() {
	    return this.getToken(MySqlParser.HANDLER, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	CLOSE() {
	    return this.getToken(MySqlParser.CLOSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHandlerCloseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHandlerCloseStatement(this);
		}
	}


}



class SingleUpdateStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_singleUpdateStatement;
        this.priority = null; // Token
    }

	UPDATE() {
	    return this.getToken(MySqlParser.UPDATE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	updatedElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UpdatedElementContext);
	    } else {
	        return this.getTypedRuleContext(UpdatedElementContext,i);
	    }
	};

	IGNORE() {
	    return this.getToken(MySqlParser.IGNORE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	WHERE() {
	    return this.getToken(MySqlParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	LOW_PRIORITY() {
	    return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSingleUpdateStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSingleUpdateStatement(this);
		}
	}


}



class MultipleUpdateStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_multipleUpdateStatement;
        this.priority = null; // Token
    }

	UPDATE() {
	    return this.getToken(MySqlParser.UPDATE, 0);
	};

	tableSources() {
	    return this.getTypedRuleContext(TableSourcesContext,0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	updatedElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UpdatedElementContext);
	    } else {
	        return this.getTypedRuleContext(UpdatedElementContext,i);
	    }
	};

	IGNORE() {
	    return this.getToken(MySqlParser.IGNORE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	WHERE() {
	    return this.getToken(MySqlParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	LOW_PRIORITY() {
	    return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMultipleUpdateStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMultipleUpdateStatement(this);
		}
	}


}



class OrderByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_orderByClause;
    }

	ORDER() {
	    return this.getToken(MySqlParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	orderByExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OrderByExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OrderByExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterOrderByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitOrderByClause(this);
		}
	}


}



class OrderByExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_orderByExpression;
        this.order = null; // Token
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ASC() {
	    return this.getToken(MySqlParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(MySqlParser.DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterOrderByExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitOrderByExpression(this);
		}
	}


}



class TableSourcesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tableSources;
    }

	tableSource = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableSourceContext);
	    } else {
	        return this.getTypedRuleContext(TableSourceContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableSources(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableSources(this);
		}
	}


}



class TableSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tableSource;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TableSourceNestedContext extends TableSourceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	tableSourceItem() {
	    return this.getTypedRuleContext(TableSourceItemContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	joinPart = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(JoinPartContext);
	    } else {
	        return this.getTypedRuleContext(JoinPartContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableSourceNested(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableSourceNested(this);
		}
	}


}

MySqlParser.TableSourceNestedContext = TableSourceNestedContext;

class TableSourceBaseContext extends TableSourceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	tableSourceItem() {
	    return this.getTypedRuleContext(TableSourceItemContext,0);
	};

	joinPart = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(JoinPartContext);
	    } else {
	        return this.getTypedRuleContext(JoinPartContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableSourceBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableSourceBase(this);
		}
	}


}

MySqlParser.TableSourceBaseContext = TableSourceBaseContext;

class TableSourceItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tableSourceItem;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SubqueryTableItemContext extends TableSourceItemContext {

    constructor(parser, ctx) {
        super(parser);
        this.parenthesisSubquery = null; // SelectStatementContext;
        this.alias = null; // UidContext;
        super.copyFrom(ctx);
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSubqueryTableItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSubqueryTableItem(this);
		}
	}


}

MySqlParser.SubqueryTableItemContext = SubqueryTableItemContext;

class AtomTableItemContext extends TableSourceItemContext {

    constructor(parser, ctx) {
        super(parser);
        this.alias = null; // UidContext;
        super.copyFrom(ctx);
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	indexHint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexHintContext);
	    } else {
	        return this.getTypedRuleContext(IndexHintContext,i);
	    }
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAtomTableItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAtomTableItem(this);
		}
	}


}

MySqlParser.AtomTableItemContext = AtomTableItemContext;

class TableSourcesItemContext extends TableSourceItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	tableSources() {
	    return this.getTypedRuleContext(TableSourcesContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableSourcesItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableSourcesItem(this);
		}
	}


}

MySqlParser.TableSourcesItemContext = TableSourcesItemContext;

class IndexHintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_indexHint;
        this.indexHintAction = null; // Token
        this.keyFormat = null; // Token
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	USE() {
	    return this.getToken(MySqlParser.USE, 0);
	};

	IGNORE() {
	    return this.getToken(MySqlParser.IGNORE, 0);
	};

	FORCE() {
	    return this.getToken(MySqlParser.FORCE, 0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	indexHintType() {
	    return this.getTypedRuleContext(IndexHintTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIndexHint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIndexHint(this);
		}
	}


}



class IndexHintTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_indexHintType;
    }

	JOIN() {
	    return this.getToken(MySqlParser.JOIN, 0);
	};

	ORDER() {
	    return this.getToken(MySqlParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	GROUP() {
	    return this.getToken(MySqlParser.GROUP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIndexHintType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIndexHintType(this);
		}
	}


}



class JoinPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_joinPart;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class InnerJoinContext extends JoinPartContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	JOIN() {
	    return this.getToken(MySqlParser.JOIN, 0);
	};

	tableSourceItem() {
	    return this.getTypedRuleContext(TableSourceItemContext,0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	USING() {
	    return this.getToken(MySqlParser.USING, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	INNER() {
	    return this.getToken(MySqlParser.INNER, 0);
	};

	CROSS() {
	    return this.getToken(MySqlParser.CROSS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInnerJoin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInnerJoin(this);
		}
	}


}

MySqlParser.InnerJoinContext = InnerJoinContext;

class NaturalJoinContext extends JoinPartContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NATURAL() {
	    return this.getToken(MySqlParser.NATURAL, 0);
	};

	JOIN() {
	    return this.getToken(MySqlParser.JOIN, 0);
	};

	tableSourceItem() {
	    return this.getTypedRuleContext(TableSourceItemContext,0);
	};

	LEFT() {
	    return this.getToken(MySqlParser.LEFT, 0);
	};

	RIGHT() {
	    return this.getToken(MySqlParser.RIGHT, 0);
	};

	OUTER() {
	    return this.getToken(MySqlParser.OUTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterNaturalJoin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitNaturalJoin(this);
		}
	}


}

MySqlParser.NaturalJoinContext = NaturalJoinContext;

class OuterJoinContext extends JoinPartContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	JOIN() {
	    return this.getToken(MySqlParser.JOIN, 0);
	};

	tableSourceItem() {
	    return this.getTypedRuleContext(TableSourceItemContext,0);
	};

	LEFT() {
	    return this.getToken(MySqlParser.LEFT, 0);
	};

	RIGHT() {
	    return this.getToken(MySqlParser.RIGHT, 0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	USING() {
	    return this.getToken(MySqlParser.USING, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	OUTER() {
	    return this.getToken(MySqlParser.OUTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterOuterJoin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitOuterJoin(this);
		}
	}


}

MySqlParser.OuterJoinContext = OuterJoinContext;

class StraightJoinContext extends JoinPartContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	STRAIGHT_JOIN() {
	    return this.getToken(MySqlParser.STRAIGHT_JOIN, 0);
	};

	tableSourceItem() {
	    return this.getTypedRuleContext(TableSourceItemContext,0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStraightJoin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStraightJoin(this);
		}
	}


}

MySqlParser.StraightJoinContext = StraightJoinContext;

class QueryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_queryExpression;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	querySpecification() {
	    return this.getTypedRuleContext(QuerySpecificationContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	queryExpression() {
	    return this.getTypedRuleContext(QueryExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterQueryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitQueryExpression(this);
		}
	}


}



class QueryExpressionNointoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_queryExpressionNointo;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	querySpecificationNointo() {
	    return this.getTypedRuleContext(QuerySpecificationNointoContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	queryExpressionNointo() {
	    return this.getTypedRuleContext(QueryExpressionNointoContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterQueryExpressionNointo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitQueryExpressionNointo(this);
		}
	}


}



class QuerySpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_querySpecification;
    }

	SELECT() {
	    return this.getToken(MySqlParser.SELECT, 0);
	};

	selectElements() {
	    return this.getTypedRuleContext(SelectElementsContext,0);
	};

	selectSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectSpecContext);
	    } else {
	        return this.getTypedRuleContext(SelectSpecContext,i);
	    }
	};

	selectIntoExpression() {
	    return this.getTypedRuleContext(SelectIntoExpressionContext,0);
	};

	fromClause() {
	    return this.getTypedRuleContext(FromClauseContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterQuerySpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitQuerySpecification(this);
		}
	}


}



class QuerySpecificationNointoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_querySpecificationNointo;
    }

	SELECT() {
	    return this.getToken(MySqlParser.SELECT, 0);
	};

	selectElements() {
	    return this.getTypedRuleContext(SelectElementsContext,0);
	};

	selectSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectSpecContext);
	    } else {
	        return this.getTypedRuleContext(SelectSpecContext,i);
	    }
	};

	fromClause() {
	    return this.getTypedRuleContext(FromClauseContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterQuerySpecificationNointo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitQuerySpecificationNointo(this);
		}
	}


}



class UnionParenthesisContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_unionParenthesis;
        this.unionType = null; // Token
    }

	UNION() {
	    return this.getToken(MySqlParser.UNION, 0);
	};

	queryExpressionNointo() {
	    return this.getTypedRuleContext(QueryExpressionNointoContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	DISTINCT() {
	    return this.getToken(MySqlParser.DISTINCT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUnionParenthesis(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUnionParenthesis(this);
		}
	}


}



class UnionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_unionStatement;
        this.unionType = null; // Token
    }

	UNION() {
	    return this.getToken(MySqlParser.UNION, 0);
	};

	querySpecificationNointo() {
	    return this.getTypedRuleContext(QuerySpecificationNointoContext,0);
	};

	queryExpressionNointo() {
	    return this.getTypedRuleContext(QueryExpressionNointoContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	DISTINCT() {
	    return this.getToken(MySqlParser.DISTINCT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUnionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUnionStatement(this);
		}
	}


}



class SelectSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_selectSpec;
    }

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	DISTINCT() {
	    return this.getToken(MySqlParser.DISTINCT, 0);
	};

	DISTINCTROW() {
	    return this.getToken(MySqlParser.DISTINCTROW, 0);
	};

	HIGH_PRIORITY() {
	    return this.getToken(MySqlParser.HIGH_PRIORITY, 0);
	};

	STRAIGHT_JOIN() {
	    return this.getToken(MySqlParser.STRAIGHT_JOIN, 0);
	};

	SQL_SMALL_RESULT() {
	    return this.getToken(MySqlParser.SQL_SMALL_RESULT, 0);
	};

	SQL_BIG_RESULT() {
	    return this.getToken(MySqlParser.SQL_BIG_RESULT, 0);
	};

	SQL_BUFFER_RESULT() {
	    return this.getToken(MySqlParser.SQL_BUFFER_RESULT, 0);
	};

	SQL_CACHE() {
	    return this.getToken(MySqlParser.SQL_CACHE, 0);
	};

	SQL_NO_CACHE() {
	    return this.getToken(MySqlParser.SQL_NO_CACHE, 0);
	};

	SQL_CALC_FOUND_ROWS() {
	    return this.getToken(MySqlParser.SQL_CALC_FOUND_ROWS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectSpec(this);
		}
	}


}



class SelectElementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_selectElements;
        this.star = null; // Token
    }

	selectElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectElementContext);
	    } else {
	        return this.getTypedRuleContext(SelectElementContext,i);
	    }
	};

	STAR() {
	    return this.getToken(MySqlParser.STAR, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectElements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectElements(this);
		}
	}


}



class SelectElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_selectElement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SelectExpressionElementContext extends SelectElementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	LOCAL_ID() {
	    return this.getToken(MySqlParser.LOCAL_ID, 0);
	};

	VAR_ASSIGN() {
	    return this.getToken(MySqlParser.VAR_ASSIGN, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectExpressionElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectExpressionElement(this);
		}
	}


}

MySqlParser.SelectExpressionElementContext = SelectExpressionElementContext;

class SelectFunctionElementContext extends SelectElementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectFunctionElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectFunctionElement(this);
		}
	}


}

MySqlParser.SelectFunctionElementContext = SelectFunctionElementContext;

class SelectStarElementContext extends SelectElementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	DOT() {
	    return this.getToken(MySqlParser.DOT, 0);
	};

	STAR() {
	    return this.getToken(MySqlParser.STAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectStarElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectStarElement(this);
		}
	}


}

MySqlParser.SelectStarElementContext = SelectStarElementContext;

class SelectColumnElementContext extends SelectElementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	fullColumnName() {
	    return this.getTypedRuleContext(FullColumnNameContext,0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectColumnElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectColumnElement(this);
		}
	}


}

MySqlParser.SelectColumnElementContext = SelectColumnElementContext;

class SelectIntoExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_selectIntoExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SelectIntoVariablesContext extends SelectIntoExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	assignmentField = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssignmentFieldContext);
	    } else {
	        return this.getTypedRuleContext(AssignmentFieldContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectIntoVariables(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectIntoVariables(this);
		}
	}


}

MySqlParser.SelectIntoVariablesContext = SelectIntoVariablesContext;

class SelectIntoTextFileContext extends SelectIntoExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.filename = null; // Token;
        this.charset = null; // CharsetNameContext;
        this.fieldsFormat = null; // Token;
        super.copyFrom(ctx);
    }

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	OUTFILE() {
	    return this.getToken(MySqlParser.OUTFILE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	LINES() {
	    return this.getToken(MySqlParser.LINES, 0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	FIELDS() {
	    return this.getToken(MySqlParser.FIELDS, 0);
	};

	COLUMNS() {
	    return this.getToken(MySqlParser.COLUMNS, 0);
	};

	selectFieldsInto = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectFieldsIntoContext);
	    } else {
	        return this.getTypedRuleContext(SelectFieldsIntoContext,i);
	    }
	};

	selectLinesInto = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectLinesIntoContext);
	    } else {
	        return this.getTypedRuleContext(SelectLinesIntoContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectIntoTextFile(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectIntoTextFile(this);
		}
	}


}

MySqlParser.SelectIntoTextFileContext = SelectIntoTextFileContext;

class SelectIntoDumpFileContext extends SelectIntoExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	DUMPFILE() {
	    return this.getToken(MySqlParser.DUMPFILE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectIntoDumpFile(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectIntoDumpFile(this);
		}
	}


}

MySqlParser.SelectIntoDumpFileContext = SelectIntoDumpFileContext;

class SelectFieldsIntoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_selectFieldsInto;
        this.terminationField = null; // Token
        this.enclosion = null; // Token
        this.escaping = null; // Token
    }

	TERMINATED() {
	    return this.getToken(MySqlParser.TERMINATED, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	ENCLOSED() {
	    return this.getToken(MySqlParser.ENCLOSED, 0);
	};

	OPTIONALLY() {
	    return this.getToken(MySqlParser.OPTIONALLY, 0);
	};

	ESCAPED() {
	    return this.getToken(MySqlParser.ESCAPED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectFieldsInto(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectFieldsInto(this);
		}
	}


}



class SelectLinesIntoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_selectLinesInto;
        this.starting = null; // Token
        this.terminationLine = null; // Token
    }

	STARTING() {
	    return this.getToken(MySqlParser.STARTING, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	TERMINATED() {
	    return this.getToken(MySqlParser.TERMINATED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectLinesInto(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectLinesInto(this);
		}
	}


}



class FromClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_fromClause;
        this.whereExpr = null; // ExpressionContext
        this.havingExpr = null; // ExpressionContext
    }

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	tableSources() {
	    return this.getTypedRuleContext(TableSourcesContext,0);
	};

	WHERE() {
	    return this.getToken(MySqlParser.WHERE, 0);
	};

	GROUP() {
	    return this.getToken(MySqlParser.GROUP, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	groupByItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupByItemContext);
	    } else {
	        return this.getTypedRuleContext(GroupByItemContext,i);
	    }
	};

	HAVING() {
	    return this.getToken(MySqlParser.HAVING, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	ROLLUP() {
	    return this.getToken(MySqlParser.ROLLUP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFromClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFromClause(this);
		}
	}


}



class GroupByItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_groupByItem;
        this.order = null; // Token
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ASC() {
	    return this.getToken(MySqlParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(MySqlParser.DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGroupByItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGroupByItem(this);
		}
	}


}



class LimitClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_limitClause;
        this.offset = null; // LimitClauseAtomContext
        this.limit = null; // LimitClauseAtomContext
    }

	LIMIT() {
	    return this.getToken(MySqlParser.LIMIT, 0);
	};

	OFFSET() {
	    return this.getToken(MySqlParser.OFFSET, 0);
	};

	limitClauseAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LimitClauseAtomContext);
	    } else {
	        return this.getTypedRuleContext(LimitClauseAtomContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLimitClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLimitClause(this);
		}
	}


}



class LimitClauseAtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_limitClauseAtom;
    }

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	mysqlVariable() {
	    return this.getTypedRuleContext(MysqlVariableContext,0);
	};

	simpleId() {
	    return this.getTypedRuleContext(SimpleIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLimitClauseAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLimitClauseAtom(this);
		}
	}


}



class StartTransactionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_startTransaction;
    }

	START() {
	    return this.getToken(MySqlParser.START, 0);
	};

	TRANSACTION() {
	    return this.getToken(MySqlParser.TRANSACTION, 0);
	};

	transactionMode = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TransactionModeContext);
	    } else {
	        return this.getTypedRuleContext(TransactionModeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStartTransaction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStartTransaction(this);
		}
	}


}



class BeginWorkContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_beginWork;
    }

	BEGIN() {
	    return this.getToken(MySqlParser.BEGIN, 0);
	};

	WORK() {
	    return this.getToken(MySqlParser.WORK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBeginWork(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBeginWork(this);
		}
	}


}



class CommitWorkContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_commitWork;
        this.nochain = null; // Token
        this.norelease = null; // Token
    }

	COMMIT() {
	    return this.getToken(MySqlParser.COMMIT, 0);
	};

	WORK() {
	    return this.getToken(MySqlParser.WORK, 0);
	};

	AND() {
	    return this.getToken(MySqlParser.AND, 0);
	};

	CHAIN() {
	    return this.getToken(MySqlParser.CHAIN, 0);
	};

	RELEASE() {
	    return this.getToken(MySqlParser.RELEASE, 0);
	};

	NO = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.NO);
	    } else {
	        return this.getToken(MySqlParser.NO, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCommitWork(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCommitWork(this);
		}
	}


}



class RollbackWorkContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_rollbackWork;
        this.nochain = null; // Token
        this.norelease = null; // Token
    }

	ROLLBACK() {
	    return this.getToken(MySqlParser.ROLLBACK, 0);
	};

	WORK() {
	    return this.getToken(MySqlParser.WORK, 0);
	};

	AND() {
	    return this.getToken(MySqlParser.AND, 0);
	};

	CHAIN() {
	    return this.getToken(MySqlParser.CHAIN, 0);
	};

	RELEASE() {
	    return this.getToken(MySqlParser.RELEASE, 0);
	};

	NO = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.NO);
	    } else {
	        return this.getToken(MySqlParser.NO, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRollbackWork(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRollbackWork(this);
		}
	}


}



class SavepointStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_savepointStatement;
    }

	SAVEPOINT() {
	    return this.getToken(MySqlParser.SAVEPOINT, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSavepointStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSavepointStatement(this);
		}
	}


}



class RollbackStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_rollbackStatement;
    }

	ROLLBACK() {
	    return this.getToken(MySqlParser.ROLLBACK, 0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	WORK() {
	    return this.getToken(MySqlParser.WORK, 0);
	};

	SAVEPOINT() {
	    return this.getToken(MySqlParser.SAVEPOINT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRollbackStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRollbackStatement(this);
		}
	}


}



class ReleaseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_releaseStatement;
    }

	RELEASE() {
	    return this.getToken(MySqlParser.RELEASE, 0);
	};

	SAVEPOINT() {
	    return this.getToken(MySqlParser.SAVEPOINT, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterReleaseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitReleaseStatement(this);
		}
	}


}



class LockTablesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_lockTables;
    }

	LOCK() {
	    return this.getToken(MySqlParser.LOCK, 0);
	};

	TABLES() {
	    return this.getToken(MySqlParser.TABLES, 0);
	};

	lockTableElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LockTableElementContext);
	    } else {
	        return this.getTypedRuleContext(LockTableElementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLockTables(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLockTables(this);
		}
	}


}



class UnlockTablesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_unlockTables;
    }

	UNLOCK() {
	    return this.getToken(MySqlParser.UNLOCK, 0);
	};

	TABLES() {
	    return this.getToken(MySqlParser.TABLES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUnlockTables(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUnlockTables(this);
		}
	}


}



class SetAutocommitStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_setAutocommitStatement;
        this.autocommitValue = null; // Token
    }

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	AUTOCOMMIT() {
	    return this.getToken(MySqlParser.AUTOCOMMIT, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	ZERO_DECIMAL() {
	    return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	};

	ONE_DECIMAL() {
	    return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetAutocommitStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetAutocommitStatement(this);
		}
	}


}



class SetTransactionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_setTransactionStatement;
        this.transactionContext = null; // Token
    }

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	TRANSACTION() {
	    return this.getToken(MySqlParser.TRANSACTION, 0);
	};

	transactionOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TransactionOptionContext);
	    } else {
	        return this.getTypedRuleContext(TransactionOptionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	GLOBAL() {
	    return this.getToken(MySqlParser.GLOBAL, 0);
	};

	SESSION() {
	    return this.getToken(MySqlParser.SESSION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetTransactionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetTransactionStatement(this);
		}
	}


}



class TransactionModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_transactionMode;
    }

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	CONSISTENT() {
	    return this.getToken(MySqlParser.CONSISTENT, 0);
	};

	SNAPSHOT() {
	    return this.getToken(MySqlParser.SNAPSHOT, 0);
	};

	READ() {
	    return this.getToken(MySqlParser.READ, 0);
	};

	WRITE() {
	    return this.getToken(MySqlParser.WRITE, 0);
	};

	ONLY() {
	    return this.getToken(MySqlParser.ONLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTransactionMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTransactionMode(this);
		}
	}


}



class LockTableElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_lockTableElement;
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	lockAction() {
	    return this.getTypedRuleContext(LockActionContext,0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLockTableElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLockTableElement(this);
		}
	}


}



class LockActionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_lockAction;
    }

	READ() {
	    return this.getToken(MySqlParser.READ, 0);
	};

	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	WRITE() {
	    return this.getToken(MySqlParser.WRITE, 0);
	};

	LOW_PRIORITY() {
	    return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLockAction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLockAction(this);
		}
	}


}



class TransactionOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_transactionOption;
    }

	ISOLATION() {
	    return this.getToken(MySqlParser.ISOLATION, 0);
	};

	LEVEL() {
	    return this.getToken(MySqlParser.LEVEL, 0);
	};

	transactionLevel() {
	    return this.getTypedRuleContext(TransactionLevelContext,0);
	};

	READ() {
	    return this.getToken(MySqlParser.READ, 0);
	};

	WRITE() {
	    return this.getToken(MySqlParser.WRITE, 0);
	};

	ONLY() {
	    return this.getToken(MySqlParser.ONLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTransactionOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTransactionOption(this);
		}
	}


}



class TransactionLevelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_transactionLevel;
    }

	REPEATABLE() {
	    return this.getToken(MySqlParser.REPEATABLE, 0);
	};

	READ() {
	    return this.getToken(MySqlParser.READ, 0);
	};

	COMMITTED() {
	    return this.getToken(MySqlParser.COMMITTED, 0);
	};

	UNCOMMITTED() {
	    return this.getToken(MySqlParser.UNCOMMITTED, 0);
	};

	SERIALIZABLE() {
	    return this.getToken(MySqlParser.SERIALIZABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTransactionLevel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTransactionLevel(this);
		}
	}


}



class ChangeMasterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_changeMaster;
    }

	CHANGE() {
	    return this.getToken(MySqlParser.CHANGE, 0);
	};

	MASTER() {
	    return this.getToken(MySqlParser.MASTER, 0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	masterOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MasterOptionContext);
	    } else {
	        return this.getTypedRuleContext(MasterOptionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	channelOption() {
	    return this.getTypedRuleContext(ChannelOptionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterChangeMaster(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitChangeMaster(this);
		}
	}


}



class ChangeReplicationFilterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_changeReplicationFilter;
    }

	CHANGE() {
	    return this.getToken(MySqlParser.CHANGE, 0);
	};

	REPLICATION() {
	    return this.getToken(MySqlParser.REPLICATION, 0);
	};

	FILTER() {
	    return this.getToken(MySqlParser.FILTER, 0);
	};

	replicationFilter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReplicationFilterContext);
	    } else {
	        return this.getTypedRuleContext(ReplicationFilterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterChangeReplicationFilter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitChangeReplicationFilter(this);
		}
	}


}



class PurgeBinaryLogsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_purgeBinaryLogs;
        this.purgeFormat = null; // Token
        this.fileName = null; // Token
        this.timeValue = null; // Token
    }

	PURGE() {
	    return this.getToken(MySqlParser.PURGE, 0);
	};

	LOGS() {
	    return this.getToken(MySqlParser.LOGS, 0);
	};

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	MASTER() {
	    return this.getToken(MySqlParser.MASTER, 0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	BEFORE() {
	    return this.getToken(MySqlParser.BEFORE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPurgeBinaryLogs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPurgeBinaryLogs(this);
		}
	}


}



class ResetMasterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_resetMaster;
    }

	RESET() {
	    return this.getToken(MySqlParser.RESET, 0);
	};

	MASTER() {
	    return this.getToken(MySqlParser.MASTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterResetMaster(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitResetMaster(this);
		}
	}


}



class ResetSlaveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_resetSlave;
    }

	RESET() {
	    return this.getToken(MySqlParser.RESET, 0);
	};

	SLAVE() {
	    return this.getToken(MySqlParser.SLAVE, 0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	channelOption() {
	    return this.getTypedRuleContext(ChannelOptionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterResetSlave(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitResetSlave(this);
		}
	}


}



class StartSlaveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_startSlave;
    }

	START() {
	    return this.getToken(MySqlParser.START, 0);
	};

	SLAVE() {
	    return this.getToken(MySqlParser.SLAVE, 0);
	};

	threadType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ThreadTypeContext);
	    } else {
	        return this.getTypedRuleContext(ThreadTypeContext,i);
	    }
	};

	UNTIL() {
	    return this.getToken(MySqlParser.UNTIL, 0);
	};

	untilOption() {
	    return this.getTypedRuleContext(UntilOptionContext,0);
	};

	connectionOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConnectionOptionContext);
	    } else {
	        return this.getTypedRuleContext(ConnectionOptionContext,i);
	    }
	};

	channelOption() {
	    return this.getTypedRuleContext(ChannelOptionContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStartSlave(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStartSlave(this);
		}
	}


}



class StopSlaveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_stopSlave;
    }

	STOP() {
	    return this.getToken(MySqlParser.STOP, 0);
	};

	SLAVE() {
	    return this.getToken(MySqlParser.SLAVE, 0);
	};

	threadType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ThreadTypeContext);
	    } else {
	        return this.getTypedRuleContext(ThreadTypeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStopSlave(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStopSlave(this);
		}
	}


}



class StartGroupReplicationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_startGroupReplication;
    }

	START() {
	    return this.getToken(MySqlParser.START, 0);
	};

	GROUP_REPLICATION() {
	    return this.getToken(MySqlParser.GROUP_REPLICATION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStartGroupReplication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStartGroupReplication(this);
		}
	}


}



class StopGroupReplicationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_stopGroupReplication;
    }

	STOP() {
	    return this.getToken(MySqlParser.STOP, 0);
	};

	GROUP_REPLICATION() {
	    return this.getToken(MySqlParser.GROUP_REPLICATION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStopGroupReplication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStopGroupReplication(this);
		}
	}


}



class MasterOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_masterOption;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class MasterStringOptionContext extends MasterOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	stringMasterOption() {
	    return this.getTypedRuleContext(StringMasterOptionContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMasterStringOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMasterStringOption(this);
		}
	}


}

MySqlParser.MasterStringOptionContext = MasterStringOptionContext;

class MasterRealOptionContext extends MasterOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MASTER_HEARTBEAT_PERIOD() {
	    return this.getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	REAL_LITERAL() {
	    return this.getToken(MySqlParser.REAL_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMasterRealOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMasterRealOption(this);
		}
	}


}

MySqlParser.MasterRealOptionContext = MasterRealOptionContext;

class MasterBoolOptionContext extends MasterOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.boolVal = null; // Token;
        super.copyFrom(ctx);
    }

	boolMasterOption() {
	    return this.getTypedRuleContext(BoolMasterOptionContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	ZERO_DECIMAL() {
	    return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	};

	ONE_DECIMAL() {
	    return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMasterBoolOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMasterBoolOption(this);
		}
	}


}

MySqlParser.MasterBoolOptionContext = MasterBoolOptionContext;

class MasterUidListOptionContext extends MasterOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IGNORE_SERVER_IDS() {
	    return this.getToken(MySqlParser.IGNORE_SERVER_IDS, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMasterUidListOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMasterUidListOption(this);
		}
	}


}

MySqlParser.MasterUidListOptionContext = MasterUidListOptionContext;

class MasterDecimalOptionContext extends MasterOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	decimalMasterOption() {
	    return this.getTypedRuleContext(DecimalMasterOptionContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMasterDecimalOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMasterDecimalOption(this);
		}
	}


}

MySqlParser.MasterDecimalOptionContext = MasterDecimalOptionContext;

class StringMasterOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_stringMasterOption;
    }

	MASTER_BIND() {
	    return this.getToken(MySqlParser.MASTER_BIND, 0);
	};

	MASTER_HOST() {
	    return this.getToken(MySqlParser.MASTER_HOST, 0);
	};

	MASTER_USER() {
	    return this.getToken(MySqlParser.MASTER_USER, 0);
	};

	MASTER_PASSWORD() {
	    return this.getToken(MySqlParser.MASTER_PASSWORD, 0);
	};

	MASTER_LOG_FILE() {
	    return this.getToken(MySqlParser.MASTER_LOG_FILE, 0);
	};

	RELAY_LOG_FILE() {
	    return this.getToken(MySqlParser.RELAY_LOG_FILE, 0);
	};

	MASTER_SSL_CA() {
	    return this.getToken(MySqlParser.MASTER_SSL_CA, 0);
	};

	MASTER_SSL_CAPATH() {
	    return this.getToken(MySqlParser.MASTER_SSL_CAPATH, 0);
	};

	MASTER_SSL_CERT() {
	    return this.getToken(MySqlParser.MASTER_SSL_CERT, 0);
	};

	MASTER_SSL_CRL() {
	    return this.getToken(MySqlParser.MASTER_SSL_CRL, 0);
	};

	MASTER_SSL_CRLPATH() {
	    return this.getToken(MySqlParser.MASTER_SSL_CRLPATH, 0);
	};

	MASTER_SSL_KEY() {
	    return this.getToken(MySqlParser.MASTER_SSL_KEY, 0);
	};

	MASTER_SSL_CIPHER() {
	    return this.getToken(MySqlParser.MASTER_SSL_CIPHER, 0);
	};

	MASTER_TLS_VERSION() {
	    return this.getToken(MySqlParser.MASTER_TLS_VERSION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStringMasterOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStringMasterOption(this);
		}
	}


}



class DecimalMasterOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_decimalMasterOption;
    }

	MASTER_PORT() {
	    return this.getToken(MySqlParser.MASTER_PORT, 0);
	};

	MASTER_CONNECT_RETRY() {
	    return this.getToken(MySqlParser.MASTER_CONNECT_RETRY, 0);
	};

	MASTER_RETRY_COUNT() {
	    return this.getToken(MySqlParser.MASTER_RETRY_COUNT, 0);
	};

	MASTER_DELAY() {
	    return this.getToken(MySqlParser.MASTER_DELAY, 0);
	};

	MASTER_LOG_POS() {
	    return this.getToken(MySqlParser.MASTER_LOG_POS, 0);
	};

	RELAY_LOG_POS() {
	    return this.getToken(MySqlParser.RELAY_LOG_POS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDecimalMasterOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDecimalMasterOption(this);
		}
	}


}



class BoolMasterOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_boolMasterOption;
    }

	MASTER_AUTO_POSITION() {
	    return this.getToken(MySqlParser.MASTER_AUTO_POSITION, 0);
	};

	MASTER_SSL() {
	    return this.getToken(MySqlParser.MASTER_SSL, 0);
	};

	MASTER_SSL_VERIFY_SERVER_CERT() {
	    return this.getToken(MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBoolMasterOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBoolMasterOption(this);
		}
	}


}



class ChannelOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_channelOption;
    }

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	CHANNEL() {
	    return this.getToken(MySqlParser.CHANNEL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterChannelOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitChannelOption(this);
		}
	}


}



class ReplicationFilterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_replicationFilter;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class WildIgnoreTableReplicationContext extends ReplicationFilterContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REPLICATE_WILD_IGNORE_TABLE() {
	    return this.getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	simpleStrings() {
	    return this.getTypedRuleContext(SimpleStringsContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterWildIgnoreTableReplication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitWildIgnoreTableReplication(this);
		}
	}


}

MySqlParser.WildIgnoreTableReplicationContext = WildIgnoreTableReplicationContext;

class DoTableReplicationContext extends ReplicationFilterContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REPLICATE_DO_TABLE() {
	    return this.getToken(MySqlParser.REPLICATE_DO_TABLE, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	tables() {
	    return this.getTypedRuleContext(TablesContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDoTableReplication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDoTableReplication(this);
		}
	}


}

MySqlParser.DoTableReplicationContext = DoTableReplicationContext;

class IgnoreTableReplicationContext extends ReplicationFilterContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REPLICATE_IGNORE_TABLE() {
	    return this.getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	tables() {
	    return this.getTypedRuleContext(TablesContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIgnoreTableReplication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIgnoreTableReplication(this);
		}
	}


}

MySqlParser.IgnoreTableReplicationContext = IgnoreTableReplicationContext;

class RewriteDbReplicationContext extends ReplicationFilterContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REPLICATE_REWRITE_DB() {
	    return this.getToken(MySqlParser.REPLICATE_REWRITE_DB, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	tablePair = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TablePairContext);
	    } else {
	        return this.getTypedRuleContext(TablePairContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRewriteDbReplication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRewriteDbReplication(this);
		}
	}


}

MySqlParser.RewriteDbReplicationContext = RewriteDbReplicationContext;

class DoDbReplicationContext extends ReplicationFilterContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REPLICATE_DO_DB() {
	    return this.getToken(MySqlParser.REPLICATE_DO_DB, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDoDbReplication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDoDbReplication(this);
		}
	}


}

MySqlParser.DoDbReplicationContext = DoDbReplicationContext;

class IgnoreDbReplicationContext extends ReplicationFilterContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REPLICATE_IGNORE_DB() {
	    return this.getToken(MySqlParser.REPLICATE_IGNORE_DB, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIgnoreDbReplication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIgnoreDbReplication(this);
		}
	}


}

MySqlParser.IgnoreDbReplicationContext = IgnoreDbReplicationContext;

class WildDoTableReplicationContext extends ReplicationFilterContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REPLICATE_WILD_DO_TABLE() {
	    return this.getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	simpleStrings() {
	    return this.getTypedRuleContext(SimpleStringsContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterWildDoTableReplication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitWildDoTableReplication(this);
		}
	}


}

MySqlParser.WildDoTableReplicationContext = WildDoTableReplicationContext;

class TablePairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tablePair;
        this.firstTable = null; // TableNameContext
        this.secondTable = null; // TableNameContext
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	tableName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableNameContext);
	    } else {
	        return this.getTypedRuleContext(TableNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTablePair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTablePair(this);
		}
	}


}



class ThreadTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_threadType;
    }

	IO_THREAD() {
	    return this.getToken(MySqlParser.IO_THREAD, 0);
	};

	SQL_THREAD() {
	    return this.getToken(MySqlParser.SQL_THREAD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterThreadType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitThreadType(this);
		}
	}


}



class UntilOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_untilOption;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class GtidsUntilOptionContext extends UntilOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.gtids = null; // Token;
        super.copyFrom(ctx);
    }

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	gtuidSet() {
	    return this.getTypedRuleContext(GtuidSetContext,0);
	};

	SQL_BEFORE_GTIDS() {
	    return this.getToken(MySqlParser.SQL_BEFORE_GTIDS, 0);
	};

	SQL_AFTER_GTIDS() {
	    return this.getToken(MySqlParser.SQL_AFTER_GTIDS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGtidsUntilOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGtidsUntilOption(this);
		}
	}


}

MySqlParser.GtidsUntilOptionContext = GtidsUntilOptionContext;

class SqlGapsUntilOptionContext extends UntilOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SQL_AFTER_MTS_GAPS() {
	    return this.getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSqlGapsUntilOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSqlGapsUntilOption(this);
		}
	}


}

MySqlParser.SqlGapsUntilOptionContext = SqlGapsUntilOptionContext;

class MasterLogUntilOptionContext extends UntilOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MASTER_LOG_FILE() {
	    return this.getToken(MySqlParser.MASTER_LOG_FILE, 0);
	};

	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	MASTER_LOG_POS() {
	    return this.getToken(MySqlParser.MASTER_LOG_POS, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMasterLogUntilOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMasterLogUntilOption(this);
		}
	}


}

MySqlParser.MasterLogUntilOptionContext = MasterLogUntilOptionContext;

class RelayLogUntilOptionContext extends UntilOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RELAY_LOG_FILE() {
	    return this.getToken(MySqlParser.RELAY_LOG_FILE, 0);
	};

	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	RELAY_LOG_POS() {
	    return this.getToken(MySqlParser.RELAY_LOG_POS, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRelayLogUntilOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRelayLogUntilOption(this);
		}
	}


}

MySqlParser.RelayLogUntilOptionContext = RelayLogUntilOptionContext;

class ConnectionOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_connectionOption;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PluginDirConnectionOptionContext extends ConnectionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.conOptPluginDir = null; // Token;
        super.copyFrom(ctx);
    }

	PLUGIN_DIR() {
	    return this.getToken(MySqlParser.PLUGIN_DIR, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPluginDirConnectionOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPluginDirConnectionOption(this);
		}
	}


}

MySqlParser.PluginDirConnectionOptionContext = PluginDirConnectionOptionContext;

class UserConnectionOptionContext extends ConnectionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.conOptUser = null; // Token;
        super.copyFrom(ctx);
    }

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUserConnectionOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUserConnectionOption(this);
		}
	}


}

MySqlParser.UserConnectionOptionContext = UserConnectionOptionContext;

class DefaultAuthConnectionOptionContext extends ConnectionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.conOptDefAuth = null; // Token;
        super.copyFrom(ctx);
    }

	DEFAULT_AUTH() {
	    return this.getToken(MySqlParser.DEFAULT_AUTH, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDefaultAuthConnectionOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDefaultAuthConnectionOption(this);
		}
	}


}

MySqlParser.DefaultAuthConnectionOptionContext = DefaultAuthConnectionOptionContext;

class PasswordConnectionOptionContext extends ConnectionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.conOptPassword = null; // Token;
        super.copyFrom(ctx);
    }

	PASSWORD() {
	    return this.getToken(MySqlParser.PASSWORD, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPasswordConnectionOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPasswordConnectionOption(this);
		}
	}


}

MySqlParser.PasswordConnectionOptionContext = PasswordConnectionOptionContext;

class GtuidSetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_gtuidSet;
    }

	uuidSet = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UuidSetContext);
	    } else {
	        return this.getTypedRuleContext(UuidSetContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGtuidSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGtuidSet(this);
		}
	}


}



class XaStartTransactionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_xaStartTransaction;
        this.xaStart = null; // Token
        this.xaAction = null; // Token
    }

	XA() {
	    return this.getToken(MySqlParser.XA, 0);
	};

	xid() {
	    return this.getTypedRuleContext(XidContext,0);
	};

	START() {
	    return this.getToken(MySqlParser.START, 0);
	};

	BEGIN() {
	    return this.getToken(MySqlParser.BEGIN, 0);
	};

	JOIN() {
	    return this.getToken(MySqlParser.JOIN, 0);
	};

	RESUME() {
	    return this.getToken(MySqlParser.RESUME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterXaStartTransaction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitXaStartTransaction(this);
		}
	}


}



class XaEndTransactionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_xaEndTransaction;
    }

	XA() {
	    return this.getToken(MySqlParser.XA, 0);
	};

	END() {
	    return this.getToken(MySqlParser.END, 0);
	};

	xid() {
	    return this.getTypedRuleContext(XidContext,0);
	};

	SUSPEND() {
	    return this.getToken(MySqlParser.SUSPEND, 0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	MIGRATE() {
	    return this.getToken(MySqlParser.MIGRATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterXaEndTransaction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitXaEndTransaction(this);
		}
	}


}



class XaPrepareStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_xaPrepareStatement;
    }

	XA() {
	    return this.getToken(MySqlParser.XA, 0);
	};

	PREPARE() {
	    return this.getToken(MySqlParser.PREPARE, 0);
	};

	xid() {
	    return this.getTypedRuleContext(XidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterXaPrepareStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitXaPrepareStatement(this);
		}
	}


}



class XaCommitWorkContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_xaCommitWork;
    }

	XA() {
	    return this.getToken(MySqlParser.XA, 0);
	};

	COMMIT() {
	    return this.getToken(MySqlParser.COMMIT, 0);
	};

	xid() {
	    return this.getTypedRuleContext(XidContext,0);
	};

	ONE() {
	    return this.getToken(MySqlParser.ONE, 0);
	};

	PHASE() {
	    return this.getToken(MySqlParser.PHASE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterXaCommitWork(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitXaCommitWork(this);
		}
	}


}



class XaRollbackWorkContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_xaRollbackWork;
    }

	XA() {
	    return this.getToken(MySqlParser.XA, 0);
	};

	ROLLBACK() {
	    return this.getToken(MySqlParser.ROLLBACK, 0);
	};

	xid() {
	    return this.getTypedRuleContext(XidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterXaRollbackWork(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitXaRollbackWork(this);
		}
	}


}



class XaRecoverWorkContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_xaRecoverWork;
    }

	XA() {
	    return this.getToken(MySqlParser.XA, 0);
	};

	RECOVER() {
	    return this.getToken(MySqlParser.RECOVER, 0);
	};

	CONVERT() {
	    return this.getToken(MySqlParser.CONVERT, 0);
	};

	xid() {
	    return this.getTypedRuleContext(XidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterXaRecoverWork(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitXaRecoverWork(this);
		}
	}


}



class PrepareStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_prepareStatement;
        this.query = null; // Token
        this.variable = null; // Token
    }

	PREPARE() {
	    return this.getToken(MySqlParser.PREPARE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	LOCAL_ID() {
	    return this.getToken(MySqlParser.LOCAL_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPrepareStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPrepareStatement(this);
		}
	}


}



class ExecuteStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_executeStatement;
    }

	EXECUTE() {
	    return this.getToken(MySqlParser.EXECUTE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	USING() {
	    return this.getToken(MySqlParser.USING, 0);
	};

	userVariables() {
	    return this.getTypedRuleContext(UserVariablesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterExecuteStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitExecuteStatement(this);
		}
	}


}



class DeallocatePrepareContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_deallocatePrepare;
        this.dropFormat = null; // Token
    }

	PREPARE() {
	    return this.getToken(MySqlParser.PREPARE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	DEALLOCATE() {
	    return this.getToken(MySqlParser.DEALLOCATE, 0);
	};

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDeallocatePrepare(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDeallocatePrepare(this);
		}
	}


}



class RoutineBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_routineBody;
    }

	blockStatement() {
	    return this.getTypedRuleContext(BlockStatementContext,0);
	};

	sqlStatement() {
	    return this.getTypedRuleContext(SqlStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRoutineBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRoutineBody(this);
		}
	}


}



class BlockStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_blockStatement;
    }

	BEGIN() {
	    return this.getToken(MySqlParser.BEGIN, 0);
	};

	END() {
	    return this.getToken(MySqlParser.END, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	COLON_SYMB() {
	    return this.getToken(MySqlParser.COLON_SYMB, 0);
	};

	declareVariable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclareVariableContext);
	    } else {
	        return this.getTypedRuleContext(DeclareVariableContext,i);
	    }
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.SEMI);
	    } else {
	        return this.getToken(MySqlParser.SEMI, i);
	    }
	};


	declareCondition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclareConditionContext);
	    } else {
	        return this.getTypedRuleContext(DeclareConditionContext,i);
	    }
	};

	declareCursor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclareCursorContext);
	    } else {
	        return this.getTypedRuleContext(DeclareCursorContext,i);
	    }
	};

	declareHandler = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclareHandlerContext);
	    } else {
	        return this.getTypedRuleContext(DeclareHandlerContext,i);
	    }
	};

	procedureSqlStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureSqlStatementContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureSqlStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBlockStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBlockStatement(this);
		}
	}


}



class CaseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_caseStatement;
    }

	CASE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.CASE);
	    } else {
	        return this.getToken(MySqlParser.CASE, i);
	    }
	};


	END() {
	    return this.getToken(MySqlParser.END, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	caseAlternative = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaseAlternativeContext);
	    } else {
	        return this.getTypedRuleContext(CaseAlternativeContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(MySqlParser.ELSE, 0);
	};

	procedureSqlStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureSqlStatementContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureSqlStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCaseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCaseStatement(this);
		}
	}


}



class IfStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_ifStatement;
        this._procedureSqlStatement = null; // ProcedureSqlStatementContext
        this.thenStatements = []; // of ProcedureSqlStatementContexts
        this.elseStatements = []; // of ProcedureSqlStatementContexts
    }

	IF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.IF);
	    } else {
	        return this.getToken(MySqlParser.IF, i);
	    }
	};


	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	THEN() {
	    return this.getToken(MySqlParser.THEN, 0);
	};

	END() {
	    return this.getToken(MySqlParser.END, 0);
	};

	elifAlternative = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElifAlternativeContext);
	    } else {
	        return this.getTypedRuleContext(ElifAlternativeContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(MySqlParser.ELSE, 0);
	};

	procedureSqlStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureSqlStatementContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureSqlStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIfStatement(this);
		}
	}


}



class IterateStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_iterateStatement;
    }

	ITERATE() {
	    return this.getToken(MySqlParser.ITERATE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIterateStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIterateStatement(this);
		}
	}


}



class LeaveStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_leaveStatement;
    }

	LEAVE() {
	    return this.getToken(MySqlParser.LEAVE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLeaveStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLeaveStatement(this);
		}
	}


}



class LoopStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_loopStatement;
    }

	LOOP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LOOP);
	    } else {
	        return this.getToken(MySqlParser.LOOP, i);
	    }
	};


	END() {
	    return this.getToken(MySqlParser.END, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	COLON_SYMB() {
	    return this.getToken(MySqlParser.COLON_SYMB, 0);
	};

	procedureSqlStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureSqlStatementContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureSqlStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLoopStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLoopStatement(this);
		}
	}


}



class RepeatStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_repeatStatement;
    }

	REPEAT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.REPEAT);
	    } else {
	        return this.getToken(MySqlParser.REPEAT, i);
	    }
	};


	UNTIL() {
	    return this.getToken(MySqlParser.UNTIL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	END() {
	    return this.getToken(MySqlParser.END, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	COLON_SYMB() {
	    return this.getToken(MySqlParser.COLON_SYMB, 0);
	};

	procedureSqlStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureSqlStatementContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureSqlStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRepeatStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRepeatStatement(this);
		}
	}


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_returnStatement;
    }

	RETURN() {
	    return this.getToken(MySqlParser.RETURN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitReturnStatement(this);
		}
	}


}



class WhileStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_whileStatement;
    }

	WHILE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.WHILE);
	    } else {
	        return this.getToken(MySqlParser.WHILE, i);
	    }
	};


	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	DO() {
	    return this.getToken(MySqlParser.DO, 0);
	};

	END() {
	    return this.getToken(MySqlParser.END, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	COLON_SYMB() {
	    return this.getToken(MySqlParser.COLON_SYMB, 0);
	};

	procedureSqlStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureSqlStatementContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureSqlStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterWhileStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitWhileStatement(this);
		}
	}


}



class CursorStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_cursorStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CloseCursorContext extends CursorStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CLOSE() {
	    return this.getToken(MySqlParser.CLOSE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCloseCursor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCloseCursor(this);
		}
	}


}

MySqlParser.CloseCursorContext = CloseCursorContext;

class OpenCursorContext extends CursorStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OPEN() {
	    return this.getToken(MySqlParser.OPEN, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterOpenCursor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitOpenCursor(this);
		}
	}


}

MySqlParser.OpenCursorContext = OpenCursorContext;

class FetchCursorContext extends CursorStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FETCH() {
	    return this.getToken(MySqlParser.FETCH, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	NEXT() {
	    return this.getToken(MySqlParser.NEXT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFetchCursor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFetchCursor(this);
		}
	}


}

MySqlParser.FetchCursorContext = FetchCursorContext;

class DeclareVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_declareVariable;
    }

	DECLARE() {
	    return this.getToken(MySqlParser.DECLARE, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDeclareVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDeclareVariable(this);
		}
	}


}



class DeclareConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_declareCondition;
    }

	DECLARE() {
	    return this.getToken(MySqlParser.DECLARE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	CONDITION() {
	    return this.getToken(MySqlParser.CONDITION, 0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	SQLSTATE() {
	    return this.getToken(MySqlParser.SQLSTATE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	VALUE() {
	    return this.getToken(MySqlParser.VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDeclareCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDeclareCondition(this);
		}
	}


}



class DeclareCursorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_declareCursor;
    }

	DECLARE() {
	    return this.getToken(MySqlParser.DECLARE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	CURSOR() {
	    return this.getToken(MySqlParser.CURSOR, 0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDeclareCursor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDeclareCursor(this);
		}
	}


}



class DeclareHandlerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_declareHandler;
        this.handlerAction = null; // Token
    }

	DECLARE() {
	    return this.getToken(MySqlParser.DECLARE, 0);
	};

	HANDLER() {
	    return this.getToken(MySqlParser.HANDLER, 0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	handlerConditionValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(HandlerConditionValueContext);
	    } else {
	        return this.getTypedRuleContext(HandlerConditionValueContext,i);
	    }
	};

	routineBody() {
	    return this.getTypedRuleContext(RoutineBodyContext,0);
	};

	CONTINUE() {
	    return this.getToken(MySqlParser.CONTINUE, 0);
	};

	EXIT() {
	    return this.getToken(MySqlParser.EXIT, 0);
	};

	UNDO() {
	    return this.getToken(MySqlParser.UNDO, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDeclareHandler(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDeclareHandler(this);
		}
	}


}



class HandlerConditionValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_handlerConditionValue;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class HandlerConditionWarningContext extends HandlerConditionValueContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SQLWARNING() {
	    return this.getToken(MySqlParser.SQLWARNING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHandlerConditionWarning(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHandlerConditionWarning(this);
		}
	}


}

MySqlParser.HandlerConditionWarningContext = HandlerConditionWarningContext;

class HandlerConditionCodeContext extends HandlerConditionValueContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHandlerConditionCode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHandlerConditionCode(this);
		}
	}


}

MySqlParser.HandlerConditionCodeContext = HandlerConditionCodeContext;

class HandlerConditionNotfoundContext extends HandlerConditionValueContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	FOUND() {
	    return this.getToken(MySqlParser.FOUND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHandlerConditionNotfound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHandlerConditionNotfound(this);
		}
	}


}

MySqlParser.HandlerConditionNotfoundContext = HandlerConditionNotfoundContext;

class HandlerConditionStateContext extends HandlerConditionValueContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SQLSTATE() {
	    return this.getToken(MySqlParser.SQLSTATE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	VALUE() {
	    return this.getToken(MySqlParser.VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHandlerConditionState(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHandlerConditionState(this);
		}
	}


}

MySqlParser.HandlerConditionStateContext = HandlerConditionStateContext;

class HandlerConditionExceptionContext extends HandlerConditionValueContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SQLEXCEPTION() {
	    return this.getToken(MySqlParser.SQLEXCEPTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHandlerConditionException(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHandlerConditionException(this);
		}
	}


}

MySqlParser.HandlerConditionExceptionContext = HandlerConditionExceptionContext;

class HandlerConditionNameContext extends HandlerConditionValueContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHandlerConditionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHandlerConditionName(this);
		}
	}


}

MySqlParser.HandlerConditionNameContext = HandlerConditionNameContext;

class ProcedureSqlStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_procedureSqlStatement;
    }

	SEMI() {
	    return this.getToken(MySqlParser.SEMI, 0);
	};

	compoundStatement() {
	    return this.getTypedRuleContext(CompoundStatementContext,0);
	};

	sqlStatement() {
	    return this.getTypedRuleContext(SqlStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterProcedureSqlStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitProcedureSqlStatement(this);
		}
	}


}



class CaseAlternativeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_caseAlternative;
    }

	WHEN() {
	    return this.getToken(MySqlParser.WHEN, 0);
	};

	THEN() {
	    return this.getToken(MySqlParser.THEN, 0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	procedureSqlStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureSqlStatementContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureSqlStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCaseAlternative(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCaseAlternative(this);
		}
	}


}



class ElifAlternativeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_elifAlternative;
    }

	ELSEIF() {
	    return this.getToken(MySqlParser.ELSEIF, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	THEN() {
	    return this.getToken(MySqlParser.THEN, 0);
	};

	procedureSqlStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureSqlStatementContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureSqlStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterElifAlternative(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitElifAlternative(this);
		}
	}


}



class AlterUserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterUser;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AlterUserMysqlV56Context extends AlterUserContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	userSpecification = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserSpecificationContext);
	    } else {
	        return this.getTypedRuleContext(UserSpecificationContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterUserMysqlV56(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterUserMysqlV56(this);
		}
	}


}

MySqlParser.AlterUserMysqlV56Context = AlterUserMysqlV56Context;

class AlterUserMysqlV57Context extends AlterUserContext {

    constructor(parser, ctx) {
        super(parser);
        this.tlsNone = null; // Token;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	userAuthOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserAuthOptionContext);
	    } else {
	        return this.getTypedRuleContext(UserAuthOptionContext,i);
	    }
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	REQUIRE() {
	    return this.getToken(MySqlParser.REQUIRE, 0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	userPasswordOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserPasswordOptionContext);
	    } else {
	        return this.getTypedRuleContext(UserPasswordOptionContext,i);
	    }
	};

	userLockOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserLockOptionContext);
	    } else {
	        return this.getTypedRuleContext(UserLockOptionContext,i);
	    }
	};

	tlsOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TlsOptionContext);
	    } else {
	        return this.getTypedRuleContext(TlsOptionContext,i);
	    }
	};

	NONE() {
	    return this.getToken(MySqlParser.NONE, 0);
	};

	userResourceOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserResourceOptionContext);
	    } else {
	        return this.getTypedRuleContext(UserResourceOptionContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.AND);
	    } else {
	        return this.getToken(MySqlParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterUserMysqlV57(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterUserMysqlV57(this);
		}
	}


}

MySqlParser.AlterUserMysqlV57Context = AlterUserMysqlV57Context;

class CreateUserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createUser;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CreateUserMysqlV57Context extends CreateUserContext {

    constructor(parser, ctx) {
        super(parser);
        this.tlsNone = null; // Token;
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	userAuthOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserAuthOptionContext);
	    } else {
	        return this.getTypedRuleContext(UserAuthOptionContext,i);
	    }
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	REQUIRE() {
	    return this.getToken(MySqlParser.REQUIRE, 0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	userPasswordOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserPasswordOptionContext);
	    } else {
	        return this.getTypedRuleContext(UserPasswordOptionContext,i);
	    }
	};

	userLockOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserLockOptionContext);
	    } else {
	        return this.getTypedRuleContext(UserLockOptionContext,i);
	    }
	};

	tlsOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TlsOptionContext);
	    } else {
	        return this.getTypedRuleContext(TlsOptionContext,i);
	    }
	};

	NONE() {
	    return this.getToken(MySqlParser.NONE, 0);
	};

	userResourceOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserResourceOptionContext);
	    } else {
	        return this.getTypedRuleContext(UserResourceOptionContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.AND);
	    } else {
	        return this.getToken(MySqlParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateUserMysqlV57(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateUserMysqlV57(this);
		}
	}


}

MySqlParser.CreateUserMysqlV57Context = CreateUserMysqlV57Context;

class CreateUserMysqlV56Context extends CreateUserContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	userAuthOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserAuthOptionContext);
	    } else {
	        return this.getTypedRuleContext(UserAuthOptionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateUserMysqlV56(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateUserMysqlV56(this);
		}
	}


}

MySqlParser.CreateUserMysqlV56Context = CreateUserMysqlV56Context;

class DropUserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropUser;
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	userName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserNameContext);
	    } else {
	        return this.getTypedRuleContext(UserNameContext,i);
	    }
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropUser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropUser(this);
		}
	}


}



class GrantStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_grantStatement;
        this.privilegeObject = null; // Token
        this.tlsNone = null; // Token
    }

	GRANT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.GRANT);
	    } else {
	        return this.getToken(MySqlParser.GRANT, i);
	    }
	};


	privelegeClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrivelegeClauseContext);
	    } else {
	        return this.getTypedRuleContext(PrivelegeClauseContext,i);
	    }
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	privilegeLevel() {
	    return this.getTypedRuleContext(PrivilegeLevelContext,0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	userAuthOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserAuthOptionContext);
	    } else {
	        return this.getTypedRuleContext(UserAuthOptionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	REQUIRE() {
	    return this.getToken(MySqlParser.REQUIRE, 0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	PROCEDURE() {
	    return this.getToken(MySqlParser.PROCEDURE, 0);
	};

	tlsOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TlsOptionContext);
	    } else {
	        return this.getTypedRuleContext(TlsOptionContext,i);
	    }
	};

	NONE() {
	    return this.getToken(MySqlParser.NONE, 0);
	};

	OPTION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.OPTION);
	    } else {
	        return this.getToken(MySqlParser.OPTION, i);
	    }
	};


	userResourceOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserResourceOptionContext);
	    } else {
	        return this.getTypedRuleContext(UserResourceOptionContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.AND);
	    } else {
	        return this.getToken(MySqlParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGrantStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGrantStatement(this);
		}
	}


}



class GrantProxyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_grantProxy;
        this.fromFirst = null; // UserNameContext
        this.toFirst = null; // UserNameContext
        this._userName = null; // UserNameContext
        this.toOther = []; // of UserNameContexts
    }

	GRANT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.GRANT);
	    } else {
	        return this.getToken(MySqlParser.GRANT, i);
	    }
	};


	PROXY() {
	    return this.getToken(MySqlParser.PROXY, 0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	userName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserNameContext);
	    } else {
	        return this.getTypedRuleContext(UserNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	OPTION() {
	    return this.getToken(MySqlParser.OPTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGrantProxy(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGrantProxy(this);
		}
	}


}



class RenameUserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_renameUser;
    }

	RENAME() {
	    return this.getToken(MySqlParser.RENAME, 0);
	};

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	renameUserClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RenameUserClauseContext);
	    } else {
	        return this.getTypedRuleContext(RenameUserClauseContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRenameUser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRenameUser(this);
		}
	}


}



class RevokeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_revokeStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DetailRevokeContext extends RevokeStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.privilegeObject = null; // Token;
        super.copyFrom(ctx);
    }

	REVOKE() {
	    return this.getToken(MySqlParser.REVOKE, 0);
	};

	privelegeClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrivelegeClauseContext);
	    } else {
	        return this.getTypedRuleContext(PrivelegeClauseContext,i);
	    }
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	privilegeLevel() {
	    return this.getTypedRuleContext(PrivilegeLevelContext,0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	userName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserNameContext);
	    } else {
	        return this.getTypedRuleContext(UserNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	PROCEDURE() {
	    return this.getToken(MySqlParser.PROCEDURE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDetailRevoke(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDetailRevoke(this);
		}
	}


}

MySqlParser.DetailRevokeContext = DetailRevokeContext;

class ShortRevokeContext extends RevokeStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REVOKE() {
	    return this.getToken(MySqlParser.REVOKE, 0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	GRANT() {
	    return this.getToken(MySqlParser.GRANT, 0);
	};

	OPTION() {
	    return this.getToken(MySqlParser.OPTION, 0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	userName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserNameContext);
	    } else {
	        return this.getTypedRuleContext(UserNameContext,i);
	    }
	};

	PRIVILEGES() {
	    return this.getToken(MySqlParser.PRIVILEGES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShortRevoke(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShortRevoke(this);
		}
	}


}

MySqlParser.ShortRevokeContext = ShortRevokeContext;

class RevokeProxyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_revokeProxy;
        this.onUser = null; // UserNameContext
        this.fromFirst = null; // UserNameContext
        this._userName = null; // UserNameContext
        this.fromOther = []; // of UserNameContexts
    }

	REVOKE() {
	    return this.getToken(MySqlParser.REVOKE, 0);
	};

	PROXY() {
	    return this.getToken(MySqlParser.PROXY, 0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	userName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserNameContext);
	    } else {
	        return this.getTypedRuleContext(UserNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRevokeProxy(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRevokeProxy(this);
		}
	}


}



class SetPasswordStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_setPasswordStatement;
    }

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	PASSWORD() {
	    return this.getToken(MySqlParser.PASSWORD, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	passwordFunctionClause() {
	    return this.getTypedRuleContext(PasswordFunctionClauseContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	userName() {
	    return this.getTypedRuleContext(UserNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetPasswordStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetPasswordStatement(this);
		}
	}


}



class UserSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_userSpecification;
    }

	userName() {
	    return this.getTypedRuleContext(UserNameContext,0);
	};

	userPasswordOption() {
	    return this.getTypedRuleContext(UserPasswordOptionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUserSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUserSpecification(this);
		}
	}


}



class UserAuthOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_userAuthOption;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SimpleAuthOptionContext extends UserAuthOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	userName() {
	    return this.getTypedRuleContext(UserNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSimpleAuthOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSimpleAuthOption(this);
		}
	}


}

MySqlParser.SimpleAuthOptionContext = SimpleAuthOptionContext;

class PasswordAuthOptionContext extends UserAuthOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.hashed = null; // Token;
        super.copyFrom(ctx);
    }

	userName() {
	    return this.getTypedRuleContext(UserNameContext,0);
	};

	IDENTIFIED() {
	    return this.getToken(MySqlParser.IDENTIFIED, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	PASSWORD() {
	    return this.getToken(MySqlParser.PASSWORD, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPasswordAuthOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPasswordAuthOption(this);
		}
	}


}

MySqlParser.PasswordAuthOptionContext = PasswordAuthOptionContext;

class StringAuthOptionContext extends UserAuthOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	userName() {
	    return this.getTypedRuleContext(UserNameContext,0);
	};

	IDENTIFIED() {
	    return this.getToken(MySqlParser.IDENTIFIED, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	authPlugin() {
	    return this.getTypedRuleContext(AuthPluginContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStringAuthOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStringAuthOption(this);
		}
	}


}

MySqlParser.StringAuthOptionContext = StringAuthOptionContext;

class HashAuthOptionContext extends UserAuthOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	userName() {
	    return this.getTypedRuleContext(UserNameContext,0);
	};

	IDENTIFIED() {
	    return this.getToken(MySqlParser.IDENTIFIED, 0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	authPlugin() {
	    return this.getTypedRuleContext(AuthPluginContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHashAuthOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHashAuthOption(this);
		}
	}


}

MySqlParser.HashAuthOptionContext = HashAuthOptionContext;

class TlsOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tlsOption;
    }

	SSL() {
	    return this.getToken(MySqlParser.SSL, 0);
	};

	X509() {
	    return this.getToken(MySqlParser.X509, 0);
	};

	CIPHER() {
	    return this.getToken(MySqlParser.CIPHER, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	ISSUER() {
	    return this.getToken(MySqlParser.ISSUER, 0);
	};

	SUBJECT() {
	    return this.getToken(MySqlParser.SUBJECT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTlsOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTlsOption(this);
		}
	}


}



class UserResourceOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_userResourceOption;
    }

	MAX_QUERIES_PER_HOUR() {
	    return this.getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	MAX_UPDATES_PER_HOUR() {
	    return this.getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0);
	};

	MAX_CONNECTIONS_PER_HOUR() {
	    return this.getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0);
	};

	MAX_USER_CONNECTIONS() {
	    return this.getToken(MySqlParser.MAX_USER_CONNECTIONS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUserResourceOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUserResourceOption(this);
		}
	}


}



class UserPasswordOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_userPasswordOption;
        this.expireType = null; // Token
    }

	PASSWORD() {
	    return this.getToken(MySqlParser.PASSWORD, 0);
	};

	EXPIRE() {
	    return this.getToken(MySqlParser.EXPIRE, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	DAY() {
	    return this.getToken(MySqlParser.DAY, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	NEVER() {
	    return this.getToken(MySqlParser.NEVER, 0);
	};

	INTERVAL() {
	    return this.getToken(MySqlParser.INTERVAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUserPasswordOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUserPasswordOption(this);
		}
	}


}



class UserLockOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_userLockOption;
        this.lockType = null; // Token
    }

	ACCOUNT() {
	    return this.getToken(MySqlParser.ACCOUNT, 0);
	};

	LOCK() {
	    return this.getToken(MySqlParser.LOCK, 0);
	};

	UNLOCK() {
	    return this.getToken(MySqlParser.UNLOCK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUserLockOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUserLockOption(this);
		}
	}


}



class PrivelegeClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_privelegeClause;
    }

	privilege() {
	    return this.getTypedRuleContext(PrivilegeContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPrivelegeClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPrivelegeClause(this);
		}
	}


}



class PrivilegeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_privilege;
    }

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	PRIVILEGES() {
	    return this.getToken(MySqlParser.PRIVILEGES, 0);
	};

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	ROUTINE() {
	    return this.getToken(MySqlParser.ROUTINE, 0);
	};

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	TEMPORARY() {
	    return this.getToken(MySqlParser.TEMPORARY, 0);
	};

	TABLES() {
	    return this.getToken(MySqlParser.TABLES, 0);
	};

	VIEW() {
	    return this.getToken(MySqlParser.VIEW, 0);
	};

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	ROLE() {
	    return this.getToken(MySqlParser.ROLE, 0);
	};

	DELETE() {
	    return this.getToken(MySqlParser.DELETE, 0);
	};

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	EVENT() {
	    return this.getToken(MySqlParser.EVENT, 0);
	};

	EXECUTE() {
	    return this.getToken(MySqlParser.EXECUTE, 0);
	};

	FILE() {
	    return this.getToken(MySqlParser.FILE, 0);
	};

	GRANT() {
	    return this.getToken(MySqlParser.GRANT, 0);
	};

	OPTION() {
	    return this.getToken(MySqlParser.OPTION, 0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	INSERT() {
	    return this.getToken(MySqlParser.INSERT, 0);
	};

	LOCK() {
	    return this.getToken(MySqlParser.LOCK, 0);
	};

	PROCESS() {
	    return this.getToken(MySqlParser.PROCESS, 0);
	};

	PROXY() {
	    return this.getToken(MySqlParser.PROXY, 0);
	};

	REFERENCES() {
	    return this.getToken(MySqlParser.REFERENCES, 0);
	};

	RELOAD() {
	    return this.getToken(MySqlParser.RELOAD, 0);
	};

	REPLICATION() {
	    return this.getToken(MySqlParser.REPLICATION, 0);
	};

	CLIENT() {
	    return this.getToken(MySqlParser.CLIENT, 0);
	};

	SLAVE() {
	    return this.getToken(MySqlParser.SLAVE, 0);
	};

	SELECT() {
	    return this.getToken(MySqlParser.SELECT, 0);
	};

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	DATABASES() {
	    return this.getToken(MySqlParser.DATABASES, 0);
	};

	SHUTDOWN() {
	    return this.getToken(MySqlParser.SHUTDOWN, 0);
	};

	SUPER() {
	    return this.getToken(MySqlParser.SUPER, 0);
	};

	TRIGGER() {
	    return this.getToken(MySqlParser.TRIGGER, 0);
	};

	UPDATE() {
	    return this.getToken(MySqlParser.UPDATE, 0);
	};

	USAGE() {
	    return this.getToken(MySqlParser.USAGE, 0);
	};

	AUDIT_ADMIN() {
	    return this.getToken(MySqlParser.AUDIT_ADMIN, 0);
	};

	BACKUP_ADMIN() {
	    return this.getToken(MySqlParser.BACKUP_ADMIN, 0);
	};

	BINLOG_ADMIN() {
	    return this.getToken(MySqlParser.BINLOG_ADMIN, 0);
	};

	BINLOG_ENCRYPTION_ADMIN() {
	    return this.getToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0);
	};

	CLONE_ADMIN() {
	    return this.getToken(MySqlParser.CLONE_ADMIN, 0);
	};

	CONNECTION_ADMIN() {
	    return this.getToken(MySqlParser.CONNECTION_ADMIN, 0);
	};

	ENCRYPTION_KEY_ADMIN() {
	    return this.getToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0);
	};

	FIREWALL_ADMIN() {
	    return this.getToken(MySqlParser.FIREWALL_ADMIN, 0);
	};

	FIREWALL_USER() {
	    return this.getToken(MySqlParser.FIREWALL_USER, 0);
	};

	GROUP_REPLICATION_ADMIN() {
	    return this.getToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0);
	};

	INNODB_REDO_LOG_ARCHIVE() {
	    return this.getToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0);
	};

	NDB_STORED_USER() {
	    return this.getToken(MySqlParser.NDB_STORED_USER, 0);
	};

	PERSIST_RO_VARIABLES_ADMIN() {
	    return this.getToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0);
	};

	REPLICATION_APPLIER() {
	    return this.getToken(MySqlParser.REPLICATION_APPLIER, 0);
	};

	REPLICATION_SLAVE_ADMIN() {
	    return this.getToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0);
	};

	RESOURCE_GROUP_ADMIN() {
	    return this.getToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0);
	};

	RESOURCE_GROUP_USER() {
	    return this.getToken(MySqlParser.RESOURCE_GROUP_USER, 0);
	};

	ROLE_ADMIN() {
	    return this.getToken(MySqlParser.ROLE_ADMIN, 0);
	};

	SESSION_VARIABLES_ADMIN() {
	    return this.getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0);
	};

	SET_USER_ID() {
	    return this.getToken(MySqlParser.SET_USER_ID, 0);
	};

	SHOW_ROUTINE() {
	    return this.getToken(MySqlParser.SHOW_ROUTINE, 0);
	};

	SYSTEM_VARIABLES_ADMIN() {
	    return this.getToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0);
	};

	TABLE_ENCRYPTION_ADMIN() {
	    return this.getToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0);
	};

	VERSION_TOKEN_ADMIN() {
	    return this.getToken(MySqlParser.VERSION_TOKEN_ADMIN, 0);
	};

	XA_RECOVER_ADMIN() {
	    return this.getToken(MySqlParser.XA_RECOVER_ADMIN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPrivilege(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPrivilege(this);
		}
	}


}



class PrivilegeLevelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_privilegeLevel;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DefiniteSchemaPrivLevelContext extends PrivilegeLevelContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	DOT() {
	    return this.getToken(MySqlParser.DOT, 0);
	};

	STAR() {
	    return this.getToken(MySqlParser.STAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDefiniteSchemaPrivLevel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDefiniteSchemaPrivLevel(this);
		}
	}


}

MySqlParser.DefiniteSchemaPrivLevelContext = DefiniteSchemaPrivLevelContext;

class DefiniteFullTablePrivLevel2Context extends PrivilegeLevelContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	dottedId() {
	    return this.getTypedRuleContext(DottedIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDefiniteFullTablePrivLevel2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDefiniteFullTablePrivLevel2(this);
		}
	}


}

MySqlParser.DefiniteFullTablePrivLevel2Context = DefiniteFullTablePrivLevel2Context;

class DefiniteFullTablePrivLevelContext extends PrivilegeLevelContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	DOT() {
	    return this.getToken(MySqlParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDefiniteFullTablePrivLevel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDefiniteFullTablePrivLevel(this);
		}
	}


}

MySqlParser.DefiniteFullTablePrivLevelContext = DefiniteFullTablePrivLevelContext;

class GlobalPrivLevelContext extends PrivilegeLevelContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.STAR);
	    } else {
	        return this.getToken(MySqlParser.STAR, i);
	    }
	};


	DOT() {
	    return this.getToken(MySqlParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGlobalPrivLevel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGlobalPrivLevel(this);
		}
	}


}

MySqlParser.GlobalPrivLevelContext = GlobalPrivLevelContext;

class DefiniteTablePrivLevelContext extends PrivilegeLevelContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDefiniteTablePrivLevel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDefiniteTablePrivLevel(this);
		}
	}


}

MySqlParser.DefiniteTablePrivLevelContext = DefiniteTablePrivLevelContext;

class CurrentSchemaPriviLevelContext extends PrivilegeLevelContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	STAR() {
	    return this.getToken(MySqlParser.STAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCurrentSchemaPriviLevel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCurrentSchemaPriviLevel(this);
		}
	}


}

MySqlParser.CurrentSchemaPriviLevelContext = CurrentSchemaPriviLevelContext;

class RenameUserClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_renameUserClause;
        this.fromFirst = null; // UserNameContext
        this.toFirst = null; // UserNameContext
    }

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	userName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserNameContext);
	    } else {
	        return this.getTypedRuleContext(UserNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRenameUserClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRenameUserClause(this);
		}
	}


}



class AnalyzeTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_analyzeTable;
        this.actionOption = null; // Token
    }

	ANALYZE() {
	    return this.getToken(MySqlParser.ANALYZE, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tables() {
	    return this.getTypedRuleContext(TablesContext,0);
	};

	NO_WRITE_TO_BINLOG() {
	    return this.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0);
	};

	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAnalyzeTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAnalyzeTable(this);
		}
	}


}



class CheckTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_checkTable;
    }

	CHECK() {
	    return this.getToken(MySqlParser.CHECK, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tables() {
	    return this.getTypedRuleContext(TablesContext,0);
	};

	checkTableOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CheckTableOptionContext);
	    } else {
	        return this.getTypedRuleContext(CheckTableOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCheckTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCheckTable(this);
		}
	}


}



class ChecksumTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_checksumTable;
        this.actionOption = null; // Token
    }

	CHECKSUM() {
	    return this.getToken(MySqlParser.CHECKSUM, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tables() {
	    return this.getTypedRuleContext(TablesContext,0);
	};

	QUICK() {
	    return this.getToken(MySqlParser.QUICK, 0);
	};

	EXTENDED() {
	    return this.getToken(MySqlParser.EXTENDED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterChecksumTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitChecksumTable(this);
		}
	}


}



class OptimizeTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_optimizeTable;
        this.actionOption = null; // Token
    }

	OPTIMIZE() {
	    return this.getToken(MySqlParser.OPTIMIZE, 0);
	};

	tables() {
	    return this.getTypedRuleContext(TablesContext,0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	TABLES() {
	    return this.getToken(MySqlParser.TABLES, 0);
	};

	NO_WRITE_TO_BINLOG() {
	    return this.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0);
	};

	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterOptimizeTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitOptimizeTable(this);
		}
	}


}



class RepairTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_repairTable;
        this.actionOption = null; // Token
    }

	REPAIR() {
	    return this.getToken(MySqlParser.REPAIR, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tables() {
	    return this.getTypedRuleContext(TablesContext,0);
	};

	QUICK() {
	    return this.getToken(MySqlParser.QUICK, 0);
	};

	EXTENDED() {
	    return this.getToken(MySqlParser.EXTENDED, 0);
	};

	USE_FRM() {
	    return this.getToken(MySqlParser.USE_FRM, 0);
	};

	NO_WRITE_TO_BINLOG() {
	    return this.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0);
	};

	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRepairTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRepairTable(this);
		}
	}


}



class CheckTableOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_checkTableOption;
    }

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	UPGRADE() {
	    return this.getToken(MySqlParser.UPGRADE, 0);
	};

	QUICK() {
	    return this.getToken(MySqlParser.QUICK, 0);
	};

	FAST() {
	    return this.getToken(MySqlParser.FAST, 0);
	};

	MEDIUM() {
	    return this.getToken(MySqlParser.MEDIUM, 0);
	};

	EXTENDED() {
	    return this.getToken(MySqlParser.EXTENDED, 0);
	};

	CHANGED() {
	    return this.getToken(MySqlParser.CHANGED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCheckTableOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCheckTableOption(this);
		}
	}


}



class CreateUdfunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createUdfunction;
        this.returnType = null; // Token
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	RETURNS() {
	    return this.getToken(MySqlParser.RETURNS, 0);
	};

	SONAME() {
	    return this.getToken(MySqlParser.SONAME, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	STRING() {
	    return this.getToken(MySqlParser.STRING, 0);
	};

	INTEGER() {
	    return this.getToken(MySqlParser.INTEGER, 0);
	};

	REAL() {
	    return this.getToken(MySqlParser.REAL, 0);
	};

	DECIMAL() {
	    return this.getToken(MySqlParser.DECIMAL, 0);
	};

	AGGREGATE() {
	    return this.getToken(MySqlParser.AGGREGATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateUdfunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateUdfunction(this);
		}
	}


}



class InstallPluginContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_installPlugin;
    }

	INSTALL() {
	    return this.getToken(MySqlParser.INSTALL, 0);
	};

	PLUGIN() {
	    return this.getToken(MySqlParser.PLUGIN, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	SONAME() {
	    return this.getToken(MySqlParser.SONAME, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInstallPlugin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInstallPlugin(this);
		}
	}


}



class UninstallPluginContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_uninstallPlugin;
    }

	UNINSTALL() {
	    return this.getToken(MySqlParser.UNINSTALL, 0);
	};

	PLUGIN() {
	    return this.getToken(MySqlParser.PLUGIN, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUninstallPlugin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUninstallPlugin(this);
		}
	}


}



class SetStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_setStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SetTransactionContext extends SetStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	setTransactionStatement() {
	    return this.getTypedRuleContext(SetTransactionStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetTransaction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetTransaction(this);
		}
	}


}

MySqlParser.SetTransactionContext = SetTransactionContext;

class SetCharsetContext extends SetStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.SET);
	    } else {
	        return this.getToken(MySqlParser.SET, i);
	    }
	};


	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	CHARSET() {
	    return this.getToken(MySqlParser.CHARSET, 0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetCharset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetCharset(this);
		}
	}


}

MySqlParser.SetCharsetContext = SetCharsetContext;

class SetNamesContext extends SetStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	NAMES() {
	    return this.getToken(MySqlParser.NAMES, 0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	COLLATE() {
	    return this.getToken(MySqlParser.COLLATE, 0);
	};

	collationName() {
	    return this.getTypedRuleContext(CollationNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetNames(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetNames(this);
		}
	}


}

MySqlParser.SetNamesContext = SetNamesContext;

class SetPasswordContext extends SetStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	setPasswordStatement() {
	    return this.getTypedRuleContext(SetPasswordStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetPassword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetPassword(this);
		}
	}


}

MySqlParser.SetPasswordContext = SetPasswordContext;

class SetAutocommitContext extends SetStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	setAutocommitStatement() {
	    return this.getTypedRuleContext(SetAutocommitStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetAutocommit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetAutocommit(this);
		}
	}


}

MySqlParser.SetAutocommitContext = SetAutocommitContext;

class SetNewValueInsideTriggerContext extends SetStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	fullId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FullIdContext);
	    } else {
	        return this.getTypedRuleContext(FullIdContext,i);
	    }
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	VAR_ASSIGN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.VAR_ASSIGN);
	    } else {
	        return this.getToken(MySqlParser.VAR_ASSIGN, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetNewValueInsideTrigger(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetNewValueInsideTrigger(this);
		}
	}


}

MySqlParser.SetNewValueInsideTriggerContext = SetNewValueInsideTriggerContext;

class SetVariableContext extends SetStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	variableClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableClauseContext);
	    } else {
	        return this.getTypedRuleContext(VariableClauseContext,i);
	    }
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	VAR_ASSIGN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.VAR_ASSIGN);
	    } else {
	        return this.getToken(MySqlParser.VAR_ASSIGN, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetVariable(this);
		}
	}


}

MySqlParser.SetVariableContext = SetVariableContext;

class ShowStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_showStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ShowOpenTablesContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.schemaFormat = null; // Token;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	OPEN() {
	    return this.getToken(MySqlParser.OPEN, 0);
	};

	TABLES() {
	    return this.getToken(MySqlParser.TABLES, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	showFilter() {
	    return this.getTypedRuleContext(ShowFilterContext,0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowOpenTables(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowOpenTables(this);
		}
	}


}

MySqlParser.ShowOpenTablesContext = ShowOpenTablesContext;

class ShowGlobalInfoContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	showGlobalInfoClause() {
	    return this.getTypedRuleContext(ShowGlobalInfoClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowGlobalInfo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowGlobalInfo(this);
		}
	}


}

MySqlParser.ShowGlobalInfoContext = ShowGlobalInfoContext;

class ShowCreateFullIdObjectContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.namedEntity = null; // Token;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	EVENT() {
	    return this.getToken(MySqlParser.EVENT, 0);
	};

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	PROCEDURE() {
	    return this.getToken(MySqlParser.PROCEDURE, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	TRIGGER() {
	    return this.getToken(MySqlParser.TRIGGER, 0);
	};

	VIEW() {
	    return this.getToken(MySqlParser.VIEW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowCreateFullIdObject(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowCreateFullIdObject(this);
		}
	}


}

MySqlParser.ShowCreateFullIdObjectContext = ShowCreateFullIdObjectContext;

class ShowCreateUserContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	userName() {
	    return this.getTypedRuleContext(UserNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowCreateUser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowCreateUser(this);
		}
	}


}

MySqlParser.ShowCreateUserContext = ShowCreateUserContext;

class ShowErrorsContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.errorFormat = null; // Token;
        this.offset = null; // DecimalLiteralContext;
        this.rowCount = null; // DecimalLiteralContext;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	ERRORS() {
	    return this.getToken(MySqlParser.ERRORS, 0);
	};

	WARNINGS() {
	    return this.getToken(MySqlParser.WARNINGS, 0);
	};

	LIMIT() {
	    return this.getToken(MySqlParser.LIMIT, 0);
	};

	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowErrors(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowErrors(this);
		}
	}


}

MySqlParser.ShowErrorsContext = ShowErrorsContext;

class ShowCountErrorsContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.errorFormat = null; // Token;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	COUNT() {
	    return this.getToken(MySqlParser.COUNT, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	STAR() {
	    return this.getToken(MySqlParser.STAR, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	ERRORS() {
	    return this.getToken(MySqlParser.ERRORS, 0);
	};

	WARNINGS() {
	    return this.getToken(MySqlParser.WARNINGS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowCountErrors(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowCountErrors(this);
		}
	}


}

MySqlParser.ShowCountErrorsContext = ShowCountErrorsContext;

class ShowObjectFilterContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	showCommonEntity() {
	    return this.getTypedRuleContext(ShowCommonEntityContext,0);
	};

	showFilter() {
	    return this.getTypedRuleContext(ShowFilterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowObjectFilter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowObjectFilter(this);
		}
	}


}

MySqlParser.ShowObjectFilterContext = ShowObjectFilterContext;

class ShowCreateDbContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.schemaFormat = null; // Token;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	DATABASE() {
	    return this.getToken(MySqlParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(MySqlParser.SCHEMA, 0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowCreateDb(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowCreateDb(this);
		}
	}


}

MySqlParser.ShowCreateDbContext = ShowCreateDbContext;

class ShowEngineContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.engineOption = null; // Token;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	engineName() {
	    return this.getTypedRuleContext(EngineNameContext,0);
	};

	STATUS() {
	    return this.getToken(MySqlParser.STATUS, 0);
	};

	MUTEX() {
	    return this.getToken(MySqlParser.MUTEX, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowEngine(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowEngine(this);
		}
	}


}

MySqlParser.ShowEngineContext = ShowEngineContext;

class ShowSchemaFilterContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.schemaFormat = null; // Token;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	showSchemaEntity() {
	    return this.getTypedRuleContext(ShowSchemaEntityContext,0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	showFilter() {
	    return this.getTypedRuleContext(ShowFilterContext,0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowSchemaFilter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowSchemaFilter(this);
		}
	}


}

MySqlParser.ShowSchemaFilterContext = ShowSchemaFilterContext;

class ShowIndexesContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.indexFormat = null; // Token;
        this.tableFormat = null; // Token;
        this.schemaFormat = null; // Token;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	INDEXES() {
	    return this.getToken(MySqlParser.INDEXES, 0);
	};

	KEYS() {
	    return this.getToken(MySqlParser.KEYS, 0);
	};

	FROM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.FROM);
	    } else {
	        return this.getToken(MySqlParser.FROM, i);
	    }
	};


	IN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.IN);
	    } else {
	        return this.getToken(MySqlParser.IN, i);
	    }
	};


	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	WHERE() {
	    return this.getToken(MySqlParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowIndexes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowIndexes(this);
		}
	}


}

MySqlParser.ShowIndexesContext = ShowIndexesContext;

class ShowLogEventsContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.logFormat = null; // Token;
        this.filename = null; // Token;
        this.fromPosition = null; // DecimalLiteralContext;
        this.offset = null; // DecimalLiteralContext;
        this.rowCount = null; // DecimalLiteralContext;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	EVENTS() {
	    return this.getToken(MySqlParser.EVENTS, 0);
	};

	BINLOG() {
	    return this.getToken(MySqlParser.BINLOG, 0);
	};

	RELAYLOG() {
	    return this.getToken(MySqlParser.RELAYLOG, 0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	LIMIT() {
	    return this.getToken(MySqlParser.LIMIT, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowLogEvents(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowLogEvents(this);
		}
	}


}

MySqlParser.ShowLogEventsContext = ShowLogEventsContext;

class ShowMasterLogsContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.logFormat = null; // Token;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	LOGS() {
	    return this.getToken(MySqlParser.LOGS, 0);
	};

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	MASTER() {
	    return this.getToken(MySqlParser.MASTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowMasterLogs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowMasterLogs(this);
		}
	}


}

MySqlParser.ShowMasterLogsContext = ShowMasterLogsContext;

class ShowGrantsContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	GRANTS() {
	    return this.getToken(MySqlParser.GRANTS, 0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	userName() {
	    return this.getTypedRuleContext(UserNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowGrants(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowGrants(this);
		}
	}


}

MySqlParser.ShowGrantsContext = ShowGrantsContext;

class ShowSlaveStatusContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	SLAVE() {
	    return this.getToken(MySqlParser.SLAVE, 0);
	};

	STATUS() {
	    return this.getToken(MySqlParser.STATUS, 0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	CHANNEL() {
	    return this.getToken(MySqlParser.CHANNEL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowSlaveStatus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowSlaveStatus(this);
		}
	}


}

MySqlParser.ShowSlaveStatusContext = ShowSlaveStatusContext;

class ShowRoutineContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.routine = null; // Token;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	CODE() {
	    return this.getToken(MySqlParser.CODE, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	PROCEDURE() {
	    return this.getToken(MySqlParser.PROCEDURE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowRoutine(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowRoutine(this);
		}
	}


}

MySqlParser.ShowRoutineContext = ShowRoutineContext;

class ShowProfileContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.queryCount = null; // DecimalLiteralContext;
        this.offset = null; // DecimalLiteralContext;
        this.rowCount = null; // DecimalLiteralContext;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	PROFILE() {
	    return this.getToken(MySqlParser.PROFILE, 0);
	};

	showProfileType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ShowProfileTypeContext);
	    } else {
	        return this.getTypedRuleContext(ShowProfileTypeContext,i);
	    }
	};

	LIMIT() {
	    return this.getToken(MySqlParser.LIMIT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	QUERY() {
	    return this.getToken(MySqlParser.QUERY, 0);
	};

	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowProfile(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowProfile(this);
		}
	}


}

MySqlParser.ShowProfileContext = ShowProfileContext;

class ShowColumnsContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.columnsFormat = null; // Token;
        this.tableFormat = null; // Token;
        this.schemaFormat = null; // Token;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	COLUMNS() {
	    return this.getToken(MySqlParser.COLUMNS, 0);
	};

	FIELDS() {
	    return this.getToken(MySqlParser.FIELDS, 0);
	};

	FROM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.FROM);
	    } else {
	        return this.getToken(MySqlParser.FROM, i);
	    }
	};


	IN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.IN);
	    } else {
	        return this.getToken(MySqlParser.IN, i);
	    }
	};


	FULL() {
	    return this.getToken(MySqlParser.FULL, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	showFilter() {
	    return this.getTypedRuleContext(ShowFilterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowColumns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowColumns(this);
		}
	}


}

MySqlParser.ShowColumnsContext = ShowColumnsContext;

class VariableClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_variableClause;
    }

	LOCAL_ID() {
	    return this.getToken(MySqlParser.LOCAL_ID, 0);
	};

	GLOBAL_ID() {
	    return this.getToken(MySqlParser.GLOBAL_ID, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	GLOBAL() {
	    return this.getToken(MySqlParser.GLOBAL, 0);
	};

	SESSION() {
	    return this.getToken(MySqlParser.SESSION, 0);
	};

	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	AT_SIGN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.AT_SIGN);
	    } else {
	        return this.getToken(MySqlParser.AT_SIGN, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterVariableClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitVariableClause(this);
		}
	}


}



class ShowCommonEntityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_showCommonEntity;
    }

	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	COLLATION() {
	    return this.getToken(MySqlParser.COLLATION, 0);
	};

	DATABASES() {
	    return this.getToken(MySqlParser.DATABASES, 0);
	};

	SCHEMAS() {
	    return this.getToken(MySqlParser.SCHEMAS, 0);
	};

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	STATUS() {
	    return this.getToken(MySqlParser.STATUS, 0);
	};

	PROCEDURE() {
	    return this.getToken(MySqlParser.PROCEDURE, 0);
	};

	VARIABLES() {
	    return this.getToken(MySqlParser.VARIABLES, 0);
	};

	GLOBAL() {
	    return this.getToken(MySqlParser.GLOBAL, 0);
	};

	SESSION() {
	    return this.getToken(MySqlParser.SESSION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowCommonEntity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowCommonEntity(this);
		}
	}


}



class ShowFilterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_showFilter;
    }

	LIKE() {
	    return this.getToken(MySqlParser.LIKE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	WHERE() {
	    return this.getToken(MySqlParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowFilter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowFilter(this);
		}
	}


}



class ShowGlobalInfoClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_showGlobalInfoClause;
    }

	ENGINES() {
	    return this.getToken(MySqlParser.ENGINES, 0);
	};

	STORAGE() {
	    return this.getToken(MySqlParser.STORAGE, 0);
	};

	MASTER() {
	    return this.getToken(MySqlParser.MASTER, 0);
	};

	STATUS() {
	    return this.getToken(MySqlParser.STATUS, 0);
	};

	PLUGINS() {
	    return this.getToken(MySqlParser.PLUGINS, 0);
	};

	PRIVILEGES() {
	    return this.getToken(MySqlParser.PRIVILEGES, 0);
	};

	PROCESSLIST() {
	    return this.getToken(MySqlParser.PROCESSLIST, 0);
	};

	FULL() {
	    return this.getToken(MySqlParser.FULL, 0);
	};

	PROFILES() {
	    return this.getToken(MySqlParser.PROFILES, 0);
	};

	SLAVE() {
	    return this.getToken(MySqlParser.SLAVE, 0);
	};

	HOSTS() {
	    return this.getToken(MySqlParser.HOSTS, 0);
	};

	AUTHORS() {
	    return this.getToken(MySqlParser.AUTHORS, 0);
	};

	CONTRIBUTORS() {
	    return this.getToken(MySqlParser.CONTRIBUTORS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowGlobalInfoClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowGlobalInfoClause(this);
		}
	}


}



class ShowSchemaEntityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_showSchemaEntity;
    }

	EVENTS() {
	    return this.getToken(MySqlParser.EVENTS, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	STATUS() {
	    return this.getToken(MySqlParser.STATUS, 0);
	};

	TABLES() {
	    return this.getToken(MySqlParser.TABLES, 0);
	};

	FULL() {
	    return this.getToken(MySqlParser.FULL, 0);
	};

	TRIGGERS() {
	    return this.getToken(MySqlParser.TRIGGERS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowSchemaEntity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowSchemaEntity(this);
		}
	}


}



class ShowProfileTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_showProfileType;
    }

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	BLOCK() {
	    return this.getToken(MySqlParser.BLOCK, 0);
	};

	IO() {
	    return this.getToken(MySqlParser.IO, 0);
	};

	CONTEXT() {
	    return this.getToken(MySqlParser.CONTEXT, 0);
	};

	SWITCHES() {
	    return this.getToken(MySqlParser.SWITCHES, 0);
	};

	CPU() {
	    return this.getToken(MySqlParser.CPU, 0);
	};

	IPC() {
	    return this.getToken(MySqlParser.IPC, 0);
	};

	MEMORY() {
	    return this.getToken(MySqlParser.MEMORY, 0);
	};

	PAGE() {
	    return this.getToken(MySqlParser.PAGE, 0);
	};

	FAULTS() {
	    return this.getToken(MySqlParser.FAULTS, 0);
	};

	SOURCE() {
	    return this.getToken(MySqlParser.SOURCE, 0);
	};

	SWAPS() {
	    return this.getToken(MySqlParser.SWAPS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowProfileType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowProfileType(this);
		}
	}


}



class BinlogStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_binlogStatement;
    }

	BINLOG() {
	    return this.getToken(MySqlParser.BINLOG, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBinlogStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBinlogStatement(this);
		}
	}


}



class CacheIndexStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_cacheIndexStatement;
        this.schema = null; // UidContext
    }

	CACHE() {
	    return this.getToken(MySqlParser.CACHE, 0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	tableIndexes = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableIndexesContext);
	    } else {
	        return this.getTypedRuleContext(TableIndexesContext,i);
	    }
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCacheIndexStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCacheIndexStatement(this);
		}
	}


}



class FlushStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_flushStatement;
        this.flushFormat = null; // Token
    }

	FLUSH() {
	    return this.getToken(MySqlParser.FLUSH, 0);
	};

	flushOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FlushOptionContext);
	    } else {
	        return this.getTypedRuleContext(FlushOptionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	NO_WRITE_TO_BINLOG() {
	    return this.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0);
	};

	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFlushStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFlushStatement(this);
		}
	}


}



class KillStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_killStatement;
        this.connectionFormat = null; // Token
    }

	KILL() {
	    return this.getToken(MySqlParser.KILL, 0);
	};

	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	CONNECTION() {
	    return this.getToken(MySqlParser.CONNECTION, 0);
	};

	QUERY() {
	    return this.getToken(MySqlParser.QUERY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterKillStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitKillStatement(this);
		}
	}


}



class LoadIndexIntoCacheContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_loadIndexIntoCache;
    }

	LOAD() {
	    return this.getToken(MySqlParser.LOAD, 0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	CACHE() {
	    return this.getToken(MySqlParser.CACHE, 0);
	};

	loadedTableIndexes = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LoadedTableIndexesContext);
	    } else {
	        return this.getTypedRuleContext(LoadedTableIndexesContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLoadIndexIntoCache(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLoadIndexIntoCache(this);
		}
	}


}



class ResetStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_resetStatement;
    }

	RESET() {
	    return this.getToken(MySqlParser.RESET, 0);
	};

	QUERY() {
	    return this.getToken(MySqlParser.QUERY, 0);
	};

	CACHE() {
	    return this.getToken(MySqlParser.CACHE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterResetStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitResetStatement(this);
		}
	}


}



class ShutdownStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_shutdownStatement;
    }

	SHUTDOWN() {
	    return this.getToken(MySqlParser.SHUTDOWN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShutdownStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShutdownStatement(this);
		}
	}


}



class TableIndexesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tableIndexes;
        this.indexFormat = null; // Token
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableIndexes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableIndexes(this);
		}
	}


}



class FlushOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_flushOption;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TableFlushOptionContext extends FlushOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TABLES() {
	    return this.getToken(MySqlParser.TABLES, 0);
	};

	tables() {
	    return this.getTypedRuleContext(TablesContext,0);
	};

	flushTableOption() {
	    return this.getTypedRuleContext(FlushTableOptionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableFlushOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableFlushOption(this);
		}
	}


}

MySqlParser.TableFlushOptionContext = TableFlushOptionContext;

class ChannelFlushOptionContext extends FlushOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RELAY() {
	    return this.getToken(MySqlParser.RELAY, 0);
	};

	LOGS() {
	    return this.getToken(MySqlParser.LOGS, 0);
	};

	channelOption() {
	    return this.getTypedRuleContext(ChannelOptionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterChannelFlushOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitChannelFlushOption(this);
		}
	}


}

MySqlParser.ChannelFlushOptionContext = ChannelFlushOptionContext;

class SimpleFlushOptionContext extends FlushOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DES_KEY_FILE() {
	    return this.getToken(MySqlParser.DES_KEY_FILE, 0);
	};

	HOSTS() {
	    return this.getToken(MySqlParser.HOSTS, 0);
	};

	LOGS() {
	    return this.getToken(MySqlParser.LOGS, 0);
	};

	OPTIMIZER_COSTS() {
	    return this.getToken(MySqlParser.OPTIMIZER_COSTS, 0);
	};

	PRIVILEGES() {
	    return this.getToken(MySqlParser.PRIVILEGES, 0);
	};

	QUERY() {
	    return this.getToken(MySqlParser.QUERY, 0);
	};

	CACHE() {
	    return this.getToken(MySqlParser.CACHE, 0);
	};

	STATUS() {
	    return this.getToken(MySqlParser.STATUS, 0);
	};

	USER_RESOURCES() {
	    return this.getToken(MySqlParser.USER_RESOURCES, 0);
	};

	TABLES() {
	    return this.getToken(MySqlParser.TABLES, 0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	READ() {
	    return this.getToken(MySqlParser.READ, 0);
	};

	LOCK() {
	    return this.getToken(MySqlParser.LOCK, 0);
	};

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	ERROR() {
	    return this.getToken(MySqlParser.ERROR, 0);
	};

	GENERAL() {
	    return this.getToken(MySqlParser.GENERAL, 0);
	};

	RELAY() {
	    return this.getToken(MySqlParser.RELAY, 0);
	};

	SLOW() {
	    return this.getToken(MySqlParser.SLOW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSimpleFlushOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSimpleFlushOption(this);
		}
	}


}

MySqlParser.SimpleFlushOptionContext = SimpleFlushOptionContext;

class FlushTableOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_flushTableOption;
    }

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	READ() {
	    return this.getToken(MySqlParser.READ, 0);
	};

	LOCK() {
	    return this.getToken(MySqlParser.LOCK, 0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	EXPORT() {
	    return this.getToken(MySqlParser.EXPORT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFlushTableOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFlushTableOption(this);
		}
	}


}



class LoadedTableIndexesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_loadedTableIndexes;
        this.partitionList = null; // UidListContext
        this.indexFormat = null; // Token
        this.indexList = null; // UidListContext
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.LR_BRACKET, i);
	    }
	};


	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.RR_BRACKET, i);
	    }
	};


	IGNORE() {
	    return this.getToken(MySqlParser.IGNORE, 0);
	};

	LEAVES() {
	    return this.getToken(MySqlParser.LEAVES, 0);
	};

	uidList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidListContext);
	    } else {
	        return this.getTypedRuleContext(UidListContext,i);
	    }
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLoadedTableIndexes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLoadedTableIndexes(this);
		}
	}


}



class SimpleDescribeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_simpleDescribeStatement;
        this.command = null; // Token
        this.column = null; // UidContext
        this.pattern = null; // Token
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	EXPLAIN() {
	    return this.getToken(MySqlParser.EXPLAIN, 0);
	};

	DESCRIBE() {
	    return this.getToken(MySqlParser.DESCRIBE, 0);
	};

	DESC() {
	    return this.getToken(MySqlParser.DESC, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSimpleDescribeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSimpleDescribeStatement(this);
		}
	}


}



class FullDescribeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_fullDescribeStatement;
        this.command = null; // Token
        this.formatType = null; // Token
        this.formatValue = null; // Token
    }

	describeObjectClause() {
	    return this.getTypedRuleContext(DescribeObjectClauseContext,0);
	};

	EXPLAIN() {
	    return this.getToken(MySqlParser.EXPLAIN, 0);
	};

	DESCRIBE() {
	    return this.getToken(MySqlParser.DESCRIBE, 0);
	};

	DESC() {
	    return this.getToken(MySqlParser.DESC, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	EXTENDED() {
	    return this.getToken(MySqlParser.EXTENDED, 0);
	};

	PARTITIONS() {
	    return this.getToken(MySqlParser.PARTITIONS, 0);
	};

	FORMAT() {
	    return this.getToken(MySqlParser.FORMAT, 0);
	};

	TRADITIONAL() {
	    return this.getToken(MySqlParser.TRADITIONAL, 0);
	};

	JSON() {
	    return this.getToken(MySqlParser.JSON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFullDescribeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFullDescribeStatement(this);
		}
	}


}



class HelpStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_helpStatement;
    }

	HELP() {
	    return this.getToken(MySqlParser.HELP, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHelpStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHelpStatement(this);
		}
	}


}



class UseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_useStatement;
    }

	USE() {
	    return this.getToken(MySqlParser.USE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUseStatement(this);
		}
	}


}



class SignalStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_signalStatement;
    }

	SIGNAL() {
	    return this.getToken(MySqlParser.SIGNAL, 0);
	};

	ID() {
	    return this.getToken(MySqlParser.ID, 0);
	};

	REVERSE_QUOTE_ID() {
	    return this.getToken(MySqlParser.REVERSE_QUOTE_ID, 0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	signalConditionInformation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SignalConditionInformationContext);
	    } else {
	        return this.getTypedRuleContext(SignalConditionInformationContext,i);
	    }
	};

	SQLSTATE() {
	    return this.getToken(MySqlParser.SQLSTATE, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	VALUE() {
	    return this.getToken(MySqlParser.VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSignalStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSignalStatement(this);
		}
	}


}



class ResignalStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_resignalStatement;
    }

	RESIGNAL() {
	    return this.getToken(MySqlParser.RESIGNAL, 0);
	};

	ID() {
	    return this.getToken(MySqlParser.ID, 0);
	};

	REVERSE_QUOTE_ID() {
	    return this.getToken(MySqlParser.REVERSE_QUOTE_ID, 0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	signalConditionInformation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SignalConditionInformationContext);
	    } else {
	        return this.getTypedRuleContext(SignalConditionInformationContext,i);
	    }
	};

	SQLSTATE() {
	    return this.getToken(MySqlParser.SQLSTATE, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	VALUE() {
	    return this.getToken(MySqlParser.VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterResignalStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitResignalStatement(this);
		}
	}


}



class SignalConditionInformationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_signalConditionInformation;
    }

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	CLASS_ORIGIN() {
	    return this.getToken(MySqlParser.CLASS_ORIGIN, 0);
	};

	SUBCLASS_ORIGIN() {
	    return this.getToken(MySqlParser.SUBCLASS_ORIGIN, 0);
	};

	MESSAGE_TEXT() {
	    return this.getToken(MySqlParser.MESSAGE_TEXT, 0);
	};

	MYSQL_ERRNO() {
	    return this.getToken(MySqlParser.MYSQL_ERRNO, 0);
	};

	CONSTRAINT_CATALOG() {
	    return this.getToken(MySqlParser.CONSTRAINT_CATALOG, 0);
	};

	CONSTRAINT_SCHEMA() {
	    return this.getToken(MySqlParser.CONSTRAINT_SCHEMA, 0);
	};

	CONSTRAINT_NAME() {
	    return this.getToken(MySqlParser.CONSTRAINT_NAME, 0);
	};

	CATALOG_NAME() {
	    return this.getToken(MySqlParser.CATALOG_NAME, 0);
	};

	SCHEMA_NAME() {
	    return this.getToken(MySqlParser.SCHEMA_NAME, 0);
	};

	TABLE_NAME() {
	    return this.getToken(MySqlParser.TABLE_NAME, 0);
	};

	COLUMN_NAME() {
	    return this.getToken(MySqlParser.COLUMN_NAME, 0);
	};

	CURSOR_NAME() {
	    return this.getToken(MySqlParser.CURSOR_NAME, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	DECIMAL_LITERAL() {
	    return this.getToken(MySqlParser.DECIMAL_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSignalConditionInformation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSignalConditionInformation(this);
		}
	}


}



class DiagnosticsStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_diagnosticsStatement;
    }

	GET() {
	    return this.getToken(MySqlParser.GET, 0);
	};

	DIAGNOSTICS() {
	    return this.getToken(MySqlParser.DIAGNOSTICS, 0);
	};

	CURRENT() {
	    return this.getToken(MySqlParser.CURRENT, 0);
	};

	STACKED() {
	    return this.getToken(MySqlParser.STACKED, 0);
	};

	variableClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableClauseContext);
	    } else {
	        return this.getTypedRuleContext(VariableClauseContext,i);
	    }
	};

	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	CONDITION() {
	    return this.getToken(MySqlParser.CONDITION, 0);
	};

	diagnosticsConditionInformationName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DiagnosticsConditionInformationNameContext);
	    } else {
	        return this.getTypedRuleContext(DiagnosticsConditionInformationNameContext,i);
	    }
	};

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.NUMBER);
	    } else {
	        return this.getToken(MySqlParser.NUMBER, i);
	    }
	};


	ROW_COUNT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.ROW_COUNT);
	    } else {
	        return this.getToken(MySqlParser.ROW_COUNT, i);
	    }
	};


	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDiagnosticsStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDiagnosticsStatement(this);
		}
	}


}



class DiagnosticsConditionInformationNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_diagnosticsConditionInformationName;
    }

	CLASS_ORIGIN() {
	    return this.getToken(MySqlParser.CLASS_ORIGIN, 0);
	};

	SUBCLASS_ORIGIN() {
	    return this.getToken(MySqlParser.SUBCLASS_ORIGIN, 0);
	};

	RETURNED_SQLSTATE() {
	    return this.getToken(MySqlParser.RETURNED_SQLSTATE, 0);
	};

	MESSAGE_TEXT() {
	    return this.getToken(MySqlParser.MESSAGE_TEXT, 0);
	};

	MYSQL_ERRNO() {
	    return this.getToken(MySqlParser.MYSQL_ERRNO, 0);
	};

	CONSTRAINT_CATALOG() {
	    return this.getToken(MySqlParser.CONSTRAINT_CATALOG, 0);
	};

	CONSTRAINT_SCHEMA() {
	    return this.getToken(MySqlParser.CONSTRAINT_SCHEMA, 0);
	};

	CONSTRAINT_NAME() {
	    return this.getToken(MySqlParser.CONSTRAINT_NAME, 0);
	};

	CATALOG_NAME() {
	    return this.getToken(MySqlParser.CATALOG_NAME, 0);
	};

	SCHEMA_NAME() {
	    return this.getToken(MySqlParser.SCHEMA_NAME, 0);
	};

	TABLE_NAME() {
	    return this.getToken(MySqlParser.TABLE_NAME, 0);
	};

	COLUMN_NAME() {
	    return this.getToken(MySqlParser.COLUMN_NAME, 0);
	};

	CURSOR_NAME() {
	    return this.getToken(MySqlParser.CURSOR_NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDiagnosticsConditionInformationName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDiagnosticsConditionInformationName(this);
		}
	}


}



class DescribeObjectClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_describeObjectClause;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DescribeStatementsContext extends DescribeObjectClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	deleteStatement() {
	    return this.getTypedRuleContext(DeleteStatementContext,0);
	};

	insertStatement() {
	    return this.getTypedRuleContext(InsertStatementContext,0);
	};

	replaceStatement() {
	    return this.getTypedRuleContext(ReplaceStatementContext,0);
	};

	updateStatement() {
	    return this.getTypedRuleContext(UpdateStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDescribeStatements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDescribeStatements(this);
		}
	}


}

MySqlParser.DescribeStatementsContext = DescribeStatementsContext;

class DescribeConnectionContext extends DescribeObjectClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	CONNECTION() {
	    return this.getToken(MySqlParser.CONNECTION, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDescribeConnection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDescribeConnection(this);
		}
	}


}

MySqlParser.DescribeConnectionContext = DescribeConnectionContext;

class FullIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_fullId;
    }

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	DOT_ID() {
	    return this.getToken(MySqlParser.DOT_ID, 0);
	};

	DOT() {
	    return this.getToken(MySqlParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFullId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFullId(this);
		}
	}


}



class TableNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tableName;
    }

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableName(this);
		}
	}


}



class FullColumnNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_fullColumnName;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	dottedId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DottedIdContext);
	    } else {
	        return this.getTypedRuleContext(DottedIdContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFullColumnName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFullColumnName(this);
		}
	}


}



class IndexColumnNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_indexColumnName;
        this.sortType = null; // Token
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	ASC() {
	    return this.getToken(MySqlParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(MySqlParser.DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIndexColumnName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIndexColumnName(this);
		}
	}


}



class UserNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_userName;
    }

	STRING_USER_NAME() {
	    return this.getToken(MySqlParser.STRING_USER_NAME, 0);
	};

	ID() {
	    return this.getToken(MySqlParser.ID, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUserName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUserName(this);
		}
	}


}



class MysqlVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_mysqlVariable;
    }

	LOCAL_ID() {
	    return this.getToken(MySqlParser.LOCAL_ID, 0);
	};

	GLOBAL_ID() {
	    return this.getToken(MySqlParser.GLOBAL_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMysqlVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMysqlVariable(this);
		}
	}


}



class CharsetNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_charsetName;
    }

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	charsetNameBase() {
	    return this.getTypedRuleContext(CharsetNameBaseContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	CHARSET_REVERSE_QOUTE_STRING() {
	    return this.getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCharsetName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCharsetName(this);
		}
	}


}



class CollationNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_collationName;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCollationName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCollationName(this);
		}
	}


}



class EngineNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_engineName;
    }

	ARCHIVE() {
	    return this.getToken(MySqlParser.ARCHIVE, 0);
	};

	BLACKHOLE() {
	    return this.getToken(MySqlParser.BLACKHOLE, 0);
	};

	CSV() {
	    return this.getToken(MySqlParser.CSV, 0);
	};

	FEDERATED() {
	    return this.getToken(MySqlParser.FEDERATED, 0);
	};

	INNODB() {
	    return this.getToken(MySqlParser.INNODB, 0);
	};

	MEMORY() {
	    return this.getToken(MySqlParser.MEMORY, 0);
	};

	MRG_MYISAM() {
	    return this.getToken(MySqlParser.MRG_MYISAM, 0);
	};

	MYISAM() {
	    return this.getToken(MySqlParser.MYISAM, 0);
	};

	NDB() {
	    return this.getToken(MySqlParser.NDB, 0);
	};

	NDBCLUSTER() {
	    return this.getToken(MySqlParser.NDBCLUSTER, 0);
	};

	PERFORMANCE_SCHEMA() {
	    return this.getToken(MySqlParser.PERFORMANCE_SCHEMA, 0);
	};

	TOKUDB() {
	    return this.getToken(MySqlParser.TOKUDB, 0);
	};

	ID() {
	    return this.getToken(MySqlParser.ID, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	REVERSE_QUOTE_ID() {
	    return this.getToken(MySqlParser.REVERSE_QUOTE_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterEngineName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitEngineName(this);
		}
	}


}



class UuidSetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_uuidSet;
    }

	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.MINUS);
	    } else {
	        return this.getToken(MySqlParser.MINUS, i);
	    }
	};


	COLON_SYMB = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COLON_SYMB);
	    } else {
	        return this.getToken(MySqlParser.COLON_SYMB, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUuidSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUuidSet(this);
		}
	}


}



class XidContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_xid;
        this.globalTableUid = null; // XuidStringIdContext
        this.qualifier = null; // XuidStringIdContext
        this.idFormat = null; // DecimalLiteralContext
    }

	xuidStringId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(XuidStringIdContext);
	    } else {
	        return this.getTypedRuleContext(XuidStringIdContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterXid(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitXid(this);
		}
	}


}



class XuidStringIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_xuidStringId;
    }

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	BIT_STRING() {
	    return this.getToken(MySqlParser.BIT_STRING, 0);
	};

	HEXADECIMAL_LITERAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.HEXADECIMAL_LITERAL);
	    } else {
	        return this.getToken(MySqlParser.HEXADECIMAL_LITERAL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterXuidStringId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitXuidStringId(this);
		}
	}


}



class AuthPluginContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_authPlugin;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAuthPlugin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAuthPlugin(this);
		}
	}


}



class UidContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_uid;
    }

	simpleId() {
	    return this.getTypedRuleContext(SimpleIdContext,0);
	};

	REVERSE_QUOTE_ID() {
	    return this.getToken(MySqlParser.REVERSE_QUOTE_ID, 0);
	};

	CHARSET_REVERSE_QOUTE_STRING() {
	    return this.getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUid(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUid(this);
		}
	}


}



class SimpleIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_simpleId;
    }

	ID() {
	    return this.getToken(MySqlParser.ID, 0);
	};

	charsetNameBase() {
	    return this.getTypedRuleContext(CharsetNameBaseContext,0);
	};

	transactionLevelBase() {
	    return this.getTypedRuleContext(TransactionLevelBaseContext,0);
	};

	engineName() {
	    return this.getTypedRuleContext(EngineNameContext,0);
	};

	privilegesBase() {
	    return this.getTypedRuleContext(PrivilegesBaseContext,0);
	};

	intervalTypeBase() {
	    return this.getTypedRuleContext(IntervalTypeBaseContext,0);
	};

	dataTypeBase() {
	    return this.getTypedRuleContext(DataTypeBaseContext,0);
	};

	keywordsCanBeId() {
	    return this.getTypedRuleContext(KeywordsCanBeIdContext,0);
	};

	functionNameBase() {
	    return this.getTypedRuleContext(FunctionNameBaseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSimpleId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSimpleId(this);
		}
	}


}



class DottedIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dottedId;
    }

	DOT_ID() {
	    return this.getToken(MySqlParser.DOT_ID, 0);
	};

	DOT() {
	    return this.getToken(MySqlParser.DOT, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDottedId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDottedId(this);
		}
	}


}



class DecimalLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_decimalLiteral;
    }

	DECIMAL_LITERAL() {
	    return this.getToken(MySqlParser.DECIMAL_LITERAL, 0);
	};

	ZERO_DECIMAL() {
	    return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	};

	ONE_DECIMAL() {
	    return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	};

	TWO_DECIMAL() {
	    return this.getToken(MySqlParser.TWO_DECIMAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDecimalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDecimalLiteral(this);
		}
	}


}



class FileSizeLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_fileSizeLiteral;
    }

	FILESIZE_LITERAL() {
	    return this.getToken(MySqlParser.FILESIZE_LITERAL, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFileSizeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFileSizeLiteral(this);
		}
	}


}



class StringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_stringLiteral;
    }

	STRING_LITERAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.STRING_LITERAL);
	    } else {
	        return this.getToken(MySqlParser.STRING_LITERAL, i);
	    }
	};


	START_NATIONAL_STRING_LITERAL() {
	    return this.getToken(MySqlParser.START_NATIONAL_STRING_LITERAL, 0);
	};

	STRING_CHARSET_NAME() {
	    return this.getToken(MySqlParser.STRING_CHARSET_NAME, 0);
	};

	COLLATE() {
	    return this.getToken(MySqlParser.COLLATE, 0);
	};

	collationName() {
	    return this.getTypedRuleContext(CollationNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStringLiteral(this);
		}
	}


}



class BooleanLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_booleanLiteral;
    }

	TRUE() {
	    return this.getToken(MySqlParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(MySqlParser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBooleanLiteral(this);
		}
	}


}



class HexadecimalLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_hexadecimalLiteral;
    }

	HEXADECIMAL_LITERAL() {
	    return this.getToken(MySqlParser.HEXADECIMAL_LITERAL, 0);
	};

	STRING_CHARSET_NAME() {
	    return this.getToken(MySqlParser.STRING_CHARSET_NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHexadecimalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHexadecimalLiteral(this);
		}
	}


}



class NullNotnullContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_nullNotnull;
    }

	NULL_LITERAL() {
	    return this.getToken(MySqlParser.NULL_LITERAL, 0);
	};

	NULL_SPEC_LITERAL() {
	    return this.getToken(MySqlParser.NULL_SPEC_LITERAL, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterNullNotnull(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitNullNotnull(this);
		}
	}


}



class ConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_constant;
        this.nullLiteral = null; // Token
    }

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	MINUS() {
	    return this.getToken(MySqlParser.MINUS, 0);
	};

	hexadecimalLiteral() {
	    return this.getTypedRuleContext(HexadecimalLiteralContext,0);
	};

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	REAL_LITERAL() {
	    return this.getToken(MySqlParser.REAL_LITERAL, 0);
	};

	BIT_STRING() {
	    return this.getToken(MySqlParser.BIT_STRING, 0);
	};

	NULL_LITERAL() {
	    return this.getToken(MySqlParser.NULL_LITERAL, 0);
	};

	NULL_SPEC_LITERAL() {
	    return this.getToken(MySqlParser.NULL_SPEC_LITERAL, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitConstant(this);
		}
	}


}



class DataTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dataType;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SpatialDataTypeContext extends DataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        this.typeName = null; // Token;
        super.copyFrom(ctx);
    }

	GEOMETRYCOLLECTION() {
	    return this.getToken(MySqlParser.GEOMETRYCOLLECTION, 0);
	};

	GEOMCOLLECTION() {
	    return this.getToken(MySqlParser.GEOMCOLLECTION, 0);
	};

	LINESTRING() {
	    return this.getToken(MySqlParser.LINESTRING, 0);
	};

	MULTILINESTRING() {
	    return this.getToken(MySqlParser.MULTILINESTRING, 0);
	};

	MULTIPOINT() {
	    return this.getToken(MySqlParser.MULTIPOINT, 0);
	};

	MULTIPOLYGON() {
	    return this.getToken(MySqlParser.MULTIPOLYGON, 0);
	};

	POINT() {
	    return this.getToken(MySqlParser.POINT, 0);
	};

	POLYGON() {
	    return this.getToken(MySqlParser.POLYGON, 0);
	};

	JSON() {
	    return this.getToken(MySqlParser.JSON, 0);
	};

	GEOMETRY() {
	    return this.getToken(MySqlParser.GEOMETRY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSpatialDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSpatialDataType(this);
		}
	}


}

MySqlParser.SpatialDataTypeContext = SpatialDataTypeContext;

class LongVarbinaryDataTypeContext extends DataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LONG() {
	    return this.getToken(MySqlParser.LONG, 0);
	};

	VARBINARY() {
	    return this.getToken(MySqlParser.VARBINARY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLongVarbinaryDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLongVarbinaryDataType(this);
		}
	}


}

MySqlParser.LongVarbinaryDataTypeContext = LongVarbinaryDataTypeContext;

class CollectionDataTypeContext extends DataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        this.typeName = null; // Token;
        super.copyFrom(ctx);
    }

	collectionOptions() {
	    return this.getTypedRuleContext(CollectionOptionsContext,0);
	};

	ENUM() {
	    return this.getToken(MySqlParser.ENUM, 0);
	};

	SET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.SET);
	    } else {
	        return this.getToken(MySqlParser.SET, i);
	    }
	};


	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	CHARSET() {
	    return this.getToken(MySqlParser.CHARSET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCollectionDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCollectionDataType(this);
		}
	}


}

MySqlParser.CollectionDataTypeContext = CollectionDataTypeContext;

class NationalVaryingStringDataTypeContext extends DataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        this.typeName = null; // Token;
        super.copyFrom(ctx);
    }

	NATIONAL() {
	    return this.getToken(MySqlParser.NATIONAL, 0);
	};

	VARYING() {
	    return this.getToken(MySqlParser.VARYING, 0);
	};

	CHAR() {
	    return this.getToken(MySqlParser.CHAR, 0);
	};

	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	lengthOneDimension() {
	    return this.getTypedRuleContext(LengthOneDimensionContext,0);
	};

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterNationalVaryingStringDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitNationalVaryingStringDataType(this);
		}
	}


}

MySqlParser.NationalVaryingStringDataTypeContext = NationalVaryingStringDataTypeContext;

class DimensionDataTypeContext extends DataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        this.typeName = null; // Token;
        super.copyFrom(ctx);
    }

	TINYINT() {
	    return this.getToken(MySqlParser.TINYINT, 0);
	};

	SMALLINT() {
	    return this.getToken(MySqlParser.SMALLINT, 0);
	};

	MEDIUMINT() {
	    return this.getToken(MySqlParser.MEDIUMINT, 0);
	};

	INT() {
	    return this.getToken(MySqlParser.INT, 0);
	};

	INTEGER() {
	    return this.getToken(MySqlParser.INTEGER, 0);
	};

	BIGINT() {
	    return this.getToken(MySqlParser.BIGINT, 0);
	};

	MIDDLEINT() {
	    return this.getToken(MySqlParser.MIDDLEINT, 0);
	};

	INT1() {
	    return this.getToken(MySqlParser.INT1, 0);
	};

	INT2() {
	    return this.getToken(MySqlParser.INT2, 0);
	};

	INT3() {
	    return this.getToken(MySqlParser.INT3, 0);
	};

	INT4() {
	    return this.getToken(MySqlParser.INT4, 0);
	};

	INT8() {
	    return this.getToken(MySqlParser.INT8, 0);
	};

	lengthOneDimension() {
	    return this.getTypedRuleContext(LengthOneDimensionContext,0);
	};

	ZEROFILL() {
	    return this.getToken(MySqlParser.ZEROFILL, 0);
	};

	SIGNED() {
	    return this.getToken(MySqlParser.SIGNED, 0);
	};

	UNSIGNED() {
	    return this.getToken(MySqlParser.UNSIGNED, 0);
	};

	REAL() {
	    return this.getToken(MySqlParser.REAL, 0);
	};

	lengthTwoDimension() {
	    return this.getTypedRuleContext(LengthTwoDimensionContext,0);
	};

	DOUBLE() {
	    return this.getToken(MySqlParser.DOUBLE, 0);
	};

	PRECISION() {
	    return this.getToken(MySqlParser.PRECISION, 0);
	};

	DECIMAL() {
	    return this.getToken(MySqlParser.DECIMAL, 0);
	};

	DEC() {
	    return this.getToken(MySqlParser.DEC, 0);
	};

	FIXED() {
	    return this.getToken(MySqlParser.FIXED, 0);
	};

	NUMERIC() {
	    return this.getToken(MySqlParser.NUMERIC, 0);
	};

	FLOAT() {
	    return this.getToken(MySqlParser.FLOAT, 0);
	};

	FLOAT4() {
	    return this.getToken(MySqlParser.FLOAT4, 0);
	};

	FLOAT8() {
	    return this.getToken(MySqlParser.FLOAT8, 0);
	};

	lengthTwoOptionalDimension() {
	    return this.getTypedRuleContext(LengthTwoOptionalDimensionContext,0);
	};

	BIT() {
	    return this.getToken(MySqlParser.BIT, 0);
	};

	TIME() {
	    return this.getToken(MySqlParser.TIME, 0);
	};

	TIMESTAMP() {
	    return this.getToken(MySqlParser.TIMESTAMP, 0);
	};

	DATETIME() {
	    return this.getToken(MySqlParser.DATETIME, 0);
	};

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	VARBINARY() {
	    return this.getToken(MySqlParser.VARBINARY, 0);
	};

	BLOB() {
	    return this.getToken(MySqlParser.BLOB, 0);
	};

	YEAR() {
	    return this.getToken(MySqlParser.YEAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDimensionDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDimensionDataType(this);
		}
	}


}

MySqlParser.DimensionDataTypeContext = DimensionDataTypeContext;

class StringDataTypeContext extends DataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        this.typeName = null; // Token;
        super.copyFrom(ctx);
    }

	CHAR() {
	    return this.getToken(MySqlParser.CHAR, 0);
	};

	CHARACTER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.CHARACTER);
	    } else {
	        return this.getToken(MySqlParser.CHARACTER, i);
	    }
	};


	VARCHAR() {
	    return this.getToken(MySqlParser.VARCHAR, 0);
	};

	TINYTEXT() {
	    return this.getToken(MySqlParser.TINYTEXT, 0);
	};

	TEXT() {
	    return this.getToken(MySqlParser.TEXT, 0);
	};

	MEDIUMTEXT() {
	    return this.getToken(MySqlParser.MEDIUMTEXT, 0);
	};

	LONGTEXT() {
	    return this.getToken(MySqlParser.LONGTEXT, 0);
	};

	NCHAR() {
	    return this.getToken(MySqlParser.NCHAR, 0);
	};

	NVARCHAR() {
	    return this.getToken(MySqlParser.NVARCHAR, 0);
	};

	LONG() {
	    return this.getToken(MySqlParser.LONG, 0);
	};

	VARYING() {
	    return this.getToken(MySqlParser.VARYING, 0);
	};

	lengthOneDimension() {
	    return this.getTypedRuleContext(LengthOneDimensionContext,0);
	};

	BINARY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.BINARY);
	    } else {
	        return this.getToken(MySqlParser.BINARY, i);
	    }
	};


	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	COLLATE() {
	    return this.getToken(MySqlParser.COLLATE, 0);
	};

	collationName() {
	    return this.getTypedRuleContext(CollationNameContext,0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	CHARSET() {
	    return this.getToken(MySqlParser.CHARSET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStringDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStringDataType(this);
		}
	}


}

MySqlParser.StringDataTypeContext = StringDataTypeContext;

class LongVarcharDataTypeContext extends DataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        this.typeName = null; // Token;
        super.copyFrom(ctx);
    }

	LONG() {
	    return this.getToken(MySqlParser.LONG, 0);
	};

	VARCHAR() {
	    return this.getToken(MySqlParser.VARCHAR, 0);
	};

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	COLLATE() {
	    return this.getToken(MySqlParser.COLLATE, 0);
	};

	collationName() {
	    return this.getTypedRuleContext(CollationNameContext,0);
	};

	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	CHARSET() {
	    return this.getToken(MySqlParser.CHARSET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLongVarcharDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLongVarcharDataType(this);
		}
	}


}

MySqlParser.LongVarcharDataTypeContext = LongVarcharDataTypeContext;

class NationalStringDataTypeContext extends DataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        this.typeName = null; // Token;
        super.copyFrom(ctx);
    }

	NATIONAL() {
	    return this.getToken(MySqlParser.NATIONAL, 0);
	};

	VARCHAR() {
	    return this.getToken(MySqlParser.VARCHAR, 0);
	};

	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	lengthOneDimension() {
	    return this.getTypedRuleContext(LengthOneDimensionContext,0);
	};

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	NCHAR() {
	    return this.getToken(MySqlParser.NCHAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterNationalStringDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitNationalStringDataType(this);
		}
	}


}

MySqlParser.NationalStringDataTypeContext = NationalStringDataTypeContext;

class SimpleDataTypeContext extends DataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        this.typeName = null; // Token;
        super.copyFrom(ctx);
    }

	DATE() {
	    return this.getToken(MySqlParser.DATE, 0);
	};

	TINYBLOB() {
	    return this.getToken(MySqlParser.TINYBLOB, 0);
	};

	MEDIUMBLOB() {
	    return this.getToken(MySqlParser.MEDIUMBLOB, 0);
	};

	LONGBLOB() {
	    return this.getToken(MySqlParser.LONGBLOB, 0);
	};

	BOOL() {
	    return this.getToken(MySqlParser.BOOL, 0);
	};

	BOOLEAN() {
	    return this.getToken(MySqlParser.BOOLEAN, 0);
	};

	SERIAL() {
	    return this.getToken(MySqlParser.SERIAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSimpleDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSimpleDataType(this);
		}
	}


}

MySqlParser.SimpleDataTypeContext = SimpleDataTypeContext;

class CollectionOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_collectionOptions;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	STRING_LITERAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.STRING_LITERAL);
	    } else {
	        return this.getToken(MySqlParser.STRING_LITERAL, i);
	    }
	};


	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCollectionOptions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCollectionOptions(this);
		}
	}


}



class ConvertedDataTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_convertedDataType;
        this.typeName = null; // Token
    }

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	NCHAR() {
	    return this.getToken(MySqlParser.NCHAR, 0);
	};

	lengthOneDimension() {
	    return this.getTypedRuleContext(LengthOneDimensionContext,0);
	};

	CHAR() {
	    return this.getToken(MySqlParser.CHAR, 0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	CHARSET() {
	    return this.getToken(MySqlParser.CHARSET, 0);
	};

	DATE() {
	    return this.getToken(MySqlParser.DATE, 0);
	};

	DATETIME() {
	    return this.getToken(MySqlParser.DATETIME, 0);
	};

	TIME() {
	    return this.getToken(MySqlParser.TIME, 0);
	};

	JSON() {
	    return this.getToken(MySqlParser.JSON, 0);
	};

	DECIMAL() {
	    return this.getToken(MySqlParser.DECIMAL, 0);
	};

	lengthTwoDimension() {
	    return this.getTypedRuleContext(LengthTwoDimensionContext,0);
	};

	SIGNED() {
	    return this.getToken(MySqlParser.SIGNED, 0);
	};

	UNSIGNED() {
	    return this.getToken(MySqlParser.UNSIGNED, 0);
	};

	INTEGER() {
	    return this.getToken(MySqlParser.INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterConvertedDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitConvertedDataType(this);
		}
	}


}



class LengthOneDimensionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_lengthOneDimension;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLengthOneDimension(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLengthOneDimension(this);
		}
	}


}



class LengthTwoDimensionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_lengthTwoDimension;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLengthTwoDimension(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLengthTwoDimension(this);
		}
	}


}



class LengthTwoOptionalDimensionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_lengthTwoOptionalDimension;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLengthTwoOptionalDimension(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLengthTwoOptionalDimension(this);
		}
	}


}



class UidListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_uidList;
    }

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUidList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUidList(this);
		}
	}


}



class TablesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tables;
    }

	tableName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableNameContext);
	    } else {
	        return this.getTypedRuleContext(TableNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTables(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTables(this);
		}
	}


}



class IndexColumnNamesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_indexColumnNames;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	indexColumnName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexColumnNameContext);
	    } else {
	        return this.getTypedRuleContext(IndexColumnNameContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIndexColumnNames(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIndexColumnNames(this);
		}
	}


}



class ExpressionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_expressions;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterExpressions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitExpressions(this);
		}
	}


}



class ExpressionsWithDefaultsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_expressionsWithDefaults;
    }

	expressionOrDefault = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionOrDefaultContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionOrDefaultContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterExpressionsWithDefaults(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitExpressionsWithDefaults(this);
		}
	}


}



class ConstantsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_constants;
    }

	constant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstantContext);
	    } else {
	        return this.getTypedRuleContext(ConstantContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterConstants(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitConstants(this);
		}
	}


}



class SimpleStringsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_simpleStrings;
    }

	STRING_LITERAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.STRING_LITERAL);
	    } else {
	        return this.getToken(MySqlParser.STRING_LITERAL, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSimpleStrings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSimpleStrings(this);
		}
	}


}



class UserVariablesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_userVariables;
    }

	LOCAL_ID = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LOCAL_ID);
	    } else {
	        return this.getToken(MySqlParser.LOCAL_ID, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUserVariables(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUserVariables(this);
		}
	}


}



class DefaultValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_defaultValue;
    }

	NULL_LITERAL() {
	    return this.getToken(MySqlParser.NULL_LITERAL, 0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	currentTimestamp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CurrentTimestampContext);
	    } else {
	        return this.getTypedRuleContext(CurrentTimestampContext,i);
	    }
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	UPDATE() {
	    return this.getToken(MySqlParser.UPDATE, 0);
	};

	unaryOperator() {
	    return this.getTypedRuleContext(UnaryOperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDefaultValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDefaultValue(this);
		}
	}


}



class CurrentTimestampContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_currentTimestamp;
    }

	NOW() {
	    return this.getToken(MySqlParser.NOW, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	CURRENT_TIMESTAMP() {
	    return this.getToken(MySqlParser.CURRENT_TIMESTAMP, 0);
	};

	LOCALTIME() {
	    return this.getToken(MySqlParser.LOCALTIME, 0);
	};

	LOCALTIMESTAMP() {
	    return this.getToken(MySqlParser.LOCALTIMESTAMP, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCurrentTimestamp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCurrentTimestamp(this);
		}
	}


}



class ExpressionOrDefaultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_expressionOrDefault;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterExpressionOrDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitExpressionOrDefault(this);
		}
	}


}



class IfExistsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_ifExists;
    }

	IF() {
	    return this.getToken(MySqlParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(MySqlParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIfExists(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIfExists(this);
		}
	}


}



class IfNotExistsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_ifNotExists;
    }

	IF() {
	    return this.getToken(MySqlParser.IF, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(MySqlParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIfNotExists(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIfNotExists(this);
		}
	}


}



class FunctionCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_functionCall;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SpecificFunctionCallContext extends FunctionCallContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	specificFunction() {
	    return this.getTypedRuleContext(SpecificFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSpecificFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSpecificFunctionCall(this);
		}
	}


}

MySqlParser.SpecificFunctionCallContext = SpecificFunctionCallContext;

class PasswordFunctionCallContext extends FunctionCallContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	passwordFunctionClause() {
	    return this.getTypedRuleContext(PasswordFunctionClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPasswordFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPasswordFunctionCall(this);
		}
	}


}

MySqlParser.PasswordFunctionCallContext = PasswordFunctionCallContext;

class UdfFunctionCallContext extends FunctionCallContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	functionArgs() {
	    return this.getTypedRuleContext(FunctionArgsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUdfFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUdfFunctionCall(this);
		}
	}


}

MySqlParser.UdfFunctionCallContext = UdfFunctionCallContext;

class AggregateFunctionCallContext extends FunctionCallContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	aggregateWindowedFunction() {
	    return this.getTypedRuleContext(AggregateWindowedFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAggregateFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAggregateFunctionCall(this);
		}
	}


}

MySqlParser.AggregateFunctionCallContext = AggregateFunctionCallContext;

class ScalarFunctionCallContext extends FunctionCallContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	scalarFunctionName() {
	    return this.getTypedRuleContext(ScalarFunctionNameContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	functionArgs() {
	    return this.getTypedRuleContext(FunctionArgsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterScalarFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitScalarFunctionCall(this);
		}
	}


}

MySqlParser.ScalarFunctionCallContext = ScalarFunctionCallContext;

class SpecificFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_specificFunction;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PositionFunctionCallContext extends SpecificFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.positionString = null; // StringLiteralContext;
        this.positionExpression = null; // ExpressionContext;
        this.inString = null; // StringLiteralContext;
        this.inExpression = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	POSITION() {
	    return this.getToken(MySqlParser.POSITION, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	stringLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringLiteralContext);
	    } else {
	        return this.getTypedRuleContext(StringLiteralContext,i);
	    }
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPositionFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPositionFunctionCall(this);
		}
	}


}

MySqlParser.PositionFunctionCallContext = PositionFunctionCallContext;

class TrimFunctionCallContext extends SpecificFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.positioinForm = null; // Token;
        this.sourceString = null; // StringLiteralContext;
        this.sourceExpression = null; // ExpressionContext;
        this.fromString = null; // StringLiteralContext;
        this.fromExpression = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	TRIM() {
	    return this.getToken(MySqlParser.TRIM, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	BOTH() {
	    return this.getToken(MySqlParser.BOTH, 0);
	};

	LEADING() {
	    return this.getToken(MySqlParser.LEADING, 0);
	};

	TRAILING() {
	    return this.getToken(MySqlParser.TRAILING, 0);
	};

	stringLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringLiteralContext);
	    } else {
	        return this.getTypedRuleContext(StringLiteralContext,i);
	    }
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTrimFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTrimFunctionCall(this);
		}
	}


}

MySqlParser.TrimFunctionCallContext = TrimFunctionCallContext;

class SimpleFunctionCallContext extends SpecificFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CURRENT_DATE() {
	    return this.getToken(MySqlParser.CURRENT_DATE, 0);
	};

	CURRENT_TIME() {
	    return this.getToken(MySqlParser.CURRENT_TIME, 0);
	};

	CURRENT_TIMESTAMP() {
	    return this.getToken(MySqlParser.CURRENT_TIMESTAMP, 0);
	};

	CURRENT_USER() {
	    return this.getToken(MySqlParser.CURRENT_USER, 0);
	};

	LOCALTIME() {
	    return this.getToken(MySqlParser.LOCALTIME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSimpleFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSimpleFunctionCall(this);
		}
	}


}

MySqlParser.SimpleFunctionCallContext = SimpleFunctionCallContext;

class CharFunctionCallContext extends SpecificFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CHAR() {
	    return this.getToken(MySqlParser.CHAR, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	functionArgs() {
	    return this.getTypedRuleContext(FunctionArgsContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	USING() {
	    return this.getToken(MySqlParser.USING, 0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCharFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCharFunctionCall(this);
		}
	}


}

MySqlParser.CharFunctionCallContext = CharFunctionCallContext;

class WeightFunctionCallContext extends SpecificFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.stringFormat = null; // Token;
        super.copyFrom(ctx);
    }

	WEIGHT_STRING() {
	    return this.getToken(MySqlParser.WEIGHT_STRING, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.LR_BRACKET, i);
	    }
	};


	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.RR_BRACKET, i);
	    }
	};


	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	levelsInWeightString() {
	    return this.getTypedRuleContext(LevelsInWeightStringContext,0);
	};

	CHAR() {
	    return this.getToken(MySqlParser.CHAR, 0);
	};

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterWeightFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitWeightFunctionCall(this);
		}
	}


}

MySqlParser.WeightFunctionCallContext = WeightFunctionCallContext;

class GetFormatFunctionCallContext extends SpecificFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.datetimeFormat = null; // Token;
        super.copyFrom(ctx);
    }

	GET_FORMAT() {
	    return this.getToken(MySqlParser.GET_FORMAT, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	DATE() {
	    return this.getToken(MySqlParser.DATE, 0);
	};

	TIME() {
	    return this.getToken(MySqlParser.TIME, 0);
	};

	DATETIME() {
	    return this.getToken(MySqlParser.DATETIME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGetFormatFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGetFormatFunctionCall(this);
		}
	}


}

MySqlParser.GetFormatFunctionCallContext = GetFormatFunctionCallContext;

class CaseFunctionCallContext extends SpecificFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.elseArg = null; // FunctionArgContext;
        super.copyFrom(ctx);
    }

	CASE() {
	    return this.getToken(MySqlParser.CASE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	END() {
	    return this.getToken(MySqlParser.END, 0);
	};

	caseFuncAlternative = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaseFuncAlternativeContext);
	    } else {
	        return this.getTypedRuleContext(CaseFuncAlternativeContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(MySqlParser.ELSE, 0);
	};

	functionArg() {
	    return this.getTypedRuleContext(FunctionArgContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCaseFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCaseFunctionCall(this);
		}
	}


}

MySqlParser.CaseFunctionCallContext = CaseFunctionCallContext;

class ExtractFunctionCallContext extends SpecificFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.sourceString = null; // StringLiteralContext;
        this.sourceExpression = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	EXTRACT() {
	    return this.getToken(MySqlParser.EXTRACT, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	intervalType() {
	    return this.getTypedRuleContext(IntervalTypeContext,0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterExtractFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitExtractFunctionCall(this);
		}
	}


}

MySqlParser.ExtractFunctionCallContext = ExtractFunctionCallContext;

class DataTypeFunctionCallContext extends SpecificFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.separator = null; // Token;
        super.copyFrom(ctx);
    }

	CONVERT() {
	    return this.getToken(MySqlParser.CONVERT, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	convertedDataType() {
	    return this.getTypedRuleContext(ConvertedDataTypeContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	USING() {
	    return this.getToken(MySqlParser.USING, 0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	CAST() {
	    return this.getToken(MySqlParser.CAST, 0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDataTypeFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDataTypeFunctionCall(this);
		}
	}


}

MySqlParser.DataTypeFunctionCallContext = DataTypeFunctionCallContext;

class ValuesFunctionCallContext extends SpecificFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	VALUES() {
	    return this.getToken(MySqlParser.VALUES, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	fullColumnName() {
	    return this.getTypedRuleContext(FullColumnNameContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterValuesFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitValuesFunctionCall(this);
		}
	}


}

MySqlParser.ValuesFunctionCallContext = ValuesFunctionCallContext;

class SubstrFunctionCallContext extends SpecificFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.sourceString = null; // StringLiteralContext;
        this.sourceExpression = null; // ExpressionContext;
        this.fromDecimal = null; // DecimalLiteralContext;
        this.fromExpression = null; // ExpressionContext;
        this.forDecimal = null; // DecimalLiteralContext;
        this.forExpression = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	SUBSTR() {
	    return this.getToken(MySqlParser.SUBSTR, 0);
	};

	SUBSTRING() {
	    return this.getToken(MySqlParser.SUBSTRING, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSubstrFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSubstrFunctionCall(this);
		}
	}


}

MySqlParser.SubstrFunctionCallContext = SubstrFunctionCallContext;

class CaseFuncAlternativeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_caseFuncAlternative;
        this.condition = null; // FunctionArgContext
        this.consequent = null; // FunctionArgContext
    }

	WHEN() {
	    return this.getToken(MySqlParser.WHEN, 0);
	};

	THEN() {
	    return this.getToken(MySqlParser.THEN, 0);
	};

	functionArg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionArgContext);
	    } else {
	        return this.getTypedRuleContext(FunctionArgContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCaseFuncAlternative(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCaseFuncAlternative(this);
		}
	}


}



class LevelsInWeightStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_levelsInWeightString;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class LevelWeightRangeContext extends LevelsInWeightStringContext {

    constructor(parser, ctx) {
        super(parser);
        this.firstLevel = null; // DecimalLiteralContext;
        this.lastLevel = null; // DecimalLiteralContext;
        super.copyFrom(ctx);
    }

	LEVEL() {
	    return this.getToken(MySqlParser.LEVEL, 0);
	};

	MINUS() {
	    return this.getToken(MySqlParser.MINUS, 0);
	};

	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLevelWeightRange(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLevelWeightRange(this);
		}
	}


}

MySqlParser.LevelWeightRangeContext = LevelWeightRangeContext;

class LevelWeightListContext extends LevelsInWeightStringContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LEVEL() {
	    return this.getToken(MySqlParser.LEVEL, 0);
	};

	levelInWeightListElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LevelInWeightListElementContext);
	    } else {
	        return this.getTypedRuleContext(LevelInWeightListElementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLevelWeightList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLevelWeightList(this);
		}
	}


}

MySqlParser.LevelWeightListContext = LevelWeightListContext;

class LevelInWeightListElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_levelInWeightListElement;
        this.orderType = null; // Token
    }

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	ASC() {
	    return this.getToken(MySqlParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(MySqlParser.DESC, 0);
	};

	REVERSE() {
	    return this.getToken(MySqlParser.REVERSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLevelInWeightListElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLevelInWeightListElement(this);
		}
	}


}



class AggregateWindowedFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_aggregateWindowedFunction;
        this.aggregator = null; // Token
        this.starArg = null; // Token
        this.separator = null; // Token
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	functionArg() {
	    return this.getTypedRuleContext(FunctionArgContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	AVG() {
	    return this.getToken(MySqlParser.AVG, 0);
	};

	MAX() {
	    return this.getToken(MySqlParser.MAX, 0);
	};

	MIN() {
	    return this.getToken(MySqlParser.MIN, 0);
	};

	SUM() {
	    return this.getToken(MySqlParser.SUM, 0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	DISTINCT() {
	    return this.getToken(MySqlParser.DISTINCT, 0);
	};

	COUNT() {
	    return this.getToken(MySqlParser.COUNT, 0);
	};

	STAR() {
	    return this.getToken(MySqlParser.STAR, 0);
	};

	functionArgs() {
	    return this.getTypedRuleContext(FunctionArgsContext,0);
	};

	BIT_AND() {
	    return this.getToken(MySqlParser.BIT_AND, 0);
	};

	BIT_OR() {
	    return this.getToken(MySqlParser.BIT_OR, 0);
	};

	BIT_XOR() {
	    return this.getToken(MySqlParser.BIT_XOR, 0);
	};

	STD() {
	    return this.getToken(MySqlParser.STD, 0);
	};

	STDDEV() {
	    return this.getToken(MySqlParser.STDDEV, 0);
	};

	STDDEV_POP() {
	    return this.getToken(MySqlParser.STDDEV_POP, 0);
	};

	STDDEV_SAMP() {
	    return this.getToken(MySqlParser.STDDEV_SAMP, 0);
	};

	VAR_POP() {
	    return this.getToken(MySqlParser.VAR_POP, 0);
	};

	VAR_SAMP() {
	    return this.getToken(MySqlParser.VAR_SAMP, 0);
	};

	VARIANCE() {
	    return this.getToken(MySqlParser.VARIANCE, 0);
	};

	GROUP_CONCAT() {
	    return this.getToken(MySqlParser.GROUP_CONCAT, 0);
	};

	ORDER() {
	    return this.getToken(MySqlParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	orderByExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OrderByExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OrderByExpressionContext,i);
	    }
	};

	SEPARATOR() {
	    return this.getToken(MySqlParser.SEPARATOR, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAggregateWindowedFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAggregateWindowedFunction(this);
		}
	}


}



class ScalarFunctionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_scalarFunctionName;
    }

	functionNameBase() {
	    return this.getTypedRuleContext(FunctionNameBaseContext,0);
	};

	ASCII() {
	    return this.getToken(MySqlParser.ASCII, 0);
	};

	CURDATE() {
	    return this.getToken(MySqlParser.CURDATE, 0);
	};

	CURRENT_DATE() {
	    return this.getToken(MySqlParser.CURRENT_DATE, 0);
	};

	CURRENT_TIME() {
	    return this.getToken(MySqlParser.CURRENT_TIME, 0);
	};

	CURRENT_TIMESTAMP() {
	    return this.getToken(MySqlParser.CURRENT_TIMESTAMP, 0);
	};

	CURTIME() {
	    return this.getToken(MySqlParser.CURTIME, 0);
	};

	DATE_ADD() {
	    return this.getToken(MySqlParser.DATE_ADD, 0);
	};

	DATE_SUB() {
	    return this.getToken(MySqlParser.DATE_SUB, 0);
	};

	IF() {
	    return this.getToken(MySqlParser.IF, 0);
	};

	INSERT() {
	    return this.getToken(MySqlParser.INSERT, 0);
	};

	LOCALTIME() {
	    return this.getToken(MySqlParser.LOCALTIME, 0);
	};

	LOCALTIMESTAMP() {
	    return this.getToken(MySqlParser.LOCALTIMESTAMP, 0);
	};

	MID() {
	    return this.getToken(MySqlParser.MID, 0);
	};

	NOW() {
	    return this.getToken(MySqlParser.NOW, 0);
	};

	REPLACE() {
	    return this.getToken(MySqlParser.REPLACE, 0);
	};

	SUBSTR() {
	    return this.getToken(MySqlParser.SUBSTR, 0);
	};

	SUBSTRING() {
	    return this.getToken(MySqlParser.SUBSTRING, 0);
	};

	SYSDATE() {
	    return this.getToken(MySqlParser.SYSDATE, 0);
	};

	TRIM() {
	    return this.getToken(MySqlParser.TRIM, 0);
	};

	UTC_DATE() {
	    return this.getToken(MySqlParser.UTC_DATE, 0);
	};

	UTC_TIME() {
	    return this.getToken(MySqlParser.UTC_TIME, 0);
	};

	UTC_TIMESTAMP() {
	    return this.getToken(MySqlParser.UTC_TIMESTAMP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterScalarFunctionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitScalarFunctionName(this);
		}
	}


}



class PasswordFunctionClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_passwordFunctionClause;
        this.functionName = null; // Token
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	functionArg() {
	    return this.getTypedRuleContext(FunctionArgContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	PASSWORD() {
	    return this.getToken(MySqlParser.PASSWORD, 0);
	};

	OLD_PASSWORD() {
	    return this.getToken(MySqlParser.OLD_PASSWORD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPasswordFunctionClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPasswordFunctionClause(this);
		}
	}


}



class FunctionArgsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_functionArgs;
    }

	constant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstantContext);
	    } else {
	        return this.getTypedRuleContext(ConstantContext,i);
	    }
	};

	fullColumnName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FullColumnNameContext);
	    } else {
	        return this.getTypedRuleContext(FullColumnNameContext,i);
	    }
	};

	functionCall = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionCallContext);
	    } else {
	        return this.getTypedRuleContext(FunctionCallContext,i);
	    }
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFunctionArgs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFunctionArgs(this);
		}
	}


}



class FunctionArgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_functionArg;
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	fullColumnName() {
	    return this.getTypedRuleContext(FullColumnNameContext,0);
	};

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFunctionArg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFunctionArg(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class IsExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.testValue = null; // Token;
        super.copyFrom(ctx);
    }

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	IS() {
	    return this.getToken(MySqlParser.IS, 0);
	};

	TRUE() {
	    return this.getToken(MySqlParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(MySqlParser.FALSE, 0);
	};

	UNKNOWN() {
	    return this.getToken(MySqlParser.UNKNOWN, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIsExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIsExpression(this);
		}
	}


}

MySqlParser.IsExpressionContext = IsExpressionContext;

class NotExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.notOperator = null; // Token;
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	EXCLAMATION_SYMBOL() {
	    return this.getToken(MySqlParser.EXCLAMATION_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterNotExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitNotExpression(this);
		}
	}


}

MySqlParser.NotExpressionContext = NotExpressionContext;

class LogicalExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	logicalOperator() {
	    return this.getTypedRuleContext(LogicalOperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLogicalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLogicalExpression(this);
		}
	}


}

MySqlParser.LogicalExpressionContext = LogicalExpressionContext;

class PredicateExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPredicateExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPredicateExpression(this);
		}
	}


}

MySqlParser.PredicateExpressionContext = PredicateExpressionContext;

class PredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_predicate;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SoundsLikePredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predicate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PredicateContext);
	    } else {
	        return this.getTypedRuleContext(PredicateContext,i);
	    }
	};

	SOUNDS() {
	    return this.getToken(MySqlParser.SOUNDS, 0);
	};

	LIKE() {
	    return this.getToken(MySqlParser.LIKE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSoundsLikePredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSoundsLikePredicate(this);
		}
	}


}

MySqlParser.SoundsLikePredicateContext = SoundsLikePredicateContext;

class ExpressionAtomPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expressionAtom() {
	    return this.getTypedRuleContext(ExpressionAtomContext,0);
	};

	LOCAL_ID() {
	    return this.getToken(MySqlParser.LOCAL_ID, 0);
	};

	VAR_ASSIGN() {
	    return this.getToken(MySqlParser.VAR_ASSIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterExpressionAtomPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitExpressionAtomPredicate(this);
		}
	}


}

MySqlParser.ExpressionAtomPredicateContext = ExpressionAtomPredicateContext;

class JsonMemberOfPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predicate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PredicateContext);
	    } else {
	        return this.getTypedRuleContext(PredicateContext,i);
	    }
	};

	MEMBER() {
	    return this.getToken(MySqlParser.MEMBER, 0);
	};

	OF() {
	    return this.getToken(MySqlParser.OF, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterJsonMemberOfPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitJsonMemberOfPredicate(this);
		}
	}


}

MySqlParser.JsonMemberOfPredicateContext = JsonMemberOfPredicateContext;

class InPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	expressions() {
	    return this.getTypedRuleContext(ExpressionsContext,0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInPredicate(this);
		}
	}


}

MySqlParser.InPredicateContext = InPredicateContext;

class SubqueryComparasionPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        this.quantifier = null; // Token;
        super.copyFrom(ctx);
    }

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	comparisonOperator() {
	    return this.getTypedRuleContext(ComparisonOperatorContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	ANY() {
	    return this.getToken(MySqlParser.ANY, 0);
	};

	SOME() {
	    return this.getToken(MySqlParser.SOME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSubqueryComparasionPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSubqueryComparasionPredicate(this);
		}
	}


}

MySqlParser.SubqueryComparasionPredicateContext = SubqueryComparasionPredicateContext;

class BetweenPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predicate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PredicateContext);
	    } else {
	        return this.getTypedRuleContext(PredicateContext,i);
	    }
	};

	BETWEEN() {
	    return this.getToken(MySqlParser.BETWEEN, 0);
	};

	AND() {
	    return this.getToken(MySqlParser.AND, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBetweenPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBetweenPredicate(this);
		}
	}


}

MySqlParser.BetweenPredicateContext = BetweenPredicateContext;

class BinaryComparasionPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // PredicateContext;
        this.right = null; // PredicateContext;
        super.copyFrom(ctx);
    }

	comparisonOperator() {
	    return this.getTypedRuleContext(ComparisonOperatorContext,0);
	};

	predicate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PredicateContext);
	    } else {
	        return this.getTypedRuleContext(PredicateContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBinaryComparasionPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBinaryComparasionPredicate(this);
		}
	}


}

MySqlParser.BinaryComparasionPredicateContext = BinaryComparasionPredicateContext;

class IsNullPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	IS() {
	    return this.getToken(MySqlParser.IS, 0);
	};

	nullNotnull() {
	    return this.getTypedRuleContext(NullNotnullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIsNullPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIsNullPredicate(this);
		}
	}


}

MySqlParser.IsNullPredicateContext = IsNullPredicateContext;

class LikePredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predicate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PredicateContext);
	    } else {
	        return this.getTypedRuleContext(PredicateContext,i);
	    }
	};

	LIKE() {
	    return this.getToken(MySqlParser.LIKE, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	ESCAPE() {
	    return this.getToken(MySqlParser.ESCAPE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLikePredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLikePredicate(this);
		}
	}


}

MySqlParser.LikePredicateContext = LikePredicateContext;

class RegexpPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        this.regex = null; // Token;
        super.copyFrom(ctx);
    }

	predicate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PredicateContext);
	    } else {
	        return this.getTypedRuleContext(PredicateContext,i);
	    }
	};

	REGEXP() {
	    return this.getToken(MySqlParser.REGEXP, 0);
	};

	RLIKE() {
	    return this.getToken(MySqlParser.RLIKE, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRegexpPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRegexpPredicate(this);
		}
	}


}

MySqlParser.RegexpPredicateContext = RegexpPredicateContext;

class ExpressionAtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_expressionAtom;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class UnaryExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	unaryOperator() {
	    return this.getTypedRuleContext(UnaryOperatorContext,0);
	};

	expressionAtom() {
	    return this.getTypedRuleContext(ExpressionAtomContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUnaryExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUnaryExpressionAtom(this);
		}
	}


}

MySqlParser.UnaryExpressionAtomContext = UnaryExpressionAtomContext;

class CollateExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expressionAtom() {
	    return this.getTypedRuleContext(ExpressionAtomContext,0);
	};

	COLLATE() {
	    return this.getToken(MySqlParser.COLLATE, 0);
	};

	collationName() {
	    return this.getTypedRuleContext(CollationNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCollateExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCollateExpressionAtom(this);
		}
	}


}

MySqlParser.CollateExpressionAtomContext = CollateExpressionAtomContext;

class SubqueryExpessionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSubqueryExpessionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSubqueryExpessionAtom(this);
		}
	}


}

MySqlParser.SubqueryExpessionAtomContext = SubqueryExpessionAtomContext;

class MysqlVariableExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	mysqlVariable() {
	    return this.getTypedRuleContext(MysqlVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMysqlVariableExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMysqlVariableExpressionAtom(this);
		}
	}


}

MySqlParser.MysqlVariableExpressionAtomContext = MysqlVariableExpressionAtomContext;

class NestedExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterNestedExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitNestedExpressionAtom(this);
		}
	}


}

MySqlParser.NestedExpressionAtomContext = NestedExpressionAtomContext;

class NestedRowExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ROW() {
	    return this.getToken(MySqlParser.ROW, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterNestedRowExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitNestedRowExpressionAtom(this);
		}
	}


}

MySqlParser.NestedRowExpressionAtomContext = NestedRowExpressionAtomContext;

class MathExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionAtomContext;
        this.right = null; // ExpressionAtomContext;
        super.copyFrom(ctx);
    }

	mathOperator() {
	    return this.getTypedRuleContext(MathOperatorContext,0);
	};

	expressionAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionAtomContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionAtomContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMathExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMathExpressionAtom(this);
		}
	}


}

MySqlParser.MathExpressionAtomContext = MathExpressionAtomContext;

class IntervalExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INTERVAL() {
	    return this.getToken(MySqlParser.INTERVAL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	intervalType() {
	    return this.getTypedRuleContext(IntervalTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIntervalExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIntervalExpressionAtom(this);
		}
	}


}

MySqlParser.IntervalExpressionAtomContext = IntervalExpressionAtomContext;

class JsonExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionAtomContext;
        this.right = null; // ExpressionAtomContext;
        super.copyFrom(ctx);
    }

	jsonOperator() {
	    return this.getTypedRuleContext(JsonOperatorContext,0);
	};

	expressionAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionAtomContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionAtomContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterJsonExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitJsonExpressionAtom(this);
		}
	}


}

MySqlParser.JsonExpressionAtomContext = JsonExpressionAtomContext;

class ExistsExpessionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EXISTS() {
	    return this.getToken(MySqlParser.EXISTS, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterExistsExpessionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitExistsExpessionAtom(this);
		}
	}


}

MySqlParser.ExistsExpessionAtomContext = ExistsExpessionAtomContext;

class ConstantExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterConstantExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitConstantExpressionAtom(this);
		}
	}


}

MySqlParser.ConstantExpressionAtomContext = ConstantExpressionAtomContext;

class FunctionCallExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFunctionCallExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFunctionCallExpressionAtom(this);
		}
	}


}

MySqlParser.FunctionCallExpressionAtomContext = FunctionCallExpressionAtomContext;

class BinaryExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	expressionAtom() {
	    return this.getTypedRuleContext(ExpressionAtomContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBinaryExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBinaryExpressionAtom(this);
		}
	}


}

MySqlParser.BinaryExpressionAtomContext = BinaryExpressionAtomContext;

class FullColumnNameExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	fullColumnName() {
	    return this.getTypedRuleContext(FullColumnNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFullColumnNameExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFullColumnNameExpressionAtom(this);
		}
	}


}

MySqlParser.FullColumnNameExpressionAtomContext = FullColumnNameExpressionAtomContext;

class BitExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionAtomContext;
        this.right = null; // ExpressionAtomContext;
        super.copyFrom(ctx);
    }

	bitOperator() {
	    return this.getTypedRuleContext(BitOperatorContext,0);
	};

	expressionAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionAtomContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionAtomContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBitExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBitExpressionAtom(this);
		}
	}


}

MySqlParser.BitExpressionAtomContext = BitExpressionAtomContext;

class UnaryOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_unaryOperator;
    }

	EXCLAMATION_SYMBOL() {
	    return this.getToken(MySqlParser.EXCLAMATION_SYMBOL, 0);
	};

	BIT_NOT_OP() {
	    return this.getToken(MySqlParser.BIT_NOT_OP, 0);
	};

	PLUS() {
	    return this.getToken(MySqlParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(MySqlParser.MINUS, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUnaryOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUnaryOperator(this);
		}
	}


}



class ComparisonOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_comparisonOperator;
    }

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	GREATER_SYMBOL() {
	    return this.getToken(MySqlParser.GREATER_SYMBOL, 0);
	};

	LESS_SYMBOL() {
	    return this.getToken(MySqlParser.LESS_SYMBOL, 0);
	};

	EXCLAMATION_SYMBOL() {
	    return this.getToken(MySqlParser.EXCLAMATION_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterComparisonOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitComparisonOperator(this);
		}
	}


}



class LogicalOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_logicalOperator;
    }

	AND() {
	    return this.getToken(MySqlParser.AND, 0);
	};

	BIT_AND_OP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.BIT_AND_OP);
	    } else {
	        return this.getToken(MySqlParser.BIT_AND_OP, i);
	    }
	};


	XOR() {
	    return this.getToken(MySqlParser.XOR, 0);
	};

	OR() {
	    return this.getToken(MySqlParser.OR, 0);
	};

	BIT_OR_OP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.BIT_OR_OP);
	    } else {
	        return this.getToken(MySqlParser.BIT_OR_OP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLogicalOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLogicalOperator(this);
		}
	}


}



class BitOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_bitOperator;
    }

	LESS_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LESS_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.LESS_SYMBOL, i);
	    }
	};


	GREATER_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.GREATER_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.GREATER_SYMBOL, i);
	    }
	};


	BIT_AND_OP() {
	    return this.getToken(MySqlParser.BIT_AND_OP, 0);
	};

	BIT_XOR_OP() {
	    return this.getToken(MySqlParser.BIT_XOR_OP, 0);
	};

	BIT_OR_OP() {
	    return this.getToken(MySqlParser.BIT_OR_OP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBitOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBitOperator(this);
		}
	}


}



class MathOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_mathOperator;
    }

	STAR() {
	    return this.getToken(MySqlParser.STAR, 0);
	};

	DIVIDE() {
	    return this.getToken(MySqlParser.DIVIDE, 0);
	};

	MODULE() {
	    return this.getToken(MySqlParser.MODULE, 0);
	};

	DIV() {
	    return this.getToken(MySqlParser.DIV, 0);
	};

	MOD() {
	    return this.getToken(MySqlParser.MOD, 0);
	};

	PLUS() {
	    return this.getToken(MySqlParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(MySqlParser.MINUS, 0);
	};

	MINUSMINUS() {
	    return this.getToken(MySqlParser.MINUSMINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMathOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMathOperator(this);
		}
	}


}



class JsonOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_jsonOperator;
    }

	MINUS() {
	    return this.getToken(MySqlParser.MINUS, 0);
	};

	GREATER_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.GREATER_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.GREATER_SYMBOL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterJsonOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitJsonOperator(this);
		}
	}


}



class CharsetNameBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_charsetNameBase;
    }

	ARMSCII8() {
	    return this.getToken(MySqlParser.ARMSCII8, 0);
	};

	ASCII() {
	    return this.getToken(MySqlParser.ASCII, 0);
	};

	BIG5() {
	    return this.getToken(MySqlParser.BIG5, 0);
	};

	CP1250() {
	    return this.getToken(MySqlParser.CP1250, 0);
	};

	CP1251() {
	    return this.getToken(MySqlParser.CP1251, 0);
	};

	CP1256() {
	    return this.getToken(MySqlParser.CP1256, 0);
	};

	CP1257() {
	    return this.getToken(MySqlParser.CP1257, 0);
	};

	CP850() {
	    return this.getToken(MySqlParser.CP850, 0);
	};

	CP852() {
	    return this.getToken(MySqlParser.CP852, 0);
	};

	CP866() {
	    return this.getToken(MySqlParser.CP866, 0);
	};

	CP932() {
	    return this.getToken(MySqlParser.CP932, 0);
	};

	DEC8() {
	    return this.getToken(MySqlParser.DEC8, 0);
	};

	EUCJPMS() {
	    return this.getToken(MySqlParser.EUCJPMS, 0);
	};

	EUCKR() {
	    return this.getToken(MySqlParser.EUCKR, 0);
	};

	GB2312() {
	    return this.getToken(MySqlParser.GB2312, 0);
	};

	GBK() {
	    return this.getToken(MySqlParser.GBK, 0);
	};

	GEOSTD8() {
	    return this.getToken(MySqlParser.GEOSTD8, 0);
	};

	GREEK() {
	    return this.getToken(MySqlParser.GREEK, 0);
	};

	HEBREW() {
	    return this.getToken(MySqlParser.HEBREW, 0);
	};

	HP8() {
	    return this.getToken(MySqlParser.HP8, 0);
	};

	KEYBCS2() {
	    return this.getToken(MySqlParser.KEYBCS2, 0);
	};

	KOI8R() {
	    return this.getToken(MySqlParser.KOI8R, 0);
	};

	KOI8U() {
	    return this.getToken(MySqlParser.KOI8U, 0);
	};

	LATIN1() {
	    return this.getToken(MySqlParser.LATIN1, 0);
	};

	LATIN2() {
	    return this.getToken(MySqlParser.LATIN2, 0);
	};

	LATIN5() {
	    return this.getToken(MySqlParser.LATIN5, 0);
	};

	LATIN7() {
	    return this.getToken(MySqlParser.LATIN7, 0);
	};

	MACCE() {
	    return this.getToken(MySqlParser.MACCE, 0);
	};

	MACROMAN() {
	    return this.getToken(MySqlParser.MACROMAN, 0);
	};

	SJIS() {
	    return this.getToken(MySqlParser.SJIS, 0);
	};

	SWE7() {
	    return this.getToken(MySqlParser.SWE7, 0);
	};

	TIS620() {
	    return this.getToken(MySqlParser.TIS620, 0);
	};

	UCS2() {
	    return this.getToken(MySqlParser.UCS2, 0);
	};

	UJIS() {
	    return this.getToken(MySqlParser.UJIS, 0);
	};

	UTF16() {
	    return this.getToken(MySqlParser.UTF16, 0);
	};

	UTF16LE() {
	    return this.getToken(MySqlParser.UTF16LE, 0);
	};

	UTF32() {
	    return this.getToken(MySqlParser.UTF32, 0);
	};

	UTF8() {
	    return this.getToken(MySqlParser.UTF8, 0);
	};

	UTF8MB3() {
	    return this.getToken(MySqlParser.UTF8MB3, 0);
	};

	UTF8MB4() {
	    return this.getToken(MySqlParser.UTF8MB4, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCharsetNameBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCharsetNameBase(this);
		}
	}


}



class TransactionLevelBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_transactionLevelBase;
    }

	REPEATABLE() {
	    return this.getToken(MySqlParser.REPEATABLE, 0);
	};

	COMMITTED() {
	    return this.getToken(MySqlParser.COMMITTED, 0);
	};

	UNCOMMITTED() {
	    return this.getToken(MySqlParser.UNCOMMITTED, 0);
	};

	SERIALIZABLE() {
	    return this.getToken(MySqlParser.SERIALIZABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTransactionLevelBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTransactionLevelBase(this);
		}
	}


}



class PrivilegesBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_privilegesBase;
    }

	TABLES() {
	    return this.getToken(MySqlParser.TABLES, 0);
	};

	ROUTINE() {
	    return this.getToken(MySqlParser.ROUTINE, 0);
	};

	EXECUTE() {
	    return this.getToken(MySqlParser.EXECUTE, 0);
	};

	FILE() {
	    return this.getToken(MySqlParser.FILE, 0);
	};

	PROCESS() {
	    return this.getToken(MySqlParser.PROCESS, 0);
	};

	RELOAD() {
	    return this.getToken(MySqlParser.RELOAD, 0);
	};

	SHUTDOWN() {
	    return this.getToken(MySqlParser.SHUTDOWN, 0);
	};

	SUPER() {
	    return this.getToken(MySqlParser.SUPER, 0);
	};

	PRIVILEGES() {
	    return this.getToken(MySqlParser.PRIVILEGES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPrivilegesBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPrivilegesBase(this);
		}
	}


}



class IntervalTypeBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_intervalTypeBase;
    }

	QUARTER() {
	    return this.getToken(MySqlParser.QUARTER, 0);
	};

	MONTH() {
	    return this.getToken(MySqlParser.MONTH, 0);
	};

	DAY() {
	    return this.getToken(MySqlParser.DAY, 0);
	};

	HOUR() {
	    return this.getToken(MySqlParser.HOUR, 0);
	};

	MINUTE() {
	    return this.getToken(MySqlParser.MINUTE, 0);
	};

	WEEK() {
	    return this.getToken(MySqlParser.WEEK, 0);
	};

	SECOND() {
	    return this.getToken(MySqlParser.SECOND, 0);
	};

	MICROSECOND() {
	    return this.getToken(MySqlParser.MICROSECOND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIntervalTypeBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIntervalTypeBase(this);
		}
	}


}



class DataTypeBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dataTypeBase;
    }

	DATE() {
	    return this.getToken(MySqlParser.DATE, 0);
	};

	TIME() {
	    return this.getToken(MySqlParser.TIME, 0);
	};

	TIMESTAMP() {
	    return this.getToken(MySqlParser.TIMESTAMP, 0);
	};

	DATETIME() {
	    return this.getToken(MySqlParser.DATETIME, 0);
	};

	YEAR() {
	    return this.getToken(MySqlParser.YEAR, 0);
	};

	ENUM() {
	    return this.getToken(MySqlParser.ENUM, 0);
	};

	TEXT() {
	    return this.getToken(MySqlParser.TEXT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDataTypeBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDataTypeBase(this);
		}
	}


}



class KeywordsCanBeIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_keywordsCanBeId;
    }

	ACCOUNT() {
	    return this.getToken(MySqlParser.ACCOUNT, 0);
	};

	ACTION() {
	    return this.getToken(MySqlParser.ACTION, 0);
	};

	AFTER() {
	    return this.getToken(MySqlParser.AFTER, 0);
	};

	AGGREGATE() {
	    return this.getToken(MySqlParser.AGGREGATE, 0);
	};

	ALGORITHM() {
	    return this.getToken(MySqlParser.ALGORITHM, 0);
	};

	ANY() {
	    return this.getToken(MySqlParser.ANY, 0);
	};

	AT() {
	    return this.getToken(MySqlParser.AT, 0);
	};

	AUDIT_ADMIN() {
	    return this.getToken(MySqlParser.AUDIT_ADMIN, 0);
	};

	AUTHORS() {
	    return this.getToken(MySqlParser.AUTHORS, 0);
	};

	AUTOCOMMIT() {
	    return this.getToken(MySqlParser.AUTOCOMMIT, 0);
	};

	AUTOEXTEND_SIZE() {
	    return this.getToken(MySqlParser.AUTOEXTEND_SIZE, 0);
	};

	AUTO_INCREMENT() {
	    return this.getToken(MySqlParser.AUTO_INCREMENT, 0);
	};

	AVG() {
	    return this.getToken(MySqlParser.AVG, 0);
	};

	AVG_ROW_LENGTH() {
	    return this.getToken(MySqlParser.AVG_ROW_LENGTH, 0);
	};

	BACKUP_ADMIN() {
	    return this.getToken(MySqlParser.BACKUP_ADMIN, 0);
	};

	BEGIN() {
	    return this.getToken(MySqlParser.BEGIN, 0);
	};

	BINLOG() {
	    return this.getToken(MySqlParser.BINLOG, 0);
	};

	BINLOG_ADMIN() {
	    return this.getToken(MySqlParser.BINLOG_ADMIN, 0);
	};

	BINLOG_ENCRYPTION_ADMIN() {
	    return this.getToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0);
	};

	BIT() {
	    return this.getToken(MySqlParser.BIT, 0);
	};

	BIT_AND() {
	    return this.getToken(MySqlParser.BIT_AND, 0);
	};

	BIT_OR() {
	    return this.getToken(MySqlParser.BIT_OR, 0);
	};

	BIT_XOR() {
	    return this.getToken(MySqlParser.BIT_XOR, 0);
	};

	BLOCK() {
	    return this.getToken(MySqlParser.BLOCK, 0);
	};

	BOOL() {
	    return this.getToken(MySqlParser.BOOL, 0);
	};

	BOOLEAN() {
	    return this.getToken(MySqlParser.BOOLEAN, 0);
	};

	BTREE() {
	    return this.getToken(MySqlParser.BTREE, 0);
	};

	CACHE() {
	    return this.getToken(MySqlParser.CACHE, 0);
	};

	CASCADED() {
	    return this.getToken(MySqlParser.CASCADED, 0);
	};

	CHAIN() {
	    return this.getToken(MySqlParser.CHAIN, 0);
	};

	CHANGED() {
	    return this.getToken(MySqlParser.CHANGED, 0);
	};

	CHANNEL() {
	    return this.getToken(MySqlParser.CHANNEL, 0);
	};

	CHECKSUM() {
	    return this.getToken(MySqlParser.CHECKSUM, 0);
	};

	PAGE_CHECKSUM() {
	    return this.getToken(MySqlParser.PAGE_CHECKSUM, 0);
	};

	CATALOG_NAME() {
	    return this.getToken(MySqlParser.CATALOG_NAME, 0);
	};

	CIPHER() {
	    return this.getToken(MySqlParser.CIPHER, 0);
	};

	CLASS_ORIGIN() {
	    return this.getToken(MySqlParser.CLASS_ORIGIN, 0);
	};

	CLIENT() {
	    return this.getToken(MySqlParser.CLIENT, 0);
	};

	CLONE_ADMIN() {
	    return this.getToken(MySqlParser.CLONE_ADMIN, 0);
	};

	CLOSE() {
	    return this.getToken(MySqlParser.CLOSE, 0);
	};

	COALESCE() {
	    return this.getToken(MySqlParser.COALESCE, 0);
	};

	CODE() {
	    return this.getToken(MySqlParser.CODE, 0);
	};

	COLUMNS() {
	    return this.getToken(MySqlParser.COLUMNS, 0);
	};

	COLUMN_FORMAT() {
	    return this.getToken(MySqlParser.COLUMN_FORMAT, 0);
	};

	COLUMN_NAME() {
	    return this.getToken(MySqlParser.COLUMN_NAME, 0);
	};

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	COMMIT() {
	    return this.getToken(MySqlParser.COMMIT, 0);
	};

	COMPACT() {
	    return this.getToken(MySqlParser.COMPACT, 0);
	};

	COMPLETION() {
	    return this.getToken(MySqlParser.COMPLETION, 0);
	};

	COMPRESSED() {
	    return this.getToken(MySqlParser.COMPRESSED, 0);
	};

	COMPRESSION() {
	    return this.getToken(MySqlParser.COMPRESSION, 0);
	};

	CONCURRENT() {
	    return this.getToken(MySqlParser.CONCURRENT, 0);
	};

	CONNECTION() {
	    return this.getToken(MySqlParser.CONNECTION, 0);
	};

	CONNECTION_ADMIN() {
	    return this.getToken(MySqlParser.CONNECTION_ADMIN, 0);
	};

	CONSISTENT() {
	    return this.getToken(MySqlParser.CONSISTENT, 0);
	};

	CONSTRAINT_CATALOG() {
	    return this.getToken(MySqlParser.CONSTRAINT_CATALOG, 0);
	};

	CONSTRAINT_NAME() {
	    return this.getToken(MySqlParser.CONSTRAINT_NAME, 0);
	};

	CONSTRAINT_SCHEMA() {
	    return this.getToken(MySqlParser.CONSTRAINT_SCHEMA, 0);
	};

	CONTAINS() {
	    return this.getToken(MySqlParser.CONTAINS, 0);
	};

	CONTEXT() {
	    return this.getToken(MySqlParser.CONTEXT, 0);
	};

	CONTRIBUTORS() {
	    return this.getToken(MySqlParser.CONTRIBUTORS, 0);
	};

	COPY() {
	    return this.getToken(MySqlParser.COPY, 0);
	};

	COUNT() {
	    return this.getToken(MySqlParser.COUNT, 0);
	};

	CPU() {
	    return this.getToken(MySqlParser.CPU, 0);
	};

	CURRENT() {
	    return this.getToken(MySqlParser.CURRENT, 0);
	};

	CURSOR_NAME() {
	    return this.getToken(MySqlParser.CURSOR_NAME, 0);
	};

	DATA() {
	    return this.getToken(MySqlParser.DATA, 0);
	};

	DATAFILE() {
	    return this.getToken(MySqlParser.DATAFILE, 0);
	};

	DEALLOCATE() {
	    return this.getToken(MySqlParser.DEALLOCATE, 0);
	};

	DEFAULT_AUTH() {
	    return this.getToken(MySqlParser.DEFAULT_AUTH, 0);
	};

	DEFINER() {
	    return this.getToken(MySqlParser.DEFINER, 0);
	};

	DELAY_KEY_WRITE() {
	    return this.getToken(MySqlParser.DELAY_KEY_WRITE, 0);
	};

	DES_KEY_FILE() {
	    return this.getToken(MySqlParser.DES_KEY_FILE, 0);
	};

	DIAGNOSTICS() {
	    return this.getToken(MySqlParser.DIAGNOSTICS, 0);
	};

	DIRECTORY() {
	    return this.getToken(MySqlParser.DIRECTORY, 0);
	};

	DISABLE() {
	    return this.getToken(MySqlParser.DISABLE, 0);
	};

	DISCARD() {
	    return this.getToken(MySqlParser.DISCARD, 0);
	};

	DISK() {
	    return this.getToken(MySqlParser.DISK, 0);
	};

	DO() {
	    return this.getToken(MySqlParser.DO, 0);
	};

	DUMPFILE() {
	    return this.getToken(MySqlParser.DUMPFILE, 0);
	};

	DUPLICATE() {
	    return this.getToken(MySqlParser.DUPLICATE, 0);
	};

	DYNAMIC() {
	    return this.getToken(MySqlParser.DYNAMIC, 0);
	};

	ENABLE() {
	    return this.getToken(MySqlParser.ENABLE, 0);
	};

	ENCRYPTION() {
	    return this.getToken(MySqlParser.ENCRYPTION, 0);
	};

	ENCRYPTION_KEY_ADMIN() {
	    return this.getToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0);
	};

	END() {
	    return this.getToken(MySqlParser.END, 0);
	};

	ENDS() {
	    return this.getToken(MySqlParser.ENDS, 0);
	};

	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	ENGINES() {
	    return this.getToken(MySqlParser.ENGINES, 0);
	};

	ERROR() {
	    return this.getToken(MySqlParser.ERROR, 0);
	};

	ERRORS() {
	    return this.getToken(MySqlParser.ERRORS, 0);
	};

	ESCAPE() {
	    return this.getToken(MySqlParser.ESCAPE, 0);
	};

	EVEN() {
	    return this.getToken(MySqlParser.EVEN, 0);
	};

	EVENT() {
	    return this.getToken(MySqlParser.EVENT, 0);
	};

	EVENTS() {
	    return this.getToken(MySqlParser.EVENTS, 0);
	};

	EVERY() {
	    return this.getToken(MySqlParser.EVERY, 0);
	};

	EXCHANGE() {
	    return this.getToken(MySqlParser.EXCHANGE, 0);
	};

	EXCLUSIVE() {
	    return this.getToken(MySqlParser.EXCLUSIVE, 0);
	};

	EXPIRE() {
	    return this.getToken(MySqlParser.EXPIRE, 0);
	};

	EXPORT() {
	    return this.getToken(MySqlParser.EXPORT, 0);
	};

	EXTENDED() {
	    return this.getToken(MySqlParser.EXTENDED, 0);
	};

	EXTENT_SIZE() {
	    return this.getToken(MySqlParser.EXTENT_SIZE, 0);
	};

	FAST() {
	    return this.getToken(MySqlParser.FAST, 0);
	};

	FAULTS() {
	    return this.getToken(MySqlParser.FAULTS, 0);
	};

	FIELDS() {
	    return this.getToken(MySqlParser.FIELDS, 0);
	};

	FILE_BLOCK_SIZE() {
	    return this.getToken(MySqlParser.FILE_BLOCK_SIZE, 0);
	};

	FILTER() {
	    return this.getToken(MySqlParser.FILTER, 0);
	};

	FIREWALL_ADMIN() {
	    return this.getToken(MySqlParser.FIREWALL_ADMIN, 0);
	};

	FIREWALL_USER() {
	    return this.getToken(MySqlParser.FIREWALL_USER, 0);
	};

	FIRST() {
	    return this.getToken(MySqlParser.FIRST, 0);
	};

	FIXED() {
	    return this.getToken(MySqlParser.FIXED, 0);
	};

	FLUSH() {
	    return this.getToken(MySqlParser.FLUSH, 0);
	};

	FOLLOWS() {
	    return this.getToken(MySqlParser.FOLLOWS, 0);
	};

	FOUND() {
	    return this.getToken(MySqlParser.FOUND, 0);
	};

	FULL() {
	    return this.getToken(MySqlParser.FULL, 0);
	};

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	GENERAL() {
	    return this.getToken(MySqlParser.GENERAL, 0);
	};

	GLOBAL() {
	    return this.getToken(MySqlParser.GLOBAL, 0);
	};

	GRANTS() {
	    return this.getToken(MySqlParser.GRANTS, 0);
	};

	GROUP_CONCAT() {
	    return this.getToken(MySqlParser.GROUP_CONCAT, 0);
	};

	GROUP_REPLICATION() {
	    return this.getToken(MySqlParser.GROUP_REPLICATION, 0);
	};

	GROUP_REPLICATION_ADMIN() {
	    return this.getToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0);
	};

	HANDLER() {
	    return this.getToken(MySqlParser.HANDLER, 0);
	};

	HASH() {
	    return this.getToken(MySqlParser.HASH, 0);
	};

	HELP() {
	    return this.getToken(MySqlParser.HELP, 0);
	};

	HOST() {
	    return this.getToken(MySqlParser.HOST, 0);
	};

	HOSTS() {
	    return this.getToken(MySqlParser.HOSTS, 0);
	};

	IDENTIFIED() {
	    return this.getToken(MySqlParser.IDENTIFIED, 0);
	};

	IGNORE_SERVER_IDS() {
	    return this.getToken(MySqlParser.IGNORE_SERVER_IDS, 0);
	};

	IMPORT() {
	    return this.getToken(MySqlParser.IMPORT, 0);
	};

	INDEXES() {
	    return this.getToken(MySqlParser.INDEXES, 0);
	};

	INITIAL_SIZE() {
	    return this.getToken(MySqlParser.INITIAL_SIZE, 0);
	};

	INNODB_REDO_LOG_ARCHIVE() {
	    return this.getToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0);
	};

	INPLACE() {
	    return this.getToken(MySqlParser.INPLACE, 0);
	};

	INSERT_METHOD() {
	    return this.getToken(MySqlParser.INSERT_METHOD, 0);
	};

	INSTALL() {
	    return this.getToken(MySqlParser.INSTALL, 0);
	};

	INSTANCE() {
	    return this.getToken(MySqlParser.INSTANCE, 0);
	};

	INTERNAL() {
	    return this.getToken(MySqlParser.INTERNAL, 0);
	};

	INVOKER() {
	    return this.getToken(MySqlParser.INVOKER, 0);
	};

	IO() {
	    return this.getToken(MySqlParser.IO, 0);
	};

	IO_THREAD() {
	    return this.getToken(MySqlParser.IO_THREAD, 0);
	};

	IPC() {
	    return this.getToken(MySqlParser.IPC, 0);
	};

	ISOLATION() {
	    return this.getToken(MySqlParser.ISOLATION, 0);
	};

	ISSUER() {
	    return this.getToken(MySqlParser.ISSUER, 0);
	};

	JSON() {
	    return this.getToken(MySqlParser.JSON, 0);
	};

	KEY_BLOCK_SIZE() {
	    return this.getToken(MySqlParser.KEY_BLOCK_SIZE, 0);
	};

	LANGUAGE() {
	    return this.getToken(MySqlParser.LANGUAGE, 0);
	};

	LAST() {
	    return this.getToken(MySqlParser.LAST, 0);
	};

	LEAVES() {
	    return this.getToken(MySqlParser.LEAVES, 0);
	};

	LESS() {
	    return this.getToken(MySqlParser.LESS, 0);
	};

	LEVEL() {
	    return this.getToken(MySqlParser.LEVEL, 0);
	};

	LIST() {
	    return this.getToken(MySqlParser.LIST, 0);
	};

	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	LOGFILE() {
	    return this.getToken(MySqlParser.LOGFILE, 0);
	};

	LOGS() {
	    return this.getToken(MySqlParser.LOGS, 0);
	};

	MASTER() {
	    return this.getToken(MySqlParser.MASTER, 0);
	};

	MASTER_AUTO_POSITION() {
	    return this.getToken(MySqlParser.MASTER_AUTO_POSITION, 0);
	};

	MASTER_CONNECT_RETRY() {
	    return this.getToken(MySqlParser.MASTER_CONNECT_RETRY, 0);
	};

	MASTER_DELAY() {
	    return this.getToken(MySqlParser.MASTER_DELAY, 0);
	};

	MASTER_HEARTBEAT_PERIOD() {
	    return this.getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0);
	};

	MASTER_HOST() {
	    return this.getToken(MySqlParser.MASTER_HOST, 0);
	};

	MASTER_LOG_FILE() {
	    return this.getToken(MySqlParser.MASTER_LOG_FILE, 0);
	};

	MASTER_LOG_POS() {
	    return this.getToken(MySqlParser.MASTER_LOG_POS, 0);
	};

	MASTER_PASSWORD() {
	    return this.getToken(MySqlParser.MASTER_PASSWORD, 0);
	};

	MASTER_PORT() {
	    return this.getToken(MySqlParser.MASTER_PORT, 0);
	};

	MASTER_RETRY_COUNT() {
	    return this.getToken(MySqlParser.MASTER_RETRY_COUNT, 0);
	};

	MASTER_SSL() {
	    return this.getToken(MySqlParser.MASTER_SSL, 0);
	};

	MASTER_SSL_CA() {
	    return this.getToken(MySqlParser.MASTER_SSL_CA, 0);
	};

	MASTER_SSL_CAPATH() {
	    return this.getToken(MySqlParser.MASTER_SSL_CAPATH, 0);
	};

	MASTER_SSL_CERT() {
	    return this.getToken(MySqlParser.MASTER_SSL_CERT, 0);
	};

	MASTER_SSL_CIPHER() {
	    return this.getToken(MySqlParser.MASTER_SSL_CIPHER, 0);
	};

	MASTER_SSL_CRL() {
	    return this.getToken(MySqlParser.MASTER_SSL_CRL, 0);
	};

	MASTER_SSL_CRLPATH() {
	    return this.getToken(MySqlParser.MASTER_SSL_CRLPATH, 0);
	};

	MASTER_SSL_KEY() {
	    return this.getToken(MySqlParser.MASTER_SSL_KEY, 0);
	};

	MASTER_TLS_VERSION() {
	    return this.getToken(MySqlParser.MASTER_TLS_VERSION, 0);
	};

	MASTER_USER() {
	    return this.getToken(MySqlParser.MASTER_USER, 0);
	};

	MAX_CONNECTIONS_PER_HOUR() {
	    return this.getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0);
	};

	MAX_QUERIES_PER_HOUR() {
	    return this.getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0);
	};

	MAX() {
	    return this.getToken(MySqlParser.MAX, 0);
	};

	MAX_ROWS() {
	    return this.getToken(MySqlParser.MAX_ROWS, 0);
	};

	MAX_SIZE() {
	    return this.getToken(MySqlParser.MAX_SIZE, 0);
	};

	MAX_UPDATES_PER_HOUR() {
	    return this.getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0);
	};

	MAX_USER_CONNECTIONS() {
	    return this.getToken(MySqlParser.MAX_USER_CONNECTIONS, 0);
	};

	MEDIUM() {
	    return this.getToken(MySqlParser.MEDIUM, 0);
	};

	MEMBER() {
	    return this.getToken(MySqlParser.MEMBER, 0);
	};

	MEMORY() {
	    return this.getToken(MySqlParser.MEMORY, 0);
	};

	MERGE() {
	    return this.getToken(MySqlParser.MERGE, 0);
	};

	MESSAGE_TEXT() {
	    return this.getToken(MySqlParser.MESSAGE_TEXT, 0);
	};

	MID() {
	    return this.getToken(MySqlParser.MID, 0);
	};

	MIGRATE() {
	    return this.getToken(MySqlParser.MIGRATE, 0);
	};

	MIN() {
	    return this.getToken(MySqlParser.MIN, 0);
	};

	MIN_ROWS() {
	    return this.getToken(MySqlParser.MIN_ROWS, 0);
	};

	MODE() {
	    return this.getToken(MySqlParser.MODE, 0);
	};

	MODIFY() {
	    return this.getToken(MySqlParser.MODIFY, 0);
	};

	MUTEX() {
	    return this.getToken(MySqlParser.MUTEX, 0);
	};

	MYSQL() {
	    return this.getToken(MySqlParser.MYSQL, 0);
	};

	MYSQL_ERRNO() {
	    return this.getToken(MySqlParser.MYSQL_ERRNO, 0);
	};

	NAME() {
	    return this.getToken(MySqlParser.NAME, 0);
	};

	NAMES() {
	    return this.getToken(MySqlParser.NAMES, 0);
	};

	NCHAR() {
	    return this.getToken(MySqlParser.NCHAR, 0);
	};

	NDB_STORED_USER() {
	    return this.getToken(MySqlParser.NDB_STORED_USER, 0);
	};

	NEVER() {
	    return this.getToken(MySqlParser.NEVER, 0);
	};

	NEXT() {
	    return this.getToken(MySqlParser.NEXT, 0);
	};

	NO() {
	    return this.getToken(MySqlParser.NO, 0);
	};

	NODEGROUP() {
	    return this.getToken(MySqlParser.NODEGROUP, 0);
	};

	NONE() {
	    return this.getToken(MySqlParser.NONE, 0);
	};

	NUMBER() {
	    return this.getToken(MySqlParser.NUMBER, 0);
	};

	OFFLINE() {
	    return this.getToken(MySqlParser.OFFLINE, 0);
	};

	OFFSET() {
	    return this.getToken(MySqlParser.OFFSET, 0);
	};

	OF() {
	    return this.getToken(MySqlParser.OF, 0);
	};

	OJ() {
	    return this.getToken(MySqlParser.OJ, 0);
	};

	OLD_PASSWORD() {
	    return this.getToken(MySqlParser.OLD_PASSWORD, 0);
	};

	ONE() {
	    return this.getToken(MySqlParser.ONE, 0);
	};

	ONLINE() {
	    return this.getToken(MySqlParser.ONLINE, 0);
	};

	ONLY() {
	    return this.getToken(MySqlParser.ONLY, 0);
	};

	OPEN() {
	    return this.getToken(MySqlParser.OPEN, 0);
	};

	OPTIMIZER_COSTS() {
	    return this.getToken(MySqlParser.OPTIMIZER_COSTS, 0);
	};

	OPTIONS() {
	    return this.getToken(MySqlParser.OPTIONS, 0);
	};

	OWNER() {
	    return this.getToken(MySqlParser.OWNER, 0);
	};

	PACK_KEYS() {
	    return this.getToken(MySqlParser.PACK_KEYS, 0);
	};

	PAGE() {
	    return this.getToken(MySqlParser.PAGE, 0);
	};

	PARSER() {
	    return this.getToken(MySqlParser.PARSER, 0);
	};

	PARTIAL() {
	    return this.getToken(MySqlParser.PARTIAL, 0);
	};

	PARTITIONING() {
	    return this.getToken(MySqlParser.PARTITIONING, 0);
	};

	PARTITIONS() {
	    return this.getToken(MySqlParser.PARTITIONS, 0);
	};

	PASSWORD() {
	    return this.getToken(MySqlParser.PASSWORD, 0);
	};

	PERSIST_RO_VARIABLES_ADMIN() {
	    return this.getToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0);
	};

	PHASE() {
	    return this.getToken(MySqlParser.PHASE, 0);
	};

	PLUGINS() {
	    return this.getToken(MySqlParser.PLUGINS, 0);
	};

	PLUGIN_DIR() {
	    return this.getToken(MySqlParser.PLUGIN_DIR, 0);
	};

	PLUGIN() {
	    return this.getToken(MySqlParser.PLUGIN, 0);
	};

	PORT() {
	    return this.getToken(MySqlParser.PORT, 0);
	};

	PRECEDES() {
	    return this.getToken(MySqlParser.PRECEDES, 0);
	};

	PREPARE() {
	    return this.getToken(MySqlParser.PREPARE, 0);
	};

	PRESERVE() {
	    return this.getToken(MySqlParser.PRESERVE, 0);
	};

	PREV() {
	    return this.getToken(MySqlParser.PREV, 0);
	};

	PROCESSLIST() {
	    return this.getToken(MySqlParser.PROCESSLIST, 0);
	};

	PROFILE() {
	    return this.getToken(MySqlParser.PROFILE, 0);
	};

	PROFILES() {
	    return this.getToken(MySqlParser.PROFILES, 0);
	};

	PROXY() {
	    return this.getToken(MySqlParser.PROXY, 0);
	};

	QUERY() {
	    return this.getToken(MySqlParser.QUERY, 0);
	};

	QUICK() {
	    return this.getToken(MySqlParser.QUICK, 0);
	};

	REBUILD() {
	    return this.getToken(MySqlParser.REBUILD, 0);
	};

	RECOVER() {
	    return this.getToken(MySqlParser.RECOVER, 0);
	};

	REDO_BUFFER_SIZE() {
	    return this.getToken(MySqlParser.REDO_BUFFER_SIZE, 0);
	};

	REDUNDANT() {
	    return this.getToken(MySqlParser.REDUNDANT, 0);
	};

	RELAY() {
	    return this.getToken(MySqlParser.RELAY, 0);
	};

	RELAYLOG() {
	    return this.getToken(MySqlParser.RELAYLOG, 0);
	};

	RELAY_LOG_FILE() {
	    return this.getToken(MySqlParser.RELAY_LOG_FILE, 0);
	};

	RELAY_LOG_POS() {
	    return this.getToken(MySqlParser.RELAY_LOG_POS, 0);
	};

	REMOVE() {
	    return this.getToken(MySqlParser.REMOVE, 0);
	};

	REORGANIZE() {
	    return this.getToken(MySqlParser.REORGANIZE, 0);
	};

	REPAIR() {
	    return this.getToken(MySqlParser.REPAIR, 0);
	};

	REPLICATE_DO_DB() {
	    return this.getToken(MySqlParser.REPLICATE_DO_DB, 0);
	};

	REPLICATE_DO_TABLE() {
	    return this.getToken(MySqlParser.REPLICATE_DO_TABLE, 0);
	};

	REPLICATE_IGNORE_DB() {
	    return this.getToken(MySqlParser.REPLICATE_IGNORE_DB, 0);
	};

	REPLICATE_IGNORE_TABLE() {
	    return this.getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0);
	};

	REPLICATE_REWRITE_DB() {
	    return this.getToken(MySqlParser.REPLICATE_REWRITE_DB, 0);
	};

	REPLICATE_WILD_DO_TABLE() {
	    return this.getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0);
	};

	REPLICATE_WILD_IGNORE_TABLE() {
	    return this.getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0);
	};

	REPLICATION() {
	    return this.getToken(MySqlParser.REPLICATION, 0);
	};

	REPLICATION_APPLIER() {
	    return this.getToken(MySqlParser.REPLICATION_APPLIER, 0);
	};

	REPLICATION_SLAVE_ADMIN() {
	    return this.getToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0);
	};

	RESET() {
	    return this.getToken(MySqlParser.RESET, 0);
	};

	RESOURCE_GROUP_ADMIN() {
	    return this.getToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0);
	};

	RESOURCE_GROUP_USER() {
	    return this.getToken(MySqlParser.RESOURCE_GROUP_USER, 0);
	};

	RESUME() {
	    return this.getToken(MySqlParser.RESUME, 0);
	};

	RETURNED_SQLSTATE() {
	    return this.getToken(MySqlParser.RETURNED_SQLSTATE, 0);
	};

	RETURNS() {
	    return this.getToken(MySqlParser.RETURNS, 0);
	};

	ROLE() {
	    return this.getToken(MySqlParser.ROLE, 0);
	};

	ROLE_ADMIN() {
	    return this.getToken(MySqlParser.ROLE_ADMIN, 0);
	};

	ROLLBACK() {
	    return this.getToken(MySqlParser.ROLLBACK, 0);
	};

	ROLLUP() {
	    return this.getToken(MySqlParser.ROLLUP, 0);
	};

	ROTATE() {
	    return this.getToken(MySqlParser.ROTATE, 0);
	};

	ROW() {
	    return this.getToken(MySqlParser.ROW, 0);
	};

	ROWS() {
	    return this.getToken(MySqlParser.ROWS, 0);
	};

	ROW_FORMAT() {
	    return this.getToken(MySqlParser.ROW_FORMAT, 0);
	};

	SAVEPOINT() {
	    return this.getToken(MySqlParser.SAVEPOINT, 0);
	};

	SCHEDULE() {
	    return this.getToken(MySqlParser.SCHEDULE, 0);
	};

	SCHEMA_NAME() {
	    return this.getToken(MySqlParser.SCHEMA_NAME, 0);
	};

	SECURITY() {
	    return this.getToken(MySqlParser.SECURITY, 0);
	};

	SERIAL() {
	    return this.getToken(MySqlParser.SERIAL, 0);
	};

	SERVER() {
	    return this.getToken(MySqlParser.SERVER, 0);
	};

	SESSION() {
	    return this.getToken(MySqlParser.SESSION, 0);
	};

	SESSION_VARIABLES_ADMIN() {
	    return this.getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0);
	};

	SET_USER_ID() {
	    return this.getToken(MySqlParser.SET_USER_ID, 0);
	};

	SHARE() {
	    return this.getToken(MySqlParser.SHARE, 0);
	};

	SHARED() {
	    return this.getToken(MySqlParser.SHARED, 0);
	};

	SHOW_ROUTINE() {
	    return this.getToken(MySqlParser.SHOW_ROUTINE, 0);
	};

	SIGNED() {
	    return this.getToken(MySqlParser.SIGNED, 0);
	};

	SIMPLE() {
	    return this.getToken(MySqlParser.SIMPLE, 0);
	};

	SLAVE() {
	    return this.getToken(MySqlParser.SLAVE, 0);
	};

	SLOW() {
	    return this.getToken(MySqlParser.SLOW, 0);
	};

	SNAPSHOT() {
	    return this.getToken(MySqlParser.SNAPSHOT, 0);
	};

	SOCKET() {
	    return this.getToken(MySqlParser.SOCKET, 0);
	};

	SOME() {
	    return this.getToken(MySqlParser.SOME, 0);
	};

	SONAME() {
	    return this.getToken(MySqlParser.SONAME, 0);
	};

	SOUNDS() {
	    return this.getToken(MySqlParser.SOUNDS, 0);
	};

	SOURCE() {
	    return this.getToken(MySqlParser.SOURCE, 0);
	};

	SQL_AFTER_GTIDS() {
	    return this.getToken(MySqlParser.SQL_AFTER_GTIDS, 0);
	};

	SQL_AFTER_MTS_GAPS() {
	    return this.getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0);
	};

	SQL_BEFORE_GTIDS() {
	    return this.getToken(MySqlParser.SQL_BEFORE_GTIDS, 0);
	};

	SQL_BUFFER_RESULT() {
	    return this.getToken(MySqlParser.SQL_BUFFER_RESULT, 0);
	};

	SQL_CACHE() {
	    return this.getToken(MySqlParser.SQL_CACHE, 0);
	};

	SQL_NO_CACHE() {
	    return this.getToken(MySqlParser.SQL_NO_CACHE, 0);
	};

	SQL_THREAD() {
	    return this.getToken(MySqlParser.SQL_THREAD, 0);
	};

	STACKED() {
	    return this.getToken(MySqlParser.STACKED, 0);
	};

	START() {
	    return this.getToken(MySqlParser.START, 0);
	};

	STARTS() {
	    return this.getToken(MySqlParser.STARTS, 0);
	};

	STATS_AUTO_RECALC() {
	    return this.getToken(MySqlParser.STATS_AUTO_RECALC, 0);
	};

	STATS_PERSISTENT() {
	    return this.getToken(MySqlParser.STATS_PERSISTENT, 0);
	};

	STATS_SAMPLE_PAGES() {
	    return this.getToken(MySqlParser.STATS_SAMPLE_PAGES, 0);
	};

	STATUS() {
	    return this.getToken(MySqlParser.STATUS, 0);
	};

	STD() {
	    return this.getToken(MySqlParser.STD, 0);
	};

	STDDEV() {
	    return this.getToken(MySqlParser.STDDEV, 0);
	};

	STDDEV_POP() {
	    return this.getToken(MySqlParser.STDDEV_POP, 0);
	};

	STDDEV_SAMP() {
	    return this.getToken(MySqlParser.STDDEV_SAMP, 0);
	};

	STOP() {
	    return this.getToken(MySqlParser.STOP, 0);
	};

	STORAGE() {
	    return this.getToken(MySqlParser.STORAGE, 0);
	};

	STRING() {
	    return this.getToken(MySqlParser.STRING, 0);
	};

	SUBCLASS_ORIGIN() {
	    return this.getToken(MySqlParser.SUBCLASS_ORIGIN, 0);
	};

	SUBJECT() {
	    return this.getToken(MySqlParser.SUBJECT, 0);
	};

	SUBPARTITION() {
	    return this.getToken(MySqlParser.SUBPARTITION, 0);
	};

	SUBPARTITIONS() {
	    return this.getToken(MySqlParser.SUBPARTITIONS, 0);
	};

	SUM() {
	    return this.getToken(MySqlParser.SUM, 0);
	};

	SUSPEND() {
	    return this.getToken(MySqlParser.SUSPEND, 0);
	};

	SWAPS() {
	    return this.getToken(MySqlParser.SWAPS, 0);
	};

	SWITCHES() {
	    return this.getToken(MySqlParser.SWITCHES, 0);
	};

	SYSTEM_VARIABLES_ADMIN() {
	    return this.getToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0);
	};

	TABLE_NAME() {
	    return this.getToken(MySqlParser.TABLE_NAME, 0);
	};

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	TABLE_ENCRYPTION_ADMIN() {
	    return this.getToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0);
	};

	TEMPORARY() {
	    return this.getToken(MySqlParser.TEMPORARY, 0);
	};

	TEMPTABLE() {
	    return this.getToken(MySqlParser.TEMPTABLE, 0);
	};

	THAN() {
	    return this.getToken(MySqlParser.THAN, 0);
	};

	TRADITIONAL() {
	    return this.getToken(MySqlParser.TRADITIONAL, 0);
	};

	TRANSACTION() {
	    return this.getToken(MySqlParser.TRANSACTION, 0);
	};

	TRANSACTIONAL() {
	    return this.getToken(MySqlParser.TRANSACTIONAL, 0);
	};

	TRIGGERS() {
	    return this.getToken(MySqlParser.TRIGGERS, 0);
	};

	TRUNCATE() {
	    return this.getToken(MySqlParser.TRUNCATE, 0);
	};

	UNDEFINED() {
	    return this.getToken(MySqlParser.UNDEFINED, 0);
	};

	UNDOFILE() {
	    return this.getToken(MySqlParser.UNDOFILE, 0);
	};

	UNDO_BUFFER_SIZE() {
	    return this.getToken(MySqlParser.UNDO_BUFFER_SIZE, 0);
	};

	UNINSTALL() {
	    return this.getToken(MySqlParser.UNINSTALL, 0);
	};

	UNKNOWN() {
	    return this.getToken(MySqlParser.UNKNOWN, 0);
	};

	UNTIL() {
	    return this.getToken(MySqlParser.UNTIL, 0);
	};

	UPGRADE() {
	    return this.getToken(MySqlParser.UPGRADE, 0);
	};

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	USE_FRM() {
	    return this.getToken(MySqlParser.USE_FRM, 0);
	};

	USER_RESOURCES() {
	    return this.getToken(MySqlParser.USER_RESOURCES, 0);
	};

	VALIDATION() {
	    return this.getToken(MySqlParser.VALIDATION, 0);
	};

	VALUE() {
	    return this.getToken(MySqlParser.VALUE, 0);
	};

	VAR_POP() {
	    return this.getToken(MySqlParser.VAR_POP, 0);
	};

	VAR_SAMP() {
	    return this.getToken(MySqlParser.VAR_SAMP, 0);
	};

	VARIABLES() {
	    return this.getToken(MySqlParser.VARIABLES, 0);
	};

	VARIANCE() {
	    return this.getToken(MySqlParser.VARIANCE, 0);
	};

	VERSION_TOKEN_ADMIN() {
	    return this.getToken(MySqlParser.VERSION_TOKEN_ADMIN, 0);
	};

	VIEW() {
	    return this.getToken(MySqlParser.VIEW, 0);
	};

	WAIT() {
	    return this.getToken(MySqlParser.WAIT, 0);
	};

	WARNINGS() {
	    return this.getToken(MySqlParser.WARNINGS, 0);
	};

	WITHOUT() {
	    return this.getToken(MySqlParser.WITHOUT, 0);
	};

	WORK() {
	    return this.getToken(MySqlParser.WORK, 0);
	};

	WRAPPER() {
	    return this.getToken(MySqlParser.WRAPPER, 0);
	};

	X509() {
	    return this.getToken(MySqlParser.X509, 0);
	};

	XA() {
	    return this.getToken(MySqlParser.XA, 0);
	};

	XA_RECOVER_ADMIN() {
	    return this.getToken(MySqlParser.XA_RECOVER_ADMIN, 0);
	};

	XML() {
	    return this.getToken(MySqlParser.XML, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterKeywordsCanBeId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitKeywordsCanBeId(this);
		}
	}


}



class FunctionNameBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_functionNameBase;
    }

	ABS() {
	    return this.getToken(MySqlParser.ABS, 0);
	};

	ACOS() {
	    return this.getToken(MySqlParser.ACOS, 0);
	};

	ADDDATE() {
	    return this.getToken(MySqlParser.ADDDATE, 0);
	};

	ADDTIME() {
	    return this.getToken(MySqlParser.ADDTIME, 0);
	};

	AES_DECRYPT() {
	    return this.getToken(MySqlParser.AES_DECRYPT, 0);
	};

	AES_ENCRYPT() {
	    return this.getToken(MySqlParser.AES_ENCRYPT, 0);
	};

	AREA() {
	    return this.getToken(MySqlParser.AREA, 0);
	};

	ASBINARY() {
	    return this.getToken(MySqlParser.ASBINARY, 0);
	};

	ASIN() {
	    return this.getToken(MySqlParser.ASIN, 0);
	};

	ASTEXT() {
	    return this.getToken(MySqlParser.ASTEXT, 0);
	};

	ASWKB() {
	    return this.getToken(MySqlParser.ASWKB, 0);
	};

	ASWKT() {
	    return this.getToken(MySqlParser.ASWKT, 0);
	};

	ASYMMETRIC_DECRYPT() {
	    return this.getToken(MySqlParser.ASYMMETRIC_DECRYPT, 0);
	};

	ASYMMETRIC_DERIVE() {
	    return this.getToken(MySqlParser.ASYMMETRIC_DERIVE, 0);
	};

	ASYMMETRIC_ENCRYPT() {
	    return this.getToken(MySqlParser.ASYMMETRIC_ENCRYPT, 0);
	};

	ASYMMETRIC_SIGN() {
	    return this.getToken(MySqlParser.ASYMMETRIC_SIGN, 0);
	};

	ASYMMETRIC_VERIFY() {
	    return this.getToken(MySqlParser.ASYMMETRIC_VERIFY, 0);
	};

	ATAN() {
	    return this.getToken(MySqlParser.ATAN, 0);
	};

	ATAN2() {
	    return this.getToken(MySqlParser.ATAN2, 0);
	};

	BENCHMARK() {
	    return this.getToken(MySqlParser.BENCHMARK, 0);
	};

	BIN() {
	    return this.getToken(MySqlParser.BIN, 0);
	};

	BIT_COUNT() {
	    return this.getToken(MySqlParser.BIT_COUNT, 0);
	};

	BIT_LENGTH() {
	    return this.getToken(MySqlParser.BIT_LENGTH, 0);
	};

	BUFFER() {
	    return this.getToken(MySqlParser.BUFFER, 0);
	};

	CEIL() {
	    return this.getToken(MySqlParser.CEIL, 0);
	};

	CEILING() {
	    return this.getToken(MySqlParser.CEILING, 0);
	};

	CENTROID() {
	    return this.getToken(MySqlParser.CENTROID, 0);
	};

	CHARACTER_LENGTH() {
	    return this.getToken(MySqlParser.CHARACTER_LENGTH, 0);
	};

	CHARSET() {
	    return this.getToken(MySqlParser.CHARSET, 0);
	};

	CHAR_LENGTH() {
	    return this.getToken(MySqlParser.CHAR_LENGTH, 0);
	};

	COERCIBILITY() {
	    return this.getToken(MySqlParser.COERCIBILITY, 0);
	};

	COLLATION() {
	    return this.getToken(MySqlParser.COLLATION, 0);
	};

	COMPRESS() {
	    return this.getToken(MySqlParser.COMPRESS, 0);
	};

	CONCAT() {
	    return this.getToken(MySqlParser.CONCAT, 0);
	};

	CONCAT_WS() {
	    return this.getToken(MySqlParser.CONCAT_WS, 0);
	};

	CONNECTION_ID() {
	    return this.getToken(MySqlParser.CONNECTION_ID, 0);
	};

	CONV() {
	    return this.getToken(MySqlParser.CONV, 0);
	};

	CONVERT_TZ() {
	    return this.getToken(MySqlParser.CONVERT_TZ, 0);
	};

	COS() {
	    return this.getToken(MySqlParser.COS, 0);
	};

	COT() {
	    return this.getToken(MySqlParser.COT, 0);
	};

	COUNT() {
	    return this.getToken(MySqlParser.COUNT, 0);
	};

	CRC32() {
	    return this.getToken(MySqlParser.CRC32, 0);
	};

	CREATE_ASYMMETRIC_PRIV_KEY() {
	    return this.getToken(MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, 0);
	};

	CREATE_ASYMMETRIC_PUB_KEY() {
	    return this.getToken(MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, 0);
	};

	CREATE_DH_PARAMETERS() {
	    return this.getToken(MySqlParser.CREATE_DH_PARAMETERS, 0);
	};

	CREATE_DIGEST() {
	    return this.getToken(MySqlParser.CREATE_DIGEST, 0);
	};

	CROSSES() {
	    return this.getToken(MySqlParser.CROSSES, 0);
	};

	DATABASE() {
	    return this.getToken(MySqlParser.DATABASE, 0);
	};

	DATE() {
	    return this.getToken(MySqlParser.DATE, 0);
	};

	DATEDIFF() {
	    return this.getToken(MySqlParser.DATEDIFF, 0);
	};

	DATE_FORMAT() {
	    return this.getToken(MySqlParser.DATE_FORMAT, 0);
	};

	DAY() {
	    return this.getToken(MySqlParser.DAY, 0);
	};

	DAYNAME() {
	    return this.getToken(MySqlParser.DAYNAME, 0);
	};

	DAYOFMONTH() {
	    return this.getToken(MySqlParser.DAYOFMONTH, 0);
	};

	DAYOFWEEK() {
	    return this.getToken(MySqlParser.DAYOFWEEK, 0);
	};

	DAYOFYEAR() {
	    return this.getToken(MySqlParser.DAYOFYEAR, 0);
	};

	DECODE() {
	    return this.getToken(MySqlParser.DECODE, 0);
	};

	DEGREES() {
	    return this.getToken(MySqlParser.DEGREES, 0);
	};

	DES_DECRYPT() {
	    return this.getToken(MySqlParser.DES_DECRYPT, 0);
	};

	DES_ENCRYPT() {
	    return this.getToken(MySqlParser.DES_ENCRYPT, 0);
	};

	DIMENSION() {
	    return this.getToken(MySqlParser.DIMENSION, 0);
	};

	DISJOINT() {
	    return this.getToken(MySqlParser.DISJOINT, 0);
	};

	ELT() {
	    return this.getToken(MySqlParser.ELT, 0);
	};

	ENCODE() {
	    return this.getToken(MySqlParser.ENCODE, 0);
	};

	ENCRYPT() {
	    return this.getToken(MySqlParser.ENCRYPT, 0);
	};

	ENDPOINT() {
	    return this.getToken(MySqlParser.ENDPOINT, 0);
	};

	ENVELOPE() {
	    return this.getToken(MySqlParser.ENVELOPE, 0);
	};

	EQUALS() {
	    return this.getToken(MySqlParser.EQUALS, 0);
	};

	EXP() {
	    return this.getToken(MySqlParser.EXP, 0);
	};

	EXPORT_SET() {
	    return this.getToken(MySqlParser.EXPORT_SET, 0);
	};

	EXTERIORRING() {
	    return this.getToken(MySqlParser.EXTERIORRING, 0);
	};

	EXTRACTVALUE() {
	    return this.getToken(MySqlParser.EXTRACTVALUE, 0);
	};

	FIELD() {
	    return this.getToken(MySqlParser.FIELD, 0);
	};

	FIND_IN_SET() {
	    return this.getToken(MySqlParser.FIND_IN_SET, 0);
	};

	FLOOR() {
	    return this.getToken(MySqlParser.FLOOR, 0);
	};

	FORMAT() {
	    return this.getToken(MySqlParser.FORMAT, 0);
	};

	FOUND_ROWS() {
	    return this.getToken(MySqlParser.FOUND_ROWS, 0);
	};

	FROM_BASE64() {
	    return this.getToken(MySqlParser.FROM_BASE64, 0);
	};

	FROM_DAYS() {
	    return this.getToken(MySqlParser.FROM_DAYS, 0);
	};

	FROM_UNIXTIME() {
	    return this.getToken(MySqlParser.FROM_UNIXTIME, 0);
	};

	GEOMCOLLFROMTEXT() {
	    return this.getToken(MySqlParser.GEOMCOLLFROMTEXT, 0);
	};

	GEOMCOLLFROMWKB() {
	    return this.getToken(MySqlParser.GEOMCOLLFROMWKB, 0);
	};

	GEOMETRYCOLLECTION() {
	    return this.getToken(MySqlParser.GEOMETRYCOLLECTION, 0);
	};

	GEOMETRYCOLLECTIONFROMTEXT() {
	    return this.getToken(MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, 0);
	};

	GEOMETRYCOLLECTIONFROMWKB() {
	    return this.getToken(MySqlParser.GEOMETRYCOLLECTIONFROMWKB, 0);
	};

	GEOMETRYFROMTEXT() {
	    return this.getToken(MySqlParser.GEOMETRYFROMTEXT, 0);
	};

	GEOMETRYFROMWKB() {
	    return this.getToken(MySqlParser.GEOMETRYFROMWKB, 0);
	};

	GEOMETRYN() {
	    return this.getToken(MySqlParser.GEOMETRYN, 0);
	};

	GEOMETRYTYPE() {
	    return this.getToken(MySqlParser.GEOMETRYTYPE, 0);
	};

	GEOMFROMTEXT() {
	    return this.getToken(MySqlParser.GEOMFROMTEXT, 0);
	};

	GEOMFROMWKB() {
	    return this.getToken(MySqlParser.GEOMFROMWKB, 0);
	};

	GET_FORMAT() {
	    return this.getToken(MySqlParser.GET_FORMAT, 0);
	};

	GET_LOCK() {
	    return this.getToken(MySqlParser.GET_LOCK, 0);
	};

	GLENGTH() {
	    return this.getToken(MySqlParser.GLENGTH, 0);
	};

	GREATEST() {
	    return this.getToken(MySqlParser.GREATEST, 0);
	};

	GTID_SUBSET() {
	    return this.getToken(MySqlParser.GTID_SUBSET, 0);
	};

	GTID_SUBTRACT() {
	    return this.getToken(MySqlParser.GTID_SUBTRACT, 0);
	};

	HEX() {
	    return this.getToken(MySqlParser.HEX, 0);
	};

	HOUR() {
	    return this.getToken(MySqlParser.HOUR, 0);
	};

	IFNULL() {
	    return this.getToken(MySqlParser.IFNULL, 0);
	};

	INET6_ATON() {
	    return this.getToken(MySqlParser.INET6_ATON, 0);
	};

	INET6_NTOA() {
	    return this.getToken(MySqlParser.INET6_NTOA, 0);
	};

	INET_ATON() {
	    return this.getToken(MySqlParser.INET_ATON, 0);
	};

	INET_NTOA() {
	    return this.getToken(MySqlParser.INET_NTOA, 0);
	};

	INSTR() {
	    return this.getToken(MySqlParser.INSTR, 0);
	};

	INTERIORRINGN() {
	    return this.getToken(MySqlParser.INTERIORRINGN, 0);
	};

	INTERSECTS() {
	    return this.getToken(MySqlParser.INTERSECTS, 0);
	};

	INVISIBLE() {
	    return this.getToken(MySqlParser.INVISIBLE, 0);
	};

	ISCLOSED() {
	    return this.getToken(MySqlParser.ISCLOSED, 0);
	};

	ISEMPTY() {
	    return this.getToken(MySqlParser.ISEMPTY, 0);
	};

	ISNULL() {
	    return this.getToken(MySqlParser.ISNULL, 0);
	};

	ISSIMPLE() {
	    return this.getToken(MySqlParser.ISSIMPLE, 0);
	};

	IS_FREE_LOCK() {
	    return this.getToken(MySqlParser.IS_FREE_LOCK, 0);
	};

	IS_IPV4() {
	    return this.getToken(MySqlParser.IS_IPV4, 0);
	};

	IS_IPV4_COMPAT() {
	    return this.getToken(MySqlParser.IS_IPV4_COMPAT, 0);
	};

	IS_IPV4_MAPPED() {
	    return this.getToken(MySqlParser.IS_IPV4_MAPPED, 0);
	};

	IS_IPV6() {
	    return this.getToken(MySqlParser.IS_IPV6, 0);
	};

	IS_USED_LOCK() {
	    return this.getToken(MySqlParser.IS_USED_LOCK, 0);
	};

	LAST_INSERT_ID() {
	    return this.getToken(MySqlParser.LAST_INSERT_ID, 0);
	};

	LCASE() {
	    return this.getToken(MySqlParser.LCASE, 0);
	};

	LEAST() {
	    return this.getToken(MySqlParser.LEAST, 0);
	};

	LEFT() {
	    return this.getToken(MySqlParser.LEFT, 0);
	};

	LENGTH() {
	    return this.getToken(MySqlParser.LENGTH, 0);
	};

	LINEFROMTEXT() {
	    return this.getToken(MySqlParser.LINEFROMTEXT, 0);
	};

	LINEFROMWKB() {
	    return this.getToken(MySqlParser.LINEFROMWKB, 0);
	};

	LINESTRING() {
	    return this.getToken(MySqlParser.LINESTRING, 0);
	};

	LINESTRINGFROMTEXT() {
	    return this.getToken(MySqlParser.LINESTRINGFROMTEXT, 0);
	};

	LINESTRINGFROMWKB() {
	    return this.getToken(MySqlParser.LINESTRINGFROMWKB, 0);
	};

	LN() {
	    return this.getToken(MySqlParser.LN, 0);
	};

	LOAD_FILE() {
	    return this.getToken(MySqlParser.LOAD_FILE, 0);
	};

	LOCATE() {
	    return this.getToken(MySqlParser.LOCATE, 0);
	};

	LOG() {
	    return this.getToken(MySqlParser.LOG, 0);
	};

	LOG10() {
	    return this.getToken(MySqlParser.LOG10, 0);
	};

	LOG2() {
	    return this.getToken(MySqlParser.LOG2, 0);
	};

	LOWER() {
	    return this.getToken(MySqlParser.LOWER, 0);
	};

	LPAD() {
	    return this.getToken(MySqlParser.LPAD, 0);
	};

	LTRIM() {
	    return this.getToken(MySqlParser.LTRIM, 0);
	};

	MAKEDATE() {
	    return this.getToken(MySqlParser.MAKEDATE, 0);
	};

	MAKETIME() {
	    return this.getToken(MySqlParser.MAKETIME, 0);
	};

	MAKE_SET() {
	    return this.getToken(MySqlParser.MAKE_SET, 0);
	};

	MASTER_POS_WAIT() {
	    return this.getToken(MySqlParser.MASTER_POS_WAIT, 0);
	};

	MBRCONTAINS() {
	    return this.getToken(MySqlParser.MBRCONTAINS, 0);
	};

	MBRDISJOINT() {
	    return this.getToken(MySqlParser.MBRDISJOINT, 0);
	};

	MBREQUAL() {
	    return this.getToken(MySqlParser.MBREQUAL, 0);
	};

	MBRINTERSECTS() {
	    return this.getToken(MySqlParser.MBRINTERSECTS, 0);
	};

	MBROVERLAPS() {
	    return this.getToken(MySqlParser.MBROVERLAPS, 0);
	};

	MBRTOUCHES() {
	    return this.getToken(MySqlParser.MBRTOUCHES, 0);
	};

	MBRWITHIN() {
	    return this.getToken(MySqlParser.MBRWITHIN, 0);
	};

	MD5() {
	    return this.getToken(MySqlParser.MD5, 0);
	};

	MICROSECOND() {
	    return this.getToken(MySqlParser.MICROSECOND, 0);
	};

	MINUTE() {
	    return this.getToken(MySqlParser.MINUTE, 0);
	};

	MLINEFROMTEXT() {
	    return this.getToken(MySqlParser.MLINEFROMTEXT, 0);
	};

	MLINEFROMWKB() {
	    return this.getToken(MySqlParser.MLINEFROMWKB, 0);
	};

	MONTH() {
	    return this.getToken(MySqlParser.MONTH, 0);
	};

	MONTHNAME() {
	    return this.getToken(MySqlParser.MONTHNAME, 0);
	};

	MPOINTFROMTEXT() {
	    return this.getToken(MySqlParser.MPOINTFROMTEXT, 0);
	};

	MPOINTFROMWKB() {
	    return this.getToken(MySqlParser.MPOINTFROMWKB, 0);
	};

	MPOLYFROMTEXT() {
	    return this.getToken(MySqlParser.MPOLYFROMTEXT, 0);
	};

	MPOLYFROMWKB() {
	    return this.getToken(MySqlParser.MPOLYFROMWKB, 0);
	};

	MULTILINESTRING() {
	    return this.getToken(MySqlParser.MULTILINESTRING, 0);
	};

	MULTILINESTRINGFROMTEXT() {
	    return this.getToken(MySqlParser.MULTILINESTRINGFROMTEXT, 0);
	};

	MULTILINESTRINGFROMWKB() {
	    return this.getToken(MySqlParser.MULTILINESTRINGFROMWKB, 0);
	};

	MULTIPOINT() {
	    return this.getToken(MySqlParser.MULTIPOINT, 0);
	};

	MULTIPOINTFROMTEXT() {
	    return this.getToken(MySqlParser.MULTIPOINTFROMTEXT, 0);
	};

	MULTIPOINTFROMWKB() {
	    return this.getToken(MySqlParser.MULTIPOINTFROMWKB, 0);
	};

	MULTIPOLYGON() {
	    return this.getToken(MySqlParser.MULTIPOLYGON, 0);
	};

	MULTIPOLYGONFROMTEXT() {
	    return this.getToken(MySqlParser.MULTIPOLYGONFROMTEXT, 0);
	};

	MULTIPOLYGONFROMWKB() {
	    return this.getToken(MySqlParser.MULTIPOLYGONFROMWKB, 0);
	};

	NAME_CONST() {
	    return this.getToken(MySqlParser.NAME_CONST, 0);
	};

	NULLIF() {
	    return this.getToken(MySqlParser.NULLIF, 0);
	};

	NUMGEOMETRIES() {
	    return this.getToken(MySqlParser.NUMGEOMETRIES, 0);
	};

	NUMINTERIORRINGS() {
	    return this.getToken(MySqlParser.NUMINTERIORRINGS, 0);
	};

	NUMPOINTS() {
	    return this.getToken(MySqlParser.NUMPOINTS, 0);
	};

	OCT() {
	    return this.getToken(MySqlParser.OCT, 0);
	};

	OCTET_LENGTH() {
	    return this.getToken(MySqlParser.OCTET_LENGTH, 0);
	};

	ORD() {
	    return this.getToken(MySqlParser.ORD, 0);
	};

	OVERLAPS() {
	    return this.getToken(MySqlParser.OVERLAPS, 0);
	};

	PERIOD_ADD() {
	    return this.getToken(MySqlParser.PERIOD_ADD, 0);
	};

	PERIOD_DIFF() {
	    return this.getToken(MySqlParser.PERIOD_DIFF, 0);
	};

	PI() {
	    return this.getToken(MySqlParser.PI, 0);
	};

	POINT() {
	    return this.getToken(MySqlParser.POINT, 0);
	};

	POINTFROMTEXT() {
	    return this.getToken(MySqlParser.POINTFROMTEXT, 0);
	};

	POINTFROMWKB() {
	    return this.getToken(MySqlParser.POINTFROMWKB, 0);
	};

	POINTN() {
	    return this.getToken(MySqlParser.POINTN, 0);
	};

	POLYFROMTEXT() {
	    return this.getToken(MySqlParser.POLYFROMTEXT, 0);
	};

	POLYFROMWKB() {
	    return this.getToken(MySqlParser.POLYFROMWKB, 0);
	};

	POLYGON() {
	    return this.getToken(MySqlParser.POLYGON, 0);
	};

	POLYGONFROMTEXT() {
	    return this.getToken(MySqlParser.POLYGONFROMTEXT, 0);
	};

	POLYGONFROMWKB() {
	    return this.getToken(MySqlParser.POLYGONFROMWKB, 0);
	};

	POSITION() {
	    return this.getToken(MySqlParser.POSITION, 0);
	};

	POW() {
	    return this.getToken(MySqlParser.POW, 0);
	};

	POWER() {
	    return this.getToken(MySqlParser.POWER, 0);
	};

	QUARTER() {
	    return this.getToken(MySqlParser.QUARTER, 0);
	};

	QUOTE() {
	    return this.getToken(MySqlParser.QUOTE, 0);
	};

	RADIANS() {
	    return this.getToken(MySqlParser.RADIANS, 0);
	};

	RAND() {
	    return this.getToken(MySqlParser.RAND, 0);
	};

	RANDOM_BYTES() {
	    return this.getToken(MySqlParser.RANDOM_BYTES, 0);
	};

	RELEASE_LOCK() {
	    return this.getToken(MySqlParser.RELEASE_LOCK, 0);
	};

	REVERSE() {
	    return this.getToken(MySqlParser.REVERSE, 0);
	};

	RIGHT() {
	    return this.getToken(MySqlParser.RIGHT, 0);
	};

	ROUND() {
	    return this.getToken(MySqlParser.ROUND, 0);
	};

	ROW_COUNT() {
	    return this.getToken(MySqlParser.ROW_COUNT, 0);
	};

	RPAD() {
	    return this.getToken(MySqlParser.RPAD, 0);
	};

	RTRIM() {
	    return this.getToken(MySqlParser.RTRIM, 0);
	};

	SECOND() {
	    return this.getToken(MySqlParser.SECOND, 0);
	};

	SEC_TO_TIME() {
	    return this.getToken(MySqlParser.SEC_TO_TIME, 0);
	};

	SESSION_USER() {
	    return this.getToken(MySqlParser.SESSION_USER, 0);
	};

	SESSION_VARIABLES_ADMIN() {
	    return this.getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0);
	};

	SHA() {
	    return this.getToken(MySqlParser.SHA, 0);
	};

	SHA1() {
	    return this.getToken(MySqlParser.SHA1, 0);
	};

	SHA2() {
	    return this.getToken(MySqlParser.SHA2, 0);
	};

	SIGN() {
	    return this.getToken(MySqlParser.SIGN, 0);
	};

	SIN() {
	    return this.getToken(MySqlParser.SIN, 0);
	};

	SLEEP() {
	    return this.getToken(MySqlParser.SLEEP, 0);
	};

	SOUNDEX() {
	    return this.getToken(MySqlParser.SOUNDEX, 0);
	};

	SQL_THREAD_WAIT_AFTER_GTIDS() {
	    return this.getToken(MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0);
	};

	SQRT() {
	    return this.getToken(MySqlParser.SQRT, 0);
	};

	SRID() {
	    return this.getToken(MySqlParser.SRID, 0);
	};

	STARTPOINT() {
	    return this.getToken(MySqlParser.STARTPOINT, 0);
	};

	STRCMP() {
	    return this.getToken(MySqlParser.STRCMP, 0);
	};

	STR_TO_DATE() {
	    return this.getToken(MySqlParser.STR_TO_DATE, 0);
	};

	ST_AREA() {
	    return this.getToken(MySqlParser.ST_AREA, 0);
	};

	ST_ASBINARY() {
	    return this.getToken(MySqlParser.ST_ASBINARY, 0);
	};

	ST_ASTEXT() {
	    return this.getToken(MySqlParser.ST_ASTEXT, 0);
	};

	ST_ASWKB() {
	    return this.getToken(MySqlParser.ST_ASWKB, 0);
	};

	ST_ASWKT() {
	    return this.getToken(MySqlParser.ST_ASWKT, 0);
	};

	ST_BUFFER() {
	    return this.getToken(MySqlParser.ST_BUFFER, 0);
	};

	ST_CENTROID() {
	    return this.getToken(MySqlParser.ST_CENTROID, 0);
	};

	ST_CONTAINS() {
	    return this.getToken(MySqlParser.ST_CONTAINS, 0);
	};

	ST_CROSSES() {
	    return this.getToken(MySqlParser.ST_CROSSES, 0);
	};

	ST_DIFFERENCE() {
	    return this.getToken(MySqlParser.ST_DIFFERENCE, 0);
	};

	ST_DIMENSION() {
	    return this.getToken(MySqlParser.ST_DIMENSION, 0);
	};

	ST_DISJOINT() {
	    return this.getToken(MySqlParser.ST_DISJOINT, 0);
	};

	ST_DISTANCE() {
	    return this.getToken(MySqlParser.ST_DISTANCE, 0);
	};

	ST_ENDPOINT() {
	    return this.getToken(MySqlParser.ST_ENDPOINT, 0);
	};

	ST_ENVELOPE() {
	    return this.getToken(MySqlParser.ST_ENVELOPE, 0);
	};

	ST_EQUALS() {
	    return this.getToken(MySqlParser.ST_EQUALS, 0);
	};

	ST_EXTERIORRING() {
	    return this.getToken(MySqlParser.ST_EXTERIORRING, 0);
	};

	ST_GEOMCOLLFROMTEXT() {
	    return this.getToken(MySqlParser.ST_GEOMCOLLFROMTEXT, 0);
	};

	ST_GEOMCOLLFROMTXT() {
	    return this.getToken(MySqlParser.ST_GEOMCOLLFROMTXT, 0);
	};

	ST_GEOMCOLLFROMWKB() {
	    return this.getToken(MySqlParser.ST_GEOMCOLLFROMWKB, 0);
	};

	ST_GEOMETRYCOLLECTIONFROMTEXT() {
	    return this.getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0);
	};

	ST_GEOMETRYCOLLECTIONFROMWKB() {
	    return this.getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0);
	};

	ST_GEOMETRYFROMTEXT() {
	    return this.getToken(MySqlParser.ST_GEOMETRYFROMTEXT, 0);
	};

	ST_GEOMETRYFROMWKB() {
	    return this.getToken(MySqlParser.ST_GEOMETRYFROMWKB, 0);
	};

	ST_GEOMETRYN() {
	    return this.getToken(MySqlParser.ST_GEOMETRYN, 0);
	};

	ST_GEOMETRYTYPE() {
	    return this.getToken(MySqlParser.ST_GEOMETRYTYPE, 0);
	};

	ST_GEOMFROMTEXT() {
	    return this.getToken(MySqlParser.ST_GEOMFROMTEXT, 0);
	};

	ST_GEOMFROMWKB() {
	    return this.getToken(MySqlParser.ST_GEOMFROMWKB, 0);
	};

	ST_INTERIORRINGN() {
	    return this.getToken(MySqlParser.ST_INTERIORRINGN, 0);
	};

	ST_INTERSECTION() {
	    return this.getToken(MySqlParser.ST_INTERSECTION, 0);
	};

	ST_INTERSECTS() {
	    return this.getToken(MySqlParser.ST_INTERSECTS, 0);
	};

	ST_ISCLOSED() {
	    return this.getToken(MySqlParser.ST_ISCLOSED, 0);
	};

	ST_ISEMPTY() {
	    return this.getToken(MySqlParser.ST_ISEMPTY, 0);
	};

	ST_ISSIMPLE() {
	    return this.getToken(MySqlParser.ST_ISSIMPLE, 0);
	};

	ST_LINEFROMTEXT() {
	    return this.getToken(MySqlParser.ST_LINEFROMTEXT, 0);
	};

	ST_LINEFROMWKB() {
	    return this.getToken(MySqlParser.ST_LINEFROMWKB, 0);
	};

	ST_LINESTRINGFROMTEXT() {
	    return this.getToken(MySqlParser.ST_LINESTRINGFROMTEXT, 0);
	};

	ST_LINESTRINGFROMWKB() {
	    return this.getToken(MySqlParser.ST_LINESTRINGFROMWKB, 0);
	};

	ST_NUMGEOMETRIES() {
	    return this.getToken(MySqlParser.ST_NUMGEOMETRIES, 0);
	};

	ST_NUMINTERIORRING() {
	    return this.getToken(MySqlParser.ST_NUMINTERIORRING, 0);
	};

	ST_NUMINTERIORRINGS() {
	    return this.getToken(MySqlParser.ST_NUMINTERIORRINGS, 0);
	};

	ST_NUMPOINTS() {
	    return this.getToken(MySqlParser.ST_NUMPOINTS, 0);
	};

	ST_OVERLAPS() {
	    return this.getToken(MySqlParser.ST_OVERLAPS, 0);
	};

	ST_POINTFROMTEXT() {
	    return this.getToken(MySqlParser.ST_POINTFROMTEXT, 0);
	};

	ST_POINTFROMWKB() {
	    return this.getToken(MySqlParser.ST_POINTFROMWKB, 0);
	};

	ST_POINTN() {
	    return this.getToken(MySqlParser.ST_POINTN, 0);
	};

	ST_POLYFROMTEXT() {
	    return this.getToken(MySqlParser.ST_POLYFROMTEXT, 0);
	};

	ST_POLYFROMWKB() {
	    return this.getToken(MySqlParser.ST_POLYFROMWKB, 0);
	};

	ST_POLYGONFROMTEXT() {
	    return this.getToken(MySqlParser.ST_POLYGONFROMTEXT, 0);
	};

	ST_POLYGONFROMWKB() {
	    return this.getToken(MySqlParser.ST_POLYGONFROMWKB, 0);
	};

	ST_SRID() {
	    return this.getToken(MySqlParser.ST_SRID, 0);
	};

	ST_STARTPOINT() {
	    return this.getToken(MySqlParser.ST_STARTPOINT, 0);
	};

	ST_SYMDIFFERENCE() {
	    return this.getToken(MySqlParser.ST_SYMDIFFERENCE, 0);
	};

	ST_TOUCHES() {
	    return this.getToken(MySqlParser.ST_TOUCHES, 0);
	};

	ST_UNION() {
	    return this.getToken(MySqlParser.ST_UNION, 0);
	};

	ST_WITHIN() {
	    return this.getToken(MySqlParser.ST_WITHIN, 0);
	};

	ST_X() {
	    return this.getToken(MySqlParser.ST_X, 0);
	};

	ST_Y() {
	    return this.getToken(MySqlParser.ST_Y, 0);
	};

	SUBDATE() {
	    return this.getToken(MySqlParser.SUBDATE, 0);
	};

	SUBSTRING_INDEX() {
	    return this.getToken(MySqlParser.SUBSTRING_INDEX, 0);
	};

	SUBTIME() {
	    return this.getToken(MySqlParser.SUBTIME, 0);
	};

	SYSTEM_USER() {
	    return this.getToken(MySqlParser.SYSTEM_USER, 0);
	};

	TAN() {
	    return this.getToken(MySqlParser.TAN, 0);
	};

	TIME() {
	    return this.getToken(MySqlParser.TIME, 0);
	};

	TIMEDIFF() {
	    return this.getToken(MySqlParser.TIMEDIFF, 0);
	};

	TIMESTAMP() {
	    return this.getToken(MySqlParser.TIMESTAMP, 0);
	};

	TIMESTAMPADD() {
	    return this.getToken(MySqlParser.TIMESTAMPADD, 0);
	};

	TIMESTAMPDIFF() {
	    return this.getToken(MySqlParser.TIMESTAMPDIFF, 0);
	};

	TIME_FORMAT() {
	    return this.getToken(MySqlParser.TIME_FORMAT, 0);
	};

	TIME_TO_SEC() {
	    return this.getToken(MySqlParser.TIME_TO_SEC, 0);
	};

	TOUCHES() {
	    return this.getToken(MySqlParser.TOUCHES, 0);
	};

	TO_BASE64() {
	    return this.getToken(MySqlParser.TO_BASE64, 0);
	};

	TO_DAYS() {
	    return this.getToken(MySqlParser.TO_DAYS, 0);
	};

	TO_SECONDS() {
	    return this.getToken(MySqlParser.TO_SECONDS, 0);
	};

	UCASE() {
	    return this.getToken(MySqlParser.UCASE, 0);
	};

	UNCOMPRESS() {
	    return this.getToken(MySqlParser.UNCOMPRESS, 0);
	};

	UNCOMPRESSED_LENGTH() {
	    return this.getToken(MySqlParser.UNCOMPRESSED_LENGTH, 0);
	};

	UNHEX() {
	    return this.getToken(MySqlParser.UNHEX, 0);
	};

	UNIX_TIMESTAMP() {
	    return this.getToken(MySqlParser.UNIX_TIMESTAMP, 0);
	};

	UPDATEXML() {
	    return this.getToken(MySqlParser.UPDATEXML, 0);
	};

	UPPER() {
	    return this.getToken(MySqlParser.UPPER, 0);
	};

	UUID() {
	    return this.getToken(MySqlParser.UUID, 0);
	};

	UUID_SHORT() {
	    return this.getToken(MySqlParser.UUID_SHORT, 0);
	};

	VALIDATE_PASSWORD_STRENGTH() {
	    return this.getToken(MySqlParser.VALIDATE_PASSWORD_STRENGTH, 0);
	};

	VERSION() {
	    return this.getToken(MySqlParser.VERSION, 0);
	};

	VISIBLE() {
	    return this.getToken(MySqlParser.VISIBLE, 0);
	};

	WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() {
	    return this.getToken(MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0);
	};

	WEEK() {
	    return this.getToken(MySqlParser.WEEK, 0);
	};

	WEEKDAY() {
	    return this.getToken(MySqlParser.WEEKDAY, 0);
	};

	WEEKOFYEAR() {
	    return this.getToken(MySqlParser.WEEKOFYEAR, 0);
	};

	WEIGHT_STRING() {
	    return this.getToken(MySqlParser.WEIGHT_STRING, 0);
	};

	WITHIN() {
	    return this.getToken(MySqlParser.WITHIN, 0);
	};

	YEAR() {
	    return this.getToken(MySqlParser.YEAR, 0);
	};

	YEARWEEK() {
	    return this.getToken(MySqlParser.YEARWEEK, 0);
	};

	Y_FUNCTION() {
	    return this.getToken(MySqlParser.Y_FUNCTION, 0);
	};

	X_FUNCTION() {
	    return this.getToken(MySqlParser.X_FUNCTION, 0);
	};

	JSON_VALID() {
	    return this.getToken(MySqlParser.JSON_VALID, 0);
	};

	JSON_SCHEMA_VALID() {
	    return this.getToken(MySqlParser.JSON_SCHEMA_VALID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFunctionNameBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFunctionNameBase(this);
		}
	}


}




MySqlParser.RootContext = RootContext; 
MySqlParser.SqlStatementsContext = SqlStatementsContext; 
MySqlParser.SqlStatementContext = SqlStatementContext; 
MySqlParser.EmptyStatementContext = EmptyStatementContext; 
MySqlParser.DdlStatementContext = DdlStatementContext; 
MySqlParser.DmlStatementContext = DmlStatementContext; 
MySqlParser.TransactionStatementContext = TransactionStatementContext; 
MySqlParser.ReplicationStatementContext = ReplicationStatementContext; 
MySqlParser.PreparedStatementContext = PreparedStatementContext; 
MySqlParser.CompoundStatementContext = CompoundStatementContext; 
MySqlParser.AdministrationStatementContext = AdministrationStatementContext; 
MySqlParser.UtilityStatementContext = UtilityStatementContext; 
MySqlParser.CreateDatabaseContext = CreateDatabaseContext; 
MySqlParser.CreateEventContext = CreateEventContext; 
MySqlParser.CreateIndexContext = CreateIndexContext; 
MySqlParser.CreateLogfileGroupContext = CreateLogfileGroupContext; 
MySqlParser.CreateProcedureContext = CreateProcedureContext; 
MySqlParser.CreateFunctionContext = CreateFunctionContext; 
MySqlParser.CreateServerContext = CreateServerContext; 
MySqlParser.CreateTableContext = CreateTableContext; 
MySqlParser.CreateTablespaceInnodbContext = CreateTablespaceInnodbContext; 
MySqlParser.CreateTablespaceNdbContext = CreateTablespaceNdbContext; 
MySqlParser.CreateTriggerContext = CreateTriggerContext; 
MySqlParser.CreateViewContext = CreateViewContext; 
MySqlParser.CreateDatabaseOptionContext = CreateDatabaseOptionContext; 
MySqlParser.OwnerStatementContext = OwnerStatementContext; 
MySqlParser.ScheduleExpressionContext = ScheduleExpressionContext; 
MySqlParser.TimestampValueContext = TimestampValueContext; 
MySqlParser.IntervalExprContext = IntervalExprContext; 
MySqlParser.IntervalTypeContext = IntervalTypeContext; 
MySqlParser.EnableTypeContext = EnableTypeContext; 
MySqlParser.IndexTypeContext = IndexTypeContext; 
MySqlParser.IndexOptionContext = IndexOptionContext; 
MySqlParser.ProcedureParameterContext = ProcedureParameterContext; 
MySqlParser.FunctionParameterContext = FunctionParameterContext; 
MySqlParser.RoutineOptionContext = RoutineOptionContext; 
MySqlParser.ServerOptionContext = ServerOptionContext; 
MySqlParser.CreateDefinitionsContext = CreateDefinitionsContext; 
MySqlParser.CreateDefinitionContext = CreateDefinitionContext; 
MySqlParser.ColumnDefinitionContext = ColumnDefinitionContext; 
MySqlParser.ColumnConstraintContext = ColumnConstraintContext; 
MySqlParser.TableConstraintContext = TableConstraintContext; 
MySqlParser.ReferenceDefinitionContext = ReferenceDefinitionContext; 
MySqlParser.ReferenceActionContext = ReferenceActionContext; 
MySqlParser.ReferenceControlTypeContext = ReferenceControlTypeContext; 
MySqlParser.IndexColumnDefinitionContext = IndexColumnDefinitionContext; 
MySqlParser.TableOptionContext = TableOptionContext; 
MySqlParser.TablespaceStorageContext = TablespaceStorageContext; 
MySqlParser.PartitionDefinitionsContext = PartitionDefinitionsContext; 
MySqlParser.PartitionFunctionDefinitionContext = PartitionFunctionDefinitionContext; 
MySqlParser.SubpartitionFunctionDefinitionContext = SubpartitionFunctionDefinitionContext; 
MySqlParser.PartitionDefinitionContext = PartitionDefinitionContext; 
MySqlParser.PartitionDefinerAtomContext = PartitionDefinerAtomContext; 
MySqlParser.PartitionDefinerVectorContext = PartitionDefinerVectorContext; 
MySqlParser.SubpartitionDefinitionContext = SubpartitionDefinitionContext; 
MySqlParser.PartitionOptionContext = PartitionOptionContext; 
MySqlParser.AlterDatabaseContext = AlterDatabaseContext; 
MySqlParser.AlterEventContext = AlterEventContext; 
MySqlParser.AlterFunctionContext = AlterFunctionContext; 
MySqlParser.AlterInstanceContext = AlterInstanceContext; 
MySqlParser.AlterLogfileGroupContext = AlterLogfileGroupContext; 
MySqlParser.AlterProcedureContext = AlterProcedureContext; 
MySqlParser.AlterServerContext = AlterServerContext; 
MySqlParser.AlterTableContext = AlterTableContext; 
MySqlParser.AlterTablespaceContext = AlterTablespaceContext; 
MySqlParser.AlterViewContext = AlterViewContext; 
MySqlParser.AlterSpecificationContext = AlterSpecificationContext; 
MySqlParser.DropDatabaseContext = DropDatabaseContext; 
MySqlParser.DropEventContext = DropEventContext; 
MySqlParser.DropIndexContext = DropIndexContext; 
MySqlParser.DropLogfileGroupContext = DropLogfileGroupContext; 
MySqlParser.DropProcedureContext = DropProcedureContext; 
MySqlParser.DropFunctionContext = DropFunctionContext; 
MySqlParser.DropServerContext = DropServerContext; 
MySqlParser.DropTableContext = DropTableContext; 
MySqlParser.DropTablespaceContext = DropTablespaceContext; 
MySqlParser.DropTriggerContext = DropTriggerContext; 
MySqlParser.DropViewContext = DropViewContext; 
MySqlParser.RenameTableContext = RenameTableContext; 
MySqlParser.RenameTableClauseContext = RenameTableClauseContext; 
MySqlParser.TruncateTableContext = TruncateTableContext; 
MySqlParser.CallStatementContext = CallStatementContext; 
MySqlParser.DeleteStatementContext = DeleteStatementContext; 
MySqlParser.DoStatementContext = DoStatementContext; 
MySqlParser.HandlerStatementContext = HandlerStatementContext; 
MySqlParser.InsertStatementContext = InsertStatementContext; 
MySqlParser.LoadDataStatementContext = LoadDataStatementContext; 
MySqlParser.LoadXmlStatementContext = LoadXmlStatementContext; 
MySqlParser.ReplaceStatementContext = ReplaceStatementContext; 
MySqlParser.SelectStatementContext = SelectStatementContext; 
MySqlParser.UpdateStatementContext = UpdateStatementContext; 
MySqlParser.InsertStatementValueContext = InsertStatementValueContext; 
MySqlParser.UpdatedElementContext = UpdatedElementContext; 
MySqlParser.AssignmentFieldContext = AssignmentFieldContext; 
MySqlParser.LockClauseContext = LockClauseContext; 
MySqlParser.SingleDeleteStatementContext = SingleDeleteStatementContext; 
MySqlParser.MultipleDeleteStatementContext = MultipleDeleteStatementContext; 
MySqlParser.HandlerOpenStatementContext = HandlerOpenStatementContext; 
MySqlParser.HandlerReadIndexStatementContext = HandlerReadIndexStatementContext; 
MySqlParser.HandlerReadStatementContext = HandlerReadStatementContext; 
MySqlParser.HandlerCloseStatementContext = HandlerCloseStatementContext; 
MySqlParser.SingleUpdateStatementContext = SingleUpdateStatementContext; 
MySqlParser.MultipleUpdateStatementContext = MultipleUpdateStatementContext; 
MySqlParser.OrderByClauseContext = OrderByClauseContext; 
MySqlParser.OrderByExpressionContext = OrderByExpressionContext; 
MySqlParser.TableSourcesContext = TableSourcesContext; 
MySqlParser.TableSourceContext = TableSourceContext; 
MySqlParser.TableSourceItemContext = TableSourceItemContext; 
MySqlParser.IndexHintContext = IndexHintContext; 
MySqlParser.IndexHintTypeContext = IndexHintTypeContext; 
MySqlParser.JoinPartContext = JoinPartContext; 
MySqlParser.QueryExpressionContext = QueryExpressionContext; 
MySqlParser.QueryExpressionNointoContext = QueryExpressionNointoContext; 
MySqlParser.QuerySpecificationContext = QuerySpecificationContext; 
MySqlParser.QuerySpecificationNointoContext = QuerySpecificationNointoContext; 
MySqlParser.UnionParenthesisContext = UnionParenthesisContext; 
MySqlParser.UnionStatementContext = UnionStatementContext; 
MySqlParser.SelectSpecContext = SelectSpecContext; 
MySqlParser.SelectElementsContext = SelectElementsContext; 
MySqlParser.SelectElementContext = SelectElementContext; 
MySqlParser.SelectIntoExpressionContext = SelectIntoExpressionContext; 
MySqlParser.SelectFieldsIntoContext = SelectFieldsIntoContext; 
MySqlParser.SelectLinesIntoContext = SelectLinesIntoContext; 
MySqlParser.FromClauseContext = FromClauseContext; 
MySqlParser.GroupByItemContext = GroupByItemContext; 
MySqlParser.LimitClauseContext = LimitClauseContext; 
MySqlParser.LimitClauseAtomContext = LimitClauseAtomContext; 
MySqlParser.StartTransactionContext = StartTransactionContext; 
MySqlParser.BeginWorkContext = BeginWorkContext; 
MySqlParser.CommitWorkContext = CommitWorkContext; 
MySqlParser.RollbackWorkContext = RollbackWorkContext; 
MySqlParser.SavepointStatementContext = SavepointStatementContext; 
MySqlParser.RollbackStatementContext = RollbackStatementContext; 
MySqlParser.ReleaseStatementContext = ReleaseStatementContext; 
MySqlParser.LockTablesContext = LockTablesContext; 
MySqlParser.UnlockTablesContext = UnlockTablesContext; 
MySqlParser.SetAutocommitStatementContext = SetAutocommitStatementContext; 
MySqlParser.SetTransactionStatementContext = SetTransactionStatementContext; 
MySqlParser.TransactionModeContext = TransactionModeContext; 
MySqlParser.LockTableElementContext = LockTableElementContext; 
MySqlParser.LockActionContext = LockActionContext; 
MySqlParser.TransactionOptionContext = TransactionOptionContext; 
MySqlParser.TransactionLevelContext = TransactionLevelContext; 
MySqlParser.ChangeMasterContext = ChangeMasterContext; 
MySqlParser.ChangeReplicationFilterContext = ChangeReplicationFilterContext; 
MySqlParser.PurgeBinaryLogsContext = PurgeBinaryLogsContext; 
MySqlParser.ResetMasterContext = ResetMasterContext; 
MySqlParser.ResetSlaveContext = ResetSlaveContext; 
MySqlParser.StartSlaveContext = StartSlaveContext; 
MySqlParser.StopSlaveContext = StopSlaveContext; 
MySqlParser.StartGroupReplicationContext = StartGroupReplicationContext; 
MySqlParser.StopGroupReplicationContext = StopGroupReplicationContext; 
MySqlParser.MasterOptionContext = MasterOptionContext; 
MySqlParser.StringMasterOptionContext = StringMasterOptionContext; 
MySqlParser.DecimalMasterOptionContext = DecimalMasterOptionContext; 
MySqlParser.BoolMasterOptionContext = BoolMasterOptionContext; 
MySqlParser.ChannelOptionContext = ChannelOptionContext; 
MySqlParser.ReplicationFilterContext = ReplicationFilterContext; 
MySqlParser.TablePairContext = TablePairContext; 
MySqlParser.ThreadTypeContext = ThreadTypeContext; 
MySqlParser.UntilOptionContext = UntilOptionContext; 
MySqlParser.ConnectionOptionContext = ConnectionOptionContext; 
MySqlParser.GtuidSetContext = GtuidSetContext; 
MySqlParser.XaStartTransactionContext = XaStartTransactionContext; 
MySqlParser.XaEndTransactionContext = XaEndTransactionContext; 
MySqlParser.XaPrepareStatementContext = XaPrepareStatementContext; 
MySqlParser.XaCommitWorkContext = XaCommitWorkContext; 
MySqlParser.XaRollbackWorkContext = XaRollbackWorkContext; 
MySqlParser.XaRecoverWorkContext = XaRecoverWorkContext; 
MySqlParser.PrepareStatementContext = PrepareStatementContext; 
MySqlParser.ExecuteStatementContext = ExecuteStatementContext; 
MySqlParser.DeallocatePrepareContext = DeallocatePrepareContext; 
MySqlParser.RoutineBodyContext = RoutineBodyContext; 
MySqlParser.BlockStatementContext = BlockStatementContext; 
MySqlParser.CaseStatementContext = CaseStatementContext; 
MySqlParser.IfStatementContext = IfStatementContext; 
MySqlParser.IterateStatementContext = IterateStatementContext; 
MySqlParser.LeaveStatementContext = LeaveStatementContext; 
MySqlParser.LoopStatementContext = LoopStatementContext; 
MySqlParser.RepeatStatementContext = RepeatStatementContext; 
MySqlParser.ReturnStatementContext = ReturnStatementContext; 
MySqlParser.WhileStatementContext = WhileStatementContext; 
MySqlParser.CursorStatementContext = CursorStatementContext; 
MySqlParser.DeclareVariableContext = DeclareVariableContext; 
MySqlParser.DeclareConditionContext = DeclareConditionContext; 
MySqlParser.DeclareCursorContext = DeclareCursorContext; 
MySqlParser.DeclareHandlerContext = DeclareHandlerContext; 
MySqlParser.HandlerConditionValueContext = HandlerConditionValueContext; 
MySqlParser.ProcedureSqlStatementContext = ProcedureSqlStatementContext; 
MySqlParser.CaseAlternativeContext = CaseAlternativeContext; 
MySqlParser.ElifAlternativeContext = ElifAlternativeContext; 
MySqlParser.AlterUserContext = AlterUserContext; 
MySqlParser.CreateUserContext = CreateUserContext; 
MySqlParser.DropUserContext = DropUserContext; 
MySqlParser.GrantStatementContext = GrantStatementContext; 
MySqlParser.GrantProxyContext = GrantProxyContext; 
MySqlParser.RenameUserContext = RenameUserContext; 
MySqlParser.RevokeStatementContext = RevokeStatementContext; 
MySqlParser.RevokeProxyContext = RevokeProxyContext; 
MySqlParser.SetPasswordStatementContext = SetPasswordStatementContext; 
MySqlParser.UserSpecificationContext = UserSpecificationContext; 
MySqlParser.UserAuthOptionContext = UserAuthOptionContext; 
MySqlParser.TlsOptionContext = TlsOptionContext; 
MySqlParser.UserResourceOptionContext = UserResourceOptionContext; 
MySqlParser.UserPasswordOptionContext = UserPasswordOptionContext; 
MySqlParser.UserLockOptionContext = UserLockOptionContext; 
MySqlParser.PrivelegeClauseContext = PrivelegeClauseContext; 
MySqlParser.PrivilegeContext = PrivilegeContext; 
MySqlParser.PrivilegeLevelContext = PrivilegeLevelContext; 
MySqlParser.RenameUserClauseContext = RenameUserClauseContext; 
MySqlParser.AnalyzeTableContext = AnalyzeTableContext; 
MySqlParser.CheckTableContext = CheckTableContext; 
MySqlParser.ChecksumTableContext = ChecksumTableContext; 
MySqlParser.OptimizeTableContext = OptimizeTableContext; 
MySqlParser.RepairTableContext = RepairTableContext; 
MySqlParser.CheckTableOptionContext = CheckTableOptionContext; 
MySqlParser.CreateUdfunctionContext = CreateUdfunctionContext; 
MySqlParser.InstallPluginContext = InstallPluginContext; 
MySqlParser.UninstallPluginContext = UninstallPluginContext; 
MySqlParser.SetStatementContext = SetStatementContext; 
MySqlParser.ShowStatementContext = ShowStatementContext; 
MySqlParser.VariableClauseContext = VariableClauseContext; 
MySqlParser.ShowCommonEntityContext = ShowCommonEntityContext; 
MySqlParser.ShowFilterContext = ShowFilterContext; 
MySqlParser.ShowGlobalInfoClauseContext = ShowGlobalInfoClauseContext; 
MySqlParser.ShowSchemaEntityContext = ShowSchemaEntityContext; 
MySqlParser.ShowProfileTypeContext = ShowProfileTypeContext; 
MySqlParser.BinlogStatementContext = BinlogStatementContext; 
MySqlParser.CacheIndexStatementContext = CacheIndexStatementContext; 
MySqlParser.FlushStatementContext = FlushStatementContext; 
MySqlParser.KillStatementContext = KillStatementContext; 
MySqlParser.LoadIndexIntoCacheContext = LoadIndexIntoCacheContext; 
MySqlParser.ResetStatementContext = ResetStatementContext; 
MySqlParser.ShutdownStatementContext = ShutdownStatementContext; 
MySqlParser.TableIndexesContext = TableIndexesContext; 
MySqlParser.FlushOptionContext = FlushOptionContext; 
MySqlParser.FlushTableOptionContext = FlushTableOptionContext; 
MySqlParser.LoadedTableIndexesContext = LoadedTableIndexesContext; 
MySqlParser.SimpleDescribeStatementContext = SimpleDescribeStatementContext; 
MySqlParser.FullDescribeStatementContext = FullDescribeStatementContext; 
MySqlParser.HelpStatementContext = HelpStatementContext; 
MySqlParser.UseStatementContext = UseStatementContext; 
MySqlParser.SignalStatementContext = SignalStatementContext; 
MySqlParser.ResignalStatementContext = ResignalStatementContext; 
MySqlParser.SignalConditionInformationContext = SignalConditionInformationContext; 
MySqlParser.DiagnosticsStatementContext = DiagnosticsStatementContext; 
MySqlParser.DiagnosticsConditionInformationNameContext = DiagnosticsConditionInformationNameContext; 
MySqlParser.DescribeObjectClauseContext = DescribeObjectClauseContext; 
MySqlParser.FullIdContext = FullIdContext; 
MySqlParser.TableNameContext = TableNameContext; 
MySqlParser.FullColumnNameContext = FullColumnNameContext; 
MySqlParser.IndexColumnNameContext = IndexColumnNameContext; 
MySqlParser.UserNameContext = UserNameContext; 
MySqlParser.MysqlVariableContext = MysqlVariableContext; 
MySqlParser.CharsetNameContext = CharsetNameContext; 
MySqlParser.CollationNameContext = CollationNameContext; 
MySqlParser.EngineNameContext = EngineNameContext; 
MySqlParser.UuidSetContext = UuidSetContext; 
MySqlParser.XidContext = XidContext; 
MySqlParser.XuidStringIdContext = XuidStringIdContext; 
MySqlParser.AuthPluginContext = AuthPluginContext; 
MySqlParser.UidContext = UidContext; 
MySqlParser.SimpleIdContext = SimpleIdContext; 
MySqlParser.DottedIdContext = DottedIdContext; 
MySqlParser.DecimalLiteralContext = DecimalLiteralContext; 
MySqlParser.FileSizeLiteralContext = FileSizeLiteralContext; 
MySqlParser.StringLiteralContext = StringLiteralContext; 
MySqlParser.BooleanLiteralContext = BooleanLiteralContext; 
MySqlParser.HexadecimalLiteralContext = HexadecimalLiteralContext; 
MySqlParser.NullNotnullContext = NullNotnullContext; 
MySqlParser.ConstantContext = ConstantContext; 
MySqlParser.DataTypeContext = DataTypeContext; 
MySqlParser.CollectionOptionsContext = CollectionOptionsContext; 
MySqlParser.ConvertedDataTypeContext = ConvertedDataTypeContext; 
MySqlParser.LengthOneDimensionContext = LengthOneDimensionContext; 
MySqlParser.LengthTwoDimensionContext = LengthTwoDimensionContext; 
MySqlParser.LengthTwoOptionalDimensionContext = LengthTwoOptionalDimensionContext; 
MySqlParser.UidListContext = UidListContext; 
MySqlParser.TablesContext = TablesContext; 
MySqlParser.IndexColumnNamesContext = IndexColumnNamesContext; 
MySqlParser.ExpressionsContext = ExpressionsContext; 
MySqlParser.ExpressionsWithDefaultsContext = ExpressionsWithDefaultsContext; 
MySqlParser.ConstantsContext = ConstantsContext; 
MySqlParser.SimpleStringsContext = SimpleStringsContext; 
MySqlParser.UserVariablesContext = UserVariablesContext; 
MySqlParser.DefaultValueContext = DefaultValueContext; 
MySqlParser.CurrentTimestampContext = CurrentTimestampContext; 
MySqlParser.ExpressionOrDefaultContext = ExpressionOrDefaultContext; 
MySqlParser.IfExistsContext = IfExistsContext; 
MySqlParser.IfNotExistsContext = IfNotExistsContext; 
MySqlParser.FunctionCallContext = FunctionCallContext; 
MySqlParser.SpecificFunctionContext = SpecificFunctionContext; 
MySqlParser.CaseFuncAlternativeContext = CaseFuncAlternativeContext; 
MySqlParser.LevelsInWeightStringContext = LevelsInWeightStringContext; 
MySqlParser.LevelInWeightListElementContext = LevelInWeightListElementContext; 
MySqlParser.AggregateWindowedFunctionContext = AggregateWindowedFunctionContext; 
MySqlParser.ScalarFunctionNameContext = ScalarFunctionNameContext; 
MySqlParser.PasswordFunctionClauseContext = PasswordFunctionClauseContext; 
MySqlParser.FunctionArgsContext = FunctionArgsContext; 
MySqlParser.FunctionArgContext = FunctionArgContext; 
MySqlParser.ExpressionContext = ExpressionContext; 
MySqlParser.PredicateContext = PredicateContext; 
MySqlParser.ExpressionAtomContext = ExpressionAtomContext; 
MySqlParser.UnaryOperatorContext = UnaryOperatorContext; 
MySqlParser.ComparisonOperatorContext = ComparisonOperatorContext; 
MySqlParser.LogicalOperatorContext = LogicalOperatorContext; 
MySqlParser.BitOperatorContext = BitOperatorContext; 
MySqlParser.MathOperatorContext = MathOperatorContext; 
MySqlParser.JsonOperatorContext = JsonOperatorContext; 
MySqlParser.CharsetNameBaseContext = CharsetNameBaseContext; 
MySqlParser.TransactionLevelBaseContext = TransactionLevelBaseContext; 
MySqlParser.PrivilegesBaseContext = PrivilegesBaseContext; 
MySqlParser.IntervalTypeBaseContext = IntervalTypeBaseContext; 
MySqlParser.DataTypeBaseContext = DataTypeBaseContext; 
MySqlParser.KeywordsCanBeIdContext = KeywordsCanBeIdContext; 
MySqlParser.FunctionNameBaseContext = FunctionNameBaseContext; 

exports.MySqlParser = MySqlParser
